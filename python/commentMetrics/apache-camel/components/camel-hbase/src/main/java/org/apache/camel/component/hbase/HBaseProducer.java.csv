# id;timestamp;commentText;codeText;commentWords;codeWords
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1338219947;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1338838061;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1339509581;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    ((ModelAwareFilter) filter).apply(endpoint.getCamelContext(), model)__                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,model,aware,filter,filter,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1339614792;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    ((ModelAwareFilter<?>) filter).apply(endpoint.getCamelContext(), model)__                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,model,aware,filter,filter,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1345890859;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    ((ModelAwareFilter<?>) filter).apply(endpoint.getCamelContext(), model)__                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,model,aware,filter,filter,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1353985958;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    ((ModelAwareFilter<?>) filter).apply(endpoint.getCamelContext(), model)__                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,model,aware,filter,filter,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception;1405374721;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param model_@return_@throws Exception;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()__        Scan scan = new Scan()__        if (filters != null && !filters.isEmpty()) {_            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    ((ModelAwareFilter<?>) filter).apply(endpoint.getCamelContext(), model)__                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, filters))__        }_        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        Result result = resultScanner.next()__        while (result != null) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())__                resultRow.getCells().add(resultCell)__                rowSet.add(resultRow)__            }__            result = resultScanner.next()__        }_        return rowSet__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,model,return,throws,exception;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,scan,scan,new,scan,if,filters,null,filters,is,empty,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,model,aware,filter,filter,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,result,result,result,scanner,next,while,result,null,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,result,row,get,cells,add,result,cell,row,set,add,result,row,result,result,scanner,next,return,row,set
HBaseProducer -> private void updateHeaders(Exchange exchange);1338219947;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, HBaseContats.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,contats,null,exchange,get,in,set,header,hbase,contats,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,hbase,contats,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1338838061;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, HBaseContats.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,contats,null,exchange,get,in,set,header,hbase,contats,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,hbase,contats,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1339509581;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, HBaseContats.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,contats,null,exchange,get,in,set,header,hbase,contats,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,hbase,contats,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1339614792;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseContats.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseContats.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseContats.OPERATION, HBaseContats.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,contats,null,exchange,get,in,set,header,hbase,contats,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,contats,operation,null,exchange,get,in,set,header,hbase,contats,operation,hbase,contats,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1345890859;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1353985958;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1405374721;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1423721720;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1438069639;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1448388475;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1448388476;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null &&_                    exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1448389232;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1455178448;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1455178449;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1456416872;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1457533872;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1467029644;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1540108159;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private void updateHeaders(Exchange exchange);1540108163;This methods fill possible gaps in the {@link Exchange} headers, with values passed from the Endpoint.;private void updateHeaders(Exchange exchange) {_        if (exchange != null && exchange.getIn() != null) {_            if (endpoint.getMaxResults() != 0 && exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS) == null) {_                exchange.getIn().setHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS, endpoint.getMaxResults())__            }_            if (endpoint.getMappingStrategyName() != null && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY, endpoint.getMappingStrategyName())__            }__            if (endpoint.getMappingStrategyName() != null_                    && exchange.getIn().getHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME) == null) {_                exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY_CLASS_NAME, endpoint.getMappingStrategyClassName())__            }__            if (endpoint.getOperation() != null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, endpoint.getOperation())__            } else if (endpoint.getOperation() == null && exchange.getIn().getHeader(HBaseConstants.OPERATION) == null) {_                exchange.getIn().setHeader(HBaseConstants.OPERATION, HBaseConstants.PUT)__            }_        }_    };this,methods,fill,possible,gaps,in,the,link,exchange,headers,with,values,passed,from,the,endpoint;private,void,update,headers,exchange,exchange,if,exchange,null,exchange,get,in,null,if,endpoint,get,max,results,0,exchange,get,in,get,header,hbase,constants,null,exchange,get,in,set,header,hbase,constants,endpoint,get,max,results,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,strategy,null,exchange,get,in,set,header,cell,mapping,strategy,factory,strategy,endpoint,get,mapping,strategy,name,if,endpoint,get,mapping,strategy,name,null,exchange,get,in,get,header,cell,mapping,strategy,factory,null,exchange,get,in,set,header,cell,mapping,strategy,factory,endpoint,get,mapping,strategy,class,name,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,endpoint,get,operation,else,if,endpoint,get,operation,null,exchange,get,in,get,header,hbase,constants,operation,null,exchange,get,in,set,header,hbase,constants,operation,hbase,constants,put
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1338219947;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1338838061;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1339509581;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1339614792;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1345890859;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1353985958;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1405374721;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1423721720;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1438069639;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1448388475;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1448388476;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1448389232;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1455178448;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1455178449;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1456416872;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1457533872;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1467029644;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1540108159;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private Delete createDeleteRow(HBaseRow hRow) throws Exception;1540108163;Creates an HBase {@link Delete} on a specific row, using a collection of values (family/column/value pairs).;private Delete createDeleteRow(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        return new Delete(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__    };creates,an,hbase,link,delete,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs;private,delete,create,delete,row,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,return,new,delete,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters) throws Exception;1423721720;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }__        _        if (filters != null && !filters.isEmpty()) {_            List<Filter> clonedFilters = new LinkedList<Filter>()__            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    Object clone = endpoint.getCamelContext().getInjector().newInstance(filter.getClass())__                    if (clone instanceof ModelAwareFilter) {_                        ((ModelAwareFilter<?>) clone).apply(endpoint.getCamelContext(), model)__                        clonedFilters.add((ModelAwareFilter<?>) clone)__                    }_                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, clonedFilters))__        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)).getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,list,filter,cloned,filters,new,linked,list,filter,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,object,clone,endpoint,get,camel,context,get,injector,new,instance,filter,get,class,if,clone,instanceof,model,aware,filter,model,aware,filter,clone,apply,endpoint,get,camel,context,model,cloned,filters,add,model,aware,filter,clone,scan,set,filter,new,filter,list,filter,list,operator,cloned,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters) throws Exception;1438069639;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }__        _        if (filters != null && !filters.isEmpty()) {_            List<Filter> clonedFilters = new LinkedList<Filter>()__            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    Object clone = endpoint.getCamelContext().getInjector().newInstance(filter.getClass())__                    if (clone instanceof ModelAwareFilter) {_                        ((ModelAwareFilter<?>) clone).apply(endpoint.getCamelContext(), model)__                        clonedFilters.add((Filter) clone)__                    }_                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, clonedFilters))__        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)).getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,list,filter,cloned,filters,new,linked,list,filter,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,object,clone,endpoint,get,camel,context,get,injector,new,instance,filter,get,class,if,clone,instanceof,model,aware,filter,model,aware,filter,clone,apply,endpoint,get,camel,context,model,cloned,filters,add,filter,clone,scan,set,filter,new,filter,list,filter,list,operator,cloned,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters) throws Exception;1448388475;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters) throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }__        _        if (filters != null && !filters.isEmpty()) {_            List<Filter> clonedFilters = new LinkedList<Filter>()__            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    Object clone = endpoint.getCamelContext().getInjector().newInstance(filter.getClass())__                    if (clone instanceof ModelAwareFilter) {_                        ((ModelAwareFilter<?>) clone).apply(endpoint.getCamelContext(), model)__                        clonedFilters.add((Filter) clone)__                    }_                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, clonedFilters))__        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)).getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,list,filter,cloned,filters,new,linked,list,filter,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,object,clone,endpoint,get,camel,context,get,injector,new,instance,filter,get,class,if,clone,instanceof,model,aware,filter,model,aware,filter,clone,apply,endpoint,get,camel,context,model,cloned,filters,add,filter,clone,scan,set,filter,new,filter,list,filter,list,operator,cloned,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)             throws Exception;1448388476;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }__        _        if (filters != null && !filters.isEmpty()) {_            List<Filter> clonedFilters = new LinkedList<Filter>()__            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    Object clone = endpoint.getCamelContext().getInjector().newInstance(filter.getClass())__                    if (clone instanceof ModelAwareFilter) {_                        ((ModelAwareFilter<?>) clone).apply(endpoint.getCamelContext(), model)__                        clonedFilters.add((Filter) clone)__                    }_                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, clonedFilters))__        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(_                            result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))_                                    .getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,list,filter,cloned,filters,new,linked,list,filter,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,object,clone,endpoint,get,camel,context,get,injector,new,instance,filter,get,class,if,clone,instanceof,model,aware,filter,model,aware,filter,clone,apply,endpoint,get,camel,context,model,cloned,filters,add,filter,clone,scan,set,filter,new,filter,list,filter,list,operator,cloned,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)             throws Exception;1448389232;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }__        _        if (filters != null && !filters.isEmpty()) {_            List<Filter> clonedFilters = new LinkedList<Filter>()__            for (Filter filter : filters) {_                if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {_                    Object clone = endpoint.getCamelContext().getInjector().newInstance(filter.getClass())__                    if (clone instanceof ModelAwareFilter) {_                        ((ModelAwareFilter<?>) clone).apply(endpoint.getCamelContext(), model)__                        clonedFilters.add((Filter) clone)__                    }_                }_            }_            scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, clonedFilters))__        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(_                            result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))_                                    .getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,list,filter,cloned,filters,new,linked,list,filter,for,filter,filter,filters,if,model,aware,filter,class,is,assignable,from,filter,get,class,object,clone,endpoint,get,camel,context,get,injector,new,instance,filter,get,class,if,clone,instanceof,model,aware,filter,model,aware,filter,clone,apply,endpoint,get,camel,context,model,cloned,filters,add,filter,clone,scan,set,filter,new,filter,list,filter,list,operator,cloned,filters,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)             throws Exception;1455178448;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }_        _        if (filters != null && !filters.isEmpty()) {_        	for (int i=0_i<filters.size()_i++){_        		((ModelAwareFilter<?>) filters.get(i)).apply(endpoint.getCamelContext(), model)__        		scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, ((ModelAwareFilter<?>) filters.get(i)).getFilteredList()))__        	}_        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(_                            result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))_                                    .getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,for,int,i,0,i,filters,size,i,model,aware,filter,filters,get,i,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,model,aware,filter,filters,get,i,get,filtered,list,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)             throws Exception;1455178449;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(HTableInterface table, HBaseRow model, String start, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<HBaseRow>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }__        if (filters != null && !filters.isEmpty()) {_            for (int i = 0_ i < filters.size()_ i++) {_                ((ModelAwareFilter<?>) filters.get(i)).apply(endpoint.getCamelContext(), model)__                scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, ((ModelAwareFilter<?>) filters.get(i)).getFilteredList()))__            }_        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()__                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),_                        result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))))__                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)) != null) {_                    resultCell.setTimestamp(_                            result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))_                                    .getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,htable,interface,table,hbase,row,model,string,start,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,filters,null,filters,is,empty,for,int,i,0,i,filters,size,i,model,aware,filter,filters,get,i,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,model,aware,filter,filters,get,i,get,filtered,list,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,if,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,null,result,cell,set,timestamp,result,get,column,latest,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception;1456416872;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<Cell> kvs = result.getColumnCells(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,table,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,cell,kvs,result,get,column,cells,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception;1457533872;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<Cell> kvs = result.getColumnCells(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,table,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,cell,kvs,result,get,column,cells,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception;1467029644;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.rawCells()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<Cell> kvs = result.getColumnCells(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), CellUtil.cloneValue(kvs.get(0))))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,table,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,cells,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,cell,kvs,result,get,column,cells,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,cell,util,clone,value,kvs,get,0,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception;1540108159;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.rawCells()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<Cell> kvs = result.getColumnCells(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), CellUtil.cloneValue(kvs.get(0))))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,table,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,cells,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,cell,kvs,result,get,column,cells,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,cell,util,clone,value,kvs,get,0,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception;1540108163;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(Table table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.rawCells()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<Cell> kvs = result.getColumnCells(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), CellUtil.cloneValue(kvs.get(0))))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,table,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,cells,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,cell,kvs,result,get,column,cells,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,cell,util,clone,value,kvs,get,0,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1338219947;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1338838061;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1339509581;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1339614792;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1345890859;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1353985958;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1405374721;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1423721720;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1438069639;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1448388475;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column), endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1448388476;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column),_                    endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1448389232;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column),_                    endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1455178448;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column),_                    endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1455178449;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.add(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column),_                    endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value))__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1456416872;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.addColumn(_                HBaseHelper.getHBaseFieldAsBytes(family),_                HBaseHelper.getHBaseFieldAsBytes(column),_                endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value)_            )__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1457533872;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.addColumn(_                HBaseHelper.getHBaseFieldAsBytes(family),_                HBaseHelper.getHBaseFieldAsBytes(column),_                endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value)_            )__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1467029644;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.addColumn(_                HBaseHelper.getHBaseFieldAsBytes(family),_                HBaseHelper.getHBaseFieldAsBytes(column),_                endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value)_            )__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1540108159;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.addColumn(_                HBaseHelper.getHBaseFieldAsBytes(family),_                HBaseHelper.getHBaseFieldAsBytes(column),_                endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value)_            )__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private Put createPut(HBaseRow hRow) throws Exception;1540108163;Creates an HBase {@link Put} on a specific row, using a collection of values (family/column/value pairs).__@param hRow_@throws Exception;private Put createPut(HBaseRow hRow) throws Exception {_        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        Put put = new Put(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cells = hRow.getCells()__        for (HBaseCell cell : cells) {_            String family = cell.getFamily()__            String column = cell.getQualifier()__            Object value = cell.getValue()___            ObjectHelper.notNull(family, "HBase column family", cell)__            ObjectHelper.notNull(column, "HBase column", cell)__            put.addColumn(_                HBaseHelper.getHBaseFieldAsBytes(family),_                HBaseHelper.getHBaseFieldAsBytes(column),_                endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, value)_            )__        }_        return put__    };creates,an,hbase,link,put,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,param,h,row,throws,exception;private,put,create,put,hbase,row,h,row,throws,exception,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,put,put,new,put,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cells,h,row,get,cells,for,hbase,cell,cell,cells,string,family,cell,get,family,string,column,cell,get,qualifier,object,value,cell,get,value,object,helper,not,null,family,hbase,column,family,cell,object,helper,not,null,column,hbase,column,cell,put,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,value,return,put
HBaseProducer -> private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)             throws Exception;1457533872;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }_        _        if (ObjectHelper.isNotEmpty(stop)) {_            scan.setStopRow(Bytes.toBytes(stop))__        }__        if (filters != null && !filters.isEmpty()) {_            for (int i = 0_ i < filters.size()_ i++) {_                ((ModelAwareFilter<?>) filters.get(i)).apply(endpoint.getCamelContext(), model)__                scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, ((ModelAwareFilter<?>) filters.get(i)).getFilteredList()))__            }_        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.raw()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()___                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(_                    model.getRowType(),_                    result.getRow())_                )__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(_                    modelCell.getValueType(),_                    result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)))_                )___                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                Cell cell = result.getColumnLatestCell(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__                if (cell != null) {_                    resultCell.setTimestamp(cell.getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,table,table,hbase,row,model,string,start,string,stop,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,object,helper,is,not,empty,stop,scan,set,stop,row,bytes,to,bytes,stop,if,filters,null,filters,is,empty,for,int,i,0,i,filters,size,i,model,aware,filter,filters,get,i,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,model,aware,filter,filters,get,i,get,filtered,list,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,cell,cell,result,get,column,latest,cell,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,cell,null,result,cell,set,timestamp,cell,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)             throws Exception;1467029644;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }_        _        if (ObjectHelper.isNotEmpty(stop)) {_            scan.setStopRow(Bytes.toBytes(stop))__        }__        if (filters != null && !filters.isEmpty()) {_            for (int i = 0_ i < filters.size()_ i++) {_                ((ModelAwareFilter<?>) filters.get(i)).apply(endpoint.getCamelContext(), model)__                scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, ((ModelAwareFilter<?>) filters.get(i)).getFilteredList()))__            }_        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.rawCells()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()___                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(_                    model.getRowType(),_                    result.getRow())_                )__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(_                    modelCell.getValueType(),_                    result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)))_                )___                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                Cell cell = result.getColumnLatestCell(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__                if (cell != null) {_                    resultCell.setTimestamp(cell.getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,table,table,hbase,row,model,string,start,string,stop,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,object,helper,is,not,empty,stop,scan,set,stop,row,bytes,to,bytes,stop,if,filters,null,filters,is,empty,for,int,i,0,i,filters,size,i,model,aware,filter,filters,get,i,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,model,aware,filter,filters,get,i,get,filtered,list,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,cells,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,cell,cell,result,get,column,latest,cell,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,cell,null,result,cell,set,timestamp,cell,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)             throws Exception;1540108159;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }_        _        if (ObjectHelper.isNotEmpty(stop)) {_            scan.setStopRow(Bytes.toBytes(stop))__        }__        if (filters != null && !filters.isEmpty()) {_            for (int i = 0_ i < filters.size()_ i++) {_                ((ModelAwareFilter<?>) filters.get(i)).apply(endpoint.getCamelContext(), model)__                scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, ((ModelAwareFilter<?>) filters.get(i)).getFilteredList()))__            }_        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.rawCells()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()___                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(_                    model.getRowType(),_                    result.getRow())_                )__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(_                    modelCell.getValueType(),_                    result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)))_                )___                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                Cell cell = result.getColumnLatestCell(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__                if (cell != null) {_                    resultCell.setTimestamp(cell.getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,table,table,hbase,row,model,string,start,string,stop,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,object,helper,is,not,empty,stop,scan,set,stop,row,bytes,to,bytes,stop,if,filters,null,filters,is,empty,for,int,i,0,i,filters,size,i,model,aware,filter,filters,get,i,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,model,aware,filter,filters,get,i,get,filtered,list,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,cells,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,cell,cell,result,get,column,latest,cell,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,cell,null,result,cell,set,timestamp,cell,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)             throws Exception;1540108163;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private List<HBaseRow> scanCells(Table table, HBaseRow model, String start, String stop, Integer maxRowScan, List<Filter> filters)_            throws Exception {_        List<HBaseRow> rowSet = new LinkedList<>()___        HBaseRow startRow = new HBaseRow(model.getCells())__        startRow.setId(start)___        Scan scan__        if (start != null) {_            scan = new Scan(Bytes.toBytes(start))__        } else {_            scan = new Scan()__        }_        _        if (ObjectHelper.isNotEmpty(stop)) {_            scan.setStopRow(Bytes.toBytes(stop))__        }__        if (filters != null && !filters.isEmpty()) {_            for (int i = 0_ i < filters.size()_ i++) {_                ((ModelAwareFilter<?>) filters.get(i)).apply(endpoint.getCamelContext(), model)__                scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL, ((ModelAwareFilter<?>) filters.get(i)).getFilteredList()))__            }_        }__        Set<HBaseCell> cellModels = model.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {_                scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            }_        }__        ResultScanner resultScanner = table.getScanner(scan)__        int count = 0__        Result result = resultScanner.next()___        while (result != null && count < maxRowScan) {_            HBaseRow resultRow = new HBaseRow()__            resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(), result.getRow()))___            resultRow.setTimestamp(result.rawCells()[0].getTimestamp())__            cellModels = model.getCells()__            for (HBaseCell modelCell : cellModels) {_                HBaseCell resultCell = new HBaseCell()__                String family = modelCell.getFamily()__                String column = modelCell.getQualifier()___                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(_                    model.getRowType(),_                    result.getRow())_                )__                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(_                    modelCell.getValueType(),_                    result.getValue(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column)))_                )___                resultCell.setFamily(modelCell.getFamily())__                resultCell.setQualifier(modelCell.getQualifier())___                Cell cell = result.getColumnLatestCell(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__                if (cell != null) {_                    resultCell.setTimestamp(cell.getTimestamp())__                }_                resultRow.getCells().add(resultCell)__            }_            rowSet.add(resultRow)__            count++__            result = resultScanner.next()__        }_        return rowSet__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,list,hbase,row,scan,cells,table,table,hbase,row,model,string,start,string,stop,integer,max,row,scan,list,filter,filters,throws,exception,list,hbase,row,row,set,new,linked,list,hbase,row,start,row,new,hbase,row,model,get,cells,start,row,set,id,start,scan,scan,if,start,null,scan,new,scan,bytes,to,bytes,start,else,scan,new,scan,if,object,helper,is,not,empty,stop,scan,set,stop,row,bytes,to,bytes,stop,if,filters,null,filters,is,empty,for,int,i,0,i,filters,size,i,model,aware,filter,filters,get,i,apply,endpoint,get,camel,context,model,scan,set,filter,new,filter,list,filter,list,operator,model,aware,filter,filters,get,i,get,filtered,list,set,hbase,cell,cell,models,model,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,if,object,helper,is,not,empty,family,object,helper,is,not,empty,column,scan,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,scanner,result,scanner,table,get,scanner,scan,int,count,0,result,result,result,scanner,next,while,result,null,count,max,row,scan,hbase,row,result,row,new,hbase,row,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,row,set,timestamp,result,raw,cells,0,get,timestamp,cell,models,model,get,cells,for,hbase,cell,model,cell,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,model,cell,get,family,string,column,model,cell,get,qualifier,result,row,set,id,endpoint,get,camel,context,get,type,converter,convert,to,model,get,row,type,result,get,row,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,model,cell,get,value,type,result,get,value,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,cell,set,family,model,cell,get,family,result,cell,set,qualifier,model,cell,get,qualifier,cell,cell,result,get,column,latest,cell,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,cell,null,result,cell,set,timestamp,cell,get,timestamp,result,row,get,cells,add,result,cell,row,set,add,result,row,count,result,result,scanner,next,return,row,set
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1338219947;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1338838061;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1339509581;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1339614792;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1345890859;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1353985958;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1405374721;Perfoms an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.__@param table_@param hRow_@return_@throws Exception;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };perfoms,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column,param,table,param,h,row,return,throws,exception;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1423721720;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1438069639;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1448388475;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1448388476;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell_                        .setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1448389232;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell_                        .setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1455178448;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell_                        .setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
HBaseProducer -> private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception;1455178449;Performs an HBase {@link Get} on a specific row, using a collection of values (family/column/value pairs)._The result is <p>the most recent entry</p> for each column.;private HBaseRow getCells(HTableInterface table, HBaseRow hRow) throws Exception {_        HBaseRow resultRow = new HBaseRow()__        List<HBaseCell> resultCells = new LinkedList<HBaseCell>()__        ObjectHelper.notNull(hRow, "HBase row")__        ObjectHelper.notNull(hRow.getId(), "HBase row id")__        ObjectHelper.notNull(hRow.getCells(), "HBase cells")___        resultRow.setId(hRow.getId())__        Get get = new Get(endpoint.getCamelContext().getTypeConverter().convertTo(byte[].class, hRow.getId()))__        Set<HBaseCell> cellModels = hRow.getCells()__        for (HBaseCell cellModel : cellModels) {_            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()___            ObjectHelper.notNull(family, "HBase column family", cellModel)__            ObjectHelper.notNull(column, "HBase column", cellModel)__            get.addColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__        }__        Result result = table.get(get)___        if (!result.isEmpty()) {_            resultRow.setTimestamp(result.raw()[0].getTimestamp())__        }__        for (HBaseCell cellModel : cellModels) {_            HBaseCell resultCell = new HBaseCell()__            String family = cellModel.getFamily()__            String column = cellModel.getQualifier()__            resultCell.setFamily(family)__            resultCell.setQualifier(column)___            List<KeyValue> kvs = result.getColumn(HBaseHelper.getHBaseFieldAsBytes(family), HBaseHelper.getHBaseFieldAsBytes(column))__            if (kvs != null && !kvs.isEmpty()) {_                _                resultCell_                        .setValue(endpoint.getCamelContext().getTypeConverter().convertTo(cellModel.getValueType(), kvs.get(0).getValue()))__                resultCell.setTimestamp(kvs.get(0).getTimestamp())__            }_            resultCells.add(resultCell)__            resultRow.getCells().add(resultCell)__        }_        return resultRow__    };performs,an,hbase,link,get,on,a,specific,row,using,a,collection,of,values,family,column,value,pairs,the,result,is,p,the,most,recent,entry,p,for,each,column;private,hbase,row,get,cells,htable,interface,table,hbase,row,h,row,throws,exception,hbase,row,result,row,new,hbase,row,list,hbase,cell,result,cells,new,linked,list,hbase,cell,object,helper,not,null,h,row,hbase,row,object,helper,not,null,h,row,get,id,hbase,row,id,object,helper,not,null,h,row,get,cells,hbase,cells,result,row,set,id,h,row,get,id,get,get,new,get,endpoint,get,camel,context,get,type,converter,convert,to,byte,class,h,row,get,id,set,hbase,cell,cell,models,h,row,get,cells,for,hbase,cell,cell,model,cell,models,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,object,helper,not,null,family,hbase,column,family,cell,model,object,helper,not,null,column,hbase,column,cell,model,get,add,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,result,result,table,get,get,if,result,is,empty,result,row,set,timestamp,result,raw,0,get,timestamp,for,hbase,cell,cell,model,cell,models,hbase,cell,result,cell,new,hbase,cell,string,family,cell,model,get,family,string,column,cell,model,get,qualifier,result,cell,set,family,family,result,cell,set,qualifier,column,list,key,value,kvs,result,get,column,hbase,helper,get,hbase,field,as,bytes,family,hbase,helper,get,hbase,field,as,bytes,column,if,kvs,null,kvs,is,empty,result,cell,set,value,endpoint,get,camel,context,get,type,converter,convert,to,cell,model,get,value,type,kvs,get,0,get,value,result,cell,set,timestamp,kvs,get,0,get,timestamp,result,cells,add,result,cell,result,row,get,cells,add,result,cell,return,result,row
