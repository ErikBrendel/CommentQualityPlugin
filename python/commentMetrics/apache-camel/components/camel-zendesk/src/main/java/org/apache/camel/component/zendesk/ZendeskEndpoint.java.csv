commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ZendeskComponent getComponent() {     return (ZendeskComponent) super.getComponent(). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new ZendeskProducer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final ZendeskConsumer consumer = new ZendeskConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     super.doStart().     // verify configuration is valid     getZendesk(). }
false;public;0;5;;@Override public void doStop() throws Exception {     IOHelper.close(apiProxy).     super.doStop(). }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<ZendeskConfiguration> getPropertiesHelper() {     return ZendeskPropertiesHelper.getHelper(). }
false;protected;0;3;;protected String getThreadProfileName() {     return ZendeskConstants.THREAD_PROFILE_NAME. }
false;protected;0;3;;@Override protected void afterConfigureProperties() { }
false;public;2;4;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     return getZendesk(). }
false;private;0;10;;private Zendesk getZendesk() {     if (apiProxy == null) {         if (getConfiguration().equals(getComponent().getConfiguration())) {             apiProxy = getComponent().getZendesk().         } else {             apiProxy = ZendeskHelper.create(getConfiguration()).         }     }     return apiProxy. }
