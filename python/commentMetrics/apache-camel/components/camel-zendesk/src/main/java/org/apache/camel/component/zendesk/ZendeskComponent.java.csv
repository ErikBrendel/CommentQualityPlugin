commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected ZendeskApiName getApiName(String apiNameStr) throws IllegalArgumentException {     return ZendeskApiName.fromValue(apiNameStr). }
true;public;1;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public void setConfiguration(ZendeskConfiguration configuration) {     super.setConfiguration(configuration). }
true;public;0;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public ZendeskConfiguration getConfiguration() {     return super.getConfiguration(). }
true;public;0;3;/**  * To use a shared {@link Zendesk} instance.  *  * @return the shared Zendesk instance  */ ;/**  * To use a shared {@link Zendesk} instance.  *  * @return the shared Zendesk instance  */ public Zendesk getZendesk() {     return zendesk. }
false;public;1;3;;public void setZendesk(Zendesk zendesk) {     this.zendesk = zendesk. }
false;protected;4;6;;@Override protected Endpoint createEndpoint(String uri, String methodName, ZendeskApiName apiName, ZendeskConfiguration endpointConfiguration) {     endpointConfiguration.setMethodName(methodName).     return new ZendeskEndpoint(uri, this, apiName, methodName, endpointConfiguration). }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     if (zendesk == null && configuration != null) {         zendesk = ZendeskHelper.create(configuration).     } }
false;protected;0;5;;@Override protected void doStop() throws Exception {     IOHelper.close(zendesk).     super.doStop(). }
false;public;0;5;;@Override public void doShutdown() throws Exception {     IOHelper.close(zendesk).     super.doShutdown(). }
