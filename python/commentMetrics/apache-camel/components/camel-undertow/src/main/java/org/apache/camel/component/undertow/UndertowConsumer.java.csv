# id;timestamp;commentText;codeText;commentWords;codeWords
UndertowConsumer -> public void sendMessage(final String connectionKey, final Object message);1513161172;Create an {@link Exchange} from the associated {@link UndertowEndpoint} and set the {@code in} {@link Message}'s_body to the given {@code message} and {@link UndertowConstants#CONNECTION_KEY} header to the given_{@code connectionKey}.__@param connectionKey an identifier of {@link WebSocketChannel} through which the {@code message} was received_@param message the message received via the {@link WebSocketChannel};public void sendMessage(final String connectionKey, final Object message) {__        final Exchange exchange = getEndpoint().createExchange()___        _        exchange.getIn().setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        exchange.getIn().setBody(message)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange,_                            exchange.getException())__                }_            }_        })__    };create,an,link,exchange,from,the,associated,link,undertow,endpoint,and,set,the,code,in,link,message,s,body,to,the,given,code,message,and,link,undertow,constants,header,to,the,given,code,connection,key,param,connection,key,an,identifier,of,link,web,socket,channel,through,which,the,code,message,was,received,param,message,the,message,received,via,the,link,web,socket,channel;public,void,send,message,final,string,connection,key,final,object,message,final,exchange,exchange,get,endpoint,create,exchange,exchange,get,in,set,header,undertow,constants,connection,key,exchange,get,in,set,body,message,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendMessage(final String connectionKey, final Object message);1535374737;Create an {@link Exchange} from the associated {@link UndertowEndpoint} and set the {@code in} {@link Message}'s_body to the given {@code message} and {@link UndertowConstants#CONNECTION_KEY} header to the given_{@code connectionKey}.__@param connectionKey an identifier of {@link WebSocketChannel} through which the {@code message} was received_@param message the message received via the {@link WebSocketChannel};public void sendMessage(final String connectionKey, final Object message) {__        final Exchange exchange = getEndpoint().createExchange()___        _        exchange.getIn().setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        exchange.getIn().setBody(message)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange,_                            exchange.getException())__                }_            }_        })__    };create,an,link,exchange,from,the,associated,link,undertow,endpoint,and,set,the,code,in,link,message,s,body,to,the,given,code,message,and,link,undertow,constants,header,to,the,given,code,connection,key,param,connection,key,an,identifier,of,link,web,socket,channel,through,which,the,code,message,was,received,param,message,the,message,received,via,the,link,web,socket,channel;public,void,send,message,final,string,connection,key,final,object,message,final,exchange,exchange,get,endpoint,create,exchange,exchange,get,in,set,header,undertow,constants,connection,key,exchange,get,in,set,body,message,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendMessage(final String connectionKey, final Object message);1536687142;Create an {@link Exchange} from the associated {@link UndertowEndpoint} and set the {@code in} {@link Message}'s_body to the given {@code message} and {@link UndertowConstants#CONNECTION_KEY} header to the given_{@code connectionKey}.__@param connectionKey an identifier of {@link WebSocketChannel} through which the {@code message} was received_@param message the message received via the {@link WebSocketChannel};public void sendMessage(final String connectionKey, final Object message) {__        final Exchange exchange = getEndpoint().createExchange()___        _        exchange.getIn().setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        exchange.getIn().setBody(message)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange,_                            exchange.getException())__                }_            }_        })__    };create,an,link,exchange,from,the,associated,link,undertow,endpoint,and,set,the,code,in,link,message,s,body,to,the,given,code,message,and,link,undertow,constants,header,to,the,given,code,connection,key,param,connection,key,an,identifier,of,link,web,socket,channel,through,which,the,code,message,was,received,param,message,the,message,received,via,the,link,web,socket,channel;public,void,send,message,final,string,connection,key,final,object,message,final,exchange,exchange,get,endpoint,create,exchange,exchange,get,in,set,header,undertow,constants,connection,key,exchange,get,in,set,body,message,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendMessage(final String connectionKey, final Object message);1537290824;Create an {@link Exchange} from the associated {@link UndertowEndpoint} and set the {@code in} {@link Message}'s_body to the given {@code message} and {@link UndertowConstants#CONNECTION_KEY} header to the given_{@code connectionKey}.__@param connectionKey an identifier of {@link WebSocketChannel} through which the {@code message} was received_@param message the message received via the {@link WebSocketChannel};public void sendMessage(final String connectionKey, final Object message) {__        final Exchange exchange = getEndpoint().createExchange()___        _        exchange.getIn().setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        exchange.getIn().setBody(message)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange,_                            exchange.getException())__                }_            }_        })__    };create,an,link,exchange,from,the,associated,link,undertow,endpoint,and,set,the,code,in,link,message,s,body,to,the,given,code,message,and,link,undertow,constants,header,to,the,given,code,connection,key,param,connection,key,an,identifier,of,link,web,socket,channel,through,which,the,code,message,was,received,param,message,the,message,received,via,the,link,web,socket,channel;public,void,send,message,final,string,connection,key,final,object,message,final,exchange,exchange,get,endpoint,create,exchange,exchange,get,in,set,header,undertow,constants,connection,key,exchange,get,in,set,body,message,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendMessage(final String connectionKey, final Object message);1540108160;Create an {@link Exchange} from the associated {@link UndertowEndpoint} and set the {@code in} {@link Message}'s_body to the given {@code message} and {@link UndertowConstants#CONNECTION_KEY} header to the given_{@code connectionKey}.__@param connectionKey an identifier of {@link WebSocketChannel} through which the {@code message} was received_@param message the message received via the {@link WebSocketChannel};public void sendMessage(final String connectionKey, final Object message) {__        final Exchange exchange = getEndpoint().createExchange()___        _        exchange.getIn().setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        exchange.getIn().setBody(message)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange,_                            exchange.getException())__                }_            }_        })__    };create,an,link,exchange,from,the,associated,link,undertow,endpoint,and,set,the,code,in,link,message,s,body,to,the,given,code,message,and,link,undertow,constants,header,to,the,given,code,connection,key,param,connection,key,an,identifier,of,link,web,socket,channel,through,which,the,code,message,was,received,param,message,the,message,received,via,the,link,web,socket,channel;public,void,send,message,final,string,connection,key,final,object,message,final,exchange,exchange,get,endpoint,create,exchange,exchange,get,in,set,header,undertow,constants,connection,key,exchange,get,in,set,body,message,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendMessage(final String connectionKey, final Object message);1540108163;Create an {@link Exchange} from the associated {@link UndertowEndpoint} and set the {@code in} {@link Message}'s_body to the given {@code message} and {@link UndertowConstants#CONNECTION_KEY} header to the given_{@code connectionKey}.__@param connectionKey an identifier of {@link WebSocketChannel} through which the {@code message} was received_@param message the message received via the {@link WebSocketChannel};public void sendMessage(final String connectionKey, final Object message) {__        final Exchange exchange = getEndpoint().createExchange()___        _        exchange.getIn().setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        exchange.getIn().setBody(message)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange,_                            exchange.getException())__                }_            }_        })__    };create,an,link,exchange,from,the,associated,link,undertow,endpoint,and,set,the,code,in,link,message,s,body,to,the,given,code,message,and,link,undertow,constants,header,to,the,given,code,connection,key,param,connection,key,an,identifier,of,link,web,socket,channel,through,which,the,code,message,was,received,param,message,the,message,received,via,the,link,web,socket,channel;public,void,send,message,final,string,connection,key,final,object,message,final,exchange,exchange,get,endpoint,create,exchange,exchange,get,in,set,header,undertow,constants,connection,key,exchange,get,in,set,body,message,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendEventNotification(String connectionKey, EventType eventType);1513161172;Send a notification related a WebSocket peer.__@param connectionKey of WebSocket peer_@param eventType the type of the event;public void sendEventNotification(String connectionKey, EventType eventType) {_        final Exchange exchange = getEndpoint().createExchange()___        final Message in = exchange.getIn()__        in.setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        in.setHeader(UndertowConstants.EVENT_TYPE, eventType.getCode())__        in.setHeader(UndertowConstants.EVENT_TYPE_ENUM, eventType)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__                }_            }_        })__    };send,a,notification,related,a,web,socket,peer,param,connection,key,of,web,socket,peer,param,event,type,the,type,of,the,event;public,void,send,event,notification,string,connection,key,event,type,event,type,final,exchange,exchange,get,endpoint,create,exchange,final,message,in,exchange,get,in,in,set,header,undertow,constants,connection,key,in,set,header,undertow,constants,event,type,get,code,in,set,header,undertow,constants,event,type,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendEventNotification(String connectionKey, EventType eventType);1535374737;Send a notification related a WebSocket peer.__@param connectionKey of WebSocket peer_@param eventType the type of the event;public void sendEventNotification(String connectionKey, EventType eventType) {_        final Exchange exchange = getEndpoint().createExchange()___        final Message in = exchange.getIn()__        in.setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        in.setHeader(UndertowConstants.EVENT_TYPE, eventType.getCode())__        in.setHeader(UndertowConstants.EVENT_TYPE_ENUM, eventType)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__                }_            }_        })__    };send,a,notification,related,a,web,socket,peer,param,connection,key,of,web,socket,peer,param,event,type,the,type,of,the,event;public,void,send,event,notification,string,connection,key,event,type,event,type,final,exchange,exchange,get,endpoint,create,exchange,final,message,in,exchange,get,in,in,set,header,undertow,constants,connection,key,in,set,header,undertow,constants,event,type,get,code,in,set,header,undertow,constants,event,type,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendEventNotification(String connectionKey, EventType eventType);1536687142;Send a notification related a WebSocket peer.__@param connectionKey of WebSocket peer_@param eventType the type of the event;public void sendEventNotification(String connectionKey, EventType eventType) {_        final Exchange exchange = getEndpoint().createExchange()___        final Message in = exchange.getIn()__        in.setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        in.setHeader(UndertowConstants.EVENT_TYPE, eventType.getCode())__        in.setHeader(UndertowConstants.EVENT_TYPE_ENUM, eventType)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__                }_            }_        })__    };send,a,notification,related,a,web,socket,peer,param,connection,key,of,web,socket,peer,param,event,type,the,type,of,the,event;public,void,send,event,notification,string,connection,key,event,type,event,type,final,exchange,exchange,get,endpoint,create,exchange,final,message,in,exchange,get,in,in,set,header,undertow,constants,connection,key,in,set,header,undertow,constants,event,type,get,code,in,set,header,undertow,constants,event,type,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendEventNotification(String connectionKey, EventType eventType);1537290824;Send a notification related a WebSocket peer.__@param connectionKey of WebSocket peer_@param eventType the type of the event;public void sendEventNotification(String connectionKey, EventType eventType) {_        final Exchange exchange = getEndpoint().createExchange()___        final Message in = exchange.getIn()__        in.setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        in.setHeader(UndertowConstants.EVENT_TYPE, eventType.getCode())__        in.setHeader(UndertowConstants.EVENT_TYPE_ENUM, eventType)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__                }_            }_        })__    };send,a,notification,related,a,web,socket,peer,param,connection,key,of,web,socket,peer,param,event,type,the,type,of,the,event;public,void,send,event,notification,string,connection,key,event,type,event,type,final,exchange,exchange,get,endpoint,create,exchange,final,message,in,exchange,get,in,in,set,header,undertow,constants,connection,key,in,set,header,undertow,constants,event,type,get,code,in,set,header,undertow,constants,event,type,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendEventNotification(String connectionKey, EventType eventType);1540108160;Send a notification related a WebSocket peer.__@param connectionKey of WebSocket peer_@param eventType the type of the event;public void sendEventNotification(String connectionKey, EventType eventType) {_        final Exchange exchange = getEndpoint().createExchange()___        final Message in = exchange.getIn()__        in.setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        in.setHeader(UndertowConstants.EVENT_TYPE, eventType.getCode())__        in.setHeader(UndertowConstants.EVENT_TYPE_ENUM, eventType)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__                }_            }_        })__    };send,a,notification,related,a,web,socket,peer,param,connection,key,of,web,socket,peer,param,event,type,the,type,of,the,event;public,void,send,event,notification,string,connection,key,event,type,event,type,final,exchange,exchange,get,endpoint,create,exchange,final,message,in,exchange,get,in,in,set,header,undertow,constants,connection,key,in,set,header,undertow,constants,event,type,get,code,in,set,header,undertow,constants,event,type,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
UndertowConsumer -> public void sendEventNotification(String connectionKey, EventType eventType);1540108163;Send a notification related a WebSocket peer.__@param connectionKey of WebSocket peer_@param eventType the type of the event;public void sendEventNotification(String connectionKey, EventType eventType) {_        final Exchange exchange = getEndpoint().createExchange()___        final Message in = exchange.getIn()__        in.setHeader(UndertowConstants.CONNECTION_KEY, connectionKey)__        in.setHeader(UndertowConstants.EVENT_TYPE, eventType.getCode())__        in.setHeader(UndertowConstants.EVENT_TYPE_ENUM, eventType)___        _        getAsyncProcessor().process(exchange, new AsyncCallback() {_            public void done(boolean doneSync) {_                if (exchange.getException() != null) {_                    getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException())__                }_            }_        })__    };send,a,notification,related,a,web,socket,peer,param,connection,key,of,web,socket,peer,param,event,type,the,type,of,the,event;public,void,send,event,notification,string,connection,key,event,type,event,type,final,exchange,exchange,get,endpoint,create,exchange,final,message,in,exchange,get,in,in,set,header,undertow,constants,connection,key,in,set,header,undertow,constants,event,type,get,code,in,set,header,undertow,constants,event,type,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,done,sync,if,exchange,get,exception,null,get,exception,handler,handle,exception,error,processing,exchange,exchange,exchange,get,exception
