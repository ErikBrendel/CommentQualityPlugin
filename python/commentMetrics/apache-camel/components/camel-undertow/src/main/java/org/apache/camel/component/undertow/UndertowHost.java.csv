commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Validate whether this host can process the given URI  */ ;/**  * Validate whether this host can process the given URI  */ void validateEndpointURI(URI httpURI).
true;;2;1;/**  * Register a handler with the given {@link HttpHandlerRegistrationInfo}. Note that for some kinds of handlers (most  * notably {@link CamelWebSocketHandler}), it is legal to call this method multiple times with equal  * {@link HttpHandlerRegistrationInfo} and {@link HttpHandler}. In such cases the returned {@link HttpHandler} may  * differ from the passed {@link HttpHandler} and the returned instance is the effectively registered one for the  * given {@link HttpHandlerRegistrationInfo}.  *  * @param registrationInfo  *            the {@link HttpHandlerRegistrationInfo} related to {@code handler}  * @param handler  *            the {@link HttpHandler} to register  * @return the given {@code handler} or a different {@link HttpHandler} that has been registered with the given  *         {@link HttpHandlerRegistrationInfo} earlier.  */ ;/**  * Register a handler with the given {@link HttpHandlerRegistrationInfo}. Note that for some kinds of handlers (most  * notably {@link CamelWebSocketHandler}), it is legal to call this method multiple times with equal  * {@link HttpHandlerRegistrationInfo} and {@link HttpHandler}. In such cases the returned {@link HttpHandler} may  * differ from the passed {@link HttpHandler} and the returned instance is the effectively registered one for the  * given {@link HttpHandlerRegistrationInfo}.  *  * @param registrationInfo  *            the {@link HttpHandlerRegistrationInfo} related to {@code handler}  * @param handler  *            the {@link HttpHandler} to register  * @return the given {@code handler} or a different {@link HttpHandler} that has been registered with the given  *         {@link HttpHandlerRegistrationInfo} earlier.  */ HttpHandler registerHandler(HttpHandlerRegistrationInfo registrationInfo, HttpHandler handler).
true;;1;1;/**  * Unregister a handler with the given {@link HttpHandlerRegistrationInfo}. Note that if  * {@link #registerHandler(HttpHandlerRegistrationInfo, HttpHandler)} was successfully invoked multiple times for an  * equivalent {@link HttpHandlerRegistrationInfo} then {@link #unregisterHandler(HttpHandlerRegistrationInfo)} must  * be called the same number of times to unregister the associated handler completely.  */ ;/**  * Unregister a handler with the given {@link HttpHandlerRegistrationInfo}. Note that if  * {@link #registerHandler(HttpHandlerRegistrationInfo, HttpHandler)} was successfully invoked multiple times for an  * equivalent {@link HttpHandlerRegistrationInfo} then {@link #unregisterHandler(HttpHandlerRegistrationInfo)} must  * be called the same number of times to unregister the associated handler completely.  */ void unregisterHandler(HttpHandlerRegistrationInfo registrationInfo).
