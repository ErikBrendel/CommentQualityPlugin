commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void handleRequest(HttpServerExchange exchange) throws Exception {     delegate.handleRequest(exchange). }
false;public,synchronized;2;6;;public synchronized CamelPathTemplateHandler add(final String uriTemplate, final CamelMethodHandler handler) {     delegate.add(uriTemplate, handler).     handlers.put(uriTemplate, handler).     handlerString = null.     return this. }
false;public,synchronized;1;6;;public synchronized CamelPathTemplateHandler remove(final String uriTemplate) {     delegate.remove(uriTemplate).     handlers.remove(uriTemplate).     handlerString = null.     return this. }
false;public;1;3;;public CamelMethodHandler get(final String uriTemplate) {     return handlers.get(uriTemplate). }
false;public;0;3;;public boolean isEmpty() {     return handlers.isEmpty(). }
false;public;0;3;;public CamelMethodHandler getDefault() {     return this.defaultHandlerWrapper.get(). }
false;public,synchronized;1;4;;public synchronized void setDefault(final CamelMethodHandler defaultHandler) {     this.defaultHandlerWrapper.set(defaultHandler).     handlerString = null. }
false;public;0;6;;public String toString() {     if (handlerString == null) {         handlerString = "CamelPathTemplateHandler[default=" + defaultHandlerWrapper.get() + ", " + handlers + "]".     }     return handlerString. }
false;public;1;3;;public void set(CamelMethodHandler handler) {     this.handler = handler. }
false;public;0;3;;public CamelMethodHandler get() {     return this.handler. }
false;public;1;4;;@Override public void handleRequest(HttpServerExchange exchange) throws Exception {     handler.handleRequest(exchange). }
