commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testUndertowProducerGet() throws Exception {     String out = template.requestBody("undertow:http://localhost:{{port}}/users/123/basic", null, String.class).     assertEquals("123.Donald Duck", out). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;13;;public void configure() {     restConfiguration().component("undertow").host("localhost").port(getPort()).     rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             restConfiguration().component("undertow").host("localhost").port(getPort()).             rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).         }     }. }
