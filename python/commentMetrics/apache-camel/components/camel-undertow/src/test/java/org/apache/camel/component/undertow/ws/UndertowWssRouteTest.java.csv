commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void setUpJaas() throws Exception {     URL trustStoreUrl = UndertowHttpsSpringTest.class.getClassLoader().getResource("ssl/keystore.jks").     System.setProperty("javax.net.ssl.trustStore", trustStoreUrl.toURI().getPath()). }
false;public,static;0;4;;@AfterClass public static void tearDownJaas() throws Exception {     System.clearProperty("java.security.auth.login.config"). }
false;protected;0;27;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource("ssl/keystore.jks").     ksp.setPassword("password").     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword("password").     kmp.setKeyStore(ksp).     TrustManagersParameters tmp = new TrustManagersParameters().     tmp.setKeyStore(ksp).     // NOTE: Needed since the client uses a loose trust configuration when no ssl context     // is provided.  We turn on WANT client-auth to prefer using authentication     SSLContextServerParameters scsp = new SSLContextServerParameters().     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     sslContextParameters.setTrustManagers(tmp).     sslContextParameters.setServerParameters(scsp).     context.setSSLContextParameters(sslContextParameters).     ((SSLContextParametersAware) context.getComponent("undertow")).setUseGlobalSslContextParameters(true).     return context. }
false;protected;0;20;;protected AsyncHttpClient createAsyncHttpSSLClient() throws IOException, GeneralSecurityException {     AsyncHttpClient c.     AsyncHttpClientConfig config.     DefaultAsyncHttpClientConfig.Builder builder = new DefaultAsyncHttpClientConfig.Builder().     SslContext sslContext = SslContextBuilder.forClient().sslProvider(SslProvider.JDK).trustManager(InsecureTrustManagerFactory.INSTANCE).build().     builder.setSslContext(sslContext).     builder.setUseInsecureTrustManager(true).     config = builder.build().     c = new DefaultAsyncHttpClient(config).     return c. }
false;public;3;6;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;3;3;;@Override public void onClose(WebSocket websocket, int code, String reason) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;45;;@Test public void testWSHttpCall() throws Exception {     final List<String> received = new ArrayList<>().     final CountDownLatch latch = new CountDownLatch(10).     AsyncHttpClient c = createAsyncHttpSSLClient().     WebSocket websocket = c.prepareGet("wss://localhost:" + getPort() + "/test").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {          @Override         public void onTextFrame(String message, boolean finalFragment, int rsv) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket, int code, String reason) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     getMockEndpoint("mock:client").expectedBodiesReceived("Hello from WS client").     websocket.sendTextFrame("Hello from WS client").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied().     assertEquals(10, received.size()).     for (int i = 0. i < 10. i++) {         assertEquals(">> Welcome on board!", received.get(i)).     }     websocket.sendCloseFrame().     c.close(). }
false;public;0;8;;public void configure() {     from("undertow:ws://localhost:" + getPort() + "/test").log(">>> Message received from WebSocket Client : ${body}").to("mock:client").loop(10).setBody().constant(">> Welcome on board!").to("undertow:ws://localhost:" + getPort() + "/test"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("undertow:ws://localhost:" + getPort() + "/test").log(">>> Message received from WebSocket Client : ${body}").to("mock:client").loop(10).setBody().constant(">> Welcome on board!").to("undertow:ws://localhost:" + getPort() + "/test").         }     }. }
