commented;modifiers;parameterAmount;loc;comment;code
false;public;3;6;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;3;3;;@Override public void onClose(WebSocket websocket, int code, String reason) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;3;6;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;3;3;;@Override public void onClose(WebSocket websocket, int code, String reason) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;84;;@Test public void testWSHttpCallEcho() throws Exception {     // We call the route WebSocket BAR     {         final List<String> received = new ArrayList<>().         final CountDownLatch latch = new CountDownLatch(1).         final AsyncHttpClient c = new DefaultAsyncHttpClient().         final WebSocket websocket = c.prepareGet("ws://localhost:" + getPort() + "/bar").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {              @Override             public void onTextFrame(String message, boolean finalFragment, int rsv) {                 received.add(message).                 log.info("received --> " + message).                 latch.countDown().             }              @Override             public void onOpen(WebSocket websocket) {             }              @Override             public void onClose(WebSocket websocket, int code, String reason) {             }              @Override             public void onError(Throwable t) {                 t.printStackTrace().             }         }).build()).get().         websocket.sendTextFrame("Beer").         assertTrue(latch.await(10, TimeUnit.SECONDS)).         assertEquals(1, received.size()).         assertEquals("The bar has Beer", received.get(0)).         websocket.sendCloseFrame().         c.close().     }     // We call the route WebSocket PUB     {         final List<String> received = new ArrayList<>().         final CountDownLatch latch = new CountDownLatch(1).         final AsyncHttpClient c = new DefaultAsyncHttpClient().         final WebSocket websocket = c.prepareGet("ws://localhost:" + getPort() + "/pub").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {              @Override             public void onTextFrame(String message, boolean finalFragment, int rsv) {                 received.add(message).                 log.info("received --> " + message).                 latch.countDown().             }              @Override             public void onOpen(WebSocket websocket) {             }              @Override             public void onClose(WebSocket websocket, int code, String reason) {             }              @Override             public void onError(Throwable t) {                 t.printStackTrace().             }         }).build()).get().         websocket.sendTextFrame("wine").         assertTrue(latch.await(10, TimeUnit.SECONDS)).         assertEquals(1, received.size()).         assertEquals("The pub has wine", received.get(0)).         websocket.sendCloseFrame().         c.close().     } }
false;public;0;13;;public void configure() {     int port = getPort().     from("undertow:ws://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("undertow:ws://localhost:" + port + "/bar").     from("undertow:ws://localhost:" + port + "/pub").log(">>> Message received from PUB WebSocket Client : ${body}").transform().simple("The pub has ${body}").to("undertow:ws://localhost:" + port + "/pub"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             int port = getPort().             from("undertow:ws://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("undertow:ws://localhost:" + port + "/bar").             from("undertow:ws://localhost:" + port + "/pub").log(">>> Message received from PUB WebSocket Client : ${body}").transform().simple("The pub has ${body}").to("undertow:ws://localhost:" + port + "/pub").         }     }. }
