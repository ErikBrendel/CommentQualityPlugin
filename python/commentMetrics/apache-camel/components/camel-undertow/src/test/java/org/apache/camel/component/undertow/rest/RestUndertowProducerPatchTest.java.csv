commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testUndertowProducerPatch() throws Exception {     String body = "Donald Duck".     String id = "123".     MockEndpoint mock = getMockEndpoint("mock:input").     mock.message(0).body().isEqualTo(body).     mock.message(0).header("id").isEqualTo(id).     fluentTemplate.withBody(body).withHeader("id", id).to("direct:start").send().     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     // configure to use localhost with the given port     restConfiguration().component("undertow").host("localhost").port(getPort()).     from("direct:start").to("rest:patch:users/{id}").     // use the rest DSL to define the rest services     rest("/users/").patch("{id}").to("mock:input"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use localhost with the given port             restConfiguration().component("undertow").host("localhost").port(getPort()).             from("direct:start").to("rest:patch:users/{id}").             // use the rest DSL to define the rest services             rest("/users/").patch("{id}").to("mock:input").         }     }. }
