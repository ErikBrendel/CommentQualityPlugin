commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testCustomCall() throws Exception {     Assert.assertEquals("8081", template.requestBody("direct:custom", "hello", String.class)).     Assert.assertEquals("8082", template.requestBody("direct:custom", "hello", String.class)). }
false;public;0;8;;@Test public void testDefaultSchema() throws Exception {     try {         Assert.assertEquals("8081", template.requestBody("direct:default", "hello", String.class)).     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof ResolveEndpointFailedException).     } }
false;public;0;24;;@Override public void configure() throws Exception {     from("direct:custom").serviceCall().name("myService").component("undertow").staticServiceDiscovery().servers("myService@localhost:8081").servers("myService@localhost:8082").endParent().     from("direct:default").serviceCall().name("myService").staticServiceDiscovery().servers("myService@localhost:8081").servers("myService@localhost:8082").endParent().     from("undertow:http://localhost:8081").transform().constant("8081").     from("undertow:http://localhost:8082").transform().constant("8082"). }
false;protected;0;29;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:custom").serviceCall().name("myService").component("undertow").staticServiceDiscovery().servers("myService@localhost:8081").servers("myService@localhost:8082").endParent().             from("direct:default").serviceCall().name("myService").staticServiceDiscovery().servers("myService@localhost:8081").servers("myService@localhost:8082").endParent().             from("undertow:http://localhost:8081").transform().constant("8081").             from("undertow:http://localhost:8082").transform().constant("8082").         }     }. }
