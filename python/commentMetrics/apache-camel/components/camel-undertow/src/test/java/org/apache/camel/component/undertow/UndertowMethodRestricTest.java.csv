commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void init() {     url = "http://localhost:" + getPort() + "/methodRestrict". }
false;public;0;15;;@Test public void testProperHttpMethod() throws Exception {     HttpClient httpClient = new HttpClient().     PostMethod httpPost = new PostMethod(url).     StringRequestEntity reqEntity = new StringRequestEntity("This is a test", null, null).     httpPost.setRequestEntity(reqEntity).     int status = httpClient.executeMethod(httpPost).     assertEquals(200, status).     String result = httpPost.getResponseBodyAsString().     assertEquals("This is a test response", result). }
false;public;0;8;;@Test public void testImproperHttpMethod() throws Exception {     HttpClient httpClient = new HttpClient().     GetMethod httpGet = new GetMethod(url).     int status = httpClient.executeMethod(httpGet).     assertEquals("Get a wrong response status", 405, status). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     String request = in.getBody(String.class).     exchange.getOut().setBody(request + " response"). }
false;public;0;10;;@Override public void configure() throws Exception {     from("undertow://http://localhost:{{port}}/methodRestrict?httpMethodRestrict=POST").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             String request = in.getBody(String.class).             exchange.getOut().setBody(request + " response").         }     }). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("undertow://http://localhost:{{port}}/methodRestrict?httpMethodRestrict=POST").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     String request = in.getBody(String.class).                     exchange.getOut().setBody(request + " response").                 }             }).         }     }. }
