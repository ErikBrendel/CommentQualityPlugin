commented;modifiers;parameterAmount;loc;comment;code
false;public;3;6;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;3;3;;@Override public void onClose(WebSocket websocket, int code, String reason) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;45;;@Test public void testWSHttpCallEcho() throws Exception {     // We call the route WebSocket BAR     final List<String> received = new ArrayList<>().     final CountDownLatch latch = new CountDownLatch(2).     DefaultAsyncHttpClient c = new DefaultAsyncHttpClient().     WebSocket websocket = c.prepareGet("ws://localhost:" + getPort() + "/bar").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {          @Override         public void onTextFrame(String message, boolean finalFragment, int rsv) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket, int code, String reason) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     websocket.sendTextFrame("Beer").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertEquals(2, received.size()).     // Cannot guarantee the order in which messages are received     assertTrue(received.contains("The bar has Beer")).     assertTrue(received.contains("Broadcasting to Bar")).     websocket.sendCloseFrame().     c.close(). }
false;public;0;15;;public void configure() {     final int port = getPort().     from("undertow:ws://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("undertow:ws://localhost:" + port + "/bar").     from("timer://foo?fixedRate=true&period=12000").setBody(constant("Broadcasting to Bar")).log(">>> Broadcasting message to Bar WebSocket Client").setHeader(UndertowConstants.SEND_TO_ALL, constant(true)).to("undertow:ws://localhost:" + port + "/bar"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             final int port = getPort().             from("undertow:ws://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("undertow:ws://localhost:" + port + "/bar").             from("timer://foo?fixedRate=true&period=12000").setBody(constant("Broadcasting to Bar")).log(">>> Broadcasting message to Bar WebSocket Client").setHeader(UndertowConstants.SEND_TO_ALL, constant(true)).to("undertow:ws://localhost:" + port + "/bar").         }     }. }
