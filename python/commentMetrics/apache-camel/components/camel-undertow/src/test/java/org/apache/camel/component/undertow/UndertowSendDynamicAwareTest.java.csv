commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testDynamicAware() throws Exception {     String out = fluentTemplate.to("direct:moes").withHeader("drink", "beer").request(String.class).     assertEquals("Drinking beer", out).     out = fluentTemplate.to("direct:joes").withHeader("drink", "wine").request(String.class).     assertEquals("Drinking wine", out).     // and there should only be one http endpoint as they are both on same host     boolean found = context.getEndpointMap().containsKey("undertow://http://localhost:" + getPort() + "?throwExceptionOnFailure=false").     assertTrue("Should find static uri", found).     // we only have 2xdirect and 2xundertow     assertEquals(4, context.getEndpointMap().size()). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:moes").toD("undertow:http://localhost:{{port}}/moes?throwExceptionOnFailure=false&drink=${header.drink}").     from("direct:joes").toD("undertow:http://localhost:{{port}}/joes?throwExceptionOnFailure=false&drink=${header.drink}").     // TODO: Fix the double header     from("undertow:http://localhost:{{port}}/?matchOnUriPrefix=true").transform().simple("Drinking ${header.drink[0]}"). }
false;protected;0;17;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:moes").toD("undertow:http://localhost:{{port}}/moes?throwExceptionOnFailure=false&drink=${header.drink}").             from("direct:joes").toD("undertow:http://localhost:{{port}}/joes?throwExceptionOnFailure=false&drink=${header.drink}").             // TODO: Fix the double header             from("undertow:http://localhost:{{port}}/?matchOnUriPrefix=true").transform().simple("Drinking ${header.drink[0]}").         }     }. }
