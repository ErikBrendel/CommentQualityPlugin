commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void initPort() throws Exception {     port = AvailablePortFinder.getNextAvailable(24000). }
false;public;0;7;;@Test public void testNoSession() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("New New World", "New New World").     template.sendBody("direct:start", "World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testInstanceSession() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Old New World", "Old Old World").     template.sendBody("direct:instance", "World").     template.sendBody("direct:instance", "World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testExchangeSession() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Old New World", "Old New World").     template.sendBody("direct:exchange", "World").     template.sendBody("direct:exchange", "World").     assertMockEndpointsSatisfied(). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndiRegistry = super.createRegistry().     jndiRegistry.bind("instanceCookieHandler", new InstanceCookieHandler()).     jndiRegistry.bind("exchangeCookieHandler", new ExchangeCookieHandler()).     return jndiRegistry. }
false;private;0;4;;private String getTestServerEndpointSessionUrl() {     // session handling will not work for localhost     return "http://127.0.0.1:" + port + "/session". }
false;private;0;3;;private String getTestServerEndpointSessionUri() {     return "undertow:" + getTestServerEndpointSessionUrl() + "?sessionSupport=true". }
false;public;1;14;;@Override public void process(Exchange exchange) throws Exception {     Message message = exchange.getIn().     String body = message.getBody(String.class).     // cookies, so we fake them     if (message.getHeader("Cookie") != null && message.getHeader("Cookie", String.class).contains("JSESSIONID")) {         message.setBody("Old " + body).     } else {         message.setHeader("Set-Cookie", "JSESSIONID=nxojb3aum8i5100j6lyvxdpn6.Path=/").         message.setHeader("Expires", "Thu, 01 Jan 1970 00:00:00 GMT").         message.setBody("New " + body).     } }
false;public;0;35;;@Override public void configure() throws Exception {     from("direct:start").to("undertow:" + getTestServerEndpointSessionUrl()).to("undertow:" + getTestServerEndpointSessionUrl()).to("mock:result").     from("direct:instance").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("mock:result").     from("direct:exchange").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("mock:result").     from(getTestServerEndpointSessionUri()).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Message message = exchange.getIn().             String body = message.getBody(String.class).             // cookies, so we fake them             if (message.getHeader("Cookie") != null && message.getHeader("Cookie", String.class).contains("JSESSIONID")) {                 message.setBody("Old " + body).             } else {                 message.setHeader("Set-Cookie", "JSESSIONID=nxojb3aum8i5100j6lyvxdpn6.Path=/").                 message.setHeader("Expires", "Thu, 01 Jan 1970 00:00:00 GMT").                 message.setBody("New " + body).             }         }     }). }
false;protected;0;40;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("undertow:" + getTestServerEndpointSessionUrl()).to("undertow:" + getTestServerEndpointSessionUrl()).to("mock:result").             from("direct:instance").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#instanceCookieHandler").to("mock:result").             from("direct:exchange").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("undertow:" + getTestServerEndpointSessionUrl() + "?cookieHandler=#exchangeCookieHandler").to("mock:result").             from(getTestServerEndpointSessionUri()).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Message message = exchange.getIn().                     String body = message.getBody(String.class).                     // cookies, so we fake them                     if (message.getHeader("Cookie") != null && message.getHeader("Cookie", String.class).contains("JSESSIONID")) {                         message.setBody("Old " + body).                     } else {                         message.setHeader("Set-Cookie", "JSESSIONID=nxojb3aum8i5100j6lyvxdpn6.Path=/").                         message.setHeader("Expires", "Thu, 01 Jan 1970 00:00:00 GMT").                         message.setBody("New " + body).                     }                 }             }).         }     }. }
