commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testFailWithoutException() throws Exception {     String out = template().requestBody("undertow:http://localhost:{{port}}/fail?throwExceptionOnFailure=false", null, String.class).     assertEquals("Fail", out). }
false;public;0;10;;@Test public void testFailWithException() throws Exception {     try {         template().requestBody("undertow:http://localhost:{{port}}/fail?throwExceptionOnFailure=true", null, String.class).         fail("Should throw an exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(404, cause.getStatusCode()).     } }
false;public;0;15;;@Test public void testFailWithException2() throws Exception {     try {         fluentTemplate().to("undertow:http://localhost:{{port2}}/test/fail?throwExceptionOnFailure=true").withHeader(Exchange.HTTP_METHOD, "PUT").withBody("This is not JSON format").request(String.class).         fail("Should throw an exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException httpException = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(400, httpException.getStatusCode()).         assertEquals("text/plain", httpException.getResponseHeaders().get(Exchange.CONTENT_TYPE)).         assertEquals("Invalid json data", httpException.getResponseBody()).     } }
false;public;0;19;;@Override public void configure() throws Exception {     restConfiguration().component("undertow").port(getPort2()).bindingMode(RestBindingMode.json).     onException(JsonParseException.class).handled(true).setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)).setHeader(Exchange.CONTENT_TYPE, constant("text/plain")).setBody().constant("Invalid json data").     rest("/test").put("/fail").to("mock:test").     from("undertow:http://localhost:{{port}}/fail").setHeader(Exchange.HTTP_RESPONSE_CODE).constant(404).transform(constant("Fail")). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("undertow").port(getPort2()).bindingMode(RestBindingMode.json).             onException(JsonParseException.class).handled(true).setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)).setHeader(Exchange.CONTENT_TYPE, constant("text/plain")).setBody().constant("Invalid json data").             rest("/test").put("/fail").to("mock:test").             from("undertow:http://localhost:{{port}}/fail").setHeader(Exchange.HTTP_RESPONSE_CODE).constant(404).transform(constant("Fail")).         }     }. }
