commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testParameters() throws Exception {     RestComponent component = context().getComponent("rest", RestComponent.class).     ComponentVerifierExtension verifier = component.getVerifier().     Map<String, Object> parameters = new HashMap<>().     parameters.put("componentName", "undertow").     parameters.put("host", "http://localhost:" + getPort()).     parameters.put("path", "verify").     parameters.put("method", "GET").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;22;;@Test public void testMissingRestParameters() throws Exception {     RestComponent component = context.getComponent("rest", RestComponent.class).     ComponentVerifierExtension verifier = component.getVerifier().     Map<String, Object> parameters = new HashMap<>().     parameters.put("componentName", "undertow").     parameters.put("host", "http://localhost:" + getPort()).     parameters.put("path", "verify").     // This parameter does not belong to the rest component and validation     // is delegated to the transport component     parameters.put("tcpNoDelay", true).     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER, result.getErrors().get(0).getCode()).     Assert.assertEquals(1, result.getErrors().get(0).getParameterKeys().size()).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("method")). }
false;public;0;23;;@Test public void testWrongComponentParameters() throws Exception {     RestComponent component = context.getComponent("rest", RestComponent.class).     ComponentVerifierExtension verifier = component.getVerifier().     Map<String, Object> parameters = new HashMap<>().     parameters.put("componentName", "undertow").     parameters.put("host", "http://localhost:" + getPort()).     parameters.put("path", "verify").     parameters.put("method", "GET").     // This parameter does not belong to the rest component and validation     // is delegated to the transport component     parameters.put("nonExistingOption", true).     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.UNKNOWN_PARAMETER, result.getErrors().get(0).getCode()).     Assert.assertEquals(1, result.getErrors().get(0).getParameterKeys().size()).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("nonExistingOption")). }
false;public;0;15;;@Test public void testConnectivity() throws Exception {     RestComponent component = context().getComponent("rest", RestComponent.class).     ComponentVerifierExtension verifier = component.getVerifier().     Map<String, Object> parameters = new HashMap<>().     parameters.put("componentName", "undertow").     parameters.put("host", "http://localhost:" + getPort()).     parameters.put("path", "verify").     parameters.put("method", "GET").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;12;;@Override public void configure() throws Exception {     restConfiguration().component("undertow").host("localhost").port(getPort()).     rest("/").get("/verify").route().process(e -> e.getOut().setBody("ok")). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("undertow").host("localhost").port(getPort()).             rest("/").get("/verify").route().process(e -> e.getOut().setBody("ok")).         }     }. }
