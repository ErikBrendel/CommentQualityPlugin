commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testFirstPath() throws Exception {     testPath("first"). }
false;public;0;4;;@Test public void testSecondPath() throws Exception {     testPath("second"). }
false;private;1;15;;private void testPath(String pathSuffix) throws InterruptedException {     MockEndpoint mockEndpoint = getMockEndpoint("mock:" + pathSuffix).     mockEndpoint.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST").     LOG.debug("Number of exchanges in mock:myapp " + mockEndpoint.getExchanges().size()).     String response = template.requestBody("undertow:http://localhost:{{port}}/" + pathSuffix, "Hello Camel!", String.class).     assertNotNull(response).     assertEquals("Bye Camel! " + pathSuffix, response).     mockEndpoint.assertIsSatisfied().     for (Exchange exchange : mockEndpoint.getExchanges()) {         assertEquals("Bye Camel! " + pathSuffix, exchange.getIn().getBody(String.class)).     } }
false;public;0;9;;public void configure() {     from("undertow:http://localhost:{{port}}/first").transform().constant("Bye Camel! first").to("mock:first").     from("undertow:http://localhost:{{port}}/second").transform().constant("Bye Camel! second").to("mock:second"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("undertow:http://localhost:{{port}}/first").transform().constant("Bye Camel! first").to("mock:first").             from("undertow:http://localhost:{{port}}/second").transform().constant("Bye Camel! second").to("mock:second").         }     }. }
