commented;modifiers;parameterAmount;loc;comment;code
false;private;0;8;;private HttpEntity createMultipartRequestEntity() throws Exception {     File file = new File("src/test/resources/log4j2.properties").     return MultipartEntityBuilder.create().addTextBody("comment", "A binary file of some kind").addBinaryBody(file.getName(), file).build(). }
false;public;0;13;;@Test public void testSendMultiPartForm() throws Exception {     org.apache.http.client.HttpClient client = HttpClientBuilder.create().build().     HttpPost post = new HttpPost("http://localhost:" + getPort() + "/test").     post.setEntity(createMultipartRequestEntity()).     HttpResponse response = client.execute(post).     int status = response.getStatusLine().getStatusCode().     assertEquals("Get a wrong response status", 200, status).     String result = IOHelper.loadText(response.getEntity().getContent()).trim().     assertEquals("Get a wrong result", "A binary file of some kind", result). }
false;public;0;5;;@Test public void testSendMultiPartFormFromCamelHttpComponnent() throws Exception {     String result = template.requestBody("http://localhost:" + getPort() + "/test", createMultipartRequestEntity(), String.class).     assertEquals("Get a wrong result", "A binary file of some kind", result). }
false;public;1;18;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     assertEquals("Get a wrong attachement size", 1, in.getAttachments().size()).     // The file name is attachment id     DataHandler data = in.getAttachment("log4j2.properties").     assertNotNull("Should get the DataHandler log4j2.properties", data).     assertEquals("Got the wrong name", "log4j2.properties", data.getName()).     assertTrue("We should get the data from the DataHandler", data.getDataSource().getInputStream().available() > 0).     // form data should also be available as a body     Map body = in.getBody(Map.class).     assertEquals("A binary file of some kind", body.get("comment")).     assertEquals(data, body.get("log4j2.properties")).     exchange.getOut().setBody(in.getHeader("comment")). }
false;public;0;25;;public void configure() throws Exception {     from("undertow://http://localhost:{{port}}/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             assertEquals("Get a wrong attachement size", 1, in.getAttachments().size()).             // The file name is attachment id             DataHandler data = in.getAttachment("log4j2.properties").             assertNotNull("Should get the DataHandler log4j2.properties", data).             assertEquals("Got the wrong name", "log4j2.properties", data.getName()).             assertTrue("We should get the data from the DataHandler", data.getDataSource().getInputStream().available() > 0).             // form data should also be available as a body             Map body = in.getBody(Map.class).             assertEquals("A binary file of some kind", body.get("comment")).             assertEquals(data, body.get("log4j2.properties")).             exchange.getOut().setBody(in.getHeader("comment")).         }     }). // END SNIPPET: e1 }
false;protected;0;29;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("undertow://http://localhost:{{port}}/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     assertEquals("Get a wrong attachement size", 1, in.getAttachments().size()).                     // The file name is attachment id                     DataHandler data = in.getAttachment("log4j2.properties").                     assertNotNull("Should get the DataHandler log4j2.properties", data).                     assertEquals("Got the wrong name", "log4j2.properties", data.getName()).                     assertTrue("We should get the data from the DataHandler", data.getDataSource().getInputStream().available() > 0).                     // form data should also be available as a body                     Map body = in.getBody(Map.class).                     assertEquals("A binary file of some kind", body.get("comment")).                     assertEquals(data, body.get("log4j2.properties")).                     exchange.getOut().setBody(in.getHeader("comment")).                 }             }).         // END SNIPPET: e1         }     }. }
