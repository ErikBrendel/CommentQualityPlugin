commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     UndertowHttpBinding binding = new DefaultUndertowHttpBinding().     jndi.bind("mybinding", binding).     return jndi. }
false;public;0;5;;@Test public void testProducerGet() throws Exception {     String out = template.requestBody("undertow:http://localhost:{{port}}/users/123/basic", null, String.class).     assertEquals("123.Donald Duck", out). }
false;public;0;5;;@Test public void testServletProducerGetWildcards() throws Exception {     String out = template.requestBody("undertow:http://localhost:{{port}}/users/456/name=g*", null, String.class).     assertEquals("456.Goofy", out). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Goofy"). }
false;public;0;26;;@Override public void configure() throws Exception {     // configure to use undertow on localhost with the given port     restConfiguration().component("undertow").host("localhost").port(getPort()).endpointProperty("undertowHttpBinding", "#mybinding").     // use the rest DSL to define the rest services     rest("/users/").get("{id}/{query}").route().to("log:query").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Goofy").         }     }).endRest().get("{id}/basic").route().to("log:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }).endRest(). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use undertow on localhost with the given port             restConfiguration().component("undertow").host("localhost").port(getPort()).endpointProperty("undertowHttpBinding", "#mybinding").             // use the rest DSL to define the rest services             rest("/users/").get("{id}/{query}").route().to("log:query").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Goofy").                 }             }).endRest().get("{id}/basic").route().to("log:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).endRest().         }     }. }
