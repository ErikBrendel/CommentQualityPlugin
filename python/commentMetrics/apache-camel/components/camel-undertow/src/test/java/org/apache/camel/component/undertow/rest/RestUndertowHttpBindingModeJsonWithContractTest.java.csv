commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testBindingModeJsonWithContract() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(UserPojoEx.class).     String body = "{\"id\": 123, \"name\": \"Donald Duck\"}".     Object answer = template.requestBody("undertow:http://localhost:{{port}}/users/new", body).     assertNotNull(answer).     String answerString = new String((byte[]) answer).     assertTrue("Unexpected response: " + answerString, answerString.contains("\"active\":true")).     assertMockEndpointsSatisfied().     Object obj = mock.getReceivedExchanges().get(0).getIn().getBody().     assertEquals(UserPojoEx.class, obj.getClass()).     UserPojoEx user = (UserPojoEx) obj.     assertNotNull(user).     assertEquals(123, user.getId()).     assertEquals("Donald Duck", user.getName()).     assertEquals(true, user.isActive()). }
false;public;0;13;;@Override public void configure() throws Exception {     context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters()).     restConfiguration().component("undertow").host("localhost").port(getPort()).bindingMode(RestBindingMode.json).     rest("/users/").post("new").type(UserPojo.class).route().inputType(UserPojoEx.class).to("mock:input"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters()).             restConfiguration().component("undertow").host("localhost").port(getPort()).bindingMode(RestBindingMode.json).             rest("/users/").post("new").type(UserPojo.class).route().inputType(UserPojoEx.class).to("mock:input").         }     }. }
false;public;1;8;;@Converter public UserPojoEx toEx(UserPojo user) {     UserPojoEx ex = new UserPojoEx().     ex.setId(user.getId()).     ex.setName(user.getName()).     ex.setActive(true).     return ex. }
