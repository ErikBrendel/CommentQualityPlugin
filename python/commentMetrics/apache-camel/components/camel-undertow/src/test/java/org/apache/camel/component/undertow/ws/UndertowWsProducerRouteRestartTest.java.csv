commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testWSSuspendResumeRoute() throws Exception {     context.getRouteController().resumeRoute(ROUTE_ID).     context.getRouteController().resumeRoute(ROUTE_ID).     doTestWSHttpCall(). }
false;public;0;6;;@Test public void testWSStopStartRoute() throws Exception {     context.getRouteController().stopRoute(ROUTE_ID).     context.getRouteController().startRoute(ROUTE_ID).     doTestWSHttpCall(). }
false;public;0;7;;@Test public void testWSRemoveAddRoute() throws Exception {     context.removeRoute(ROUTE_ID).     context.addRoutes(createRouteBuilder()).     context.getRouteController().startRoute(ROUTE_ID).     doTestWSHttpCall(). }
false;public;3;6;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;3;3;;@Override public void onClose(WebSocket websocket, int code, String reason) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;private;0;43;;private void doTestWSHttpCall() throws Exception {     final List<Object> received = new ArrayList<>().     final CountDownLatch latch = new CountDownLatch(1).     AsyncHttpClient c = new DefaultAsyncHttpClient().     WebSocket websocket = c.prepareGet("ws://localhost:" + getPort() + "/shop").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {          @Override         public void onTextFrame(String message, boolean finalFragment, int rsv) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket, int code, String reason) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     // Send message to the direct endpoint     producer.sendBodyAndHeader("Beer on stock at Apache Mall", UndertowConstants.SEND_TO_ALL, "true").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertEquals(1, received.size()).     Object r = received.get(0).     assertTrue(r instanceof String).     assertEquals("Beer on stock at Apache Mall", r).     websocket.sendCloseFrame().     c.close(). }
false;public;0;6;;public void configure() {     //      from("direct:shop").id(//      ROUTE_ID).log(//      ">>> Message received from Shopping center : ${body}").to("undertow:ws://localhost:" + getPort() + "/shop"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             //              from("direct:shop").id(//              ROUTE_ID).log(//              ">>> Message received from Shopping center : ${body}").to("undertow:ws://localhost:" + getPort() + "/shop").         }     }. }
