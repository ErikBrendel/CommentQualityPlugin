commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setup() throws Exception {     // you can assign port number in the @CreateTransport annotation     port = super.getLdapServer().getPort().     LdapContext ctx = getWiredContext(ldapServer).     SimpleRegistry reg = new SimpleRegistry().     reg.put("localhost:" + port, ctx).     camel = new DefaultCamelContext(reg).     template = camel.createProducerTemplate(). }
false;public;0;4;;@After public void tearDown() throws Exception {     camel.stop(). }
false;public;0;21;;@Test public void testLdapRouteStandard() throws Exception {     camel.addRoutes(createRouteBuilder("ldap:localhost:" + port + "?base=ou=system")).     camel.start().     // START SNIPPET: invoke     Endpoint endpoint = camel.getEndpoint("direct:start").     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     exchange.getIn().setBody("(!(ou=test1))").     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     Collection<SearchResult> searchResults = defaultLdapModuleOutAssertions(out).     assertFalse(contains("uid=test1,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=test2,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=testNoOU,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=tcruise,ou=actors,ou=system", searchResults)). // START SNIPPET: invoke }
false;public;0;16;;@Test public void testLdapRouteWithPaging() throws Exception {     camel.addRoutes(createRouteBuilder("ldap:localhost:" + port + "?base=ou=system&pageSize=5")).     camel.start().     Endpoint endpoint = camel.getEndpoint("direct:start").     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     exchange.getIn().setBody("(objectClass=*)").     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     Collection<SearchResult> searchResults = defaultLdapModuleOutAssertions(out).     assertEquals(16, searchResults.size()). }
false;public;0;27;;@Test public void testLdapRouteReturnedAttributes() throws Exception {     // LDAP servers behave differently when it comes to what attributes are returned     // by default (Apache Directory server returns all attributes by default)     // Using the returnedAttributes parameter this behavior can be controlled     camel.addRoutes(createRouteBuilder("ldap:localhost:" + port + "?base=ou=system&returnedAttributes=uid,cn")).     camel.start().     Endpoint endpoint = camel.getEndpoint("direct:start").     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     exchange.getIn().setBody("(uid=tcruise)").     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     Collection<SearchResult> searchResults = defaultLdapModuleOutAssertions(out).     assertEquals(1, searchResults.size()).     assertTrue(contains("uid=tcruise,ou=actors,ou=system", searchResults)).     Attributes theOneResultAtts = searchResults.iterator().next().getAttributes().     assertEquals("tcruise", theOneResultAtts.get("uid").get()).     assertEquals("Tom Cruise", theOneResultAtts.get("cn").get()).     // make sure this att is NOT returned anymore     assertNull(theOneResultAtts.get("sn")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("(!(ou=test1))").     exchange.getIn().setHeader("ldapTest", "Camel").     exchange.getIn().addAttachment("ldapAttachment", dataHandler). }
false;public;0;23;;@Test public void testLdapRoutePreserveHeaderAndAttachments() throws Exception {     camel.addRoutes(createRouteBuilder("ldap:localhost:" + port + "?base=ou=system")).     camel.start().     final DataHandler dataHandler = new DataHandler("test", "text").     Exchange out = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("(!(ou=test1))").             exchange.getIn().setHeader("ldapTest", "Camel").             exchange.getIn().addAttachment("ldapAttachment", dataHandler).         }     }).     Collection<SearchResult> searchResults = defaultLdapModuleOutAssertions(out).     assertFalse(contains("uid=test1,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=test2,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=testNoOU,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=tcruise,ou=actors,ou=system", searchResults)).     assertEquals("Camel", out.getOut().getHeader("ldapTest")).     assertSame(dataHandler, out.getOut().getAttachment("ldapAttachment")). }
false;private;1;9;;@SuppressWarnings("unchecked") private Collection<SearchResult> defaultLdapModuleOutAssertions(Exchange out) {     // assertions of the response     assertNotNull(out).     assertNotNull(out.getOut()).     Collection<SearchResult> data = out.getOut().getBody(Collection.class).     assertNotNull("out body could not be converted to a Collection - was: " + out.getOut().getBody(), data).     return data. }
false;protected;2;9;;protected boolean contains(String dn, Collection<SearchResult> results) {     for (SearchResult result : results) {         if (result.getNameInNamespace().equals(dn)) {             return true.         }     }     return false. }
true;public;0;3;// START SNIPPET: route ;// START SNIPPET: route public void configure() throws Exception {     from("direct:start").to(ldapEndpointUrl). }
false;protected;1;9;;protected RouteBuilder createRouteBuilder(final String ldapEndpointUrl) throws Exception {     return new RouteBuilder() {          // START SNIPPET: route         public void configure() throws Exception {             from("direct:start").to(ldapEndpointUrl).         }     }. }
