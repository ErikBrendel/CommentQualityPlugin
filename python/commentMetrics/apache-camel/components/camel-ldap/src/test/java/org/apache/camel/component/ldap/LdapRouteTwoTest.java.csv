commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Before public void setup() throws Exception {     // you can assign port number in the @CreateTransport annotation     port = super.getLdapServer().getPort().     // use ENV variables     Hashtable<String, String> env = new Hashtable().     env.put("java.naming.factory.initial", "com.sun.jndi.ldap.LdapCtxFactory").     env.put("java.naming.provider.url", Network.ldapLoopbackUrl(ldapServer.getPort())).     env.put("java.naming.security.principal", "uid=admin,ou=system").     env.put("java.naming.security.credentials", "secret").     env.put("java.naming.security.authentication", "simple").     SimpleRegistry reg = new SimpleRegistry().     reg.put("localhost:" + port, env).     camel = new DefaultCamelContext(reg).     template = camel.createProducerTemplate(). }
false;public;0;4;;@After public void tearDown() throws Exception {     camel.stop(). }
false;public;0;34;;@Test public void testLdapRouteStandardTwo() throws Exception {     camel.addRoutes(createRouteBuilder("ldap:localhost:" + port + "?base=ou=system")).     camel.start().     Endpoint endpoint = camel.getEndpoint("direct:start").     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     exchange.getIn().setBody("(!(ou=test1))").     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     Collection<SearchResult> searchResults = defaultLdapModuleOutAssertions(out).     assertFalse(contains("uid=test1,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=test2,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=testNoOU,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=tcruise,ou=actors,ou=system", searchResults)).     // call again     endpoint = camel.getEndpoint("direct:start").     exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     exchange.getIn().setBody("(!(ou=test1))").     // now we send the exchange to the endpoint, and receives the response from Camel     out = template.send(endpoint, exchange).     searchResults = defaultLdapModuleOutAssertions(out).     assertFalse(contains("uid=test1,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=test2,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=testNoOU,ou=test,ou=system", searchResults)).     assertTrue(contains("uid=tcruise,ou=actors,ou=system", searchResults)). }
false;private;1;9;;@SuppressWarnings("unchecked") private Collection<SearchResult> defaultLdapModuleOutAssertions(Exchange out) {     // assertions of the response     assertNotNull(out).     assertNotNull(out.getOut()).     Collection<SearchResult> data = out.getOut().getBody(Collection.class).     assertNotNull("out body could not be converted to a Collection - was: " + out.getOut().getBody(), data).     return data. }
false;protected;2;9;;protected boolean contains(String dn, Collection<SearchResult> results) {     for (SearchResult result : results) {         if (result.getNameInNamespace().equals(dn)) {             return true.         }     }     return false. }
true;public;0;3;// START SNIPPET: route ;// START SNIPPET: route public void configure() throws Exception {     from("direct:start").to(ldapEndpointUrl). }
false;protected;1;9;;protected RouteBuilder createRouteBuilder(final String ldapEndpointUrl) throws Exception {     return new RouteBuilder() {          // START SNIPPET: route         public void configure() throws Exception {             from("direct:start").to(ldapEndpointUrl).         }     }. }
