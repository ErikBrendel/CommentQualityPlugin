commented;modifiers;parameterAmount;loc;comment;code
false;public;1;24;;public void process(Exchange exchange) throws Exception {     String filter = exchange.getIn().getBody(String.class).     DirContext dirContext = getDirContext().     try {         // could throw NamingException         List<SearchResult> data.         if (pageSize == null) {             data = simpleSearch(dirContext, filter).         } else {             if (!(dirContext instanceof LdapContext)) {                 throw new IllegalArgumentException("When using attribute 'pageSize' for a ldap endpoint, you must provide a LdapContext (subclass of DirContext)").             }             data = pagedSearch((LdapContext) dirContext, filter).         }         exchange.getOut().setBody(data).         exchange.getOut().setHeaders(exchange.getIn().getHeaders()).         exchange.getOut().setAttachments(exchange.getIn().getAttachments()).     } finally {         if (dirContext != null) {             dirContext.close().         }     } }
false;protected;0;25;;protected DirContext getDirContext() throws NamingException {     // Obtain our ldap context. We do this by looking up the context in our registry.     // Note though that a new context is expected each time. Therefore if spring is     // being used then use prototype="scope". If you do not then you might experience     // concurrency issues as InitialContext is not required to support concurrency.     // On the other hand if you have a DirContext that is able to support concurrency     // then using the default singleton scope is entirely sufficient. Most DirContext     // classes will require prototype scope though.     // if its a Map/Hashtable then we create a new context per time     DirContext answer = null.     Object context = getEndpoint().getCamelContext().getRegistry().lookupByName(remaining).     if (context instanceof Hashtable) {         answer = new InitialDirContext((Hashtable<?, ?>) context).     } else if (context instanceof Map) {         Hashtable hash = new Hashtable((Map) context).         answer = new InitialDirContext(hash).     } else if (context instanceof DirContext) {         answer = (DirContext) context.     } else if (context != null) {         String msg = "Found bean: " + remaining + " in Registry of type: " + answer.getClass().getName() + " expected type was: " + DirContext.class.getName().         throw new NoSuchBeanException(msg).     }     return answer. }
false;private;2;8;;private List<SearchResult> simpleSearch(DirContext ldapContext, String searchFilter) throws NamingException {     List<SearchResult> data = new ArrayList<>().     NamingEnumeration<SearchResult> namingEnumeration = ldapContext.search(searchBase, searchFilter, searchControls).     while (namingEnumeration != null && namingEnumeration.hasMore()) {         data.add(namingEnumeration.next()).     }     return data. }
false;private;2;19;;private List<SearchResult> pagedSearch(LdapContext ldapContext, String searchFilter) throws Exception {     List<SearchResult> data = new ArrayList<>().     log.trace("Using paged ldap search, pageSize={}", pageSize).     Control[] requestControls = new Control[] { new PagedResultsControl(pageSize, Control.CRITICAL) }.     ldapContext.setRequestControls(requestControls).     do {         List<SearchResult> pageResult = simpleSearch(ldapContext, searchFilter).         data.addAll(pageResult).         log.trace("Page returned {} entries", pageResult.size()).     } while (prepareNextPage(ldapContext)).     if (log.isDebugEnabled()) {         log.debug("Found a total of {} entries for ldap filter {}", data.size(), searchFilter).     }     return data. }
false;private;1;20;;private boolean prepareNextPage(LdapContext ldapContext) throws Exception {     Control[] responseControls = ldapContext.getResponseControls().     byte[] cookie = null.     if (responseControls != null) {         for (Control responseControl : responseControls) {             if (responseControl instanceof PagedResultsResponseControl) {                 PagedResultsResponseControl prrc = (PagedResultsResponseControl) responseControl.                 cookie = prrc.getCookie().             }         }     }     if (cookie == null) {         return false.     } else {         ldapContext.setRequestControls(new Control[] { new PagedResultsControl(pageSize, cookie, Control.CRITICAL) }).         return true.     } }
