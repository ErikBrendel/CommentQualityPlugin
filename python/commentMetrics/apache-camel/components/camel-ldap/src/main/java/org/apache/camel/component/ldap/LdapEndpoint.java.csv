commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new RuntimeCamelException("An LDAP Consumer would be the LDAP server itself! No such support here"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new LdapProducer(this, dirContextName, base, toSearchControlScope(scope), pageSize, returnedAttributes). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public String getDirContextName() {     return dirContextName. }
true;public;1;3;/**  * Name of either a {@link javax.naming.directory.DirContext}, or {@link java.util.Hashtable}, or {@link Map} bean to lookup in the registry.  * If the bean is either a Hashtable or Map then a new {@link javax.naming.directory.DirContext} instance is created for each use. If the bean  * is a {@link javax.naming.directory.DirContext} then the bean is used as given. The latter may not be possible in all situations where  * the {@link javax.naming.directory.DirContext} must not be shared, and in those situations it can be better to use {@link java.util.Hashtable} or {@link Map} instead.  */ ;/**  * Name of either a {@link javax.naming.directory.DirContext}, or {@link java.util.Hashtable}, or {@link Map} bean to lookup in the registry.  * If the bean is either a Hashtable or Map then a new {@link javax.naming.directory.DirContext} instance is created for each use. If the bean  * is a {@link javax.naming.directory.DirContext} then the bean is used as given. The latter may not be possible in all situations where  * the {@link javax.naming.directory.DirContext} must not be shared, and in those situations it can be better to use {@link java.util.Hashtable} or {@link Map} instead.  */ public void setDirContextName(String dirContextName) {     this.dirContextName = dirContextName. }
true;public;1;3;/**  * When specified the ldap module uses paging to retrieve all results (most LDAP Servers throw an exception when trying to retrieve more than 1000 entries in one query).  * To be able to use this a LdapContext (subclass of DirContext) has to be passed in as ldapServerBean (otherwise an exception is thrown)  */ ;/**  * When specified the ldap module uses paging to retrieve all results (most LDAP Servers throw an exception when trying to retrieve more than 1000 entries in one query).  * To be able to use this a LdapContext (subclass of DirContext) has to be passed in as ldapServerBean (otherwise an exception is thrown)  */ public void setPageSize(Integer pageSize) {     this.pageSize = pageSize. }
false;public;0;3;;public int getPageSize() {     return pageSize. }
false;public;0;3;;public String getBase() {     return base. }
true;public;1;3;/**  * The base DN for searches.  */ ;/**  * The base DN for searches.  */ public void setBase(String base) {     this.base = base. }
false;public;0;3;;public String getScope() {     return scope. }
true;public;1;3;/**  * Specifies how deeply to search the tree of entries, starting at the base DN.  */ ;/**  * Specifies how deeply to search the tree of entries, starting at the base DN.  */ public void setScope(String scope) {     this.scope = scope. }
false;public;0;3;;public String getReturnedAttributes() {     return returnedAttributes. }
true;public;1;3;/**  * Comma-separated list of attributes that should be set in each entry of the result  */ ;/**  * Comma-separated list of attributes that should be set in each entry of the result  */ public void setReturnedAttributes(String returnedAttributes) {     this.returnedAttributes = returnedAttributes. }
false;private;1;12;;private int toSearchControlScope(String scope) {     if (scope.equalsIgnoreCase(OBJECT_SCOPE)) {         return SearchControls.OBJECT_SCOPE.     } else if (scope.equalsIgnoreCase(ONELEVEL_SCOPE)) {         return SearchControls.ONELEVEL_SCOPE.     } else if (scope.equalsIgnoreCase(SUBTREE_SCOPE)) {         return SearchControls.SUBTREE_SCOPE.     } else {         throw new IllegalArgumentException("Invalid search scope \"" + scope + "\" for LdapEndpoint: " + getEndpointUri()).     } }
