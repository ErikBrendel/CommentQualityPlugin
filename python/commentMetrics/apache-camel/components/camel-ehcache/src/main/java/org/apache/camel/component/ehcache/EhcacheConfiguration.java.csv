commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * URI pointing to the Ehcache XML configuration file's location  */ ;/**  * URI pointing to the Ehcache XML configuration file's location  */ public void setConfigurationUri(String configurationUri) {     this.configurationUri = configurationUri. }
false;public;0;3;;public String getConfigurationUri() {     return configurationUri. }
false;public;0;3;;public boolean hasConfigurationUri() {     return ObjectHelper.isNotEmpty(configurationUri). }
true;public;0;4;/**  * @deprecated use {@link #getConfigurationUri()} instead  */ ;/**  * @deprecated use {@link #getConfigurationUri()} instead  */ @Deprecated public String getConfigUri() {     return getConfigurationUri(). }
true;public;1;5;/**  * URI pointing to the Ehcache XML configuration file's location  *  * @deprecated use {@link #setConfigurationUri(String)} instead  */ ;/**  * URI pointing to the Ehcache XML configuration file's location  *  * @deprecated use {@link #setConfigurationUri(String)} instead  */ @Deprecated @Metadata(deprecationNote = "use configurationUri instead") public void setConfigUri(String configUri) {     setConfigurationUri(configUri). }
false;public;0;3;;public boolean isCreateCacheIfNotExist() {     return createCacheIfNotExist. }
true;public;1;3;/**  * Configure if a cache need to be created if it does exist or can't be  * pre-configured.  */ ;/**  * Configure if a cache need to be created if it does exist or can't be  * pre-configured.  */ public void setCreateCacheIfNotExist(boolean createCacheIfNotExist) {     this.createCacheIfNotExist = createCacheIfNotExist. }
false;public;0;3;;public String getAction() {     return action. }
true;public;1;3;/**  * To configure the default cache action. If an action is set in the message  * header, then the operation from the header takes precedence.  */ ;/**  * To configure the default cache action. If an action is set in the message  * header, then the operation from the header takes precedence.  */ public void setAction(String action) {     this.action = action. }
false;public;0;3;;public Object getKey() {     return key. }
true;public;1;3;/**  * To configure the default action key. If a key is set in the message  * header, then the key from the header takes precedence.  */ ;/**  * To configure the default action key. If a key is set in the message  * header, then the key from the header takes precedence.  */ public void setKey(Object key) {     this.key = key. }
false;public;0;3;;public CacheManager getCacheManager() {     return cacheManager. }
true;public;1;3;/**  * The cache manager  */ ;/**  * The cache manager  */ public void setCacheManager(CacheManager cacheManager) {     this.cacheManager = cacheManager. }
false;public;0;3;;public boolean hasCacheManager() {     return this.cacheManager != null. }
false;public;0;3;;public Configuration getCacheManagerConfiguration() {     return cacheManagerConfiguration. }
true;public;1;3;/**  * The cache manager configuration  */ ;/**  * The cache manager configuration  */ public void setCacheManagerConfiguration(Configuration cacheManagerConfiguration) {     this.cacheManagerConfiguration = cacheManagerConfiguration. }
false;public;0;3;;public boolean hasCacheManagerConfiguration() {     return this.cacheManagerConfiguration != null. }
false;public;0;3;;public EventOrdering getEventOrdering() {     return eventOrdering. }
true;public;1;3;/**  * Set the delivery mode (ordered, unordered)  */ ;/**  * Set the delivery mode (ordered, unordered)  */ public void setEventOrdering(String eventOrdering) {     setEventOrdering(EventOrdering.valueOf(eventOrdering)). }
false;public;1;3;;public void setEventOrdering(EventOrdering eventOrdering) {     this.eventOrdering = eventOrdering. }
false;public;0;3;;public EventFiring getEventFiring() {     return eventFiring. }
true;public;1;3;/**  * Set the delivery mode (synchronous, asynchronous)  */ ;/**  * Set the delivery mode (synchronous, asynchronous)  */ public void setEventFiring(String eventFiring) {     setEventFiring(EventFiring.valueOf(eventFiring)). }
false;public;1;3;;public void setEventFiring(EventFiring eventFiring) {     this.eventFiring = eventFiring. }
false;public;0;3;;public Set<EventType> getEventTypes() {     return eventTypes. }
true;public;1;9;/**  * Set the type of events to listen for  */ ;/**  * Set the type of events to listen for  */ public void setEventTypes(String eventTypesString) {     Set<EventType> eventTypes = new HashSet<>().     String[] events = eventTypesString.split(",").     for (String event : events) {         eventTypes.add(EventType.valueOf(event)).     }     setEventTypes(eventTypes). }
false;public;1;3;;public void setEventTypes(Set<EventType> eventTypes) {     this.eventTypes = new HashSet<>(eventTypes). }
true;public;1;3;/**  * The default cache configuration to be used to create caches.  */ ;// **************************** // Cache Configuration // **************************** /**  * The default cache configuration to be used to create caches.  */ public void setConfiguration(CacheConfiguration<?, ?> configuration) {     this.configuration = configuration. }
false;public;0;3;;public CacheConfiguration<?, ?> getConfiguration() {     return configuration. }
false;public;0;3;;public boolean hasConfiguration() {     return ObjectHelper.isNotEmpty(configuration). }
false;public;1;3;;public boolean hasConfiguration(String name) {     return ThrowingHelper.applyIfNotEmpty(configurations, c -> c.containsKey(name), () -> false). }
true;public;0;3;/**  * A map of cache configuration to be used to create caches.  */ ;/**  * A map of cache configuration to be used to create caches.  */ public Map<String, CacheConfiguration<?, ?>> getConfigurations() {     return configurations. }
false;public;1;3;;public void setConfigurations(Map<String, CacheConfiguration<?, ?>> configurations) {     this.configurations = Map.class.cast(configurations). }
false;public;1;7;;public void addConfigurations(Map<String, CacheConfiguration<?, ?>> configurations) {     if (this.configurations == null) {         this.configurations = new HashMap<>().     }     this.configurations.putAll(configurations). }
false;public;0;3;;public Class<?> getKeyType() {     return keyType. }
true;public;1;3;/**  * The cache key type, default "java.lang.Object"  */ ;/**  * The cache key type, default "java.lang.Object"  */ public void setKeyType(Class<?> keyType) {     this.keyType = keyType. }
false;public;0;3;;public Class<?> getValueType() {     return valueType. }
true;public;1;3;/**  * The cache value type, default "java.lang.Object"  */ ;/**  * The cache value type, default "java.lang.Object"  */ public void setValueType(Class<?> valueType) {     this.valueType = valueType. }
false;public;0;7;;// **************************** // Cloneable // **************************** public EhcacheConfiguration copy() {     try {         return (EhcacheConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
