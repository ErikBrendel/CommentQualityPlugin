commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;0;4;;@Override public synchronized void start() throws Exception {     refCount.retain(). }
false;public,synchronized;0;5;;@Override public synchronized void stop() throws Exception {     refCount.release().     userCaches.values().forEach(UserManagedCache::close). }
false;public;3;55;;@SuppressWarnings("unchecked") public <K, V> Cache<K, V> getCache(String name, Class<K> keyType, Class<V> valueType) throws Exception {     CacheConfiguration<K, V> cacheConfiguration = null.     if (configuration != null) {         if (configuration.hasConfiguration(name)) {             LOGGER.debug("Using custom cache configuration for cache {}", name).             cacheConfiguration = CacheConfiguration.class.cast(configuration.getConfigurations().get(name)).         } else if (configuration.hasConfiguration()) {             LOGGER.debug("Using global cache configuration for cache {}", name).             cacheConfiguration = CacheConfiguration.class.cast(configuration.getConfiguration()).         }     }     if (keyType == null && valueType == null) {         if (cacheConfiguration != null) {             keyType = cacheConfiguration.getKeyType().             valueType = cacheConfiguration.getValueType().         } else {             keyType = (Class<K>) Object.class.             valueType = (Class<V>) Object.class.         }     }     Cache<K, V> cache = cacheManager.getCache(name, keyType, valueType).     if (cache == null && configuration != null && configuration.isCreateCacheIfNotExist()) {         if (cacheConfiguration != null) {             if (keyType != cacheConfiguration.getKeyType() || valueType != cacheConfiguration.getValueType()) {                 LOGGER.info("Mismatch keyType / valueType configuration for cache {}", name).                 CacheConfigurationBuilder builder = CacheConfigurationBuilder.newCacheConfigurationBuilder(keyType, valueType, cacheConfiguration.getResourcePools()).withClassLoader(cacheConfiguration.getClassLoader()).withEvictionAdvisor(cacheConfiguration.getEvictionAdvisor()).withExpiry(cacheConfiguration.getExpiryPolicy()).                 for (ServiceConfiguration<?> serviceConfig : cacheConfiguration.getServiceConfigurations()) {                     builder = builder.add(serviceConfig).                 }                 cacheConfiguration = builder.build().             }             cache = cacheManager.createCache(name, cacheConfiguration).         } else {             // If a cache configuration is not provided, create a User Managed             // Cache             LOGGER.debug("Using a UserManagedCache for cache {} as no configuration has been found", name).             Class<K> kt = keyType.             Class<V> vt = valueType.             cache = Cache.class.cast(userCaches.computeIfAbsent(name, key -> UserManagedCacheBuilder.newUserManagedCacheBuilder(kt, vt).build(true))).         }     }     if (cache == null) {         throw new RuntimeCamelException("Unable to retrieve the cache " + name + " from cache manager " + cacheManager).     }     return cache. }
false;;0;3;;CacheManager getCacheManager() {     return this.cacheManager. }
false;;0;3;;ReferenceCount getReferenceCount() {     return refCount. }
