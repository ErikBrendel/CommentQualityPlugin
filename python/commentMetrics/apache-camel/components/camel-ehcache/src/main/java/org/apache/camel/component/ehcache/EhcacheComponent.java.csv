commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;7;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     EhcacheConfiguration configuration = this.configuration.copy().     setProperties(configuration, parameters).     return new EhcacheEndpoint(uri, this, remaining, createCacheManager(configuration), configuration). }
false;private;1;52;;// **************************** // Helpers // **************************** private EhcacheManager createCacheManager(EhcacheConfiguration configuration) throws IOException {     ObjectHelper.notNull(configuration, "Camel Ehcache configuration").     // Check if a cache manager has been configured     if (configuration.hasCacheManager()) {         LOGGER.info("EhcacheManager configured with supplied CacheManager").         return managers.computeIfAbsent(configuration.getCacheManager(), m -> new EhcacheManager(CacheManager.class.cast(m), false, configuration)).     }     // Check if a cache manager configuration has been provided     if (configuration.hasCacheManagerConfiguration()) {         LOGGER.info("EhcacheManager configured with supplied CacheManagerConfiguration").         return managers.computeIfAbsent(configuration.getCacheManagerConfiguration(), c -> new EhcacheManager(CacheManagerBuilder.newCacheManager(Configuration.class.cast(c)), true, configuration)).     }     // Check if a configuration file has been provided     if (configuration.hasConfigurationUri()) {         String configurationUri = configuration.getConfigurationUri().         ClassResolver classResolver = getCamelContext().getClassResolver().         URL url = ResourceHelper.resolveMandatoryResourceAsUrl(classResolver, configurationUri).         LOGGER.info("EhcacheManager configured with supplied URI {}", url).         return managers.computeIfAbsent(url, u -> new EhcacheManager(CacheManagerBuilder.newCacheManager(new XmlConfiguration(URL.class.cast(u))), true, configuration)).     }     LOGGER.info("EhcacheManager configured with default builder").     return new EhcacheManager(CacheManagerBuilder.newCacheManagerBuilder().build(), true, configuration). }
false;public;0;3;;// **************************** // Properties // **************************** public EhcacheConfiguration getConfiguration() {     return configuration. }
true;public;1;6;/**  * Sets the global component configuration  */ ;/**  * Sets the global component configuration  */ public void setConfiguration(EhcacheConfiguration configuration) {     // The component configuration can't be null     ObjectHelper.notNull(configuration, "EhcacheConfiguration").     this.configuration = configuration. }
false;public;0;3;;public CacheManager getCacheManager() {     return configuration.getCacheManager(). }
true;public;1;3;/**  * The cache manager  */ ;/**  * The cache manager  */ public void setCacheManager(CacheManager cacheManager) {     this.configuration.setCacheManager(cacheManager). }
false;public;0;3;;public Configuration getCacheManagerConfiguration() {     return configuration.getCacheManagerConfiguration(). }
true;public;1;3;/**  * The cache manager configuration  */ ;/**  * The cache manager configuration  */ public void setCacheManagerConfiguration(Configuration cacheManagerConfiguration) {     this.configuration.setCacheManagerConfiguration(cacheManagerConfiguration). }
true;public;1;3;/**  * The default cache configuration to be used to create caches.  */ ;/**  * The default cache configuration to be used to create caches.  */ public void setCacheConfiguration(CacheConfiguration<?, ?> cacheConfiguration) {     this.configuration.setConfiguration(cacheConfiguration). }
false;public;0;3;;public CacheConfiguration<?, ?> getCacheConfiguration() {     return this.configuration.getConfiguration(). }
false;public;0;3;;public Map<String, CacheConfiguration<?, ?>> getCachesConfigurations() {     return configuration.getConfigurations(). }
true;public;1;3;/**  * A map of caches configurations to be used to create caches.  */ ;/**  * A map of caches configurations to be used to create caches.  */ public void setCachesConfigurations(Map<String, CacheConfiguration<?, ?>> configurations) {     configuration.setConfigurations(configurations). }
false;public;1;3;;public void addCachesConfigurations(Map<String, CacheConfiguration<?, ?>> configurations) {     configuration.addConfigurations(configurations). }
false;public;0;3;;public String getCacheConfigurationUri() {     return this.configuration.getConfigurationUri(). }
true;public;1;3;/**  * URI pointing to the Ehcache XML configuration file's location  */ ;/**  * URI pointing to the Ehcache XML configuration file's location  */ public void setCacheConfigurationUri(String configurationUri) {     this.configuration.setConfigurationUri(configurationUri). }
