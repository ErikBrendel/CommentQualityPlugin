commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     aggregationRepository = createAggregateRepository().     aggregationRepository.start(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     aggregationRepository.stop().     super.tearDown(). }
false;private;1;7;;private boolean exists(String key) {     DefaultExchangeHolder holder = aggregationRepository.getCache().get(key).     if (holder == null) {         return false.     }     return true. }
false;public;0;11;;@Test public void testAdd() {     // Given     String key = "Add".     assertFalse(exists(key)).     Exchange exchange = new DefaultExchange(context()).     // When     aggregationRepository.add(context(), key, exchange).     // Then     assertTrue(exists(key)). }
false;public;0;14;;@Test public void testGetExists() {     // Given     String key = "Get_Exists".     Exchange exchange = new DefaultExchange(context()).     aggregationRepository.add(context(), key, exchange).     assertTrue(exists(key)).     // When     Exchange exchange2 = aggregationRepository.get(context(), key).     // Then     assertNotNull(exchange2).     assertEquals(exchange.getExchangeId(), exchange2.getExchangeId()). }
false;public;0;10;;@Test public void testGetNotExists() {     // Given     String key = "Get_NotExists".     assertFalse(exists(key)).     // When     Exchange exchange2 = aggregationRepository.get(context(), key).     // Then     assertNull(exchange2). }
false;public;0;12;;@Test public void testRemoveExists() {     // Given     String key = "Remove_Exists".     Exchange exchange = new DefaultExchange(context()).     aggregationRepository.add(context(), key, exchange).     assertTrue(exists(key)).     // When     aggregationRepository.remove(context(), key, exchange).     // Then     assertFalse(exists(key)). }
false;public;0;11;;@Test public void testRemoveNotExists() {     // Given     String key = "RemoveNotExists".     Exchange exchange = new DefaultExchange(context()).     assertFalse(exists(key)).     // When     aggregationRepository.remove(context(), key, exchange).     // Then     assertFalse(exists(key)). }
false;public;0;12;;@Test public void testGetKeys() {     // Given     String[] keys = { "GetKeys1", "GetKeys2" }.     addExchanges(keys).     // When     Set<String> keySet = aggregationRepository.getKeys().     // Then     for (String key : keys) {         assertTrue(keySet.contains(key)).     } }
false;public;0;17;;@Test public void testConfirmExist() {     // Given     for (int i = 1. i < 4. i++) {         String key = "Confirm_" + i.         Exchange exchange = new DefaultExchange(context()).         exchange.setExchangeId("Exchange_" + i).         aggregationRepository.add(context(), key, exchange).         assertTrue(exists(key)).     }     // When     aggregationRepository.confirm(context(), "Confirm_2").     // Then     assertTrue(exists("Confirm_1")).     assertFalse(exists("Confirm_2")).     assertTrue(exists("Confirm_3")). }
false;public;0;18;;@Test public void testConfirmNotExist() {     // Given     String[] keys = new String[3].     for (int i = 1. i < 4. i++) {         keys[i - 1] = "Confirm" + i.     }     addExchanges(keys).     for (String key : keys) {         assertTrue(exists(key)).     }     // When     aggregationRepository.confirm(context(), "Exchange-Confirm5").     // Then     for (String key : keys) {         assertTrue(exists(key)).     } }
false;private;1;7;;private void addExchanges(String... keys) {     for (String key : keys) {         Exchange exchange = new DefaultExchange(context()).         exchange.setExchangeId("Exchange-" + key).         aggregationRepository.add(context(), key, exchange).     } }
false;public;0;12;;@Test public void testScan() {     // Given     String[] keys = { "Scan1", "Scan2" }.     addExchanges(keys).     // When     Set<String> exchangeIdSet = aggregationRepository.scan(context()).     // Then     for (String key : keys) {         assertTrue(exchangeIdSet.contains(key)).     } }
false;public;0;12;;@Test public void testRecover() {     // Given     String[] keys = { "Recover1", "Recover2" }.     addExchanges(keys).     // When     Exchange exchange2 = aggregationRepository.recover(context(), "Recover2").     Exchange exchange3 = aggregationRepository.recover(context(), "Recover3").     // Then     assertNotNull(exchange2).     assertNull(exchange3). }
