commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;// **************************** // Clear // **************************** @Test public void testCacheClear() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived((Object) null).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_CLEAR).to("direct://start").send().     assertMockEndpointsSatisfied(). }
false;public;0;24;;// **************************** // Put // **************************** @Test public void testCachePut() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final String key = generateRandomString().     final String val = generateRandomString().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(val).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_PUT).withHeader(EhcacheConstants.KEY, key).withBody(val).to("direct://start").send().     assertMockEndpointsSatisfied().     assertTrue(cache.containsKey(key)).     assertEquals(val, cache.get(key)). }
false;public;0;23;;@Test public void testCachePutAll() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final Map<String, String> map = generateRandomMapOfString(3).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_PUT_ALL).withBody(map).to("direct://start").send().     assertMockEndpointsSatisfied().     map.forEach((k, v) -> {         assertTrue(cache.containsKey(k)).         assertEquals(v, cache.get(k)).     }). }
false;public;0;36;;@Test public void testCachePutIfAbsent() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final String key = generateRandomString().     final String val1 = generateRandomString().     final String val2 = generateRandomString().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     mock.expectedBodiesReceived(val1, val2).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_HAS_RESULT, false, true).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_SUCCEEDED, true, true).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.OLD_VALUE, null, val1).     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_PUT_IF_ABSENT).withHeader(EhcacheConstants.KEY, key).withBody(val1).to("direct://start").send().     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_PUT_IF_ABSENT).withHeader(EhcacheConstants.KEY, key).withBody(val2).to("direct://start").send().     assertMockEndpointsSatisfied().     assertTrue(cache.containsKey(key)).     assertEquals(val1, cache.get(key)). }
false;public;0;23;;// **************************** // Get // **************************** @Test public void testCacheGet() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final String key = generateRandomString().     final String val = generateRandomString().     cache.put(key, val).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(val).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, true).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_GET).withHeader(EhcacheConstants.KEY, key).withBody(val).to("direct://start").send().     assertMockEndpointsSatisfied(). }
false;public;0;27;;@Test public void testCacheGetAll() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final Map<String, String> map = generateRandomMapOfString(3).     final Set<String> keys = map.keySet().stream().limit(2).collect(Collectors.toSet()).     cache.putAll(map).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, true).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_GET_ALL).withHeader(EhcacheConstants.KEYS, keys).to("direct://start").send().     assertMockEndpointsSatisfied().     final Map<String, String> elements = mock.getExchanges().get(0).getIn().getBody(Map.class).     keys.forEach(k -> {         assertTrue(elements.containsKey(k)).         assertEquals(map.get(k), elements.get(k)).     }). }
false;public;0;23;;// **************************** // Remove // **************************** @Test public void testCacheRemove() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final String key = generateRandomString().     final String val = generateRandomString().     cache.put(key, val).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REMOVE).withHeader(EhcacheConstants.KEY, key).to("direct://start").send().     assertMockEndpointsSatisfied().     assertFalse(cache.containsKey(key)). }
false;public;0;38;;@Test public void testCacheRemoveIf() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final String key = generateRandomString().     final String val1 = generateRandomString().     final String val2 = generateRandomString().     cache.put(key, val1).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_HAS_RESULT, false, false).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_SUCCEEDED, false, true).     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REMOVE).withHeader(EhcacheConstants.KEY, key).withHeader(EhcacheConstants.OLD_VALUE, val2).to("direct://start").send().     assertTrue(cache.containsKey(key)).     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REMOVE).withHeader(EhcacheConstants.KEY, key).withHeader(EhcacheConstants.OLD_VALUE, val1).to("direct://start").send().     assertMockEndpointsSatisfied().     assertFalse(cache.containsKey(key)). }
false;public;0;23;;@Test public void testCacheRemoveAll() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final Map<String, String> map = generateRandomMapOfString(3).     final Set<String> keys = map.keySet().stream().limit(2).collect(Collectors.toSet()).     cache.putAll(map).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REMOVE_ALL).withHeader(EhcacheConstants.KEYS, keys).to("direct://start").send().     assertMockEndpointsSatisfied().     cache.forEach(e -> assertFalse(keys.contains(e.getKey()))). }
false;public;0;54;;// **************************** // Replace // **************************** @Test public void testCacheReplace() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final String key = generateRandomString().     final String val1 = generateRandomString().     final String val2 = generateRandomString().     final String val3 = generateRandomString().     cache.put(key, val1).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(3).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_HAS_RESULT, false, false, false).     mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_SUCCEEDED, true, false, true).     assertEquals(val1, cache.get(key)).     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REPLACE).withHeader(EhcacheConstants.KEY, key).withBody(val2).to("direct://start").send().     assertEquals(val2, cache.get(key)).     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REPLACE).withHeader(EhcacheConstants.KEY, key).withHeader(EhcacheConstants.OLD_VALUE, val1).withBody(val3).to("direct://start").send().     assertEquals(val2, cache.get(key)).     fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_REPLACE).withHeader(EhcacheConstants.KEY, key).withHeader(EhcacheConstants.OLD_VALUE, val2).withBody(val3).to("direct://start").send().     assertEquals(val3, cache.get(key)).     assertMockEndpointsSatisfied(). }
false;public;0;6;;public void configure() {     from("direct://start").toF("ehcache://%s?cacheManager=#cacheManager", TEST_CACHE_NAME).to("log:org.apache.camel.component.ehcache?level=INFO&showAll=true&multiline=true").to("mock:result"). }
false;protected;0;11;;// **************************** // Route // **************************** @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct://start").toF("ehcache://%s?cacheManager=#cacheManager", TEST_CACHE_NAME).to("log:org.apache.camel.component.ehcache?level=INFO&showAll=true&multiline=true").to("mock:result").         }     }. }
