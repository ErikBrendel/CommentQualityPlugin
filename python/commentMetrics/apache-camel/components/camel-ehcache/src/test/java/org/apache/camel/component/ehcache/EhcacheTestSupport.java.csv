commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected void doPreSetup() throws Exception {     final URL url = this.getClass().getResource(EHCACHE_CONFIG).     final Configuration xmlConfig = new XmlConfiguration(url).     cacheManager = CacheManagerBuilder.newCacheManager(xmlConfig).     cacheManager.init(). }
false;public;0;8;;@Override public void tearDown() throws Exception {     super.tearDown().     if (cacheManager != null) {         cacheManager.close().     } }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("cacheManager", cacheManager).     return registry. }
false;protected;1;3;;protected Cache<Object, Object> getCache(String name) {     return cacheManager.getCache(name, Object.class, Object.class). }
false;protected;0;3;;protected Cache<Object, Object> getTestCache() {     return cacheManager.getCache(TEST_CACHE_NAME, Object.class, Object.class). }
false;protected;0;3;;protected Cache<String, Boolean> getIdempotentCache() {     return cacheManager.getCache(IDEMPOTENT_TEST_CACHE_NAME, String.class, Boolean.class). }
false;protected;0;3;;protected Cache<String, DefaultExchangeHolder> getAggregateCache() {     return cacheManager.getCache(AGGREGATE_TEST_CACHE_NAME, String.class, DefaultExchangeHolder.class). }
false;protected;0;7;;protected EhcacheAggregationRepository createAggregateRepository() throws Exception {     EhcacheAggregationRepository repository = new EhcacheAggregationRepository().     repository.setCache(getAggregateCache()).     repository.setCacheName("aggregate").     return repository. }
false;protected,static;3;8;;protected static int[] generateRandomArrayOfInt(int size, int lower, int upper) {     Random random = new Random().     int[] array = new int[size].     Arrays.setAll(array, i -> random.nextInt(upper - lower) + lower).     return array. }
false;protected,static;0;3;;protected static String generateRandomString() {     return UUID.randomUUID().toString(). }
false;protected,static;1;6;;protected static String[] generateRandomArrayOfStrings(int size) {     String[] array = new String[size].     Arrays.setAll(array, i -> generateRandomString()).     return array. }
false;protected,static;1;3;;protected static List<String> generateRandomListOfStrings(int size) {     return Arrays.asList(generateRandomArrayOfStrings(size)). }
false;protected,static;1;6;;protected static Map<String, String> generateRandomMapOfString(int size) {     return IntStream.range(0, size).boxed().collect(Collectors.toMap(i -> i + "-" + generateRandomString(), i -> i + "-" + generateRandomString())). }
