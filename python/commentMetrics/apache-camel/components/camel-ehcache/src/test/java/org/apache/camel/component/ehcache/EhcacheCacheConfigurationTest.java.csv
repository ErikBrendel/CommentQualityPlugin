commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;29;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("myProgrammaticConfiguration", CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class, String.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(100, EntryUnit.ENTRIES).offheap(1, MemoryUnit.MB)).build()).     registry.bind("myCacheManager", CacheManagerBuilder.newCacheManagerBuilder().withCache("myCache", CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class, String.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(100, EntryUnit.ENTRIES).offheap(1, MemoryUnit.MB))).build(true)).     return registry. }
false;public;0;15;;// ***************************** // Test // ***************************** @Test public void testProgrammaticConfiguration() throws Exception {     Cache<String, String> cache = getCache(ehcacheProgrammaticConf, "myProgrammaticCacheConf").     ResourcePools pools = cache.getRuntimeConfiguration().getResourcePools().     SizedResourcePool h = pools.getPoolForResource(ResourceType.Core.HEAP).     assertNotNull(h).     assertEquals(100, h.getSize()).     assertEquals(EntryUnit.ENTRIES, h.getUnit()).     SizedResourcePool o = pools.getPoolForResource(ResourceType.Core.OFFHEAP).     assertNotNull(o).     assertEquals(1, o.getSize()).     assertEquals(MemoryUnit.MB, o.getUnit()). }
false;public;0;10;;@Test public void testFileConfiguration() throws Exception {     Cache<String, String> cache = getCache(ehcacheFileConf, "myFileCacheConf").     ResourcePools pools = cache.getRuntimeConfiguration().getResourcePools().     SizedResourcePool h = pools.getPoolForResource(ResourceType.Core.HEAP).     assertNotNull(h).     assertEquals(150, h.getSize()).     assertEquals(EntryUnit.ENTRIES, h.getUnit()). }
false;public;0;14;;@Test public void testUserConfiguration() throws Exception {     fluentTemplate().withHeader(EhcacheConstants.ACTION, EhcacheConstants.ACTION_PUT).withHeader(EhcacheConstants.KEY, "user-key").withBody("user-val").to("direct:ehcacheUserConf").send().     Cache<Object, Object> cache = ehcacheUserConf.getManager().getCache("myUserCacheConf", Object.class, Object.class).     assertTrue(cache instanceof UserManagedCache).     assertEquals("user-val", cache.get("user-key")). }
false;public;0;20;;@Test public void testCacheManager() throws Exception {     assertEquals(context().getRegistry().lookupByNameAndType("myCacheManager", CacheManager.class), ehcacheCacheManager.getManager().getCacheManager()).     Cache<String, String> cache = getCache(ehcacheCacheManager, "myCache").     ResourcePools pools = cache.getRuntimeConfiguration().getResourcePools().     SizedResourcePool h = pools.getPoolForResource(ResourceType.Core.HEAP).     assertNotNull(h).     assertEquals(100, h.getSize()).     assertEquals(EntryUnit.ENTRIES, h.getUnit()).     SizedResourcePool o = pools.getPoolForResource(ResourceType.Core.OFFHEAP).     assertNotNull(o).     assertEquals(1, o.getSize()).     assertEquals(MemoryUnit.MB, o.getUnit()). }
false;protected;2;3;;protected Cache<String, String> getCache(EhcacheEndpoint endpoint, String cacheName) throws Exception {     return endpoint.getManager().getCache(cacheName, String.class, String.class). }
false;public;0;10;;public void configure() {     from("direct:ehcacheProgrammaticConf").to(ehcacheProgrammaticConf).     from("direct:ehcacheFileConf").to(ehcacheFileConf).     from("direct:ehcacheUserConf").to(ehcacheUserConf).     from("direct:ehcacheCacheManager").to(ehcacheCacheManager). }
false;protected;0;15;;// **************************** // Route // **************************** @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:ehcacheProgrammaticConf").to(ehcacheProgrammaticConf).             from("direct:ehcacheFileConf").to(ehcacheFileConf).             from("direct:ehcacheUserConf").to(ehcacheUserConf).             from("direct:ehcacheCacheManager").to(ehcacheCacheManager).         }     }. }
