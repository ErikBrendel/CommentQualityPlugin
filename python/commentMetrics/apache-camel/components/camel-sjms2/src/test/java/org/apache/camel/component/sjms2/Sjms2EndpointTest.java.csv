commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;9;;@Test public void testDefaults() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:test").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint sjms = (Sjms2Endpoint) endpoint.     assertEquals(sjms.getEndpointUri(), "sjms2://test").     assertEquals(sjms.createExchange().getPattern(), ExchangePattern.InOnly). }
false;public;0;7;;@Test public void testQueueEndpoint() throws Exception {     Endpoint sjms = context.getEndpoint("sjms2:queue:test").     assertNotNull(sjms).     assertEquals(sjms.getEndpointUri(), "sjms2://queue:test").     assertTrue(sjms instanceof Sjms2Endpoint). }
false;public;0;7;;@Test public void testJndiStyleEndpointName() throws Exception {     Sjms2Endpoint sjms = context.getEndpoint("sjms2:/jms/test/hov.t1.dev:topic", Sjms2Endpoint.class).     assertNotNull(sjms).     assertFalse(sjms.isTopic()).     assertEquals("/jms/test/hov.t1.dev:topic", sjms.getDestinationName()). }
false;public;0;8;;@Test public void testSetTransacted() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?transacted=true").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.isTransacted()). }
false;public;0;8;;@Test public void testAsyncProducer() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?synchronous=true").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.isSynchronous()). }
false;public;0;10;;@Test public void testNamedReplyTo() throws Exception {     String namedReplyTo = "reply.to.queue".     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?namedReplyTo=" + namedReplyTo).     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertEquals(qe.getNamedReplyTo(), namedReplyTo).     assertEquals(qe.createExchange().getPattern(), ExchangePattern.InOut). }
false;public;0;11;;@Test public void testDefaultExchangePattern() throws Exception {     try {         Sjms2Endpoint sjms = (Sjms2Endpoint) context.getEndpoint("sjms2:queue:test").         assertNotNull(sjms).         assertEquals(ExchangePattern.InOnly, sjms.getExchangePattern()).     // assertTrue(sjms.createExchange().getPattern().equals(ExchangePattern.InOnly)).     } catch (Exception e) {         fail("Exception thrown: " + e.getLocalizedMessage()).     } }
false;public;0;10;;@Test public void testInOnlyExchangePattern() throws Exception {     try {         Endpoint sjms = context.getEndpoint("sjms2:queue:test?exchangePattern=" + ExchangePattern.InOnly).         assertNotNull(sjms).         assertTrue(sjms.createExchange().getPattern().equals(ExchangePattern.InOnly)).     } catch (Exception e) {         fail("Exception thrown: " + e.getLocalizedMessage()).     } }
false;public;0;10;;@Test public void testInOutExchangePattern() throws Exception {     try {         Endpoint sjms = context.getEndpoint("sjms2:queue:test?exchangePattern=" + ExchangePattern.InOut).         assertNotNull(sjms).         assertTrue(sjms.createExchange().getPattern().equals(ExchangePattern.InOut)).     } catch (Exception e) {         fail("Exception thrown: " + e.getLocalizedMessage()).     } }
false;public;0;10;;@Test public void testNamedReplyToAndMEPMatch() throws Exception {     String namedReplyTo = "reply.to.queue".     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?namedReplyTo=" + namedReplyTo + "&exchangePattern=" + ExchangePattern.InOut).     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertEquals(qe.getNamedReplyTo(), namedReplyTo).     assertEquals(qe.createExchange().getPattern(), ExchangePattern.InOut). }
false;public;0;4;;@Test(expected = Exception.class) public void testNamedReplyToAndMEPMismatch() throws Exception {     context.getEndpoint("sjms2:queue:test?namedReplyTo=reply.to.queue&exchangePattern=" + ExchangePattern.InOnly). }
false;public;0;8;;@Test public void testDestinationName() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?synchronous=true").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.isSynchronous()). }
false;public;0;8;;@Test public void testTransactedBatchCountDefault() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?transacted=true").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.getTransactionBatchCount() == -1). }
false;public;0;8;;@Test public void testTransactedBatchCountModified() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?transacted=true&transactionBatchCount=10").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.getTransactionBatchCount() == 10). }
false;public;0;8;;@Test public void testTransactedBatchTimeoutDefault() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?transacted=true").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.getTransactionBatchTimeout() == 5000). }
false;public;0;8;;@Test public void testTransactedBatchTimeoutModified() throws Exception {     Endpoint endpoint = context.getEndpoint("sjms2:queue:test?transacted=true&transactionBatchTimeout=3000").     assertNotNull(endpoint).     assertTrue(endpoint instanceof Sjms2Endpoint).     Sjms2Endpoint qe = (Sjms2Endpoint) endpoint.     assertTrue(qe.getTransactionBatchTimeout() == 3000). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false").     Sjms2Component component = new Sjms2Component().     component.setConnectionCount(3).     component.setConnectionFactory(connectionFactory).     camelContext.addComponent("sjms2", component).     return camelContext. }
