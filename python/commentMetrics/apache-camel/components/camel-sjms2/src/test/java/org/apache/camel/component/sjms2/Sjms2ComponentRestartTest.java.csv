commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false").     JndiRegistry jndi = super.createRegistry().     jndi.bind("activemqCF", connectionFactory).     return jndi. }
false;public;0;4;;@Override public void configure() throws Exception {     from("sjms2:queue:test").to("mock:test"). }
false;public;0;37;;@Test public void testRestartWithStopStart() throws Exception {     Sjms2Component sjms2Component = new Sjms2Component().     sjms2Component.setConnectionFactory((ConnectionFactory) context.getRegistry().lookupByName("activemqCF")).     context.addComponent("sjms2", sjms2Component).     RouteBuilder routeBuilder = new RouteBuilder(context) {          @Override         public void configure() throws Exception {             from("sjms2:queue:test").to("mock:test").         }     }.     context.addRoutes(routeBuilder).     context.start().     getMockEndpoint("mock:test").expectedMessageCount(1).     template.sendBody("sjms2:queue:test", "Hello World").     assertMockEndpointsSatisfied().     // restart     context.stop().     // must add our custom component back again     context.addComponent("sjms2", sjms2Component).     context.start().     getMockEndpoint("mock:test").expectedMessageCount(1).     // and re-create template     template = context.createProducerTemplate().     template.sendBody("sjms2:queue:test", "Hello World").     assertMockEndpointsSatisfied().     context.stop(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("sjms2:queue:test").to("mock:test"). }
false;public;0;31;;@Test public void testRestartWithSuspendResume() throws Exception {     Sjms2Component sjms2Component = new Sjms2Component().     sjms2Component.setConnectionFactory((ConnectionFactory) context.getRegistry().lookupByName("activemqCF")).     context.addComponent("sjms2", sjms2Component).     RouteBuilder routeBuilder = new RouteBuilder(context) {          @Override         public void configure() throws Exception {             from("sjms2:queue:test").to("mock:test").         }     }.     context.addRoutes(routeBuilder).     context.start().     getMockEndpoint("mock:test").expectedMessageCount(1).     template.sendBody("sjms2:queue:test", "Hello World").     assertMockEndpointsSatisfied().     // restart     context.suspend().     context.resume().     getMockEndpoint("mock:test").expectedMessageCount(1).     template.sendBody("sjms2:queue:test", "Hello World").     assertMockEndpointsSatisfied().     context.stop(). }
