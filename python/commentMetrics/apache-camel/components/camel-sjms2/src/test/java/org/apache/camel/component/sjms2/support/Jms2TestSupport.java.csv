commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;9;/**  * Set up the Broker  *  * @see CamelTestSupport#doPreSetup()  *  * @throws Exception  */ ;/**  * Set up the Broker  *  * @see CamelTestSupport#doPreSetup()  *  * @throws Exception  */ @Override protected void doPreSetup() throws Exception {     broker = new EmbeddedJMS().     deleteDirectory("target/data").     port = AvailablePortFinder.getNextAvailable(33333).     brokerUri = "tcp://localhost:" + port.     configureBroker(this.broker).     startBroker(). }
false;protected;1;20;;protected void configureBroker(EmbeddedJMS broker) throws Exception {     Configuration configuration = new ConfigurationImpl().setPersistenceEnabled(false).setJournalDirectory("target/data/journal").setSecurityEnabled(false).addAcceptorConfiguration("connector", brokerUri + "?protocols=CORE,AMQP,HORNETQ,OPENWIRE").addAcceptorConfiguration("vm", "vm://broker").addConnectorConfiguration("connector", new TransportConfiguration(NettyConnectorFactory.class.getName())).     JMSConfiguration jmsConfig = new JMSConfigurationImpl().     ConnectionFactoryConfiguration cfConfig = new ConnectionFactoryConfigurationImpl().setName("cf").setConnectorNames(Arrays.asList("connector")).setBindings("cf").     jmsConfig.getConnectionFactoryConfigurations().add(cfConfig).     JMSQueueConfiguration queueConfig = new JMSQueueConfigurationImpl().setName("queue1").setDurable(false).setBindings("queue/queue1").     jmsConfig.getQueueConfigurations().add(queueConfig).     broker.setConfiguration(configuration).setJmsConfiguration(jmsConfig). }
false;private;0;4;;private void startBroker() throws Exception {     broker.start().     log.info("Started Embedded JMS Server"). }
false;public;0;23;;@Override public void tearDown() throws Exception {     super.tearDown().     DefaultCamelContext dcc = (DefaultCamelContext) context.     while (!dcc.isStopped()) {         log.info("Waiting on the Camel Context to stop").     }     log.info("Closing JMS Session").     if (getSession() != null) {         getSession().close().         setSession(null).     }     log.info("Closing JMS Connection").     if (connection != null) {         connection.stop().         connection = null.     }     log.info("Stopping the ActiveMQ Broker").     if (broker != null) {         broker.stop().         broker = null.     } }
true;protected;0;13;/*      * @see org.apache.camel.test.junit4.CamelTestSupport#createCamelContext()      * @return      * @throws Exception      */ ;/*      * @see org.apache.camel.test.junit4.CamelTestSupport#createCamelContext()      * @return      * @throws Exception      */ @Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = getConnectionFactory().     connection = connectionFactory.createConnection().     connection.start().     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     Sjms2Component component = new Sjms2Component().     component.setConnectionCount(1).     component.setConnectionFactory(connectionFactory).     camelContext.addComponent("sjms2", component).     return camelContext. }
false;protected;0;13;;protected ConnectionFactory getConnectionFactory() throws Exception {     final String protocol = System.getProperty("protocol", "CORE").toUpperCase().     // of artemis we may be able test against them in an agnostic way.     switch(protocol) {         case "OPENWIRE":             return new ActiveMQConnectionFactory(brokerUri).         default:             return ActiveMQJMSClient.createConnectionFactory(brokerUri, "test").     } }
false;public;1;3;;public QueueQueryResult getQueueQueryResult(String queueQuery) throws Exception {     return broker.getActiveMQServer().queueQuery(new SimpleString(queueQuery)). }
false;public;1;3;;public void setSession(Session session) {     this.session = session. }
false;public;0;3;;public Session getSession() {     return session. }
false;public;1;3;;public MessageConsumer createQueueConsumer(String destination) throws Exception {     return new Jms2ObjectFactory().createMessageConsumer(session, destinationCreationStrategy.createDestination(session, destination, false), null, false, null, false, false). }
false;public;2;3;;public MessageConsumer createTopicConsumer(String destination, String messageSelector) throws Exception {     return new Jms2ObjectFactory().createMessageConsumer(session, destinationCreationStrategy.createDestination(session, destination, true), messageSelector, true, null, false, false). }
