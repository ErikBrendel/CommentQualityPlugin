commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;public void process(Exchange exchange) throws Exception {     if (!(exchange.getIn().getBody() instanceof javax.mail.Message)) {         SendEmailRequest request = createMailRequest(exchange).         log.trace("Sending request [{}] from exchange [{}]...", request, exchange).         SendEmailResult result = getEndpoint().getSESClient().sendEmail(request).         log.trace("Received result [{}]", result).         Message message = getMessageForResponse(exchange).         message.setHeader(SesConstants.MESSAGE_ID, result.getMessageId()).     } else {         SendRawEmailRequest request = createRawMailRequest(exchange).         log.trace("Sending request [{}] from exchange [{}]...", request, exchange).         SendRawEmailResult result = getEndpoint().getSESClient().sendRawEmail(request).         log.trace("Received result [{}]", result).         Message message = getMessageForResponse(exchange).         message.setHeader(SesConstants.MESSAGE_ID, result.getMessageId()).     } }
false;private;1;10;;private SendEmailRequest createMailRequest(Exchange exchange) {     SendEmailRequest request = new SendEmailRequest().     request.setSource(determineFrom(exchange)).     request.setDestination(determineTo(exchange)).     request.setReturnPath(determineReturnPath(exchange)).     request.setReplyToAddresses(determineReplyToAddresses(exchange)).     request.setMessage(createMessage(exchange)).     return request. }
false;private;1;7;;private SendRawEmailRequest createRawMailRequest(Exchange exchange) throws Exception {     SendRawEmailRequest request = new SendRawEmailRequest().     request.setSource(determineFrom(exchange)).     request.setDestinations(determineRawTo(exchange)).     request.setRawMessage(createRawMessage(exchange)).     return request. }
false;private;1;12;;private com.amazonaws.services.simpleemail.model.Message createMessage(Exchange exchange) {     com.amazonaws.services.simpleemail.model.Message message = new com.amazonaws.services.simpleemail.model.Message().     Boolean isHtmlEmail = exchange.getIn().getHeader(SesConstants.HTML_EMAIL, false, Boolean.class).     String content = exchange.getIn().getBody(String.class).     if (isHtmlEmail) {         message.setBody(new Body().withHtml(new Content().withData(content))).     } else {         message.setBody(new Body().withText(new Content().withData(content))).     }     message.setSubject(new Content(determineSubject(exchange))).     return message. }
false;private;1;14;;private com.amazonaws.services.simpleemail.model.RawMessage createRawMessage(Exchange exchange) throws Exception {     com.amazonaws.services.simpleemail.model.RawMessage message = new com.amazonaws.services.simpleemail.model.RawMessage().     javax.mail.Message content = exchange.getIn().getBody(javax.mail.Message.class).     OutputStream byteOutput = new ByteArrayOutputStream().     try {         content.writeTo(byteOutput).     } catch (Exception e) {         log.error("Cannot write to byte Array").         throw e.     }     byte[] messageByteArray = ((ByteArrayOutputStream) byteOutput).toByteArray().     message.setData(ByteBuffer.wrap(messageByteArray)).     return message. }
false;private;1;8;;@SuppressWarnings("unchecked") private Collection<String> determineReplyToAddresses(Exchange exchange) {     List<String> replyToAddresses = exchange.getIn().getHeader(SesConstants.REPLY_TO_ADDRESSES, List.class).     if (replyToAddresses == null) {         replyToAddresses = getConfiguration().getReplyToAddresses().     }     return replyToAddresses. }
false;private;1;7;;private String determineReturnPath(Exchange exchange) {     String returnPath = exchange.getIn().getHeader(SesConstants.RETURN_PATH, String.class).     if (returnPath == null) {         returnPath = getConfiguration().getReturnPath().     }     return returnPath. }
false;private;1;8;;@SuppressWarnings("unchecked") private Destination determineTo(Exchange exchange) {     List<String> to = exchange.getIn().getHeader(SesConstants.TO, List.class).     if (to == null) {         to = getConfiguration().getTo().     }     return new Destination(to). }
false;private;1;8;;@SuppressWarnings("unchecked") private List determineRawTo(Exchange exchange) {     List<String> to = exchange.getIn().getHeader(SesConstants.TO, List.class).     if (to == null) {         to = getConfiguration().getTo().     }     return to. }
false;private;1;7;;private String determineFrom(Exchange exchange) {     String from = exchange.getIn().getHeader(SesConstants.FROM, String.class).     if (from == null) {         from = getConfiguration().getFrom().     }     return from. }
false;private;1;7;;private String determineSubject(Exchange exchange) {     String subject = exchange.getIn().getHeader(SesConstants.SUBJECT, String.class).     if (subject == null) {         subject = getConfiguration().getSubject().     }     return subject. }
false;protected;0;3;;protected SesConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (sesProducerToString == null) {         sesProducerToString = "SesProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return sesProducerToString. }
false;public;0;4;;@Override public SesEndpoint getEndpoint() {     return (SesEndpoint) super.getEndpoint(). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
