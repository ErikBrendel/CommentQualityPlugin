commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void createEndpointWithMinimalConfiguration() throws Exception {     AmazonSESClientMock mock = new AmazonSESClientMock().     context.getRegistry().bind("amazonSESClient", mock).     SesComponent component = new SesComponent(context).     SesEndpoint endpoint = (SesEndpoint) component.createEndpoint("aws-ses://from@example.com?amazonSESClient=#amazonSESClient&accessKey=xxx&secretKey=yyy").     assertEquals("from@example.com", endpoint.getConfiguration().getFrom()).     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNotNull(endpoint.getConfiguration().getAmazonSESClient()).     assertNull(endpoint.getConfiguration().getTo()).     assertNull(endpoint.getConfiguration().getSubject()).     assertNull(endpoint.getConfiguration().getReturnPath()).     assertNull(endpoint.getConfiguration().getReplyToAddresses()). }
false;public;0;14;;@Test public void createEndpointWithOnlyAccessKeyAndSecretKey() throws Exception {     SesComponent component = new SesComponent(context).     SesEndpoint endpoint = (SesEndpoint) component.createEndpoint("aws-ses://from@example.com?accessKey=xxx&secretKey=yyy").     assertEquals("from@example.com", endpoint.getConfiguration().getFrom()).     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNull(endpoint.getConfiguration().getAmazonSESClient()).     assertNull(endpoint.getConfiguration().getTo()).     assertNull(endpoint.getConfiguration().getSubject()).     assertNull(endpoint.getConfiguration().getReturnPath()).     assertNull(endpoint.getConfiguration().getReplyToAddresses()). }
false;public;0;19;;@Test public void createEndpointWithMinimalConfigurationAndProvidedClient() throws Exception {     AmazonSESClientMock mock = new AmazonSESClientMock().     context.getRegistry().bind("amazonSESClient", mock).     SesComponent component = new SesComponent(context).     SesEndpoint endpoint = (SesEndpoint) component.createEndpoint("aws-ses://from@example.com?" + "amazonSESClient=#amazonSESClient").     assertEquals("from@example.com", endpoint.getConfiguration().getFrom()).     assertNull(endpoint.getConfiguration().getAccessKey()).     assertNull(endpoint.getConfiguration().getSecretKey()).     assertSame(mock, endpoint.getConfiguration().getAmazonSESClient()).     assertNull(endpoint.getConfiguration().getTo()).     assertNull(endpoint.getConfiguration().getSubject()).     assertNull(endpoint.getConfiguration().getReturnPath()).     assertNull(endpoint.getConfiguration().getReplyToAddresses()). }
false;public;0;24;;@Test public void createEndpointWithMaximalConfiguration() throws Exception {     AmazonSESClientMock mock = new AmazonSESClientMock().     context.getRegistry().bind("amazonSESClient", mock).     SesComponent component = new SesComponent(context).     SesEndpoint endpoint = (SesEndpoint) component.createEndpoint("aws-ses://from@example.com?amazonSESClient=#amazonSESClient&accessKey=xxx" + "&secretKey=yyy&to=to1@example.com,to2@example.com&subject=Subject" + "&returnPath=bounce@example.com&replyToAddresses=replyTo1@example.com,replyTo2@example.com").     assertEquals("from@example.com", endpoint.getConfiguration().getFrom()).     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNotNull(endpoint.getConfiguration().getAmazonSESClient()).     assertEquals(2, endpoint.getConfiguration().getTo().size()).     assertTrue(endpoint.getConfiguration().getTo().contains("to1@example.com")).     assertTrue(endpoint.getConfiguration().getTo().contains("to2@example.com")).     assertEquals("Subject", endpoint.getConfiguration().getSubject()).     assertEquals("bounce@example.com", endpoint.getConfiguration().getReturnPath()).     assertEquals(2, endpoint.getConfiguration().getReplyToAddresses().size()).     assertTrue(endpoint.getConfiguration().getReplyToAddresses().contains("replyTo1@example.com")).     assertTrue(endpoint.getConfiguration().getReplyToAddresses().contains("replyTo2@example.com")). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutSourceName() throws Exception {     SesComponent component = new SesComponent(context).     component.createEndpoint("aws-ses:// "). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAmazonSESClientConfiguration() throws Exception {     SesComponent component = new SesComponent(context).     component.createEndpoint("aws-ses://from@example.com"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAccessKeyConfiguration() throws Exception {     SesComponent component = new SesComponent(context).     component.createEndpoint("aws-ses://from@example.com?secretKey=yyy"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutSecretKeyConfiguration() throws Exception {     SesComponent component = new SesComponent(context).     component.createEndpoint("aws-ses://from@example.com?accessKey=xxx"). }
false;public;0;11;;@Test public void createEndpointWithComponentElements() throws Exception {     SesComponent component = new SesComponent(context).     component.setAccessKey("XXX").     component.setSecretKey("YYY").     SesEndpoint endpoint = (SesEndpoint) component.createEndpoint("aws-ses://from@example.com").     assertEquals("from@example.com", endpoint.getConfiguration().getFrom()).     assertEquals("XXX", endpoint.getConfiguration().getAccessKey()).     assertEquals("YYY", endpoint.getConfiguration().getSecretKey()). }
false;public;0;13;;@Test public void createEndpointWithComponentAndEndpointElements() throws Exception {     SesComponent component = new SesComponent(context).     component.setAccessKey("XXX").     component.setSecretKey("YYY").     component.setRegion(Regions.US_WEST_1.toString()).     SesEndpoint endpoint = (SesEndpoint) component.createEndpoint("aws-ses://from@example.com?accessKey=xxxxxx&secretKey=yyyyy&region=US_EAST_1").     assertEquals("from@example.com", endpoint.getConfiguration().getFrom()).     assertEquals("xxxxxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyyyy", endpoint.getConfiguration().getSecretKey()).     assertEquals("US_EAST_1", endpoint.getConfiguration().getRegion()). }
false;public;0;9;;@Test public void createEndpointWithoutSecretKeyAndAccessKeyConfiguration() throws Exception {     AmazonSESClientMock mock = new AmazonSESClientMock().     context.getRegistry().bind("amazonSESClient", mock).     SesComponent component = new SesComponent(context).     component.createEndpoint("aws-ses://from@example.com?amazonSESClient=#amazonSESClient"). }
