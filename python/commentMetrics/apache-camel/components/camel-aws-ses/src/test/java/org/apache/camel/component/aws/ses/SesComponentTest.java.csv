commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     sesClient = new AmazonSESClientMock().     super.setUp(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("This is my message text."). }
false;public;0;23;;@Test public void sendInOnlyMessageUsingUrlOptions() throws Exception {     Exchange exchange = template.send("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("This is my message text.").         }     }).     assertEquals("1", exchange.getIn().getHeader(SesConstants.MESSAGE_ID)).     SendEmailRequest sendEmailRequest = sesClient.getSendEmailRequest().     assertEquals("from@example.com", sendEmailRequest.getSource()).     assertEquals(2, getTo(sendEmailRequest).size()).     assertTrue(getTo(sendEmailRequest).contains("to1@example.com")).     assertTrue(getTo(sendEmailRequest).contains("to2@example.com")).     assertEquals("bounce@example.com", sendEmailRequest.getReturnPath()).     assertEquals(2, sendEmailRequest.getReplyToAddresses().size()).     assertTrue(sendEmailRequest.getReplyToAddresses().contains("replyTo1@example.com")).     assertTrue(sendEmailRequest.getReplyToAddresses().contains("replyTo2@example.com")).     assertEquals("Subject", getSubject(sendEmailRequest)).     assertEquals("This is my message text.", getBody(sendEmailRequest)). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("This is my message text."). }
false;public;0;11;;@Test public void sendInOutMessageUsingUrlOptions() throws Exception {     Exchange exchange = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("This is my message text.").         }     }).     assertEquals("1", exchange.getOut().getHeader(SesConstants.MESSAGE_ID)). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("This is my message text.").     exchange.getIn().setHeader(SesConstants.FROM, "anotherFrom@example.com").     exchange.getIn().setHeader(SesConstants.TO, Arrays.asList("anotherTo1@example.com", "anotherTo2@example.com")).     exchange.getIn().setHeader(SesConstants.RETURN_PATH, "anotherBounce@example.com").     exchange.getIn().setHeader(SesConstants.REPLY_TO_ADDRESSES, Arrays.asList("anotherReplyTo1@example.com", "anotherReplyTo2@example.com")).     exchange.getIn().setHeader(SesConstants.SUBJECT, "anotherSubject"). }
false;public;0;29;;@Test public void sendMessageUsingMessageHeaders() throws Exception {     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("This is my message text.").             exchange.getIn().setHeader(SesConstants.FROM, "anotherFrom@example.com").             exchange.getIn().setHeader(SesConstants.TO, Arrays.asList("anotherTo1@example.com", "anotherTo2@example.com")).             exchange.getIn().setHeader(SesConstants.RETURN_PATH, "anotherBounce@example.com").             exchange.getIn().setHeader(SesConstants.REPLY_TO_ADDRESSES, Arrays.asList("anotherReplyTo1@example.com", "anotherReplyTo2@example.com")).             exchange.getIn().setHeader(SesConstants.SUBJECT, "anotherSubject").         }     }).     assertEquals("1", exchange.getIn().getHeader(SesConstants.MESSAGE_ID)).     SendEmailRequest sendEmailRequest = sesClient.getSendEmailRequest().     assertEquals("anotherFrom@example.com", sendEmailRequest.getSource()).     assertEquals(2, getTo(sendEmailRequest).size()).     assertTrue(getTo(sendEmailRequest).contains("anotherTo1@example.com")).     assertTrue(getTo(sendEmailRequest).contains("anotherTo2@example.com")).     assertEquals("anotherBounce@example.com", sendEmailRequest.getReturnPath()).     assertEquals(2, sendEmailRequest.getReplyToAddresses().size()).     assertTrue(sendEmailRequest.getReplyToAddresses().contains("anotherReplyTo1@example.com")).     assertTrue(sendEmailRequest.getReplyToAddresses().contains("anotherReplyTo2@example.com")).     assertEquals("anotherSubject", getSubject(sendEmailRequest)).     assertEquals("This is my message text.", getBody(sendEmailRequest)). }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("amazonSESClient", sesClient).     return registry. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to("aws-ses://from@example.com" + "?to=to1@example.com,to2@example.com" + "&subject=Subject" + "&returnPath=bounce@example.com" + "&replyToAddresses=replyTo1@example.com,replyTo2@example.com" + "&amazonSESClient=#amazonSESClient"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("aws-ses://from@example.com" + "?to=to1@example.com,to2@example.com" + "&subject=Subject" + "&returnPath=bounce@example.com" + "&replyToAddresses=replyTo1@example.com,replyTo2@example.com" + "&amazonSESClient=#amazonSESClient").         }     }. }
false;private;1;3;;private String getBody(SendEmailRequest sendEmailRequest) {     return sendEmailRequest.getMessage().getBody().getText().getData(). }
false;private;1;3;;private String getSubject(SendEmailRequest sendEmailRequest) {     return sendEmailRequest.getMessage().getSubject().getData(). }
false;private;1;3;;private List<String> getTo(SendEmailRequest sendEmailRequest) {     return sendEmailRequest.getDestination().getToAddresses(). }
