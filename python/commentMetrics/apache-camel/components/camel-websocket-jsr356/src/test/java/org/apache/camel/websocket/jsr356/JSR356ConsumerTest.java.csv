commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void ensureClientModeReceiveProperlyExchanges() throws Exception {     final String message = ExistingServerEndpoint.class.getName() + "#" + testName.getMethodName().     final MockEndpoint mockEndpoint = getMockEndpoint("mock:" + testName.getMethodName()).     mockEndpoint.expectedBodiesReceived(message).     // to avoid lifecycle issue suring     ExistingServerEndpoint.self.doSend().     // startup we send the message     // only here     mockEndpoint.assertIsSatisfied(). // note that this test leaks a connection }
false;public;2;4;;@Override public void onOpen(final Session session, final EndpointConfig config) { // no-op }
false;public;0;18;;@Test public void ensureServerModeReceiveProperlyExchanges() throws Exception {     final String message = getClass().getName() + "#" + testName.getMethodName().     final MockEndpoint mockEndpoint = getMockEndpoint("mock:" + testName.getMethodName()).     mockEndpoint.expectedBodiesReceived(message).     final WebSocketContainer container = ContainerProvider.getWebSocketContainer().     final Session session = container.connectToServer(new Endpoint() {          @Override         public void onOpen(final Session session, final EndpointConfig config) {         // no-op         }     }, ClientEndpointConfig.Builder.create().build(), URI.create("ws://localhost:" + servlet.getConfiguration().getHttpPort() + "/test")).     session.getBasicRemote().sendText(message).     session.close(new CloseReason(CloseReason.CloseCodes.GOING_AWAY, "bye")).     mockEndpoint.assertIsSatisfied(). }
false;public;0;6;;public void configure() {     from("websocket-jsr356:///test").id("camel_consumer_acts_as_server").convertBodyTo(String.class).to("mock:ensureServerModeReceiveProperlyExchanges").     from("websocket-jsr356://ws://localhost:" + servlet.getConfiguration().getHttpPort() + "/existingserver").id("camel_consumer_acts_as_client").convertBodyTo(String.class).to("mock:ensureClientModeReceiveProperlyExchanges"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("websocket-jsr356:///test").id("camel_consumer_acts_as_server").convertBodyTo(String.class).to("mock:ensureServerModeReceiveProperlyExchanges").             from("websocket-jsr356://ws://localhost:" + servlet.getConfiguration().getHttpPort() + "/existingserver").id("camel_consumer_acts_as_client").convertBodyTo(String.class).to("mock:ensureClientModeReceiveProperlyExchanges").         }     }. }
false;public;1;5;;@OnOpen public void onOpen(final Session session) {     this.session = session.     self = this. }
false;;0;3;;void doSend() throws IOException {     session.getBasicRemote().sendText(getClass().getName() + "#ensureClientModeReceiveProperlyExchanges"). }
