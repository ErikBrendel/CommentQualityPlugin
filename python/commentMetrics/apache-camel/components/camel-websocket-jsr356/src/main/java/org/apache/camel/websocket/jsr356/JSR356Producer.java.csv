commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public JSR356Endpoint getEndpoint() {     return JSR356Endpoint.class.cast(super.getEndpoint()). }
false;public;2;12;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     final Session session = exchange.getIn().getHeader(JSR356Constants.SESSION, Session.class).     if (session != null && exchange.getIn().getHeader(JSR356Constants.USE_INCOMING_SESSION, false, Boolean.class)) {         synchronized (session) {             doSend(exchange, session).         }     } else {         onExchange.accept(exchange, callback).     }     return true. }
false;protected;0;13;;@Override protected void doStart() throws Exception {     super.doStart().     final String endpointKey = getEndpoint().getEndpointUri().substring("websocket-jsr356://".length()).     if (!endpointKey.contains("://")) {         // here         throw new IllegalArgumentException("You should pass a client uri").     }     final ClientEndpointConfig.Builder clientConfig = ClientEndpointConfig.Builder.create().     manager = new ClientSessions(sessionCount, URI.create(endpointKey), clientConfig.build(), null).     manager.prepare().     onExchange = (ex, cb) -> manager.execute(session -> doSend(ex, session)). }
false;private;2;7;;private void doSend(final Exchange ex, final Session session) {     try {         JSR356WebSocketComponent.sendMessage(session, ex.getIn().getBody()).     } catch (final IOException e) {         ex.setException(e).     } }
false;protected;0;5;;@Override protected void doStop() throws Exception {     ofNullable(manager).ifPresent(ClientSessions::close).     super.doStop(). }
