commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) {     return new JSR356Endpoint(this, uri). }
false;public,static;2;16;;public static void sendMessage(final Session session, final Object message) throws IOException {     // todo:     final RemoteEndpoint.Basic basicRemote = session.getBasicRemote().     // async?     synchronized (session) {         if (String.class.isInstance(message)) {             basicRemote.sendText(String.valueOf(message)).         } else if (ByteBuffer.class.isInstance(message)) {             basicRemote.sendBinary(ByteBuffer.class.cast(message)).         } else if (InputStream.class.isInstance(message)) {             IOHelper.copy(InputStream.class.cast(message), basicRemote.getSendStream()).         } else {             throw new IllegalArgumentException("Unsupported input: " + message).         }     } }
false;public,static;2;3;;public static void registerServer(final String contextPath, final ServerContainer container) {     SERVER_CONTAINERS.put(contextPath, new ContextBag(container)). }
false;public,static;1;3;;public static void unregisterServer(final String contextPath) {     SERVER_CONTAINERS.remove(contextPath). }
false;public,static;1;4;;public static ContextBag getContext(final String context) {     return ofNullable(context).map(SERVER_CONTAINERS::get).orElseGet(() -> SERVER_CONTAINERS.size() == 1 ? SERVER_CONTAINERS.values().iterator().next() : SERVER_CONTAINERS.get("")). }
false;public;0;3;;public ServerContainer getContainer() {     return container. }
false;public;0;3;;public Map<String, CamelServerEndpoint> getEndpoints() {     return endpoints. }
