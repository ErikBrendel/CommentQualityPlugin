commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public Producer createProducer() throws Exception {     BeanValidatorProducer producer = new BeanValidatorProducer(this).     if (group != null) {         producer.setGroup(getCamelContext().getClassResolver().resolveMandatoryClass(group)).     }     ValidatorFactory validatorFactory = buildValidatorFactory(isOsgiContext(), validationProviderResolver, messageInterpolator, traversableResolver, constraintValidatorFactory).     producer.setValidatorFactory(validatorFactory).     return producer. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Consumer is not supported"). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;protected;0;3;/**  * Recognizes if component is executed in the OSGi environment.  *  * @return true if component is executed in the OSGi environment. False otherwise.  */ ;/**  * Recognizes if component is executed in the OSGi environment.  *  * @return true if component is executed in the OSGi environment. False otherwise.  */ protected boolean isOsgiContext() {     return PlatformHelper.isOsgiContext(getCamelContext()). }
false;public;0;3;;public String getLabel() {     return label. }
false;public;1;3;;public void setLabel(String label) {     this.label = label. }
false;public;0;3;;public String getGroup() {     return group. }
true;public;1;3;/**  * To use a custom validation group  */ ;/**  * To use a custom validation group  */ public void setGroup(String group) {     this.group = group. }
false;public;0;3;;public ValidationProviderResolver getValidationProviderResolver() {     return validationProviderResolver. }
true;public;1;3;/**  * To use a a custom {@link ValidationProviderResolver}  */ ;/**  * To use a a custom {@link ValidationProviderResolver}  */ public void setValidationProviderResolver(ValidationProviderResolver validationProviderResolver) {     this.validationProviderResolver = validationProviderResolver. }
false;public;0;3;;public MessageInterpolator getMessageInterpolator() {     return messageInterpolator. }
true;public;1;3;/**  * To use a custom {@link MessageInterpolator}  */ ;/**  * To use a custom {@link MessageInterpolator}  */ public void setMessageInterpolator(MessageInterpolator messageInterpolator) {     this.messageInterpolator = messageInterpolator. }
false;public;0;3;;public TraversableResolver getTraversableResolver() {     return traversableResolver. }
true;public;1;3;/**  * To use a custom {@link TraversableResolver}  */ ;/**  * To use a custom {@link TraversableResolver}  */ public void setTraversableResolver(TraversableResolver traversableResolver) {     this.traversableResolver = traversableResolver. }
false;public;0;3;;public ConstraintValidatorFactory getConstraintValidatorFactory() {     return constraintValidatorFactory. }
true;public;1;3;/**  * To use a custom {@link ConstraintValidatorFactory}  */ ;/**  * To use a custom {@link ConstraintValidatorFactory}  */ public void setConstraintValidatorFactory(ConstraintValidatorFactory constraintValidatorFactory) {     this.constraintValidatorFactory = constraintValidatorFactory. }
