commented;modifiers;parameterAmount;loc;comment;code
false;public,static;5;29;;public static ValidatorFactory buildValidatorFactory(boolean osgi, ValidationProviderResolver validationProviderResolver, MessageInterpolator messageInterpolator, TraversableResolver traversableResolver, ConstraintValidatorFactory constraintValidatorFactory) {     ValidationProviderResolver resolvedValidationProviderResolver = resolveValidationProviderResolver(osgi, validationProviderResolver).     GenericBootstrap bootstrap = Validation.byDefaultProvider().     if (resolvedValidationProviderResolver != null) {         bootstrap.providerResolver(resolvedValidationProviderResolver).     }     Configuration<?> configuration = bootstrap.configure().     if (messageInterpolator != null) {         configuration.messageInterpolator(messageInterpolator).     }     if (traversableResolver != null) {         configuration.traversableResolver(traversableResolver).     }     if (constraintValidatorFactory != null) {         configuration.constraintValidatorFactory(constraintValidatorFactory).     }     return configuration.buildValidatorFactory(). }
true;private,static;2;11;/**  * Resolves optional custom {@code javax.validation.ValidationProviderResolver} to be used by the component. By  * default component tries to use resolver instance bound to the Camel registry under name  * {@code validationProviderResolver} . If there is no such resolver instance in the registry and component is  * running in the OSGi environment, {@link HibernateValidationProviderResolver} will be used. In all the other  * cases this method will return null.  *  * @param osgi specifies if validator factory should be OSGi-aware  * @param validationProviderResolver predefined provider resolver. This parameter overrides the results of the  *                                   resolution.  * @return {@code javax.validation.ValidationProviderResolver} instance or null if no custom resolver should  * be used by the component  */ ;/**  * Resolves optional custom {@code javax.validation.ValidationProviderResolver} to be used by the component. By  * default component tries to use resolver instance bound to the Camel registry under name  * {@code validationProviderResolver} . If there is no such resolver instance in the registry and component is  * running in the OSGi environment, {@link HibernateValidationProviderResolver} will be used. In all the other  * cases this method will return null.  *  * @param osgi specifies if validator factory should be OSGi-aware  * @param validationProviderResolver predefined provider resolver. This parameter overrides the results of the  *                                   resolution.  * @return {@code javax.validation.ValidationProviderResolver} instance or null if no custom resolver should  * be used by the component  */ private static ValidationProviderResolver resolveValidationProviderResolver(boolean osgi, ValidationProviderResolver validationProviderResolver) {     if (validationProviderResolver != null) {         return validationProviderResolver.     }     if (osgi) {         return new HibernateValidationProviderResolver().     }     return null. }
