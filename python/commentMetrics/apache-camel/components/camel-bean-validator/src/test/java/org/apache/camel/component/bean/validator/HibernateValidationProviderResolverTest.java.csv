commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void configure() throws Exception {     onException(BeanValidationException.class).to(mockEndpoint).     from("direct:test").to("bean-validator://ValidationProviderResolverTest?validationProviderResolver=#myValidationProviderResolver"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(BeanValidationException.class).to(mockEndpoint).             from("direct:test").to("bean-validator://ValidationProviderResolverTest?validationProviderResolver=#myValidationProviderResolver").         }     }. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("myValidationProviderResolver", new HibernateValidationProviderResolver()).     return registry. }
false;public;0;13;;// Tests @Test public void shouldResolveHibernateValidationProviderResolver() throws InterruptedException {     // Given     mockEndpoint.expectedMessageCount(1).     mockEndpoint.message(0).body().isInstanceOf(CarWithAnnotations.class).     CarWithAnnotations carWithNullFields = new CarWithAnnotations(null, null).     // When     sendBody("direct:test", carWithNullFields).     // Then     assertMockEndpointsSatisfied(). }
