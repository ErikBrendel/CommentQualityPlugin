commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testMarshalAndUnmarshalPojoWithExclusion() throws Exception {     TestPojoExclusion in = new TestPojoExclusion().     MockEndpoint mock = getMockEndpoint("mock:reversePojoExcludeWeight").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TestPojoExclusion.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:inPojoExcludeWeight", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("{\"age\":30,\"height\":190}", marshalledAsString).     template.sendBody("direct:backPojoExcludeWeight", marshalled).     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testMarshalAndUnmarshalPojoWithAnotherExclusion() throws Exception {     TestPojoExclusion in = new TestPojoExclusion().     MockEndpoint mock = getMockEndpoint("mock:reversePojoExcludeAge").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TestPojoExclusion.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:inPojoExcludeAge", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("{\"height\":190,\"weight\":70}", marshalledAsString).     template.sendBody("direct:backPojoExcludeAge", marshalled).     mock.assertIsSatisfied(). }
false;public;1;4;;@Override public boolean shouldSkipField(FieldAttributes f) {     return f.getAnnotation(ExcludeWeight.class) != null. }
false;public;1;4;;@Override public boolean shouldSkipClass(Class<?> clazz) {     return false. }
false;public;1;4;;@Override public boolean shouldSkipField(FieldAttributes f) {     return f.getAnnotation(ExcludeAge.class) != null. }
false;public;1;4;;@Override public boolean shouldSkipClass(Class<?> clazz) {     return false. }
false;public;0;15;;@Override public void configure() throws Exception {     GsonDataFormat weightExclusionFormat = new GsonDataFormat(TestPojoExclusion.class).     weightExclusionFormat.setExclusionStrategies(Arrays.<ExclusionStrategy>asList(new WeightExclusionStrategy())).     from("direct:inPojoExcludeWeight").marshal(weightExclusionFormat).     from("direct:backPojoExcludeWeight").unmarshal(weightExclusionFormat).to("mock:reversePojoExcludeWeight").     // START SNIPPET: format     GsonDataFormat ageExclusionFormat = new GsonDataFormat(TestPojoExclusion.class).     ageExclusionFormat.setExclusionStrategies(Arrays.<ExclusionStrategy>asList(new AgeExclusionStrategy())).     from("direct:inPojoExcludeAge").marshal(ageExclusionFormat).     // END SNIPPET: format     from("direct:backPojoExcludeAge").unmarshal(ageExclusionFormat).to("mock:reversePojoExcludeAge"). }
false;protected;0;21;;// END SNIPPET: strategy @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             GsonDataFormat weightExclusionFormat = new GsonDataFormat(TestPojoExclusion.class).             weightExclusionFormat.setExclusionStrategies(Arrays.<ExclusionStrategy>asList(new WeightExclusionStrategy())).             from("direct:inPojoExcludeWeight").marshal(weightExclusionFormat).             from("direct:backPojoExcludeWeight").unmarshal(weightExclusionFormat).to("mock:reversePojoExcludeWeight").             // START SNIPPET: format             GsonDataFormat ageExclusionFormat = new GsonDataFormat(TestPojoExclusion.class).             ageExclusionFormat.setExclusionStrategies(Arrays.<ExclusionStrategy>asList(new AgeExclusionStrategy())).             from("direct:inPojoExcludeAge").marshal(ageExclusionFormat).             // END SNIPPET: format             from("direct:backPojoExcludeAge").unmarshal(ageExclusionFormat).to("mock:reversePojoExcludeAge").         }     }. }
