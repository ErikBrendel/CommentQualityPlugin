commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void before() {     producer = new CouchDbProducer(endpoint, client).     when(exchange.getIn()).thenReturn(msg). }
false;public;0;5;;@Test(expected = InvalidPayloadException.class) public void testBodyMandatory() throws Exception {     when(msg.getMandatoryBody()).thenThrow(InvalidPayloadException.class).     producer.process(exchange). }
false;public;0;18;;@Test public void testDocumentHeadersAreSet() throws Exception {     String id = UUID.randomUUID().toString().     String rev = UUID.randomUUID().toString().     JsonObject doc = new JsonObject().     doc.addProperty("_id", id).     doc.addProperty("_rev", rev).     when(msg.getMandatoryBody()).thenReturn(doc).     when(client.update(doc)).thenReturn(response).     when(response.getId()).thenReturn(id).     when(response.getRev()).thenReturn(rev).     producer.process(exchange).     verify(msg).setHeader(CouchDbConstants.HEADER_DOC_ID, id).     verify(msg).setHeader(CouchDbConstants.HEADER_DOC_REV, rev). }
false;public;0;6;;@Test(expected = InvalidPayloadException.class) public void testNullSaveResponseThrowsError() throws Exception {     when(exchange.getIn().getMandatoryBody()).thenThrow(InvalidPayloadException.class).     when(producer.getBodyAsJsonElement(exchange)).thenThrow(InvalidPayloadException.class).     producer.process(exchange). }
false;public;0;19;;@Test public void testDeleteResponse() throws Exception {     String id = UUID.randomUUID().toString().     String rev = UUID.randomUUID().toString().     JsonObject doc = new JsonObject().     doc.addProperty("_id", id).     doc.addProperty("_rev", rev).     when(msg.getHeader(CouchDbConstants.HEADER_METHOD, String.class)).thenReturn("DELETE").     when(msg.getMandatoryBody()).thenReturn(doc).     when(client.remove(doc)).thenReturn(response).     when(response.getId()).thenReturn(id).     when(response.getRev()).thenReturn(rev).     producer.process(exchange).     verify(msg).setHeader(CouchDbConstants.HEADER_DOC_ID, id).     verify(msg).setHeader(CouchDbConstants.HEADER_DOC_REV, rev). }
false;public;0;15;;@Test public void testGetResponse() throws Exception {     String id = UUID.randomUUID().toString().     JsonObject doc = new JsonObject().     doc.addProperty("_id", id).     when(msg.getHeader(CouchDbConstants.HEADER_METHOD, String.class)).thenReturn("GET").     when(msg.getHeader(CouchDbConstants.HEADER_DOC_ID, String.class)).thenReturn(id).     when(msg.getMandatoryBody()).thenReturn(doc).     when(client.get(id)).thenReturn(response).     producer.process(exchange).     verify(msg).getHeader(CouchDbConstants.HEADER_DOC_ID, String.class). }
false;public;1;6;;@Override public Response answer(InvocationOnMock invocation) throws Throwable {     assertTrue(invocation.getArguments()[0].getClass() + " but wanted " + JsonElement.class, invocation.getArguments()[0] instanceof JsonElement).     return new Response(). }
false;public;0;15;;@Test public void testStringBodyIsConvertedToJsonTree() throws Exception {     when(msg.getMandatoryBody()).thenReturn("{ \"name\" : \"coldplay\" }").     when(client.save(any())).thenAnswer(new Answer<Response>() {          @Override         public Response answer(InvocationOnMock invocation) throws Throwable {             assertTrue(invocation.getArguments()[0].getClass() + " but wanted " + JsonElement.class, invocation.getArguments()[0] instanceof JsonElement).             return new Response().         }     }).     producer.process(exchange).     verify(client).save(any(JsonObject.class)). }
