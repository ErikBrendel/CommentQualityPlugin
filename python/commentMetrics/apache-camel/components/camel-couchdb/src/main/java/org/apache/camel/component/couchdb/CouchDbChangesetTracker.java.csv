commented;modifiers;parameterAmount;loc;comment;code
false;;0;10;;void initChanges() {     String since = endpoint.getSince().     if (since == null) {         CouchDbInfo dbInfo = couchClient.context().info().         // get latest update seq         since = dbInfo.getUpdateSeq().         LOG.debug("Last sequence [{}]", since).     }     changes = couchClient.changes().style(endpoint.getStyle()).includeDocs(true).since(since).heartBeat(endpoint.getHeartbeat()).continuousChanges(). }
false;public;0;27;;@Override public void run() {     while (changes.hasNext()) {         // blocks until a feed is received         ChangesResult.Row feed = changes.next().         if (feed.isDeleted() && !endpoint.isDeletes()) {             continue.         }         if (!feed.isDeleted() && !endpoint.isUpdates()) {             continue.         }         String seq = feed.getSeq().         JsonObject doc = feed.getDoc().         Exchange exchange = endpoint.createExchange(seq, feed.getId(), doc, feed.isDeleted()).         if (LOG.isTraceEnabled()) {             LOG.trace("Created exchange [exchange={}, _id={}, seq={}", exchange, feed.getId(), seq).         }         try {             consumer.getProcessor().process(exchange).         } catch (Exception e) {             consumer.getExceptionHandler().handleException("Error processing exchange.", exchange, e).         }     }     stopped = true. }
false;public;0;3;;public void stop() {     changes.stop(). }
false;public;0;3;;public boolean isStopped() {     return stopped. }
