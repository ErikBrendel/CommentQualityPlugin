commented;modifiers;parameterAmount;loc;comment;code
false;public;1;43;;@Override public void process(Exchange exchange) throws Exception {     JsonElement json = getBodyAsJsonElement(exchange).     String operation = exchange.getIn().getHeader(CouchDbConstants.HEADER_METHOD, String.class).     if (ObjectHelper.isEmpty(operation)) {         Response save = saveJsonElement(json).         if (save == null) {             throw new CouchDbException("Could not save document [unknown reason]", exchange).         }         if (log.isTraceEnabled()) {             log.trace("Document saved [_id={}, _rev={}]", save.getId(), save.getRev()).         }         exchange.getIn().setHeader(CouchDbConstants.HEADER_DOC_REV, save.getRev()).         exchange.getIn().setHeader(CouchDbConstants.HEADER_DOC_ID, save.getId()).     } else {         if (operation.equalsIgnoreCase(CouchDbOperations.DELETE.toString())) {             Response delete = deleteJsonElement(json).             if (delete == null) {                 throw new CouchDbException("Could not delete document [unknown reason]", exchange).             }             if (log.isTraceEnabled()) {                 log.trace("Document saved [_id={}, _rev={}]", delete.getId(), delete.getRev()).             }             exchange.getIn().setHeader(CouchDbConstants.HEADER_DOC_REV, delete.getRev()).             exchange.getIn().setHeader(CouchDbConstants.HEADER_DOC_ID, delete.getId()).         }         if (operation.equalsIgnoreCase(CouchDbOperations.GET.toString())) {             String docId = exchange.getIn().getHeader(CouchDbConstants.HEADER_DOC_ID, String.class).             if (docId == null) {                 throw new CouchDbException("Could not get document, document id is missing", exchange).             }             Object response = getElement(docId).             if (log.isTraceEnabled()) {                 log.trace("Document retrieved [_id={}]", docId).             }             exchange.getIn().setBody(response).         }     } }
false;;1;14;;JsonElement getBodyAsJsonElement(Exchange exchange) throws InvalidPayloadException {     Object body = exchange.getIn().getMandatoryBody().     if (body instanceof String) {         try {             return new JsonParser().parse((String) body).         } catch (JsonSyntaxException jse) {             throw new InvalidPayloadException(exchange, body.getClass()).         }     } else if (body instanceof JsonElement) {         return (JsonElement) body.     } else {         throw new InvalidPayloadException(exchange, body != null ? body.getClass() : null).     } }
false;private;1;14;;private Response saveJsonElement(JsonElement json) {     Response save.     if (json instanceof JsonObject) {         JsonObject obj = (JsonObject) json.         if (obj.get("_rev") == null) {             save = couchClient.save(json).         } else {             save = couchClient.update(json).         }     } else {         save = couchClient.save(json).     }     return save. }
false;private;1;10;;private Response deleteJsonElement(JsonElement json) {     Response delete.     if (json instanceof JsonObject) {         JsonObject obj = (JsonObject) json.         delete = couchClient.remove(obj).     } else {         delete = couchClient.remove(json).     }     return delete. }
false;private;1;5;;private Object getElement(String id) {     Object response.     response = couchClient.get(id).     return response. }
