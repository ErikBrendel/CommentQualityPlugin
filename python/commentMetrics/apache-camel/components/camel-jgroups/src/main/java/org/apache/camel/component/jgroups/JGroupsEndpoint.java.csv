commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new JGroupsProducer(this, resolvedChannel, clusterName). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return new JGroupsConsumer(this, processor, resolvedChannel, clusterName). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;1;8;;public Exchange createExchange(Message message) {     Exchange exchange = createExchange().     exchange.getIn().setHeader(HEADER_JGROUPS_ORIGINAL_MESSAGE, message).     exchange.getIn().setHeader(HEADER_JGROUPS_SRC, message.getSrc()).     exchange.getIn().setHeader(HEADER_JGROUPS_DEST, message.getDest()).     exchange.getIn().setBody(message.getObject()).     return exchange. }
false;public;1;5;;public Exchange createExchange(View view) {     Exchange exchange = createExchange().     exchange.getIn().setBody(view).     return exchange. }
false;public;0;6;;@Override public Exchange createExchange() {     Exchange exchange = super.createExchange().     exchange.getIn().setHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, resolvedChannel.getAddress()).     return exchange. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     resolvedChannel = resolveChannel(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     log.trace("Closing JGroups Channel {}", getEndpointUri()).     resolvedChannel.close().     super.doStop(). }
false;private;0;9;;private JChannel resolveChannel() throws Exception {     if (channel != null) {         return channel.     }     if (channelProperties != null && !channelProperties.isEmpty()) {         return new JChannel(channelProperties).     }     return new JChannel(). }
true;public;0;5;/**  * Connect shared channel, called by producer and consumer.  * @throws Exception  */ ;/**  * Connect shared channel, called by producer and consumer.  * @throws Exception  */ public void connect() throws Exception {     connectCount.incrementAndGet().     log.trace("Connecting JGroups Channel {}", getEndpointUri()).     resolvedChannel.connect(clusterName). }
true;public;0;6;/**  * Disconnect shared channel, called by producer and consumer.  */ ;/**  * Disconnect shared channel, called by producer and consumer.  */ public void disconnect() {     if (connectCount.decrementAndGet() == 0) {         log.trace("Disconnecting JGroups Channel {}", getEndpointUri()).         resolvedChannel.disconnect().     } }
false;public;0;3;;public JChannel getChannel() {     return channel. }
true;public;1;3;/**  * The channel to use  */ ;/**  * The channel to use  */ public void setChannel(JChannel channel) {     this.channel = channel. }
false;public;0;3;;public String getClusterName() {     return clusterName. }
true;public;1;3;/**  * The name of the JGroups cluster the component should connect to.  */ ;/**  * The name of the JGroups cluster the component should connect to.  */ public void setClusterName(String clusterName) {     this.clusterName = clusterName. }
false;public;0;3;;public String getChannelProperties() {     return channelProperties. }
true;public;1;3;/**  * Specifies configuration properties of the JChannel used by the endpoint.  */ ;/**  * Specifies configuration properties of the JChannel used by the endpoint.  */ public void setChannelProperties(String channelProperties) {     this.channelProperties = channelProperties. }
false;;0;3;;JChannel getResolvedChannel() {     return resolvedChannel. }
false;public;0;3;;public boolean isEnableViewMessages() {     return enableViewMessages. }
true;public;1;3;/**  * If set to true, the consumer endpoint will receive org.jgroups.View messages as well (not only org.jgroups.Message instances).  * By default only regular messages are consumed by the endpoint.  */ ;/**  * If set to true, the consumer endpoint will receive org.jgroups.View messages as well (not only org.jgroups.Message instances).  * By default only regular messages are consumed by the endpoint.  */ public void setEnableViewMessages(boolean enableViewMessages) {     this.enableViewMessages = enableViewMessages. }
