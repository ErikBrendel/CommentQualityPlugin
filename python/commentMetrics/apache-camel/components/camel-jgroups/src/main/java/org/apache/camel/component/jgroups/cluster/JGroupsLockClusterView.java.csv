commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public Optional<CamelClusterMember> getLeader() {     if (isMaster) {         return Optional.of(localMember).     } else {         return Optional.empty().     } }
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return localMember. }
false;public;0;4;;@Override public List<CamelClusterMember> getMembers() {     return new ArrayList<CamelClusterMember>() {          {             add(localMember).         }     }. }
false;public;0;8;;@Override public void run() {     LOG.info("Attempting to become master acquiring the lock for group: " + lockName + " in JGroups cluster" + jgroupsClusterName + " with configuration: " + jgroupsConfig).     lock.lock().     isMaster = true.     fireLeadershipChangedEvent(Optional.ofNullable(localMember)).     LOG.info("Became master by acquiring the lock for group: " + lockName + " in JGroups cluster" + jgroupsClusterName + " with configuration: " + jgroupsConfig). }
false;protected;0;27;;@Override protected void doStart() throws Exception {     if (lock != null) {         lock.unlock().         lock = null.     }     if (channel == null) {         channel = new JChannel(jgroupsConfig).         lockService = new LockService(channel).     }     channel.connect(jgroupsClusterName).     lock = lockService.getLock(lockName).     // Camel context should be set at this stage.     final CamelContext context = ObjectHelper.notNull(getCamelContext(), "CamelContext").     executor = context.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "JGroupsLockClusterView-" + getClusterService().getId() + "-" + lockName).     executor.execute(new Runnable() {          @Override         public void run() {             LOG.info("Attempting to become master acquiring the lock for group: " + lockName + " in JGroups cluster" + jgroupsClusterName + " with configuration: " + jgroupsConfig).             lock.lock().             isMaster = true.             fireLeadershipChangedEvent(Optional.ofNullable(localMember)).             LOG.info("Became master by acquiring the lock for group: " + lockName + " in JGroups cluster" + jgroupsClusterName + " with configuration: " + jgroupsConfig).         }     }). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     shutdownExecutor().     isMaster = false.     fireLeadershipChangedEvent(Optional.empty()).     clearLock().     channel.disconnect(). }
false;protected;0;11;;@Override protected void doShutdown() throws Exception {     shutdownExecutor().     isMaster = false.     fireLeadershipChangedEvent(Optional.empty()).     clearLock().     if (channel != null) {         channel.close().         channel = null.     } }
false;private;0;6;;private void clearLock() {     if (lock != null) {         lock.unlock().         lock = null.     } }
false;private;0;11;;private void shutdownExecutor() {     CamelContext context = getCamelContext().     if (executor != null) {         if (context != null) {             context.getExecutorServiceManager().shutdown(executor).         } else {             executor.shutdown().         }         executor = null.     } }
false;public;0;4;;@Override public boolean isLeader() {     return isMaster. }
false;public;0;4;;@Override public boolean isLocal() {     return true. }
false;public;0;4;;@Override public String getId() {     return getClusterService().getId(). }
