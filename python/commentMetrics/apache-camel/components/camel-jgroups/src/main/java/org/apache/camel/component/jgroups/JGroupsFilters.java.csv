commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public boolean matches(Exchange exchange) {     Object body = exchange.getIn().getBody().     LOG.debug("Filtering message {}.", body).     if (body instanceof View) {         View view = (View) body.         Address coordinatorNodeAddress = view.getMembers().get(COORDINATOR_NODE_INDEX).         Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class).         LOG.debug("Comparing endpoint channel address {} against the coordinator node address {}.", channelAddress, coordinatorNodeAddress).         return channelAddress.equals(coordinatorNodeAddress).     }     LOG.debug("Body {} is not an instance of org.jgroups.View . Skipping filter.", body).     return false. }
true;public,static;0;19;/**  * Creates predicate rejecting messages that are instances of {@code org.jgroups.View}, but have not been received  * by the coordinator JGroups node. This filter is useful for keeping only view messages indicating that receiving  * endpoint is a master node.  *  * @return predicate filtering out non-coordinator view messages.  */ ;/**  * Creates predicate rejecting messages that are instances of {@code org.jgroups.View}, but have not been received  * by the coordinator JGroups node. This filter is useful for keeping only view messages indicating that receiving  * endpoint is a master node.  *  * @return predicate filtering out non-coordinator view messages.  */ public static Predicate dropNonCoordinatorViews() {     return new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Object body = exchange.getIn().getBody().             LOG.debug("Filtering message {}.", body).             if (body instanceof View) {                 View view = (View) body.                 Address coordinatorNodeAddress = view.getMembers().get(COORDINATOR_NODE_INDEX).                 Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class).                 LOG.debug("Comparing endpoint channel address {} against the coordinator node address {}.", channelAddress, coordinatorNodeAddress).                 return channelAddress.equals(coordinatorNodeAddress).             }             LOG.debug("Body {} is not an instance of org.jgroups.View . Skipping filter.", body).             return false.         }     }. }
