# id;timestamp;commentText;codeText;commentWords;codeWords
JGroupsFilters -> public static Predicate dropNonCoordinatorViews();1388443957;Creates predicate rejecting messages that are instances of {@link org.jgroups.View}, but have not been received_by the coordinator JGroups node. This filter is useful for keeping only view messages indicating that receiving_endpoint is a master node.__@return predicate filtering out non-coordinator view messages.;public static Predicate dropNonCoordinatorViews() {_        return new Predicate() {_            @Override_            public boolean matches(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                LOG.debug("Filtering message {}.", body)__                if (body instanceof View) {_                    View view = (View) body__                    Address coordinatorNodeAddress =  view.getMembers().get(COORDINATOR_NODE_INDEX)__                    Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class)__                    LOG.debug("Comparing endpoint channel address {} against the coordinator node address {}.",_                            channelAddress, coordinatorNodeAddress)__                    return channelAddress.equals(coordinatorNodeAddress)__                }_                LOG.debug("Body {} is not an instance of org.jgroups.View . Skipping filter.", body)__                return true__            }_        }__    };creates,predicate,rejecting,messages,that,are,instances,of,link,org,jgroups,view,but,have,not,been,received,by,the,coordinator,jgroups,node,this,filter,is,useful,for,keeping,only,view,messages,indicating,that,receiving,endpoint,is,a,master,node,return,predicate,filtering,out,non,coordinator,view,messages;public,static,predicate,drop,non,coordinator,views,return,new,predicate,override,public,boolean,matches,exchange,exchange,object,body,exchange,get,in,get,body,log,debug,filtering,message,body,if,body,instanceof,view,view,view,view,body,address,coordinator,node,address,view,get,members,get,address,channel,address,exchange,get,in,get,header,address,class,log,debug,comparing,endpoint,channel,address,against,the,coordinator,node,address,channel,address,coordinator,node,address,return,channel,address,equals,coordinator,node,address,log,debug,body,is,not,an,instance,of,org,jgroups,view,skipping,filter,body,return,true
JGroupsFilters -> public static Predicate dropNonCoordinatorViews();1388675378;Creates predicate rejecting messages that are instances of {@code org.jgroups.View}, but have not been received_by the coordinator JGroups node. This filter is useful for keeping only view messages indicating that receiving_endpoint is a master node.__@return predicate filtering out non-coordinator view messages.;public static Predicate dropNonCoordinatorViews() {_        return new Predicate() {_            @Override_            public boolean matches(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                LOG.debug("Filtering message {}.", body)__                if (body instanceof View) {_                    View view = (View) body__                    Address coordinatorNodeAddress =  view.getMembers().get(COORDINATOR_NODE_INDEX)__                    Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class)__                    LOG.debug("Comparing endpoint channel address {} against the coordinator node address {}.",_                            channelAddress, coordinatorNodeAddress)__                    return channelAddress.equals(coordinatorNodeAddress)__                }_                LOG.debug("Body {} is not an instance of org.jgroups.View . Skipping filter.", body)__                return true__            }_        }__    };creates,predicate,rejecting,messages,that,are,instances,of,code,org,jgroups,view,but,have,not,been,received,by,the,coordinator,jgroups,node,this,filter,is,useful,for,keeping,only,view,messages,indicating,that,receiving,endpoint,is,a,master,node,return,predicate,filtering,out,non,coordinator,view,messages;public,static,predicate,drop,non,coordinator,views,return,new,predicate,override,public,boolean,matches,exchange,exchange,object,body,exchange,get,in,get,body,log,debug,filtering,message,body,if,body,instanceof,view,view,view,view,body,address,coordinator,node,address,view,get,members,get,address,channel,address,exchange,get,in,get,header,address,class,log,debug,comparing,endpoint,channel,address,against,the,coordinator,node,address,channel,address,coordinator,node,address,return,channel,address,equals,coordinator,node,address,log,debug,body,is,not,an,instance,of,org,jgroups,view,skipping,filter,body,return,true
JGroupsFilters -> public static Predicate dropNonCoordinatorViews();1438092570;Creates predicate rejecting messages that are instances of {@code org.jgroups.View}, but have not been received_by the coordinator JGroups node. This filter is useful for keeping only view messages indicating that receiving_endpoint is a master node.__@return predicate filtering out non-coordinator view messages.;public static Predicate dropNonCoordinatorViews() {_        return new Predicate() {_            @Override_            public boolean matches(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                LOG.debug("Filtering message {}.", body)__                if (body instanceof View) {_                    View view = (View) body__                    Address coordinatorNodeAddress =  view.getMembers().get(COORDINATOR_NODE_INDEX)__                    Address channelAddress = exchange.getIn().getHeader(HEADER_JGROUPS_CHANNEL_ADDRESS, Address.class)__                    LOG.debug("Comparing endpoint channel address {} against the coordinator node address {}.",_                            channelAddress, coordinatorNodeAddress)__                    return channelAddress.equals(coordinatorNodeAddress)__                }_                LOG.debug("Body {} is not an instance of org.jgroups.View . Skipping filter.", body)__                return false__            }_        }__    };creates,predicate,rejecting,messages,that,are,instances,of,code,org,jgroups,view,but,have,not,been,received,by,the,coordinator,jgroups,node,this,filter,is,useful,for,keeping,only,view,messages,indicating,that,receiving,endpoint,is,a,master,node,return,predicate,filtering,out,non,coordinator,view,messages;public,static,predicate,drop,non,coordinator,views,return,new,predicate,override,public,boolean,matches,exchange,exchange,object,body,exchange,get,in,get,body,log,debug,filtering,message,body,if,body,instanceof,view,view,view,view,body,address,coordinator,node,address,view,get,members,get,address,channel,address,exchange,get,in,get,header,address,class,log,debug,comparing,endpoint,channel,address,against,the,coordinator,node,address,channel,address,coordinator,node,address,return,channel,address,equals,coordinator,node,address,log,debug,body,is,not,an,instance,of,org,jgroups,view,skipping,filter,body,return,false
