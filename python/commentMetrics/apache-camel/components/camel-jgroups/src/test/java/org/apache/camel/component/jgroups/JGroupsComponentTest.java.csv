commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void configure() throws Exception {     JGroupsComponent defaultComponent = new JGroupsComponent().     defaultComponent.setChannel(defaultComponentChannel).     context().addComponent("my-default-jgroups", defaultComponent).     from("my-default-jgroups:" + CLUSTER_NAME).to("mock:default").     from(CONFIGURED_ENDPOINT_URI).to("mock:configured"). }
false;protected;0;14;;// Routes fixture @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             JGroupsComponent defaultComponent = new JGroupsComponent().             defaultComponent.setChannel(defaultComponentChannel).             context().addComponent("my-default-jgroups", defaultComponent).             from("my-default-jgroups:" + CLUSTER_NAME).to("mock:default").             from(CONFIGURED_ENDPOINT_URI).to("mock:configured").         }     }. }
false;protected;0;8;;// Fixture setup @Override protected void doPreSetup() throws Exception {     super.doPreSetup().     clientChannel = new JChannel().     clientChannel.connect(CLUSTER_NAME).     defaultComponentChannel = new JChannel(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     clientChannel.close().     super.tearDown(). }
false;public;0;15;;@Test public void shouldConsumeMulticastedMessage() throws Exception {     // Given     MockEndpoint mockEndpoint = getMockEndpoint("mock:default").     mockEndpoint.setExpectedMessageCount(1).     mockEndpoint.expectedBodiesReceived(MESSAGE).     // When     Message message = new Message(null, MESSAGE).     message.setSrc(null).     clientChannel.send(message).     // Then     mockEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Test public void shouldConfigureChannelWithProperties() throws Exception {     // When     JGroupsEndpoint endpoint = getMandatoryEndpoint(CONFIGURED_ENDPOINT_URI, JGroupsEndpoint.class).     // Then     assertTrue(endpoint.getResolvedChannel().getProperties().contains(SAMPLE_CHANNEL_PROPERTY)). }
false;public;0;9;;@Test public void shouldCreateChannel() throws Exception {     // When     JGroupsEndpoint endpoint = getMandatoryEndpoint("my-default-jgroups:" + CLUSTER_NAME, JGroupsEndpoint.class).     JGroupsComponent component = (JGroupsComponent) endpoint.getComponent().     // Then     assertNotNull(component.getChannel()). }
