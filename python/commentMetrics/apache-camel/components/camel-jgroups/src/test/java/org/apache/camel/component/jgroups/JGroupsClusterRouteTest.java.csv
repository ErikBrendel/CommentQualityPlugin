commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void configure() throws Exception {     from("jgroups:" + clusterName + "?enableViewMessages=true").filter(dropNonCoordinatorViews()).threads().delay(delayIfContextNotStarted(SECONDS.toMillis(15))).to("controlbus:route?routeId=masterRoute&action=start&async=true").     from("timer://master?repeatCount=1").routeId("masterRoute").autoStartup(false).to(masterMockUri). }
false;public;0;8;;@Before public void setUp() throws Exception {     firstCamelContext = new DefaultCamelContext().     firstCamelContext.addRoutes(new Builder()).     secondCamelContext = new DefaultCamelContext().     secondCamelContext.addRoutes(new Builder()). }
false;public;0;14;;// Tests @Test public void shouldElectSecondNode() throws Exception {     expectMasterIs(firstCamelContext).     firstCamelContext.start().     assertMasterIs(firstCamelContext).     expectMasterIsNot(secondCamelContext).     secondCamelContext.start().     assertMasterIsNot(secondCamelContext).     expectMasterIs(secondCamelContext).     firstCamelContext.stop().     assertMasterIs(secondCamelContext). }
false;public;0;14;;@Test public void shouldKeepMaster() throws Exception {     expectMasterIs(firstCamelContext).     firstCamelContext.start().     assertMasterIs(firstCamelContext).     expectMasterIsNot(secondCamelContext).     secondCamelContext.start().     assertMasterIsNot(secondCamelContext).     expectMasterIs(firstCamelContext).     secondCamelContext.stop().     assertMasterIs(firstCamelContext). }
false;public;0;22;;@Test public void shouldElectSecondNodeAndReturnToFirst() throws Exception {     expectMasterIs(firstCamelContext).     firstCamelContext.start().     assertMasterIs(firstCamelContext).     expectMasterIsNot(secondCamelContext).     secondCamelContext.start().     assertMasterIsNot(secondCamelContext).     expectMasterIsNot(firstCamelContext).     firstCamelContext.stop().     assertMasterIsNot(firstCamelContext).     expectMasterIsNot(firstCamelContext).     firstCamelContext.start().     assertMasterIsNot(firstCamelContext).     expectMasterIs(firstCamelContext).     secondCamelContext.stop().     assertMasterIs(firstCamelContext). }
false;private;1;3;;// Helpers private void expectMasterIs(CamelContext camelContext) {     camelContext.getEndpoint(masterMockUri, MockEndpoint.class).expectedMessageCount(1). }
false;private;1;3;;private void expectMasterIsNot(CamelContext camelContext) {     camelContext.getEndpoint(masterMockUri, MockEndpoint.class).expectedMessageCount(0). }
false;private;1;3;;private void assertMasterIs(CamelContext camelContext) throws InterruptedException {     camelContext.getEndpoint(masterMockUri, MockEndpoint.class).assertIsSatisfied(). }
false;private;1;3;;private void assertMasterIsNot(CamelContext camelContext) throws InterruptedException {     camelContext.getEndpoint(masterMockUri, MockEndpoint.class).assertIsSatisfied(). }
