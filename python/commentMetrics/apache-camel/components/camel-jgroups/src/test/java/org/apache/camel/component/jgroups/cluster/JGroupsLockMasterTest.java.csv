commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;// ************************************ // Test // ************************************ @Test public void test() throws Exception {     for (String id : CLIENTS) {         SCHEDULER.submit(() -> run(id)).     }     LATCH.await(1, TimeUnit.MINUTES).     SCHEDULER.shutdownNow().     Assert.assertEquals(CLIENTS.size(), RESULTS.size()).     Assert.assertTrue(RESULTS.containsAll(CLIENTS)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("master:jgl:timer:master?delay=1s&period=1s").routeId("route-" + id).log("From ${routeId}").process(e -> contextLatch.countDown()). }
false;private,static;1;39;;// ************************************ // Run a Camel node // ************************************ private static void run(String id) {     try {         int events = ThreadLocalRandom.current().nextInt(2, 6).         CountDownLatch contextLatch = new CountDownLatch(events).         JGroupsLockClusterService service = new JGroupsLockClusterService().         service.setId("node-" + id).         DefaultCamelContext context = new DefaultCamelContext().         context.disableJMX().         context.setName("context-" + id).         context.addService(service).         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("master:jgl:timer:master?delay=1s&period=1s").routeId("route-" + id).log("From ${routeId}").process(e -> contextLatch.countDown()).             }         }).         // Start the context after some random time so the startup order         // changes for each test.         Thread.sleep(ThreadLocalRandom.current().nextInt(500)).         context.start().         contextLatch.await().         LOGGER.debug("Shutting down node {}", id).         RESULTS.add(id).         context.stop().         LATCH.countDown().     } catch (Exception e) {         LOGGER.warn("", e).     } }
