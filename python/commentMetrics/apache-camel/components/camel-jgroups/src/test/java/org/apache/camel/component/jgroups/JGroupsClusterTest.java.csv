commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String camelContextName = exchange.getContext().getName().     if (!camelContextName.equals(master)) {         master = camelContextName.         nominationCount++.     } }
false;public;0;15;;@Override public void configure() throws Exception {     from(jgroupsEndpoint).filter(dropNonCoordinatorViews()).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String camelContextName = exchange.getContext().getName().             if (!camelContextName.equals(master)) {                 master = camelContextName.                 nominationCount++.             }         }     }). }
false;public;0;10;;@Before public void setUp() throws Exception {     firstCamelContext = new DefaultCamelContext().     firstCamelContext.setName("firstNode").     firstCamelContext.addRoutes(new Builder()).     secondCamelContext = new DefaultCamelContext().     secondCamelContext.setName("secondNode").     secondCamelContext.addRoutes(new Builder()). }
false;public;0;15;;// Tests @Test public void shouldElectSecondNode() throws Exception {     // When     firstCamelContext.start().     String firstMaster = master.     secondCamelContext.start().     firstCamelContext.stop().     String secondMaster = master.     secondCamelContext.stop().     // Then     assertEquals(firstCamelContext.getName(), firstMaster).     assertEquals(secondCamelContext.getName(), secondMaster).     assertEquals(2, nominationCount). }
false;public;0;15;;@Test public void shouldKeepMaster() throws Exception {     // When     firstCamelContext.start().     String firstMaster = master.     secondCamelContext.start().     secondCamelContext.stop().     String secondMaster = master.     firstCamelContext.stop().     // Then     assertEquals(firstCamelContext.getName(), firstMaster).     assertEquals(firstCamelContext.getName(), secondMaster).     assertEquals(1, nominationCount). }
false;public;0;21;;@Test public void shouldElectSecondNodeAndReturnToFirst() throws Exception {     // When     firstCamelContext.start().     String firstMaster = master.     secondCamelContext.start().     firstCamelContext.stop().     String secondMaster = master.     firstCamelContext.start().     String masterAfterRestartOfFirstNode = master.     secondCamelContext.stop().     String finalMaster = master.     firstCamelContext.stop().     // Then     assertEquals(firstCamelContext.getName(), firstMaster).     assertEquals(secondCamelContext.getName(), secondMaster).     assertEquals(secondCamelContext.getName(), masterAfterRestartOfFirstNode).     assertEquals(firstCamelContext.getName(), finalMaster).     assertEquals(3, nominationCount). }
