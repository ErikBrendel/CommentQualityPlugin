commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/inbox").     deleteDirectory("target/outbox").     super.setUp(). }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;12;;@Override public void configure() throws Exception {     from("activemq:queue1").setHeader("HEADER1", constant("header1")).dynamicRouter(method(DynamicRouter.class, "dynamicRoute")).to("mock:checkHeader").     from("direct:foo").setHeader("HEADER1", constant("header1")).dynamicRouter(method(DynamicRouter.class, "dynamicRoute")).to("mock:checkHeader"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue1").setHeader("HEADER1", constant("header1")).dynamicRouter(method(DynamicRouter.class, "dynamicRoute")).to("mock:checkHeader").             from("direct:foo").setHeader("HEADER1", constant("header1")).dynamicRouter(method(DynamicRouter.class, "dynamicRoute")).to("mock:checkHeader").         }     }. }
false;public;0;19;;@Test public void testHeaderShouldExisted() throws InterruptedException {     // direct     getMockEndpoint("mock:checkHeader").expectedMessageCount(1).     getMockEndpoint("mock:checkHeader").expectedHeaderReceived("HEADER1", "header1").     template.sendBody("direct:foo", "A").     assertMockEndpointsSatisfied().     resetMocks().     // actvivemq     getMockEndpoint("mock:checkHeader").expectedMessageCount(1).     getMockEndpoint("mock:checkHeader").expectedHeaderReceived("HEADER1", "header1").     template.sendBody("activemq:queue1", "A").     assertMockEndpointsSatisfied(). }
false;public;2;8;;public String dynamicRoute(Exchange exchange, @Header(Exchange.SLIP_ENDPOINT) String previous) {     if (previous == null) {         return "file://target/outbox".     } else {         // end slip         return null.     } }
