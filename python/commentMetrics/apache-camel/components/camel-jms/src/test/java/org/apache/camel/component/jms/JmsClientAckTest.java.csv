commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testJmsClientAck() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentClientAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     JmsMessage jms = exchange.getIn(JmsMessage.class).     assertNotNull(jms).     Session session = jms.getJmsSession().     assertNotNull("Should have JMS session", session).     assertEquals("Should be client ACK mode", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode()).     jms.getJmsMessage().acknowledge(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("activemq:queue:foo").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             JmsMessage jms = exchange.getIn(JmsMessage.class).             assertNotNull(jms).             Session session = jms.getJmsSession().             assertNotNull("Should have JMS session", session).             assertEquals("Should be client ACK mode", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode()).             jms.getJmsMessage().acknowledge().         }     }).to("mock:result"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     JmsMessage jms = exchange.getIn(JmsMessage.class).                     assertNotNull(jms).                     Session session = jms.getJmsSession().                     assertNotNull("Should have JMS session", session).                     assertEquals("Should be client ACK mode", Session.CLIENT_ACKNOWLEDGE, session.getAcknowledgeMode()).                     jms.getJmsMessage().acknowledge().                 }             }).to("mock:result").         }     }. }
