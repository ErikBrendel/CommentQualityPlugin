commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("activemq:queue:in").routeId("myNewRoute").to("activemq:queue:foo"). }
false;public;0;30;;@Test public void testAddAndRemoveRoute() throws Exception {     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> before = mbeanServer.queryNames(new ObjectName("*:type=threadpools,*"), null).     getMockEndpoint("mock:result").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:in").routeId("myNewRoute").to("activemq:queue:foo").         }     }).     Set<ObjectName> during = mbeanServer.queryNames(new ObjectName("*:type=threadpools,*"), null).     assertEquals("There should be one more thread pool in JMX", before.size() + 1, during.size()).     template.sendBody("activemq:queue:in", "Hello World").     assertMockEndpointsSatisfied().     // now stop and remove that route     context.getRouteController().stopRoute("myNewRoute").     context.removeRoute("myNewRoute").     Set<ObjectName> after = mbeanServer.queryNames(new ObjectName("*:type=threadpools,*"), null).     assertEquals("Should have removed all thread pools from removed route", before.size(), after.size()). }
false;protected;0;7;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;@Override public void configure() throws Exception {     from("activemq:queue:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").to("mock:result").         }     }. }
