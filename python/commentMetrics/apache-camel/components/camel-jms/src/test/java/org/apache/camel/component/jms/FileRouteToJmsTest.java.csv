commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testRouteToFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(byte[].class).     mock.message(0).body(String.class).isEqualTo("Hello World").     deleteDirectory("target/routefromfile").     template.sendBodyAndHeader("file://target/routefromfile", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     from("file://target/routefromfile").to("activemq:queue:hello").     from("activemq:queue:hello").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/routefromfile").to("activemq:queue:hello").             from("activemq:queue:hello").to("mock:result").         }     }. }
