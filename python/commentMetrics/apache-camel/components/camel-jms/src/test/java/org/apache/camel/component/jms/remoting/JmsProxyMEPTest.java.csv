commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     // create proxy     calculatorProxy = new ProxyBuilder(camelContext).binding(false).endpoint("direct:calculatorProxy").build(Calculator.class).     return camelContext. }
false;public;0;5;;@Test public void testSynchronous() throws Exception {     int result = calculatorProxy.add(30, 13).     assertEquals(43, result). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:calculatorProxy").to("log:calc").to("activemq:calculator-queue?exchangePattern=InOut").     from("activemq:calculator-queue?exchangePattern=InOut").bean(CalculatorImpl.class). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:calculatorProxy").to("log:calc").to("activemq:calculator-queue?exchangePattern=InOut").             from("activemq:calculator-queue?exchangePattern=InOut").bean(CalculatorImpl.class).         }     }. }
