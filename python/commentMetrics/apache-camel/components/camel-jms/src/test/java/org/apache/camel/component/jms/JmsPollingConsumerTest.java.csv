commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void run() {     String body = consumer.receiveBody("activemq:queue.start", String.class).     template.sendBody("activemq:queue.foo", body + " Claus"). }
false;public;0;21;;@Test public void testJmsPollingConsumerWait() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Claus").     // use another thread for polling consumer to demonstrate that we can wait before     // the message is sent to the queue     Executors.newSingleThreadExecutor().execute(new Runnable() {          public void run() {             String body = consumer.receiveBody("activemq:queue.start", String.class).             template.sendBody("activemq:queue.foo", body + " Claus").         }     }).     // wait a little to demonstrate we can start poll before we have a msg on the queue     Thread.sleep(500).     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;6;;public void run() {     String body = consumer.receiveBodyNoWait("activemq:queue.start", String.class).     assertNull("Should be null", body).     template.sendBody("activemq:queue.foo", "Hello Claus"). }
false;public;0;23;;@Test public void testJmsPollingConsumerNoWait() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Claus").     // use another thread for polling consumer to demonstrate that we can wait before     // the message is sent to the queue     Executors.newSingleThreadExecutor().execute(new Runnable() {          public void run() {             String body = consumer.receiveBodyNoWait("activemq:queue.start", String.class).             assertNull("Should be null", body).             template.sendBody("activemq:queue.foo", "Hello Claus").         }     }).     // wait a little to demonstrate we can start poll before we have a msg on the queue     Thread.sleep(500).     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;6;;public void run() {     String body = consumer.receiveBody("activemq:queue.start", 100, String.class).     assertNull("Should be null", body).     template.sendBody("activemq:queue.foo", "Hello Claus"). }
false;public;0;23;;@Test public void testJmsPollingConsumerLowTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Claus").     // use another thread for polling consumer to demonstrate that we can wait before     // the message is sent to the queue     Executors.newSingleThreadExecutor().execute(new Runnable() {          public void run() {             String body = consumer.receiveBody("activemq:queue.start", 100, String.class).             assertNull("Should be null", body).             template.sendBody("activemq:queue.foo", "Hello Claus").         }     }).     // wait a little to demonstrate we can start poll before we have a msg on the queue     Thread.sleep(500).     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;4;;public void run() {     String body = consumer.receiveBody("activemq:queue.start", 3000, String.class).     template.sendBody("activemq:queue.foo", body + " Claus"). }
false;public;0;21;;@Test public void testJmsPollingConsumerHighTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Claus").     // use another thread for polling consumer to demonstrate that we can wait before     // the message is sent to the queue     Executors.newSingleThreadExecutor().execute(new Runnable() {          public void run() {             String body = consumer.receiveBody("activemq:queue.start", 3000, String.class).             template.sendBody("activemq:queue.foo", body + " Claus").         }     }).     // wait a little to demonstrate we can start poll before we have a msg on the queue     Thread.sleep(500).     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("activemq:queue.start").     from("activemq:queue.foo").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("activemq:queue.start").             from("activemq:queue.foo").to("mock:result").         }     }. }
