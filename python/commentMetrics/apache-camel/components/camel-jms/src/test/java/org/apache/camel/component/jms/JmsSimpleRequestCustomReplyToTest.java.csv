commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOnly).     exchange.getIn().setHeader("MyReplyQeueue", "foo").     exchange.getIn().setBody("Hello World"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertEquals("Late reply", exchange.getIn().getBody()).     latch.countDown(). }
false;public;0;38;;@Test public void testRequetCustomReplyTo() throws Exception {     // use another thread to send the late reply to simulate that we do it later, not     // from the original route anyway     Thread sender = new Thread(new SendLateReply()).     sender.start().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     Exchange out = template.request("activemq:queue:hello", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOnly).             exchange.getIn().setHeader("MyReplyQeueue", "foo").             exchange.getIn().setBody("Hello World").         }     }).     result.assertIsSatisfied().     assertNotNull(out).     assertFalse(out.hasOut()).     // get the reply from the special reply queue     Endpoint end = context.getEndpoint(componentName + ":" + myReplyTo).     final Consumer consumer = end.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("Late reply", exchange.getIn().getBody()).             latch.countDown().         }     }).     // reset latch     latch = new CountDownLatch(1).     consumer.start().     latch.await().     consumer.stop(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOnly).     exchange.getIn().setBody("Late reply"). }
false;public;0;19;;public void run() {     try {         LOG.debug("Waiting for latch").         latch.await().         // wait 1 sec after latch before sending he late replay         Thread.sleep(1000).     } catch (Exception e) {     // ignore     }     LOG.debug("Sending late reply").     template.send(componentName + ":" + myReplyTo, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOnly).             exchange.getIn().setBody("Late reply").         }     }). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     JmsComponent jms = camelContext.getComponent("activemq", JmsComponent.class).     // as this is a unit test I dont want to wait 20 sec before timeout occurs, so we use 10     jms.getConfiguration().setRequestTimeout(10000).     return camelContext. }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     assertEquals("Hello World", exchange.getIn().getBody()).     myReplyTo = exchange.getIn().getHeader("MyReplyQeueue", String.class).     LOG.debug("ReplyTo: " + myReplyTo).     LOG.debug("Ahh I cannot send a reply. Someone else must do it.").     latch.countDown(). }
false;public;0;13;;public void configure() throws Exception {     from(componentName + ":queue:hello").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("Hello World", exchange.getIn().getBody()).             myReplyTo = exchange.getIn().getHeader("MyReplyQeueue", String.class).             LOG.debug("ReplyTo: " + myReplyTo).             LOG.debug("Ahh I cannot send a reply. Someone else must do it.").             latch.countDown().         }     }).to("mock:result"). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(componentName + ":queue:hello").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("Hello World", exchange.getIn().getBody()).                     myReplyTo = exchange.getIn().getHeader("MyReplyQeueue", String.class).                     LOG.debug("ReplyTo: " + myReplyTo).                     LOG.debug("Ahh I cannot send a reply. Someone else must do it.").                     latch.countDown().                 }             }).to("mock:result").         }     }. }
