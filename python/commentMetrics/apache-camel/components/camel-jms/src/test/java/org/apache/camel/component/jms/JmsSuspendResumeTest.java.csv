commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testSuspendResume() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.expectedBodiesReceived("Hello World").     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied().     context.getRouteController().suspendRoute("foo").     resetMocks().     mock.expectedMessageCount(0).     // sleep a bit to ensure its properly suspended     Thread.sleep(2000).     template.sendBody("activemq:queue:foo", "Bye World").     assertMockEndpointsSatisfied(1, TimeUnit.SECONDS).     resetMocks().     mock.expectedBodiesReceived("Bye World").     context.getRouteController().resumeRoute("foo").     assertMockEndpointsSatisfied(). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // must use persistent so the message is not lost     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:queue:foo").routeId("foo").to("mock:foo"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:foo").routeId("foo").to("mock:foo").         }     }. }
