commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUri() {     return "activemq:queue:foo?jmsKeyFormatStrategy=default". }
false;public;0;9;;@Test public void testIllegalOption() throws Exception {     try {         context.getEndpoint("activemq:queue:bar?jmsHeaderStrategy=xxx").         fail("Should have thrown a ResolveEndpointFailedException").     } catch (ResolveEndpointFailedException e) {     // expected     } }
false;public;0;9;;@Test public void testNoHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWithPlainHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", "cheese").     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "cheese").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testWithMixedHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", "cheese").     mock.expectedHeaderReceived("Content-Type", "text/plain").     mock.expectedHeaderReceived("org.apache.camel.MyKey", "foo").     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "cheese").     headers.put("Content-Type", "text/plain").     headers.put("org.apache.camel.MyKey", "foo").     template.sendBodyAndHeaders("direct:start", "Hello World", headers).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to(getUri()).     from(getUri()).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(getUri()).             from(getUri()).to("mock:result").         }     }. }
