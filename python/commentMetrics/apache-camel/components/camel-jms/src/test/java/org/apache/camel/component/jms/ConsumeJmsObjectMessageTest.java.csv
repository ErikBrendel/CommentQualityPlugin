commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public Message createMessage(Session session) throws JMSException {     ObjectMessage msg = session.createObjectMessage().     MyUser user = new MyUser().     user.setName("Claus").     msg.setObject(user).     return msg. }
false;public;0;20;;@Test public void testConsumeObjectMessage() throws Exception {     endpoint.expectedMessageCount(1).     jmsTemplate.setPubSubDomain(false).     jmsTemplate.send("test.object", new MessageCreator() {          public Message createMessage(Session session) throws JMSException {             ObjectMessage msg = session.createObjectMessage().             MyUser user = new MyUser().             user.setName("Claus").             msg.setObject(user).             return msg.         }     }).     endpoint.assertIsSatisfied().     assertCorrectObjectReceived(). }
false;public;0;11;;@Test public void testSendBytesMessage() throws Exception {     endpoint.expectedMessageCount(1).     MyUser user = new MyUser().     user.setName("Claus").     template.sendBody("direct:test", user).     endpoint.assertIsSatisfied().     assertCorrectObjectReceived(). }
false;protected;0;11;;protected void assertCorrectObjectReceived() {     Exchange exchange = endpoint.getReceivedExchanges().get(0).     // This should be a JMS Exchange     assertNotNull(ExchangeHelper.getBinding(exchange, JmsBinding.class)).     JmsMessage in = (JmsMessage) exchange.getIn().     assertNotNull(in).     assertIsInstanceOf(ObjectMessage.class, in.getJmsMessage()).     MyUser user = exchange.getIn().getBody(MyUser.class).     assertEquals("Claus", user.getName()). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     endpoint = getMockEndpoint("mock:result"). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     jmsTemplate = new JmsTemplate(connectionFactory).     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;public void configure() throws Exception {     from("activemq:test.object").to("mock:result").     from("direct:test").to("activemq:test.object"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.object").to("mock:result").             from("direct:test").to("activemq:test.object").         }     }. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
