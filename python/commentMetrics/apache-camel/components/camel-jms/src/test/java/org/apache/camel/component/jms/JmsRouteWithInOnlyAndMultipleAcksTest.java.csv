commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSendOrderWithMultipleAcks() throws Exception {     MockEndpoint inbox = getMockEndpoint("mock:inbox").     inbox.expectedBodiesReceived("Camel in Action").     String orderId = "1".     MockEndpoint notifCollector = getMockEndpoint("mock:orderNotificationAckCollector").     notifCollector.expectedMessageCount(2).     notifCollector.expectedHeaderReceived("JMSCorrelationID", orderId).     notifCollector.setResultWaitTime(10000).     Object out = template.requestBodyAndHeader("amq:queue:inbox", "Camel in Action", "JMSCorrelationID", orderId).     assertEquals("OK: Camel in Action", out).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("orderService", new MyOrderServiceBean()).     jndi.bind("orderServiceNotificationWithAck-1", new MyOrderServiceNotificationWithAckBean("1")).     jndi.bind("orderServiceNotificationWithAck-2", new MyOrderServiceNotificationWithAckBean("2")).     return jndi. }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;28;;@Override public void configure() throws Exception {     // this route picks up an order request     // send out a one way notification to multiple     // topic subscribers, lets a bean handle     // the order and then delivers a reply back to     // the original order request initiator     from("amq:queue:inbox").to("mock:inbox").inOnly("amq:topic:orderServiceNotification").bean("orderService", "handleOrder").     // this route collects an order request notification     // and sends back an acknowledgment back to a queue     from("amq:topic:orderServiceNotification").bean("orderServiceNotificationWithAck-1", "handleOrderNotificationWithAck").to("amq:queue:orderServiceNotificationAck").     // this route collects an order request notification     // and sends back an acknowledgment back to a queue     from("amq:topic:orderServiceNotification").bean("orderServiceNotificationWithAck-2", "handleOrderNotificationWithAck").to("amq:queue:orderServiceNotificationAck").     // this route collects all order notifications acknowledgments     from("amq:queue:orderServiceNotificationAck").to("mock:orderNotificationAckCollector"). }
false;protected;0;33;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // this route picks up an order request             // send out a one way notification to multiple             // topic subscribers, lets a bean handle             // the order and then delivers a reply back to             // the original order request initiator             from("amq:queue:inbox").to("mock:inbox").inOnly("amq:topic:orderServiceNotification").bean("orderService", "handleOrder").             // this route collects an order request notification             // and sends back an acknowledgment back to a queue             from("amq:topic:orderServiceNotification").bean("orderServiceNotificationWithAck-1", "handleOrderNotificationWithAck").to("amq:queue:orderServiceNotificationAck").             // this route collects an order request notification             // and sends back an acknowledgment back to a queue             from("amq:topic:orderServiceNotification").bean("orderServiceNotificationWithAck-2", "handleOrderNotificationWithAck").to("amq:queue:orderServiceNotificationAck").             // this route collects all order notifications acknowledgments             from("amq:queue:orderServiceNotificationAck").to("mock:orderNotificationAckCollector").         }     }. }
false;public;1;3;;public String handleOrder(String body) {     return "OK: " + body. }
false;public;1;3;;public String handleOrderNotificationWithAck(String body) {     return "Ack-" + id + ":" + body. }
