commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void run() {     // request body is InOut pattern and thus we expect a reply (JMSReply)     Object response = template.requestBody("activemq:a", "World #" + count).     assertEquals("Bye World #" + count, response).     latch.countDown(). }
false;public;0;31;;@Test public void testConcurrentConsumersWithReply() throws Exception {     // latch for the 5 exchanges we expect     final CountDownLatch latch = new CountDownLatch(5).     // setup a task executor to be able send the messages in parallel     ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor().     executor.setCorePoolSize(5).     executor.afterPropertiesSet().     for (int i = 0. i < 5. i++) {         final int count = i.         executor.execute(new Runnable() {              public void run() {                 // request body is InOut pattern and thus we expect a reply (JMSReply)                 Object response = template.requestBody("activemq:a", "World #" + count).                 assertEquals("Bye World #" + count, response).                 latch.countDown().             }         }).     }     long start = System.currentTimeMillis().     // wait for test completion, timeout after 30 sec to let other unit test run to not wait forever     assertTrue(latch.await(30000L, TimeUnit.MILLISECONDS)).     assertEquals("Latch should be zero", 0, latch.getCount()).     long delta = System.currentTimeMillis() - start.     assertTrue("Should be faster than 20000 millis, took " + delta + " millis", delta < 20000L).     executor.shutdown(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     // sleep a little to simulate heavy work and force concurrency processing     Thread.sleep(3000).     exchange.getOut().setBody("Bye " + body). }
false;public;0;12;;public void configure() throws Exception {     from("activemq:a?concurrentConsumers=3").to("activemq:b?concurrentConsumers=3").     from("activemq:b?concurrentConsumers=3").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             // sleep a little to simulate heavy work and force concurrency processing             Thread.sleep(3000).             exchange.getOut().setBody("Bye " + body).         }     }). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:a?concurrentConsumers=3").to("activemq:b?concurrentConsumers=3").             from("activemq:b?concurrentConsumers=3").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     // sleep a little to simulate heavy work and force concurrency processing                     Thread.sleep(3000).                     exchange.getOut().setBody("Bye " + body).                 }             }).         }     }. }
