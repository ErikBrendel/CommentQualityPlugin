commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testIncludeAll() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedHeaderReceived("foo", "bar").     getMockEndpoint("mock:result").expectedHeaderReceived("JMSXUserID", "Donald").     getMockEndpoint("mock:result").expectedHeaderReceived("JMSXAppID", "MyApp").     Map headers = new HashMap().     headers.put("foo", "bar").     headers.put("JMSXUserID", "Donald").     headers.put("JMSXAppID", "MyApp").     template.sendBodyAndHeaders("activemq:queue:in", "Hello World", headers).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.setIncludeAllJMSXProperties(true).     camelContext.addComponent("activemq", jms).     return camelContext. }
false;public;0;4;;public void configure() throws Exception {     from("activemq:queue:in").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:in").to("mock:result").         }     }. }
