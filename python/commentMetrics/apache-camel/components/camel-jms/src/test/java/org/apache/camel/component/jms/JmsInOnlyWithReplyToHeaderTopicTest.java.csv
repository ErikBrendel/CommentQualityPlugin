commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("World").     exchange.getIn().setHeader("JMSReplyTo", "topic:bar"). }
false;public;0;17;;@Test public void testJmsInOnlyWithReplyToHeader() throws Exception {     getMockEndpoint("mock:bar").expectedMessageCount(1).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("JMSReplyTo", "topic://bar").     template.send("activemq:queue:foo?preserveMessageQos=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("World").             exchange.getIn().setHeader("JMSReplyTo", "topic:bar").         }     }).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;13;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transform(body().prepend("Hello ")).to("log:result").to("mock:result").     // we should disable reply to to avoid sending the message back to our self     // after we have consumed it     from("activemq:topic:bar?disableReplyTo=true").to("log:bar").to("mock:bar"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transform(body().prepend("Hello ")).to("log:result").to("mock:result").             // we should disable reply to to avoid sending the message back to our self             // after we have consumed it             from("activemq:topic:bar?disableReplyTo=true").to("log:bar").to("mock:bar").         }     }. }
