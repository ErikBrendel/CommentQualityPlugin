commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testCBR() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedMessageCount(1).     template.sendBody("activemq:queue:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;13;;@Override public void configure() throws Exception {     Predicate isA = header("route").isEqualTo("a").     Predicate isB = header("route").isEqualTo("b").     from("activemq:queue:start").bean(MyPreProcessorBean.class, "determineRouting").choice().when(isA).to("mock:a").when(isB).to("mock:b").end(). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             Predicate isA = header("route").isEqualTo("a").             Predicate isB = header("route").isEqualTo("b").             from("activemq:queue:start").bean(MyPreProcessorBean.class, "determineRouting").choice().when(isA).to("mock:a").when(isB).to("mock:b").end().         }     }. }
false;public;1;3;;public void determineRouting(Exchange exchange) {     exchange.getIn().setHeader("route", "b"). }
