commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testReplyToLoopIssue() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:done").expectedBodiesReceived("World").     template.sendBodyAndHeader("direct:start", "World", "JMSReplyTo", "queue:bar").     // sleep a little to ensure we do not do endless loop     Thread.sleep(250).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").to("activemq:queue:foo?preserveMessageQos=true").to("mock:done").     from("activemq:queue:foo").to("log:foo?showAll=true", "mock:foo").transform(body().prepend("Bye ")).     from("activemq:queue:bar").to("log:bar?showAll=true", "mock:bar"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("activemq:queue:foo?preserveMessageQos=true").to("mock:done").             from("activemq:queue:foo").to("log:foo?showAll=true", "mock:foo").transform(body().prepend("Bye ")).             from("activemq:queue:bar").to("log:bar?showAll=true", "mock:bar").         }     }. }
