commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testInOutExpired() throws Exception {     MyCoolBean cool = new MyCoolBean().     cool.setProducer(template).     cool.setConsumer(consumer).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     // and that the disableTimeToLive is defaulting to false     try {         template.requestBody("direct:timeout", "World 1").         fail("Should not get here, timeout expected").     } catch (CamelExecutionException e) {         cool.someBusinessLogic().     }     assertMockEndpointsSatisfied(). }
false;public;0;22;;@Test public void testInOutDisableTimeToLive() throws Exception {     MyCoolBean cool = new MyCoolBean().     cool.setProducer(template).     cool.setConsumer(consumer).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedBodiesReceived("Hello World 2").     // by the CoolBean     try {         template.requestBody("direct:disable", "World 2").         fail("Should not get here, timeout expected").     } catch (CamelExecutionException e) {         cool.someBusinessLogic().     }     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;12;;public void configure() throws Exception {     from("direct:timeout").to(urlTimeout).to("mock:result").     from("direct:disable").to(urlTimeToLiveDisabled).to("mock:result").     from("activemq:queue.out").to("mock:end"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:timeout").to(urlTimeout).to("mock:result").             from("direct:disable").to(urlTimeToLiveDisabled).to("mock:result").             from("activemq:queue.out").to("mock:end").         }     }. }
false;public;1;3;;public void setConsumer(ConsumerTemplate consumer) {     this.consumer = consumer. }
false;public;1;3;;public void setProducer(ProducerTemplate producer) {     this.producer = producer. }
false;public;0;17;;public void someBusinessLogic() {     // loop to empty queue     while (true) {         // receive the message from the queue, wait at most 2 sec         String msg = consumer.receiveBody("activemq:queue.in", 2000, String.class).         if (msg == null) {             // no more messages in queue             break.         }         // do something with body         msg = "Hello " + msg.         // send it to the next queue         producer.sendBodyAndHeader("activemq:queue.out", msg, "number", count++).     } }
