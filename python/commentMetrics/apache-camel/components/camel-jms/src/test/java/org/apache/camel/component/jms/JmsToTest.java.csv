commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testTo() throws Exception {     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:beer").expectedMessageCount(0).     getMockEndpoint("mock:where").expectedMessageCount(2).     template.sendBodyAndHeader("direct:start", "Hello bar", "where", "bar").     template.sendBodyAndHeader("direct:start", "Hello beer", "where", "beer").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;11;;@Override public void configure() throws Exception {     // wrongly using to instead of toD     from("direct:start").to("activemq:queue:${header.where}").     from("activemq:queue:bar").to("mock:bar").     from("activemq:queue:beer").to("mock:beer").     // and all the messages goes here     from("activemq:queue:${header.where}").to("mock:where"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // wrongly using to instead of toD             from("direct:start").to("activemq:queue:${header.where}").             from("activemq:queue:bar").to("mock:bar").             from("activemq:queue:beer").to("mock:beer").             // and all the messages goes here             from("activemq:queue:${header.where}").to("mock:where").         }     }. }
