commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testCustomJMSReplyToInOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("My name is Arnio").     // start a inOnly route     template.sendBody("activemq:queue:hello", "Hello, I'm here").     // now consume using something that is not Camel     Thread.sleep(1000).     JmsTemplate jms = new JmsTemplate(amq.getConfiguration().getConnectionFactory()).     TextMessage msg = (TextMessage) jms.receive("nameRequestor").     assertEquals("What's your name", msg.getText()).     // there should be a JMSReplyTo so we know where to send the reply     Destination replyTo = msg.getJMSReplyTo().     assertEquals("queue://nameReplyQueue", replyTo.toString()).     // send reply     template.sendBody("activemq:" + replyTo.toString(), "My name is Arnio").     Thread.sleep(2000).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("What's your name").     exchange.getIn().setHeader("JMSReplyTo", "nameReplyQueue"). }
false;public;0;13;;public void configure() throws Exception {     from("activemq:queue:hello").setExchangePattern(ExchangePattern.InOnly).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("What's your name").             exchange.getIn().setHeader("JMSReplyTo", "nameReplyQueue").         }     }).to("activemq:queue:nameRequestor?preserveMessageQos=true").     from("activemq:queue:nameReplyQueue").to("mock:result"). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello").setExchangePattern(ExchangePattern.InOnly).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("What's your name").                     exchange.getIn().setHeader("JMSReplyTo", "nameReplyQueue").                 }             }).to("activemq:queue:nameRequestor?preserveMessageQos=true").             from("activemq:queue:nameReplyQueue").to("mock:result").         }     }. }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     amq = camelContext.getComponent("activemq", JmsComponent.class).     return camelContext. }
