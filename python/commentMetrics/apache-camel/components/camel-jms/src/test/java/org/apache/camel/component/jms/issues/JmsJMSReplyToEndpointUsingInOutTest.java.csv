commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public Message createMessage(Session session) throws JMSException {     TextMessage replyMsg = session.createTextMessage().     replyMsg.setText("My name is Arnio").     replyMsg.setJMSCorrelationID(msg.getJMSCorrelationID()).     return replyMsg. }
false;public;0;21;;public Object call() throws Exception {     JmsTemplate jms = new JmsTemplate(amq.getConfiguration().getConnectionFactory()).     final TextMessage msg = (TextMessage) jms.receive("nameRequestor").     assertEquals("What's your name", msg.getText()).     // there should be a JMSReplyTo so we know where to send the reply     final Destination replyTo = msg.getJMSReplyTo().     // send reply     jms.send(replyTo, new MessageCreator() {          public Message createMessage(Session session) throws JMSException {             TextMessage replyMsg = session.createTextMessage().             replyMsg.setText("My name is Arnio").             replyMsg.setJMSCorrelationID(msg.getJMSCorrelationID()).             return replyMsg.         }     }).     return null. }
false;public;1;5;;public Message createMessage(Session session) throws JMSException {     TextMessage msg = session.createTextMessage().     msg.setText("Hello, I'm here").     return msg. }
false;public;0;49;;@Test public void testCustomJMSReplyToInOut() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("My name is Arnio").     // do not use Camel to send and receive to simulate a non Camel client     // use another thread to listen and send the reply     ExecutorService executor = Executors.newFixedThreadPool(1).     executor.submit(new Callable<Object>() {          public Object call() throws Exception {             JmsTemplate jms = new JmsTemplate(amq.getConfiguration().getConnectionFactory()).             final TextMessage msg = (TextMessage) jms.receive("nameRequestor").             assertEquals("What's your name", msg.getText()).             // there should be a JMSReplyTo so we know where to send the reply             final Destination replyTo = msg.getJMSReplyTo().             // send reply             jms.send(replyTo, new MessageCreator() {                  public Message createMessage(Session session) throws JMSException {                     TextMessage replyMsg = session.createTextMessage().                     replyMsg.setText("My name is Arnio").                     replyMsg.setJMSCorrelationID(msg.getJMSCorrelationID()).                     return replyMsg.                 }             }).             return null.         }     }).     // now get started and send the first message that gets the ball rolling     JmsTemplate jms = new JmsTemplate(amq.getConfiguration().getConnectionFactory()).     jms.send("hello", new MessageCreator() {          public Message createMessage(Session session) throws JMSException {             TextMessage msg = session.createTextMessage().             msg.setText("Hello, I'm here").             return msg.         }     }).     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("What's your name"). }
false;public;0;12;;public void configure() throws Exception {     from("activemq:queue:hello").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("What's your name").         }     }).to(ExchangePattern.InOut, "activemq:queue:nameRequestor?replyTo=queue:namedReplyQueue").to("mock:result"). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("What's your name").                 }             }).to(ExchangePattern.InOut, "activemq:queue:nameRequestor?replyTo=queue:namedReplyQueue").to("mock:result").         }     }. }
false;protected;0;7;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     amq = camelContext.getComponent("activemq", JmsComponent.class).     return camelContext. }
