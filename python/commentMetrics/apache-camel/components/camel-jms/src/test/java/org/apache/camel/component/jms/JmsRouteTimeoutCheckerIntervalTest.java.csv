commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testTimeout() throws Exception {     try {         // send a in-out with a timeout for 1 sec         template.requestBody("activemq:queue:slow?requestTimeout=1000", "Hello World").         fail("Should have timed out with an exception").     } catch (RuntimeCamelException e) {         assertTrue("Should have timed out with an exception", e.getCause() instanceof ExchangeTimedOutException).     } }
false;public;0;8;;@Test public void testNoTimeout() throws Exception {     // START SNIPPET: e1     // send a in-out with a timeout for 5 sec     Object out = template.requestBody("activemq:queue:slow?requestTimeout=5000", "Hello World").     // END SNIPPET: e1     assertEquals("Bye World", out). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent activmq = jmsComponentAutoAcknowledge(connectionFactory).     // check 4 times per second     activmq.setRequestTimeoutCheckerInterval(250).     camelContext.addComponent("activemq", activmq).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:queue:slow").delay(3000).transform(constant("Bye World")). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:slow").delay(3000).transform(constant("Bye World")).         }     }. }
