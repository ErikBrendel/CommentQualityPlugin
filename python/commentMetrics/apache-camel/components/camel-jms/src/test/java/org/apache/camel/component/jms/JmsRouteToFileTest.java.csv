commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testRouteToFile() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     deleteDirectory("target/routetofile").     template.sendBody("activemq:queue:hello", "Hello World").     // pause to let file producer save the file     result.assertIsSatisfied().     // do file assertions     File dir = new File("target/routetofile").     assertTrue("Should be directory", dir.isDirectory()).     File file = dir.listFiles()[0].     assertTrue("File should exists", file.exists()).     String body = IOConverter.toString(file, null).     assertEquals("Hello World", body). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     // using mock endpoint here purely for testing. You would normally write this route as     // from("activemq:queue:hello").to("file://target/routetofile").     from("activemq:queue:hello").to("file://target/routetofile").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // using mock endpoint here purely for testing. You would normally write this route as             // from("activemq:queue:hello").to("file://target/routetofile").             from("activemq:queue:hello").to("file://target/routetofile").to("mock:result").         }     }. }
