commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testJmsInOutExclusiveTopicTest() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String out = template.requestBodyAndHeader("direct:start", "Camel", "whereTo", "activemq:topic:news?replyToType=Exclusive&replyTo=queue:back", String.class).     assertEquals("Bye Camel", out).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;14;;@Override public void process(Exchange exchange) throws Exception {     String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class).     String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class).     log.info("ReplyTo: {}", replyTo).     log.info("CorrelationID: {}", cid).     if (replyTo != null && cid != null) {         // wait a bit before sending back         Thread.sleep(1000).         log.info("Sending back reply message on {}", replyTo).         template.sendBodyAndHeader("activemq:" + replyTo, exchange.getIn().getBody(), "JMSCorrelationID", cid).     } }
false;public;0;24;;public void configure() throws Exception {     from("direct:start").recipientList().header("whereTo").to("mock:result").     from("activemq:topic:news?disableReplyTo=true").transform(body().prepend("Bye ")).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class).             String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class).             log.info("ReplyTo: {}", replyTo).             log.info("CorrelationID: {}", cid).             if (replyTo != null && cid != null) {                 // wait a bit before sending back                 Thread.sleep(1000).                 log.info("Sending back reply message on {}", replyTo).                 template.sendBodyAndHeader("activemq:" + replyTo, exchange.getIn().getBody(), "JMSCorrelationID", cid).             }         }     }). }
false;protected;0;28;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").recipientList().header("whereTo").to("mock:result").             from("activemq:topic:news?disableReplyTo=true").transform(body().prepend("Bye ")).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String replyTo = exchange.getIn().getHeader("JMSReplyTo", String.class).                     String cid = exchange.getIn().getHeader("JMSCorrelationID", String.class).                     log.info("ReplyTo: {}", replyTo).                     log.info("CorrelationID: {}", cid).                     if (replyTo != null && cid != null) {                         // wait a bit before sending back                         Thread.sleep(1000).                         log.info("Sending back reply message on {}", replyTo).                         template.sendBodyAndHeader("activemq:" + replyTo, exchange.getIn().getBody(), "JMSCorrelationID", cid).                     }                 }             }).         }     }. }
