commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/JmsToJmsTransactedSecurityTest.xml"). }
false;public;0;9;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transacted().to("log:foo").to("activemq:queue:bar").     from("activemq:queue:bar").to("mock:bar"). }
false;public;0;26;;@Test public void testJmsSecurityFailure() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transacted().to("log:foo").to("activemq:queue:bar").             from("activemq:queue:bar").to("mock:bar").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedMessageCount(0).     template.sendBody("activemq:queue:foo", "Hello World").     // get the message that got rolled back     Exchange exch = consumer.receive("activemq:queue:foo", 250).     if (exch != null) {         LOG.info("Cleaned up orphaned message: " + exch).     }     mock.assertIsSatisfied(3000). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").to("log:start").to("activemq:queue:foo").     from("activemq:queue:foo").to("mock:foo"). }
false;public;0;21;;@Test public void testJmsSecurityOK() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:start").to("activemq:queue:foo").             from("activemq:queue:foo").to("mock:foo").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
