commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;7;;public static void processRequest(@Body final String body, @Header("CustomCorrelation") final String customCorrelation, @Header("JMSCorrelationId") final String jmsCorrelationId, final Exchange exchange) throws Exception {     assertNotNull(customCorrelation).     assertNull(jmsCorrelationId).     exchange.getIn().setBody("Hi, " + body + ", " + customCorrelation). }
false;public;0;7;;@Test public void shouldCorrelateRepliesWithCustomCorrelationProperty() throws Exception {     final String reply = template.requestBody("activemq:queue:request", "Bobby", String.class).     assertTrue(reply.matches("Hi, Bobby, Camel-.*")). }
false;public;0;8;;@Test public void shouldCorrelateRepliesWithCustomCorrelationPropertyAndValue() throws Exception {     final String reply = template.requestBodyAndHeader("activemq:queue:request", "Bobby", "CustomCorrelation", "custom-id", String.class).     assertEquals("Hi, Bobby, custom-id", reply). }
false;protected;0;13;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext camelContext = super.createCamelContext().     connectionFactory = CamelJmsTestHelper.createConnectionFactory().     final JmsComponent activeMq = jmsComponentAutoAcknowledge(connectionFactory).     activeMq.getConfiguration().setCorrelationProperty("CustomCorrelation").     camelContext.addComponent("activemq", activeMq).     return camelContext. }
false;public;0;4;;@Override public void configure() throws Exception {     from("activemq:queue:request").bean(RequestReplyCorrelatedWithCustomHeaderTest.class, "processRequest"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:request").bean(RequestReplyCorrelatedWithCustomHeaderTest.class, "processRequest").         }     }. }
