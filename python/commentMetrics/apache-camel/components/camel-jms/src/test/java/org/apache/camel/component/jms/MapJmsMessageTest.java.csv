commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;10;;@Test public void testTextMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TextMessage.class).     template.sendBody("activemq:queue:hello", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testBytesMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(BytesMessage.class).     template.sendBody("activemq:queue:hello", "Hello World".getBytes()).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from("activemq:queue:hello?mapJmsMessage=false").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello?mapJmsMessage=false").to("mock:result").         }     }. }
