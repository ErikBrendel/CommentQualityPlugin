commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testBatchResequencerJMSPriority() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("G", "A", "B", "E", "H", "C", "D", "F").     // must use preserveMessageQos=true to be able to specify the JMSPriority to be used     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "A", "JMSPriority", 6).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "B", "JMSPriority", 6).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "C", "JMSPriority", 4).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "D", "JMSPriority", 4).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "E", "JMSPriority", 6).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "F", "JMSPriority", 4).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "G", "JMSPriority", 8).     template.sendBodyAndHeader("jms:queue:foo?preserveMessageQos=true", "H", "JMSPriority", 6).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("jms", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;11;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("jms:queue:foo").resequence(header("JMSPriority")).batch().timeout(3000).allowDuplicates().reverse().to("mock:result"). // END SNIPPET: e1 }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("jms:queue:foo").resequence(header("JMSPriority")).batch().timeout(3000).allowDuplicates().reverse().to("mock:result").         // END SNIPPET: e1         }     }. }
