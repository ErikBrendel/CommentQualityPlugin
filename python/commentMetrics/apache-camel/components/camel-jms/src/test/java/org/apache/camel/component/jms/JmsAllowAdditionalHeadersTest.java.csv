commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAllowAdditionalHeaders() throws Exception {     // byte[] data = "Camel Rocks".getBytes().     Object data = "Camel Rocks".     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedHeaderReceived("foo", "bar").     // ActiveMQ will not accept byte[] value     // getMockEndpoint("mock:bar").expectedHeaderReceived("JMS_IBM_MQMD_USER", data).     fluentTemplate.withBody("Hello World").withHeader("foo", "bar").withHeader("JMS_IBM_MQMD_USER", data).to("direct:start").send().     assertMockEndpointsSatisfied(). }
false;protected;0;13;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     // allow any of those special IBM headers (notice we use * as wildcard)     jms.setAllowAdditionalHeaders("JMS_IBM_MQMD*").     camelContext.addComponent("jms", jms).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("jms:queue:bar").     from("jms:queue:bar").to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("jms:queue:bar").             from("jms:queue:bar").to("mock:bar").         }     }. }
