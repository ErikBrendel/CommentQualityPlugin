commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testUsingSpecialIBMJMSHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello IBM").     mock.message(0).header("JMS_IBM_Character_Set").isEqualTo("ISO8859_1").     template.sendBodyAndHeader("activemq:queue:ibm", "Hello IBM", "JMS_IBM_Character_Set", "ISO8859_1").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testUsingSpecialIBMJMSHeaderAndStandardJMSHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello IBM").     mock.message(0).header("JMS_IBM_Character_Set").isEqualTo("ISO8859_1").     Map<String, Object> headers = new HashMap<>().     headers.put("JMSPriority", 3).     headers.put("JMS_IBM_Character_Set", "ISO8859_1").     template.sendBodyAndHeaders("activemq:queue:ibm", "Hello IBM", headers).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:queue:ibm").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:ibm").to("mock:result").         }     }. }
