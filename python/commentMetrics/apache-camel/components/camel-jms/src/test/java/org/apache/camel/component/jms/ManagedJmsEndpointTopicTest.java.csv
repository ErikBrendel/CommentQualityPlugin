commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext context = new DefaultCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     context.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return context. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;23;;@Test public void testJmsEndpoint() throws Exception {     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> objectNames = mbeanServer.queryNames(new ObjectName("org.apache.camel:context=camel-*,type=endpoints,name=\"activemq://topic:start\""), null).     assertEquals(1, objectNames.size()).     ObjectName name = objectNames.iterator().next().     String uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("activemq://topic:start", uri).     Boolean singleton = (Boolean) mbeanServer.getAttribute(name, "Singleton").     assertTrue(singleton.booleanValue()).     Integer running = (Integer) mbeanServer.getAttribute(name, "RunningMessageListeners").     assertEquals(2, running.intValue()).     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("activemq:topic:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("activemq:topic:start").routeId("foo").to("log:foo").to("mock:result").     from("activemq:topic:start").routeId("bar").to("log:bar").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:topic:start").routeId("foo").to("log:foo").to("mock:result").             from("activemq:topic:start").routeId("bar").to("log:bar").to("mock:result").         }     }. }
