commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testJMSReplyToHeaderPreserved() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:foo").expectedHeaderReceived("JMSReplyTo", "queue://bar").     getMockEndpoint("mock:done").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").to("activemq:queue:foo?replyTo=queue:bar&preserveMessageQos=true").to("mock:done").     // and disable reply to as we do not want to send back a reply message in this route     from("activemq:queue:foo?disableReplyTo=true").to("log:foo?showAll=true", "mock:foo"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("activemq:queue:foo?replyTo=queue:bar&preserveMessageQos=true").to("mock:done").             // and disable reply to as we do not want to send back a reply message in this route             from("activemq:queue:foo?disableReplyTo=true").to("log:foo?showAll=true", "mock:foo").         }     }. }
