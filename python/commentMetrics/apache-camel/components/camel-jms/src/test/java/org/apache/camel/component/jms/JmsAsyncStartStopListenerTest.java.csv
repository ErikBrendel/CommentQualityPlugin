commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testAsyncStartListener() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(2).     template.requestBody("activemq:queue:hello", "Hello World").     template.requestBody("activemq:queue:hello", "Gooday World").     result.assertIsSatisfied(). }
false;protected;0;13;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // use a persistent queue as the consumer is started asynchronously     // so we need a persistent store in case no active consumers when we send the messages     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.setAsyncStartListener(true).     jms.setAsyncStopListener(true).     camelContext.addComponent(componentName, jms).     return camelContext. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Bye World"). }
false;public;0;7;;public void configure() throws Exception {     from("activemq:queue:hello").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Bye World").         }     }).to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Bye World").                 }             }).to("mock:result").         }     }. }
