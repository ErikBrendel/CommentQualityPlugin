commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testJmsRoutePreserveQos() throws Exception {     MockEndpoint preserveEndpoint1 = context.getEndpoint("mock:preserve-1", MockEndpoint.class).     preserveEndpoint1.expectedMessageCount(1).     preserveEndpoint1.message(0).header("JMSPriority").isEqualTo(1).     MockEndpoint preserveEndpoint2 = context.getEndpoint("mock:preserve-2", MockEndpoint.class).     preserveEndpoint2.expectedMessageCount(1).     preserveEndpoint2.message(0).header("JMSPriority").isEqualTo(2).     template.sendBody(componentName + ":queue:p1?explicitQosEnabled=true&priority=1", "test").     template.sendBody(componentName + ":queue:p2?explicitQosEnabled=true&priority=2", "test").     MockEndpoint.assertIsSatisfied(preserveEndpoint1, preserveEndpoint2). }
false;public;0;16;;@Test public void testJmsRouteNormalQos() throws Exception {     MockEndpoint regularEndpoint1 = context.getEndpoint("mock:regular-1", MockEndpoint.class).     regularEndpoint1.expectedMessageCount(1).     regularEndpoint1.message(0).header("JMSPriority").isEqualTo(4).     MockEndpoint regularEndpoint2 = context.getEndpoint("mock:regular-2", MockEndpoint.class).     regularEndpoint2.expectedMessageCount(1).     regularEndpoint2.message(0).header("JMSPriority").isEqualTo(4).     template.sendBody(componentName + ":queue:r1?explicitQosEnabled=true&priority=1", "test").     template.sendBody(componentName + ":queue:r2?explicitQosEnabled=true&priority=2", "test").     MockEndpoint.assertIsSatisfied(regularEndpoint1, regularEndpoint2). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;15;;public void configure() throws Exception {     // Messages should arrive at mock:preserve with their priorities preserved.     from(componentName + ":queue:p1").to(componentName + ":queue:preserve-1?preserveMessageQos=true").     from(componentName + ":queue:preserve-1").to("mock:preserve-1").     from(componentName + ":queue:p2").to(componentName + ":queue:preserve-2?preserveMessageQos=true").     from(componentName + ":queue:preserve-2").to("mock:preserve-2").     // Messages will NOT arrive at mock:regular with their priorities preserved.     from(componentName + ":queue:r1").to(componentName + ":queue:regular-1").     from(componentName + ":queue:regular-1").to("mock:regular-1").     from(componentName + ":queue:r2").to(componentName + ":queue:regular-2").     from(componentName + ":queue:regular-2").to("mock:regular-2"). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // Messages should arrive at mock:preserve with their priorities preserved.             from(componentName + ":queue:p1").to(componentName + ":queue:preserve-1?preserveMessageQos=true").             from(componentName + ":queue:preserve-1").to("mock:preserve-1").             from(componentName + ":queue:p2").to(componentName + ":queue:preserve-2?preserveMessageQos=true").             from(componentName + ":queue:preserve-2").to("mock:preserve-2").             // Messages will NOT arrive at mock:regular with their priorities preserved.             from(componentName + ":queue:r1").to(componentName + ":queue:regular-1").             from(componentName + ":queue:regular-1").to("mock:regular-1").             from(componentName + ":queue:r2").to(componentName + ":queue:regular-2").             from(componentName + ":queue:regular-2").to("mock:regular-2").         }     }. }
