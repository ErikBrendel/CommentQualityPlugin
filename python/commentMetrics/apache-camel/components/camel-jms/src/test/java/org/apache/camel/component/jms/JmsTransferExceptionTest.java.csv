commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUri() {     return "activemq:queue:foo?transferException=true". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     counter = 0.     super.setUp(). }
false;public;0;7;;@Test public void testOk() throws Exception {     Object out = template.requestBody(getUri(), "Hello World").     assertEquals("Bye World", out).     assertEquals(1, counter). }
false;public;0;16;;@Test public void testTransferExeption() throws Exception {     // an exception with the remote exception as cause     try {         template.requestBody(getUri(), "Kabom").         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         assertEquals("Boom", e.getCause().getMessage()).         assertNotNull("Should contain a remote stacktrace", e.getCause().getStackTrace()).     }     // we still try redeliver     assertEquals(3, counter). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     counter++.     String body = exchange.getIn().getBody(String.class).     if (body.equals("Kabom")) {         throw new IllegalArgumentException("Boom").     }     exchange.getOut().setBody("Bye World"). }
false;public;0;17;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().maximumRedeliveries(2)).     from(getUri()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             String body = exchange.getIn().getBody(String.class).             if (body.equals("Kabom")) {                 throw new IllegalArgumentException("Boom").             }             exchange.getOut().setBody("Bye World").         }     }). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().maximumRedeliveries(2)).             from(getUri()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     String body = exchange.getIn().getBody(String.class).                     if (body.equals("Kabom")) {                         throw new IllegalArgumentException("Boom").                     }                     exchange.getOut().setBody("Bye World").                 }             }).         }     }. }
