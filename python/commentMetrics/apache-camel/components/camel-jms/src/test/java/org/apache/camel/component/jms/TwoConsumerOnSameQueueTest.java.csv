commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testTwoConsumerOnSameQueue() throws Exception {     sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert(). }
false;public;0;26;;@Test public void testStopAndStartOneRoute() throws Exception {     sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert().     // now stop route A     context.getRouteController().stopRoute("a").     // send new message should go to B only     resetMocks().     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedBodiesReceived("Bye World", "Bye World").     template.sendBody("activemq:queue:foo", "Bye World").     template.sendBody("activemq:queue:foo", "Bye World").     assertMockEndpointsSatisfied().     // now start route A     context.getRouteController().startRoute("a").     // send new message should go to both A and B     resetMocks().     sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert(). }
false;public;0;19;;@Test public void testRemoveOneRoute() throws Exception {     sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert().     // now stop and remove route A     context.getRouteController().stopRoute("a").     assertTrue(context.removeRoute("a")).     // send new message should go to B only     resetMocks().     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedBodiesReceived("Bye World", "Bye World").     template.sendBody("activemq:queue:foo", "Bye World").     template.sendBody("activemq:queue:foo", "Bye World").     assertMockEndpointsSatisfied(). }
false;private;0;9;;private void sendTwoMessagesWhichShouldReceivedOnBothEndpointsAndAssert() throws InterruptedException {     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("Hello World").     template.sendBody("activemq:queue:foo", "Hello World").     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;@Override public void configure() throws Exception {     from("activemq:queue:foo").routeId("a").to("log:a", "mock:a").     from("activemq:queue:foo").routeId("b").to("log:b", "mock:b"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").routeId("a").to("log:a", "mock:a").             from("activemq:queue:foo").routeId("b").to("log:b", "mock:b").         }     }. }
