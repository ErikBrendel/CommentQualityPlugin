# id;timestamp;commentText;codeText;commentWords;codeWords
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1262946790;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1294910464;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1295171442;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1295281467;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1311865908;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1329262563;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1329338772;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1420728546;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1423037885;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception;1537290824;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set on the message then we expect the reply_to contain the same correlation id.;@Test_    public void testRequestReplyCorrelationByGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,same,correlation,id;test,public,void,test,request,reply,correlation,by,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1262946790;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1294910464;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1295171442;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1295281467;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1311865908;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1329262563;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1329338772;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1420728546;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1423037885;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception;1537290824;When the setting useMessageIdAsCorrelationid is true for the client and_false for the server and a correlation id is not set on the message then_we expect the reply to contain the message is from the sent message;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationIdAndUseMessageIdonClient() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = (String) out.getOut().getHeader("JMSCorrelationID")___        assertNotNull(correlationId)__        _        assertTrue("CorrelationID should start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,true,for,the,client,and,false,for,the,server,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,is,from,the,sent,message;test,public,void,test,request,reply,correlation,without,given,correlation,id,and,use,message,idon,client,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,string,out,get,out,get,header,jmscorrelation,id,assert,not,null,correlation,id,assert,true,correlation,id,should,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1262946790;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1294910464;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1295171442;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1295281467;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1311865908;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1329262563;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1329338772;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1420728546;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1423037885;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception;1537290824;When the setting useMessageIdAsCorrelationid is false and_a correlation id is not set on the message then we expect the reply_to contain the correlation id dynamically generated on send._Ideally we should also check what happens if the correlation id_was not set on send but this is currently not done.;@Test_    public void testRequestReplyCorrelationWithoutGivenCorrelationId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,not,set,on,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send,ideally,we,should,also,check,what,happens,if,the,correlation,id,was,not,set,on,send,but,this,is,currently,not,done;test,public,void,test,request,reply,correlation,without,given,correlation,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithEmptyString() throws Exception;1329338772;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set to empty String ("") the message then we expect the reply_to contain the correlation id dynamically generated on send.;@Test_    public void testRequestReplyCorrelationWithEmptyString() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "")__            }_        })___        assertNotNull(out)__        result.assertIsSatisfied()___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,to,empty,string,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send;test,public,void,test,request,reply,correlation,with,empty,string,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,assert,not,null,out,result,assert,is,satisfied,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithEmptyString() throws Exception;1420728546;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set to empty String ("") the message then we expect the reply_to contain the correlation id dynamically generated on send.;@Test_    public void testRequestReplyCorrelationWithEmptyString() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "")__            }_        })___        assertNotNull(out)__        result.assertIsSatisfied()___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,to,empty,string,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send;test,public,void,test,request,reply,correlation,with,empty,string,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,assert,not,null,out,result,assert,is,satisfied,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithEmptyString() throws Exception;1423037885;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set to empty String ("") the message then we expect the reply_to contain the correlation id dynamically generated on send.;@Test_    public void testRequestReplyCorrelationWithEmptyString() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "")__            }_        })___        assertNotNull(out)__        result.assertIsSatisfied()___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,to,empty,string,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send;test,public,void,test,request,reply,correlation,with,empty,string,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,assert,not,null,out,result,assert,is,satisfied,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithEmptyString() throws Exception;1537290824;When the setting useMessageIdAsCorrelationid is false and_a correlation id is set to empty String ("") the message then we expect the reply_to contain the correlation id dynamically generated on send.;@Test_    public void testRequestReplyCorrelationWithEmptyString() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms:queue:hello", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "")__            }_        })___        assertNotNull(out)__        result.assertIsSatisfied()___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        String correlationId = out.getOut().getHeader("JMSCorrelationID", String.class)__        assertNotNull(correlationId)__        _        assertFalse("CorrelationID should NOT start with ID, was: " + correlationId, correlationId.startsWith("ID:"))__    };when,the,setting,use,message,id,as,correlationid,is,false,and,a,correlation,id,is,set,to,empty,string,the,message,then,we,expect,the,reply,to,contain,the,correlation,id,dynamically,generated,on,send;test,public,void,test,request,reply,correlation,with,empty,string,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms,queue,hello,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,assert,not,null,out,result,assert,is,satisfied,assert,equals,out,get,out,get,body,string,class,string,correlation,id,out,get,out,get,header,jmscorrelation,id,string,class,assert,not,null,correlation,id,assert,false,correlation,id,should,not,start,with,id,was,correlation,id,correlation,id,starts,with,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithDuplicateId() throws Exception;1420728546;As the correlationID should be unique when receiving the reply message,_now we just expect to get an exception here.;@Test_    public void testRequestReplyCorrelationWithDuplicateId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        _        template.asyncSend("jms:queue:helloDelay", new Processor() {_            public void process(Exchange exchange) throws Exception {_                exchange.setPattern(ExchangePattern.InOut)__                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "b")__            }_        })__        _        Exchange out = template.send("jms:queue:helloDelay", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "b")__            }_        })___        result.assertIsSatisfied()___        assertNotNull("We are expecting the exception here!", out.getException())__        assertTrue("Get a wrong exception", out.getException() instanceof IllegalArgumentException)__        _    };as,the,correlation,id,should,be,unique,when,receiving,the,reply,message,now,we,just,expect,to,get,an,exception,here;test,public,void,test,request,reply,correlation,with,duplicate,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,template,async,send,jms,queue,hello,delay,new,processor,public,void,process,exchange,exchange,throws,exception,exchange,set,pattern,exchange,pattern,in,out,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,b,exchange,out,template,send,jms,queue,hello,delay,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,b,result,assert,is,satisfied,assert,not,null,we,are,expecting,the,exception,here,out,get,exception,assert,true,get,a,wrong,exception,out,get,exception,instanceof,illegal,argument,exception
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithDuplicateId() throws Exception;1423037885;As the correlationID should be unique when receiving the reply message,_now we just expect to get an exception here.;@Test_    public void testRequestReplyCorrelationWithDuplicateId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)__        NotifyBuilder notify = new NotifyBuilder(context).whenReceived(1).create()___        _        template.asyncSend("jms:queue:helloDelay", new Processor() {_            public void process(Exchange exchange) throws Exception {_                exchange.setPattern(ExchangePattern.InOut)__                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "b")__            }_        })__        _        notify.matches(1, TimeUnit.SECONDS)__        _        Exchange out = template.send("jms:queue:helloDelay", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "b")__            }_        })___        result.assertIsSatisfied()___        assertNotNull("We are expecting the exception here!", out.getException())__        assertTrue("Get a wrong exception", out.getException() instanceof IllegalArgumentException)__        _    };as,the,correlation,id,should,be,unique,when,receiving,the,reply,message,now,we,just,expect,to,get,an,exception,here;test,public,void,test,request,reply,correlation,with,duplicate,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,notify,builder,notify,new,notify,builder,context,when,received,1,create,template,async,send,jms,queue,hello,delay,new,processor,public,void,process,exchange,exchange,throws,exception,exchange,set,pattern,exchange,pattern,in,out,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,b,notify,matches,1,time,unit,seconds,exchange,out,template,send,jms,queue,hello,delay,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,b,result,assert,is,satisfied,assert,not,null,we,are,expecting,the,exception,here,out,get,exception,assert,true,get,a,wrong,exception,out,get,exception,instanceof,illegal,argument,exception
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationWithDuplicateId() throws Exception;1537290824;As the correlationID should be unique when receiving the reply message,_now we just expect to get an exception here.;@Test_    public void testRequestReplyCorrelationWithDuplicateId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)__        NotifyBuilder notify = new NotifyBuilder(context).whenReceived(1).create()___        _        template.asyncSend("jms:queue:helloDelay", new Processor() {_            public void process(Exchange exchange) throws Exception {_                exchange.setPattern(ExchangePattern.InOut)__                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "b")__            }_        })__        _        notify.matches(1, TimeUnit.SECONDS)__        _        Exchange out = template.send("jms:queue:helloDelay", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "b")__            }_        })___        result.assertIsSatisfied()___        assertNotNull("We are expecting the exception here!", out.getException())__        assertTrue("Get a wrong exception", out.getException() instanceof IllegalArgumentException)__        _    };as,the,correlation,id,should,be,unique,when,receiving,the,reply,message,now,we,just,expect,to,get,an,exception,here;test,public,void,test,request,reply,correlation,with,duplicate,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,notify,builder,notify,new,notify,builder,context,when,received,1,create,template,async,send,jms,queue,hello,delay,new,processor,public,void,process,exchange,exchange,throws,exception,exchange,set,pattern,exchange,pattern,in,out,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,b,notify,matches,1,time,unit,seconds,exchange,out,template,send,jms,queue,hello,delay,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,b,result,assert,is,satisfied,assert,not,null,we,are,expecting,the,exception,here,out,get,exception,assert,true,get,a,wrong,exception,out,get,exception,instanceof,illegal,argument,exception
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1262946790;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1294910464;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1295171442;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1295281467;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1311865908;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1329262563;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1329338772;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1420728546;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1423037885;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
JmsRequestReplyCorrelationTest -> @Test     public void testRequestReplyCorrelationByMessageId() throws Exception;1537290824;When the setting useMessageIdAsCorrelationid is true and_a correlation id is set on the message then we expect the reply_to contain the messageId of the sent message. Here we test only that_it is not the correlation id given as the messageId is not know_beforehand.;@Test_    public void testRequestReplyCorrelationByMessageId() throws Exception {_        MockEndpoint result = getMockEndpoint("mock:result")__        result.expectedMessageCount(1)___        Exchange out = template.send("jms2:queue:hello2", ExchangePattern.InOut, new Processor() {_            public void process(Exchange exchange) throws Exception {_                Message in = exchange.getIn()__                in.setBody("Hello World")__                in.setHeader("JMSCorrelationID", "a")__            }_        })___        result.assertIsSatisfied()___        assertNotNull(out)___        assertEquals(REPLY_BODY, out.getOut().getBody(String.class))__        assertEquals("a", out.getOut().getHeader("JMSCorrelationID"))__    };when,the,setting,use,message,id,as,correlationid,is,true,and,a,correlation,id,is,set,on,the,message,then,we,expect,the,reply,to,contain,the,message,id,of,the,sent,message,here,we,test,only,that,it,is,not,the,correlation,id,given,as,the,message,id,is,not,know,beforehand;test,public,void,test,request,reply,correlation,by,message,id,throws,exception,mock,endpoint,result,get,mock,endpoint,mock,result,result,expected,message,count,1,exchange,out,template,send,jms2,queue,hello2,exchange,pattern,in,out,new,processor,public,void,process,exchange,exchange,throws,exception,message,in,exchange,get,in,in,set,body,hello,world,in,set,header,jmscorrelation,id,a,result,assert,is,satisfied,assert,not,null,out,assert,equals,out,get,out,get,body,string,class,assert,equals,a,out,get,out,get,header,jmscorrelation,id
