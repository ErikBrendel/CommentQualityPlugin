commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     template.send("mock:result", exchange). }
false;public;0;32;;@Test public void testRestartJmsConsumerPickupChanges() throws Exception {     JmsEndpoint endpoint = context.getEndpoint("activemq:queue:foo", JmsEndpoint.class).     JmsConsumer consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {             template.send("mock:result", exchange).         }     }).     consumer.start().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied().     consumer.stop().     // change to listen on another queue     endpoint.setDestinationName("bar").     endpoint.setConcurrentConsumers(2).     // restart it     consumer.start().     result.reset().     result.expectedBodiesReceived("Bye World").     template.sendBody("activemq:queue:bar", "Bye World").     assertMockEndpointsSatisfied().     consumer.stop(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
