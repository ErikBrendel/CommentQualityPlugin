commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testComponentFormatDateHeaderToIso8601() throws Exception {     String outDate = template.requestBodyAndHeader("direct:start-isoformat", "body", "date", DATE, String.class).     assertEquals(outDate, "2018-02-26T19:12:18Z"). }
false;public;0;5;;@Test public void testBindingFormatDateHeaderToIso8601() throws Exception {     String outDate = template.requestBodyAndHeader("direct:start-nonisoformat", "body", "date", DATE, String.class).     assertNotEquals(outDate, "2018-02-26T19:12:18Z"). }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.setFormatDateHeadersToIso8601(true).     camelContext.addComponent("activemq", jms).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start-isoformat").to("activemq:queue:foo").     from("direct:start-nonisoformat").to("activemq:queue:foo?formatDateHeadersToIso8601=false").     from("activemq:queue:foo").setBody(simple("${in.header.date}")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start-isoformat").to("activemq:queue:foo").             from("direct:start-nonisoformat").to("activemq:queue:foo?formatDateHeadersToIso8601=false").             from("activemq:queue:foo").setBody(simple("${in.header.date}")).         }     }. }
