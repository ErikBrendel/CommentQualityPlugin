commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDiscovery() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.setResultWaitTime(5000).     // force shutdown after 5 seconds as otherwise the bean will keep generating a new input     context.getShutdownStrategy().setTimeout(5).     assertMockEndpointsSatisfied().     // sleep a little     Thread.sleep(1000).     Map<String, Map<?, ?>> map = new HashMap<>(myRegistry.getServices()).     assertTrue("There should be 1 or more, was: " + map.size(), map.size() >= 1). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;protected;1;5;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("service1", new MyService("service1")).     registry.bind("registry", myRegistry). }
false;public;0;12;;public void configure() throws Exception {     // lets setup the heartbeats     from("timer:heartbeats?delay=100").to("bean:service1?method=status").to("activemq:topic:registry.heartbeats").     // defer shutting this route down as the first route depends upon it to     // be running so it can complete its current exchanges     from("activemq:topic:registry.heartbeats").shutdownRoute(ShutdownRoute.Defer).to("bean:registry?method=onEvent", "mock:result"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // lets setup the heartbeats             from("timer:heartbeats?delay=100").to("bean:service1?method=status").to("activemq:topic:registry.heartbeats").             // defer shutting this route down as the first route depends upon it to             // be running so it can complete its current exchanges             from("activemq:topic:registry.heartbeats").shutdownRoute(ShutdownRoute.Defer).to("bean:registry?method=onEvent", "mock:result").         }     }. }
