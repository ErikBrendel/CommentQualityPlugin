commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(null). }
false;public;0;12;;@Override public void configure() throws Exception {     from("jms:queue:foo").to("mock:foo").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(null).         }     }).to("mock:bar"). }
false;public;0;26;;@Test public void testSetNullBodyUsingProcessor() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jms:queue:foo").to("mock:foo").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody(null).                 }             }).to("mock:bar").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:bar").message(0).body().isNull().     template.sendBody("jms:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(null). }
false;public;0;12;;@Override public void configure() throws Exception {     from("jms:queue:foo").to("mock:foo").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(null).         }     }).to("mock:bar"). }
false;public;0;28;;@Test public void testSetNullBodyUsingProcessorPreserveHeaders() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jms:queue:foo").to("mock:foo").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody(null).                 }             }).to("mock:bar").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:foo").expectedHeaderReceived("code", 123).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:bar").message(0).body().isNull().     getMockEndpoint("mock:bar").expectedHeaderReceived("code", 123).     template.sendBodyAndHeader("jms:queue:foo", "Hello World", "code", 123).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("jms:queue:foo").to("mock:foo").setBody(constant(null)).to("mock:bar"). }
false;public;0;21;;@Test public void testSetNullBodyUsingSetBody() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jms:queue:foo").to("mock:foo").setBody(constant(null)).to("mock:bar").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:bar").message(0).body().isNull().     template.sendBody("jms:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("jms:queue:foo").to("mock:foo").setBody(constant(null)).to("mock:bar"). }
false;public;0;23;;@Test public void testSetNullBodyUsingSetBodyPreserveHeaders() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jms:queue:foo").to("mock:foo").setBody(constant(null)).to("mock:bar").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:foo").expectedHeaderReceived("code", 123).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:bar").message(0).body().isNull().     getMockEndpoint("mock:bar").expectedHeaderReceived("code", 123).     template.sendBodyAndHeader("jms:queue:foo", "Hello World", "code", 123).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("jms", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
