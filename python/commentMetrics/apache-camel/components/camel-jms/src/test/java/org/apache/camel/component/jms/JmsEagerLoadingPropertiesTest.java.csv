commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testJmsEagerLoadingPropertiesTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("name", "Claus").     template.sendBodyAndHeader("activemq:queue:foo", "Hello World", "name", "Claus").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String name = exchange.getIn().getHeader("name", String.class).     assertEquals("Claus", name). }
false;public;0;9;;@Override public void configure() throws Exception {     from("activemq:queue:foo?eagerLoadingOfProperties=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String name = exchange.getIn().getHeader("name", String.class).             assertEquals("Claus", name).         }     }).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo?eagerLoadingOfProperties=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String name = exchange.getIn().getHeader("name", String.class).                     assertEquals("Claus", name).                 }             }).to("mock:result").         }     }. }
