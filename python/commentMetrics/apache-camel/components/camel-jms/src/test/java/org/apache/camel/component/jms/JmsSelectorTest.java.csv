commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testJmsSelector() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     String expectedBody = "Hello there!".     String expectedBody2 = "Goodbye!".     resultEndpoint.expectedBodiesReceived(expectedBody2).     resultEndpoint.message(0).header("cheese").isEqualTo("y").     template.sendBodyAndHeader("activemq:test.a", expectedBody, "cheese", "x").     template.sendBodyAndHeader("activemq:test.a", expectedBody2, "cheese", "y").     resultEndpoint.assertIsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent component = jmsComponentTransacted(connectionFactory).     camelContext.addComponent("activemq", component).     return camelContext. }
false;public;0;4;;public void configure() throws Exception {     from("activemq:test.a").to("activemq:test.b").     from("activemq:test.b?selector=cheese='y'").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.a").to("activemq:test.b").             from("activemq:test.b?selector=cheese='y'").to("mock:result").         }     }. }
