commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testForwardingJmsMessageIgnoresHeadersMQDoesntLike() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("JMSXAppID", "ABC").     template.sendBodyAndHeaders("activemq:test.a", "Hello World!", headers).     endpoint.assertIsSatisfied().     Exchange exchange = endpoint.getReceivedExchanges().get(0).     Message in = exchange.getIn().     assertMessageHeader(in, "JMSXAppID", null).     log.info("Received message: " + in). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;public void configure() throws Exception {     from("activemq:test.a").to("activemq:test.b").     from("activemq:test.b").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.a").to("activemq:test.b").             from("activemq:test.b").to("mock:result").         }     }. }
