commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMessageCreatedStrategy() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("beer", "Carlsberg").     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     JmsComponent jms = camelContext.getComponent(componentName, JmsComponent.class).     jms.setMessageCreatedStrategy(new MyMessageCreatedStrategy()).     return camelContext. }
false;public;0;5;;@Override public void configure() throws Exception {     from("activemq:queue:foo").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").to("mock:result").         }     }. }
false;public;4;8;;@Override public void onMessageCreated(Message message, Session session, Exchange exchange, Throwable cause) {     try {         JmsMessageHelper.setProperty(message, "beer", "Carlsberg").     } catch (JMSException e) {     // ignore     } }
