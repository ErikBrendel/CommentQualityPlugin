commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSendSomeMessages() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:results").     String body1 = "Hello world!".     String body2 = "Goodbye world!".     endpoint.expectedBodiesReceived(body1, body2).     template.sendBody("activemq:queue:foo.bar", body1).     template.sendBody("activemq:queue:foo.bar", body2).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;3;;public void process(Exchange e) throws Exception {     LOG.info(">>>> Received exchange: " + e). }
false;public;0;13;;public void configure() throws Exception {     Processor myProcessor = new Processor() {          public void process(Exchange e) throws Exception {             LOG.info(">>>> Received exchange: " + e).         }     }.     // lets enable CACHE_CONSUMER so that the consumer stays around in JMX     // as the default due to the spring bug means we keep creating & closing consumers     from("activemq:queue:foo.bar?cacheLevelName=CACHE_CONSUMER").process(myProcessor).to("mock:results"). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             Processor myProcessor = new Processor() {                  public void process(Exchange e) throws Exception {                     LOG.info(">>>> Received exchange: " + e).                 }             }.             // lets enable CACHE_CONSUMER so that the consumer stays around in JMX             // as the default due to the spring bug means we keep creating & closing consumers             from("activemq:queue:foo.bar?cacheLevelName=CACHE_CONSUMER").process(myProcessor).to("mock:results").         }     }. }
