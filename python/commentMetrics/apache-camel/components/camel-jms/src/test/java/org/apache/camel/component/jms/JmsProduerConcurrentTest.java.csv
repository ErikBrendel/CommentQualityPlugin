commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;4;;public Object call() throws Exception {     template.sendBody("direct:start", "Message " + index).     return null. }
false;private;2;18;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").expectsNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBody("direct:start", "Message " + index).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("jms", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("jms:queue:foo").     from("jms:queue:foo").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("jms:queue:foo").             from("jms:queue:foo").to("mock:result").         }     }. }
