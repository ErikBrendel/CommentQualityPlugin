commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testSendMessagesThenBrowseQueue() throws Exception {     // send some messages     for (int i = 0. i < expectedBodies.length. i++) {         Object expectedBody = expectedBodies[i].         template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i).     }     // now lets browse the queue     JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b?maximumBrowseSize=6", JmsQueueEndpoint.class).     assertEquals(6, endpoint.getMaximumBrowseSize()).     List<Exchange> list = endpoint.getExchanges().     LOG.debug("Received: " + list).     assertEquals("Size of list", 6, endpoint.getExchanges().size()).     int index = -1.     for (Exchange exchange : list) {         String actual = exchange.getIn().getBody(String.class).         LOG.debug("Received body: " + actual).         Object expected = expectedBodies[++index].         assertEquals("Body: " + index, expected, actual).     } }
false;public;0;24;;@Test public void testSendMessagesThenBrowseQueueLimitNotHit() throws Exception {     // send some messages     for (int i = 0. i < expectedBodies.length. i++) {         Object expectedBody = expectedBodies[i].         template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i).     }     // now lets browse the queue     JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b?maximumBrowseSize=10", JmsQueueEndpoint.class).     assertEquals(10, endpoint.getMaximumBrowseSize()).     List<Exchange> list = endpoint.getExchanges().     LOG.debug("Received: " + list).     assertEquals("Size of list", 8, endpoint.getExchanges().size()).     int index = -1.     for (Exchange exchange : list) {         String actual = exchange.getIn().getBody(String.class).         LOG.debug("Received body: " + actual).         Object expected = expectedBodies[++index].         assertEquals("Body: " + index, expected, actual).     } }
false;public;0;24;;@Test public void testSendMessagesThenBrowseQueueNoMax() throws Exception {     // send some messages     for (int i = 0. i < expectedBodies.length. i++) {         Object expectedBody = expectedBodies[i].         template.sendBodyAndHeader("activemq:test.b", expectedBody, "counter", i).     }     // now lets browse the queue     JmsQueueEndpoint endpoint = getMandatoryEndpoint("activemq:test.b", JmsQueueEndpoint.class).     assertEquals(-1, endpoint.getMaximumBrowseSize()).     List<Exchange> list = endpoint.getExchanges().     LOG.debug("Received: " + list).     assertEquals("Size of list", 8, endpoint.getExchanges().size()).     int index = -1.     for (Exchange exchange : list) {         String actual = exchange.getIn().getBody(String.class).         LOG.debug("Received body: " + actual).         Object expected = expectedBodies[++index].         assertEquals("Body: " + index, expected, actual).     } }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:test.a").to("activemq:test.b"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.a").to("activemq:test.b").         }     }. }
