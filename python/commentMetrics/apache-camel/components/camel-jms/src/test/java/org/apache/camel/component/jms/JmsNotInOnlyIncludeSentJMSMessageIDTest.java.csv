commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testJmsNotInOnlyIncludeSentJMSMessageID() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:done").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     Exchange done = mock.getReceivedExchanges().get(0).     assertNotNull(done).     Object body = done.getIn().getBody().     assertEquals("Hello World", body).     String id = done.getIn().getHeader("JMSMessageID", String.class).     assertNull("Should not have enriched with JMSMessageID", id). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("activemq:queue:foo").to("mock:done"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("activemq:queue:foo").to("mock:done").         }     }. }
