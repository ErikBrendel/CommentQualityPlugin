commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testWithInOnly() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     // send an InOnly     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWithInOut() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     // send an InOut     String out = template.requestBody("direct:start", "World", String.class).     assertEquals("Hello World", out).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;public void configure() throws Exception {     from("direct:start").inOut("activemq:queue:foo").to("mock:result").     from("activemq:queue:foo").transform(body().prepend("Hello ")). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").inOut("activemq:queue:foo").to("mock:result").             from("activemq:queue:foo").transform(body().prepend("Hello ")).         }     }. }
