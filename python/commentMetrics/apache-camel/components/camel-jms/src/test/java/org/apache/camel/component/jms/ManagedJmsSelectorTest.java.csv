commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext context = new DefaultCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     context.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return context. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;40;;@Test public void testJmsSelectorChangeViaJmx() throws Exception {     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null).     assertEquals(1, set.size()).     ObjectName on = set.iterator().next().     assertTrue("Should be registered", mbeanServer.isRegistered(on)).     String selector = (String) mbeanServer.getAttribute(on, "MessageSelector").     assertEquals("brand='beer'", selector).     getMockEndpoint("mock:result").expectedBodiesReceived("Carlsberg").     template.sendBodyAndHeader("activemq:queue:start", "Pepsi", "brand", "softdrink").     template.sendBodyAndHeader("activemq:queue:start", "Carlsberg", "brand", "beer").     assertMockEndpointsSatisfied().     // change the selector at runtime     resetMocks().     mbeanServer.setAttribute(on, new Attribute("MessageSelector", "brand='softdrink'")).     // give it a little time to adjust     Thread.sleep(100).     getMockEndpoint("mock:result").expectedBodiesReceived("Pepsi").     template.sendBodyAndHeader("activemq:queue:start", "Pepsi", "brand", "softdrink").     template.sendBodyAndHeader("activemq:queue:start", "Carlsberg", "brand", "beer").     assertMockEndpointsSatisfied().     selector = (String) mbeanServer.getAttribute(on, "MessageSelector").     assertEquals("brand='softdrink'", selector). }
false;public;0;4;;@Override public void configure() throws Exception {     from("activemq:queue:start?cacheLevelName=CACHE_NONE&selector=brand='beer'").routeId("foo").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:start?cacheLevelName=CACHE_NONE&selector=brand='beer'").routeId("foo").to("log:foo").to("mock:result").         }     }. }
