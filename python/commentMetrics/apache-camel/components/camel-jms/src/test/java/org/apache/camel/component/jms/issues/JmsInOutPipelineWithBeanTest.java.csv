commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testA() throws Exception {     Object response = template.requestBody("activemq:testA", "Hello World").     assertEquals("Reply", "Hello World,From Bean,From A,From B", response). }
false;public;0;5;;@Test public void testB() throws Exception {     Object response = template.requestBody("activemq:testB", "Hello World").     assertEquals("Reply", "Hello World,From A,From Bean,From B", response). }
false;public;0;5;;@Test public void testC() throws Exception {     Object response = template.requestBody("activemq:testC", "Hello World").     assertEquals("Reply", "Hello World,From A,From B,From Bean", response). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     reg.bind("dummyBean", new MyDummyBean()).     return reg. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody(body + ",From A"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody(body + ",From B"). }
false;public;0;19;;public void configure() throws Exception {     from("activemq:testA").to("bean:dummyBean").to("activemq:a").to("activemq:b").     from("activemq:testB").to("activemq:a").to("bean:dummyBean").to("activemq:b").     from("activemq:testC").to("activemq:a").to("activemq:b").to("bean:dummyBean").     from("activemq:a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody(body + ",From A").         }     }).     from("activemq:b").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody(body + ",From B").         }     }). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:testA").to("bean:dummyBean").to("activemq:a").to("activemq:b").             from("activemq:testB").to("activemq:a").to("bean:dummyBean").to("activemq:b").             from("activemq:testC").to("activemq:a").to("activemq:b").to("bean:dummyBean").             from("activemq:a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody(body + ",From A").                 }             }).             from("activemq:b").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody(body + ",From B").                 }             }).         }     }. }
false;public;1;4;;public void doSomething(Exchange exchange) {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody(body + ",From Bean"). }
