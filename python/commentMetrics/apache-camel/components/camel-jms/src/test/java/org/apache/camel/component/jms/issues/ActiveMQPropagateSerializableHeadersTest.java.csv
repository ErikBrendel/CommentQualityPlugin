commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     calValue = Calendar.getInstance().     mapValue = new LinkedHashMap<>().     mapValue.put("myStringEntry", "stringValue").     mapValue.put("myCalEntry", Calendar.getInstance()).     mapValue.put("myIntEntry", 123). }
false;public;0;28;;@Test public void testForwardingAMessageAcrossJMSKeepingCustomJMSHeaders() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedBodiesReceived(expectedBody).     AssertionClause firstMessageExpectations = resultEndpoint.message(0).     firstMessageExpectations.header("myCal").isEqualTo(calValue).     firstMessageExpectations.header("myMap").isEqualTo(mapValue).     template.sendBody("activemq:test.a", expectedBody).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     {         String headerValue = exchange.getIn().getHeader("myString", String.class).         assertEquals("myString", "stringValue", headerValue).     }     {         Calendar headerValue = exchange.getIn().getHeader("myCal", Calendar.class).         assertEquals("myCal", calValue, headerValue).     }     {         Map<String, Object> headerValue = exchange.getIn().getHeader("myMap", Map.class).         assertEquals("myMap", mapValue, headerValue).     } }
false;protected;0;14;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // START SNIPPET: example     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     // END SNIPPET: example     // prevent java.io.NotSerializableException: org.apache.camel.support.DefaultMessageHistory     camelContext.setMessageHistory(false).     return camelContext. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     // set the JMS headers     Message in = exchange.getIn().     in.setHeader("myString", "stringValue").     in.setHeader("myMap", mapValue).     in.setHeader("myCal", calValue). }
false;public;0;13;;public void configure() throws Exception {     from("activemq:test.a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // set the JMS headers             Message in = exchange.getIn().             in.setHeader("myString", "stringValue").             in.setHeader("myMap", mapValue).             in.setHeader("myCal", calValue).         }     }).to("activemq:test.b?transferExchange=true&allowSerializedHeaders=true").     from("activemq:test.b").to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // set the JMS headers                     Message in = exchange.getIn().                     in.setHeader("myString", "stringValue").                     in.setHeader("myMap", mapValue).                     in.setHeader("myCal", calValue).                 }             }).to("activemq:test.b?transferExchange=true&allowSerializedHeaders=true").             from("activemq:test.b").to("mock:result").         }     }. }
