commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testReaderShouldBeByteArray() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(byte[].class).     mock.message(0).body(String.class).isEqualTo("Hello World").     Reader body = new StringReader("Hello World").     template.sendBody("activemq:queue:hello", body).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testInputStreamShouldBeByteArray() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(byte[].class).     mock.message(0).body(String.class).isEqualTo("Hello World").     InputStream body = new ByteArrayInputStream("Hello World".getBytes()).     template.sendBody("activemq:queue:hello", body).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testByteBufferShouldBeByteArray() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(byte[].class).     mock.message(0).body(String.class).isEqualTo("Hello World").     ByteBuffer body = ByteBuffer.wrap("Hello World".getBytes()).     template.sendBody("activemq:queue:hello", body).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:queue:hello").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello").to("mock:result").         }     }. }
