commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testJmsRoutingSlip() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("Hello").     getMockEndpoint("mock:b").expectedBodiesReceived("HelloA").     getMockEndpoint("mock:c").expectedBodiesReceived("HelloAB").     getMockEndpoint("mock:result").expectedBodiesReceived("HelloABC").     String slip = "activemq:queue:a,activemq:queue:b,activemq:queue:c".     template.sendBodyAndHeader("direct:start", "Hello", "mySlip", slip).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;20;;@Override public void configure() throws Exception {     from("direct:start").setExchangePattern(ExchangePattern.InOut).routingSlip(header("mySlip")).to("mock:result").     from("activemq:queue:a").to("mock:a").transform(body().append("A")).     from("activemq:queue:b").to("mock:b").transform(body().append("B")).     from("activemq:queue:c").to("mock:c").transform(body().append("C")). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setExchangePattern(ExchangePattern.InOut).routingSlip(header("mySlip")).to("mock:result").             from("activemq:queue:a").to("mock:a").transform(body().append("A")).             from("activemq:queue:b").to("mock:b").transform(body().append("B")).             from("activemq:queue:c").to("mock:c").transform(body().append("C")).         }     }. }
