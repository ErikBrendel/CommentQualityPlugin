# id;timestamp;commentText;codeText;commentWords;codeWords
JmsReconnectTest -> @Ignore     @Test     public void testRequestReply() throws Exception;1286263685;This test is disabled as the problem can currently not be reproduced using ActiveMQ._TODO Find a way to recreate the problem with ActiveMQ and fully automate the test_@throws Exception;@Ignore_    @Test_    public void testRequestReply() throws Exception {_        BrokerService broker = new BrokerService()__        broker.addConnector("tcp://localhost:61616")__        broker.setPersistent(false)__        broker.setTimeBeforePurgeTempDestinations(1000)__        broker.start()___        DefaultCamelContext context = new DefaultCamelContext()__        JmsComponent jmsComponent = new JmsComponent()___        _        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory()__        connectionFactory.setBrokerURL("failover://(tcp://localhost:61616)?maxReconnectAttempts=1")___        _        _        _        __        jmsComponent.setConnectionFactory(connectionFactory)__        jmsComponent.setRequestTimeout(1000)__        jmsComponent.setReceiveTimeout(1000)__        context.addComponent("jms", jmsComponent)__        context.addRoutes(new RouteBuilder() {__            @Override_            public void configure() throws Exception {_                from("jms:testqueue").bean(new EchoServiceImpl())__                from("direct:test").to("jms:testqueue")__            }_        })__        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setCamelContext(context)__        processor.postProcessBeforeInitialization(this, "this")__        context.start()___        String ret = proxy.echo("test")__        Assert.assertEquals("test", ret)___        broker.stop()__        _        Thread.sleep(5000)___        System.in.read()__        broker.start(true)___        _        String ret2 = proxy.echo("test")__        Assert.assertEquals("test", ret2)___    };this,test,is,disabled,as,the,problem,can,currently,not,be,reproduced,using,active,mq,todo,find,a,way,to,recreate,the,problem,with,active,mq,and,fully,automate,the,test,throws,exception;ignore,test,public,void,test,request,reply,throws,exception,broker,service,broker,new,broker,service,broker,add,connector,tcp,localhost,61616,broker,set,persistent,false,broker,set,time,before,purge,temp,destinations,1000,broker,start,default,camel,context,context,new,default,camel,context,jms,component,jms,component,new,jms,component,active,mqconnection,factory,connection,factory,new,active,mqconnection,factory,connection,factory,set,broker,url,failover,tcp,localhost,61616,max,reconnect,attempts,1,jms,component,set,connection,factory,connection,factory,jms,component,set,request,timeout,1000,jms,component,set,receive,timeout,1000,context,add,component,jms,jms,component,context,add,routes,new,route,builder,override,public,void,configure,throws,exception,from,jms,testqueue,bean,new,echo,service,impl,from,direct,test,to,jms,testqueue,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,camel,context,context,processor,post,process,before,initialization,this,this,context,start,string,ret,proxy,echo,test,assert,assert,equals,test,ret,broker,stop,thread,sleep,5000,system,in,read,broker,start,true,string,ret2,proxy,echo,test,assert,assert,equals,test,ret2
JmsReconnectTest -> @Ignore     @Test     public void testRequestReply() throws Exception;1311777225;This test is disabled as the problem can currently not be reproduced using ActiveMQ._TODO Find a way to recreate the problem with ActiveMQ and fully automate the test_@throws Exception;@Ignore_    @Test_    public void testRequestReply() throws Exception {_        BrokerService broker = new BrokerService()__        broker.addConnector("tcp://localhost:61616")__        broker.setPersistent(false)__        broker.setTimeBeforePurgeTempDestinations(1000)__        broker.start()___        DefaultCamelContext context = new DefaultCamelContext()__        JmsComponent jmsComponent = new JmsComponent()___        _        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory()__        connectionFactory.setBrokerURL("failover://(tcp://localhost:61616)?maxReconnectAttempts=1")___        _        _        _        __        jmsComponent.setConnectionFactory(connectionFactory)__        jmsComponent.setRequestTimeout(1000)__        jmsComponent.setReceiveTimeout(1000)__        context.addComponent("jms", jmsComponent)__        context.addRoutes(new RouteBuilder() {__            @Override_            public void configure() throws Exception {_                from("jms:testqueue").bean(new EchoServiceImpl())__                from("direct:test").to("jms:testqueue")__            }_        })__        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setCamelContext(context)__        processor.postProcessBeforeInitialization(this, "this")__        context.start()___        String ret = proxy.echo("test")__        Assert.assertEquals("test", ret)___        broker.stop()__        _        Thread.sleep(5000)___        System.in.read()__        broker.start(true)___        _        String ret2 = proxy.echo("test")__        Assert.assertEquals("test", ret2)___    };this,test,is,disabled,as,the,problem,can,currently,not,be,reproduced,using,active,mq,todo,find,a,way,to,recreate,the,problem,with,active,mq,and,fully,automate,the,test,throws,exception;ignore,test,public,void,test,request,reply,throws,exception,broker,service,broker,new,broker,service,broker,add,connector,tcp,localhost,61616,broker,set,persistent,false,broker,set,time,before,purge,temp,destinations,1000,broker,start,default,camel,context,context,new,default,camel,context,jms,component,jms,component,new,jms,component,active,mqconnection,factory,connection,factory,new,active,mqconnection,factory,connection,factory,set,broker,url,failover,tcp,localhost,61616,max,reconnect,attempts,1,jms,component,set,connection,factory,connection,factory,jms,component,set,request,timeout,1000,jms,component,set,receive,timeout,1000,context,add,component,jms,jms,component,context,add,routes,new,route,builder,override,public,void,configure,throws,exception,from,jms,testqueue,bean,new,echo,service,impl,from,direct,test,to,jms,testqueue,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,camel,context,context,processor,post,process,before,initialization,this,this,context,start,string,ret,proxy,echo,test,assert,assert,equals,test,ret,broker,stop,thread,sleep,5000,system,in,read,broker,start,true,string,ret2,proxy,echo,test,assert,assert,equals,test,ret2
JmsReconnectTest -> @Ignore     @Test     public void testRequestReply() throws Exception;1311782706;This test is disabled as the problem can currently not be reproduced using ActiveMQ._TODO Find a way to recreate the problem with ActiveMQ and fully automate the test_@throws Exception;@Ignore_    @Test_    public void testRequestReply() throws Exception {_        BrokerService broker = new BrokerService()__        broker.addConnector("tcp://localhost:61616")__        broker.setPersistent(false)__        broker.setTimeBeforePurgeTempDestinations(1000)__        broker.start()___        DefaultCamelContext context = new DefaultCamelContext()__        JmsComponent jmsComponent = new JmsComponent()___        _        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory()__        connectionFactory.setBrokerURL("failover://(tcp://localhost:61616)?maxReconnectAttempts=1")___        _        _        _        __        jmsComponent.setConnectionFactory(connectionFactory)__        jmsComponent.setRequestTimeout(1000)__        jmsComponent.setReceiveTimeout(1000)__        context.addComponent("jms", jmsComponent)__        context.addRoutes(new RouteBuilder() {__            @Override_            public void configure() throws Exception {_                from("jms:testqueue").bean(new EchoServiceImpl())__                from("direct:test").to("jms:testqueue")__            }_        })__        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setCamelContext(context)__        processor.postProcessBeforeInitialization(this, "this")__        context.start()___        String ret = proxy.echo("test")__        Assert.assertEquals("test", ret)___        broker.stop()__        _        Thread.sleep(5000)___        System.in.read()__        broker.start(true)___        _        String ret2 = proxy.echo("test")__        Assert.assertEquals("test", ret2)___    };this,test,is,disabled,as,the,problem,can,currently,not,be,reproduced,using,active,mq,todo,find,a,way,to,recreate,the,problem,with,active,mq,and,fully,automate,the,test,throws,exception;ignore,test,public,void,test,request,reply,throws,exception,broker,service,broker,new,broker,service,broker,add,connector,tcp,localhost,61616,broker,set,persistent,false,broker,set,time,before,purge,temp,destinations,1000,broker,start,default,camel,context,context,new,default,camel,context,jms,component,jms,component,new,jms,component,active,mqconnection,factory,connection,factory,new,active,mqconnection,factory,connection,factory,set,broker,url,failover,tcp,localhost,61616,max,reconnect,attempts,1,jms,component,set,connection,factory,connection,factory,jms,component,set,request,timeout,1000,jms,component,set,receive,timeout,1000,context,add,component,jms,jms,component,context,add,routes,new,route,builder,override,public,void,configure,throws,exception,from,jms,testqueue,bean,new,echo,service,impl,from,direct,test,to,jms,testqueue,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,camel,context,context,processor,post,process,before,initialization,this,this,context,start,string,ret,proxy,echo,test,assert,assert,equals,test,ret,broker,stop,thread,sleep,5000,system,in,read,broker,start,true,string,ret2,proxy,echo,test,assert,assert,equals,test,ret2
JmsReconnectTest -> @Ignore     @Test     public void testRequestReply() throws Exception;1322845387;This test is disabled as the problem can currently not be reproduced using ActiveMQ._TODO Find a way to recreate the problem with ActiveMQ and fully automate the test_@throws Exception;@Ignore_    @Test_    public void testRequestReply() throws Exception {_        BrokerService broker = new BrokerService()__        broker.addConnector("tcp://localhost:61616")__        broker.setPersistent(false)__        broker.setTimeBeforePurgeTempDestinations(1000)__        broker.start()___        DefaultCamelContext context = new DefaultCamelContext()__        JmsComponent jmsComponent = new JmsComponent()___        _        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory()__        connectionFactory.setBrokerURL("failover://(tcp://localhost:61616)?maxReconnectAttempts=1")___        _        _        _        __        jmsComponent.setConnectionFactory(connectionFactory)__        jmsComponent.setRequestTimeout(1000)__        jmsComponent.setReceiveTimeout(1000)__        context.addComponent("jms", jmsComponent)__        context.addRoutes(new RouteBuilder() {__            @Override_            public void configure() throws Exception {_                from("jms:testqueue").bean(new EchoServiceImpl())__                from("direct:test").to("jms:testqueue")__            }_        })__        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setCamelContext(context)__        processor.postProcessBeforeInitialization(this, "this")__        context.start()___        String ret = proxy.echo("test")__        Assert.assertEquals("test", ret)___        broker.stop()__        _        Thread.sleep(5000)___        System.in.read()__        broker.start(true)___        _        String ret2 = proxy.echo("test")__        Assert.assertEquals("test", ret2)___    };this,test,is,disabled,as,the,problem,can,currently,not,be,reproduced,using,active,mq,todo,find,a,way,to,recreate,the,problem,with,active,mq,and,fully,automate,the,test,throws,exception;ignore,test,public,void,test,request,reply,throws,exception,broker,service,broker,new,broker,service,broker,add,connector,tcp,localhost,61616,broker,set,persistent,false,broker,set,time,before,purge,temp,destinations,1000,broker,start,default,camel,context,context,new,default,camel,context,jms,component,jms,component,new,jms,component,active,mqconnection,factory,connection,factory,new,active,mqconnection,factory,connection,factory,set,broker,url,failover,tcp,localhost,61616,max,reconnect,attempts,1,jms,component,set,connection,factory,connection,factory,jms,component,set,request,timeout,1000,jms,component,set,receive,timeout,1000,context,add,component,jms,jms,component,context,add,routes,new,route,builder,override,public,void,configure,throws,exception,from,jms,testqueue,bean,new,echo,service,impl,from,direct,test,to,jms,testqueue,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,camel,context,context,processor,post,process,before,initialization,this,this,context,start,string,ret,proxy,echo,test,assert,assert,equals,test,ret,broker,stop,thread,sleep,5000,system,in,read,broker,start,true,string,ret2,proxy,echo,test,assert,assert,equals,test,ret2
JmsReconnectTest -> @Ignore     @Test     public void testRequestReply() throws Exception;1358887940;This test is disabled as the problem can currently not be reproduced using ActiveMQ._TODO Find a way to recreate the problem with ActiveMQ and fully automate the test_@throws Exception;@Ignore_    @Test_    public void testRequestReply() throws Exception {_        BrokerService broker = new BrokerService()__        broker.addConnector("tcp://localhost:61616")__        broker.setPersistent(false)__        broker.setTimeBeforePurgeTempDestinations(1000)__        broker.start()___        DefaultCamelContext context = new DefaultCamelContext()__        JmsComponent jmsComponent = new JmsComponent()___        _        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory()__        connectionFactory.setBrokerURL("failover://(tcp://localhost:61616)?maxReconnectAttempts=1")___        _        _        _        __        jmsComponent.setConnectionFactory(connectionFactory)__        jmsComponent.setRequestTimeout(1000)__        jmsComponent.setReceiveTimeout(1000)__        context.addComponent("jms", jmsComponent)__        context.addRoutes(new RouteBuilder() {__            @Override_            public void configure() throws Exception {_                from("jms:testqueue").bean(new EchoServiceImpl())__                from("direct:test").to("jms:testqueue")__            }_        })__        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setCamelContext(context)__        processor.postProcessBeforeInitialization(this, "this")__        context.start()___        String ret = proxy.echo("test")__        Assert.assertEquals("test", ret)___        broker.stop()__        _        Thread.sleep(5000)___        System.in.read()__        broker.start(true)___        _        String ret2 = proxy.echo("test")__        Assert.assertEquals("test", ret2)___    };this,test,is,disabled,as,the,problem,can,currently,not,be,reproduced,using,active,mq,todo,find,a,way,to,recreate,the,problem,with,active,mq,and,fully,automate,the,test,throws,exception;ignore,test,public,void,test,request,reply,throws,exception,broker,service,broker,new,broker,service,broker,add,connector,tcp,localhost,61616,broker,set,persistent,false,broker,set,time,before,purge,temp,destinations,1000,broker,start,default,camel,context,context,new,default,camel,context,jms,component,jms,component,new,jms,component,active,mqconnection,factory,connection,factory,new,active,mqconnection,factory,connection,factory,set,broker,url,failover,tcp,localhost,61616,max,reconnect,attempts,1,jms,component,set,connection,factory,connection,factory,jms,component,set,request,timeout,1000,jms,component,set,receive,timeout,1000,context,add,component,jms,jms,component,context,add,routes,new,route,builder,override,public,void,configure,throws,exception,from,jms,testqueue,bean,new,echo,service,impl,from,direct,test,to,jms,testqueue,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,camel,context,context,processor,post,process,before,initialization,this,this,context,start,string,ret,proxy,echo,test,assert,assert,equals,test,ret,broker,stop,thread,sleep,5000,system,in,read,broker,start,true,string,ret2,proxy,echo,test,assert,assert,equals,test,ret2
JmsReconnectTest -> @Ignore     @Test     public void testRequestReply() throws Exception;1373187183;This test is disabled as the problem can currently not be reproduced using ActiveMQ._TODO Find a way to recreate the problem with ActiveMQ and fully automate the test_@throws Exception;@Ignore_    @Test_    public void testRequestReply() throws Exception {_        BrokerService broker = new BrokerService()__        broker.addConnector("tcp://localhost:61616")__        broker.setPersistent(false)__        broker.setTimeBeforePurgeTempDestinations(1000)__        broker.start()___        DefaultCamelContext context = new DefaultCamelContext()__        JmsComponent jmsComponent = new JmsComponent()___        _        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory()__        connectionFactory.setBrokerURL("failover://(tcp://localhost:61616)?maxReconnectAttempts=1")___        _        _        __        jmsComponent.setConnectionFactory(connectionFactory)__        jmsComponent.setRequestTimeout(1000)__        jmsComponent.setReceiveTimeout(1000)__        context.addComponent("jms", jmsComponent)__        context.addRoutes(new RouteBuilder() {__            @Override_            public void configure() throws Exception {_                from("jms:testqueue").bean(new EchoServiceImpl())__                from("direct:test").to("jms:testqueue")__            }_        })__        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setCamelContext(context)__        processor.postProcessBeforeInitialization(this, "this")__        context.start()___        String ret = proxy.echo("test")__        Assert.assertEquals("test", ret)___        broker.stop()__        _        Thread.sleep(5000)___        System.in.read()__        broker.start(true)___        _        String ret2 = proxy.echo("test")__        Assert.assertEquals("test", ret2)___    };this,test,is,disabled,as,the,problem,can,currently,not,be,reproduced,using,active,mq,todo,find,a,way,to,recreate,the,problem,with,active,mq,and,fully,automate,the,test,throws,exception;ignore,test,public,void,test,request,reply,throws,exception,broker,service,broker,new,broker,service,broker,add,connector,tcp,localhost,61616,broker,set,persistent,false,broker,set,time,before,purge,temp,destinations,1000,broker,start,default,camel,context,context,new,default,camel,context,jms,component,jms,component,new,jms,component,active,mqconnection,factory,connection,factory,new,active,mqconnection,factory,connection,factory,set,broker,url,failover,tcp,localhost,61616,max,reconnect,attempts,1,jms,component,set,connection,factory,connection,factory,jms,component,set,request,timeout,1000,jms,component,set,receive,timeout,1000,context,add,component,jms,jms,component,context,add,routes,new,route,builder,override,public,void,configure,throws,exception,from,jms,testqueue,bean,new,echo,service,impl,from,direct,test,to,jms,testqueue,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,camel,context,context,processor,post,process,before,initialization,this,this,context,start,string,ret,proxy,echo,test,assert,assert,equals,test,ret,broker,stop,thread,sleep,5000,system,in,read,broker,start,true,string,ret2,proxy,echo,test,assert,assert,equals,test,ret2
