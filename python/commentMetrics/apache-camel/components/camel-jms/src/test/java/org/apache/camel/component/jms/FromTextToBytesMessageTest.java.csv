commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testTextToBytes() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedMessageCount(1).     template.sendBody("activemq:queue:foo", "3").     assertMockEndpointsSatisfied().     javax.jms.Message msg = mock.getReceivedExchanges().get(0).getIn(JmsMessage.class).getJmsMessage().     assertNotNull(msg).     assertIsInstanceOf(javax.jms.BytesMessage.class, msg). }
false;public;0;13;;@Test public void testTextToBytesHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedMessageCount(1).     template.sendBody("activemq:queue:header", "3").     assertMockEndpointsSatisfied().     javax.jms.Message msg = mock.getReceivedExchanges().get(0).getIn(JmsMessage.class).getJmsMessage().     assertNotNull(msg).     assertIsInstanceOf(javax.jms.BytesMessage.class, msg). }
false;public;0;13;;@Test public void testTextToText() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedMessageCount(1).     template.sendBody("activemq:queue:text", "Hello").     assertMockEndpointsSatisfied().     javax.jms.Message msg = mock.getReceivedExchanges().get(0).getIn(JmsMessage.class).getJmsMessage().     assertNotNull(msg).     assertIsInstanceOf(javax.jms.TextMessage.class, msg). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;15;;@Override public void configure() throws Exception {     from("activemq:queue:foo?jmsMessageType=Text").to("activemq:queue:bar?jmsMessageType=Bytes").     from("activemq:queue:header?jmsMessageType=Text").setHeader("myHeader", constant("123")).to("activemq:queue:bar?jmsMessageType=Bytes").     from("activemq:queue:text?jmsMessageType=Text").to("activemq:queue:bar?jmsMessageType=Text").     from("activemq:queue:bar").to("mock:bar"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo?jmsMessageType=Text").to("activemq:queue:bar?jmsMessageType=Bytes").             from("activemq:queue:header?jmsMessageType=Text").setHeader("myHeader", constant("123")).to("activemq:queue:bar?jmsMessageType=Bytes").             from("activemq:queue:text?jmsMessageType=Text").to("activemq:queue:bar?jmsMessageType=Text").             from("activemq:queue:bar").to("mock:bar").         }     }. }
