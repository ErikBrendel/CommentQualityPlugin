commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUri() {     return "activemq:queue:foo?transferExchange=true". }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("A,B,C").     exchange.getIn().setHeader("foo", "cheese").     exchange.setProperty("bar", 123). }
false;public;0;16;;@Test public void testSplit() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("A", "B", "C").     mock.allMessages().header("foo").isEqualTo("cheese").     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("A,B,C").             exchange.getIn().setHeader("foo", "cheese").             exchange.setProperty("bar", 123).         }     }).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).to(getUri()).     from(getUri()).to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).to(getUri()).             from(getUri()).to("mock:result").         }     }. }
