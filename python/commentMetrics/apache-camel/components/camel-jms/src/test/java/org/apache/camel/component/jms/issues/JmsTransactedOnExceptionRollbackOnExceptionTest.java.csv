commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Handler public void onException(Exchange exchange, Exception exception) throws Exception {     throw new RuntimeException("error in errorhandler"). }
false;public;0;10;;@Override public void configure() throws Exception {     // we attempt to handle the exception but if it throw a new exception     // then it causes the JMS transaction to rollback     onException(Exception.class).handled(true).bean(BadErrorHandler.class).     from(testingEndpoint).log("Incoming JMS message ${body}").throwException(new RuntimeException("bad error")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // we attempt to handle the exception but if it throw a new exception             // then it causes the JMS transaction to rollback             onException(Exception.class).handled(true).bean(BadErrorHandler.class).             from(testingEndpoint).log("Incoming JMS message ${body}").throwException(new RuntimeException("bad error")).         }     }. }
false;public;0;7;;@Test public void shouldNotLoseMessagesOnExceptionInErrorHandler() throws Exception {     template.sendBody(testingEndpoint, "Hello World").     Object dlqBody = consumer.receiveBody("activemq:ActiveMQ.DLQ", 2000).     assertEquals("Hello World", dlqBody). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // no redeliveries     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory(null, 0).     JmsComponent component = jmsComponentTransacted(connectionFactory).     camelContext.addComponent("activemq", component).     return camelContext. }
