commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye Camel", reply).     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;23;;@Override public void configure() throws Exception {     from("direct:start").to("mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("activemq:queue:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:after").to("mock:result").     from("activemq:queue:foo").transform(constant("Bye Camel")). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("activemq:queue:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:after").to("mock:result").             from("activemq:queue:foo").transform(constant("Bye Camel")).         }     }. }
