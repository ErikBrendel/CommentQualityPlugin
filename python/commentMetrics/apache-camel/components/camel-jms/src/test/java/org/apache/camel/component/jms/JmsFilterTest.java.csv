commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendMatchingMessage() throws Exception {     String expectedBody = "<matched/>".     resultEndpoint.expectedBodiesReceived(expectedBody).     template.sendBodyAndHeader(expectedBody, "foo", "bar").     resultEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Test public void testSendNotMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(0).     template.sendBodyAndHeader("<notMatched/>", "foo", "notMatchedHeaderValue").     resultEndpoint.assertIsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;public void configure() {     from("direct:start").to("jms:myQueue").     from("jms:myQueue").filter(header("foo").isEqualTo("bar")).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("jms:myQueue").             from("jms:myQueue").filter(header("foo").isEqualTo("bar")).to("mock:result").         }     }. }
