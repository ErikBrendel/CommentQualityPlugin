commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testInOutWithRequestBody() throws Exception {     String reply = template.requestBody("activemq:queue:in", "Hello World", String.class).     assertEquals("Bye World", reply). }
false;public;0;8;;@Test public void testInOutTwoTimes() throws Exception {     String reply = template.requestBody("activemq:queue:in", "Hello World", String.class).     assertEquals("Bye World", reply).     reply = template.requestBody("activemq:queue:in", "Hello Camel", String.class).     assertEquals("Bye World", reply). }
false;public;0;5;;@Test public void testInOutWithAsyncRequestBody() throws Exception {     Future<String> reply = template.asyncRequestBody("activemq:queue:in", "Hello World", String.class).     assertEquals("Bye World", reply.get()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;10;;@Test public void testInOutWithSendExchange() throws Exception {     Exchange out = template.send("activemq:queue:in", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertEquals("Bye World", out.getOut().getBody()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     exchange.getIn().setBody("Hello World"). }
false;public;0;11;;@Test public void testInOutWithAsyncSendExchange() throws Exception {     Future<Exchange> out = template.asyncSend("activemq:queue:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             exchange.getIn().setBody("Hello World").         }     }).     assertEquals("Bye World", out.get().getOut().getBody()). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Bye World"). }
false;public;0;7;;public void configure() throws Exception {     from("activemq:queue:in").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Bye World").         }     }). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:in").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Bye World").                 }             }).         }     }. }
