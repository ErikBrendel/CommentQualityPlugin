commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public Message createMessage(Session session) throws JMSException {     MapMessage mapMessage = session.createMapMessage().     mapMessage.setString("foo", "abc").     mapMessage.setString("bar", "xyz").     return mapMessage. }
false;public;0;17;;@Test public void testConsumeMapMessage() throws Exception {     endpoint.expectedMessageCount(1).     jmsTemplate.setPubSubDomain(false).     jmsTemplate.send("test.map", new MessageCreator() {          public Message createMessage(Session session) throws JMSException {             MapMessage mapMessage = session.createMapMessage().             mapMessage.setString("foo", "abc").             mapMessage.setString("bar", "xyz").             return mapMessage.         }     }).     endpoint.assertIsSatisfied().     assertCorrectMapReceived(). }
false;protected;0;16;;protected void assertCorrectMapReceived() {     Exchange exchange = endpoint.getReceivedExchanges().get(0).     // This should be a JMS Exchange     assertNotNull(ExchangeHelper.getBinding(exchange, JmsBinding.class)).     JmsMessage in = (JmsMessage) exchange.getIn().     assertNotNull(in).     Map<?, ?> map = exchange.getIn().getBody(Map.class).     log.info("Received map: " + map).     assertNotNull("Should have received a map message!", map).     assertIsInstanceOf(MapMessage.class, in.getJmsMessage()).     assertEquals("map.foo", "abc", map.get("foo")).     assertEquals("map.bar", "xyz", map.get("bar")).     assertEquals("map.size", 2, map.size()). }
false;public;0;14;;@Test public void testSendMapMessage() throws Exception {     endpoint.expectedMessageCount(1).     Map<String, String> map = new HashMap<>().     map.put("foo", "abc").     map.put("bar", "xyz").     template.sendBody("direct:test", map).     endpoint.assertIsSatisfied().     assertCorrectMapReceived(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     endpoint = getMockEndpoint("mock:result"). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     jmsTemplate = new JmsTemplate(connectionFactory).     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;public void configure() throws Exception {     from("activemq:test.map").to("mock:result").     from("direct:test").to("activemq:test.map"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:test.map").to("mock:result").             from("direct:test").to("activemq:test.map").         }     }. }
