commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSendWithHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isEqualTo("Hello World").     mock.message(0).header("HEADER_1").isEqualTo("VALUE_2").     template.sendBodyAndHeader(uri, "Hello World", "HEADER_1", "VALUE_1").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     assertEquals("VALUE_2", headers.get("HEADER_1")).     assertEquals("VALUE_2", exchange.getIn().getHeader("HEADER_1")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     assertEquals("VALUE_1", headers.get("HEADER_1")).     assertEquals("VALUE_1", exchange.getIn().getHeader("HEADER_1")). }
false;public;0;20;;@Override public void configure() throws Exception {     from(uri).process(new Processor() {          public void process(Exchange exchange) throws Exception {             Map<String, Object> headers = exchange.getIn().getHeaders().             assertEquals("VALUE_1", headers.get("HEADER_1")).             assertEquals("VALUE_1", exchange.getIn().getHeader("HEADER_1")).         }     }).setHeader("HEADER_1", constant("VALUE_2")).process(new Processor() {          public void process(Exchange exchange) throws Exception {             Map<String, Object> headers = exchange.getIn().getHeaders().             assertEquals("VALUE_2", headers.get("HEADER_1")).             assertEquals("VALUE_2", exchange.getIn().getHeader("HEADER_1")).         }     }).to("mock:result"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(uri).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Map<String, Object> headers = exchange.getIn().getHeaders().                     assertEquals("VALUE_1", headers.get("HEADER_1")).                     assertEquals("VALUE_1", exchange.getIn().getHeader("HEADER_1")).                 }             }).setHeader("HEADER_1", constant("VALUE_2")).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Map<String, Object> headers = exchange.getIn().getHeaders().                     assertEquals("VALUE_2", headers.get("HEADER_1")).                     assertEquals("VALUE_2", exchange.getIn().getHeader("HEADER_1")).                 }             }).to("mock:result").         }     }. }
