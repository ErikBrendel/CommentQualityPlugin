commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSynchronizeComplete() throws Exception {     getMockEndpoint("mock:sync").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBody("activemq:queue:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testSynchronizeFailure() throws Exception {     getMockEndpoint("mock:sync").expectedMessageCount(1).     getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     template.sendBody("activemq:queue:start", "Kabom").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("activemq:queue:start").onCompletion().to("log:sync").to("mock:sync").end().process(new MyProcessor()).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("activemq:queue:start").onCompletion().to("log:sync").to("mock:sync").end().process(new MyProcessor()).to("mock:result").         // END SNIPPET: e1         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     if ("Kabom".equals(exchange.getIn().getBody())) {         throw new IllegalArgumentException("Kabom").     }     exchange.getIn().setBody("Bye World"). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
