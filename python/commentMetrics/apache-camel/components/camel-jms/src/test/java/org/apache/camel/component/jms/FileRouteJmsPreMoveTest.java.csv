commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/inbox").     deleteDirectory("target/outbox").     super.setUp(). }
false;public;0;9;;@Test public void testPreMove() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedFileExists("target/outbox/hello.txt", "Hello World").     template.sendBodyAndHeader("file://target/inbox", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;public void configure() throws Exception {     from("file://target/inbox?preMove=transfer").to("activemq:queue:hello").     from("activemq:queue:hello").to("log:outbox").to("file://target/outbox").to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/inbox?preMove=transfer").to("activemq:queue:hello").             from("activemq:queue:hello").to("log:outbox").to("file://target/outbox").to("mock:result").         }     }. }
