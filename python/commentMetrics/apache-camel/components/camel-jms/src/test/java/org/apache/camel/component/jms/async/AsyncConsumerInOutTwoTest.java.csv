commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testAsyncJmsConsumer() throws Exception {     String out = template.requestBody("activemq:queue:start?replyTo=bar", "Hello World", String.class).     assertEquals("Bye World", out). }
false;protected;0;10;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.addComponent("async", new MyAsyncComponent()).     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;7;;@Override public void configure() throws Exception {     // enable async in only mode on the consumer     from("activemq:queue:start?asyncConsumer=true").to("async:camel?delay=2000").transform(constant("Bye World")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable async in only mode on the consumer             from("activemq:queue:start?asyncConsumer=true").to("async:camel?delay=2000").transform(constant("Bye World")).         }     }. }
