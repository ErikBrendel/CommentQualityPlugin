commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMutateMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isEqualTo("Hello World").     mock.message(0).header("HEADER_1").isNull().     template.sendBodyAndHeader(uri, "Hello World", "HEADER_1", "VALUE_1").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     // it should have been mutated     JmsMessage msg = assertIsInstanceOf(JmsMessage.class, exchange.getIn()).     assertNotNull("javax.jms.Message should not be null", msg.getJmsMessage()).     // get header should not mutate it     assertNull("Header should have been removed", exchange.getIn().getHeader("HEADER_1")). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     // do not mutate it     JmsMessage msg = assertIsInstanceOf(JmsMessage.class, exchange.getIn()).     assertNotNull("javax.jms.Message should not be null", msg.getJmsMessage()).     // get header should not mutate it     assertEquals("VALUE_1", exchange.getIn().getHeader("HEADER_1")). }
false;public;0;27;;@Override public void configure() throws Exception {     from(uri).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // do not mutate it             JmsMessage msg = assertIsInstanceOf(JmsMessage.class, exchange.getIn()).             assertNotNull("javax.jms.Message should not be null", msg.getJmsMessage()).             // get header should not mutate it             assertEquals("VALUE_1", exchange.getIn().getHeader("HEADER_1")).         }     }).removeHeader("HEADER_1").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // it should have been mutated             JmsMessage msg = assertIsInstanceOf(JmsMessage.class, exchange.getIn()).             assertNotNull("javax.jms.Message should not be null", msg.getJmsMessage()).             // get header should not mutate it             assertNull("Header should have been removed", exchange.getIn().getHeader("HEADER_1")).         }     }).to("mock:result"). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(uri).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // do not mutate it                     JmsMessage msg = assertIsInstanceOf(JmsMessage.class, exchange.getIn()).                     assertNotNull("javax.jms.Message should not be null", msg.getJmsMessage()).                     // get header should not mutate it                     assertEquals("VALUE_1", exchange.getIn().getHeader("HEADER_1")).                 }             }).removeHeader("HEADER_1").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // it should have been mutated                     JmsMessage msg = assertIsInstanceOf(JmsMessage.class, exchange.getIn()).                     assertNotNull("javax.jms.Message should not be null", msg.getJmsMessage()).                     // get header should not mutate it                     assertNull("Header should have been removed", exchange.getIn().getHeader("HEADER_1")).                 }             }).to("mock:result").         }     }. }
