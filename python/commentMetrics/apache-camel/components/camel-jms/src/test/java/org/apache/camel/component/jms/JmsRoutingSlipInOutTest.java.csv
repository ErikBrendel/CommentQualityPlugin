commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testInOutRoutingSlip() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Result-Done-B-A-Hello").     template.sendBody("activemq:queue:start", "Hello").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyBean()).     return jndi. }
false;public;0;19;;@Override public void configure() throws Exception {     from("activemq:queue:start").to("direct:start").to("bean:myBean?method=doResult").to("mock:result").     from("direct:start").to("bean:myBean?method=createSlip").setExchangePattern(ExchangePattern.InOut).routingSlip(header("mySlip")).to("bean:myBean?method=backFromSlip").     from("activemq:queue:a").to("bean:myBean?method=doA").     from("activemq:queue:b").to("bean:myBean?method=doB"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:start").to("direct:start").to("bean:myBean?method=doResult").to("mock:result").             from("direct:start").to("bean:myBean?method=createSlip").setExchangePattern(ExchangePattern.InOut).routingSlip(header("mySlip")).to("bean:myBean?method=backFromSlip").             from("activemq:queue:a").to("bean:myBean?method=doA").             from("activemq:queue:b").to("bean:myBean?method=doB").         }     }. }
false;public;1;3;;public void createSlip(@Headers Map<String, Object> headers) {     headers.put("mySlip", "activemq:queue:a,activemq:queue:b"). }
false;public;1;3;;public String backFromSlip(String body) {     return "Done-" + body. }
false;public;1;3;;public String doA(String body) {     return "A-" + body. }
false;public;1;3;;public String doB(String body) {     return "B-" + body. }
false;public;1;3;;public String doResult(String body) {     return "Result-" + body. }
