commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("foo", 123). }
false;public;0;16;;@Test public void testRequestReplyNoMutate() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.expectedBodiesReceived("Hello World").     result.expectedHeaderReceived("foo", 123).     template.send("activemq:queue:hello", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.getIn().setHeader("foo", 123).         }     }).     result.assertIsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:queue:hello").to("log:foo").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello").to("log:foo").to("mock:result").         }     }. }
