commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testAutoStartup() throws Exception {     Service service = context.getRoutes().get(0).getServices().get(0).     JmsConsumer consumer = (JmsConsumer) service.     assertEquals(false, consumer.getListenerContainer().isRunning()).     MockEndpoint mock = getMockEndpoint("mock:result").     // should be stopped by default     mock.expectedMessageCount(0).     template.sendBody("activemq:queue:foo", "Hello World").     Thread.sleep(2000).     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedBodiesReceived("Hello World").     // then start the listener so we can consume the persistent message     consumer.startListenerContainer().     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     endpoint = context.getEndpoint("activemq:queue:foo?autoStartup=false", JmsEndpoint.class).     from(endpoint).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             endpoint = context.getEndpoint("activemq:queue:foo?autoStartup=false", JmsEndpoint.class).             from(endpoint).to("mock:result").         }     }. }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // must use persistent so the message is not lost     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
