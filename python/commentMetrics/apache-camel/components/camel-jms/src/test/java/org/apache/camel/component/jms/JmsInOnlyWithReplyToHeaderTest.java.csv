commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("World").     exchange.getIn().setHeader("JMSReplyTo", "bar"). }
false;public;0;19;;@Test public void testJmsInOnlyWithReplyToHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("JMSReplyTo", "queue://bar").     template.send("activemq:queue:foo?preserveMessageQos=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("World").             exchange.getIn().setHeader("JMSReplyTo", "bar").         }     }).     assertMockEndpointsSatisfied().     // reply is in bar queue so lets consume it     String reply = consumer.receiveBody("activemq:queue:bar", 5000, String.class).     assertEquals("Hello World", reply). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transform(body().prepend("Hello ")).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transform(body().prepend("Hello ")).to("mock:result").         }     }. }
