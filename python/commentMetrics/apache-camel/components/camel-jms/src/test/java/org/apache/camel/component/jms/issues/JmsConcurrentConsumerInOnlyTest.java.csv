commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testConcurrentConsumers() throws Exception {     // send messages to queue before processing     for (int i = 0. i < size. i++) {         template.sendBody("activemq:foo", "Hello " + i).     }     // start route and process the messages     getMockEndpoint("mock:foo").expectedMessageCount(size).     context.getRouteController().startAllRoutes().     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPooledPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;public void configure() throws Exception {     from("activemq:foo?concurrentConsumers=2&maxConcurrentConsumers=5").routeId("foo").noAutoStartup().log("${threadName} got ${body}").delay(simple("${random(0,10)}")).to("mock:foo"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:foo?concurrentConsumers=2&maxConcurrentConsumers=5").routeId("foo").noAutoStartup().log("${threadName} got ${body}").delay(simple("${random(0,10)}")).to("mock:foo").         }     }. }
