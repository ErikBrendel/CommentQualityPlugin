commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@After public void tearDown() throws Exception {     super.tearDown().     setCamelContextService(null).     context = null.     template = null. }
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/jms/tx/JavaDSLTransactionTest.xml"). }
false;protected;0;11;;protected void assertResult() throws InterruptedException {     // should be 1 completed and 1 failed     NotifyBuilder notify = new NotifyBuilder(context).whenDone(2).create().     template.sendBody("activemq:queue:foo", "blah").     notify.matchesMockWaitTime().     assertTrue("Expected only 2 calls to process() (1 failure, 1 success) but encountered " + getConditionalExceptionProcessor().getCount() + ".", getConditionalExceptionProcessor().getCount() == 2). }
false;protected;0;5;;protected ConditionalExceptionProcessor getConditionalExceptionProcessor() {     Route route = context.getRoutes().get(0).     assertNotNull(route).     return getConditionalExceptionProcessor(route). }
true;protected;1;7;/**  * By default routes should be wrapped in the {@link DeadLetterChannel} so  * lets unwrap that and return the actual processor  */ ;/**  * By default routes should be wrapped in the {@link DeadLetterChannel} so  * lets unwrap that and return the actual processor  */ protected ConditionalExceptionProcessor getConditionalExceptionProcessor(Route route) {     // the following is very specific (and brittle) and is not generally     // useful outside these transaction tests (nor intended to be).     EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).     Processor processor = findProcessorByClass(consumerRoute.getProcessor(), ConditionalExceptionProcessor.class).     return assertIsInstanceOf(ConditionalExceptionProcessor.class, processor). }
false;protected;2;22;;protected Processor findProcessorByClass(Processor processor, Class<?> findClass) {     while (true) {         processor = unwrapDeadLetter(processor).         if (processor instanceof Channel) {             processor = ((Channel) processor).getNextProcessor().         } else if (processor instanceof DelegateProcessor) {             // TransactionInterceptor is a DelegateProcessor             processor = ((DelegateProcessor) processor).getProcessor().         } else if (processor instanceof Pipeline) {             for (Processor p : ((Pipeline) processor).getProcessors()) {                 p = findProcessorByClass(p, findClass).                 if (p != null && p.getClass().isAssignableFrom(findClass)) {                     processor = p.                     return processor.                 }             }         } else {             return processor.         }     } }
false;private;1;15;;private Processor unwrapDeadLetter(Processor processor) {     while (true) {         if (processor instanceof Channel) {             processor = ((Channel) processor).getNextProcessor().         } else if (processor instanceof DeadLetterChannel) {             processor = ((DeadLetterChannel) processor).getOutput().         } else if (processor instanceof DefaultErrorHandler) {             processor = ((DefaultErrorHandler) processor).getOutput().         } else if (processor instanceof TransactionErrorHandler) {             processor = ((TransactionErrorHandler) processor).getOutput().         } else {             return processor.         }     } }
