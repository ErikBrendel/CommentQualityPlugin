commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testJmsRequestReplySharedReplyTo() throws Exception {     StopWatch watch = new StopWatch().     // shared is more slower than exclusive, due it need to use a JMS Message Selector     // and has a receiveTimeout of 1 sec per default, so it react slower to new messages     assertEquals("Hello A", template.requestBody("activemq:queue:foo?replyTo=bar&replyToType=Shared", "A")).     assertEquals("Hello B", template.requestBody("activemq:queue:foo?replyTo=bar&replyToType=Shared", "B")).     assertEquals("Hello C", template.requestBody("activemq:queue:foo?replyTo=bar&replyToType=Shared", "C")).     assertEquals("Hello D", template.requestBody("activemq:queue:foo?replyTo=bar&replyToType=Shared", "D")).     assertEquals("Hello E", template.requestBody("activemq:queue:foo?replyTo=bar&replyToType=Shared", "E")).     long delta = watch.taken().     assertTrue("Should be slower than about 2 seconds, was: " + delta, delta > 2000). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;5;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transform(body().prepend("Hello ")). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transform(body().prepend("Hello ")).         }     }. }
