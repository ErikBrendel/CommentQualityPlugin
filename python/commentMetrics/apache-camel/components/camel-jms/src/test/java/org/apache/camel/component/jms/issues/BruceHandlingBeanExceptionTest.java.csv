commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testSendOK() throws Exception {     Object out = template.requestBody("activemq:queue:ok", "Hello World").     assertEquals("Bye World", out). }
false;public;0;5;;@Test public void testSendFailure() throws Exception {     Object out = template.requestBody("activemq:queue:fault", "Hello World").     assertEquals("This is a fault message", out). }
false;public;0;6;;@Test public void testSendError() throws Exception {     Object out = template.requestBody("activemq:queue:error", "Hello World").     IllegalArgumentException e = assertIsInstanceOf(IllegalArgumentException.class, out).     assertEquals("Forced exception by unit test", e.getMessage()). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;7;;public void configure() throws Exception {     from("activemq:queue:ok").transform(constant("Bye World")).     from("activemq:queue:fault").setFaultBody(constant("This is a fault message")).     from("activemq:queue:error?transferException=true").bean(MyExceptionBean.class). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:ok").transform(constant("Bye World")).             from("activemq:queue:fault").setFaultBody(constant("This is a fault message")).             from("activemq:queue:error?transferException=true").bean(MyExceptionBean.class).         }     }. }
false;public;1;3;;public String doSomething(String input) throws Exception {     throw new IllegalArgumentException("Forced exception by unit test"). }
