commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return true. }
false;public;0;5;;@Override public void configure() throws Exception {     // when advicing then use wildcard as URI options cannot be matched     mockEndpointsAndSkip(advicedPub + "?*"). }
false;public;0;18;;@Test public void testAdviceWith() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("starter"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // when advicing then use wildcard as URI options cannot be matched             mockEndpointsAndSkip(advicedPub + "?*").         }     }).     context.start().     MockEndpoint topicEndpointMock = getMockEndpoint("mock:" + advicedPub).     topicEndpointMock.expectedMessageCount(1).     template.sendBody("direct:start", Collections.singletonMap("foo", "bar")).     assertMockEndpointsSatisfied(). }
false;protected;0;7;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     JmsComponent activemq = JmsComponent.jmsComponent().     camelContext.addComponent("activemq", activemq).     return camelContext. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").routeId("starter").to(pub).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("starter").to(pub).to("mock:result").         }     }. }
