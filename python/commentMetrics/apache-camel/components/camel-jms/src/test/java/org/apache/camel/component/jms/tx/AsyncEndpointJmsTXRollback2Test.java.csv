commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/jms/tx/JmsTransacted-context.xml"). }
false;public;0;15;;@Test public void testAsyncEndpointRollback() throws Exception {     invoked = 0.     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel", "Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Hi Camel", "Hi Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     template.sendBody("activemq:queue:inbox", "Hello Camel").     assertMockEndpointsSatisfied().     // we are synchronous due to TX so the we are using same threads during the routing     assertTrue("Should use same threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName().     assertTrue("Exchange should be transacted", exchange.isTransacted()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName().     assertTrue("Exchange should be transacted", exchange.isTransacted()). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     invoked++.     if (invoked < 2) {         throw new IllegalArgumentException("Damn").     }     assertTrue("Exchange should be transacted", exchange.isTransacted()). }
false;public;0;41;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("activemq:queue:inbox").transacted().to("mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().             assertTrue("Exchange should be transacted", exchange.isTransacted()).         }     }).to("async:hi:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().             assertTrue("Exchange should be transacted", exchange.isTransacted()).         }     }).to("log:after").to("mock:after").to("direct:foo").to("mock:result").     from("direct:foo").transacted().to("async:bye:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             invoked++.             if (invoked < 2) {                 throw new IllegalArgumentException("Damn").             }             assertTrue("Exchange should be transacted", exchange.isTransacted()).         }     }). }
false;protected;0;46;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("activemq:queue:inbox").transacted().to("mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                     assertTrue("Exchange should be transacted", exchange.isTransacted()).                 }             }).to("async:hi:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                     assertTrue("Exchange should be transacted", exchange.isTransacted()).                 }             }).to("log:after").to("mock:after").to("direct:foo").to("mock:result").             from("direct:foo").transacted().to("async:bye:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     invoked++.                     if (invoked < 2) {                         throw new IllegalArgumentException("Damn").                     }                     assertTrue("Exchange should be transacted", exchange.isTransacted()).                 }             }).         }     }. }
