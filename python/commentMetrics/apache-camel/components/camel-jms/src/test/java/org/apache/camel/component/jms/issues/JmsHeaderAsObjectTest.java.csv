commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSendHeaderAsPrimitiveOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.message(0).header("foo").isEqualTo("bar").     mock.message(0).header("number").isEqualTo(23).     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "bar").     headers.put("number", 23).     template.sendBodyAndHeaders("activemq:in", "Hello World", headers).     mock.assertIsSatisfied(). }
false;public;0;19;;@Test public void testSendHeaderAsObject() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.message(0).header("foo").isEqualTo("bar").     mock.message(0).header("order").isNull().     DummyOrder order = new DummyOrder().     order.setItemId(4444).     order.setOrderId(333).     order.setQuantity(2).     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "bar").     headers.put("order", order).     template.sendBodyAndHeaders("activemq:in", "Hello World", headers).     mock.assertIsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;3;;public void configure() throws Exception {     from("activemq:in").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:in").to("mock:result").         }     }. }
