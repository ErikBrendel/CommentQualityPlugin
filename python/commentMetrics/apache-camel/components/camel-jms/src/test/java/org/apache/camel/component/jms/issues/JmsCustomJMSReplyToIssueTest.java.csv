commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testCustomJMSReplyTo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     // start a inOnly route     template.sendBody("direct:start", "Hello World").     // now consume using something that is not Camel     Thread.sleep(1000).     JmsTemplate jms = new JmsTemplate(amq.getConfiguration().getConnectionFactory()).     TextMessage msg = (TextMessage) jms.receive("in").     assertEquals("Hello World", msg.getText()).     // there should be a JMSReplyTo so we know where to send the reply     Destination replyTo = msg.getJMSReplyTo().     assertEquals("queue://myReplyQueue", replyTo.toString()).     // send reply     template.sendBody("activemq:" + replyTo.toString(), "Bye World").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     amq = camelContext.getComponent("activemq", JmsComponent.class).     return camelContext. }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Hello World").     // set the JMSReplyTo to force sending the reply here     exchange.getOut().setHeader("JMSReplyTo", "myReplyQueue"). }
false;public;0;12;;public void configure() throws Exception {     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Hello World").             // set the JMSReplyTo to force sending the reply here             exchange.getOut().setHeader("JMSReplyTo", "myReplyQueue").         }     }).to("activemq:queue:in?preserveMessageQos=true").     from("activemq:queue:myReplyQueue").to("mock:result"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Hello World").                     // set the JMSReplyTo to force sending the reply here                     exchange.getOut().setHeader("JMSReplyTo", "myReplyQueue").                 }             }).to("activemq:queue:in?preserveMessageQos=true").             from("activemq:queue:myReplyQueue").to("mock:result").         }     }. }
