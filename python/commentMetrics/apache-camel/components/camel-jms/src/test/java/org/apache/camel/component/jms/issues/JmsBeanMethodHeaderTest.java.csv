commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testPlainHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", "yes").     template.sendBodyAndHeader("direct:in", "Hello World", "foo", "yes").     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void testUnderscoreHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo_bar", "yes").     template.sendBodyAndHeader("direct:in", "Hello World", "foo_bar", "yes").     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void testUsingBeanNoJMS() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:approve").     mock.expectedBodiesReceived("Yes").     template.sendBodyAndHeader("direct:approve", ExchangePattern.InOut, "James", Exchange.BEAN_METHOD_NAME, "approveLoan").     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void testUsingBeanAndJMS() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:approve").     mock.expectedBodiesReceived("Yes").     template.sendBodyAndHeader("activemq:approve", ExchangePattern.InOut, "James", Exchange.BEAN_METHOD_NAME, "approveLoan").     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void testUsingJMStoJMStoBean() throws Exception {     // the big one from jms to jms to test that we do not lost the bean method name     MockEndpoint mock = getMockEndpoint("mock:approve").     mock.expectedBodiesReceived("No").     template.sendBodyAndHeader("activemq:queue", ExchangePattern.InOut, "James", Exchange.BEAN_METHOD_NAME, "approveSuperLoan").     mock.assertIsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     reg.bind("approveService", new ApproveService()).     return reg. }
false;public;0;10;;public void configure() throws Exception {     from("direct:in").to("activemq:test.a").     from("activemq:test.a").to("mock:result").     from("activemq:queue").to("activemq:approve").     from("activemq:approve").to("direct:approve").     from("direct:approve").to("bean:approveService").to("mock:approve"). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").to("activemq:test.a").             from("activemq:test.a").to("mock:result").             from("activemq:queue").to("activemq:approve").             from("activemq:approve").to("direct:approve").             from("direct:approve").to("bean:approveService").to("mock:approve").         }     }. }
false;public;1;3;;public void doSomeStuff(String input) { // just to confuse Camel with more public methods to choose among }
false;public;1;3;;public String approveLoan(@Body String body) {     return "Yes". }
false;public;1;3;;public String approveSuperLoan(@Body String body) {     return "No". }
