commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/TransactedAsyncUsingThreadsTest.xml"). }
false;public;0;6;;@Before public void init() {     counter = 0.     thread1 = "".     thread2 = "". }
false;public;0;14;;@Test public void testConsumeAsyncOK() throws Exception {     counter = 1.     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:async").expectedMessageCount(1).     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied().     // transacted causes Camel to force sync routing     assertEquals("Should use a same thread when doing transacted async routing", thread1, thread2). }
false;public;0;21;;@Test public void testConsumeAsyncFail() throws Exception {     counter = 0.     getMockEndpoint("mock:result").expectedMessageCount(1).     // we need a retry attempt so we get 2 messages     getMockEndpoint("mock:async").expectedMessageCount(2).     // the 1st message is the original message     getMockEndpoint("mock:async").message(0).header("JMSRedelivered").isEqualTo(false).     // the 2nd message is the redelivered by the JMS broker     getMockEndpoint("mock:async").message(1).header("JMSRedelivered").isEqualTo(true).     template.sendBody("activemq:queue:foo", "Bye World").     assertMockEndpointsSatisfied().     // transacted causes Camel to force sync routing     assertEquals("Should use a same thread when doing transacted async routing", thread1, thread2). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     thread2 = Thread.currentThread().getName().     if (counter++ == 0) {         // do redelivery         throw new IllegalAccessException("Damn").     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     thread1 = Thread.currentThread().getName(). }
false;public;0;27;;@Override public void configure() throws Exception {     from("activemq:queue:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             thread1 = Thread.currentThread().getName().         }     }).transacted().threads(5).to("mock:async").process(new Processor() {          public void process(Exchange exchange) throws Exception {             thread2 = Thread.currentThread().getName().             if (counter++ == 0) {                 // do redelivery                 throw new IllegalAccessException("Damn").             }         }     }).to("mock:result"). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     thread1 = Thread.currentThread().getName().                 }             }).transacted().threads(5).to("mock:async").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     thread2 = Thread.currentThread().getName().                     if (counter++ == 0) {                         // do redelivery                         throw new IllegalAccessException("Damn").                     }                 }             }).to("mock:result").         }     }. }
