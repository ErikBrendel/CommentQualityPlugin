commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;2;7;;@Consume(uri = "activemq:queue:foo") public void doSomething(@Header("JMSReplyTo") Destination jmsReplyTo, @Body String body) throws Exception {     assertEquals("Hello World", body).     String endpointName = "activemq:" + jmsReplyTo.toString().     template.sendBody(endpointName, "Bye World"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("JMSReplyTo", "bar"). }
false;public;0;15;;@Test public void testManualRequestReply() throws Exception {     context.start().     // send an InOnly but force Camel to pass JMSReplyTo     template.send("activemq:queue:foo?preserveMessageQos=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.getIn().setHeader("JMSReplyTo", "bar").         }     }).     String reply = consumer.receiveBody("activemq:queue:bar", 5000, String.class).     assertEquals("Bye World", reply). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
