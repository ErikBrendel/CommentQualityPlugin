commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testFileNameOverJMS() throws Exception {     String filename = "jmsfilenameheadertest.txt".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("direct:in", "Hello World", Exchange.FILE_NAME, filename).     mock.assertIsSatisfied().     File file = new File("target/" + filename).     assertTrue("The file should have been produced with filename: " + filename, file.exists()). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;public void configure() throws Exception {     from("direct:in").to("activemq:test.a").     from("activemq:test.a").to("direct:save").     from("direct:save").to("file://target?fileExist=Override", "mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").to("activemq:test.a").             from("activemq:test.a").to("direct:save").             from("direct:save").to("file://target?fileExist=Override", "mock:result").         }     }. }
