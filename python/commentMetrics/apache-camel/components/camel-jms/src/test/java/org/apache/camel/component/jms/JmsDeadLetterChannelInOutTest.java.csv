commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // use InOut     exchange.setPattern(ExchangePattern.InOut).     exchange.getIn().setBody("Hello World"). }
false;public;0;15;;@Test public void testJmsDLCInOut() throws Exception {     Exchange out = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             // use InOut             exchange.setPattern(ExchangePattern.InOut).             exchange.getIn().setBody("Hello World").         }     }).     assertNotNull(out).     // should be in DLQ     Object dead = consumer.receiveBody("activemq:queue:error", 5000).     assertEquals("Hello World", dead). }
false;protected;0;10;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // must be persistent so the consumer can receive the message as we receive AFTER the message     // has been published     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("activemq:queue:error")).     from("direct:start").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("activemq:queue:error")).             from("direct:start").throwException(new IllegalArgumentException("Damn")).         }     }. }
