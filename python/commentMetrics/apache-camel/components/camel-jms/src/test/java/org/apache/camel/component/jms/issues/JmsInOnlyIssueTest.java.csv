commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testInOnlyWithSendBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBody("activemq:queue:in", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testInOnlyWithAsyncSendBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     // need a little sleep to let task exectuor be ready     Thread.sleep(1000).     template.asyncSendBody("activemq:queue:in", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;14;;@Test public void testInOnlyWithSendExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     Exchange out = template.send("activemq:queue:in", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertMockEndpointsSatisfied().     assertFalse("Should not have OUT", out.hasOut()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOnly).     exchange.getIn().setBody("Hello World"). }
false;public;0;17;;@Test public void testInOnlyWithAsyncSendExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     // need a little sleep to let task exectuor be ready     Thread.sleep(1000).     template.asyncSend("activemq:queue:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOnly).             exchange.getIn().setBody("Hello World").         }     }).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Bye World"). }
false;public;0;7;;public void configure() throws Exception {     from("activemq:queue:in").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Bye World").         }     }).to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:in").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Bye World").                 }             }).to("mock:result").         }     }. }
