commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testReplyToDestinationSelectorName() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World", "Bye Camel").     Object body1 = template.requestBody("direct:start", "World").     Object body2 = template.requestBody("direct:start", "Camel").     assertMockEndpointsSatisfied().     assertEquals("Bye World", body1).     assertEquals("Bye Camel", body2). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent component = jmsComponentAutoAcknowledge(connectionFactory).     camelContext.addComponent("activemq", component).     return camelContext. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to("activemq:queue:foo?replyTo=queue:bar&replyToDestinationSelectorName=replyId").to("mock:result").     from("activemq:queue:foo").log("Using header named replyId with value as correlation - ${header.replyId}").transform(body().prepend("Bye ")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("activemq:queue:foo?replyTo=queue:bar&replyToDestinationSelectorName=replyId").to("mock:result").             from("activemq:queue:foo").log("Using header named replyId with value as correlation - ${header.replyId}").transform(body().prepend("Bye ")).         }     }. }
