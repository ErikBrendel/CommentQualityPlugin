commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testDurableTopic() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     MockEndpoint mock2 = getMockEndpoint("mock:result2").     mock2.expectedBodiesReceived("Hello World").     // wait a bit and send the message     Thread.sleep(1000).     template.sendBody("activemq:topic:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;@Override public void configure() throws Exception {     from("activemq:topic:foo?clientId=123&durableSubscriptionName=bar").to("mock:result").     from("activemq:topic:foo?clientId=456&durableSubscriptionName=bar").to("mock:result2"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:topic:foo?clientId=123&durableSubscriptionName=bar").to("mock:result").             from("activemq:topic:foo?clientId=456&durableSubscriptionName=bar").to("mock:result2").         }     }. }
