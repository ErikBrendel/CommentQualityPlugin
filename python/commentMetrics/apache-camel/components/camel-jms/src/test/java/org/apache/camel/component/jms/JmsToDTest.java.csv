commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testToD() throws Exception {     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello bar").     getMockEndpoint("mock:beer").expectedBodiesReceived("Hello beer").     template.sendBodyAndHeader("direct:start", "Hello bar", "where", "bar").     template.sendBodyAndHeader("direct:start", "Hello beer", "where", "beer").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;@Override public void configure() throws Exception {     // route message dynamic using toD     from("direct:start").toD("activemq:queue:${header.where}").     from("activemq:queue:bar").to("mock:bar").     from("activemq:queue:beer").to("mock:beer"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // route message dynamic using toD             from("direct:start").toD("activemq:queue:${header.where}").             from("activemq:queue:bar").to("mock:bar").             from("activemq:queue:beer").to("mock:beer").         }     }. }
