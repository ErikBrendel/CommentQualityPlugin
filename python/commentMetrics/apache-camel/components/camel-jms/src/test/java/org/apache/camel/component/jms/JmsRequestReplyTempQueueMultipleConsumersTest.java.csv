commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMultipleConsumingThreads() throws Exception {     executorService = context.getExecutorServiceManager().newFixedThreadPool(this, "test", 5).     doSendMessages(1000).     assertTrue("Expected multiple consuming threads, but only found: " + msgsPerThread.keySet().size(), msgsPerThread.keySet().size() > 1).     context.getExecutorServiceManager().shutdown(executorService). }
false;public;0;14;;@Test public void testTempQueueRefreshed() throws Exception {     executorService = context.getExecutorServiceManager().newFixedThreadPool(this, "test", 5).     doSendMessages(100).     connectionFactory.clear().     Thread.sleep(1000).     doSendMessages(100).     connectionFactory.clear().     Thread.sleep(1000).     doSendMessages(100).     context.getExecutorServiceManager().shutdown(executorService). }
false;public;0;4;;public Object call() throws Exception {     template.sendBody("direct:start", "Message " + index).     return null. }
false;private;1;18;;private void doSendMessages(int files) throws Exception {     resetMocks().     MockEndpoint mockEndpoint = getMockEndpoint("mock:result").     mockEndpoint.expectedMessageCount(files).     mockEndpoint.expectsNoDuplicates(body()).     for (int i = 0. i < files. i++) {         final int index = i.         executorService.submit(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBody("direct:start", "Message " + index).                 return null.             }         }).     }     assertMockEndpointsSatisfied(20, TimeUnit.SECONDS). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     connectionFactory = CamelJmsTestHelper.createPooledConnectionFactory().     camelContext.addComponent("jms", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;12;;@Override public void process(Exchange exchange) throws Exception {     String threadName = Thread.currentThread().getName().     synchronized (msgsPerThread) {         AtomicInteger count = msgsPerThread.get(threadName).         if (count == null) {             count = new AtomicInteger(0).             msgsPerThread.put(threadName, count).         }         count.incrementAndGet().     } }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:start").inOut("jms:queue:foo?replyToConcurrentConsumers=10&replyToMaxConcurrentConsumers=20&recoveryInterval=10").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String threadName = Thread.currentThread().getName().             synchronized (msgsPerThread) {                 AtomicInteger count = msgsPerThread.get(threadName).                 if (count == null) {                     count = new AtomicInteger(0).                     msgsPerThread.put(threadName, count).                 }                 count.incrementAndGet().             }         }     }).to("mock:result").     from("jms:queue:foo?concurrentConsumers=10&recoveryInterval=10").setBody(simple("Reply >>> ${body}")). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").inOut("jms:queue:foo?replyToConcurrentConsumers=10&replyToMaxConcurrentConsumers=20&recoveryInterval=10").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String threadName = Thread.currentThread().getName().                     synchronized (msgsPerThread) {                         AtomicInteger count = msgsPerThread.get(threadName).                         if (count == null) {                             count = new AtomicInteger(0).                             msgsPerThread.put(threadName, count).                         }                         count.incrementAndGet().                     }                 }             }).to("mock:result").             from("jms:queue:foo?concurrentConsumers=10&recoveryInterval=10").setBody(simple("Reply >>> ${body}")).         }     }. }
