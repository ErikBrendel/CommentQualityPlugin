commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;CamelContext buildContext(CamelContext context) throws Exception.
false;public;1;3;;public void process(Exchange e) { // do nothing }
false;public;0;9;;public void configure() throws Exception {     from(endpointUriA).setExchangePattern(ExchangePattern.InOnly).process(new Processor() {          public void process(Exchange e) {         // do nothing         }     }). }
false;public;1;4;;public void process(Exchange e) {     String request = e.getIn().getBody(String.class).     e.getOut().setBody(expectedReply + request.substring(request.indexOf('-'))). }
false;public;0;8;;public void configure() throws Exception {     from(endpointUriA).process(new Processor() {          public void process(Exchange e) {             String request = e.getIn().getBody(String.class).             e.getOut().setBody(expectedReply + request.substring(request.indexOf('-'))).         }     }). }
false;public;1;4;;public void process(Exchange e) {     String request = e.getIn().getBody(String.class).     e.getOut().setBody(expectedReply + request.substring(request.indexOf('-'))). }
false;public;0;9;;public void configure() throws Exception {     from(endpointUriA).to(endpointUriB).     from(endpointUriB).process(new Processor() {          public void process(Exchange e) {             String request = e.getIn().getBody(String.class).             e.getOut().setBody(expectedReply + request.substring(request.indexOf('-'))).         }     }). }
false;public;1;8;;public void process(Exchange e) {     Message in = e.getIn().     Message out = e.getOut().     String selectorValue = in.getHeader(REPLY_TO_DESTINATION_SELECTOR_NAME, String.class).     String request = in.getBody(String.class).     out.setHeader(REPLY_TO_DESTINATION_SELECTOR_NAME, selectorValue).     out.setBody(expectedReply + request.substring(request.indexOf('-'))). }
false;public;0;13;;public void configure() throws Exception {     from(endpointUriA).to(endpointReplyToUriB).     from(endpointUriB).process(new Processor() {          public void process(Exchange e) {             Message in = e.getIn().             Message out = e.getOut().             String selectorValue = in.getHeader(REPLY_TO_DESTINATION_SELECTOR_NAME, String.class).             String request = in.getBody(String.class).             out.setHeader(REPLY_TO_DESTINATION_SELECTOR_NAME, selectorValue).             out.setBody(expectedReply + request.substring(request.indexOf('-'))).         }     }). }
false;public;1;4;;public void process(Exchange e) {     String request = e.getIn().getBody(String.class).     e.getOut().setBody(expectedReply + request.substring(request.indexOf('-'))). }
false;public;0;9;;public void configure() throws Exception {     from(endpointUriA).to(endpointUriB1).     from(endpointUriB1).process(new Processor() {          public void process(Exchange e) {             String request = e.getIn().getBody(String.class).             e.getOut().setBody(expectedReply + request.substring(request.indexOf('-'))).         }     }). }
false;public;1;9;;public CamelContext buildContext(CamelContext context) throws Exception {     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jmsComponent = jmsComponentAutoAcknowledge(connectionFactory).     jmsComponent.setUseMessageIDAsCorrelationID(true).     jmsComponent.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName, jmsComponent).     return context. }
false;public;1;8;;public CamelContext buildContext(CamelContext context) throws Exception {     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.setUseMessageIDAsCorrelationID(false).     jms.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName, jms).     return context. }
false;public;1;9;;public CamelContext buildContext(CamelContext context) throws Exception {     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.getConfiguration().setReplyToDestinationSelectorName(REPLY_TO_DESTINATION_SELECTOR_NAME).     jms.setUseMessageIDAsCorrelationID(true).     jms.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName, jms).     return context. }
false;public;1;9;;public CamelContext buildContext(CamelContext context) throws Exception {     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.getConfiguration().setReplyToDestinationSelectorName(REPLY_TO_DESTINATION_SELECTOR_NAME).     jms.setUseMessageIDAsCorrelationID(false).     jms.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName, jms).     return context. }
false;public;1;12;;public CamelContext buildContext(CamelContext context) throws Exception {     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName, jms).     JmsComponent jms1 = jmsComponentAutoAcknowledge(connectionFactory).     jms1.setUseMessageIDAsCorrelationID(false).     jms1.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName1, jms1).     return context. }
false;public;1;13;;public CamelContext buildContext(CamelContext context) throws Exception {     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).     jms.setUseMessageIDAsCorrelationID(true).     jms.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName, jms).     JmsComponent jms1 = jmsComponentAutoAcknowledge(connectionFactory).     jms1.setUseMessageIDAsCorrelationID(true).     jms1.setConcurrentConsumers(maxServerTasks).     context.addComponent(componentName1, jms1).     return context. }
false;protected,static;0;121;;protected static void init() {     if (inited.compareAndSet(false, true)) {         ContextBuilder contextBuilderMessageID = new ContextBuilderMessageID().         ContextBuilder contextBuilderCorrelationID = new ContextBuilder() {              public CamelContext buildContext(CamelContext context) throws Exception {                 ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().                 JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).                 jms.setUseMessageIDAsCorrelationID(false).                 jms.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName, jms).                 return context.             }         }.         ContextBuilder contextBuilderMessageIDNamedReplyToSelector = new ContextBuilder() {              public CamelContext buildContext(CamelContext context) throws Exception {                 ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().                 JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).                 jms.getConfiguration().setReplyToDestinationSelectorName(REPLY_TO_DESTINATION_SELECTOR_NAME).                 jms.setUseMessageIDAsCorrelationID(true).                 jms.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName, jms).                 return context.             }         }.         ContextBuilder contextBuilderCorrelationIDNamedReplyToSelector = new ContextBuilder() {              public CamelContext buildContext(CamelContext context) throws Exception {                 ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().                 JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).                 jms.getConfiguration().setReplyToDestinationSelectorName(REPLY_TO_DESTINATION_SELECTOR_NAME).                 jms.setUseMessageIDAsCorrelationID(false).                 jms.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName, jms).                 return context.             }         }.         ContextBuilder contextBuilderCorrelationIDDiffComp = new ContextBuilder() {              public CamelContext buildContext(CamelContext context) throws Exception {                 ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().                 JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).                 jms.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName, jms).                 JmsComponent jms1 = jmsComponentAutoAcknowledge(connectionFactory).                 jms1.setUseMessageIDAsCorrelationID(false).                 jms1.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName1, jms1).                 return context.             }         }.         ContextBuilder contextBuilderMessageIDDiffComp = new ContextBuilder() {              public CamelContext buildContext(CamelContext context) throws Exception {                 ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().                 JmsComponent jms = jmsComponentAutoAcknowledge(connectionFactory).                 jms.setUseMessageIDAsCorrelationID(true).                 jms.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName, jms).                 JmsComponent jms1 = jmsComponentAutoAcknowledge(connectionFactory).                 jms1.setUseMessageIDAsCorrelationID(true).                 jms1.setConcurrentConsumers(maxServerTasks).                 context.addComponent(componentName1, jms1).                 return context.             }         }.         contextBuilders.put("testUseMessageIDAsCorrelationID", contextBuilderMessageID).         contextBuilders.put("testUseCorrelationID", contextBuilderCorrelationID).         contextBuilders.put("testUseMessageIDAsCorrelationIDMultiNode", contextBuilderMessageID).         contextBuilders.put("testUseCorrelationIDMultiNode", contextBuilderCorrelationID).         contextBuilders.put("testUseMessageIDAsCorrelationIDPersistReplyToMultiNode", contextBuilderMessageID).         contextBuilders.put("testUseCorrelationIDPersistReplyToMultiNode", contextBuilderCorrelationID).         contextBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToMultiNode", contextBuilderMessageID).         // contextBuilders.put("testUseCorrelationIDPersistMultiReplyToMultiNode", contextBuilderCorrelationID).         contextBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode", contextBuilderMessageIDNamedReplyToSelector).         contextBuilders.put("testUseCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode", contextBuilderCorrelationIDNamedReplyToSelector).         contextBuilders.put("testUseCorrelationIDMultiNodeDiffComponents", contextBuilderCorrelationIDDiffComp).         contextBuilders.put("testUseMessageIDAsCorrelationIDMultiNodeDiffComponents", contextBuilderMessageIDDiffComp).         contextBuilders.put("testUseMessageIDAsCorrelationIDTimeout", contextBuilderMessageID).         contextBuilders.put("testUseCorrelationIDTimeout", contextBuilderMessageID).         routeBuilders.put("testUseMessageIDAsCorrelationID", new SingleNodeRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDReplyToTempDestinationPerComponent", new SingleNodeRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDReplyToTempDestinationPerProducer", new SingleNodeRouteBuilder()).         routeBuilders.put("testUseCorrelationID", new SingleNodeRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDMultiNode", new MultiNodeRouteBuilder()).         routeBuilders.put("testUseCorrelationIDMultiNode", new MultiNodeRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDPersistReplyToMultiNode", new MultiNodeRouteBuilder()).         routeBuilders.put("testUseCorrelationIDPersistReplyToMultiNode", new MultiNodeRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToMultiNode", new MultiNodeReplyToRouteBuilder()).         // routeBuilders.put("testUseCorrelationIDPersistMultiReplyToMultiNode", new MultiNodeReplyToRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode", new MultiNodeReplyToRouteBuilder()).         routeBuilders.put("testUseCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode", new MultiNodeReplyToRouteBuilder()).         routeBuilders.put("testUseCorrelationIDMultiNodeDiffComponents", new MultiNodeDiffCompRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDMultiNodeDiffComponents", new MultiNodeDiffCompRouteBuilder()).         routeBuilders.put("testUseMessageIDAsCorrelationIDTimeout", new SingleNodeDeadEndRouteBuilder()).         routeBuilders.put("testUseCorrelationIDTimeout", new SingleNodeDeadEndRouteBuilder()).     } }
false;public;0;17;;public Task call() throws Exception {     for (int i = 0. i < maxCalls. i++) {         int callId = counter.incrementAndGet().         Object reply = "".         try {             reply = template.requestBody(fromUri, request + "-" + callId).         } catch (RuntimeCamelException e) {         // expected in some cases         }         if (!reply.equals(expectedReply + "-" + callId)) {             ok = false.             message = "Unexpected reply. Expected: '" + expectedReply + "-" + callId + "'. Received: '" + reply + "'".         }     }     return this. }
false;public;0;3;;public void assertSuccess() {     assertTrue(message, ok). }
false;public;0;5;;@Before public void setUp() throws Exception {     init().     super.setUp(). }
false;public;0;4;;@Test public void testUseMessageIDAsCorrelationID() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;4;;@Test public void testUseCorrelationID() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;4;;@Test public void testUseMessageIDAsCorrelationIDMultiNode() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;4;;@Test public void testUseCorrelationIDMultiNode() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;4;;@Test public void testUseMessageIDAsCorrelationIDPersistReplyToMultiNode() throws Exception {     runRequestReplyThreaded(endpointReplyToUriA). }
false;public;0;4;;@Test public void testUseCorrelationIDPersistReplyToMultiNode() throws Exception {     runRequestReplyThreaded(endpointUriA). }
true;public;0;18;// destination, which in turn will copy this value back into the reply message ;// (1) // note this is an inefficient way of correlating replies to a persistent queue // a consumer will have to be created for each reply message // see testUseMessageIDAsCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode // or testCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode // for a faster way to do this. Note however that in this case the message copy has to occur // between consumer -> producer as the selector value needs to be propagated to the ultimate // destination, which in turn will copy this value back into the reply message @Test public void testUseMessageIDAsCorrelationIDPersistMultiReplyToMultiNode() throws Exception {     int oldMaxTasks = maxTasks.     int oldMaxServerTasks = maxServerTasks.     int oldMaxCalls = maxCalls.     maxTasks = 10.     maxServerTasks = 1.     maxCalls = 2.     try {         runRequestReplyThreaded(endpointUriA).     } finally {         maxTasks = oldMaxTasks.         maxServerTasks = oldMaxServerTasks.         maxCalls = oldMaxCalls.     } }
true;public;0;19;// see (1) ;// see (1) @Test @Ignore public void testUseCorrelationIDPersistMultiReplyToMultiNode() throws Exception {     int oldMaxTasks = maxTasks.     int oldMaxServerTasks = maxServerTasks.     int oldMaxCalls = maxCalls.     maxTasks = 10.     maxServerTasks = 1.     maxCalls = 2.     try {         runRequestReplyThreaded(endpointUriA).     } finally {         maxTasks = oldMaxTasks.         maxServerTasks = oldMaxServerTasks.         maxCalls = oldMaxCalls.     } }
false;public;0;4;;@Test public void testUseMessageIDAsCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;4;;@Test public void testUseCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;14;;@Test public void testUseCorrelationIDTimeout() throws Exception {     JmsComponent c = (JmsComponent) context.getComponent(componentName).     c.getConfiguration().setRequestTimeout(1000).     Object reply = "".     try {         reply = template.requestBody(endpointUriA, request).         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause()).     }     assertEquals("", reply). }
false;public;0;14;;@Test public void testUseMessageIDAsCorrelationIDTimeout() throws Exception {     JmsComponent c = (JmsComponent) context.getComponent(componentName).     c.getConfiguration().setRequestTimeout(1000).     Object reply = "".     try {         reply = template.requestBody(endpointUriA, request).         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause()).     }     assertEquals("", reply). }
false;public;0;4;;@Test public void testUseCorrelationIDMultiNodeDiffComponents() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;public;0;4;;@Test public void testUseMessageIDAsCorrelationIDMultiNodeDiffComponents() throws Exception {     runRequestReplyThreaded(endpointUriA). }
false;protected;1;22;;protected void runRequestReplyThreaded(String fromUri) throws Exception {     // start template     template.start().     ExecutorService executor = context.getExecutorServiceManager().newFixedThreadPool(this, "Task", maxTasks).     CompletionService<Task> completionService = new ExecutorCompletionService<>(executor).     final AtomicInteger counter = new AtomicInteger(-1).     for (int i = 0. i < maxTasks. i++) {         Task task = new Task(counter, fromUri).         completionService.submit(task).     }     for (int i = 0. i < maxTasks. i++) {         Future<Task> future = completionService.take().         Task task = future.get(60, TimeUnit.SECONDS).         assertNotNull("Should complete the task", task).         task.assertSuccess().     }     context.getExecutorServiceManager().shutdownNow(executor). }
false;protected;0;4;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     return contextBuilders.get(getTestMethodName()).buildContext(camelContext). }
false;protected;0;3;;protected RouteBuilder createRouteBuilder() throws Exception {     return routeBuilders.get(getTestMethodName()). }
