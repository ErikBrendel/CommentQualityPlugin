commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;2;12;;@Consume(uri = "activemq:queue:foo") public void doSomething(@Header("JMSReplyTo") Destination jmsReplyTo, @Body String body) throws Exception {     assertEquals("Hello World", body).     String endpointName = "activemq:" + jmsReplyTo.toString().     endpointName = endpointName.replaceAll("//", ":").     tempName = endpointName.     latch.countDown().     template.sendBody(tempName, "Bye World"). }
false;public;1;5;;public Message createMessage(Session session) throws JMSException {     TextMessage msg = session.createTextMessage("Hello World").     msg.setJMSReplyTo(new ActiveMQQueue("bar")).     return msg. }
false;public;0;17;;@Test public void testManualRequestReply() throws Exception {     context.start().     // send using pure JMS API to set a custom JMSReplyTo     jms.send(new ActiveMQQueue("foo"), new MessageCreator() {          public Message createMessage(Session session) throws JMSException {             TextMessage msg = session.createTextMessage("Hello World").             msg.setJMSReplyTo(new ActiveMQQueue("bar")).             return msg.         }     }).     assertTrue(latch.await(5, TimeUnit.SECONDS)).     String reply = consumer.receiveBody(tempName, 5000, String.class).     assertEquals("Bye World", reply). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     jms = new JmsTemplate(connectionFactory).     return camelContext. }
