commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("foo", 123). }
false;public;0;19;;@Test public void testRequetReply() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     Exchange out = template.send("activemq:queue:hello", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.getIn().setHeader("foo", 123).         }     }).     result.assertIsSatisfied().     assertNotNull(out).     assertEquals("Bye World", out.getOut().getBody(String.class)).     assertEquals(123, out.getOut().getHeader("foo")). }
false;public;0;10;;@Test public void testRequetReply2Messages() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(2).     template.requestBody("activemq:queue:hello", "Hello World").     template.requestBody("activemq:queue:hello", "Gooday World").     result.assertIsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Bye World").     assertNotNull(exchange.getIn().getHeader("JMSReplyTo")). }
false;public;0;8;;public void configure() throws Exception {     from("activemq:queue:hello").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Bye World").             assertNotNull(exchange.getIn().getHeader("JMSReplyTo")).         }     }).to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Bye World").                     assertNotNull(exchange.getIn().getHeader("JMSReplyTo")).                 }             }).to("mock:result").         }     }. }
