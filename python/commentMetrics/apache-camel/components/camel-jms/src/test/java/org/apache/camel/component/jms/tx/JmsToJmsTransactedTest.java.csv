commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/JmsToJmsTransactedTest.xml"). }
false;public;0;6;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transacted().to("activemq:queue:bar"). }
false;public;0;17;;@Test public void testJmsToJmsTestOK() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transacted().to("activemq:queue:bar").         }     }).     context.start().     template.sendBody("activemq:queue:foo", "Hello World").     String reply = consumer.receiveBody("activemq:queue:bar", 5000, String.class).     assertEquals("Hello World", reply). }
false;public;0;10;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").throwException(new IllegalArgumentException("Damn")).     from("activemq:queue:bar").to("log:bar").to("mock:bar"). }
false;public;0;26;;@Test public void testJmsToJmsTestRollbackDueToException() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").throwException(new IllegalArgumentException("Damn")).             from("activemq:queue:bar").to("log:bar").to("mock:bar").         }     }).     context.start().     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(0).     MockEndpoint start = getMockEndpoint("mock:start").     // default number of redeliveries by AMQ is 6 so we get 6+1     start.expectedMessageCount(7).     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").rollback().     from("activemq:queue:bar").to("log:bar").to("mock:bar"). }
false;public;0;30;;@Test public void testJmsToJmsTestRollbackDueToRollback() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").rollback().             from("activemq:queue:bar").to("log:bar").to("mock:bar").         }     }).     context.start().     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(0).     MockEndpoint start = getMockEndpoint("mock:start").     // default number of redeliveries by AMQ is 6 so we get 6+1     start.expectedMessageCount(7).     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied().     // it should be moved to DLQ in JMS broker     Object body = consumer.receiveBody("activemq:queue:ActiveMQ.DLQ", 2000).     assertEquals("Hello World", body). }
false;public;0;10;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").markRollbackOnly().     from("activemq:queue:bar").to("log:bar").to("mock:bar"). }
false;public;0;26;;@Test public void testJmsToJmsTestRollbackDueToMarkRollbackOnly() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transacted().to("mock:start").to("activemq:queue:bar").markRollbackOnly().             from("activemq:queue:bar").to("log:bar").to("mock:bar").         }     }).     context.start().     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(0).     MockEndpoint start = getMockEndpoint("mock:start").     // default number of redeliveries by AMQ is 6 so we get 6+1     start.expectedMessageCount(7).     template.sendBody("activemq:queue:foo", "Hello World").     assertMockEndpointsSatisfied(). }
