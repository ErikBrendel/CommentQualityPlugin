commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testTwoConsumerOnSameTopic() throws Exception {     sendAMessageToOneTopicWithTwoSubscribers(). }
false;public;0;15;;@Test public void testMultipleMessagesOnSameTopic() throws Exception {     // give a bit of time for AMQ to properly setup topic subscribers     Thread.sleep(500).     getMockEndpoint("mock:a").expectedBodiesReceived("Hello Camel 1", "Hello Camel 2", "Hello Camel 3", "Hello Camel 4").     getMockEndpoint("mock:b").expectedBodiesReceived("Hello Camel 1", "Hello Camel 2", "Hello Camel 3", "Hello Camel 4").     template.sendBody("activemq:topic:foo", "Hello Camel 1").     template.sendBody("activemq:topic:foo", "Hello Camel 2").     template.sendBody("activemq:topic:foo", "Hello Camel 3").     template.sendBody("activemq:topic:foo", "Hello Camel 4").     assertMockEndpointsSatisfied(). }
false;public;0;25;;@Test public void testStopAndStartOneRoute() throws Exception {     sendAMessageToOneTopicWithTwoSubscribers().     // now stop route A     context.getRouteController().stopRoute("a").     // send new message should go to B only     resetMocks().     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedBodiesReceived("Bye World").     template.sendBody("activemq:topic:foo", "Bye World").     assertMockEndpointsSatisfied().     // send new message should go to both A and B     resetMocks().     // now start route A     context.getRouteController().startRoute("a").     sendAMessageToOneTopicWithTwoSubscribers(). }
false;public;0;18;;@Test public void testRemoveOneRoute() throws Exception {     sendAMessageToOneTopicWithTwoSubscribers().     // now stop and remove route A     context.getRouteController().stopRoute("a").     assertTrue(context.removeRoute("a")).     // send new message should go to B only     resetMocks().     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedBodiesReceived("Bye World").     template.sendBody("activemq:topic:foo", "Bye World").     assertMockEndpointsSatisfied(). }
false;private;0;11;;private void sendAMessageToOneTopicWithTwoSubscribers() throws Exception {     // give a bit of time for AMQ to properly setup topic subscribers     Thread.sleep(500).     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("Hello World").     template.sendBody("activemq:topic:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     // must be persistent to remember the messages     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;8;;@Override public void configure() throws Exception {     from("activemq:topic:foo").routeId("a").to("log:a", "mock:a").     from("activemq:topic:foo").routeId("b").to("log:b", "mock:b"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:topic:foo").routeId("a").to("log:a", "mock:a").             from("activemq:topic:foo").routeId("b").to("log:b", "mock:b").         }     }. }
