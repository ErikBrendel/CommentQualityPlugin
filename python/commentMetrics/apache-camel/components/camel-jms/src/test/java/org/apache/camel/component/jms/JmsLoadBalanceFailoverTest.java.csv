commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testFailover() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:start").loadBalance().failover().to("jms:queue:foo?transferException=true").to("jms:queue:bar?transferException=true").end().to("mock:result").     from("jms:queue:foo?transferException=true").to("mock:foo").throwException(new IllegalArgumentException("Damn")).     from("jms:queue:bar?transferException=true").to("mock:bar").transform().simple("Bye World"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").loadBalance().failover().to("jms:queue:foo?transferException=true").to("jms:queue:bar?transferException=true").end().to("mock:result").             from("jms:queue:foo?transferException=true").to("mock:foo").throwException(new IllegalArgumentException("Damn")).             from("jms:queue:bar?transferException=true").to("mock:bar").transform().simple("Bye World").         }     }. }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("jms", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
