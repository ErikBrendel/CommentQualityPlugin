commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/component/jms/tx/JMXTXUseOriginalBodyWithTXErrorHandlerTest.xml"). }
false;public;0;11;;@Test public void testWithConstant() throws InterruptedException {     endpoint.expectedMessageCount(0).     error.expectedBodiesReceived("foo").     checkpoint1.expectedBodiesReceived("foo").     checkpoint2.expectedBodiesReceived("oh no").     start.sendBody("foo").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testWithBean() throws InterruptedException {     endpoint.expectedMessageCount(0).     error.expectedBodiesReceived("foo").     checkpoint1.expectedBodiesReceived("foo").     checkpoint2.expectedBodiesReceived("oh no").     broken.sendBody("foo").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Handler public String process(@Body String body) {     return "oh no". }
false;public;0;27;;@Override public void configure() throws Exception {     errorHandler(transactionErrorHandler()).     onException(Exception.class).handled(true).useOriginalMessage().maximumRedeliveries(2).to("mock:error").     from("activemq:broken").transacted().to("mock:checkpoint1").setBody(method("foo")).to("mock:checkpoint2").throwException(new Exception("boo")).to("mock:end").     from("activemq:start").transacted().to("mock:checkpoint1").setBody(constant("oh no")).to("mock:checkpoint2").throwException(new Exception("boo")).to("mock:end"). }
