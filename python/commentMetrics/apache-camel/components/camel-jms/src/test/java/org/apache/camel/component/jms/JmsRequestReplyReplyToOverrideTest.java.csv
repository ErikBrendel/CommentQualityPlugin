commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(REQUEST_BODY). }
false;public;0;16;;@Test public void testJmsRequestReplyReplyToAndReplyToHeader() throws Exception {     // must start CamelContext because use route builder is false     context.start().     // send request to foo, set replyTo to bar, but actually expect reply at baz     Thread sender = new Thread(new Responder()).     sender.start().     Exchange reply = template.request("jms:queue:foo", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(REQUEST_BODY).         }     }).     assertEquals(EXPECTED_REPLY_BODY, reply.getOut().getBody()). }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jmsComponent = jmsComponentAutoAcknowledge(connectionFactory).     jmsComponent.getConfiguration().setReplyTo("baz").     jmsComponent.getConfiguration().setReplyToOverride("bar").     camelContext.addComponent("jms", jmsComponent).     return camelContext. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     in.setBody("Re: " + body).     in.setHeader(JmsConstants.JMS_DESTINATION_NAME, "baz").     in.setHeader("JMSCorrelationID", cid). }
false;public;0;26;;public void run() {     try {         LOG.debug("Waiting for request").         Exchange request = consumer.receive("jms:queue:foo", 5000).         LOG.debug("Got request, sending reply").         final String body = request.getIn().getBody(String.class).         final String cid = request.getIn().getHeader("JMSCorrelationID", String.class).         final Destination replyTo = request.getIn().getHeader("JMSReplyTo", Destination.class).         assertEquals(EXPECTED_REPLY_HEADER, replyTo.toString()).         // send reply         template.send("jms:dummy", ExchangePattern.InOnly, new Processor() {              public void process(Exchange exchange) throws Exception {                 Message in = exchange.getIn().                 in.setBody("Re: " + body).                 in.setHeader(JmsConstants.JMS_DESTINATION_NAME, "baz").                 in.setHeader("JMSCorrelationID", cid).             }         }).     } catch (Exception e) {     // ignore     } }
