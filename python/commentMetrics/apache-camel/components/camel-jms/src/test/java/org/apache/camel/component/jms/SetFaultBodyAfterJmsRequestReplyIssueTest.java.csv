commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;14;;@Test public void testFault() throws Exception {     Exchange out = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertNotNull(out).     assertEquals(true, out.isFailed()).     assertEquals(true, out.hasOut()).     assertEquals(true, out.getOut().isFault()).     assertEquals("OnException", out.getOut().getBody()). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("OnException").     exchange.getOut().setFault(true). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Bye World"). }
false;public;0;22;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("OnException").             exchange.getOut().setFault(true).         }     }).     from("direct:start").inOut("activemq:queue:foo").throwException(new IllegalArgumentException("Forced")).     from("activemq:queue:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Bye World").         }     }). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("OnException").                     exchange.getOut().setFault(true).                 }             }).             from("direct:start").inOut("activemq:queue:foo").throwException(new IllegalArgumentException("Forced")).             from("activemq:queue:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Bye World").                 }             }).         }     }. }
