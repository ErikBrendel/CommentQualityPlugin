commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testRemoveHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // should not receive the foo header     mock.expectedHeaderReceived("foo", null).     // but only the bar header     mock.expectedHeaderReceived("bar", 123).     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "cheese").     headers.put("bar", 123).     template.sendBodyAndHeaders("activemq:queue:foo", "Hello World", headers).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;6;;@Override public void configure() throws Exception {     from("activemq:queue:foo").removeHeader("foo").to("activemq:queue:bar").     from("activemq:queue:bar").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").removeHeader("foo").to("activemq:queue:bar").             from("activemq:queue:bar").to("mock:result").         }     }. }
