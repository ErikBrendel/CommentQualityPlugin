commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testInvalidDestination() throws Exception {     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBodyAndHeader("direct:foo", "Hello World", "foo", "activemq:queue:foo?destinationResolver=#myResolver").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myResolver", new MyDestinationResolver()).     return jndi. }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;7;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(1)).     from("direct:foo").recipientList(header("foo")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(1)).             from("direct:foo").recipientList(header("foo")).         }     }. }
false;public;3;4;;@Override public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException {     throw new DestinationResolutionException("Forced"). }
