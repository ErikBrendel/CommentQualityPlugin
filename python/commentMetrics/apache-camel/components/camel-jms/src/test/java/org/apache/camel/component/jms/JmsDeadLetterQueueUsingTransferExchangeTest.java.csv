commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUri() {     return "activemq:queue:dead?transferExchange=true". }
false;public;0;9;;@Test public void testOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testKabom() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:dead").     mock.expectedBodiesReceived("Kabom").     template.sendBody("direct:start", "Kabom").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kabom".equals(body)) {         throw new IllegalArgumentException("Kabom").     } }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel(getUri()).disableRedelivery()).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Kabom".equals(body)) {                 throw new IllegalArgumentException("Kabom").             }         }     }).to("mock:result").     from(getUri()).to("mock:dead"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel(getUri()).disableRedelivery()).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Kabom".equals(body)) {                         throw new IllegalArgumentException("Kabom").                     }                 }             }).to("mock:result").             from(getUri()).to("mock:dead").         }     }. }
