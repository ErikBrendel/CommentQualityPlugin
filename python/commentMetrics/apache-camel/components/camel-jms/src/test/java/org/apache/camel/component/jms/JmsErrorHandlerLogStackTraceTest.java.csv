commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testErrorHandlerLogStackTrace() throws Exception {     JmsComponent jms = context.getComponent("jms", JmsComponent.class).     assertFalse(jms.getConfiguration().isErrorHandlerLogStackTrace()).     // should fail     NotifyBuilder notify = new NotifyBuilder(context).whenFailed(1).create().     template.sendBody("jms:queue:foo", "Hello World").     assertTrue(notify.matchesMockWaitTime()). }
false;public;0;8;;@Override public void configure() throws Exception {     // dont log any exhausted errors     errorHandler(defaultErrorHandler().logExhausted(false)).     from("jms:queue:foo").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // dont log any exhausted errors             errorHandler(defaultErrorHandler().logExhausted(false)).             from("jms:queue:foo").throwException(new IllegalArgumentException("Forced")).         }     }. }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent jms = JmsComponent.jmsComponentAutoAcknowledge(connectionFactory).     jms.setErrorHandlerLogStackTrace(false).     jms.setErrorHandlerLoggingLevel(LoggingLevel.ERROR).     camelContext.addComponent("jms", jms).     return camelContext. }
