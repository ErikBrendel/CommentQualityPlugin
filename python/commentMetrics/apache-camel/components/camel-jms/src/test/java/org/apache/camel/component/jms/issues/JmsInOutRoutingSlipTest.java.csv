commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testJmsInOutRoutingSlip() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:end").expectedBodiesReceived("Bye World").     template.sendBodyAndHeader("activemq:queue:start", "World", "slip", "activemq:queue:foo,activemq:queue:result").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;17;;@Override public void configure() throws Exception {     from("activemq:queue:start").setExchangePattern(ExchangePattern.InOut).routingSlip(header("slip")).to("log:end").to("mock:end").     from("activemq:queue:foo").to("mock:foo").to("log:foo").transform(body().prepend("Bye ")).     from("activemq:queue:result").to("log:result").to("mock:result"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:start").setExchangePattern(ExchangePattern.InOut).routingSlip(header("slip")).to("log:end").to("mock:end").             from("activemq:queue:foo").to("mock:foo").to("log:foo").transform(body().prepend("Bye ")).             from("activemq:queue:result").to("log:result").to("mock:result").         }     }. }
