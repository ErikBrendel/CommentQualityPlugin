commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testWildcard() throws Exception {     getMockEndpoint("mock:chelsea").expectedBodiesReceived("B").     getMockEndpoint("mock:1st").expectedBodiesReceived("D").     getMockEndpoint("mock:other").expectedBodiesReceivedInAnyOrder("A", "C").     template.sendBody("activemq:queue:sport.pl.manu", "A").     template.sendBody("activemq:queue:sport.pl.chelsea", "B").     template.sendBody("activemq:queue:sport.pl.arsenal", "C").     template.sendBody("activemq:queue:sport.1st.leeds", "D").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;15;;public void configure() throws Exception {     // use wildcard to consume from all sports     from("activemq:queue:sport.>").to("log:received?showHeaders=true").choice().when(header("JMSDestination").isEqualTo("queue://sport.pl.chelsea")).to("mock:chelsea").when(header("JMSDestination").regex("queue://sport.1st.*")).to("mock:1st").otherwise().to("mock:other").end(). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // use wildcard to consume from all sports             from("activemq:queue:sport.>").to("log:received?showHeaders=true").choice().when(header("JMSDestination").isEqualTo("queue://sport.pl.chelsea")).to("mock:chelsea").when(header("JMSDestination").regex("queue://sport.1st.*")).to("mock:1st").otherwise().to("mock:other").end().         }     }. }
