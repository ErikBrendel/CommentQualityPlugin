commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testJmsMessageWithSelector() throws Exception {     MockEndpoint endpointA = getMockEndpoint("mock:a").     MockEndpoint endpointB = getMockEndpoint("mock:b").     MockEndpoint endpointC = getMockEndpoint("mock:c").     endpointA.expectedBodiesReceivedInAnyOrder("A blue car!", "A blue car, again!").     endpointA.expectedHeaderReceived("color", "blue").     endpointB.expectedHeaderReceived("color", "red").     endpointB.expectedBodiesReceived("A red car!").     endpointC.expectedBodiesReceived("Message1", "Message2").     endpointC.expectedMessageCount(2).     template.sendBodyAndHeader("activemq:queue:hello", "A blue car!", "color", "blue").     template.sendBodyAndHeader("activemq:queue:hello", "A red car!", "color", "red").     template.sendBodyAndHeader("activemq:queue:hello", "A blue car, again!", "color", "blue").     template.sendBodyAndHeader("activemq:queue:hello", "Message1", "SIZE_NUMBER", 1505).     template.sendBodyAndHeader("activemq:queue:hello", "Message3", "SIZE_NUMBER", 1300).     template.sendBodyAndHeader("activemq:queue:hello", "Message2", "SIZE_NUMBER", 1600).     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Test public void testConsumerTemplate() throws Exception {     template.sendBodyAndHeader("activemq:queue:consumer", "Message1", "SIZE_NUMBER", 1505).     template.sendBodyAndHeader("activemq:queue:consumer", "Message3", "SIZE_NUMBER", 1300).     template.sendBodyAndHeader("activemq:queue:consumer", "Message2", "SIZE_NUMBER", 1600).     // the loop     while (true) {         Exchange ex = consumer.receiveNoWait("activemq:queue:consumer?selector=SIZE_NUMBER<1500").         if (ex != null) {             Message message = ex.getIn().             int size = message.getHeader("SIZE_NUMBER", int.class).             assertTrue("The message header SIZE_NUMBER should be less than 1500", size < 1500).             assertEquals("The message body is wrong", "Message3", message.getBody()).         } else {             break.         }     } }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     from("activemq:queue:hello?selector=color='blue'").to("mock:a").     from("activemq:queue:hello?selector=color='red'").to("mock:b").     from("activemq:queue:hello?selector=SIZE_NUMBER>1500").to("mock:c"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:hello?selector=color='blue'").to("mock:a").             from("activemq:queue:hello?selector=color='red'").to("mock:b").             from("activemq:queue:hello?selector=SIZE_NUMBER>1500").to("mock:c").         }     }. }
