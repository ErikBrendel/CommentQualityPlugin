commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("World"). }
false;public;0;12;;@Test public void testJmsRequestReplyTempReplyTo() throws Exception {     Exchange reply = template.request("activemq:queue:foo", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("World").         }     }).     assertEquals("Hello World", reply.getOut().getBody()).     assertTrue("Should have headers", reply.getOut().hasHeaders()).     String replyTo = reply.getOut().getHeader("JMSReplyTo", String.class).     assertTrue("Should be a temp queue", replyTo.startsWith("temp-queue")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("World"). }
false;public;0;11;;@Test public void testJmsRequestReplyFixedReplyToInEndpoint() throws Exception {     Exchange reply = template.request("activemq:queue:foo?replyTo=bar", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("World").         }     }).     assertEquals("Hello World", reply.getOut().getBody()).     assertTrue("Should have headers", reply.getOut().hasHeaders()).     assertEquals("queue://bar", reply.getOut().getHeader("JMSReplyTo", String.class)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("World"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Moon"). }
false;public;0;20;;@Test public void testJmsRequestReplyFixedReplyToInEndpointTwoMessages() throws Exception {     Exchange reply = template.request("activemq:queue:foo?replyTo=bar", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("World").         }     }).     assertEquals("Hello World", reply.getOut().getBody()).     assertTrue("Should have headers", reply.getOut().hasHeaders()).     assertEquals("queue://bar", reply.getOut().getHeader("JMSReplyTo", String.class)).     reply = template.request("activemq:queue:foo?replyTo=bar", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Moon").         }     }).     assertEquals("Hello Moon", reply.getOut().getBody()).     assertTrue("Should have headers", reply.getOut().hasHeaders()).     assertEquals("queue://bar", reply.getOut().getHeader("JMSReplyTo", String.class)). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;5;;@Override public void configure() throws Exception {     from("activemq:queue:foo").transform(body().prepend("Hello ")). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").transform(body().prepend("Hello ")).         }     }. }
