commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testInOut() throws Exception {     Endpoint endpoint = context.getEndpoint("activemq:queue:foo").     Producer producer = endpoint.createProducer().     producer.start().     Exchange exchange = endpoint.createExchange(ExchangePattern.InOut).     exchange.getIn().setBody("Hello World").     producer.process(exchange).     producer.stop().     assertTrue("Bye World".equals(exchange.getOut().getBody())). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Bye World"). }
false;public;0;9;;@Override public void configure() throws Exception {     from("activemq:queue:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Bye World").         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Bye World").                 }             }).         }     }. }
