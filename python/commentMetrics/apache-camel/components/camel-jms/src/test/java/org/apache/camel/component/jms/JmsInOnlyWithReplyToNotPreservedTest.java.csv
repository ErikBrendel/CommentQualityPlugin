commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSendInOnlyWithReplyTo() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("World").     getMockEndpoint("mock:done").expectedBodiesReceived("World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied().     // there should be no messages on the bar queue     Object msg = consumer.receiveBody("activemq:queue:bar", 1000).     assertNull("Should be no message on bar queue", msg). }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to("activemq:queue:foo?replyTo=queue:bar").to("mock:done").     from("activemq:queue:foo").to("log:foo?showAll=true", "mock:foo").transform(body().prepend("Bye ")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("activemq:queue:foo?replyTo=queue:bar").to("mock:done").             from("activemq:queue:foo").to("log:foo?showAll=true", "mock:foo").transform(body().prepend("Bye ")).         }     }. }
