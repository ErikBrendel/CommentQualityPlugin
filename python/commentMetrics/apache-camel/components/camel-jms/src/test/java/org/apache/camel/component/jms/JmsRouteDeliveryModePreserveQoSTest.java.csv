commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSendDefault() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Hello World").     template.sendBody("activemq:queue:foo?preserveMessageQos=true", "Hello World").     assertMockEndpointsSatisfied().     // should be persistent by default     Map<String, Object> map = mock.getReceivedExchanges().get(0).getIn().getHeaders().     assertNotNull(map).     assertEquals(DeliveryMode.PERSISTENT, map.get("JMSDeliveryMode")). }
false;public;0;14;;@Test public void testSendNonPersistent() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true", "Hello World", "JMSDeliveryMode", DeliveryMode.NON_PERSISTENT).     assertMockEndpointsSatisfied().     // should preserve non persistent     Map<String, Object> map = mock.getReceivedExchanges().get(0).getIn().getHeaders().     assertNotNull(map).     assertEquals(DeliveryMode.NON_PERSISTENT, map.get("JMSDeliveryMode")). }
false;public;0;14;;@Test public void testSendNonPersistentAsString() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true", "Hello World", "JMSDeliveryMode", "NON_PERSISTENT").     assertMockEndpointsSatisfied().     // should preserve non persistent     Map<String, Object> map = mock.getReceivedExchanges().get(0).getIn().getHeaders().     assertNotNull(map).     assertEquals(DeliveryMode.NON_PERSISTENT, map.get("JMSDeliveryMode")). }
false;public;0;14;;@Test public void testSendPersistent() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true", "Hello World", "JMSDeliveryMode", DeliveryMode.PERSISTENT).     assertMockEndpointsSatisfied().     // should preserve persistent     Map<String, Object> map = mock.getReceivedExchanges().get(0).getIn().getHeaders().     assertNotNull(map).     assertEquals(DeliveryMode.PERSISTENT, map.get("JMSDeliveryMode")). }
false;public;0;14;;@Test public void testSendPersistentAsString() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("activemq:queue:foo?preserveMessageQos=true", "Hello World", "JMSDeliveryMode", "PERSISTENT").     assertMockEndpointsSatisfied().     // should preserve persistent     Map<String, Object> map = mock.getReceivedExchanges().get(0).getIn().getHeaders().     assertNotNull(map).     assertEquals(DeliveryMode.PERSISTENT, map.get("JMSDeliveryMode")). }
false;public;0;18;;@Test public void testNonJmsDeliveryMode() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Beer is good...").     // since we're using activemq, we really cannot set a delivery mode to something other     // than 1 or 2 (NON-PERSISTENT or PERSISTENT, respectively). but this test does try to     // set the delivery mode to '3'... so ActiveMQ will just test to see whether it's persistent     // by testing deliverMode == 2 ... but it won't be... so it will evaluate to NON-PERSISTENT..     // so our test asserts the deliveryMode was changed to 1 (NON-PERSISTENT), as 2 (PERSISTENT) is the default.     // we would need an in memory broker that does allow non-jms delivery modes to really     // test this right....     mock.message(0).header("JMSDeliveryMode").isEqualTo(1).     template.sendBody("direct:nonJmsDeliveryMode", "Beer is good...").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testNonJmsDeliveryModeDisableExplicityQos() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Beer is good...").     // in this test, we're using explicitQosEnabled=false so we will not rely on our     // settings, we will rely on whatever is created in the Message creator, which     // should default to default message QoS, namely, PERSISTENT deliveryMode     mock.message(0).header("JMSDeliveryMode").isEqualTo(2).     template.sendBody("direct:noExplicitNonJmsDeliveryMode", "Beer is good...").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testNonJmsDeliveryModePreserveQos() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedBodiesReceived("Beer is good...").     // in this test, we can only pass if we are "preserving" existing deliveryMode.     // this means camel expects to have an existing QoS set as a header, or it will pick     // from the JMS message created by the message creator     // otherwise, "preserveMessageQos==true" does not allow us to explicity set the deliveryMode     // on the message     mock.message(0).header("JMSDeliveryMode").isEqualTo(1).     template.sendBodyAndHeader("direct:preserveQosNonJmsDeliveryMode", "Beer is good...", JmsConstants.JMS_DELIVERY_MODE, 3).     assertMockEndpointsSatisfied(). }
false;protected;0;9;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;12;;@Override public void configure() throws Exception {     from("activemq:queue:foo").to("activemq:queue:bar?preserveMessageQos=true").     from("activemq:queue:bar").to("mock:bar").     from("direct:nonJmsDeliveryMode").to("activemq:queue:bar?deliveryMode=3").     from("direct:noExplicitNonJmsDeliveryMode").to("activemq:queue:bar?deliveryMode=3&explicitQosEnabled=false").     from("direct:preserveQosNonJmsDeliveryMode").to("activemq:queue:bar?preserveMessageQos=true"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").to("activemq:queue:bar?preserveMessageQos=true").             from("activemq:queue:bar").to("mock:bar").             from("direct:nonJmsDeliveryMode").to("activemq:queue:bar?deliveryMode=3").             from("direct:noExplicitNonJmsDeliveryMode").to("activemq:queue:bar?deliveryMode=3&explicitQosEnabled=false").             from("direct:preserveQosNonJmsDeliveryMode").to("activemq:queue:bar?preserveMessageQos=true").         }     }. }
