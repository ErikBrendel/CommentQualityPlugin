commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testReplyToIssue() throws Exception {     String out = template.requestBody("activemq:queue:test.queue", "World", String.class).     // we should receive that fixed reply     assertEquals("Hello Moon", out). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello Moon").     // remember to set correlation id     exchange.getIn().setHeader("JMSCorrelationID", id).     // this is the real destination we send the reply to     exchange.getIn().setHeader(JmsConstants.JMS_DESTINATION, jmsReplyTo). }
false;public;4;27;;public String handleMessage(@Header("JMSReplyTo") final Destination jmsReplyTo, @Header("JMSCorrelationID") final String id, @Body String body, Exchange exchange) throws Exception {     assertNotNull(jmsReplyTo).     assertTrue("Should be a temp queue", jmsReplyTo.toString().startsWith("temp-queue")).     // we send the reply manually (notice we just use a bogus endpoint uri)     ProducerTemplate producer = exchange.getContext().createProducerTemplate().     producer.send("activemq:queue:xxx", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello Moon").             // remember to set correlation id             exchange.getIn().setHeader("JMSCorrelationID", id).             // this is the real destination we send the reply to             exchange.getIn().setHeader(JmsConstants.JMS_DESTINATION, jmsReplyTo).         }     }).     // stop it after use     producer.stop().     // sleep a bit so Camel will send the reply a bit later     Thread.sleep(1000).     // and exceptions will be logged etc     return "Hello " + body. }
false;protected;0;6;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;@Override public void configure() throws Exception {     from("activemq:queue:test.queue").bean(TempReplyToIssueTest.class, "handleMessage"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:test.queue").bean(TempReplyToIssueTest.class, "handleMessage").         }     }. }
