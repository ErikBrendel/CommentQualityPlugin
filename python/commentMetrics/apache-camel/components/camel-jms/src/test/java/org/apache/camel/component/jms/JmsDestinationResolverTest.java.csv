commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendAndReceiveMessage() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     result.message(0).header("cheese").isEqualTo(123).     template.sendBodyAndHeader("direct:start", "Hello World", "cheese", 123).     assertMockEndpointsSatisfied(). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     JmsComponent jms = camelContext.getComponent(componentName, JmsComponent.class).     jms.setDestinationResolver(new MyDestinationResolver()).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").to("activemq:queue:logicalNameForTestBQueue").     from("activemq:queue:test.b").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").to("activemq:queue:logicalNameForTestBQueue").             from("activemq:queue:test.b").to("mock:result").         }     }. }
