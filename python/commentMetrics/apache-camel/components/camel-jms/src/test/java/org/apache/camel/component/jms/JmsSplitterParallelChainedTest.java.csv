commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUri() {     return "activemq:queue:foo". }
false;protected;0;3;;protected String getUri2() {     return "activemq:queue:bar". }
false;public;0;11;;@Test public void testSplitParallel() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E").     getMockEndpoint("mock:reply").expectedBodiesReceivedInAnyOrder("Hi A", "Hi B", "Hi C", "Hi D", "Hi E").     getMockEndpoint("mock:reply2").expectedBodiesReceivedInAnyOrder("Bye Hi A", "Bye Hi B", "Bye Hi C", "Bye Hi D", "Bye Hi E").     getMockEndpoint("mock:split").expectedBodiesReceivedInAnyOrder("Bye Hi A", "Bye Hi B", "Bye Hi C", "Bye Hi D", "Bye Hi E").     template.sendBody("direct:start", "A,B,C,D,E").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;20;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).parallelProcessing().to("log:before").to(ExchangePattern.InOut, getUri()).to("log:after").to("mock:split").end().to("mock:result").     from(getUri()).transform(body().prepend("Hi ")).to("mock:reply").to(ExchangePattern.InOut, getUri2()).     from(getUri2()).transform(body().prepend("Bye ")).to("mock:reply2"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).parallelProcessing().to("log:before").to(ExchangePattern.InOut, getUri()).to("log:after").to("mock:split").end().to("mock:result").             from(getUri()).transform(body().prepend("Hi ")).to("mock:reply").to(ExchangePattern.InOut, getUri2()).             from(getUri2()).transform(body().prepend("Bye ")).to("mock:reply2").         }     }. }
