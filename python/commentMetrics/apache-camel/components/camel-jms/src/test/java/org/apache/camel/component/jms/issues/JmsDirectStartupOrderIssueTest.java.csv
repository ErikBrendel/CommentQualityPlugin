commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testJmsDirectStartupOrderIssue() throws Exception {     // send messages to queue so there is messages on the queue before we start the route     template.sendBody("activemq:queue:foo", "Hello World").     template.sendBody("activemq:queue:foo", "Hello Camel").     template.sendBody("activemq:queue:foo", "Bye World").     template.sendBody("activemq:queue:foo", "Bye Camel").     context.getRouteController().startRoute("amq").     getMockEndpoint("mock:result").expectedMessageCount(4).     assertMockEndpointsSatisfied().     DefaultCamelContext dcc = (DefaultCamelContext) context.     List<RouteStartupOrder> order = dcc.getRouteStartupOrder().     assertEquals(2, order.size()).     assertEquals(1, order.get(0).getStartupOrder()).     assertEquals("direct", order.get(0).getRoute().getId()).     assertEquals(100, order.get(1).getStartupOrder()).     assertEquals("amq", order.get(1).getRoute().getId()). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;7;;public void configure() throws Exception {     from("activemq:queue:foo").routeId("amq").startupOrder(100).autoStartup(false).to("direct:foo").     from("direct:foo").routeId("direct").startupOrder(1).to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("activemq:queue:foo").routeId("amq").startupOrder(100).autoStartup(false).to("direct:foo").             from("direct:foo").routeId("direct").startupOrder(1).to("mock:result").         }     }. }
