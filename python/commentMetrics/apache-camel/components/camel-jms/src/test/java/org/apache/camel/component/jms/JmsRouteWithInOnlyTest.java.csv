commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSendOrder() throws Exception {     MockEndpoint inbox = getMockEndpoint("mock:inbox").     inbox.expectedBodiesReceived("Camel in Action").     MockEndpoint order = getMockEndpoint("mock:topic").     order.expectedBodiesReceived("Camel in Action").     Object out = template.requestBody("activemq:queue:inbox", "Camel in Action").     assertEquals("OK: Camel in Action", out).     assertMockEndpointsSatisfied().     // assert MEP     assertEquals(ExchangePattern.InOut, inbox.getReceivedExchanges().get(0).getPattern()).     assertEquals(ExchangePattern.InOnly, order.getReceivedExchanges().get(0).getPattern()). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("orderService", new MyOrderServiceBean()).     return jndi. }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;10;;@Override public void configure() throws Exception {     from("activemq:queue:inbox").to("mock:inbox").inOnly("activemq:topic:order").bean("orderService", "handleOrder").     from("activemq:topic:order").to("mock:topic"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:inbox").to("mock:inbox").inOnly("activemq:topic:order").bean("orderService", "handleOrder").             from("activemq:topic:order").to("mock:topic").         }     }. }
false;public;1;3;;public String handleOrder(String body) {     return "OK: " + body. }
