commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testTrue() throws Exception {     getMockEndpoint("mock:true").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBodyAndHeader("activemq:queue:in", "<hello>World</hello>", "foo", "true").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testFalse() throws Exception {     getMockEndpoint("mock:true").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(1).     template.sendBodyAndHeader("activemq:queue:in", "<hello>World</hello>", "foo", "false").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testNoHeader() throws Exception {     getMockEndpoint("mock:true").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(1).     template.sendBody("activemq:queue:in", "<hello>World</hello>").     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent("activemq", jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;13;;@Override public void configure() throws Exception {     from("activemq:queue:in").choice().when().xpath("$foo = 'true'").to("activemq:queue:true").otherwise().to("activemq:queue:other").end().     from("activemq:queue:true").to("mock:true").     from("activemq:queue:other").to("mock:other"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:in").choice().when().xpath("$foo = 'true'").to("activemq:queue:true").otherwise().to("activemq:queue:other").end().             from("activemq:queue:true").to("mock:true").             from("activemq:queue:other").to("mock:other").         }     }. }
