commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testByteJMSHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header("data").isEqualTo((byte) 40).     template.sendBodyAndHeader("activemq:queue:foo", "Hello World", "data", (byte) 40).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testCharJMSHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header("data").isEqualTo('A').     template.sendBodyAndHeader("activemq:queue:foo", "Hello World", "data", 'A').     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testCharSequenceJMSHeaders() throws Exception {     CharSequence cs = new StringBuilder("Bye World").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header("data").isEqualTo(cs).     template.sendBodyAndHeader("activemq:queue:foo", "Hello World", "data", cs).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     camelContext.addComponent(componentName, jmsComponentAutoAcknowledge(connectionFactory)).     return camelContext. }
false;public;0;4;;@Override public void configure() throws Exception {     from("activemq:queue:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("activemq:queue:foo").to("mock:result").         }     }. }
