commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public String toString() {     // do not print jmsMessage as there could be sensitive details     if (jmsMessage != null) {         try {             return "JmsMessage[JmsMessageID: " + jmsMessage.getJMSMessageID() + "]".         } catch (Throwable e) {         // ignore         }     }     return "JmsMessage@" + ObjectHelper.getIdentityHashCode(this). }
false;public;1;43;;@Override public void copyFrom(org.apache.camel.Message that) {     if (that == this) {         // the same instance so do not need to copy         return.     }     // must initialize headers before we set the JmsMessage to avoid Camel     // populating it before we do the copy     getHeaders().clear().     boolean copyMessageId = true.     if (that instanceof JmsMessage) {         JmsMessage thatMessage = (JmsMessage) that.         this.jmsMessage = thatMessage.jmsMessage.         if (this.jmsMessage != null) {             // for performance lets not copy the messageID if we are a JMS message             copyMessageId = false.         }     }     if (copyMessageId) {         setMessageId(that.getMessageId()).     }     // cover over exchange if none has been assigned     if (getExchange() == null) {         setExchange(that.getExchange()).     }     // copy body and fault flag     setBody(that.getBody()).     setFault(that.isFault()).     // we have already cleared the headers     if (that.hasHeaders()) {         getHeaders().putAll(that.getHeaders()).     }     getAttachments().clear().     if (that.hasAttachments()) {         getAttachmentObjects().putAll(that.getAttachmentObjects()).     } }
false;public;0;6;;public JmsBinding getBinding() {     if (binding == null) {         binding = ExchangeHelper.getBinding(getExchange(), JmsBinding.class).     }     return binding. }
false;public;1;3;;public void setBinding(JmsBinding binding) {     this.binding = binding. }
true;public;0;3;/**  * Returns the underlying JMS message  */ ;/**  * Returns the underlying JMS message  */ public Message getJmsMessage() {     return jmsMessage. }
false;public;1;10;;public void setJmsMessage(Message jmsMessage) {     if (jmsMessage != null) {         try {             setMessageId(jmsMessage.getJMSMessageID()).         } catch (JMSException e) {             LOG.warn("Unable to retrieve JMSMessageID from JMS Message", e).         }     }     this.jmsMessage = jmsMessage. }
true;public;0;3;/**  * Returns the underlying JMS session.  * <p/>  * This may be <tt>null</tt> if using {@link org.apache.camel.component.jms.JmsPollingConsumer},  * or the broker component from Apache ActiveMQ 5.11.x or older.  */ ;/**  * Returns the underlying JMS session.  * <p/>  * This may be <tt>null</tt> if using {@link org.apache.camel.component.jms.JmsPollingConsumer},  * or the broker component from Apache ActiveMQ 5.11.x or older.  */ public Session getJmsSession() {     return jmsSession. }
false;public;1;3;;public void setJmsSession(Session jmsSession) {     this.jmsSession = jmsSession. }
false;public;1;10;;@Override public void setBody(Object body) {     super.setBody(body).     if (body == null) {         // preserver headers even if we set body to null         ensureInitialHeaders().         // remove underlying jmsMessage since we mutated body to null         jmsMessage = null.     } }
false;public;1;4;;public Object getHeader(String name) {     ensureInitialHeaders().     return super.getHeader(name). }
false;public;0;5;;@Override public Map<String, Object> getHeaders() {     ensureInitialHeaders().     return super.getHeaders(). }
false;public;1;5;;@Override public Object removeHeader(String name) {     ensureInitialHeaders().     return super.removeHeader(name). }
false;public;1;5;;@Override public void setHeaders(Map<String, Object> headers) {     ensureInitialHeaders().     super.setHeaders(headers). }
false;public;2;5;;@Override public void setHeader(String name, Object value) {     ensureInitialHeaders().     super.setHeader(name, value). }
false;public;0;6;;@Override public JmsMessage newInstance() {     JmsMessage answer = new JmsMessage(null, null, null, binding).     answer.setCamelContext(getCamelContext()).     return answer. }
true;public;0;3;/**  * Returns true if a new JMS message instance should be created to send to the next component  */ ;/**  * Returns true if a new JMS message instance should be created to send to the next component  */ public boolean shouldCreateNewMessage() {     return super.hasPopulatedHeaders(). }
true;protected;0;7;/**  * Ensure that the headers have been populated from the underlying JMS message  * before we start mutating the headers  */ ;/**  * Ensure that the headers have been populated from the underlying JMS message  * before we start mutating the headers  */ protected void ensureInitialHeaders() {     if (jmsMessage != null && !hasPopulatedHeaders()) {         // we have not populated headers so force this by creating         // new headers and set it on super         super.setHeaders(createHeaders()).     } }
false;protected;0;7;;@Override protected Object createBody() {     if (jmsMessage != null) {         return getBinding().extractBodyFromJms(getExchange(), jmsMessage).     }     return null. }
false;protected;1;6;;@Override protected void populateInitialHeaders(Map<String, Object> map) {     if (jmsMessage != null && map != null) {         map.putAll(getBinding().extractHeadersFromJms(jmsMessage, getExchange())).     } }
false;protected;0;18;;@Override protected String createMessageId() {     if (jmsMessage == null) {         LOG.trace("No javax.jms.Message set so generating a new message id").         return super.createMessageId().     }     try {         String id = getDestinationAsString(jmsMessage.getJMSDestination()).         if (id != null) {             id += jmsMessage.getJMSMessageID().         } else {             id = jmsMessage.getJMSMessageID().         }         return getSanitizedString(id).     } catch (JMSException e) {         throw new RuntimeExchangeException("Unable to retrieve JMSMessageID from JMS Message", getExchange(), e).     } }
false;protected;0;8;;@Override protected Boolean isTransactedRedelivered() {     if (jmsMessage != null) {         return JmsMessageHelper.getJMSRedelivered(jmsMessage).     } else {         return null.     } }
false;private;1;11;;private String getDestinationAsString(Destination destination) throws JMSException {     String result = null.     if (destination == null) {         result = "null destination!" + File.separator.     } else if (destination instanceof Topic) {         result = "topic" + File.separator + ((Topic) destination).getTopicName() + File.separator.     } else if (destination instanceof Queue) {         result = "queue" + File.separator + ((Queue) destination).getQueueName() + File.separator.     }     return result. }
false;private;1;3;;private String getSanitizedString(Object value) {     return value != null ? value.toString().replaceAll("[^a-zA-Z0-9\\.\\_\\-]", "_") : "". }
