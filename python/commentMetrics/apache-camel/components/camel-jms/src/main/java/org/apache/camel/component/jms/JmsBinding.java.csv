# id;timestamp;commentText;codeText;commentWords;codeWords
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1206431352;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class,_                                                                          headerValue))__                } else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                } else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            } else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1206896103;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class,_                                                                          headerValue))__                } else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                } else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            } else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1208448482;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class,_                                                                          headerValue))__                } else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                } else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            } else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1208695725;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class,_                                                                                headerValue))__                } else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class,_                                                                          headerValue))__                } else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                } else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            } else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1209747244;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1209803508;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1213894639;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1215024238;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1215518767;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1215675979;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1217320452;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1217557565;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1218902614;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1220902719;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1221363215;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1222574662;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1226004128;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1226049018;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1226598575;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1226676678;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1230199048;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1233150749;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1237211133;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1237558827;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)         throws JMSException;1237571271;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in)_        throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1215024238;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName  the header name_@return  the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1215518767;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1215675979;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1217320452;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1217557565;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1218902614;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1220902719;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1221363215;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1222574662;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1226004128;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1226049018;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1226598575;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1226676678;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1230199048;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1233150749;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String decodeFromSafeJmsHeaderName(String headerName);1237211133;Decode operation for the {@link #encodeToSafeJmsHeaderName(String)}.__@param headerName the header name_@return the original key;public static String decodeFromSafeJmsHeaderName(String headerName) {_        return headerName.replace("_", ".")__    };decode,operation,for,the,link,encode,to,safe,jms,header,name,string,param,header,name,the,header,name,return,the,original,key;public,static,string,decode,from,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1237813243;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1237887389;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message body")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,body,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1237893393;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message body")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,body,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238035325;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message body")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,body,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238072329;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message body")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,body,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238139051;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message body")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,body,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238146091;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message body")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,body,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238393196;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238579695;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238592896;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1238640484;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1243603964;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1245833882;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1246075591;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1246258916;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1246452394;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1248673682;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1248756182;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1249372471;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1251913575;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1254565823;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occured that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occured,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1256124746;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1257331468;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1270464315;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1272249344;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1274451535;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1278406828;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1278611554;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1278611588;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1280755980;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1284906401;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1293266959;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1296546062;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1297377495;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1297971515;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1298619517;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1299873149;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || endpoint.getConfiguration().isForceSendOriginalMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,endpoint,get,configuration,is,force,send,original,message,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1299924003;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1301257798;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Will create JmsMessage with caused exception: " + cause)__                }_                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,if,log,is,debug,enabled,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1307685726;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1307988251;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1308588240;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1314622821;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()__            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1318675893;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1326499990;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1328095661;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1341734527;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1348333832;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1375013152;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1376549254;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1379495956;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1389726752;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1405374721;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1430916975;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1436441288;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1448285987;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1483962135;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1504338769;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1504339316;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1508614180;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == JmsMessageType.Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,jms,message,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1508614180;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1508614181;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1512598738;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1520110721;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1524001544;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1537290824;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1539673113;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1540108161;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1540108163;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                org.apache.camel.util.ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,org,apache,camel,util,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1547836603;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                org.apache.camel.util.ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,org,apache,camel,util,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1548057494;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                org.apache.camel.util.ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,org,apache,camel,util,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1548332772;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                org.apache.camel.util.ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,org,apache,camel,util,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException;1548774602;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param camelMessage the body to make a javax.jms.Message as_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {_        Message answer = null___        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage()__        boolean force = endpoint != null && endpoint.getConfiguration().isForceSendOriginalMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage() || force) {_                answer = jmsMessage.getJmsMessage()___                if (!force) {_                    _                    JmsMessageType type = endpoint != null ? endpoint.getConfiguration().getJmsMessageType() : null__                    if (type != null && answer != null) {_                        if (type == JmsMessageType.Text) {_                            answer = answer instanceof TextMessage ? answer : null__                        } else if (type == JmsMessageType.Bytes) {_                            answer = answer instanceof BytesMessage ? answer : null__                        } else if (type == JmsMessageType.Map) {_                            answer = answer instanceof MapMessage ? answer : null__                        } else if (type == JmsMessageType.Object) {_                            answer = answer instanceof ObjectMessage ? answer : null__                        } else if (type == Stream) {_                            answer = answer instanceof StreamMessage ? answer : null__                        }_                    }_                }_            }_        }__        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                org.apache.camel.util.ObjectHelper.notNull(camelMessage, "message")__                _                answer = createJmsMessage(exchange, camelMessage, session, exchange.getContext())__                appendJmsProperties(answer, exchange, camelMessage)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,camel,message,the,body,to,make,a,javax,jms,message,as,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,exception,cause,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,boolean,force,endpoint,null,endpoint,get,configuration,is,force,send,original,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,force,answer,jms,message,get,jms,message,if,force,jms,message,type,type,endpoint,null,endpoint,get,configuration,get,jms,message,type,null,if,type,null,answer,null,if,type,jms,message,type,text,answer,answer,instanceof,text,message,answer,null,else,if,type,jms,message,type,bytes,answer,answer,instanceof,bytes,message,answer,null,else,if,type,jms,message,type,map,answer,answer,instanceof,map,message,answer,null,else,if,type,jms,message,type,object,answer,answer,instanceof,object,message,answer,null,else,if,type,stream,answer,answer,instanceof,stream,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,org,apache,camel,util,object,helper,not,null,camel,message,message,answer,create,jms,message,exchange,camel,message,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1280755980;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1284906401;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1293266959;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1296546062;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1297377495;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1297971515;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1298619517;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1299873149;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1299924003;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1301257798;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1307685726;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1307988251;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1308588240;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1314622821;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1318675893;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1326499990;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1328095661;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__            message.setText(payload)__            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__            message.writeBytes(payload)__            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__            populateMapMessage(message, payload, context)__            return message__        }_        case Object:_            Serializable payload__            try {_                payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__            } catch (NoTypeConversionAvailableException e) {_                _                JMSException cause = new MessageFormatException(e.getMessage())__                cause.initCause(e)__                throw cause__            }_            return session.createObjectMessage(payload)__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,serializable,payload,try,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,session,create,object,message,payload,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1341734527;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1348333832;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1375013152;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1376549254;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1379495956;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1389726752;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1405374721;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1430916975;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1436441288;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1448285987;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1483962135;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1504338769;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1504339316;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1508614180;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    LOG.trace("Writing payload in StreamMessage")__                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,log,trace,writing,payload,in,stream,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1508614180;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    LOG.trace("Writing payload in StreamMessage")__                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,log,trace,writing,payload,in,stream,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1508614181;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1512598738;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1520110721;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1524001544;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1537290824;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1539673113;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1540108161;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1540108163;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1547836603;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1548057494;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1548332772;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1548774602;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                try {_                    if (isVendor(session, "Artemis")) {_                        LOG.trace("Optimised for Artemis: Streaming payload in BytesMessage")__                        InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                        message.setObjectProperty("JMS_AMQ_InputStream", is)__                        LOG.trace("Optimised for Artemis: Finished streaming payload in BytesMessage")__                    } else {_                        byte[] payload = context.getTypeConverter().mandatoryConvertTo(byte[].class, exchange, body)__                        message.writeBytes(payload)__                    }_                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object: {_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        case Stream: {_            StreamMessage message = session.createStreamMessage()__            if (body != null) {_                long size = 0__                try {_                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body)__                    LOG.trace("Writing payload in StreamMessage")__                    _                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE]__                    int len = 0__                    int count = 0__                    while (len >= 0) {_                        count++__                        len = is.read(buffer)__                        if (len >= 0) {_                            size += len__                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count)__                            message.writeBytes(buffer, 0, len)__                        }_                    }_                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size)__                } catch (NoTypeConversionAvailableException | IOException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        }_        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,try,if,is,vendor,session,artemis,log,trace,optimised,for,artemis,streaming,payload,in,bytes,message,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,message,set,object,property,is,log,trace,optimised,for,artemis,finished,streaming,payload,in,bytes,message,else,byte,payload,context,get,type,converter,mandatory,convert,to,byte,class,exchange,body,message,write,bytes,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,case,stream,stream,message,message,session,create,stream,message,if,body,null,long,size,0,try,input,stream,is,context,get,type,converter,mandatory,convert,to,input,stream,class,exchange,body,log,trace,writing,payload,in,stream,message,byte,buffer,new,byte,file,util,int,len,0,int,count,0,while,len,0,count,len,is,read,buffer,if,len,0,size,len,log,trace,writing,payload,chunk,as,bytes,in,stream,message,count,message,write,bytes,buffer,0,len,log,trace,finished,writing,payload,size,as,bytes,in,stream,message,size,catch,no,type,conversion,available,exception,ioexception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1179416274;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = createJmsMessage(exchange.getIn().getBody(), session)__        appendJmsProperties(answer, exchange, session)__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,session,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1186522380;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = createJmsMessage(exchange.getIn().getBody(), session)__        appendJmsProperties(answer, exchange, session)__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,session,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1186747065;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = createJmsMessage(exchange.getIn().getBody(), session)__        appendJmsProperties(answer, exchange, session)__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,session,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1187367104;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = createJmsMessage(exchange.getIn().getBody(), session)__        appendJmsProperties(answer, exchange, session)__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,session,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1187369936;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = createJmsMessage(exchange.getIn().getBody(), session)__        appendJmsProperties(answer, exchange, session)__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,session,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1187506290;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = createJmsMessage(exchange.getIn().getBody(), session)__        appendJmsProperties(answer, exchange)__        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1188403682;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = null__        if( exchange instanceof JmsExchange  ) {_            JmsExchange jmsExchange = (JmsExchange)exchange__            answer = jmsExchange.getIn().getJmsMessage()__        }_        if( answer == null ) {_            answer = createJmsMessage(exchange.getIn().getBody(), session)__            appendJmsProperties(answer, exchange)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,null,if,exchange,instanceof,jms,exchange,jms,exchange,jms,exchange,jms,exchange,exchange,answer,jms,exchange,get,in,get,jms,message,if,answer,null,answer,create,jms,message,exchange,get,in,get,body,session,append,jms,properties,answer,exchange,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1204655001;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1206431352;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1206896103;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1208448482;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1208695725;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1209747244;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1209803508;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1213894639;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1215024238;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1215518767;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1215675979;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1217320452;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1217557565;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1218902614;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1220902719;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1221363215;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1222574662;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1226004128;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1226049018;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1226598575;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1226676678;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1230199048;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1233150749;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1237211133;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1237558827;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1237571271;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1237813243;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1237887389;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1237893393;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238035325;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238072329;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238139051;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238146091;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238393196;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238579695;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238592896;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1238640484;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1243603964;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1245833882;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1246075591;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1246258916;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1246452394;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1248673682;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1248756182;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1249372471;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1251913575;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1254565823;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1256124746;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1257331468;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1270464315;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1272249344;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1274451535;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1278406828;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1278611554;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1278611588;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1280755980;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1284906401;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1293266959;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1296546062;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1297377495;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1297971515;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1298619517;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1299873149;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1299924003;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1301257798;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1307685726;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1307988251;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1308588240;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1314622821;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1318675893;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1326499990;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1328095661;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1341734527;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1348333832;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1375013152;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1376549254;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1379495956;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1389726752;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1405374721;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        return makeJmsMessage(exchange, exchange.getIn(), session, null)__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,return,make,jms,message,exchange,exchange,get,in,session,null
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1430916975;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1436441288;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1448285987;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1483962135;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1504338769;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1504339316;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1508614180;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1508614180;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1508614181;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1512598738;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1520110721;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1524001544;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1537290824;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1539673113;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1540108161;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1540108163;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1547836603;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1548057494;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1548332772;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1548774602;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1215024238;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName  the header name_@return  the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1215518767;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1215675979;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1217320452;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1217557565;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1218902614;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1220902719;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1221363215;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1222574662;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1226004128;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1226049018;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1226598575;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1226676678;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1230199048;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1233150749;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public static String encodeToSafeJmsHeaderName(String headerName);1237211133;Encoder to encode JMS header keys that is that can be sent over the JMS transport._<p/>_For example: Sending dots is the key is not allowed. Especially the Bean component has_this problem if you want to provide the method name to invoke on the bean._<p/>_<b>Note</b>: Currently this encoder is simple as it only supports encoding dots to underscores.__@param headerName the header name_@return the key to use instead for storing properties and to be for lookup of the same property;public static String encodeToSafeJmsHeaderName(String headerName) {_        return headerName.replace(".", "_")__    };encoder,to,encode,jms,header,keys,that,is,that,can,be,sent,over,the,jms,transport,p,for,example,sending,dots,is,the,key,is,not,allowed,especially,the,bean,component,has,this,problem,if,you,want,to,provide,the,method,name,to,invoke,on,the,bean,p,b,note,b,currently,this,encoder,is,simple,as,it,only,supports,encoding,dots,to,underscores,param,header,name,the,header,name,return,the,key,to,use,instead,for,storing,properties,and,to,be,for,lookup,of,the,same,property;public,static,string,encode,to,safe,jms,header,name,string,header,name,return,header,name,replace
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1192732905;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if( camelMessage instanceof JmsMessage  ) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if( answer == null ) {_            answer = createJmsMessage(camelMessage.getBody(), session)__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1194266858;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if( camelMessage instanceof JmsMessage  ) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if( answer == null ) {_            answer = createJmsMessage(camelMessage.getBody(), session)__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1194954124;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if( camelMessage instanceof JmsMessage  ) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if( answer == null ) {_            answer = createJmsMessage(camelMessage.getBody(), session)__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1195037875;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if( camelMessage instanceof JmsMessage  ) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if( answer == null ) {_            answer = createJmsMessage(camelMessage.getBody(), session)__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1195060728;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if( camelMessage instanceof JmsMessage  ) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if( answer == null ) {_            answer = createJmsMessage(camelMessage.getBody(), session)__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1195065940;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if (camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage) camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session)__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1196962651;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if (camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage) camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException;1204655001;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session) throws JMSException {_        Message answer = null__        if (camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage) camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1206431352;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        if (camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1206896103;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        if (camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,if,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1208448482;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false_ _        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1208695725;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            answer = jmsMessage.getJmsMessage()__        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1209747244;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (! jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1209803508;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1213894639;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1215024238;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1215518767;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1215675979;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1217320452;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1217557565;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1218902614;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1220902719;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1221363215;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1222574662;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1226004128;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1226049018;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1226598575;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1226676678;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1230199048;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1233150749;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) ? endpoint.getConfiguration().isAlwaysCopyMessage() : false__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,false,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1237211133;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1237558827;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)         throws JMSException;1237571271;Creates a JMS message from the Camel exchange and message__@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session)_        throws JMSException {_        Message answer = null__        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage()__        if (!alwaysCopy && camelMessage instanceof JmsMessage) {_            JmsMessage jmsMessage = (JmsMessage)camelMessage__            if (!jmsMessage.shouldCreateNewMessage()) {_                answer = jmsMessage.getJmsMessage()__            }_        }_        if (answer == null) {_            answer = createJmsMessage(exchange, camelMessage.getBody(), camelMessage.getHeaders(), session, exchange.getContext())__            appendJmsProperties(answer, exchange, camelMessage)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,org,apache,camel,message,camel,message,session,session,throws,jmsexception,message,answer,null,boolean,always,copy,endpoint,null,endpoint,get,configuration,is,always,copy,message,if,always,copy,camel,message,instanceof,jms,message,jms,message,jms,message,jms,message,camel,message,if,jms,message,should,create,new,message,answer,jms,message,get,jms,message,if,answer,null,answer,create,jms,message,exchange,camel,message,get,body,camel,message,get,headers,session,exchange,get,context,append,jms,properties,answer,exchange,camel,message,return,answer
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1187506290;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1188403682;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1204655001;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1206431352;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1206896103;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1208448482;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1208695725;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1209747244;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1209803508;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1213894639;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1215024238;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1215518767;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1215675979;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1217320452;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1217557565;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1218902614;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1220902719;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1221363215;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1222574662;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1226004128;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1226049018;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1226598575;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1226676678;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1230199048;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1233150749;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1237211133;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1237558827;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1237571271;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1237813243;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1237887389;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1237893393;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238035325;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238072329;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238139051;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238146091;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238393196;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238579695;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238592896;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1238640484;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1243603964;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1245833882;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1246075591;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1246258916;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1246452394;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1248673682;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1248756182;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1249372471;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1251913575;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1254565823;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1256124746;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1257331468;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1270464315;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1272249344;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1274451535;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1278406828;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1278611554;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1278611588;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1280755980;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1284906401;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1293266959;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1296546062;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1297377495;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1297971515;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1298619517;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1299873149;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1299924003;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1301257798;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1307685726;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1307988251;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1308588240;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1314622821;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1318675893;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1326499990;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1328095661;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1341734527;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1348333832;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1375013152;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1376549254;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1379495956;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1389726752;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1405374721;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1430916975;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1436441288;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1448285987;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1483962135;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1504338769;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1504339316;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1508614180;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1508614180;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1508614181;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1512598738;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1520110721;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1524001544;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1537290824;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1539673113;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1540108161;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1540108163;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1547836603;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1548057494;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1548332772;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException;1548774602;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange) throws JMSException {_        appendJmsProperties(jmsMessage, exchange, exchange.getIn())__    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,throws,jmsexception,append,jms,properties,jms,message,exchange,exchange,get,in
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1215518767;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1215675979;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1217320452;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1217557565;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1218902614;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>Boolean</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,boolean,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1220902719;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>Boolean</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,boolean,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1221363215;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>Boolean</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }__        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,boolean,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1222574662;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>Boolean</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,boolean,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1226004128;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>Boolean</li>_<li>BigDecimal and BigInteger</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal || headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,boolean,li,li,big,decimal,and,big,integer,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1226049018;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other litterals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,litterals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1226598575;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1226676678;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1230199048;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1233150749;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1237211133;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1237558827;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1237571271;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1237813243;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1237887389;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1237893393;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238035325;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238072329;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238139051;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238146091;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238393196;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238579695;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238592896;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1238640484;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1243603964;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1245833882;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1246075591;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1246258916;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1246452394;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1248673682;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1248756182;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1249372471;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1251913575;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1254565823;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue.getClass().isPrimitive()) {_            return headerValue__        } else if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue.toString()__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,get,class,is,primitive,return,header,value,else,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,to,string,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1256124746;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1257331468;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1270464315;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1272249344;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue.toString()__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,to,string,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1274451535;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1278406828;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1278611554;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1278611588;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1280755980;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1284906401;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1293266959;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1296546062;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1297377495;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1297971515;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1298619517;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1299873149;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1299924003;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1301257798;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1307685726;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1307988251;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1308588240;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1314622821;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1318675893;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1326499990;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1328095661;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1341734527;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1348333832;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1375013152;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1376549254;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1379495956;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1389726752;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1405374721;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1430916975;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1436441288;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1448285987;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1483962135;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1504338769;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1504339316;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1508614180;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1508614180;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1508614181;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1512598738;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1520110721;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1524001544;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1537290824;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1539673113;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1540108161;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1540108163;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1547836603;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1548057494;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1548332772;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1548774602;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.math.BigInteger</li>_<li>java.math.BigDecimal</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {_                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString()__            } else {_                return headerValue.toString()__            }_        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,math,big,integer,li,li,java,math,big,decimal,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,if,this,endpoint,get,configuration,is,format,date,headers,to,iso8601,return,zoned,date,time,of,instant,date,header,value,to,instant,zone,offset,utc,to,string,else,return,header,value,to,string,return,null
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1179416274;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,true
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1186522380;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,true
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1186747065;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,true
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1187367104;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return true__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,true
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1187369936;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1187506290;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1188403682;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1192732905;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1194266858;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1194954124;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1195037875;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1195060728;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1195065940;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1196962651;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue);1204655001;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1192732905;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1194266858;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1194954124;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1195037875;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1195060728;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1195065940;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1196962651;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1204655001;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()___            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1237813243;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1237887389;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1237893393;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238035325;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238072329;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238139051;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238146091;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238393196;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238579695;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238592896;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1238640484;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1243603964;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1245833882;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1246075591;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1246258916;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1246452394;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1248673682;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1248756182;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1249372471;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1251913575;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1254565823;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1256124746;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1257331468;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1270464315;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1272249344;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1274451535;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1278406828;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1278611554;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1278611588;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1280755980;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1284906401;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1293266959;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1296546062;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1297377495;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1297971515;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1298619517;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1299873149;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1299924003;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1301257798;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1307685726;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1307988251;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1308588240;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1314622821;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1318675893;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1326499990;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1328095661;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1341734527;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1348333832;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1375013152;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1376549254;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1379495956;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1389726752;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1405374721;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1430916975;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1436441288;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1448285987;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1483962135;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1504338769;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1504339316;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1508614180;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1508614180;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1508614181;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1512598738;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1520110721;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1524001544;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1537290824;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1539673113;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1540108161;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1540108163;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1547836603;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1548057494;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1548332772;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException;1548774602;Appends the JMS headers from the Camel {@link JmsMessage};public void appendJmsProperties(Message jmsMessage, Exchange exchange, org.apache.camel.Message in) throws JMSException {_        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()_        _        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            appendJmsProperty(jmsMessage, exchange, in, headerName, headerValue)__        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,org,apache,camel,message,in,throws,jmsexception,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,in,header,name,header,value
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1192732905;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1194266858;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1194954124;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1195037875;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1195060728;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1195065940;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage) message__                return objectMessage.getObject()__            }_            else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage) message__                return textMessage.getText()__            }_            else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage) message)__            }_            else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            }_            else {_                return null__            }_        }_        catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1196962651;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage) message__                return objectMessage.getObject()__            }_            else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage) message__                return textMessage.getText()__            }_            else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage) message)__            }_            else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            }_            else if (message instanceof StreamMessage) {_                return message__            }_            else {_                return null__            }_        }_        catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1204655001;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage) message__                return objectMessage.getObject()__            }_            else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage) message__                return textMessage.getText()__            }_            else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage) message)__            }_            else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            }_            else if (message instanceof StreamMessage) {_                return message__            }_            else {_                return null__            }_        }_        catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1206431352;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1206896103;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1208448482;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1208695725;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1209747244;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1209803508;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1213894639;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1215024238;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1215518767;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1215675979;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1217320452;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1217557565;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1218902614;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1220902719;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1221363215;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1222574662;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1226004128;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1226049018;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1226598575;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1226676678;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1230199048;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1233150749;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1237211133;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1237558827;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1237571271;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1237813243;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1237887389;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1237893393;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238035325;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238072329;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238139051;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238146091;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238393196;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238579695;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238592896;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1238640484;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1243603964;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1245833882;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1246075591;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1246258916;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1246452394;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1248673682;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1248756182;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (!endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1249372471;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (!endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1251913575;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1254565823;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1256124746;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1257331468;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1270464315;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1272249344;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1274451535;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1278406828;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1278611554;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1278611588;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1280755980;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1284906401;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1293266959;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1296546062;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1297377495;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1297971515;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1298619517;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1299873149;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1299924003;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: " + endpoint.getMessageConverter() + " from JMS message: " + message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Option map JMS message is false so using JMS message as body: " + message)__                }_                return message__            }__            if (message instanceof ObjectMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a ObjectMessage from JMS message: " + message)__                }_                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a TextMessage from JMS message: " + message)__                }_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a MapMessage from JMS message: " + message)__                }_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a BytesMessage from JMS message: " + message)__                }_                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body as a StreamMessage from JMS message: " + message)__                }_                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,endpoint,get,message,converter,from,jms,message,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,if,log,is,trace,enabled,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,if,log,is,trace,enabled,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1301257798;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1307685726;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1307988251;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1308588240;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1314622821;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1318675893;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1326499990;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1328095661;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1341734527;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1348333832;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1375013152;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1376549254;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1379495956;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1389726752;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1405374721;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1430916975;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1436441288;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1448285987;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1483962135;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1504338769;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1504339316;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1508614180;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1508614180;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1508614181;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1512598738;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1520110721;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1524001544;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1537290824;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1539673113;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1540108161;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1540108163;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1547836603;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1548057494;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1548332772;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1548774602;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {_            _            _            if (endpoint != null && endpoint.getMessageConverter() != null) {_                if (LOG.isTraceEnabled()) {_                    LOG.trace("Extracting body using a custom MessageConverter: {} from JMS message: {}", endpoint.getMessageConverter(), message)__                }_                return endpoint.getMessageConverter().fromMessage(message)__            }__            _            if (endpoint != null && !endpoint.getConfiguration().isMapJmsMessage()) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    _                    Map<String, Object> jmsHeaders = extractHeadersFromJms(message, exchange)__                    exchange.getIn().getHeaders().putAll(jmsHeaders)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage(exchange, (BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                StreamMessage streamMessage = (StreamMessage)message__                return createInputStreamFromStreamMessage(exchange, streamMessage)__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,endpoint,null,endpoint,get,message,converter,null,if,log,is,trace,enabled,log,trace,extracting,body,using,a,custom,message,converter,from,jms,message,endpoint,get,message,converter,message,return,endpoint,get,message,converter,from,message,message,if,endpoint,null,endpoint,get,configuration,is,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,map,string,object,jms,headers,extract,headers,from,jms,message,exchange,exchange,get,in,get,headers,put,all,jms,headers,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,exchange,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,stream,message,stream,message,stream,message,message,return,create,input,stream,from,stream,message,exchange,stream,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1206431352;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1206896103;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1208448482;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1208695725;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1209747244;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1209803508;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1213894639;Strategy to allow filtering of headers which are put on the JMS message;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(headerName)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,header,name
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1215024238;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        String key = encodeToSafeJmsHeaderName(headerName)__        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_               && ObjectHelper.isJavaIdentifier(key)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,string,key,encode,to,safe,jms,header,name,header,name,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,key
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1215518767;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        String key = encodeToSafeJmsHeaderName(headerName)__        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_            && ObjectHelper.isJavaIdentifier(key)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,string,key,encode,to,safe,jms,header,name,header,name,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,key
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1215675979;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        String key = encodeToSafeJmsHeaderName(headerName)__        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)_            && ObjectHelper.isJavaIdentifier(key)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,string,key,encode,to,safe,jms,header,name,header,name,return,header,value,null,get,ignore,jms,headers,contains,header,name,object,helper,is,java,identifier,key
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1217320452;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {_        _        return headerFilterStrategy == null ||_            !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)_ _    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1217557565;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1218902614;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1220902719;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1221363215;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1222574662;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1226004128;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1226049018;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1226598575;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1226676678;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1230199048;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1233150749;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1237211133;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1237558827;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1237571271;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1237813243;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1237887389;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue);1237893393;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1280755980;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null___        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1284906401;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1293266959;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1296546062;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1297377495;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1297971515;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1298619517;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1299873149;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1299924003;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1301257798;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1307685726;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1307988251;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1308588240;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof GenericFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,generic,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1314622821;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1318675893;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1326499990;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1328095661;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().convertTo(File.class, body) != null _                || exchange.getContext().getTypeConverter().convertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,convert,to,file,class,body,null,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1341734527;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1348333832;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1375013152;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1376549254;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1379495956;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1389726752;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1405374721;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1430916975;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1436441288;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1448285987;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1483962135;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1504338769;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1504339316;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1508614180;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1508614180;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1508614181;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1512598738;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1520110721;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1524001544;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1537290824;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1539673113;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1540108161;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1540108163;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1547836603;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1548057494;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1548332772;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1548774602;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        boolean streamingEnabled = endpoint.getConfiguration().isStreamMessageTypeEnabled()___        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = Text__        } else if (body instanceof byte[] || body instanceof ByteBuffer) {_            type = Bytes__        } else if (body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof StreamCache) {_            type = streamingEnabled ? Stream : Bytes__        } else if (body instanceof Map) {_            type = Map__        } else if (body instanceof Serializable) {_            type = Object_            _        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = streamingEnabled ? Stream : Bytes__        }__        if (type == Stream) {_            boolean artemis = isVendor(session, "Artemis")__            if (artemis) {_                _                type = Bytes__            }_        }__        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,boolean,streaming,enabled,endpoint,get,configuration,is,stream,message,type,enabled,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,text,else,if,body,instanceof,byte,body,instanceof,byte,buffer,type,bytes,else,if,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,stream,cache,type,streaming,enabled,stream,bytes,else,if,body,instanceof,map,type,map,else,if,body,instanceof,serializable,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,streaming,enabled,stream,bytes,if,type,stream,boolean,artemis,is,vendor,session,artemis,if,artemis,type,bytes,return,type
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1196962651;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1204655001;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1206431352;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1206896103;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1208448482;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1208695725;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1209747244;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1209803508;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1213894639;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1215024238;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1215518767;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1215675979;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1217320452;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1217557565;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1218902614;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1220902719;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1221363215;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1222574662;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1226004128;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1226049018;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1226598575;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1226676678;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1230199048;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1233150749;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1237211133;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1237558827;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1237571271;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1237813243;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1237887389;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1237893393;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238035325;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238072329;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238139051;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238146091;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238393196;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238579695;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238592896;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1238640484;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1243603964;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1245833882;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1246075591;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1246258916;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1246452394;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1248673682;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1248756182;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1249372471;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1251913575;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1254565823;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1256124746;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1257331468;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1270464315;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1272249344;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1274451535;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1278406828;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1278611554;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1278611588;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1280755980;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1284906401;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1293266959;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1296546062;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Object key : map.keySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, key)__            if (keyString != null) {_                message.setObject(keyString, map.get(key))__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,object,key,map,key,set,string,key,string,camel,context,helper,convert,to,context,string,class,key,if,key,string,null,message,set,object,key,string,map,get,key
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1297377495;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1297971515;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1298619517;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1299873149;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1299924003;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1301257798;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1307685726;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1307988251;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1308588240;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1314622821;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1318675893;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1326499990;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1328095661;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1341734527;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1348333832;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1375013152;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1376549254;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1379495956;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1389726752;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1405374721;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1430916975;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1436441288;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1448285987;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1483962135;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1504338769;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1504339316;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1508614180;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1508614180;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1508614181;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1512598738;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1520110721;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1524001544;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1537290824;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1539673113;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1540108161;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1540108163;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1547836603;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1548057494;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1548332772;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)         throws JMSException;1548774602;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_        throws JMSException {_        for (Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1217320452;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1217557565;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1218902614;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1220902719;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1221363215;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1222574662;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1226004128;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Set<String> getIgnoreJmsHeaders();1226049018;@deprecated Please use {@link DefaultHeaderFilterStrategy#getOutFilter()};public Set<String> getIgnoreJmsHeaders() {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            return ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .getOutFilter()__        } else {_            _            _            return null__        }_    };deprecated,please,use,link,default,header,filter,strategy,get,out,filter;public,set,string,get,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,return,default,header,filter,strategy,header,filter,strategy,get,out,filter,else,return,null
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1179416274;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1186522380;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1186747065;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1187367104;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1187369936;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1187506290;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1188403682;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1192732905;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getPropertyNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,property,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1194266858;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1194954124;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1195037875;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1195060728;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1195065940;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1196962651;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1204655001;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1206431352;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1206896103;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1208448482;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1208695725;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1209747244;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1209803508;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1213894639;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1215024238;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1215518767;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1215675979;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1217320452;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1217557565;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1218902614;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1220902719;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1221363215;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1222574662;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1226004128;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1226049018;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1226598575;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1226676678;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1230199048;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1233150749;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1237211133;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1237558827;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1237571271;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1237813243;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1237887389;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1237893393;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238035325;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238072329;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238139051;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238146091;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238393196;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238579695;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238592896;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1238640484;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1243603964;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1245833882;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1246075591;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1246258916;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1246452394;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1248673682;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1248756182;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1249372471;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1251913575;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1254565823;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1256124746;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1257331468;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1270464315;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1272249344;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1274451535;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1278406828;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1278611554;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1278611588;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1280755980;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1284906401;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1293266959;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1296546062;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1297377495;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1297971515;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1298619517;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1299873149;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1299924003;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1301257798;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1307685726;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1307988251;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1308588240;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1314622821;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1318675893;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1326499990;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1328095661;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1341734527;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1348333832;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1375013152;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1376549254;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1379495956;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1389726752;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1405374721;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1430916975;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1436441288;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1448285987;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1483962135;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1504338769;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1504339316;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1508614180;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1508614180;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1508614181;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1512598738;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1520110721;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1524001544;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1537290824;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1539673113;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1540108161;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1540108163;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1547836603;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1548057494;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1548332772;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1548774602;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1217320452;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }   _    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1217557565;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1218902614;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1220902719;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1221363215;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1222574662;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1226004128;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders);1226049018;@deprecated Please use {@link DefaultHeaderFilterStrategy#setOutFilter()};public void setIgnoreJmsHeaders(Set<String> ignoreJmsHeaders) {_        if (headerFilterStrategy instanceof DefaultHeaderFilterStrategy) {_            ((DefaultHeaderFilterStrategy)headerFilterStrategy)_                .setOutFilter(ignoreJmsHeaders)__        } else {_            _            _        }_    };deprecated,please,use,link,default,header,filter,strategy,set,out,filter;public,void,set,ignore,jms,headers,set,string,ignore,jms,headers,if,header,filter,strategy,instanceof,default,header,filter,strategy,default,header,filter,strategy,header,filter,strategy,set,out,filter,ignore,jms,headers,else
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238035325;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238072329;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {__        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238139051;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238146091;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238393196;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238579695;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238592896;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1238640484;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1243603964;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1245833882;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1246075591;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1246258916;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1246452394;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1248673682;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1248756182;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1249372471;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1251913575;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1254565823;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1256124746;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1257331468;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1270464315;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1272249344;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1274451535;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1278406828;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1278611554;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1278611588;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1280755980;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1284906401;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1293266959;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1296546062;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1297377495;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1297971515;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1298619517;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1299873149;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1299924003;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1301257798;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1307685726;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1307988251;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1308588240;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1314622821;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1318675893;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1326499990;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1328095661;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1341734527;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1348333832;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1375013152;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1376549254;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1379495956;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1389726752;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1405374721;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1430916975;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1436441288;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1448285987;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1483962135;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1504338769;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1504339316;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1508614180;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1508614180;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1508614181;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1512598738;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1520110721;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1524001544;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1537290824;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1539673113;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1540108161;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1540108163;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1547836603;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1548057494;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1548332772;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,                                          Object headerValue, Exchange exchange);1548774602;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,_                                         Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_            || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,org,apache,camel,message,camel,message,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1508614181;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1512598738;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1520110721;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1524001544;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1537290824;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1539673113;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1540108161;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1540108163;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1547836603;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1548057494;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1548332772;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> @Deprecated     public Object getObjectProperty(Message jmsMessage, String name) throws JMSException;1548774602;@deprecated not in use;@Deprecated_    public Object getObjectProperty(Message jmsMessage, String name) throws JMSException {_        _        Object answer = jmsMessage.getObjectProperty(name)__        if (answer == null) {_            _            String key = jmsKeyFormatStrategy.encodeKey(name)__            answer = jmsMessage.getObjectProperty(key)__        }_        return answer__    };deprecated,not,in,use;deprecated,public,object,get,object,property,message,jms,message,string,name,throws,jmsexception,object,answer,jms,message,get,object,property,name,if,answer,null,string,key,jms,key,format,strategy,encode,key,name,answer,jms,message,get,object,property,key,return,answer
JmsBinding -> protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException;1179416274;Appends the JMS headers from the Camel {@link JmsMessage};protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;protected,void,append,jms,properties,message,jms,message,exchange,exchange,session,session,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException;1186522380;Appends the JMS headers from the Camel {@link JmsMessage};protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;protected,void,append,jms,properties,message,jms,message,exchange,exchange,session,session,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException;1186747065;Appends the JMS headers from the Camel {@link JmsMessage};protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;protected,void,append,jms,properties,message,jms,message,exchange,exchange,session,session,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException;1187367104;Appends the JMS headers from the Camel {@link JmsMessage};protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;protected,void,append,jms,properties,message,jms,message,exchange,exchange,session,session,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException;1187369936;Appends the JMS headers from the Camel {@link JmsMessage};protected void appendJmsProperties(Message jmsMessage, Exchange exchange, Session session) throws JMSException {_        org.apache.camel.Message in = exchange.getIn()__        Set<Map.Entry<String, Object>> entries = in.getHeaders().entrySet()__        for (Map.Entry<String, Object> entry : entries) {_            String headerName = entry.getKey()__            Object headerValue = entry.getValue()__            _            if (headerName.startsWith("JMS") && !headerName.startsWith("JMSX")) {_                if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSCorrelationID")) {_                    jmsMessage.setJMSCorrelationID(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (headerName.equals("JMSReplyTo")) {_                    jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue))__                }_                else if (headerName.equals("JMSType")) {_                    jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue))__                }_                else if (LOG.isDebugEnabled()) {_                    _                    _                    _                    _                    LOG.debug("Ignoring JMS header: " + headerName + " with value: " + headerValue)__                }_            }_            else if (shouldOutputHeader(in, headerName, headerValue)) {_                jmsMessage.setObjectProperty(headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,jms,message;protected,void,append,jms,properties,message,jms,message,exchange,exchange,session,session,throws,jmsexception,org,apache,camel,message,in,exchange,get,in,set,map,entry,string,object,entries,in,get,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,if,header,name,starts,with,jms,header,name,starts,with,jmsx,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmscorrelation,id,jms,message,set,jmscorrelation,id,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,header,name,equals,jmsreply,to,jms,message,set,jmsreply,to,exchange,helper,convert,to,type,exchange,destination,class,header,value,else,if,header,name,equals,jmstype,jms,message,set,jmstype,exchange,helper,convert,to,type,exchange,string,class,header,value,else,if,log,is,debug,enabled,log,debug,ignoring,jms,header,header,name,with,value,header,value,else,if,should,output,header,in,header,name,header,value,jms,message,set,object,property,header,name,header,value
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1254565823;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1256124746;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1257331468;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1270464315;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1272249344;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1274451535;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1278406828;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1278611554;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1278611588;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1280755980;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1284906401;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1293266959;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1296546062;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1297377495;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1297971515;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1298619517;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1299873149;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1299924003;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1301257798;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1307685726;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1307988251;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1308588240;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1314622821;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1318675893;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1326499990;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1328095661;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1341734527;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1348333832;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1375013152;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1376549254;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1379495956;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1389726752;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1405374721;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1430916975;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1436441288;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1448285987;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1483962135;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1504338769;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1504339316;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1508614180;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1508614180;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1508614181;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1512598738;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1520110721;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1524001544;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1537290824;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1539673113;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1540108161;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1540108163;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1547836603;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1548057494;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1548332772;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1548774602;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1179416274;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage) message__                return objectMessage.getObject()__            }_            else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage) message__                return textMessage.getText()__            }_            else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage) message)__            }_            else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            }_            else {_                return null__            }_        }_        catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1186522380;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1186747065;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1187367104;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1187369936;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1187506290;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(JmsExchange exchange, Message message);1188403682;Extracts the body from the JMS message__@param exchange_@param message;public Object extractBodyFromJms(JmsExchange exchange, Message message) {_        try {_            if (message instanceof ObjectMessage) {_                ObjectMessage objectMessage = (ObjectMessage)message__                return objectMessage.getObject()__            } else if (message instanceof TextMessage) {_                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage || message instanceof StreamMessage) {_                _                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeJmsException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,param,message;public,object,extract,body,from,jms,jms,exchange,exchange,message,message,try,if,message,instanceof,object,message,object,message,object,message,object,message,message,return,object,message,get,object,else,if,message,instanceof,text,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,message,instanceof,stream,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,jms,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1194954124;Populate any JMS headers that should be excluded from being copied from an input message_onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        set.add("JMSXAppID")_ _    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,set,add,jmsxapp,id
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1195037875;Populate any JMS headers that should be excluded from being copied from an input message_onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        set.add("JMSXAppID")_ _    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,set,add,jmsxapp,id
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1195060728;Populate any JMS headers that should be excluded from being copied from an input message_onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {_                "JMSXUserID", "JMSXAppID",_                "JMSXDeliveryCount", "JMSXProducerTXID", "JMSXConsumerTXID",_                "JMSXRcvTimestamp", "JMSXState"_        }__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1195065940;Populate any JMS headers that should be excluded from being copied from an input message_onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {_                "JMSXUserID", "JMSXAppID",_                "JMSXDeliveryCount", "JMSXProducerTXID", "JMSXConsumerTXID",_                "JMSXRcvTimestamp", "JMSXState"_        }__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1196962651;Populate any JMS headers that should be excluded from being copied from an input message_onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {_                "JMSXUserID", "JMSXAppID",_                "JMSXDeliveryCount", "JMSXProducerTXID", "JMSXConsumerTXID",_                "JMSXRcvTimestamp", "JMSXState"_        }__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1204655001;Populate any JMS headers that should be excluded from being copied from an input message_onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {_                "JMSXUserID", "JMSXAppID",_                "JMSXDeliveryCount", "JMSXProducerTXID", "JMSXConsumerTXID",_                "JMSXRcvTimestamp", "JMSXState"_        }__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1206431352;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1206896103;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1208448482;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1208695725;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1209747244;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1209803508;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1213894639;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        _        _        _        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXRecvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxrecv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1215024238;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        __        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_                           "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXRecvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxrecv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1215518767;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        __        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_            "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXRecvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxrecv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
JmsBinding -> protected void populateIgnoreJmsHeaders(Set<String> set);1215675979;Populate any JMS headers that should be excluded from being copied from_an input message onto an outgoing message;protected void populateIgnoreJmsHeaders(Set<String> set) {_        __        _        String[] ignore = {"JMSXUserID", "JMSXAppID", "JMSXDeliveryCount", "JMSXProducerTXID",_            "JMSXConsumerTXID", "JMSXRcvTimestamp", "JMSXRecvTimestamp", "JMSXState"}__        set.addAll(Arrays.asList(ignore))__    };populate,any,jms,headers,that,should,be,excluded,from,being,copied,from,an,input,message,onto,an,outgoing,message;protected,void,populate,ignore,jms,headers,set,string,set,string,ignore,jmsxuser,id,jmsxapp,id,jmsxdelivery,count,jmsxproducer,txid,jmsxconsumer,txid,jmsxrcv,timestamp,jmsxrecv,timestamp,jmsxstate,set,add,all,arrays,as,list,ignore
