commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public int read() throws IOException {     try {         return message.readByte().     } catch (MessageEOFException e) {         eof = true.         return -1.     } catch (JMSException e) {         throw new IOException(e).     } }
false;public;1;13;;@Override public int read(byte[] array) throws IOException {     try {         int num = message.readBytes(array).         eof = num < 0.         return num.     } catch (MessageEOFException e) {         eof = true.         return -1.     } catch (JMSException e) {         throw new IOException(e).     } }
false;public;3;14;;@Override public int read(byte[] array, int off, int len) throws IOException {     // we cannot honor off and len, but assuming off is always 0     try {         int num = message.readBytes(array).         eof = num < 0.         return num.     } catch (MessageEOFException e) {         eof = true.         return -1.     } catch (JMSException e) {         throw new IOException(e).     } }
false;public,synchronized;0;8;;@Override public synchronized void reset() throws IOException {     try {         message.reset().     } catch (JMSException e) {         throw new IOException(e).     } }
false;public;0;5;;@Override public int available() throws IOException {     // if we are end of file then there is no more data, otherwise assume there is at least one more byte     return eof ? 0 : 1. }
