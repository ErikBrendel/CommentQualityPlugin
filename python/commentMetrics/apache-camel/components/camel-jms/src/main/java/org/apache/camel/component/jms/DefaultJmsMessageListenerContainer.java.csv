# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultJmsMessageListenerContainer -> protected boolean isAllowQuickStop();1415211488;Whether this {@link DefaultMessageListenerContainer} allows the {@link #runningAllowed()} to quick stop_in case {@link JmsConfiguration#isAcceptMessagesWhileStopping()} is enabled, and {@link org.apache.camel.CamelContext}_is currently being stopped.;protected boolean isAllowQuickStop() {_        return allowQuickStop__    };whether,this,link,default,message,listener,container,allows,the,link,running,allowed,to,quick,stop,in,case,link,jms,configuration,is,accept,messages,while,stopping,is,enabled,and,link,org,apache,camel,camel,context,is,currently,being,stopped;protected,boolean,is,allow,quick,stop,return,allow,quick,stop
DefaultJmsMessageListenerContainer -> protected boolean isAllowQuickStop();1438340821;Whether this {@link DefaultMessageListenerContainer} allows the {@link #runningAllowed()} to quick stop_in case {@link JmsConfiguration#isAcceptMessagesWhileStopping()} is enabled, and {@link org.apache.camel.CamelContext}_is currently being stopped.;protected boolean isAllowQuickStop() {_        return allowQuickStop__    };whether,this,link,default,message,listener,container,allows,the,link,running,allowed,to,quick,stop,in,case,link,jms,configuration,is,accept,messages,while,stopping,is,enabled,and,link,org,apache,camel,camel,context,is,currently,being,stopped;protected,boolean,is,allow,quick,stop,return,allow,quick,stop
DefaultJmsMessageListenerContainer -> protected boolean isAllowQuickStop();1472020603;Whether this {@link DefaultMessageListenerContainer} allows the {@link #runningAllowed()} to quick stop_in case {@link JmsConfiguration#isAcceptMessagesWhileStopping()} is enabled, and {@link org.apache.camel.CamelContext}_is currently being stopped.;protected boolean isAllowQuickStop() {_        return allowQuickStop__    };whether,this,link,default,message,listener,container,allows,the,link,running,allowed,to,quick,stop,in,case,link,jms,configuration,is,accept,messages,while,stopping,is,enabled,and,link,org,apache,camel,camel,context,is,currently,being,stopped;protected,boolean,is,allow,quick,stop,return,allow,quick,stop
DefaultJmsMessageListenerContainer -> protected boolean isAllowQuickStop();1472024442;Whether this {@link DefaultMessageListenerContainer} allows the {@link #runningAllowed()} to quick stop_in case {@link JmsConfiguration#isAcceptMessagesWhileStopping()} is enabled, and {@link org.apache.camel.CamelContext}_is currently being stopped.;protected boolean isAllowQuickStop() {_        return allowQuickStop__    };whether,this,link,default,message,listener,container,allows,the,link,running,allowed,to,quick,stop,in,case,link,jms,configuration,is,accept,messages,while,stopping,is,enabled,and,link,org,apache,camel,camel,context,is,currently,being,stopped;protected,boolean,is,allow,quick,stop,return,allow,quick,stop
DefaultJmsMessageListenerContainer -> protected boolean isAllowQuickStop();1540108161;Whether this {@link DefaultMessageListenerContainer} allows the {@link #runningAllowed()} to quick stop_in case {@link JmsConfiguration#isAcceptMessagesWhileStopping()} is enabled, and {@link org.apache.camel.CamelContext}_is currently being stopped.;protected boolean isAllowQuickStop() {_        return allowQuickStop__    };whether,this,link,default,message,listener,container,allows,the,link,running,allowed,to,quick,stop,in,case,link,jms,configuration,is,accept,messages,while,stopping,is,enabled,and,link,org,apache,camel,camel,context,is,currently,being,stopped;protected,boolean,is,allow,quick,stop,return,allow,quick,stop
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1353587467;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p>The default implementation builds a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}_with the specified bean name and using Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see org.springframework.core.task.SimpleAsyncTaskExecutor#SimpleAsyncTaskExecutor(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName()___        SimpleAsyncTaskExecutor answer = new SimpleAsyncTaskExecutor(beanName)__        answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,default,implementation,builds,a,link,org,springframework,core,task,simple,async,task,executor,with,the,specified,bean,name,and,using,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,org,springframework,core,task,simple,async,task,executor,simple,async,task,executor,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,simple,async,task,executor,answer,new,simple,async,task,executor,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1358296416;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p>The default implementation builds a {@link ThreadPoolTaskExecutor} with the following parameters:_<ul>_<li>corePoolSize = concurrentConsumers</li>_<li>maxPoolSize = maxConcurrentConsumers</li>_</ul>_It uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        ExecutorServiceManager esm = endpoint.getCamelContext().getExecutorServiceManager()__        String pattern = esm.getThreadNamePattern()__        String beanName = getBeanName()___        ThreadPoolTaskExecutor answer = new ThreadPoolTaskExecutor()__        answer.setBeanName(beanName)__        answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__        answer.setCorePoolSize(endpoint.getConcurrentConsumers())__        answer.setMaxPoolSize(endpoint.getMaxConcurrentConsumers())__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,default,implementation,builds,a,link,thread,pool,task,executor,with,the,following,parameters,ul,li,core,pool,size,concurrent,consumers,li,li,max,pool,size,max,concurrent,consumers,li,ul,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,executor,service,manager,esm,endpoint,get,camel,context,get,executor,service,manager,string,pattern,esm,get,thread,name,pattern,string,bean,name,get,bean,name,thread,pool,task,executor,answer,new,thread,pool,task,executor,answer,set,bean,name,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,set,core,pool,size,endpoint,get,concurrent,consumers,answer,set,max,pool,size,endpoint,get,max,concurrent,consumers,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1358681045;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p>The default implementation builds a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}_with the specified bean name and using Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see org.springframework.core.task.SimpleAsyncTaskExecutor#SimpleAsyncTaskExecutor(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName()___        SimpleAsyncTaskExecutor answer = new SimpleAsyncTaskExecutor(beanName)__        answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,default,implementation,builds,a,link,org,springframework,core,task,simple,async,task,executor,with,the,specified,bean,name,and,using,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,org,springframework,core,task,simple,async,task,executor,simple,async,task,executor,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,simple,async,task,executor,answer,new,simple,async,task,executor,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1359941578;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor answer = new ThreadPoolTaskExecutor()__            answer.setBeanName(beanName)__            answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            answer.setQueueCapacity(0)__            answer.initialize()__            return answer__        } else {_            SimpleAsyncTaskExecutor answer = new SimpleAsyncTaskExecutor(beanName)__            answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            return answer__        }_    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,answer,new,thread,pool,task,executor,answer,set,bean,name,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,set,core,pool,size,endpoint,get,concurrent,consumers,answer,set,queue,capacity,0,answer,initialize,return,answer,else,simple,async,task,executor,answer,new,simple,async,task,executor,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1383750143;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor answer = new ThreadPoolTaskExecutor()__            answer.setBeanName(beanName)__            answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            answer.setQueueCapacity(0)__            answer.initialize()__            return answer__        } else {_            SimpleAsyncTaskExecutor answer = new SimpleAsyncTaskExecutor(beanName)__            answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            return answer__        }_    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,answer,new,thread,pool,task,executor,answer,set,bean,name,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,set,core,pool,size,endpoint,get,concurrent,consumers,answer,set,queue,capacity,0,answer,initialize,return,answer,else,simple,async,task,executor,answer,new,simple,async,task,executor,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1415211488;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor answer = new ThreadPoolTaskExecutor()__            answer.setBeanName(beanName)__            answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            answer.setQueueCapacity(0)__            answer.initialize()__            return answer__        } else {_            SimpleAsyncTaskExecutor answer = new SimpleAsyncTaskExecutor(beanName)__            answer.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            return answer__        }_    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,answer,new,thread,pool,task,executor,answer,set,bean,name,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,set,core,pool,size,endpoint,get,concurrent,consumers,answer,set,queue,capacity,0,answer,initialize,return,answer,else,simple,async,task,executor,answer,new,simple,async,task,executor,bean,name,answer,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1438340821;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        TaskExecutor answer___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor()__            executor.setBeanName(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            executor.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            executor.setQueueCapacity(0)__            executor.initialize()__            answer = executor__        } else {_            SimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer = executor__        }__        taskExecutor = answer__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,task,executor,answer,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,executor,new,thread,pool,task,executor,executor,set,bean,name,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,executor,set,core,pool,size,endpoint,get,concurrent,consumers,executor,set,queue,capacity,0,executor,initialize,answer,executor,else,simple,async,task,executor,executor,new,simple,async,task,executor,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,executor,task,executor,answer,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1472020603;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        TaskExecutor answer___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor()__            executor.setBeanName(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            executor.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            executor.setQueueCapacity(0)__            executor.initialize()__            answer = executor__        } else {_            SimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer = executor__        }__        taskExecutor = answer__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,task,executor,answer,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,executor,new,thread,pool,task,executor,executor,set,bean,name,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,executor,set,core,pool,size,endpoint,get,concurrent,consumers,executor,set,queue,capacity,0,executor,initialize,answer,executor,else,simple,async,task,executor,executor,new,simple,async,task,executor,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,executor,task,executor,answer,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1472024442;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        TaskExecutor answer___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor()__            executor.setBeanName(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            executor.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            executor.setQueueCapacity(0)__            executor.initialize()__            answer = executor__        } else {_            SimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer = executor__        }__        taskExecutor = answer__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,task,executor,answer,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,executor,new,thread,pool,task,executor,executor,set,bean,name,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,executor,set,core,pool,size,endpoint,get,concurrent,consumers,executor,set,queue,capacity,0,executor,initialize,answer,executor,else,simple,async,task,executor,executor,new,simple,async,task,executor,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,executor,task,executor,answer,return,answer
DefaultJmsMessageListenerContainer -> @Override     protected TaskExecutor createDefaultTaskExecutor();1540108161;Create a default TaskExecutor. Called if no explicit TaskExecutor has been specified._<p />_The type of {@link TaskExecutor} will depend on the value of_{@link JmsConfiguration#getDefaultTaskExecutorType()}. For more details, refer to the Javadoc of_{@link DefaultTaskExecutorType}._<p />_In all cases, it uses the specified bean name and Camel's {@link org.apache.camel.spi.ExecutorServiceManager}_to resolve the thread name._@see JmsConfiguration#setDefaultTaskExecutorType(DefaultTaskExecutorType)_@see ThreadPoolTaskExecutor#setBeanName(String);@Override_    protected TaskExecutor createDefaultTaskExecutor() {_        String pattern = endpoint.getCamelContext().getExecutorServiceManager().getThreadNamePattern()__        String beanName = getBeanName() == null ? endpoint.getThreadName() : getBeanName()___        TaskExecutor answer___        if (endpoint.getDefaultTaskExecutorType() == DefaultTaskExecutorType.ThreadPool) {_            ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor()__            executor.setBeanName(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            executor.setCorePoolSize(endpoint.getConcurrentConsumers())__            _            _            _            _            executor.setQueueCapacity(0)__            executor.initialize()__            answer = executor__        } else {_            SimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(beanName)__            executor.setThreadFactory(new CamelThreadFactory(pattern, beanName, true))__            answer = executor__        }__        taskExecutor = answer__        return answer__    };create,a,default,task,executor,called,if,no,explicit,task,executor,has,been,specified,p,the,type,of,link,task,executor,will,depend,on,the,value,of,link,jms,configuration,get,default,task,executor,type,for,more,details,refer,to,the,javadoc,of,link,default,task,executor,type,p,in,all,cases,it,uses,the,specified,bean,name,and,camel,s,link,org,apache,camel,spi,executor,service,manager,to,resolve,the,thread,name,see,jms,configuration,set,default,task,executor,type,default,task,executor,type,see,thread,pool,task,executor,set,bean,name,string;override,protected,task,executor,create,default,task,executor,string,pattern,endpoint,get,camel,context,get,executor,service,manager,get,thread,name,pattern,string,bean,name,get,bean,name,null,endpoint,get,thread,name,get,bean,name,task,executor,answer,if,endpoint,get,default,task,executor,type,default,task,executor,type,thread,pool,thread,pool,task,executor,executor,new,thread,pool,task,executor,executor,set,bean,name,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,executor,set,core,pool,size,endpoint,get,concurrent,consumers,executor,set,queue,capacity,0,executor,initialize,answer,executor,else,simple,async,task,executor,executor,new,simple,async,task,executor,bean,name,executor,set,thread,factory,new,camel,thread,factory,pattern,bean,name,true,answer,executor,task,executor,answer,return,answer
