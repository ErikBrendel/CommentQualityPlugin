commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Exchange getExchange() {     return exchange. }
false;public;0;3;;public AsyncCallback getCallback() {     return callback. }
true;public;0;3;/**  * Gets the original correlation id, if one was set when sending the message.  * <p/>  * Some JMS brokers will mess with the correlation id and send back a different/empty correlation id.  * So we need to remember it so we can restore the correlation id.  */ ;/**  * Gets the original correlation id, if one was set when sending the message.  * <p/>  * Some JMS brokers will mess with the correlation id and send back a different/empty correlation id.  * So we need to remember it so we can restore the correlation id.  */ public String getOriginalCorrelationId() {     return originalCorrelationId. }
true;public;0;3;/**  * Gets the correlation id  *  * @see #getOriginalCorrelationId()  */ ;/**  * Gets the correlation id  *  * @see #getOriginalCorrelationId()  */ public String getCorrelationId() {     return correlationId. }
true;public;0;3;/**  * Gets the received message  *  * @return  the received message, or <tt>null</tt> if timeout occurred and no message has been received  * @see #isTimeout()  */ ;/**  * Gets the received message  *  * @return  the received message, or <tt>null</tt> if timeout occurred and no message has been received  * @see #isTimeout()  */ public Message getMessage() {     return message. }
true;public;0;3;/**  * Gets the JMS session from the received message  *  * @return  the JMS session, or <tt>null</tt> if timeout occurred and no message has been received  * @see #isTimeout()  */ ;/**  * Gets the JMS session from the received message  *  * @return  the JMS session, or <tt>null</tt> if timeout occurred and no message has been received  * @see #isTimeout()  */ public Session getSession() {     return session. }
true;public;0;3;/**  * Whether timeout triggered or not.  * <p/>  * A timeout is triggered if <tt>requestTimeout</tt> option has been configured, and a reply message has <b>not</b> been  * received within that time frame.  */ ;/**  * Whether timeout triggered or not.  * <p/>  * A timeout is triggered if <tt>requestTimeout</tt> option has been configured, and a reply message has <b>not</b> been  * received within that time frame.  */ public boolean isTimeout() {     return message == null. }
true;public;0;3;/**  * The timeout value  */ ;/**  * The timeout value  */ public long getRequestTimeout() {     return timeout. }
