commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot receive messages from this endpoint"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new LambdaProducer(this). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;5;;@Override public void doStart() throws Exception {     super.doStart().     awsLambdaClient = configuration.getAwsLambdaClient() != null ? configuration.getAwsLambdaClient() : createLambdaClient(). }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAwsLambdaClient())) {         if (awsLambdaClient != null) {             awsLambdaClient.shutdown().         }     }     super.doStop(). }
false;public;0;3;;public LambdaConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public AWSLambda getAwsLambdaClient() {     return awsLambdaClient. }
false;;0;21;;AWSLambda createLambdaClient() {     AWSLambdaClientBuilder builder = AWSLambdaClientBuilder.standard().     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         ClientConfiguration clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         builder = builder.withClientConfiguration(clientConfiguration).     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         builder = builder.withRegion(Regions.valueOf(configuration.getRegion())).     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         builder = builder.withCredentials(new AWSStaticCredentialsProvider(credentials)).     }     return builder.build(). }
