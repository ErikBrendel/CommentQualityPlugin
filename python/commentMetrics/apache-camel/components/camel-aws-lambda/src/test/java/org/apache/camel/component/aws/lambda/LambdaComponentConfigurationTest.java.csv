commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void createEndpointWithMinimalConfiguration() throws Exception {     LambdaComponent component = new LambdaComponent(context).     LambdaEndpoint endpoint = (LambdaEndpoint) component.createEndpoint("aws-lambda://myFunction?operation=getFunction&awsLambdaClient=#awsLambdaClient&accessKey=xxx&secretKey=yyy").     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNotNull(endpoint.getConfiguration().getAwsLambdaClient()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutOperation() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.createEndpoint("aws-lambda://myFunction"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAmazonLambdaClientConfiguration() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.createEndpoint("aws-lambda://myFunction?operation=getFunction"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAccessKeyConfiguration() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.createEndpoint("aws-lambda://myFunction?operation=getFunction&secretKey=yyy"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutSecretKeyConfiguration() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.createEndpoint("aws-lambda://myFunction?operation=getFunction&accessKey=xxx"). }
false;public;0;5;;@Test public void createEndpointWithoutSecretKeyAndAccessKeyConfiguration() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.createEndpoint("aws-lambda://myFunction?operation=getFunction&awsLambdaClient=#awsLambdaClient"). }
false;public;0;11;;@Test public void createEndpointWithComponentElements() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.setAccessKey("XXX").     component.setSecretKey("YYY").     LambdaEndpoint endpoint = (LambdaEndpoint) component.createEndpoint("aws-lambda://myFunction").     assertEquals("myFunction", endpoint.getConfiguration().getFunction()).     assertEquals("XXX", endpoint.getConfiguration().getAccessKey()).     assertEquals("YYY", endpoint.getConfiguration().getSecretKey()). }
false;public;0;13;;@Test public void createEndpointWithComponentAndEndpointElements() throws Exception {     LambdaComponent component = new LambdaComponent(context).     component.setAccessKey("XXX").     component.setSecretKey("YYY").     component.setRegion(Regions.US_WEST_1.toString()).     LambdaEndpoint endpoint = (LambdaEndpoint) component.createEndpoint("aws-lambda://myFunction?accessKey=xxxxxx&secretKey=yyyyy&region=US_EAST_1").     assertEquals("myFunction", endpoint.getConfiguration().getFunction()).     assertEquals("xxxxxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyyyy", endpoint.getConfiguration().getSecretKey()).     assertEquals("US_EAST_1", endpoint.getConfiguration().getRegion()). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("awsLambdaClient", awsLambdaClient).     return registry. }
