commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(LambdaConstants.RUNTIME, "nodejs6.10").     exchange.getIn().setHeader(LambdaConstants.HANDLER, "GetHelloWithName.handler").     exchange.getIn().setHeader(LambdaConstants.DESCRIPTION, "Hello with node.js on Lambda").     exchange.getIn().setHeader(LambdaConstants.ROLE, "arn:aws:iam::643534317684:role/lambda-execution-role").     ClassLoader classLoader = getClass().getClassLoader().     File file = new File(classLoader.getResource("org/apache/camel/component/aws/lambda/function/node/GetHelloWithName.zip").getFile()).     FileInputStream inputStream = new FileInputStream(file).     exchange.getIn().setBody(IOUtils.toByteArray(inputStream)). }
false;public;0;20;;@Test public void lambdaCreateFunctionTest() throws Exception {     Exchange exchange = template.send("direct:createFunction", ExchangePattern.InOut, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(LambdaConstants.RUNTIME, "nodejs6.10").             exchange.getIn().setHeader(LambdaConstants.HANDLER, "GetHelloWithName.handler").             exchange.getIn().setHeader(LambdaConstants.DESCRIPTION, "Hello with node.js on Lambda").             exchange.getIn().setHeader(LambdaConstants.ROLE, "arn:aws:iam::643534317684:role/lambda-execution-role").             ClassLoader classLoader = getClass().getClassLoader().             File file = new File(classLoader.getResource("org/apache/camel/component/aws/lambda/function/node/GetHelloWithName.zip").getFile()).             FileInputStream inputStream = new FileInputStream(file).             exchange.getIn().setBody(IOUtils.toByteArray(inputStream)).         }     }).     assertNotNull(exchange.getOut().getBody(CreateFunctionResult.class)).     assertEquals(exchange.getOut().getBody(CreateFunctionResult.class).getFunctionName(), "GetHelloWithName"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception { }
false;public;0;12;;@Test public void lambdaListFunctionsTest() throws Exception {     Exchange exchange = template.send("direct:listFunctions", ExchangePattern.InOut, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {         }     }).     assertNotNull(exchange.getOut().getBody(ListFunctionsResult.class)).     assertEquals(exchange.getOut().getBody(ListFunctionsResult.class).getFunctions().size(), 3). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception { }
false;public;0;15;;@Test public void lambdaGetFunctionTest() throws Exception {     Exchange exchange = template.send("direct:getFunction", ExchangePattern.InOut, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {         }     }).     GetFunctionResult result = exchange.getOut().getBody(GetFunctionResult.class).     assertNotNull(result).     assertEquals(result.getConfiguration().getFunctionName(), "GetHelloWithName").     assertEquals(result.getConfiguration().getRuntime(), "nodejs6.10"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("{\"name\":\"Camel\"}"). }
false;public;0;13;;@Test public void lambdaInvokeFunctionTest() throws Exception {     Exchange exchange = template.send("direct:invokeFunction", ExchangePattern.InOut, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("{\"name\":\"Camel\"}").         }     }).     assertNotNull(exchange.getOut().getBody(String.class)).     assertEquals(exchange.getOut().getBody(String.class), "{\"Hello\":\"Camel\"}"). }
false;public;1;3;;@Override public void process(Exchange exchange) throws Exception { }
false;public;0;11;;@Test public void lambdaDeleteFunctionTest() throws Exception {     Exchange exchange = template.send("direct:deleteFunction", ExchangePattern.InOut, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {         }     }).     assertNotNull(exchange.getOut().getBody(DeleteFunctionResult.class)). }
false;public;0;20;;@Override public void configure() throws Exception {     from("direct:createFunction").to("aws-lambda://GetHelloWithName?operation=createFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").     from("direct:listFunctions").to("aws-lambda://myFunction?operation=listFunctions&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").     from("direct:getFunction").to("aws-lambda://GetHelloWithName?operation=getFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").     from("direct:invokeFunction").to("aws-lambda://GetHelloWithName?operation=invokeFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").     from("direct:deleteFunction").to("aws-lambda://GetHelloWithName?operation=deleteFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:createFunction").to("aws-lambda://GetHelloWithName?operation=createFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").             from("direct:listFunctions").to("aws-lambda://myFunction?operation=listFunctions&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").             from("direct:getFunction").to("aws-lambda://GetHelloWithName?operation=getFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").             from("direct:invokeFunction").to("aws-lambda://GetHelloWithName?operation=invokeFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").             from("direct:deleteFunction").to("aws-lambda://GetHelloWithName?operation=deleteFunction&accessKey=xxxx&secretKey=xxxx&awsLambdaEndpoint=lambda.eu-central-1.amazonaws.com").         }     }. }
