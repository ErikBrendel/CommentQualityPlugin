commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void initPort() {     serverPort = AvailablePortFinder.getNextAvailable(). }
false;public;0;30;;@Test public void testSendingRawUDP() throws IOException, InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:syslogReceiver").     MockEndpoint mock2 = getMockEndpoint("mock:syslogReceiver2").     mock.expectedMessageCount(2).     mock2.expectedMessageCount(2).     mock2.expectedBodiesReceived(rfc3164Message, rfc5424Message).     DatagramSocket socket = new DatagramSocket().     try {         InetAddress address = InetAddress.getByName("127.0.0.1").         for (int i = 0. i < messageCount. i++) {             byte[] data = rfc3164Message.getBytes().             DatagramPacket packet = new DatagramPacket(data, data.length, address, serverPort).             socket.send(packet).             Thread.sleep(100).         }         for (int i = 0. i < messageCount. i++) {             byte[] data = rfc5424Message.getBytes().             DatagramPacket packet = new DatagramPacket(data, data.length, address, serverPort).             socket.send(packet).             Thread.sleep(100).         }     } finally {         socket.close().     }     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange ex) {     assertTrue(ex.getIn().getBody() instanceof SyslogMessage). }
false;public;0;10;;@Override public void configure() throws Exception {     // we setup a Syslog listener on a random port.     from("mina2:udp://127.0.0.1:" + serverPort).unmarshal().syslog().process(new Processor() {          @Override         public void process(Exchange ex) {             assertTrue(ex.getIn().getBody() instanceof SyslogMessage).         }     }).to("mock:syslogReceiver").marshal().syslog().to("mock:syslogReceiver2"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // we setup a Syslog listener on a random port.             from("mina2:udp://127.0.0.1:" + serverPort).unmarshal().syslog().process(new Processor() {                  @Override                 public void process(Exchange ex) {                     assertTrue(ex.getIn().getBody() instanceof SyslogMessage).                 }             }).to("mock:syslogReceiver").marshal().syslog().to("mock:syslogReceiver2").         }     }. }
