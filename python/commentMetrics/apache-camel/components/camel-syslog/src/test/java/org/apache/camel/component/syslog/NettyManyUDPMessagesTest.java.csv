commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void initPort() {     serverPort = AvailablePortFinder.getNextAvailable(). }
false;public;0;24;;@Test public void testSendingManyMessages() throws Exception, InterruptedException {     MockEndpoint stop1 = getMockEndpoint("mock:stop1").     MockEndpoint stop2 = getMockEndpoint("mock:stop2").     stop2.expectedMessageCount(messageCount).     stop1.expectedMessageCount(messageCount).     DatagramSocket socket = new DatagramSocket().     try {         InetAddress address = InetAddress.getByName("127.0.0.1").         for (int i = 0. i < messageCount. i++) {             byte[] data = message.getBytes().             DatagramPacket packet = new DatagramPacket(data, data.length, address, serverPort).             socket.send(packet).             Thread.sleep(100).         }     } finally {         socket.close().     }     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange ex) {     assertTrue(ex.getIn().getBody() instanceof SyslogMessage). }
false;public;0;14;;public void configure() throws Exception {     // context.setTracing(true).     DataFormat syslogDataFormat = new SyslogDataFormat().     // we setup a Syslog  listener on a random port.     from("netty4:udp://127.0.0.1:" + serverPort + "?sync=false&allowDefaultCodec=false").unmarshal(syslogDataFormat).process(new Processor() {          public void process(Exchange ex) {             assertTrue(ex.getIn().getBody() instanceof SyslogMessage).         }     }).to("mock:stop1").marshal(syslogDataFormat).to("mock:stop2"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // context.setTracing(true).             DataFormat syslogDataFormat = new SyslogDataFormat().             // we setup a Syslog  listener on a random port.             from("netty4:udp://127.0.0.1:" + serverPort + "?sync=false&allowDefaultCodec=false").unmarshal(syslogDataFormat).process(new Processor() {                  public void process(Exchange ex) {                     assertTrue(ex.getIn().getBody() instanceof SyslogMessage).                 }             }).to("mock:stop1").marshal(syslogDataFormat).to("mock:stop2").         }     }. }
