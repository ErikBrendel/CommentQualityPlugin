commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testOgnlExpressions() throws Exception {     assertExpression("exchange", exchange).     assertExpression("exchange.getIn().body", "<hello id='m123'>world!</hello>").     assertExpression("getRequest().body", "<hello id='m123'>world!</hello>").     assertExpression("request.body", "<hello id='m123'>world!</hello>").     assertExpression("getRequest().headers['foo']", "abc").     assertExpression("getRequest().headers.foo", "abc").     assertExpression("request.headers.foo", "abc"). }
false;public;0;12;;@Test public void testClassMethodExpression() throws Exception {     try {         assertExpression("@org.apache.camel.language.ognl.Animal1@getClassName()", "Animal").         fail("Expect exception here.").     } catch (Exception ex) {         assertTrue("We should get the ClassNotFoundException", ex.getMessage().indexOf("ClassNotFoundException") > 0).     }     // setup the class resolver to load the right class for us     exchange.getContext().setClassResolver(new MyClassResolver(context)).     assertExpression("@org.apache.camel.language.ognl.Animal1@getClassName()", "Animal"). }
false;public;0;5;;@Test public void testGetOutFalseKeepsNullOutMessage() throws Exception {     assertExpression("exchange.hasOut()", false).     assertFalse(exchange.hasOut()). }
false;public;0;5;;@Test public void testResponseCreatesOutMessage() throws Exception {     assertExpression("response.body", null).     assertTrue(exchange.hasOut()). }
false;protected;0;3;;protected String getLanguageName() {     return "ognl". }
