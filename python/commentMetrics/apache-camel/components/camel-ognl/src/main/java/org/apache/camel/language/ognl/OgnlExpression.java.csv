commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static OgnlExpression ognl(String expression) {     return new OgnlExpression(new OgnlLanguage(), expression, Object.class). }
false;public;2;11;;public <T> T evaluate(Exchange exchange, Class<T> tClass) {     OgnlContext oglContext = new OgnlContext().     // setup the class resolver from camel     oglContext.setClassResolver(new CamelClassResolver(exchange.getContext().getClassResolver())).     try {         Object value = Ognl.getValue(expression, oglContext, new RootObject(exchange)).         return exchange.getContext().getTypeConverter().convertTo(tClass, value).     } catch (OgnlException e) {         throw new ExpressionEvaluationException(this, exchange, e).     } }
false;public;0;3;;public Class<?> getType() {     return type. }
false;protected;1;3;;protected String assertionFailureMessage(Exchange exchange) {     return expressionString. }
false;public;0;4;;@Override public String toString() {     return "OGNL[" + expressionString + "]". }
