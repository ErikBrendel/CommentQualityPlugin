commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public void configure() throws Exception {     onException(Throwable.class).to("direct:handle").handled(true).     from("direct:num").bean(BeanCallTest.this, "processBody").process(// Can be removed?     new UnwrapStreamProcessor()).to("mock:endpoint").     from("direct:handle").setBody().constant("ERR").to("mock:endpoint"). }
false;public;0;31;;@Test public void beanCallTest() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("direct:handle").handled(true).             from("direct:num").bean(BeanCallTest.this, "processBody").process(// Can be removed?             new UnwrapStreamProcessor()).to("mock:endpoint").             from("direct:handle").setBody().constant("ERR").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(1).     context.start().     template.sendBody("direct:num", 1).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertEquals("HelloBody 1", exchange.getIn().getBody()). }
false;public;0;14;;@Override public void configure() throws Exception {     onException(Throwable.class).to("direct:handle").handled(true).     from("direct:num").bean(BeanCallTest.this, "processBodyWrongType").process(// Can be removed?     new UnwrapStreamProcessor()).to("mock:endpoint").     from("direct:handle").setBody().constant("ERR").to("mock:endpoint"). }
false;public;0;30;;@Test public void beanCallWithErrorTest() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("direct:handle").handled(true).             from("direct:num").bean(BeanCallTest.this, "processBodyWrongType").process(// Can be removed?             new UnwrapStreamProcessor()).to("mock:endpoint").             from("direct:handle").setBody().constant("ERR").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(1).     context.start().     template.sendBody("direct:num", 1).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertEquals("ERR", exchange.getIn().getBody()). }
false;public;0;14;;@Override public void configure() throws Exception {     onException(Throwable.class).to("direct:handle").handled(true).     from("direct:num").bean(BeanCallTest.this, "processHeader").process(// Can be removed?     new UnwrapStreamProcessor()).to("mock:endpoint").     from("direct:handle").setBody().constant("ERR").to("mock:endpoint"). }
false;public;0;30;;@Test public void beanCallHeaderMappingTest() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("direct:handle").handled(true).             from("direct:num").bean(BeanCallTest.this, "processHeader").process(// Can be removed?             new UnwrapStreamProcessor()).to("mock:endpoint").             from("direct:handle").setBody().constant("ERR").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(1).     context.start().     template.sendBodyAndHeader("direct:num", 1, "myheader", 2).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertEquals("HelloHeader 2", exchange.getIn().getBody()). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Throwable.class).to("direct:handle").handled(true).     from("direct:num").bean(BeanCallTest.this, "processBodyEmpty").process(// Can be removed?     new UnwrapStreamProcessor()).to("mock:endpoint").     from("direct:handle").setBody().constant("ERR").to("mock:endpoint"). }
false;public;0;32;;@Test public void beanCallEmptyPublisherTest() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("direct:handle").handled(true).             from("direct:num").bean(BeanCallTest.this, "processBodyEmpty").process(// Can be removed?             new UnwrapStreamProcessor()).to("mock:endpoint").             from("direct:handle").setBody().constant("ERR").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(1).     context.start().     template.sendBody("direct:num", 1).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     Object body = exchange.getIn().getBody().     // unchanged     assertEquals(new Integer(1), body). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Throwable.class).to("direct:handle").handled(true).     from("direct:num").bean(BeanCallTest.this, "processBodyTwoItems").process(// Can be removed?     new UnwrapStreamProcessor()).to("mock:endpoint").     from("direct:handle").setBody().constant("ERR").to("mock:endpoint"). }
false;public;0;37;;@Test public void beanCallTwoElementsTest() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("direct:handle").handled(true).             from("direct:num").bean(BeanCallTest.this, "processBodyTwoItems").process(// Can be removed?             new UnwrapStreamProcessor()).to("mock:endpoint").             from("direct:handle").setBody().constant("ERR").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(1).     context.start().     template.sendBody("direct:num", 1).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     Object body = exchange.getIn().getBody().     assertTrue(body instanceof Collection).     @SuppressWarnings("unchecked")     List<String> data = new LinkedList<>((Collection<String>) body).     assertListSize(data, 2).     assertEquals("HelloBody 1", data.get(0)).     assertEquals("HelloBody 1", data.get(1)). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Throwable.class).to("direct:handle").handled(true).     from("direct:num").bean(BeanCallTest.this, "processBodyStd").process(// Can be removed?     new UnwrapStreamProcessor()).to("mock:endpoint").     from("direct:handle").setBody().constant("ERR").to("mock:endpoint"). }
false;public;0;32;;@Test public void beanCallStdReturnTypeTest() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("direct:handle").handled(true).             from("direct:num").bean(BeanCallTest.this, "processBodyStd").process(// Can be removed?             new UnwrapStreamProcessor()).to("mock:endpoint").             from("direct:handle").setBody().constant("ERR").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(1).     context.start().     template.sendBody("direct:num", 1).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     Object body = exchange.getIn().getBody().     assertEquals("Hello", body). }
false;public;1;4;;public Publisher<String> processBody(Publisher<Integer> data) {     return Flowable.fromPublisher(data).map(l -> "HelloBody " + l). }
false;public;1;4;;public Publisher<String> processBodyWrongType(Publisher<BeanCallTest> data) {     return Flowable.fromPublisher(data).map(l -> "HelloBody " + l). }
false;public;1;4;;public Publisher<String> processHeader(@Header("myheader") Publisher<Integer> data) {     return Flowable.fromPublisher(data).map(l -> "HelloHeader " + l). }
false;public;1;4;;public Publisher<String> processBodyTwoItems(Publisher<Integer> data) {     return Flowable.fromPublisher(data).mergeWith(data).map(l -> "HelloBody " + l). }
false;public;1;3;;public Publisher<String> processBodyEmpty(Publisher<Integer> data) {     return Flowable.empty(). }
false;public;1;3;;public String processBodyStd(Publisher<Integer> data) {     return "Hello". }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
