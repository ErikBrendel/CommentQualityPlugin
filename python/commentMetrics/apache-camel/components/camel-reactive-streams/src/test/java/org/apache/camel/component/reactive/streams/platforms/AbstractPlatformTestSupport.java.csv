commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:endpoint").to("reactive-streams:integers"). }
false;public;0;36;;@Test public void testPublisher() throws Exception {     int num = 20.     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:endpoint").to("reactive-streams:integers").         }     }.addRoutesToCamelContext(context).     CamelReactiveStreamsService camel = CamelReactiveStreams.get(context).     List<Integer> elements = new LinkedList<>().     CountDownLatch latch = new CountDownLatch(num).     this.changeSign(camel.fromStream("integers", Integer.class), i -> {         elements.add(i).         latch.countDown().     }).     context.start().     for (int i = 1. i <= num. i++) {         template.sendBody("direct:endpoint", i).     }     assertTrue(latch.await(5, TimeUnit.SECONDS)).     for (Integer number : elements) {         assertTrue(number < 0).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:integers").to("mock:endpoint"). }
false;public;0;34;;@Test public void testSubscriber() throws Exception {     int num = 20.     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:integers").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     CamelReactiveStreamsService camel = CamelReactiveStreams.get(context).     List<Integer> elements = new LinkedList<>().     for (int i = 1. i <= num. i++) {         elements.add(i).     }     changeSign(elements, camel.streamSubscriber("integers", Integer.class)).     context.start().     MockEndpoint mock = getMockEndpoint("mock:endpoint").     mock.expectedMessageCount(num).     mock.assertIsSatisfied().     for (Exchange ex : mock.getExchanges()) {         Integer number = ex.getIn().getBody(Integer.class).         assertNotNull(number).         assertTrue(number < 0).     } }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected,abstract;2;1;;protected abstract void changeSign(Publisher<Integer> data, Consumer<Integer> consume).
false;protected,abstract;2;1;;protected abstract void changeSign(Iterable<Integer> data, Subscriber<Integer> camel).
