commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("timer:tick?period=5&repeatCount=30").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:pub"). }
false;public;0;29;;@Test public void testWorking() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:tick?period=5&repeatCount=30").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:pub").         }     }.addRoutesToCamelContext(context).     int num = 30.     CountDownLatch latch = new CountDownLatch(num).     List<Integer> recv = new LinkedList<>().     Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("pub", Integer.class)).doOnNext(recv::add).doOnNext(n -> latch.countDown()).subscribe().     context.start().     latch.await(5, TimeUnit.SECONDS).     assertEquals(num, recv.size()).     for (int i = 1. i <= num. i++) {         assertEquals(i, recv.get(i - 1).intValue()).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("timer:tick?period=50").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:unbounded"). }
false;public;0;41;;@Test public void testMultipleSubscriptions() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:tick?period=50").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:unbounded").         }     }.addRoutesToCamelContext(context).     CountDownLatch latch1 = new CountDownLatch(5).     Disposable disp1 = Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("unbounded", Integer.class)).subscribe(n -> latch1.countDown()).     context.start().     // Add another subscription     CountDownLatch latch2 = new CountDownLatch(5).     Disposable disp2 = Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("unbounded", Integer.class)).subscribe(n -> latch2.countDown()).     assertTrue(latch1.await(5, TimeUnit.SECONDS)).     assertTrue(latch2.await(5, TimeUnit.SECONDS)).     // Unsubscribe both     disp1.dispose().     disp2.dispose().     // No active subscriptions, warnings expected     Thread.sleep(60).     // Add another subscription     CountDownLatch latch3 = new CountDownLatch(5).     Disposable disp3 = Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("unbounded", Integer.class)).subscribe(n -> latch3.countDown()).     assertTrue(latch3.await(5, TimeUnit.SECONDS)).     disp3.dispose(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:one").to("reactive-streams:stream").     from("direct:two").to("reactive-streams:stream"). }
false;public;0;16;;@Test(expected = FailedToCreateRouteException.class) public void testOnlyOneCamelProducerPerPublisher() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:one").to("reactive-streams:stream").             from("direct:two").to("reactive-streams:stream").         }     }.addRoutesToCamelContext(context).     context.start(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
