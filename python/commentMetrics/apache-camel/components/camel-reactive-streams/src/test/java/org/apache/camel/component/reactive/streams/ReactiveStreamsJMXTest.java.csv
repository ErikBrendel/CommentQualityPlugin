commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testJmxExposedService() throws Exception {     MBeanServer mbeanServer = getMBeanServer().     ObjectName rxService = getReactiveStreamsServiceName(mbeanServer).     Map<String, Object> subdata = getValues(mbeanServer, rxService, "camelSubscribers", 0).     assertEquals("unbounded", subdata.get("name")).     assertEquals(0L, subdata.get("inflight")).     assertEquals(0L, subdata.get("requested")).     Map<String, Object> pubdata = getValues(mbeanServer, rxService, "camelPublishers", 0).     assertEquals("strings", pubdata.get("name")).     assertEquals(1, pubdata.get("subscribers")).     TabularData subTd0 = (TabularData) pubdata.get("subscriptions").     assertEquals(1, subTd0.values().size()).     // Create another subscriber     CamelReactiveStreamsService rxCamel = CamelReactiveStreams.get(context()).     Flux.from(rxCamel.fromStream("strings")).subscribe().     pubdata = getValues(mbeanServer, rxService, "camelPublishers", 0).     TabularData subTd = (TabularData) pubdata.get("subscriptions").     assertEquals(2, subTd.values().size()).     Map<String, Object> subscriptions = getValues(subTd, 1).     assertEquals("BUFFER", subscriptions.get("back pressure")). }
false;private;4;4;;private Map<String, Object> getValues(MBeanServer mbeanServer, ObjectName rxService, String name, int index) throws Exception {     TabularData td = (TabularData) mbeanServer.invoke(rxService, name, null, null).     return getValues(td, index). }
false;private;2;11;;private Map<String, Object> getValues(TabularData td, int index) {     assertNotNull(td).     assertTrue(td.values().size() > index).     CompositeData data = (CompositeData) new LinkedList<>(td.values()).get(index).     assertNotNull(data).     Map<String, Object> res = new HashMap<>().     for (String key : data.getCompositeType().keySet()) {         res.put(key, data.get(key)).     }     return res. }
false;private;0;3;;private MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;private;1;7;;private ObjectName getReactiveStreamsServiceName(MBeanServer mbeanServer) throws Exception {     ObjectName on = ObjectName.getInstance("org.apache.camel:type=services,*").     QueryExp queryExp = Query.match(new AttributeValueExp("ServiceType"), new StringValueExp("DefaultCamelReactiveStreamsService")).     Set<ObjectName> names = mbeanServer.queryNames(on, queryExp).     assertEquals(1, names.size()).     return names.iterator().next(). }
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;17;;@Override public void configure() throws Exception {     from("reactive-streams:unbounded?maxInflightExchanges=-1").delayer(1).to("mock:unbounded-endpoint").     from("timer:tick").setBody().simple("Hello world ${header.CamelTimerCounter}").to("reactive-streams:strings").     CamelReactiveStreamsService rxCamel = CamelReactiveStreams.get(getContext()).     Flux.from(rxCamel.fromStream("strings", String.class)).doOnNext(System.out::println).subscribe(). }
false;protected;0;22;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:unbounded?maxInflightExchanges=-1").delayer(1).to("mock:unbounded-endpoint").             from("timer:tick").setBody().simple("Hello world ${header.CamelTimerCounter}").to("reactive-streams:strings").             CamelReactiveStreamsService rxCamel = CamelReactiveStreams.get(getContext()).             Flux.from(rxCamel.fromStream("strings", String.class)).doOnNext(System.out::println).subscribe().         }     }. }
