commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:numbers?forwardOnComplete=true").to("mock:endpoint"). }
false;public;0;25;;@Test public void testOnCompleteHeaderForwarded() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:numbers?forwardOnComplete=true").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     Subscriber<Integer> numbers = CamelReactiveStreams.get(context).streamSubscriber("numbers", Integer.class).     context.start().     Flowable.<Integer>empty().subscribe(numbers).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(1).     endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE, "onComplete").     endpoint.expectedBodiesReceived(new Object[] { null }).     endpoint.assertIsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:numbers").to("mock:endpoint"). }
false;public;0;23;;@Test public void testOnCompleteHeaderNotForwarded() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:numbers").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     Subscriber<Integer> numbers = CamelReactiveStreams.get(context).streamSubscriber("numbers", Integer.class).     context.start().     Flowable.<Integer>empty().subscribe(numbers).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(0).     endpoint.assertIsSatisfied(200). }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:numbers").to("mock:endpoint"). }
false;public;0;26;;@Test public void testOnNextHeaderForwarded() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:numbers").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     Subscriber<Integer> numbers = CamelReactiveStreams.get(context).streamSubscriber("numbers", Integer.class).     context.start().     Flowable.just(1).subscribe(numbers).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE, "onNext").     endpoint.expectedMessageCount(1).     endpoint.assertIsSatisfied().     Exchange ex = endpoint.getExchanges().get(0).     assertEquals(1, ex.getIn().getBody()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:numbers?forwardOnError=true").to("mock:endpoint"). }
false;public;0;35;;@Test public void testOnErrorHeaderForwarded() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:numbers?forwardOnError=true").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     Subscriber<Integer> numbers = CamelReactiveStreams.get(context).streamSubscriber("numbers", Integer.class).     context.start().     RuntimeException ex = new RuntimeException("1").     Flowable.just(1).map(n -> {         if (n == 1) {             throw ex.         }         return n.     }).subscribe(numbers).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(1).     endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE, "onError").     endpoint.assertIsSatisfied().     Exchange exch = endpoint.getExchanges().get(0).     assertEquals(ex, exch.getIn().getBody()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:numbers").to("mock:endpoint"). }
false;public;0;31;;@Test public void testOnErrorHeaderNotForwarded() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:numbers").to("mock:endpoint").         }     }.addRoutesToCamelContext(context).     Subscriber<Integer> numbers = CamelReactiveStreams.get(context).streamSubscriber("numbers", Integer.class).     context.start().     RuntimeException ex = new RuntimeException("1").     Flowable.just(1).map(n -> {         if (n == 1) {             throw ex.         }         return n.     }).subscribe(numbers).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(0).     endpoint.assertIsSatisfied(200). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
