commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testFromDirect() throws Exception {     Publisher<Integer> data = camel.from("direct:endpoint", Integer.class).     BlockingQueue<Integer> queue = new LinkedBlockingDeque<>().     Flowable.fromPublisher(data).map(i -> -i).doOnNext(queue::add).subscribe().     context.start().     template.sendBody("direct:endpoint", 1).     Integer res = queue.poll(1, TimeUnit.SECONDS).     assertNotNull(res).     assertEquals(-1, res.intValue()). }
false;public;0;21;;@Test public void testFromDirectOnHotContext() throws Exception {     context.start().     Thread.sleep(200).     Publisher<Integer> data = camel.from("direct:endpoint", Integer.class).     BlockingQueue<Integer> queue = new LinkedBlockingDeque<>().     Flowable.fromPublisher(data).map(i -> -i).doOnNext(queue::add).subscribe().     template.sendBody("direct:endpoint", 1).     Integer res = queue.poll(1, TimeUnit.SECONDS).     assertNotNull(res).     assertEquals(-1, res.intValue()). }
false;public;0;13;;@Test public void testDirectCall() throws Exception {     context.start().     BlockingQueue<String> queue = new LinkedBlockingDeque<>().     Flowable.just(1, 2, 3).flatMap(camel.to("bean:hello", String.class)::apply).doOnNext(queue::add).subscribe().     check3HelloInQueue(queue). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:data").to("mock:result"). }
false;public;0;27;;@Test public void testDirectSendAndForget() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:data").to("mock:result").         }     }.addRoutesToCamelContext(context).     context.start().     Flowable.just(1, 2, 3).subscribe(camel.subscriber("direct:data", Integer.class)).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     mock.assertIsSatisfied().     int idx = 1.     for (Exchange ex : mock.getExchanges()) {         Integer num = ex.getIn().getBody(Integer.class).         assertEquals(new Integer(idx++), num).     } }
false;public;0;13;;@Test public void testDirectCallOverload() throws Exception {     context.start().     BlockingQueue<String> queue = new LinkedBlockingDeque<>().     Flowable.just(1, 2, 3).flatMap(e -> camel.to("bean:hello", e, String.class)).doOnNext(queue::add).subscribe().     check3HelloInQueue(queue). }
false;public;0;14;;@Test public void testDirectCallWithExchange() throws Exception {     context.start().     BlockingQueue<String> queue = new LinkedBlockingDeque<>().     Flowable.just(1, 2, 3).flatMap(camel.to("bean:hello")::apply).map(ex -> ex.getOut().getBody(String.class)).doOnNext(queue::add).subscribe().     check3HelloInQueue(queue). }
false;private;1;8;;private void check3HelloInQueue(BlockingQueue<String> queue) throws InterruptedException {     Set<String> res = new HashSet<>().     res.add(queue.poll(1, TimeUnit.SECONDS)).     res.add(queue.poll(1, TimeUnit.SECONDS)).     res.add(queue.poll(1, TimeUnit.SECONDS)).     Assertions.assertThat(res).containsExactlyInAnyOrder("Hello 1", "Hello 2", "Hello 3"). }
false;public;0;14;;@Test public void testDirectCallWithExchangeOverload() throws Exception {     context.start().     BlockingQueue<String> queue = new LinkedBlockingDeque<>().     Flowable.just(1, 2, 3).flatMap(e -> camel.to("bean:hello", e)).map(ex -> ex.getOut().getBody(String.class)).doOnNext(queue::add).subscribe().     check3HelloInQueue(queue). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:proxy").to("bean:hello").setBody().simple("proxy to ${body}"). }
false;public;0;26;;@Test public void testProxiedDirectCall() throws Exception {     context.start().     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:proxy").to("bean:hello").setBody().simple("proxy to ${body}").         }     }.addRoutesToCamelContext(context).     BlockingQueue<String> queue = new LinkedBlockingDeque<>().     Flowable.just(1, 2, 3).flatMap(camel.to("direct:proxy", String.class)::apply).doOnNext(queue::add).subscribe().     for (int i = 1. i <= 3. i++) {         String res = queue.poll(1, TimeUnit.SECONDS).         assertEquals("proxy to Hello " + i, res).     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest"). }
false;public;0;38;;@Test public void testDirectCallFromCamel() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest").         }     }.addRoutesToCamelContext(context).     context.start().     camel.process("direct:stream", p -> Flowable.fromPublisher(p).map(exchange -> {         int val = exchange.getIn().getBody(Integer.class).         exchange.getOut().setBody(-val).         return exchange.     })).     for (int i = 1. i <= 3. i++) {         template.sendBody("direct:source", i).     }     MockEndpoint mock = getMockEndpoint("mock:dest").     mock.expectedMessageCount(3).     mock.assertIsSatisfied().     int id = 1.     for (Exchange ex : mock.getExchanges()) {         String content = ex.getIn().getBody(String.class).         assertEquals("after stream: " + (-id++), content).     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest"). }
false;public;0;34;;@Test public void testDirectCallFromCamelWithConversion() throws Exception {     new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest").         }     }.addRoutesToCamelContext(context).     context.start().     camel.process("direct:stream", Integer.class, p -> Flowable.fromPublisher(p).map(i -> -i)).     for (int i = 1. i <= 3. i++) {         template.sendBody("direct:source", i).     }     MockEndpoint mock = getMockEndpoint("mock:dest").     mock.expectedMessageCount(3).     mock.assertIsSatisfied().     int id = 1.     for (Exchange ex : mock.getExchanges()) {         String content = ex.getIn().getBody(String.class).         assertEquals("after stream: " + (-id++), content).     } }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("hello", new SampleBean()).     return registry. }
false;public;1;3;;public String hello(String name) {     return "Hello " + name. }
