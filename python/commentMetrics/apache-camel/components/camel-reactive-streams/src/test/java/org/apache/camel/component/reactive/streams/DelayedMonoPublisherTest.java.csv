commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     service = new ScheduledThreadPoolExecutor(3). }
false;public;0;5;;@After public void tearDown() throws Exception {     service.shutdown().     service.awaitTermination(1, TimeUnit.SECONDS). }
false;public;0;19;;@Test public void testAlreadyAvailable() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     pub.setData(5).     LinkedList<Integer> data = new LinkedList<>().     CountDownLatch latch = new CountDownLatch(1).     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(1, data.size()).     assertEquals(5, data.get(0).intValue()). }
false;public;0;23;;@Test public void testExceptionAlreadyAvailable() throws Exception {     Exception ex = new RuntimeException("An exception").     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     pub.setException(ex).     LinkedList<Throwable> exceptions = new LinkedList<>().     CountDownLatch latch = new CountDownLatch(1).     Flowable.fromPublisher(pub).subscribe(item -> {     }, e -> {         exceptions.add(e).         latch.countDown().     }).     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(1, exceptions.size()).     assertEquals(ex, exceptions.get(0)). }
false;public;0;21;;@Test public void testAvailableSoon() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     LinkedList<Integer> data = new LinkedList<>().     CountDownLatch latch = new CountDownLatch(1).     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     Thread.yield().     pub.setData(5).     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(1, data.size()).     assertEquals(5, data.get(0).intValue()). }
false;public;0;21;;@Test public void testAvailableLater() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     LinkedList<Integer> data = new LinkedList<>().     CountDownLatch latch = new CountDownLatch(1).     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     Thread.sleep(200).     pub.setData(5).     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(1, data.size()).     assertEquals(5, data.get(0).intValue()). }
false;public;0;28;;@Test public void testMultipleSubscribers() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     ConcurrentLinkedDeque<Integer> data = new ConcurrentLinkedDeque<>().     CountDownLatch latch = new CountDownLatch(2).     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     Thread.sleep(200).     pub.setData(5).     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(2, data.size()).     for (Integer n : data) {         assertEquals(5, n.intValue()).     } }
false;public;0;28;;@Test public void testMultipleSubscribersMixedArrival() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     ConcurrentLinkedDeque<Integer> data = new ConcurrentLinkedDeque<>().     CountDownLatch latch = new CountDownLatch(2).     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     Thread.sleep(200).     pub.setData(5).     Flowable.fromPublisher(pub).doOnNext(data::add).doOnComplete(latch::countDown).subscribe().     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(2, data.size()).     for (Integer n : data) {         assertEquals(5, n.intValue()).     } }
false;public;0;34;;@Test public void testMultipleSubscribersMixedArrivalException() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     Exception ex = new RuntimeException("An exception").     ConcurrentLinkedDeque<Throwable> exceptions = new ConcurrentLinkedDeque<>().     CountDownLatch latch = new CountDownLatch(2).     Flowable.fromPublisher(pub).subscribe(item -> {     }, e -> {         exceptions.add(e).         latch.countDown().     }).     Thread.sleep(200).     pub.setException(ex).     Flowable.fromPublisher(pub).subscribe(item -> {     }, e -> {         exceptions.add(e).         latch.countDown().     }).     assertTrue(latch.await(1, TimeUnit.SECONDS)).     assertEquals(2, exceptions.size()).     for (Throwable t : exceptions) {         assertEquals(ex, t).     } }
false;public;1;4;;@Override public void onNext(Integer o) {     queue.add(o). }
false;public;0;24;;@Test public void testDelayedRequest() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     pub.setData(2).     BlockingQueue<Integer> queue = new LinkedBlockingDeque<>().     TestSubscriber<Integer> sub = new TestSubscriber<Integer>() {          @Override         public void onNext(Integer o) {             queue.add(o).         }     }.     sub.setInitiallyRequested(0).     pub.subscribe(sub).     Thread.sleep(100).     sub.request(1).     Integer res = queue.poll(1, TimeUnit.SECONDS).     assertEquals(new Integer(2), res). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testDataOrExceptionAllowed() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     Exception ex = new RuntimeException("An exception").     pub.setException(ex).     pub.setData(1). }
false;public;0;7;;@Test(expected = IllegalStateException.class) public void testDataOrExceptionAllowed2() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     pub.setData(1).     Exception ex = new RuntimeException("An exception").     pub.setException(ex). }
false;public;0;6;;@Test(expected = IllegalStateException.class) public void testOnlyOneDataAllowed() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     pub.setData(1).     pub.setData(2). }
false;public;0;6;;@Test(expected = IllegalStateException.class) public void testOnlyOneExceptionAllowed() throws Exception {     DelayedMonoPublisher<Integer> pub = new DelayedMonoPublisher<>(service).     pub.setException(new RuntimeException("An exception")).     pub.setException(new RuntimeException("An exception")). }
