commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Override public void run() {     synchronized (monitor) {         boolean wasNonEmpty = it.hasNext().         while (requested.longValue() > 0 && it.hasNext()) {             T d = it.next().             requested.decrementAndGet().             if (delay > 0) {                 try {                     Thread.sleep(delay).                 } catch (InterruptedException ex) {                 }             }             subscriber.onNext(d).         }         if (wasNonEmpty && !it.hasNext()) {             // data cannot be added to this test publisher             subscriber.onComplete().         }     } }
false;public;1;30;;@Override public void request(long l) {     this.requested.addAndGet(l).     new Thread() {          @Override         public void run() {             synchronized (monitor) {                 boolean wasNonEmpty = it.hasNext().                 while (requested.longValue() > 0 && it.hasNext()) {                     T d = it.next().                     requested.decrementAndGet().                     if (delay > 0) {                         try {                             Thread.sleep(delay).                         } catch (InterruptedException ex) {                         }                     }                     subscriber.onNext(d).                 }                 if (wasNonEmpty && !it.hasNext()) {                     // data cannot be added to this test publisher                     subscriber.onComplete().                 }             }         }     }.start(). }
false;public;0;4;;@Override public boolean hasNext() {     return false. }
false;public;0;4;;@Override public T next() {     throw new NoSuchElementException(). }
false;public;0;3;;public void run() {     subscriber.onComplete(). }
false;public;0;22;;@Override public void cancel() {     synchronized (monitor) {         this.requested.set(0).         this.it = new Iterator<T>() {              @Override             public boolean hasNext() {                 return false.             }              @Override             public T next() {                 throw new NoSuchElementException().             }         }.         new Thread() {              public void run() {                 subscriber.onComplete().             }         }.start().     } }
false;public;1;65;;@Override public void subscribe(Subscriber<? super T> subscriber) {     subscriber.onSubscribe(new Subscription() {          private Iterator<T> it = data.iterator().          private AtomicLong requested = new AtomicLong(0).          private Object monitor = new Object().          @Override         public void request(long l) {             this.requested.addAndGet(l).             new Thread() {                  @Override                 public void run() {                     synchronized (monitor) {                         boolean wasNonEmpty = it.hasNext().                         while (requested.longValue() > 0 && it.hasNext()) {                             T d = it.next().                             requested.decrementAndGet().                             if (delay > 0) {                                 try {                                     Thread.sleep(delay).                                 } catch (InterruptedException ex) {                                 }                             }                             subscriber.onNext(d).                         }                         if (wasNonEmpty && !it.hasNext()) {                             // data cannot be added to this test publisher                             subscriber.onComplete().                         }                     }                 }             }.start().         }          @Override         public void cancel() {             synchronized (monitor) {                 this.requested.set(0).                 this.it = new Iterator<T>() {                      @Override                     public boolean hasNext() {                         return false.                     }                      @Override                     public T next() {                         throw new NoSuchElementException().                     }                 }.                 new Thread() {                      public void run() {                         subscriber.onComplete().                     }                 }.start().             }         }     }). }
