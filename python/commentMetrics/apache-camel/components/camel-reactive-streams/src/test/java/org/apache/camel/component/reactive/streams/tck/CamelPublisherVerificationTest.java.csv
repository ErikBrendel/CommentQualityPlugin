commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("timer:tick?delay=500&period=50&repeatCount=" + l).to("reactive-streams:prod"). }
false;public;1;23;;@Override public Publisher<Exchange> createPublisher(long l) {     init().     RouteBuilder builder = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:tick?delay=500&period=50&repeatCount=" + l).to("reactive-streams:prod").         }     }.     Publisher<Exchange> pub = CamelReactiveStreams.get(context).fromStream("prod").     try {         builder.addRoutesToCamelContext(context).         context.start().     } catch (Exception e) {         throw new RuntimeException(e).     }     return pub. }
false;public;0;5;;@Override public long maxElementsFromPublisher() {     // == Long.MAX_VALUE == unbounded     return publisherUnableToSignalOnComplete(). }
false;public;0;4;;@Override public Publisher<Exchange> createFailedPublisher() {     return null. }
false;protected;0;8;;protected void init() {     tearDown().     this.context = new DefaultCamelContext().     DefaultShutdownStrategy shutdownStrategy = new DefaultShutdownStrategy().     shutdownStrategy.setShutdownNowOnTimeout(true).     shutdownStrategy.setTimeout(1).     this.context.setShutdownStrategy(shutdownStrategy). }
false;protected;0;10;;@AfterTest protected void tearDown() {     try {         if (this.context != null) {             this.context.stop().         }     } catch (Exception ex) {         throw new RuntimeException(ex).     } }
