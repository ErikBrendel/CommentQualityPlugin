commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:sub?maxInflightExchanges=20").to("log:INFO"). }
false;public;0;23;;@Override public Subscriber<Exchange> createSubscriber() {     init().     RouteBuilder builder = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:sub?maxInflightExchanges=20").to("log:INFO").         }     }.     Subscriber<Exchange> sub = CamelReactiveStreams.get(context).streamSubscriber("sub").     try {         builder.addRoutesToCamelContext(context).         context.start().     } catch (Exception e) {         throw new RuntimeException(e).     }     return sub. }
false;public;1;6;;@Override public Exchange createElement(int element) {     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody(element).     return exchange. }
false;protected;0;8;;protected void init() {     tearDown().     this.context = new DefaultCamelContext().     DefaultShutdownStrategy shutdownStrategy = new DefaultShutdownStrategy().     shutdownStrategy.setShutdownNowOnTimeout(true).     shutdownStrategy.setTimeout(1).     this.context.setShutdownStrategy(shutdownStrategy). }
false;protected;0;10;;@AfterTest protected void tearDown() {     try {         if (this.context != null) {             this.context.stop().         }     } catch (Exception ex) {         throw new RuntimeException(ex).     } }
