commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;@Test public void testConversion() throws Exception {     CountDownLatch latch = new CountDownLatch(3).     List<Integer> integers = new LinkedList<>().     Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("pub", Exchange.class)).map(x -> x.getIn().getBody(Integer.class)).subscribe(n -> {         integers.add(n).         latch.countDown().     }).     Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("pub")).map(x -> x.getIn().getBody(Integer.class)).subscribe(n -> {         integers.add(n).         latch.countDown().     }).     Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("pub", Integer.class)).subscribe(n -> {         integers.add(n).         latch.countDown().     }).     context.start().     latch.await(5, TimeUnit.SECONDS).     assertEquals(3, integers.size()).     for (int i : integers) {         assertEquals(123, i).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("timer:tick?period=50&repeatCount=1").setBody().constant(123).to("reactive-streams:pub"). }
false;protected;0;11;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:tick?period=50&repeatCount=1").setBody().constant(123).to("reactive-streams:pub").         }     }. }
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return true. }
