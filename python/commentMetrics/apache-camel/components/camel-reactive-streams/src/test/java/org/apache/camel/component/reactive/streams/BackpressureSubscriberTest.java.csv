commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testBackpressure() throws Exception {     long start = System.currentTimeMillis().     Observable.range(0, 10).toFlowable(BackpressureStrategy.BUFFER).subscribe(CamelReactiveStreams.get(context).streamSubscriber("slowNumbers", Integer.class)).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(10).     endpoint.assertIsSatisfied().     long end = System.currentTimeMillis().     // Maximum one inflight exchange, even if multiple consumer threads are present     // Must take at least 50 * 10 = 500ms     assertTrue("Exchange completed too early", end - start >= 500). }
false;public;0;17;;@Test public void testSlowerBackpressure() throws Exception {     long start = System.currentTimeMillis().     Observable.range(0, 2).toFlowable(BackpressureStrategy.BUFFER).subscribe(CamelReactiveStreams.get(context).streamSubscriber("slowerNumbers", Integer.class)).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(2).     endpoint.assertIsSatisfied().     long end = System.currentTimeMillis().     // Maximum one inflight exchange, even if multiple consumer threads are present     // Must take at least 300 * 2 = 600ms     assertTrue("Exchange completed too early", end - start >= 600). }
false;public;0;16;;@Test public void testParallelSlowBackpressure() throws Exception {     long start = System.currentTimeMillis().     Flowable.range(0, 40).subscribe(CamelReactiveStreams.get(context).streamSubscriber("parallelSlowNumbers", Integer.class)).     MockEndpoint endpoint = getMockEndpoint("mock:endpoint").     endpoint.expectedMessageCount(40).     endpoint.assertIsSatisfied().     long end = System.currentTimeMillis().     // Maximum 5 inflight exchanges     // Must take at least 100 * (40 / 5) = 800ms     assertTrue("Exchange completed too early", end - start >= 800). }
false;public;0;14;;@Override public void configure() throws Exception {     from("reactive-streams:slowNumbers?concurrentConsumers=10&maxInflightExchanges=1").process(x -> Thread.sleep(50)).to("mock:endpoint").     from("reactive-streams:slowerNumbers?concurrentConsumers=10&maxInflightExchanges=1").process(x -> Thread.sleep(300)).to("mock:endpoint").     from("reactive-streams:parallelSlowNumbers?concurrentConsumers=10&maxInflightExchanges=5").process(x -> Thread.sleep(100)).to("mock:endpoint"). }
false;protected;0;19;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("reactive-streams:slowNumbers?concurrentConsumers=10&maxInflightExchanges=1").process(x -> Thread.sleep(50)).to("mock:endpoint").             from("reactive-streams:slowerNumbers?concurrentConsumers=10&maxInflightExchanges=1").process(x -> Thread.sleep(300)).to("mock:endpoint").             from("reactive-streams:parallelSlowNumbers?concurrentConsumers=10&maxInflightExchanges=5").process(x -> Thread.sleep(100)).to("mock:endpoint").         }     }. }
