commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void subscribe(Subscriber<? super T> subscriber) {     Objects.requireNonNull(subscriber, "subscriber must not be null").     MonoSubscription sub = new MonoSubscription(subscriber).     subscriptions.add(sub).     subscriber.onSubscribe(sub).     flushCycle(). }
false;public;0;3;;public T getData() {     return data. }
false;public;1;11;;public void setData(T data) {     Objects.requireNonNull(data, "data must be not null").     if (this.data != null) {         throw new IllegalStateException("data has already been set").     } else if (this.exception != null) {         throw new IllegalStateException("an exception has already been set").     }     this.data = data.     flushCycle(). }
false;public;0;3;;public Throwable getException() {     return exception. }
false;public;1;11;;public void setException(Throwable exception) {     Objects.requireNonNull(exception, "exception must be not null").     if (this.data != null) {         throw new IllegalStateException("data has already been set").     } else if (this.exception != null) {         throw new IllegalStateException("an exception has already been set").     }     this.exception = exception.     flushCycle(). }
false;private;0;32;;private void flushCycle() {     boolean notRunning = flushing.compareAndSet(false, true).     if (notRunning) {         workerPool.execute(() -> {             try {                 List<MonoSubscription> completed = new LinkedList<>().                 for (MonoSubscription sub : this.subscriptions) {                     sub.flush().                     if (sub.isTerminated()) {                         completed.add(sub).                     }                 }                 this.subscriptions.removeAll(completed).             } finally {                 flushing.set(false).             }             boolean runAgain = false.             for (MonoSubscription sub : this.subscriptions) {                 if (sub.isReady()) {                     runAgain = true.                     break.                 }             }             if (runAgain) {                 flushCycle().             }         }).     } }
false;public;1;22;;@Override public void request(long l) {     synchronized (this) {         if (terminated) {             // just ignore the request             return.         }     }     if (l <= 0) {         subscriber.onError(new IllegalArgumentException("3.9")).         synchronized (this) {             terminated = true.         }     } else {         synchronized (this) {             requested = true.         }     }     flushCycle(). }
false;public;0;16;;public void flush() {     synchronized (this) {         if (!isReady()) {             return.         }         terminated = true.     }     if (data != null) {         subscriber.onNext(data).         subscriber.onComplete().     } else {         subscriber.onError(exception).     } }
false;public;0;3;;public boolean isTerminated() {     return terminated. }
false;public;0;3;;public boolean isReady() {     return !terminated && requested && (data != null || exception != null). }
false;public,synchronized;0;4;;@Override public synchronized void cancel() {     terminated = true. }
