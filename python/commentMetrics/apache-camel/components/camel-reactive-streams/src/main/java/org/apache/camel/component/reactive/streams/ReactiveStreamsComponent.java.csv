commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// **************************************** // Lifecycle/Implementation // **************************************** @Override protected void doStart() throws Exception {     // force creation of ReactiveStreamsService     getReactiveStreamsService().     super.doStart(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(service).     super.doStop(). }
false;protected;3;13;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     ReactiveStreamsEndpoint endpoint = new ReactiveStreamsEndpoint(uri, this).     endpoint.setStream(remaining).     setProperties(endpoint, parameters).     if (endpoint.getBackpressureStrategy() == null) {         endpoint.setBackpressureStrategy(this.backpressureStrategy).     }     return endpoint. }
false;public;0;3;;// **************************************** // Properties // **************************************** public ReactiveStreamsEngineConfiguration getInternalEngineConfiguration() {     return internalEngineConfiguration. }
true;public;1;3;/**  * Configures the internal engine for Reactive Streams.  */ ;/**  * Configures the internal engine for Reactive Streams.  */ public void setInternalEngineConfiguration(ReactiveStreamsEngineConfiguration internalEngineConfiguration) {     this.internalEngineConfiguration = internalEngineConfiguration. }
false;public;0;3;;public ReactiveStreamsBackpressureStrategy getBackpressureStrategy() {     return backpressureStrategy. }
true;public;1;3;/**  * The backpressure strategy to use when pushing events to a slow subscriber.  */ ;/**  * The backpressure strategy to use when pushing events to a slow subscriber.  */ public void setBackpressureStrategy(ReactiveStreamsBackpressureStrategy backpressureStrategy) {     this.backpressureStrategy = backpressureStrategy. }
false;public;0;3;;public String getServiceType() {     return serviceType. }
true;public;1;3;/**  * Set the type of the underlying reactive streams implementation to use. The  * implementation is looked up from the registry or using a ServiceLoader, the  * default implementation is DefaultCamelReactiveStreamsService  *  * @param serviceType the reactive service implementation name type  */ ;/**  * Set the type of the underlying reactive streams implementation to use. The  * implementation is looked up from the registry or using a ServiceLoader, the  * default implementation is DefaultCamelReactiveStreamsService  *  * @param serviceType the reactive service implementation name type  */ public void setServiceType(String serviceType) {     this.serviceType = serviceType. }
true;public,synchronized;0;18;/**  * Lazy creation of the CamelReactiveStreamsService  *  * @return the reactive streams service  */ ;/**  * Lazy creation of the CamelReactiveStreamsService  *  * @return the reactive streams service  */ public synchronized CamelReactiveStreamsService getReactiveStreamsService() {     if (service == null) {         this.service = ReactiveStreamsHelper.resolveReactiveStreamsService(getCamelContext(), this.serviceType, this.internalEngineConfiguration).         try {             // Start the service and add it to the Camel context to expose managed attributes             getCamelContext().addService(service, true, true).         } catch (Exception e) {             throw new RuntimeCamelException(e).         }     }     return service. }
false;public,static,final;1;6;;// **************************************** // Helpers // **************************************** public static final ReactiveStreamsComponent withServiceType(String serviceType) {     ReactiveStreamsComponent component = new ReactiveStreamsComponent().     component.setServiceType(serviceType).     return component. }
