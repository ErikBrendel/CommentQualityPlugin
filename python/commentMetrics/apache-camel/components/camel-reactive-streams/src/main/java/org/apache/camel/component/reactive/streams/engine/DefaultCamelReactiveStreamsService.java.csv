commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getId() {     return ReactiveStreamsConstants.DEFAULT_SERVICE_NAME. }
false;protected;0;10;;protected void doInit() {     if (this.workerPool == null) {         this.workerPool = context.getExecutorServiceManager().newThreadPool(this, configuration.getThreadPoolName(), configuration.getThreadPoolMinSize(), configuration.getThreadPoolMaxSize()).     } }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (this.workerPool != null) {         context.getExecutorServiceManager().shutdownNow(this.workerPool).         this.workerPool = null.     } }
false;public;1;4;;@Override public Publisher<Exchange> fromStream(String name) {     return new UnwrappingPublisher(getPayloadPublisher(name)). }
false;public;2;8;;@SuppressWarnings("unchecked") public <T> Publisher<T> fromStream(String name, Class<T> cls) {     if (Exchange.class.equals(cls)) {         return (Publisher<T>) fromStream(name).     }     return new ConvertingPublisher<>(fromStream(name), cls). }
false;public;1;4;;@Override public ReactiveStreamsCamelSubscriber streamSubscriber(String name) {     return subscribers.computeIfAbsent(name, n -> new ReactiveStreamsCamelSubscriber(name)). }
false;public;2;8;;@SuppressWarnings("unchecked") public <T> Subscriber<T> streamSubscriber(String name, Class<T> type) {     if (Exchange.class.equals(type)) {         return (Subscriber<T>) streamSubscriber(name).     }     return new ConvertingSubscriber<>(streamSubscriber(name), context). }
false;public;2;4;;@Override public void sendCamelExchange(String name, Exchange exchange) {     getPayloadPublisher(name).publish(exchange). }
false;public;2;5;;@Override public Publisher<Exchange> toStream(String name, Object data) {     Exchange exchange = ReactiveStreamsHelper.convertToExchange(context, data).     return doRequest(name, exchange). }
false;public;1;4;;@Override public Function<?, ? extends Publisher<Exchange>> toStream(String name) {     return data -> toStream(name, data). }
false;public;3;4;;@Override public <T> Publisher<T> toStream(String name, Object data, Class<T> type) {     return new ConvertingPublisher<>(toStream(name, data), type). }
false;public;1;4;;@Override public void onComplete(Exchange exchange) {     publisher.setData(exchange). }
false;public;1;8;;@Override public void onFailure(Exchange exchange) {     Throwable throwable = exchange.getException().     if (throwable == null) {         throwable = new IllegalStateException("Unknown Exception").     }     publisher.setException(throwable). }
false;protected;2;29;;protected Publisher<Exchange> doRequest(String name, Exchange data) {     ReactiveStreamsConsumer consumer = streamSubscriber(name).getConsumer().     if (consumer == null) {         throw new IllegalStateException("No consumers attached to the stream " + name).     }     DelayedMonoPublisher<Exchange> publisher = new DelayedMonoPublisher<>(this.workerPool).     data.addOnCompletion(new Synchronization() {          @Override         public void onComplete(Exchange exchange) {             publisher.setData(exchange).         }          @Override         public void onFailure(Exchange exchange) {             Throwable throwable = exchange.getException().             if (throwable == null) {                 throwable = new IllegalStateException("Unknown Exception").             }             publisher.setException(throwable).         }     }).     consumer.process(data, doneSync -> {     }).     return publisher. }
false;public;2;4;;@Override public <T> Function<Object, Publisher<T>> toStream(String name, Class<T> type) {     return data -> toStream(name, data, type). }
false;private;1;4;;private CamelPublisher getPayloadPublisher(String name) {     publishers.computeIfAbsent(name, n -> new CamelPublisher(this.workerPool, this.context, n)).     return publishers.get(name). }
false;public;0;5;;@Override public void configure() throws Exception {     from(u).to("reactive-streams:" + uuid). }
false;public;1;20;;@Override public Publisher<Exchange> from(String uri) {     publishedUriToStream.computeIfAbsent(uri, u -> {         try {             String uuid = context.getUuidGenerator().generateUuid().             new RouteBuilder() {                  @Override                 public void configure() throws Exception {                     from(u).to("reactive-streams:" + uuid).                 }             }.addRoutesToCamelContext(context).             return uuid.         } catch (Exception e) {             throw new IllegalStateException("Unable to create source reactive stream from direct URI: " + uri, e).         }     }).     return fromStream(publishedUriToStream.get(uri)). }
false;public;2;4;;@Override public <T> Publisher<T> from(String uri, Class<T> type) {     return new ConvertingPublisher<>(from(uri), type). }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:" + uuid).to(uri). }
false;public;1;17;;@Override public Subscriber<Exchange> subscriber(String uri) {     try {         String uuid = context.getUuidGenerator().generateUuid().         new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("reactive-streams:" + uuid).to(uri).             }         }.addRoutesToCamelContext(context).         return streamSubscriber(uuid).     } catch (Exception e) {         throw new IllegalStateException("Unable to create source reactive stream towards direct URI: " + uri, e).     } }
false;public;2;4;;@Override public <T> Subscriber<T> subscriber(String uri, Class<T> type) {     return new ConvertingSubscriber<>(subscriber(uri), context). }
false;public;0;5;;@Override public void configure() throws Exception {     from("reactive-streams:" + uuid).to(u). }
false;public;2;20;;@Override public Publisher<Exchange> to(String uri, Object data) {     requestedUriToStream.computeIfAbsent(uri, u -> {         try {             String uuid = context.getUuidGenerator().generateUuid().             new RouteBuilder() {                  @Override                 public void configure() throws Exception {                     from("reactive-streams:" + uuid).to(u).                 }             }.addRoutesToCamelContext(context).             return uuid.         } catch (Exception e) {             throw new IllegalStateException("Unable to create requested reactive stream from direct URI: " + uri, e).         }     }).     return toStream(requestedUriToStream.get(uri), data). }
false;public;1;4;;@Override public Function<Object, Publisher<Exchange>> to(String uri) {     return data -> to(uri, data). }
false;public;3;4;;@Override public <T> Publisher<T> to(String uri, Object data, Class<T> type) {     return new ConvertingPublisher<>(to(uri, data), type). }
false;public;2;4;;@Override public <T> Function<Object, Publisher<T>> to(String uri, Class<T> type) {     return data -> to(uri, data, type). }
false;public;0;10;;@Override public void configure() throws Exception {     from(uri).process(exchange -> {         Exchange copy = exchange.copy().         Object result = processor.apply(new MonoPublisher<>(copy)).         exchange.getIn().setBody(result).     }).process(unwrapStreamProcessorSupplier.get()). }
false;public;2;19;;@Override public void process(String uri, Function<? super Publisher<Exchange>, ?> processor) {     try {         new RouteBuilder() {              @Override             public void configure() throws Exception {                 from(uri).process(exchange -> {                     Exchange copy = exchange.copy().                     Object result = processor.apply(new MonoPublisher<>(copy)).                     exchange.getIn().setBody(result).                 }).process(unwrapStreamProcessorSupplier.get()).             }         }.addRoutesToCamelContext(context).     } catch (Exception e) {         throw new IllegalStateException("Unable to add reactive stream processor to the direct URI: " + uri, e).     } }
false;public;3;4;;@Override public <T> void process(String uri, Class<T> type, Function<? super Publisher<T>, ?> processor) {     process(uri, exPub -> processor.apply(new ConvertingPublisher<>(exPub, type))). }
false;public;2;6;;@Override public ReactiveStreamsCamelSubscriber attachCamelConsumer(String name, ReactiveStreamsConsumer consumer) {     ReactiveStreamsCamelSubscriber subscriber = streamSubscriber(name).     subscriber.attachConsumer(consumer).     return subscriber. }
false;public;1;4;;@Override public void detachCamelConsumer(String name) {     streamSubscriber(name).detachConsumer(). }
false;public;2;4;;@Override public void attachCamelProducer(String name, ReactiveStreamsProducer producer) {     getPayloadPublisher(name).attachProducer(producer). }
false;public;1;4;;@Override public void detachCamelProducer(String name) {     getPayloadPublisher(name).detachProducer(). }
false;public;0;26;;@ManagedOperation(description = "Information about Camel Reactive subscribers") public TabularData camelSubscribers() {     try {         final TabularData answer = new TabularDataSupport(subscribersTabularType()).         subscribers.forEach((k, v) -> {             try {                 String name = k.                 long inflight = v.getInflightCount().                 long requested = v.getRequested().                 CompositeType ct = subscribersCompositeType().                 CompositeData data = new CompositeDataSupport(ct, new String[] { "name", "inflight", "requested" }, new Object[] { name, inflight, requested }).                 answer.put(data).             } catch (Exception e) {                 throw RuntimeCamelException.wrapRuntimeCamelException(e).             }         }).         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;38;;@ManagedOperation(description = "Information about Camel Reactive publishers") public TabularData camelPublishers() {     try {         final TabularData answer = new TabularDataSupport(publishersTabularType()).         publishers.forEach((k, v) -> {             try {                 String name = k.                 List<CamelSubscription> subscriptions = v.getSubscriptions().                 int subscribers = subscriptions.size().                 TabularData subscriptionData = new TabularDataSupport(subscriptionsTabularType()).                 CompositeType subCt = subscriptionsCompositeType().                 for (CamelSubscription sub : subscriptions) {                     String id = sub.getId().                     long bufferSize = sub.getBufferSize().                     String backpressure = sub.getBackpressureStrategy() != null ? sub.getBackpressureStrategy().name() : "".                     CompositeData subData = new CompositeDataSupport(subCt, new String[] { "name", "buffer size", "back pressure" }, new Object[] { id, bufferSize, backpressure }).                     subscriptionData.put(subData).                 }                 CompositeType ct = publishersCompositeType().                 CompositeData data = new CompositeDataSupport(ct, new String[] { "name", "subscribers", "subscriptions" }, new Object[] { name, subscribers, subscriptionData }).                 answer.put(data).             } catch (Exception e) {                 throw RuntimeCamelException.wrapRuntimeCamelException(e).             }         }).         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;private,static;0;4;;private static TabularType subscribersTabularType() throws OpenDataException {     CompositeType ct = subscribersCompositeType().     return new TabularType("subscribers", "Information about Camel Reactive subscribers", ct, new String[] { "name" }). }
false;private,static;0;6;;private static CompositeType subscribersCompositeType() throws OpenDataException {     return new CompositeType("subscriptions", "Subscriptions", new String[] { "name", "inflight", "requested" }, new String[] { "Name", "Inflight", "Requested" }, new OpenType[] { SimpleType.STRING, SimpleType.LONG, SimpleType.LONG }). }
false;private,static;0;6;;private static CompositeType publishersCompositeType() throws OpenDataException {     return new CompositeType("publishers", "Publishers", new String[] { "name", "subscribers", "subscriptions" }, new String[] { "Name", "Subscribers", "Subscriptions" }, new OpenType[] { SimpleType.STRING, SimpleType.INTEGER, subscriptionsTabularType() }). }
false;private,static;0;4;;private static TabularType subscriptionsTabularType() throws OpenDataException {     CompositeType ct = subscriptionsCompositeType().     return new TabularType("subscriptions", "Information about External Reactive subscribers", ct, new String[] { "name" }). }
false;private,static;0;6;;private static CompositeType subscriptionsCompositeType() throws OpenDataException {     return new CompositeType("subscriptions", "Subscriptions", new String[] { "name", "buffer size", "back pressure" }, new String[] { "Name", "Buffer Size", "Back Pressure" }, new OpenType[] { SimpleType.STRING, SimpleType.LONG, SimpleType.STRING }). }
false;private,static;0;4;;private static TabularType publishersTabularType() throws OpenDataException {     CompositeType ct = publishersCompositeType().     return new TabularType("publishers", "Information about Camel Reactive publishers", ct, new String[] { "name" }). }
