commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public <T> Collection<T> update(Deque<T> buffer, T newItem) {     // always buffer     buffer.addLast(newItem).     // never discard     return Collections.emptySet(). }
false;public;2;12;;@Override public <T> Collection<T> update(Deque<T> buffer, T newItem) {     if (buffer.size() > 0) {         // the buffer has another item, so discarding the incoming one         return Collections.singletonList(newItem).     } else {         // add the new item to the buffer, since it was empty         buffer.addLast(newItem).         // nothing is discarded         return Collections.emptySet().     } }
false;public;2;13;;@Override public <T> Collection<T> update(Deque<T> buffer, T newItem) {     Collection<T> discarded = Collections.emptySet().     if (buffer.size() > 0) {         // there should be an item in the buffer,         // so removing it to overwrite         discarded = Collections.singletonList(buffer.removeFirst()).     }     // add the new item to the buffer     // (it should be the only item in the buffer now)     buffer.addLast(newItem).     return discarded. }
true;public,abstract;2;1;/**  * Updates the buffer and returns a list of discarded elements (if any).  *  * @param buffer the buffer to update  * @param newItem the elment that should possibly be inserted  * @param <T> the generic type of the element  * @return the list of discarded elements  */ ;/**  * Updates the buffer and returns a list of discarded elements (if any).  *  * @param buffer the buffer to update  * @param newItem the elment that should possibly be inserted  * @param <T> the generic type of the element  * @return the list of discarded elements  */ public abstract <T> Collection<T> update(Deque<T> buffer, T newItem).
