commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public void onSubscribe(Subscription newSubscription) {     if (newSubscription == null) {         throw new NullPointerException("subscription is null").     } else if (newSubscription == this.subscription) {         throw new IllegalArgumentException("already subscribed to the subscription: " + newSubscription).     }     if (this.subscription != null) {         newSubscription.cancel().     } else {         this.subscription = newSubscription.         subscriber.onSubscribe(newSubscription).     } }
false;public;1;14;;@Override public void onNext(Exchange payload) {     Throwable error = null.     try {         subscriber.onNext(payload).     } catch (Throwable t) {         error = t.     }     DispatchCallback<Exchange> callback = ReactiveStreamsHelper.getCallback(payload).     if (callback != null) {         callback.processed(payload, error).     } }
false;public;1;4;;@Override public void onError(Throwable throwable) {     subscriber.onError(throwable). }
false;public;0;4;;@Override public void onComplete() {     subscriber.onComplete(). }
false;public;1;48;;@Override public void subscribe(Subscriber<? super Exchange> subscriber) {     delegate.subscribe(new Subscriber<Exchange>() {          private Subscription subscription.          @Override         public void onSubscribe(Subscription newSubscription) {             if (newSubscription == null) {                 throw new NullPointerException("subscription is null").             } else if (newSubscription == this.subscription) {                 throw new IllegalArgumentException("already subscribed to the subscription: " + newSubscription).             }             if (this.subscription != null) {                 newSubscription.cancel().             } else {                 this.subscription = newSubscription.                 subscriber.onSubscribe(newSubscription).             }         }          @Override         public void onNext(Exchange payload) {             Throwable error = null.             try {                 subscriber.onNext(payload).             } catch (Throwable t) {                 error = t.             }             DispatchCallback<Exchange> callback = ReactiveStreamsHelper.getCallback(payload).             if (callback != null) {                 callback.processed(payload, error).             }         }          @Override         public void onError(Throwable throwable) {             subscriber.onError(throwable).         }          @Override         public void onComplete() {             subscriber.onComplete().         }     }). }
