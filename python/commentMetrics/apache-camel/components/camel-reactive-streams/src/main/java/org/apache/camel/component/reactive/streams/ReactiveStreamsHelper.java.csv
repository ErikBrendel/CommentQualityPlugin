commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static DispatchCallback<Exchange> getCallback(Exchange exchange) {     return exchange.getIn().getHeader(ReactiveStreamsConstants.REACTIVE_STREAMS_CALLBACK, DispatchCallback.class). }
false;public,static;2;5;;public static DispatchCallback<Exchange> attachCallback(Exchange exchange, DispatchCallback<Exchange> callback) {     exchange.getIn().setHeader(ReactiveStreamsConstants.REACTIVE_STREAMS_CALLBACK, callback).     return callback. }
false;public,static;1;8;;public static DispatchCallback<Exchange> detachCallback(Exchange exchange) {     DispatchCallback<Exchange> callback = getCallback(exchange).     if (callback != null) {         exchange.getIn().removeHeader(ReactiveStreamsConstants.REACTIVE_STREAMS_CALLBACK).     }     return callback. }
false;public,static;1;3;;public static boolean invokeDispatchCallback(Exchange exchange) {     return invokeDispatchCallback(exchange, null). }
false;public,static;2;9;;public static boolean invokeDispatchCallback(Exchange exchange, Throwable error) {     DispatchCallback<Exchange> callback = getCallback(exchange).     if (callback != null) {         callback.processed(exchange, error).         return true.     }     return false. }
false;public,static;2;12;;public static Exchange convertToExchange(CamelContext context, Object data) {     Exchange exchange.     if (data instanceof Exchange) {         exchange = (Exchange) data.     } else {         exchange = new DefaultExchange(context).         exchange.setPattern(ExchangePattern.InOut).         exchange.getIn().setBody(data).     }     return exchange. }
false;public,static;3;5;;public static <T> T findInstance(CamelContext context, String name, Class<T> type) {     return ObjectHelper.isEmpty(name) ? CamelContextHelper.findByType(context, type) : CamelContextHelper.lookup(context, name, type). }
true;public,static;3;21;/**  * Helper to lookup/create an instance of {@link CamelReactiveStreamsService}  */ ;/**  * Helper to lookup/create an instance of {@link CamelReactiveStreamsService}  */ public static CamelReactiveStreamsService resolveReactiveStreamsService(CamelContext context, String serviceType, ReactiveStreamsEngineConfiguration configuration) {     // First try to find out if a service has already been bound to the registry     CamelReactiveStreamsService service = ReactiveStreamsHelper.findInstance(context, serviceType, CamelReactiveStreamsService.class).     if (service != null) {         // configured so let's return it as it is.         return service.     } else {         // Then try to find out if a service factory is bound to the registry         CamelReactiveStreamsServiceFactory factory = ReactiveStreamsHelper.findInstance(context, serviceType, CamelReactiveStreamsServiceFactory.class).         if (factory == null) {             // Try to find out a service factory with service loader style             // using the provided service with fallback to default one             factory = resolveServiceFactory(context, serviceType != null ? serviceType : ReactiveStreamsConstants.DEFAULT_SERVICE_NAME).         }         return factory.newInstance(context, configuration).     } }
false;public,static;2;13;;@SuppressWarnings("unchecked") public static CamelReactiveStreamsServiceFactory resolveServiceFactory(CamelContext context, String serviceType) {     try {         FactoryFinder finder = context.getFactoryFinder(ReactiveStreamsConstants.SERVICE_PATH).         Class<?> serviceClass = finder.findClass(serviceType).         return (CamelReactiveStreamsServiceFactory) context.getInjector().newInstance(serviceClass).     } catch (ClassNotFoundException e) {         throw new IllegalStateException("Class referenced in '" + ReactiveStreamsConstants.SERVICE_PATH + serviceType + "' not found", e).     } catch (Exception e) {         throw new IllegalStateException("Unable to create the reactive stream service defined in '" + ReactiveStreamsConstants.SERVICE_PATH + serviceType + "'", e).     } }
