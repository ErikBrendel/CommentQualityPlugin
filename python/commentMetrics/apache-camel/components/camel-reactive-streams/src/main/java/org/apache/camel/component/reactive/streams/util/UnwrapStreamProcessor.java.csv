commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onSubscribe(Subscription subscription) {     subscription.request(Long.MAX_VALUE). }
false;public;1;4;;@Override public void onNext(Object o) {     data.add(o). }
false;public;1;6;;@Override public void onError(Throwable throwable) {     addData().     exchange.setException(throwable).     callback.done(false). }
false;public;0;5;;@Override public void onComplete() {     addData().     callback.done(false). }
false;private;0;22;;private void addData() {     Object body.     if (data.size() == 0) {         body = null.     } else if (data.size() == 1) {         body = data.get(0).     } else {         body = data.     }     if (body instanceof Exchange && !exchange.equals(body)) {         // copy into the original Exchange         Exchange copy = (Exchange) body.         exchange.setException(copy.getException()).         exchange.setIn(copy.getIn()).         exchange.setOut(copy.getOut()).         exchange.getProperties().clear().         exchange.getProperties().putAll(copy.getProperties()).     } else {         exchange.getOut().setBody(body).     } }
false;public;2;64;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     Object content = exchange.getIn().getBody().     if (content instanceof Publisher) {         Publisher<?> pub = Publisher.class.cast(content).         List<Object> data = new LinkedList<>().         pub.subscribe(new Subscriber<Object>() {              @Override             public void onSubscribe(Subscription subscription) {                 subscription.request(Long.MAX_VALUE).             }              @Override             public void onNext(Object o) {                 data.add(o).             }              @Override             public void onError(Throwable throwable) {                 addData().                 exchange.setException(throwable).                 callback.done(false).             }              @Override             public void onComplete() {                 addData().                 callback.done(false).             }              private void addData() {                 Object body.                 if (data.size() == 0) {                     body = null.                 } else if (data.size() == 1) {                     body = data.get(0).                 } else {                     body = data.                 }                 if (body instanceof Exchange && !exchange.equals(body)) {                     // copy into the original Exchange                     Exchange copy = (Exchange) body.                     exchange.setException(copy.getException()).                     exchange.setIn(copy.getIn()).                     exchange.setOut(copy.getOut()).                     exchange.getProperties().clear().                     exchange.getProperties().putAll(copy.getProperties()).                 } else {                     exchange.getOut().setBody(body).                 }             }         }).         return false.     }     callback.done(true).     return true. }
