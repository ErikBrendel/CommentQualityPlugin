commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public void onSubscribe(Subscription newSubscription) {     if (newSubscription == null) {         throw new NullPointerException("subscription is null").     } else if (newSubscription == this.subscription) {         throw new IllegalArgumentException("already subscribed to the subscription: " + newSubscription).     }     if (this.subscription != null) {         newSubscription.cancel().     } else {         this.subscription = newSubscription.         subscriber.onSubscribe(newSubscription).     } }
false;public;1;25;;@Override public void onNext(Exchange ex) {     if (!active.get()) {         return.     }     R r.     try {         r = converter.apply(ex).     } catch (TypeConversionException e) {         LOG.warn("Unable to convert body to the specified type: {}", type.getName(), e).         r = null.     }     if (r == null && ex.getIn().getBody() != null) {         this.onError(new ClassCastException("Unable to convert body to the specified type: " + type.getName())).         active.set(false).         subscription.cancel().     } else {         subscriber.onNext(r).     } }
false;public;1;8;;@Override public void onError(Throwable throwable) {     if (!active.get()) {         return.     }     subscriber.onError(throwable). }
false;public;0;8;;@Override public void onComplete() {     if (!active.get()) {         return.     }     subscriber.onComplete(). }
false;public;1;68;;@Override public void subscribe(Subscriber<? super R> subscriber) {     delegate.subscribe(new Subscriber<Exchange>() {          private AtomicBoolean active = new AtomicBoolean(true).          private Subscription subscription.          @Override         public void onSubscribe(Subscription newSubscription) {             if (newSubscription == null) {                 throw new NullPointerException("subscription is null").             } else if (newSubscription == this.subscription) {                 throw new IllegalArgumentException("already subscribed to the subscription: " + newSubscription).             }             if (this.subscription != null) {                 newSubscription.cancel().             } else {                 this.subscription = newSubscription.                 subscriber.onSubscribe(newSubscription).             }         }          @Override         public void onNext(Exchange ex) {             if (!active.get()) {                 return.             }             R r.             try {                 r = converter.apply(ex).             } catch (TypeConversionException e) {                 LOG.warn("Unable to convert body to the specified type: {}", type.getName(), e).                 r = null.             }             if (r == null && ex.getIn().getBody() != null) {                 this.onError(new ClassCastException("Unable to convert body to the specified type: " + type.getName())).                 active.set(false).                 subscription.cancel().             } else {                 subscriber.onNext(r).             }         }          @Override         public void onError(Throwable throwable) {             if (!active.get()) {                 return.             }             subscriber.onError(throwable).         }          @Override         public void onComplete() {             if (!active.get()) {                 return.             }             subscriber.onComplete().         }     }). }
