# id;timestamp;commentText;codeText;commentWords;codeWords
CamelReactiveStreams -> public <T> Subscriber<T> getSubscriber(String name, Class<T> type);1485527491;Returns the subscriber associated to the given stream name._A subscriber can be used to push items coming from external reactive-streams publishers to Camel routes.__The subscriber converts automatically items of the given type to exchanges before pushing them.__@param name the stream name_@param type the publisher converts automatically exchanges to the given type._@param <T> the type of items accepted by the subscriber_@return the subscriber associated with the stream;public <T> Subscriber<T> getSubscriber(String name, Class<T> type) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getSubscriber(name, type)__    };returns,the,subscriber,associated,to,the,given,stream,name,a,subscriber,can,be,used,to,push,items,coming,from,external,reactive,streams,publishers,to,camel,routes,the,subscriber,converts,automatically,items,of,the,given,type,to,exchanges,before,pushing,them,param,name,the,stream,name,param,type,the,publisher,converts,automatically,exchanges,to,the,given,type,param,t,the,type,of,items,accepted,by,the,subscriber,return,the,subscriber,associated,with,the,stream;public,t,subscriber,t,get,subscriber,string,name,class,t,type,objects,require,non,null,name,name,cannot,be,null,return,service,get,subscriber,name,type
CamelReactiveStreams -> public <T> Subscriber<T> getSubscriber(String name, Class<T> type);1485527491;Returns the subscriber associated to the given stream name._A subscriber can be used to push items coming from external reactive-streams publishers to Camel routes.__The subscriber converts automatically items of the given type to exchanges before pushing them.__@param name the stream name_@param type the publisher converts automatically exchanges to the given type._@param <T> the type of items accepted by the subscriber_@return the subscriber associated with the stream;public <T> Subscriber<T> getSubscriber(String name, Class<T> type) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getSubscriber(name, type)__    };returns,the,subscriber,associated,to,the,given,stream,name,a,subscriber,can,be,used,to,push,items,coming,from,external,reactive,streams,publishers,to,camel,routes,the,subscriber,converts,automatically,items,of,the,given,type,to,exchanges,before,pushing,them,param,name,the,stream,name,param,type,the,publisher,converts,automatically,exchanges,to,the,given,type,param,t,the,type,of,items,accepted,by,the,subscriber,return,the,subscriber,associated,with,the,stream;public,t,subscriber,t,get,subscriber,string,name,class,t,type,objects,require,non,null,name,name,cannot,be,null,return,service,get,subscriber,name,type
CamelReactiveStreams -> public Subscriber<Exchange> getSubscriber(String name);1485527491;Returns the subscriber associated to the given stream name._A subscriber can be used to push items coming from external reactive-streams publishers to Camel routes.__@param name the stream name_@return the subscriber associated with the stream;public Subscriber<Exchange> getSubscriber(String name) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getSubscriber(name)__    };returns,the,subscriber,associated,to,the,given,stream,name,a,subscriber,can,be,used,to,push,items,coming,from,external,reactive,streams,publishers,to,camel,routes,param,name,the,stream,name,return,the,subscriber,associated,with,the,stream;public,subscriber,exchange,get,subscriber,string,name,objects,require,non,null,name,name,cannot,be,null,return,service,get,subscriber,name
CamelReactiveStreams -> public Subscriber<Exchange> getSubscriber(String name);1485527491;Returns the subscriber associated to the given stream name._A subscriber can be used to push items coming from external reactive-streams publishers to Camel routes.__@param name the stream name_@return the subscriber associated with the stream;public Subscriber<Exchange> getSubscriber(String name) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getSubscriber(name)__    };returns,the,subscriber,associated,to,the,given,stream,name,a,subscriber,can,be,used,to,push,items,coming,from,external,reactive,streams,publishers,to,camel,routes,param,name,the,stream,name,return,the,subscriber,associated,with,the,stream;public,subscriber,exchange,get,subscriber,string,name,objects,require,non,null,name,name,cannot,be,null,return,service,get,subscriber,name
CamelReactiveStreams -> public CamelReactiveStreamsService getService();1485527491;Allows retrieving the service responsible for binding camel routes to streams.__@return the stream service;public CamelReactiveStreamsService getService() {_        return service__    };allows,retrieving,the,service,responsible,for,binding,camel,routes,to,streams,return,the,stream,service;public,camel,reactive,streams,service,get,service,return,service
CamelReactiveStreams -> public CamelReactiveStreamsService getService();1485527491;Allows retrieving the service responsible for binding camel routes to streams.__@return the stream service;public CamelReactiveStreamsService getService() {_        return service__    };allows,retrieving,the,service,responsible,for,binding,camel,routes,to,streams,return,the,stream,service;public,camel,reactive,streams,service,get,service,return,service
CamelReactiveStreams -> public Publisher<Exchange> getPublisher(String name);1485527491;Returns the publisher associated to the given stream name._A publisher can be used to push Camel exchanges to reactive-streams subscribers.__@param name the stream name_@return the stream publisher;public Publisher<Exchange> getPublisher(String name) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getPublisher(name)__    };returns,the,publisher,associated,to,the,given,stream,name,a,publisher,can,be,used,to,push,camel,exchanges,to,reactive,streams,subscribers,param,name,the,stream,name,return,the,stream,publisher;public,publisher,exchange,get,publisher,string,name,objects,require,non,null,name,name,cannot,be,null,return,service,get,publisher,name
CamelReactiveStreams -> public Publisher<Exchange> getPublisher(String name);1485527491;Returns the publisher associated to the given stream name._A publisher can be used to push Camel exchanges to reactive-streams subscribers.__@param name the stream name_@return the stream publisher;public Publisher<Exchange> getPublisher(String name) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getPublisher(name)__    };returns,the,publisher,associated,to,the,given,stream,name,a,publisher,can,be,used,to,push,camel,exchanges,to,reactive,streams,subscribers,param,name,the,stream,name,return,the,stream,publisher;public,publisher,exchange,get,publisher,string,name,objects,require,non,null,name,name,cannot,be,null,return,service,get,publisher,name
CamelReactiveStreams -> public <T> Publisher<T> getPublisher(String name, Class<T> type);1485527491;Returns the publisher associated to the given stream name._A publisher can be used to push Camel exchange to external reactive-streams subscribers.__The publisher converts automatically exchanges to the given type.__@param name the stream name_@param type the type of the emitted items_@param <T> the type of items emitted by the publisher_@return the publisher associated to the stream;public <T> Publisher<T> getPublisher(String name, Class<T> type) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getPublisher(name, type)__    };returns,the,publisher,associated,to,the,given,stream,name,a,publisher,can,be,used,to,push,camel,exchange,to,external,reactive,streams,subscribers,the,publisher,converts,automatically,exchanges,to,the,given,type,param,name,the,stream,name,param,type,the,type,of,the,emitted,items,param,t,the,type,of,items,emitted,by,the,publisher,return,the,publisher,associated,to,the,stream;public,t,publisher,t,get,publisher,string,name,class,t,type,objects,require,non,null,name,name,cannot,be,null,return,service,get,publisher,name,type
CamelReactiveStreams -> public <T> Publisher<T> getPublisher(String name, Class<T> type);1485527491;Returns the publisher associated to the given stream name._A publisher can be used to push Camel exchange to external reactive-streams subscribers.__The publisher converts automatically exchanges to the given type.__@param name the stream name_@param type the type of the emitted items_@param <T> the type of items emitted by the publisher_@return the publisher associated to the stream;public <T> Publisher<T> getPublisher(String name, Class<T> type) {_        Objects.requireNonNull(name, "name cannot be null")___        return service.getPublisher(name, type)__    };returns,the,publisher,associated,to,the,given,stream,name,a,publisher,can,be,used,to,push,camel,exchange,to,external,reactive,streams,subscribers,the,publisher,converts,automatically,exchanges,to,the,given,type,param,name,the,stream,name,param,type,the,type,of,the,emitted,items,param,t,the,type,of,items,emitted,by,the,publisher,return,the,publisher,associated,to,the,stream;public,t,publisher,t,get,publisher,string,name,class,t,type,objects,require,non,null,name,name,cannot,be,null,return,service,get,publisher,name,type
