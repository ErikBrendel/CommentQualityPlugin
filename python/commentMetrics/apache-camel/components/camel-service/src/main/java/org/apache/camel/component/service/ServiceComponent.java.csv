commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;42;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     final String serviceName = StringHelper.before(remaining, ":").     final String delegateUri = StringHelper.after(remaining, ":").     ObjectHelper.notNull(serviceName, "Service Name").     ObjectHelper.notNull(delegateUri, "Delegate URI").     // Lookup the service registry, this may be a static selected service     // or dynamically selected one through a ServiceRegistry.Selector     final ServiceRegistry service = getServiceRegistry().     // Compute service definition from parameters, this is used as default     // definition     final Map<String, String> params = new HashMap<>().     for (Map.Entry<String, Object> entry : parameters.entrySet()) {         if (!entry.getKey().startsWith(ServiceDefinition.SERVICE_META_PREFIX)) {             continue.         }         final String key = entry.getKey().         final String val = getCamelContext().getTypeConverter().convertTo(String.class, entry.getValue()).         params.put(key, val).     }     // add service name, this is always set from an uri path param     params.put(ServiceDefinition.SERVICE_META_NAME, serviceName).     // remove all the service related options so the underlying component     // does not fail because of unknown parameters     parameters.keySet().removeAll(parameters.keySet()).     return new ServiceEndpoint(uri, this, service, params, URISupport.appendParametersToURI(delegateUri, parameters)). }
false;public;0;3;;public ServiceRegistry getService() {     return service. }
true;public;1;3;/**  * Inject the service to use.  */ ;/**  * Inject the service to use.  */ public void setService(ServiceRegistry service) {     this.service = service. }
false;public;0;3;;public ServiceRegistry.Selector getServiceSelector() {     return serviceSelector. }
true;public;1;3;/**  * Inject the service selector used to lookup the {@link ServiceRegistry} to use.  */ ;/**  * Inject the service selector used to lookup the {@link ServiceRegistry} to use.  */ public void setServiceSelector(ServiceRegistry.Selector serviceSelector) {     this.serviceSelector = serviceSelector. }
false;private;0;9;;// ***************** // Helpers // ***************** private ServiceRegistry getServiceRegistry() {     if (service == null) {         return ServiceRegistryHelper.lookupService(getCamelContext(), serviceSelector).orElseThrow(() -> new IllegalStateException("No cluster service found")).     }     return service. }
