commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected void doStart() throws Exception {     super.doStart().     executor = ((HazelcastQueueEndpoint) getEndpoint()).createExecutor().     CamelItemListener camelItemListener = new CamelItemListener(this, cacheName).     queueConsumerTask = new QueueConsumerTask(camelItemListener).     executor.submit(queueConsumerTask). }
false;protected;0;13;;@Override protected void doStop() throws Exception {     super.doStop().     if (executor != null) {         if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {             getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor).         } else {             executor.shutdownNow().         }     }     executor = null. }
false;public;0;27;;@Override public void run() {     IQueue<Object> queue = hazelcastInstance.getQueue(cacheName).     if (config.getQueueConsumerMode() == HazelcastQueueConsumerMode.LISTEN) {         queue.addItemListener(camelItemListener, true).     }     if (config.getQueueConsumerMode() == HazelcastQueueConsumerMode.POLL) {         while (isRunAllowed()) {             try {                 final Object body = queue.poll(config.getPollingTimeout(), TimeUnit.MILLISECONDS).                 Exchange exchange = getEndpoint().createExchange().                 exchange.getOut().setBody(body).                 try {                     processor.process(exchange).                 } catch (Exception e) {                     getExceptionHandler().handleException("Error during processing", exchange, e).                 }             } catch (InterruptedException e) {                 if (log.isDebugEnabled()) {                     log.debug("Hazelcast Queue Consumer Interrupted: {}", e, e).                     continue.                 }             }         }     } }
