commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;23;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // use the given hazelcast Instance or create one if not given     HazelcastInstance hzInstance.     if (ObjectHelper.equal(getHazelcastMode(), HazelcastConstants.HAZELCAST_NODE_MODE)) {         hzInstance = getOrCreateHzInstance(getCamelContext(), parameters).     } else {         hzInstance = getOrCreateHzClientInstance(getCamelContext(), parameters).     }     String defaultOperation = getAndRemoveOrResolveReferenceParameter(parameters, HazelcastConstants.OPERATION_PARAM, String.class).     if (defaultOperation == null) {         defaultOperation = getAndRemoveOrResolveReferenceParameter(parameters, "defaultOperation", String.class).     }     HazelcastDefaultEndpoint endpoint = doCreateEndpoint(uri, remaining, parameters, hzInstance).     if (defaultOperation != null) {         endpoint.setDefaultOperation(HazelcastOperation.getHazelcastOperation(defaultOperation)).     }     return endpoint. }
false;protected,abstract;4;1;;protected abstract HazelcastDefaultEndpoint doCreateEndpoint(String uri, String remaining, Map<String, Object> parameters, HazelcastInstance hzInstance) throws Exception.
false;public;0;4;;@Override public void doStart() throws Exception {     super.doStart(). }
false;public;0;10;;@Override public void doStop() throws Exception {     for (HazelcastInstance hazelcastInstance : customHazelcastInstances) {         hazelcastInstance.getLifecycleService().shutdown().     }     customHazelcastInstances.clear().     super.doStop(). }
false;public;0;3;;public HazelcastInstance getHazelcastInstance() {     return hazelcastInstance. }
true;public;1;3;/**  * The hazelcast instance reference which can be used for hazelcast endpoint.  * If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance.  */ ;/**  * The hazelcast instance reference which can be used for hazelcast endpoint.  * If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance.  */ public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {     this.hazelcastInstance = hazelcastInstance. }
false;public;0;3;;public String getHazelcastMode() {     return hazelcastMode. }
true;public;1;3;/**  * The hazelcast mode reference which kind of instance should be used.  * If you don't specify the mode, then the node mode will be the default.  */ ;/**  * The hazelcast mode reference which kind of instance should be used.  * If you don't specify the mode, then the node mode will be the default.  */ public void setHazelcastMode(String hazelcastMode) {     this.hazelcastMode = hazelcastMode. }
false;protected;2;51;;protected HazelcastInstance getOrCreateHzInstance(CamelContext context, Map<String, Object> parameters) throws Exception {     HazelcastInstance hzInstance = null.     Config config = null.     // Query param named 'hazelcastInstance' (if exists) overrides the instance that was set     hzInstance = resolveAndRemoveReferenceParameter(parameters, HAZELCAST_INSTANCE_PARAM, HazelcastInstance.class).     // Check if an already created instance is given then just get instance by its name.     if (hzInstance == null && parameters.get(HAZELCAST_INSTANCE_NAME_PARAM) != null) {         hzInstance = Hazelcast.getHazelcastInstanceByName((String) parameters.get(HAZELCAST_INSTANCE_NAME_PARAM)).     }     // as reference or as xml configuration file.     if (hzInstance == null) {         config = resolveAndRemoveReferenceParameter(parameters, HAZELCAST_CONFIGU_PARAM, Config.class).         if (config == null) {             String configUri = getAndRemoveParameter(parameters, HAZELCAST_CONFIGU_URI_PARAM, String.class).             if (configUri != null) {                 configUri = getCamelContext().resolvePropertyPlaceholders(configUri).             }             if (configUri != null) {                 InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(context, configUri).                 config = new XmlConfigBuilder(is).build().             }         }         if (hazelcastInstance == null && config == null) {             config = new XmlConfigBuilder().build().             // Disable the version check             config.getProperties().setProperty("hazelcast.version.check.enabled", "false").             config.getProperties().setProperty("hazelcast.phone.home.enabled", "false").             hzInstance = Hazelcast.newHazelcastInstance(config).         } else if (config != null) {             if (ObjectHelper.isNotEmpty(config.getInstanceName())) {                 hzInstance = Hazelcast.getOrCreateHazelcastInstance(config).             } else {                 hzInstance = Hazelcast.newHazelcastInstance(config).             }         }         if (hzInstance != null) {             if (this.customHazelcastInstances.add(hzInstance)) {                 LOGGER.debug("Add managed HZ instance {}", hzInstance.getName()).             }         }     }     return hzInstance == null ? hazelcastInstance : hzInstance. }
false;protected;2;47;;protected HazelcastInstance getOrCreateHzClientInstance(CamelContext context, Map<String, Object> parameters) throws Exception {     HazelcastInstance hzInstance = null.     ClientConfig config = null.     // Query param named 'hazelcastInstance' (if exists) overrides the instance that was set     hzInstance = resolveAndRemoveReferenceParameter(parameters, HAZELCAST_INSTANCE_PARAM, HazelcastInstance.class).     // Check if an already created instance is given then just get instance by its name.     if (hzInstance == null && parameters.get(HAZELCAST_INSTANCE_NAME_PARAM) != null) {         hzInstance = Hazelcast.getHazelcastInstanceByName((String) parameters.get(HAZELCAST_INSTANCE_NAME_PARAM)).     }     // as reference or as xml configuration file.     if (hzInstance == null) {         config = resolveAndRemoveReferenceParameter(parameters, HAZELCAST_CONFIGU_PARAM, ClientConfig.class).         if (config == null) {             String configUri = getAndRemoveParameter(parameters, HAZELCAST_CONFIGU_URI_PARAM, String.class).             if (configUri != null) {                 configUri = getCamelContext().resolvePropertyPlaceholders(configUri).             }             if (configUri != null) {                 InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(context, configUri).                 config = new XmlClientConfigBuilder(is).build().             }         }         if (hazelcastInstance == null && config == null) {             config = new XmlClientConfigBuilder().build().             // Disable the version check             config.getProperties().setProperty("hazelcast.version.check.enabled", "false").             config.getProperties().setProperty("hazelcast.phone.home.enabled", "false").             hzInstance = HazelcastClient.newHazelcastClient(config).         } else if (config != null) {             hzInstance = HazelcastClient.newHazelcastClient(config).         }         if (hzInstance != null) {             if (this.customHazelcastInstances.add(hzInstance)) {                 LOGGER.debug("Add managed HZ instance {}", hzInstance.getName()).             }         }     }     return hzInstance == null ? hazelcastInstance : hzInstance. }
