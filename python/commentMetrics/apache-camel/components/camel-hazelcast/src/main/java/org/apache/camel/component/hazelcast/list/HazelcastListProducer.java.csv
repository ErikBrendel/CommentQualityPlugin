commented;modifiers;parameterAmount;loc;comment;code
false;public;1;57;;public void process(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     // GET header parameters     Integer pos = null.     if (headers.containsKey(HazelcastConstants.OBJECT_POS)) {         if (!(headers.get(HazelcastConstants.OBJECT_POS) instanceof Integer)) {             throw new IllegalArgumentException("OBJECT_POS Should be of type Integer").         }         pos = (Integer) headers.get(HazelcastConstants.OBJECT_POS).     }     final HazelcastOperation operation = lookupOperation(exchange).     switch(operation) {         case ADD:             this.add(pos, exchange).             break.         case GET:             this.get(pos, exchange).             break.         case SET_VALUE:             this.set(pos, exchange).             break.         case REMOVE_VALUE:             this.remove(pos, exchange).             break.         case CLEAR:             this.clear().             break.         case ADD_ALL:             this.addAll(pos, exchange).             break.         case REMOVE_ALL:             this.removeAll(exchange).             break.         case RETAIN_ALL:             this.retainAll(exchange).             break.         default:             throw new IllegalArgumentException(String.format("The value '%s' is not allowed for parameter '%s' on the LIST cache.", operation, HazelcastConstants.OPERATION)).     }     // finally copy headers     HazelcastComponentHelper.copyHeaders(exchange). }
false;private;2;10;;private void add(Integer pos, Exchange exchange) {     final Object body = exchange.getIn().getBody().     if (null == pos) {         // ADD the specified element to the end of the list         list.add(body).     } else {         // ADD the specified element at the specified position         list.add(pos, body).     } }
false;private;2;3;;private void get(Integer pos, Exchange exchange) {     exchange.getOut().setBody(this.list.get(pos)). }
false;private;2;8;;private void set(Integer pos, Exchange exchange) {     if (null == pos) {         throw new IllegalArgumentException("Empty position for set operation.").     } else {         final Object body = exchange.getIn().getBody().         list.set(pos, body).     } }
false;private;2;11;;private void remove(Integer pos, Exchange exchange) {     if (null == pos) {         // removes the first occurrence in the list         final Object body = exchange.getIn().getBody().         list.remove(body).     } else {         // removes the element at the specified position         int position = pos.         list.remove(position).     } }
false;private;0;3;;private void clear() {     list.clear(). }
false;private;2;8;;private void addAll(Integer pos, Exchange exchange) {     final Object body = exchange.getIn().getBody().     if (null == pos) {         list.addAll((Collection<? extends Object>) body).     } else {         list.addAll(pos, (Collection<? extends Object>) body).     } }
false;private;1;4;;private void removeAll(Exchange exchange) {     final Object body = exchange.getIn().getBody().     list.removeAll((Collection<?>) body). }
false;private;1;4;;private void retainAll(Exchange exchange) {     final Object body = exchange.getIn().getBody().     list.retainAll((Collection<?>) body). }
