commented;modifiers;parameterAmount;loc;comment;code
false;public;1;45;;public void process(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     // GET header parameters     Object oid = null.     if (headers.containsKey(HazelcastConstants.OBJECT_ID)) {         oid = headers.get(HazelcastConstants.OBJECT_ID).     }     final HazelcastOperation operation = lookupOperation(exchange).     switch(operation) {         case PUT:             this.put(oid, exchange).             break.         case GET:             this.get(oid, exchange).             break.         case DELETE:             this.delete(oid).             break.         case CLEAR:             this.clear(exchange).             break.         case CONTAINS_KEY:             this.containsKey(oid, exchange).             break.         case CONTAINS_VALUE:             this.containsValue(exchange).             break.         default:             throw new IllegalArgumentException(String.format("The value '%s' is not allowed for parameter '%s' on the MULTIMAP cache.", operation, HazelcastConstants.OPERATION)).     }     // finally copy headers     HazelcastComponentHelper.copyHeaders(exchange). }
false;private;2;4;;private void put(Object oid, Exchange exchange) {     Object body = exchange.getIn().getBody().     this.cache.put(oid, body). }
false;private;2;3;;private void get(Object oid, Exchange exchange) {     exchange.getOut().setBody(this.cache.get(oid)). }
false;private;1;3;;private void delete(Object oid) {     this.cache.remove(oid). }
false;private;1;3;;private void clear(Exchange exchange) {     this.cache.clear(). }
false;private;2;3;;private void containsKey(Object oid, Exchange exchange) {     exchange.getOut().setBody(this.cache.containsKey(oid)). }
false;private;1;4;;private void containsValue(Exchange exchange) {     Object body = exchange.getIn().getBody().     exchange.getOut().setBody(this.cache.containsValue(body)). }
