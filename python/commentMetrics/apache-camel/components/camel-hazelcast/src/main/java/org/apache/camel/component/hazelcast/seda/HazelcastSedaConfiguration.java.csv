commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getConcurrentConsumers() {     return concurrentConsumers. }
false;public;0;3;;public String getQueueName() {     return queueName. }
false;public;1;3;;public void setQueueName(String queueName) {     this.queueName = queueName. }
true;public;1;3;/**  * To use concurrent consumers polling from the SEDA queue.  */ ;/**  * To use concurrent consumers polling from the SEDA queue.  */ public void setConcurrentConsumers(final int concurrentConsumers) {     this.concurrentConsumers = concurrentConsumers. }
true;public;0;4;/**  * @deprecated use pollTimeout instead  */ ;/**  * @deprecated use pollTimeout instead  */ @Deprecated public int getPollInterval() {     return pollTimeout. }
true;public;1;4;/**  * @deprecated use pollTimeout instead  */ ;/**  * @deprecated use pollTimeout instead  */ @Deprecated public void setPollInterval(int pollInterval) {     this.pollTimeout = pollInterval. }
false;public;0;3;;public int getPollTimeout() {     return pollTimeout. }
true;public;1;3;/**  * The timeout used when consuming from the SEDA queue. When a timeout occurs, the consumer can check whether  * it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.  */ ;/**  * The timeout used when consuming from the SEDA queue. When a timeout occurs, the consumer can check whether  * it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.  */ public void setPollTimeout(int pollTimeout) {     this.pollTimeout = pollTimeout. }
false;public;0;3;;public boolean isTransferExchange() {     return transferExchange. }
true;public;1;6;/**  * Milliseconds before consumer continues polling after an error has occurred.  */ ;/**  * Milliseconds before consumer continues polling after an error has occurred.  */ public void setOnErrorDelay(int onErrorDelay) {     if (onErrorDelay < 0) {         throw new IllegalArgumentException("Property onErrorDelay must be a positive number, was " + onErrorDelay).     }     this.onErrorDelay = onErrorDelay. }
false;public;0;3;;public int getOnErrorDelay() {     return onErrorDelay. }
true;public;1;3;/**  * If set to true the whole Exchange will be transfered. If header or body contains not serializable objects, they will be skipped.  */ ;/**  * If set to true the whole Exchange will be transfered. If header or body contains not serializable objects, they will be skipped.  */ public void setTransferExchange(boolean transferExchange) {     this.transferExchange = transferExchange. }
false;public;0;3;;public boolean isTransacted() {     return transacted. }
true;public;1;3;/**  * If set to true then the consumer runs in transaction mode, where the messages in the seda queue will only be removed  * if the transaction commits, which happens when the processing is complete.  */ ;/**  * If set to true then the consumer runs in transaction mode, where the messages in the seda queue will only be removed  * if the transaction commits, which happens when the processing is complete.  */ public void setTransacted(boolean transacted) {     this.transacted = transacted. }
