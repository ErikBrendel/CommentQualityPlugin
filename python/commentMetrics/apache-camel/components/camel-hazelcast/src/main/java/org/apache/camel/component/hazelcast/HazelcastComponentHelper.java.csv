commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;18;;public static void copyHeaders(Exchange ex) {     // get in headers     Map<String, Object> headers = ex.getIn().getHeaders().     // DELETE item id     if (headers.containsKey(HazelcastConstants.OBJECT_ID)) {         headers.remove(HazelcastConstants.OBJECT_ID).     }     if (headers.containsKey(HazelcastConstants.OPERATION)) {         headers.remove(HazelcastConstants.OPERATION).     }     // propagate headers if OUT message created     if (ex.hasOut()) {         ex.getOut().setHeaders(headers).     } }
false;public,static;4;4;;public static void setListenerHeaders(Exchange ex, String listenerType, String listenerAction, String cacheName) {     ex.getIn().setHeader(HazelcastConstants.CACHE_NAME, cacheName).     HazelcastComponentHelper.setListenerHeaders(ex, listenerType, listenerAction). }
false;public,static;3;5;;public static void setListenerHeaders(Exchange ex, String listenerType, String listenerAction) {     ex.getIn().setHeader(HazelcastConstants.LISTENER_ACTION, listenerAction).     ex.getIn().setHeader(HazelcastConstants.LISTENER_TYPE, listenerType).     ex.getIn().setHeader(HazelcastConstants.LISTENER_TIME, new Date().getTime()). }
false;public,static;2;5;;public static HazelcastOperation lookupOperation(Exchange exchange, HazelcastOperation defaultOperation) {     String operationName = exchange.getIn().getHeader(HazelcastConstants.OPERATION, String.class).     return ObjectHelper.isEmpty(operationName) ? defaultOperation : HazelcastOperation.getHazelcastOperation(operationName). }
