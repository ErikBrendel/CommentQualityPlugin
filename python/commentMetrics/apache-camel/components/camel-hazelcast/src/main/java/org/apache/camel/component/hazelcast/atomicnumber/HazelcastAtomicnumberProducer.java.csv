commented;modifiers;parameterAmount;loc;comment;code
false;public;1;49;;public void process(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     long expectedValue = 0L.     if (headers.containsKey(HazelcastConstants.EXPECTED_VALUE)) {         expectedValue = (long) headers.get(HazelcastConstants.EXPECTED_VALUE).     }     HazelcastOperation operation = lookupOperation(exchange).     switch(operation) {         case INCREMENT:             this.increment(exchange).             break.         case DECREMENT:             this.decrement(exchange).             break.         case COMPARE_AND_SET:             this.compare(expectedValue, exchange).             break.         case GET_AND_ADD:             this.getAndAdd(exchange).             break.         case SET_VALUE:             this.set(exchange).             break.         case GET:             this.get(exchange).             break.         case DESTROY:             this.destroy().             break.         default:             throw new IllegalArgumentException(String.format("The value '%s' is not allowed for parameter '%s' on the ATOMICNUMBER.", operation, HazelcastConstants.OPERATION)).     }     // finally copy headers     HazelcastComponentHelper.copyHeaders(exchange). }
false;private;1;3;;private void get(Exchange exchange) {     exchange.getOut().setBody(this.atomicnumber.get()). }
false;private;1;3;;private void increment(Exchange exchange) {     exchange.getOut().setBody(this.atomicnumber.incrementAndGet()). }
false;private;1;3;;private void decrement(Exchange exchange) {     exchange.getOut().setBody(this.atomicnumber.decrementAndGet()). }
false;private;2;7;;private void compare(long expected, Exchange exchange) {     long update = exchange.getIn().getBody(Long.class).     if (ObjectHelper.isEmpty(expected)) {         throw new IllegalArgumentException("Expected value must be specified").     }     exchange.getOut().setBody(this.atomicnumber.compareAndSet(expected, update)). }
false;private;1;4;;private void getAndAdd(Exchange exchange) {     long delta = exchange.getIn().getBody(Long.class).     exchange.getOut().setBody(this.atomicnumber.getAndAdd(delta)). }
false;private;1;3;;private void set(Exchange exchange) {     this.atomicnumber.set(exchange.getIn().getBody(Long.class)). }
false;private;0;3;;private void destroy() {     this.atomicnumber.destroy(). }
