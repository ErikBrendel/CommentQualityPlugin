commented;modifiers;parameterAmount;loc;comment;code
false;public;1;33;;public void process(Exchange exchange) throws Exception {     HazelcastOperation operation = lookupOperation(exchange).     switch(operation) {         case READ_ONCE_HEAD:             this.readOnceHead(exchange).             break.         case READ_ONCE_TAIL:             this.readOnceTail(exchange).             break.         case CAPACITY:             this.getCapacity(exchange).             break.         case REMAINING_CAPACITY:             this.getRemainingCapacity(exchange).             break.         case ADD:             this.add(exchange).             break.         default:             throw new IllegalArgumentException(String.format("The value '%s' is not allowed for parameter '%s' on the RINGBUFFER.", operation, HazelcastConstants.OPERATION)).     }     // finally copy headers     HazelcastComponentHelper.copyHeaders(exchange). }
false;private;1;3;;private void readOnceHead(Exchange exchange) throws InterruptedException {     exchange.getOut().setBody(this.ringbuffer.readOne(ringbuffer.headSequence())). }
false;private;1;3;;private void readOnceTail(Exchange exchange) throws InterruptedException {     exchange.getOut().setBody(this.ringbuffer.readOne(ringbuffer.tailSequence())). }
false;private;1;3;;private void getCapacity(Exchange exchange) throws InterruptedException {     exchange.getOut().setBody(this.ringbuffer.capacity()). }
false;private;1;3;;private void getRemainingCapacity(Exchange exchange) throws InterruptedException {     exchange.getOut().setBody(this.ringbuffer.remainingCapacity()). }
false;private;1;4;;private void add(Exchange exchange) {     final Object body = exchange.getIn().getBody().     exchange.getOut().setBody(ringbuffer.add(body)). }
