# id;timestamp;commentText;codeText;commentWords;codeWords
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1397635772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1397635773;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1436439456;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1437905473;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1455781764;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1456730686;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1476172485;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1489499410;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1498119790;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1540108163;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1547805323;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1548175645;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1548332772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic);1548770307;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic) {_        this(repositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,this,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1397635772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1397635773;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1436439456;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1437905473;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1455781764;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1456730686;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1476172485;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1489499410;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1498119790;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1540108163;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1547805323;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1548175645;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1548332772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse);1548770307;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, persistentRepositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,hazelcast,instance,hz,instanse,this,repository,name,persistent,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1397635772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1397635773;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1436439456;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1437905473;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1455781764;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1456730686;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1476172485;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1489499410;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1498119790;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1540108163;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1547805323;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1548175645;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1548332772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName);1548770307;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name_;public HazelcastAggregationRepository(final String repositoryName) {_        mapName = repositoryName__        persistenceMapName = String.format("%s%s", mapName, COMPLETED_SUFFIX)__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,map,name,repository,name,persistence,map,name,string,format,s,s,map,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1397635772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1397635773;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1436439456;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1437905473;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1455781764;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1456730686;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1476172485;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1489499410;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1498119790;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1540108163;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1547805323;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1548175645;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1548332772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName);1548770307;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name_;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName) {_        mapName = repositoryName__        persistenceMapName = persistentRepositoryName__        optimistic = false__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,map,name,repository,name,persistence,map,name,persistent,repository,name,optimistic,false,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1397635772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1397635773;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1436439456;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1437905473;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1455781764;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1456730686;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1476172485;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1489499410;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1498119790;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1540108163;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1547805323;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1548175645;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1548332772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance);1548770307;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._@param repositoryName {@link IMap} repository name__@param optimistic whether to use optimistic locking manner__@param persistentRepositoryName {@link IMap} recoverable repository name__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, persistentRepositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,persistent,repository,name,link,imap,recoverable,repository,name,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,persistent,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1397635772;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {__                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1397635773;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {__                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1436439456;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1437905473;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1455781764;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1456730686;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1476171822;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1476171822;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1476172485;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.LOCAL)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,local,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1489499410;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1498119790;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1540108163;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1547805323;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1548175645;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1548332772;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1548770307;This method performs transactional operation on removing the {@code exchange}_from the operational storage and moving it into the persistent one if the {@link HazelcastAggregationRepository}_runs in recoverable mode and {@code optimistic} is false. It will act at <u>your own</u> risk otherwise._@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the exchange to remove;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders)__        if (optimistic) {_            LOG.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (!cache.remove(key, holder)) {_                LOG.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.",_                        key)__                throw new OptimisticLockingException()__            }_            LOG.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key)__            if (useRecovery) {_                LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__                persistedCache.put(exchange.getExchangeId(), holder)__                LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in an optimistic manner.",_                        exchange.getExchangeId(), key)__            }_        } else {_            if (useRecovery) {_                LOG.trace("Removing an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                _                _                _                TransactionOptions tOpts = new TransactionOptions()___                tOpts.setTransactionType(TransactionOptions.TransactionType.ONE_PHASE)__                TransactionContext tCtx = hzInstance.newTransactionContext(tOpts)___                try {_                    tCtx.beginTransaction()___                    TransactionalMap<String, DefaultExchangeHolder> tCache = tCtx.getMap(cache.getName())__                    TransactionalMap<String, DefaultExchangeHolder> tPersistentCache = tCtx.getMap(persistedCache.getName())___                    DefaultExchangeHolder removedHolder = tCache.remove(key)__                    LOG.trace("Putting an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                    tPersistentCache.put(exchange.getExchangeId(), removedHolder)___                    tCtx.commitTransaction()__                    LOG.trace("Removed an exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key)__                    LOG.trace("Put an exchange with ID {} for key {} into a recoverable storage in a thread-safe manner.",_                            exchange.getExchangeId(), key)__                } catch (Throwable throwable) {_                    tCtx.rollbackTransaction()___                    final String msg = String.format("Transaction with ID %s was rolled back for remove operation with a key %s and an Exchange ID %s.",_                            tCtx.getTxnId(), key, exchange.getExchangeId())__                    LOG.warn(msg, throwable)__                    throw new RuntimeException(msg, throwable)__                }_            } else {_                cache.remove(key)__            }_        }_    };this,method,performs,transactional,operation,on,removing,the,code,exchange,from,the,operational,storage,and,moving,it,into,the,persistent,one,if,the,link,hazelcast,aggregation,repository,runs,in,recoverable,mode,and,code,optimistic,is,false,it,will,act,at,u,your,own,u,risk,otherwise,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,exchange,to,remove;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,default,exchange,holder,holder,default,exchange,holder,marshal,exchange,true,allow,serialized,headers,if,optimistic,log,trace,removing,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,cache,remove,key,holder,log,error,optimistic,locking,failed,for,exchange,with,key,imap,remove,removed,no,exchanges,while,it,s,expected,to,remove,one,key,throw,new,optimistic,locking,exception,log,trace,removed,an,exchange,with,id,for,key,in,an,optimistic,manner,exchange,get,exchange,id,key,if,use,recovery,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,persisted,cache,put,exchange,get,exchange,id,holder,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,an,optimistic,manner,exchange,get,exchange,id,key,else,if,use,recovery,log,trace,removing,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,transaction,options,t,opts,new,transaction,options,t,opts,set,transaction,type,transaction,options,transaction,type,transaction,context,t,ctx,hz,instance,new,transaction,context,t,opts,try,t,ctx,begin,transaction,transactional,map,string,default,exchange,holder,t,cache,t,ctx,get,map,cache,get,name,transactional,map,string,default,exchange,holder,t,persistent,cache,t,ctx,get,map,persisted,cache,get,name,default,exchange,holder,removed,holder,t,cache,remove,key,log,trace,putting,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,t,persistent,cache,put,exchange,get,exchange,id,removed,holder,t,ctx,commit,transaction,log,trace,removed,an,exchange,with,id,for,key,in,a,thread,safe,manner,exchange,get,exchange,id,key,log,trace,put,an,exchange,with,id,for,key,into,a,recoverable,storage,in,a,thread,safe,manner,exchange,get,exchange,id,key,catch,throwable,throwable,t,ctx,rollback,transaction,final,string,msg,string,format,transaction,with,id,s,was,rolled,back,for,remove,operation,with,a,key,s,and,an,exchange,id,s,t,ctx,get,txn,id,key,exchange,get,exchange,id,log,warn,msg,throwable,throw,new,runtime,exception,msg,throwable,else,cache,remove,key
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1397635772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1397635773;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1436439456;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1437905473;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1455781764;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1456730686;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1476171822;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1476172485;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1489499410;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1498119790;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1540108163;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1547805323;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1548175645;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1548332772;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse);1548770307;Creates new {@link HazelcastAggregationRepository} that defaults to non-optimistic locking_with recoverable behavior. Recoverable repository name defaults to_{@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param hzInstanse externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, HazelcastInstance hzInstanse) {_        this (repositoryName, false)__        this.hzInstance = hzInstanse__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,that,defaults,to,non,optimistic,locking,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,hz,instanse,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,hazelcast,instance,hz,instanse,this,repository,name,false,this,hz,instance,hz,instanse,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1397635772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1397635773;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1436439456;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1437905473;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1455781764;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1456730686;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1476172485;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1489499410;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1498119790;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1540108163;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1547805323;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1548175645;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1548332772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic);1548770307;Creates new {@link HazelcastAggregationRepository} with recoverable behavior and a local Hazelcast instance._@param repositoryName {@link IMap} repository name__@param  persistentRepositoryName {@link IMap} recoverable repository name__@param optimistic whether to use optimistic locking manner.;public HazelcastAggregationRepository(final String repositoryName, final String persistentRepositoryName, boolean optimistic) {_        this(repositoryName, persistentRepositoryName)__        this.optimistic = optimistic__        useLocalHzInstance = true__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,and,a,local,hazelcast,instance,param,repository,name,link,imap,repository,name,param,persistent,repository,name,link,imap,recoverable,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner;public,hazelcast,aggregation,repository,final,string,repository,name,final,string,persistent,repository,name,boolean,optimistic,this,repository,name,persistent,repository,name,this,optimistic,optimistic,use,local,hz,instance,true
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1397635772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1397635773;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1436439456;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1437905473;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1455781764;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1456730686;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1476171822;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1476172485;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1489499410;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1498119790;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1540108163;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1547805323;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1548175645;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1548332772;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance);1548770307;Creates new {@link HazelcastAggregationRepository} with recoverable behavior._Recoverable repository name defaults to {@code repositoryName} + "-compeleted"._@param repositoryName {@link IMap} repository name__@param  optimistic whether to use optimistic locking manner__@param hzInstance  externally configured {@link HazelcastInstance}.;public HazelcastAggregationRepository(final String repositoryName, boolean optimistic, HazelcastInstance hzInstance) {_        this(repositoryName, optimistic)__        this.hzInstance = hzInstance__        useLocalHzInstance = false__    };creates,new,link,hazelcast,aggregation,repository,with,recoverable,behavior,recoverable,repository,name,defaults,to,code,repository,name,compeleted,param,repository,name,link,imap,repository,name,param,optimistic,whether,to,use,optimistic,locking,manner,param,hz,instance,externally,configured,link,hazelcast,instance;public,hazelcast,aggregation,repository,final,string,repository,name,boolean,optimistic,hazelcast,instance,hz,instance,this,repository,name,optimistic,this,hz,instance,hz,instance,use,local,hz,instance,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1476171822;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key){_        return cache.containsKey(key)__    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,return,cache,contains,key,key
HazelcastAggregationRepository -> public boolean containsKey(Object key);1476171822;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key){_      if(cache != null)_        return cache.containsKey(key)__      else_        return false__    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1476172485;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1489499410;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1498119790;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1540108163;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1547805323;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1548175645;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1548332772;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public boolean containsKey(Object key);1548770307;Checks if the key in question is in the repository.__@param key Object - key in question;public boolean containsKey(Object key) {_        if (cache != null) {_            return cache.containsKey(key)__        } else {_            return false__        }_    };checks,if,the,key,in,question,is,in,the,repository,param,key,object,key,in,question;public,boolean,contains,key,object,key,if,cache,null,return,cache,contains,key,key,else,return,false
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1397635772;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1397635773;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1436439456;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1437905473;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1455781764;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1456730686;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1476171822;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1476171822;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1476172485;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1489499410;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1498119790;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1540108163;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1547805323;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1548175645;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1548332772;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
HazelcastAggregationRepository -> public String getPersistentRepositoryName();1548770307;@return Persistent repository {@link IMap} name_;public String getPersistentRepositoryName() {_        return persistenceMapName__    };return,persistent,repository,link,imap,name;public,string,get,persistent,repository,name,return,persistence,map,name
