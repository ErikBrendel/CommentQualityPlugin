commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void trainHazelcastInstance(HazelcastInstance hazelcastInstance) {     when(hazelcastInstance.getMultiMap("bar")).thenReturn(map). }
false;protected;1;4;;@Override protected void verifyHazelcastInstance(HazelcastInstance hazelcastInstance) {     verify(hazelcastInstance, atLeastOnce()).getMultiMap("bar"). }
false;public;0;4;;@After public void verifyMapMock() {     verifyNoMoreInteractions(map). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/META-INF/spring/test-camel-context-multimap.xml"). }
false;public;0;5;;@Test public void testPut() throws InterruptedException {     template.sendBodyAndHeader("direct:put", "my-foo", HazelcastConstants.OBJECT_ID, "4711").     verify(map).put("4711", "my-foo"). }
false;public;0;5;;@Test public void testRemoveValue() {     template.sendBodyAndHeader("direct:removevalue", "my-foo", HazelcastConstants.OBJECT_ID, "4711").     verify(map).remove("4711", "my-foo"). }
false;public;0;8;;@Test public void testGet() {     when(map.get("4711")).thenReturn(Arrays.<Object>asList("my-foo")).     template.sendBodyAndHeader("direct:get", null, HazelcastConstants.OBJECT_ID, "4711").     verify(map).get("4711").     Collection<?> body = consumer.receiveBody("seda:out", 5000, Collection.class).     assertTrue(body.contains("my-foo")). }
false;public;0;5;;@Test public void testDelete() {     template.sendBodyAndHeader("direct:delete", null, HazelcastConstants.OBJECT_ID, 4711).     verify(map).remove(4711). }
false;public;0;5;;@Test public void testValueCount() {     template.sendBodyAndHeader("direct:valueCount", "test", HazelcastConstants.OBJECT_ID, "4711").     verify(map).valueCount("4711"). }
false;public;0;13;;@Test public void testContainsKey() {     when(map.containsKey("testOk")).thenReturn(true).     when(map.containsKey("testKo")).thenReturn(false).     template.sendBodyAndHeader("direct:containsKey", null, HazelcastConstants.OBJECT_ID, "testOk").     Boolean body = consumer.receiveBody("seda:out", 5000, Boolean.class).     verify(map).containsKey("testOk").     assertEquals(true, body).     template.sendBodyAndHeader("direct:containsKey", null, HazelcastConstants.OBJECT_ID, "testKo").     body = consumer.receiveBody("seda:out", 5000, Boolean.class).     verify(map).containsKey("testKo").     assertEquals(false, body). }
false;public;0;13;;@Test public void testContainsValue() {     when(map.containsValue("testOk")).thenReturn(true).     when(map.containsValue("testKo")).thenReturn(false).     template.sendBody("direct:containsValue", "testOk").     Boolean body = consumer.receiveBody("seda:out", 5000, Boolean.class).     verify(map).containsValue("testOk").     assertEquals(true, body).     template.sendBody("direct:containsValue", "testKo").     body = consumer.receiveBody("seda:out", 5000, Boolean.class).     verify(map).containsValue("testKo").     assertEquals(false, body). }
