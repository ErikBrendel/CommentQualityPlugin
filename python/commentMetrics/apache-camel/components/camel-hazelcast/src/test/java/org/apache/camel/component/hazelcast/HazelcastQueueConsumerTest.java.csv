commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void trainHazelcastInstance(HazelcastInstance hazelcastInstance) {     when(hazelcastInstance.<String>getQueue("foo")).thenReturn(queue).     when(queue.addItemListener(any(), eq(true))).thenReturn("foo"). }
false;protected;1;6;;@Override @SuppressWarnings("unchecked") protected void verifyHazelcastInstance(HazelcastInstance hazelcastInstance) {     verify(hazelcastInstance).getQueue("foo").     verify(queue).addItemListener(any(ItemListener.class), eq(true)). }
false;public;0;14;;@Test public void add() throws InterruptedException {     MockEndpoint out = getMockEndpoint("mock:added").     out.expectedMessageCount(1).     verify(queue).addItemListener(argument.capture(), eq(true)).     final ItemEvent<String> event = new ItemEvent<>("foo", ItemEventType.ADDED, "foo", null).     argument.getValue().itemAdded(event).     assertMockEndpointsSatisfied(2000, TimeUnit.MILLISECONDS).     this.checkHeaders(out.getExchanges().get(0).getIn().getHeaders(), HazelcastConstants.ADDED). }
false;public;0;12;;@Test public void remove() throws InterruptedException {     MockEndpoint out = getMockEndpoint("mock:removed").     out.expectedMessageCount(1).     verify(queue).addItemListener(argument.capture(), eq(true)).     final ItemEvent<String> event = new ItemEvent<>("foo", ItemEventType.REMOVED, "foo", null).     argument.getValue().itemRemoved(event).     assertMockEndpointsSatisfied(2000, TimeUnit.MILLISECONDS).     this.checkHeaders(out.getExchanges().get(0).getIn().getHeaders(), HazelcastConstants.REMOVED). }
false;public;0;6;;@Override public void configure() throws Exception {     from(String.format("hazelcast-%sfoo", HazelcastConstants.QUEUE_PREFIX)).log("object...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.ADDED)).log("...added").to("mock:added").when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.REMOVED)).log("...removed").to("mock:removed").otherwise().log("fail!"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(String.format("hazelcast-%sfoo", HazelcastConstants.QUEUE_PREFIX)).log("object...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.ADDED)).log("...added").to("mock:added").when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.REMOVED)).log("...removed").to("mock:removed").otherwise().log("fail!").         }     }. }
false;private;2;6;;private void checkHeaders(Map<String, Object> headers, String action) {     assertEquals(action, headers.get(HazelcastConstants.LISTENER_ACTION)).     assertEquals(HazelcastConstants.CACHE_LISTENER, headers.get(HazelcastConstants.LISTENER_TYPE)).     assertEquals(null, headers.get(HazelcastConstants.OBJECT_ID)).     assertNotNull(headers.get(HazelcastConstants.LISTENER_TIME)). }
