commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testExchangeTransferEnabled() throws InterruptedException {     final String value = "CAMEL-3983".     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("test").     mock.expectedHeaderReceived("test", value).     Exchange exchange = createExchangeWithBody("test").     exchange.getIn().setHeader("test", value).     template.send("direct:foobar", exchange).     assertMockEndpointsSatisfied().     mock.reset(). }
false;public;0;14;;@Test(expected = AssertionError.class) public void testExchangeTransferDisabled() throws InterruptedException {     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("test").     mock.expectedHeaderReceived("test", "").     Exchange exchange = createExchangeWithBody("test").     exchange.getIn().setHeader("test", "fail...").     template.send("direct:foo", exchange).     assertMockEndpointsSatisfied().     mock.reset(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:foo").to("hazelcast-seda:foo").     from("direct:foobar").to("hazelcast-seda:foo?transferExchange=true").     from("hazelcast-seda:foo").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("hazelcast-seda:foo").             from("direct:foobar").to("hazelcast-seda:foo?transferExchange=true").             from("hazelcast-seda:foo").to("mock:result").         }     }. }
