commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void trainHazelcastInstance(HazelcastInstance hazelcastInstance) {     when(hazelcastInstance.getAtomicLong("foo")).thenReturn(atomicNumber). }
false;protected;1;4;;@Override protected void verifyHazelcastInstance(HazelcastInstance hazelcastInstance) {     verify(hazelcastInstance, atLeastOnce()).getAtomicLong("foo"). }
false;public;0;4;;@After public void verifyAtomicNumberMock() {     verifyNoMoreInteractions(atomicNumber). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/META-INF/spring/test-camel-context-atomicnumber.xml"). }
false;public;0;5;;@Test public void testSet() {     template.sendBody("direct:set", 4711).     verify(atomicNumber).set(4711). }
false;public;0;7;;@Test public void testGet() {     when(atomicNumber.get()).thenReturn(1234L).     long body = template.requestBody("direct:get", null, Long.class).     verify(atomicNumber).get().     assertEquals(1234, body). }
false;public;0;7;;@Test public void testIncrement() {     when(atomicNumber.incrementAndGet()).thenReturn(11L).     long body = template.requestBody("direct:increment", null, Long.class).     verify(atomicNumber).incrementAndGet().     assertEquals(11, body). }
false;public;0;7;;@Test public void testDecrement() {     when(atomicNumber.decrementAndGet()).thenReturn(9L).     long body = template.requestBody("direct:decrement", null, Long.class).     verify(atomicNumber).decrementAndGet().     assertEquals(9, body). }
false;public;0;5;;@Test public void testDestroy() throws InterruptedException {     template.sendBody("direct:destroy", null).     verify(atomicNumber).destroy(). }
false;public;0;15;;@Test public void testCompareAndSet() {     Map<String, Object> headersOk = new HashMap().     headersOk.put(HazelcastConstants.EXPECTED_VALUE, 1234L).     when(atomicNumber.compareAndSet(1234L, 1235L)).thenReturn(true).     when(atomicNumber.compareAndSet(1233L, 1235L)).thenReturn(false).     boolean result = template.requestBodyAndHeaders("direct:compareAndSet", 1235L, headersOk, Boolean.class).     verify(atomicNumber).compareAndSet(1234L, 1235L).     assertEquals(true, result).     Map<String, Object> headersKo = new HashMap().     headersKo.put(HazelcastConstants.EXPECTED_VALUE, 1233L).     result = template.requestBodyAndHeaders("direct:compareAndSet", 1235L, headersKo, Boolean.class).     verify(atomicNumber).compareAndSet(1233L, 1235L).     assertEquals(false, result). }
false;public;0;7;;@Test public void testGetAndAdd() {     when(atomicNumber.getAndAdd(12L)).thenReturn(13L).     long result = template.requestBody("direct:getAndAdd", 12L, Long.class).     verify(atomicNumber).getAndAdd(12L).     assertEquals(13L, result). }
