commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void trainHazelcastInstance(HazelcastInstance hazelcastInstance) {     when(hazelcastInstance.<String>getReliableTopic("foo")).thenReturn(reliableTopic).     when(reliableTopic.addMessageListener(any())).thenReturn("foo"). }
false;protected;1;6;;@Override @SuppressWarnings("unchecked") protected void verifyHazelcastInstance(HazelcastInstance hazelcastInstance) {     verify(hazelcastInstance).getReliableTopic("foo").     verify(reliableTopic).addMessageListener(any(MessageListener.class)). }
false;public;0;13;;@Test public void receive() throws InterruptedException {     MockEndpoint out = getMockEndpoint("mock:received").     out.expectedMessageCount(1).     verify(reliableTopic).addMessageListener(argument.capture()).     final Message<String> msg = new Message<>("foo", "foo", new java.util.Date().getTime(), null).     argument.getValue().onMessage(msg).     assertMockEndpointsSatisfied(2000, TimeUnit.MILLISECONDS).     this.checkHeaders(out.getExchanges().get(0).getIn().getHeaders(), HazelcastConstants.RECEIVED). }
false;public;0;9;;@Override public void configure() throws Exception {     from(String.format("hazelcast-%sfoo?reliable=true", HazelcastConstants.TOPIC_PREFIX)).log("object...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.RECEIVED)).log("...received").to("mock:received").otherwise().log("fail!"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(String.format("hazelcast-%sfoo?reliable=true", HazelcastConstants.TOPIC_PREFIX)).log("object...").choice().when(header(HazelcastConstants.LISTENER_ACTION).isEqualTo(HazelcastConstants.RECEIVED)).log("...received").to("mock:received").otherwise().log("fail!").         }     }. }
false;private;2;6;;private void checkHeaders(Map<String, Object> headers, String action) {     assertEquals(action, headers.get(HazelcastConstants.LISTENER_ACTION)).     assertEquals(HazelcastConstants.CACHE_LISTENER, headers.get(HazelcastConstants.LISTENER_TYPE)).     assertEquals(null, headers.get(HazelcastConstants.OBJECT_ID)).     assertNotNull(headers.get(HazelcastConstants.LISTENER_TIME)). }
