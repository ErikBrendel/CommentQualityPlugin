commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void trainHazelcastInstance(HazelcastInstance hazelcastInstance) {     when(hazelcastInstance.<String>getQueue("bar")).thenReturn(queue). }
false;protected;1;4;;@Override protected void verifyHazelcastInstance(HazelcastInstance hazelcastInstance) {     verify(hazelcastInstance, atLeastOnce()).getQueue("bar"). }
false;public;0;4;;@After public void verifyQueueMock() {     verifyNoMoreInteractions(queue). }
false;public;0;4;;@Test(expected = CamelExecutionException.class) public void testWithInvalidOperation() {     template.sendBody("direct:putInvalid", "foo"). }
false;public;0;5;;@Test public void put() throws InterruptedException {     template.sendBody("direct:put", "foo").     verify(queue).put("foo"). }
false;public;0;5;;@Test public void putWithOperationNumber() throws InterruptedException {     template.sendBody("direct:putWithOperationNumber", "foo").     verify(queue).put("foo"). }
false;public;0;5;;@Test public void putWithOperationName() throws InterruptedException {     template.sendBody("direct:putWithOperationName", "foo").     verify(queue).put("foo"). }
false;public;0;5;;@Test public void noOperation() {     template.sendBody("direct:no-operation", "bar").     verify(queue).add("bar"). }
false;public;0;5;;@Test public void add() {     template.sendBody("direct:add", "bar").     verify(queue).add("bar"). }
false;public;0;5;;@Test public void offer() {     template.sendBody("direct:offer", "foobar").     verify(queue).offer("foobar"). }
false;public;0;5;;@Test public void removeSpecifiedValue() throws InterruptedException {     template.sendBody("direct:removeValue", "foo2").     verify(queue).remove("foo2"). }
false;public;0;5;;@Test public void removeValue() {     template.sendBody("direct:removeValue", null).     verify(queue).remove(). }
false;public;0;7;;@Test public void poll() throws InterruptedException {     when(queue.poll()).thenReturn("foo").     String answer = template.requestBody("direct:poll", null, String.class).     verify(queue).poll().     assertEquals("foo", answer). }
false;public;0;7;;@Test public void peek() throws InterruptedException {     when(queue.peek()).thenReturn("foo").     String answer = template.requestBody("direct:peek", null, String.class).     verify(queue).peek().     assertEquals("foo", answer). }
false;public;0;7;;@Test public void remainingCapacity() throws InterruptedException {     when(queue.remainingCapacity()).thenReturn(10).     int answer = template.requestBody("direct:REMAINING_CAPACITY", null, Integer.class).     verify(queue).remainingCapacity().     assertEquals(10, answer). }
false;public;0;7;;@Test public void removeAll() throws InterruptedException {     Collection c = new HashSet<>().     c.add("foo2").     template.sendBody("direct:removeAll", c).     verify(queue).removeAll(c). }
false;public;0;6;;@Test public void removeIf() throws InterruptedException {     Predicate<String> i = (s) -> s.length() > 5.     template.sendBody("direct:removeIf", i).     verify(queue).removeIf(i). }
false;public;0;5;;@Test public void take() throws InterruptedException {     template.sendBody("direct:take", "foo").     verify(queue).take(). }
false;public;0;7;;@Test public void retainAll() throws InterruptedException {     Collection c = new HashSet<>().     c.add("foo2").     template.sendBody("direct:retainAll", c).     verify(queue).retainAll(c). }
false;public;0;10;;@Test public void drainTo() throws InterruptedException {     Map<String, Object> headers = new HashMap<>().     Collection l = new ArrayList<>().     headers.put(HazelcastConstants.DRAIN_TO_COLLECTION, l).     when(queue.drainTo(l)).thenReturn(10).     int answer = template.requestBodyAndHeaders("direct:drainTo", "test", headers, Integer.class).     verify(queue).drainTo(l).     assertEquals(10, answer). }
false;public;0;41;;@Override public void configure() throws Exception {     from("direct:no-operation").to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:putInvalid").setHeader(HazelcastConstants.OPERATION, constant("bogus")).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:put").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.PUT)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:add").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.ADD)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:offer").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.OFFER)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:poll").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.POLL)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:peek").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.PEEK)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:removeValue").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMOVE_VALUE)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:removeAll").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMOVE_ALL)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:removeIf").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMOVE_IF)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:REMAINING_CAPACITY").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMAINING_CAPACITY)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:take").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.TAKE)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:retainAll").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.RETAIN_ALL)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:drainTo").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.DRAIN_TO)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).     from("direct:putWithOperationNumber").toF(String.format("hazelcast-%sbar?operation=%s", HazelcastConstants.QUEUE_PREFIX, HazelcastOperation.PUT)).     from("direct:putWithOperationName").toF(String.format("hazelcast-%sbar?operation=PUT", HazelcastConstants.QUEUE_PREFIX)). }
false;protected;0;46;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:no-operation").to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:putInvalid").setHeader(HazelcastConstants.OPERATION, constant("bogus")).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:put").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.PUT)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:add").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.ADD)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:offer").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.OFFER)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:poll").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.POLL)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:peek").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.PEEK)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:removeValue").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMOVE_VALUE)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:removeAll").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMOVE_ALL)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:removeIf").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMOVE_IF)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:REMAINING_CAPACITY").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.REMAINING_CAPACITY)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:take").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.TAKE)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:retainAll").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.RETAIN_ALL)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:drainTo").setHeader(HazelcastConstants.OPERATION, constant(HazelcastOperation.DRAIN_TO)).to(String.format("hazelcast-%sbar", HazelcastConstants.QUEUE_PREFIX)).             from("direct:putWithOperationNumber").toF(String.format("hazelcast-%sbar?operation=%s", HazelcastConstants.QUEUE_PREFIX, HazelcastOperation.PUT)).             from("direct:putWithOperationName").toF(String.format("hazelcast-%sbar?operation=PUT", HazelcastConstants.QUEUE_PREFIX)).         }     }. }
