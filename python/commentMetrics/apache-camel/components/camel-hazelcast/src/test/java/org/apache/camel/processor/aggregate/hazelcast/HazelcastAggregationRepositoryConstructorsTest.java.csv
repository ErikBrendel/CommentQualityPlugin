commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test(expected = UnsupportedOperationException.class) public void nonOptimisticRepoFailsOnOptimisticAdd() throws Exception {     final String repoName = "hzRepoMap".     HazelcastAggregationRepository repo = new HazelcastAggregationRepository(repoName).     repo.doStart().     try {         Exchange oldOne = new DefaultExchange(context()).         Exchange newOne = new DefaultExchange(context()).         final String key = "abrakadabra".         repo.add(context(), key, oldOne, newOne).         fail("OptimisticLockingException should has been thrown").     } finally {         repo.doStop().     } }
false;public;0;14;;@Test(expected = UnsupportedOperationException.class) public void optimisticRepoFailsForNonOptimisticAdd() throws Exception {     final String repoName = "hzRepoMap".     HazelcastAggregationRepository repo = new HazelcastAggregationRepository(repoName, true).     repo.doStart().     try {         Exchange ex = new DefaultExchange(context()).         final String key = "abrakadabra".         repo.add(context(), key, ex).     } finally {         repo.doStop().     } }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void uninitializedHazelcastInstanceThrows() throws Exception {     final String repoName = "hzRepoMap".     HazelcastAggregationRepository repo = new HazelcastAggregationRepository(repoName, (HazelcastInstance) null).     repo.doStart(). }
false;public;0;13;;@Test public void locallyInitializedHazelcastInstanceAdd() throws Exception {     HazelcastAggregationRepository repo = new HazelcastAggregationRepository("hzRepoMap").     try {         repo.doStart().         Exchange ex = new DefaultExchange(context()).         repo.add(context(), "somedefaultkey", ex).     // } catch (Throwable e) {     // fail(e.getMessage()).     } finally {         repo.doStop().     } }
