commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void sendTransferTest() throws Exception {     final String message = "ILOVEAPACHECAMEL".     MockEndpoint mock = getMockEndpoint("mock:iota-send-message-response").     mock.expectedMinimumMessageCount(1).     template.sendBody("direct:iota-send-message", message).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void getNewAddressTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:iota-new-address-response").     mock.expectedMinimumMessageCount(1).     template.sendBody("direct:iota-new-address", new String()).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void getTransfersTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:iota-get-transfers-response").     mock.expectedMinimumMessageCount(1).     template.sendBody("direct:iota-get-transfers", new String()).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() {     from("direct:iota-send-message").setHeader(IOTAConstants.SEED_HEADER, constant(SEED)).setHeader(IOTAConstants.TO_ADDRESS_HEADER, constant(ADDRESS)).to("iota://test?url=" + IOTA_NODE_URL + "&securityLevel=2&tag=APACHECAMELTEST&depth=3&operation=" + IOTAConstants.SEND_TRANSFER_OPERATION).to("mock:iota-send-message-response").     from("direct:iota-new-address").setHeader(IOTAConstants.SEED_HEADER, constant(SEED)).setHeader(IOTAConstants.ADDRESS_INDEX_HEADER, constant(1)).to("iota://test?url=" + IOTA_NODE_URL + "&securityLevel=1&operation=" + IOTAConstants.GET_NEW_ADDRESS_OPERATION).to("mock:iota-new-address-response").     from("direct:iota-get-transfers").setHeader(IOTAConstants.SEED_HEADER, constant(SEED)).setHeader(IOTAConstants.ADDRESS_START_INDEX_HEADER, constant(1)).setHeader(IOTAConstants.ADDRESS_END_INDEX_HEADER, constant(10)).to("iota://test?url=" + IOTA_NODE_URL + "&securityLevel=1&operation=" + IOTAConstants.GET_TRANSFERS_OPERATION).to("mock:iota-get-transfers-response"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:iota-send-message").setHeader(IOTAConstants.SEED_HEADER, constant(SEED)).setHeader(IOTAConstants.TO_ADDRESS_HEADER, constant(ADDRESS)).to("iota://test?url=" + IOTA_NODE_URL + "&securityLevel=2&tag=APACHECAMELTEST&depth=3&operation=" + IOTAConstants.SEND_TRANSFER_OPERATION).to("mock:iota-send-message-response").             from("direct:iota-new-address").setHeader(IOTAConstants.SEED_HEADER, constant(SEED)).setHeader(IOTAConstants.ADDRESS_INDEX_HEADER, constant(1)).to("iota://test?url=" + IOTA_NODE_URL + "&securityLevel=1&operation=" + IOTAConstants.GET_NEW_ADDRESS_OPERATION).to("mock:iota-new-address-response").             from("direct:iota-get-transfers").setHeader(IOTAConstants.SEED_HEADER, constant(SEED)).setHeader(IOTAConstants.ADDRESS_START_INDEX_HEADER, constant(1)).setHeader(IOTAConstants.ADDRESS_END_INDEX_HEADER, constant(10)).to("iota://test?url=" + IOTA_NODE_URL + "&securityLevel=1&operation=" + IOTAConstants.GET_TRANSFERS_OPERATION).to("mock:iota-get-transfers-response").         }     }. }
