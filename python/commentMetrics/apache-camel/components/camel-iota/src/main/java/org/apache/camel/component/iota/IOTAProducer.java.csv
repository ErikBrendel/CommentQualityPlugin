commented;modifiers;parameterAmount;loc;comment;code
false;public;1;44;;public void process(Exchange exchange) throws Exception {     String seed = exchange.getIn().getHeader(IOTAConstants.SEED_HEADER, String.class).     if (endpoint.getOperation() == null) {         throw new UnsupportedOperationException("IOTAProducer operation cannot be null!").     }     if (endpoint.getOperation().equals(IOTAConstants.SEND_TRANSFER_OPERATION)) {         String address = exchange.getIn().getHeader(IOTAConstants.TO_ADDRESS_HEADER, String.class).         Integer value = exchange.getIn().getHeader(IOTAConstants.VALUE_HEADER, Integer.class).         value = value != null ? value : 0.         String tag = StringUtils.rightPad(endpoint.getTag(), IOTAConstants.TAG_LENGTH, '9').         String message = TrytesConverter.asciiToTrytes(exchange.getIn().getBody(String.class)).         if (LOG.isDebugEnabled()) {             // LOG.debug("seed {}", seed).             LOG.debug("endpoint: security level {} depth {} minWeightMagnitude {} tag {} ", endpoint.getSecurityLevel(), endpoint.getDepth(), endpoint.getMinWeightMagnitude(), tag).             LOG.debug("Sending value {} with message {} to address {}", value, message, address).         }         List<Transfer> transfers = new ArrayList<>().         transfers.add(new Transfer(address, value, message, tag)).         SendTransferResponse response = endpoint.getApiClient().sendTransfer(seed, endpoint.getSecurityLevel(), endpoint.getDepth(), endpoint.getMinWeightMagnitude(), transfers, null, null, false, true, null).         exchange.getIn().setBody(response.getTransactions()).     } else if (endpoint.getOperation().equals(IOTAConstants.GET_NEW_ADDRESS_OPERATION)) {         Integer index = exchange.getIn().getHeader(IOTAConstants.ADDRESS_INDEX_HEADER, Integer.class).         GetNewAddressResponse response = endpoint.getApiClient().getNewAddress(seed, endpoint.getSecurityLevel(), index, true, 1, false).         exchange.getIn().setBody(response.getAddresses()).     } else if (endpoint.getOperation().equals(IOTAConstants.GET_TRANSFERS_OPERATION)) {         Integer startIdx = exchange.getIn().getHeader(IOTAConstants.ADDRESS_START_INDEX_HEADER, Integer.class).         Integer endIdx = exchange.getIn().getHeader(IOTAConstants.ADDRESS_END_INDEX_HEADER, Integer.class).         GetTransferResponse response = endpoint.getApiClient().getTransfers(seed, endpoint.getSecurityLevel(), startIdx, endIdx, true).         exchange.getIn().setBody(response.getTransfers()).     } }
