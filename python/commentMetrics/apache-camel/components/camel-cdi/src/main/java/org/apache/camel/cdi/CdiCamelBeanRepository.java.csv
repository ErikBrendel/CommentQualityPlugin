commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public Object lookupByName(String name) {     notEmpty(name, "name").     logger.trace("Looking up bean with name [{}]", name).     // Work-around for WELD-2089     if ("properties".equals(name) && findByTypeWithName(PropertiesComponent.class).containsKey("properties")) {         return getReferenceByName(manager, name, PropertiesComponent.class).orElse(null).     }     return getReferenceByName(manager, name, Object.class).orElse(null). }
false;public;2;7;;@Override public <T> T lookupByNameAndType(String name, Class<T> type) {     notEmpty(name, "name").     notNull(type, "type").     logger.trace("Looking up bean with name [{}] of type [{}]", name, type).     return getReferenceByName(manager, name, type).orElse(null). }
false;public;1;8;;@Override public <T> Map<String, T> findByTypeWithName(Class<T> type) {     notNull(type, "type").     logger.trace("Looking up named beans of type [{}]", type).     return manager.getBeans(type, ANY).stream().filter(bean -> bean.getName() != null).collect(toMap(Bean::getName, bean -> getReference(manager, type, bean))). }
false;public;1;6;;@Override public <T> Set<T> findByType(Class<T> type) {     notNull(type, "type").     logger.trace("Looking up beans of type [{}]", type).     return getReferencesByType(manager, type, ANY). }
