commented;modifiers;parameterAmount;loc;comment;code
false;public;1;42;;@Override public T create(CreationalContext<T> creationalContext) {     try {         CamelContext context = isNotEmpty(proxy.getCamelContextId()) ? getReferenceByName(manager, proxy.getCamelContextId(), CamelContext.class).get() : getReference(manager, CamelContext.class, this.context).         Endpoint endpoint.         if (isNotEmpty(proxy.getServiceRef())) {             endpoint = context.getRegistry().lookupByNameAndType(proxy.getServiceRef(), Endpoint.class).         } else {             if (isNotEmpty(proxy.getServiceUrl())) {                 endpoint = context.getEndpoint(proxy.getServiceUrl()).             } else {                 throw new IllegalStateException("serviceUrl or serviceRef must not be empty!").             }         }         if (endpoint == null) {             throw new UnsatisfiedResolutionException("Could not resolve endpoint: " + (isNotEmpty(proxy.getServiceRef()) ? proxy.getServiceRef() : proxy.getServiceUrl())).         }         // binding is enabled by default         boolean bind = proxy.getBinding() != null ? proxy.getBinding() : true.         try {             // Start the endpoint before we create the producer             startService(endpoint).             Producer producer = endpoint.createProducer().             // Add and start the producer             context.addService(producer, true, true).             return createProxy(endpoint, bind, producer, (Class<T>) proxy.getServiceInterface()).         } catch (Exception cause) {             throw new FailedToCreateProducerException(endpoint, cause).         }     } catch (Exception cause) {         throw new CreationException("Error while creating instance for " + this, cause).     } }
false;public;2;5;;@Override public void destroy(T instance, CreationalContext<T> creationalContext) { // We let the Camel context manage the lifecycle of the consumer and // shut it down when Camel stops. }
