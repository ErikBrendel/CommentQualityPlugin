commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;40;;protected void injectFields(final Object bean, final String beanName) {     ReflectionHelper.doWithFields(bean.getClass(), field -> {         PropertyInject propertyInject = field.getAnnotation(PropertyInject.class).         if (propertyInject != null) {             try {                 injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), propertyInject.context(), bean, beanName).             } catch (Exception cause) {                 throw new InjectionException("Injection of [" + propertyInject + "] for field [" + field + "] failed!", cause).             }         }         BeanInject beanInject = field.getAnnotation(BeanInject.class).         // TODO: proper support for multi Camel contexts         if (beanInject != null && getPostProcessorHelper().matchContext(beanInject.context())) {             try {                 injectFieldBean(field, beanInject.value(), bean, beanName).             } catch (Exception cause) {                 throw new InjectionException("Injection of [" + beanInject + "] for field [" + field + "] failed!", cause).             }         }         EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).         if (endpointInject != null) {             try {                 injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), endpointInject.context(), bean, beanName).             } catch (Exception cause) {                 throw new InjectionException("Injection of [" + endpointInject + "] for field [" + field + "] failed!", cause).             }         }         Produce produce = field.getAnnotation(Produce.class).         if (produce != null) {             try {                 injectField(field, produce.uri(), produce.ref(), produce.property(), produce.context(), bean, beanName).             } catch (Exception cause) {                 throw new InjectionException("Injection of [" + produce + "] for field [" + field + "] failed!", cause).             }         }     }). }
false;private;7;3;;private void injectField(Field field, String uri, String ref, String property, String context, Object bean, String beanName) {     ReflectionHelper.setField(field, bean, getPostProcessorHelper(context).getInjectionValue(field.getType(), uri, ref, property, field.getName(), bean, beanName)). }
false;private;6;3;;private void injectFieldProperty(Field field, String property, String defaultValue, String context, Object bean, String beanName) {     ReflectionHelper.setField(field, bean, getPostProcessorHelper(context).getInjectionPropertyValue(field.getType(), property, defaultValue, field.getName(), bean, beanName)). }
false;private;1;3;;private CamelPostProcessorHelper getPostProcessorHelper(String contextName) {     return postProcessorHelpers.computeIfAbsent(contextName, k -> new CamelPostProcessorHelper(getOrLookupCamelContext(k))). }
false;private;1;6;;private CamelContext getOrLookupCamelContext(String contextName) {     // TODO: proper support for custom context qualifiers     return getReferenceByType(manager, CamelContext.class, contextName.isEmpty() ? DEFAULT : ContextName.Literal.of(contextName)).orElseThrow(() -> new UnsatisfiedResolutionException("No Camel context with name [" + contextName + "] is deployed!")). }
false;public;0;4;;@Override public CamelContext getOrLookupCamelContext() {     return getReferenceByType(manager, CamelContext.class).orElse(null). }
