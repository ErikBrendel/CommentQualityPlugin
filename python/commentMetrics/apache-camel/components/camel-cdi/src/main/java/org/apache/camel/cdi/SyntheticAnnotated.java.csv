commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;<A extends Annotation> void addAnnotation(A annotation) {     annotations.add(annotation). }
false;public;0;3;;public Type getBaseType() {     return type. }
false;public;0;3;;public Set<Type> getTypeClosure() {     return unmodifiableSet(types). }
false;public;0;3;;public Set<Annotation> getAnnotations() {     return unmodifiableSet(annotations). }
false;public;1;7;;public <T extends Annotation> T getAnnotation(Class<T> type) {     return annotations.stream().filter(isAnnotationType(type)).findFirst().map(type::cast).orElse(null). }
false;public;1;6;;public <T extends Annotation> Set<T> getAnnotations(Class<T> type) {     return annotations.stream().filter(isAnnotationType(type)).map(type::cast).collect(toSet()). }
false;public;1;3;;public boolean isAnnotationPresent(Class<? extends Annotation> type) {     return annotations.stream().anyMatch(isAnnotationType(type)). }
false;public;0;3;;public Class<?> getJavaClass() {     return javaClass. }
