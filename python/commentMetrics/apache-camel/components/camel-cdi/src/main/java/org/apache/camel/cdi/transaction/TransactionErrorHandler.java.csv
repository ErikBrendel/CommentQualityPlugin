# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1492095139;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {__        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)___    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1492095139;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {__        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)___    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1492095139;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1492181603;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1540108159;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1540108163;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1542904331;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1547836604;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1548175645;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> public TransactionErrorHandler(CamelContext camelContext, Processor output,             ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,             ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel);1549358743;Creates the transaction error handler.__@param camelContext_the camel context_@param output_outer processor that should use this default error handler_@param exceptionPolicyStrategy_strategy for onException handling_@param transactionPolicy_the transaction policy_@param executorService_the {@link java.util.concurrent.ScheduledExecutorService} to_be used for redelivery thread pool. Can be <tt>null</tt>._@param rollbackLoggingLevel_logging level to use for logging transaction rollback occurred;public TransactionErrorHandler(CamelContext camelContext, Processor output,_            ExceptionPolicyStrategy exceptionPolicyStrategy, JtaTransactionPolicy transactionPolicy,_            ScheduledExecutorService executorService, LoggingLevel rollbackLoggingLevel) {_        this.output = output__        this.transactionPolicy = transactionPolicy__        this.rollbackLoggingLevel = rollbackLoggingLevel__        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionPolicy)___        setExceptionPolicy(exceptionPolicyStrategy)__    };creates,the,transaction,error,handler,param,camel,context,the,camel,context,param,output,outer,processor,that,should,use,this,default,error,handler,param,exception,policy,strategy,strategy,for,on,exception,handling,param,transaction,policy,the,transaction,policy,param,executor,service,the,link,java,util,concurrent,scheduled,executor,service,to,be,used,for,redelivery,thread,pool,can,be,tt,null,tt,param,rollback,logging,level,logging,level,to,use,for,logging,transaction,rollback,occurred;public,transaction,error,handler,camel,context,camel,context,processor,output,exception,policy,strategy,exception,policy,strategy,jta,transaction,policy,transaction,policy,scheduled,executor,service,executor,service,logging,level,rollback,logging,level,this,output,output,this,transaction,policy,transaction,policy,this,rollback,logging,level,rollback,logging,level,this,transaction,key,object,helper,get,identity,hash,code,transaction,policy,set,exception,policy,exception,policy,strategy
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1492095139;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] { transactionKey, redelivered, ids })__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] { transactionKey, redelivered, ids, e.getMessage() })__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] { transactionKey, redelivered, ids })__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] { transactionKey, redelivered, ids, e.getMessage() })__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] { transactionKey, redelivered, ids })__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] { transactionKey, redelivered, ids, e.getMessage() })__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] { transactionKey, redelivered, ids })__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] { transactionKey, redelivered, ids, e.getMessage() })__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] { transactionKey, redelivered, ids })__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] { transactionKey, redelivered, ids, e.getMessage() })__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1492095139;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] {transactionKey, redelivered, ids})__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] {transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] {transactionKey, redelivered, ids})__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] {transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] {transactionKey, redelivered, ids})__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] {transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] {transactionKey, redelivered, ids})__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] {transactionKey, redelivered, ids, e.getMessage()})__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        new Object[] {transactionKey, redelivered, ids})__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        new Object[] {transactionKey, redelivered, ids, e.getMessage()})__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,new,object,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,new,object,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1492095139;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1492181603;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1540108159;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1540108163;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1542904331;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1547836604;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1548175645;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly);1549358743;Logs the transaction rollback.;private void logTransactionRollback(String redelivered, String ids, Throwable e, boolean rollbackOnly) {_        if (rollbackLoggingLevel == LoggingLevel.OFF) {_            return__        } else if (rollbackLoggingLevel == LoggingLevel.ERROR && log.isErrorEnabled()) {_            if (rollbackOnly) {_                log.error("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.error("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.WARN && log.isWarnEnabled()) {_            if (rollbackOnly) {_                log.warn("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.INFO && log.isInfoEnabled()) {_            if (rollbackOnly) {_                log.info("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.info("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.DEBUG && log.isDebugEnabled()) {_            if (rollbackOnly) {_                log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.debug("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        } else if (rollbackLoggingLevel == LoggingLevel.TRACE && log.isTraceEnabled()) {_            if (rollbackOnly) {_                log.trace("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",_                        transactionKey, redelivered, ids)__            } else {_                log.trace("Transaction rollback ({}) redelivered({}) for {} caught: {}",_                        transactionKey, redelivered, ids, e.getMessage())__            }_        }_    };logs,the,transaction,rollback;private,void,log,transaction,rollback,string,redelivered,string,ids,throwable,e,boolean,rollback,only,if,rollback,logging,level,logging,level,off,return,else,if,rollback,logging,level,logging,level,error,log,is,error,enabled,if,rollback,only,log,error,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,error,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,warn,log,is,warn,enabled,if,rollback,only,log,warn,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,warn,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,info,log,is,info,enabled,if,rollback,only,log,info,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,info,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,debug,log,is,debug,enabled,if,rollback,only,log,debug,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,debug,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message,else,if,rollback,logging,level,logging,level,trace,log,is,trace,enabled,if,rollback,only,log,trace,transaction,rollback,redelivered,for,due,exchange,was,marked,for,rollback,only,transaction,key,redelivered,ids,else,log,trace,transaction,rollback,redelivered,for,caught,transaction,key,redelivered,ids,e,get,message
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1492095139;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    new Object[] { transactionKey, redelivered, ids })__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1492095139;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    new Object[] {transactionKey, redelivered, ids})__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1492095139;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1492181603;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1540108159;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1540108163;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1542904331;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1547836604;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1548175645;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionBegin(String redelivered, String ids);1549358743;Logs the transaction begin;private void logTransactionBegin(String redelivered, String ids) {_        if (log.isDebugEnabled()) {_            log.debug("Transaction begin ({}) redelivered({}) for {})",_                    transactionKey, redelivered, ids)__        }_    };logs,the,transaction,begin;private,void,log,transaction,begin,string,redelivered,string,ids,if,log,is,debug,enabled,log,debug,transaction,begin,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1492095139;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        new Object[] { transactionKey, redelivered, ids })__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[] { transactionKey, redelivered, ids })__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1492095139;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        new Object[] {transactionKey, redelivered, ids})__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", new Object[] {transactionKey, redelivered, ids})__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,new,object,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1492095139;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1492181603;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1540108159;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1540108163;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1542904331;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1547836604;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1548175645;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> private void logTransactionCommit(String redelivered, String ids);1549358743;Logs the transaction commit;private void logTransactionCommit(String redelivered, String ids) {_        if ("true".equals(redelivered)) {_            _            _            _            _            if (rollbackLoggingLevel == LoggingLevel.INFO || rollbackLoggingLevel == LoggingLevel.WARN_                    || rollbackLoggingLevel == LoggingLevel.ERROR) {_                log.info("Transaction commit ({}) redelivered({}) for {})",_                        transactionKey, redelivered, ids)__                _                return__            }_        }__        _        log.debug("Transaction commit ({}) redelivered({}) for {})", transactionKey, redelivered, ids)__    };logs,the,transaction,commit;private,void,log,transaction,commit,string,redelivered,string,ids,if,true,equals,redelivered,if,rollback,logging,level,logging,level,info,rollback,logging,level,logging,level,warn,rollback,logging,level,logging,level,error,log,info,transaction,commit,redelivered,for,transaction,key,redelivered,ids,return,log,debug,transaction,commit,redelivered,for,transaction,key,redelivered,ids
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1492095139;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {__        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1492095139;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {__        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }__    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1492095139;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1492181603;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1540108159;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1540108163;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1542904331;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1547836604;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1548175645;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
TransactionErrorHandler -> protected void processByErrorHandler(final Exchange exchange);1549358743;Processes the {@link Exchange} using the error handler._<p/>_This implementation will invoke ensure this occurs synchronously, that_means if the async routing engine did kick in, then this implementation_will wait for the task to complete before it continues.__@param exchange_the exchange;protected void processByErrorHandler(final Exchange exchange) {_        try {_            output.process(exchange)__        } catch (Throwable e) {_            throw new RuntimeCamelException(e)__        }_    };processes,the,link,exchange,using,the,error,handler,p,this,implementation,will,invoke,ensure,this,occurs,synchronously,that,means,if,the,async,routing,engine,did,kick,in,then,this,implementation,will,wait,for,the,task,to,complete,before,it,continues,param,exchange,the,exchange;protected,void,process,by,error,handler,final,exchange,exchange,try,output,process,exchange,catch,throwable,e,throw,new,runtime,camel,exception,e
