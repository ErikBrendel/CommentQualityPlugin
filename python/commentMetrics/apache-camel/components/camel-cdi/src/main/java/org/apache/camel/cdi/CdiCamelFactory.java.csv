commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;4;;@Produces private static TypeConverter typeConverter(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     return selectContext(ip, instance, extension).getTypeConverter(). }
false;private,static;3;5;;@Produces private static // Qualifiers are dynamically added in CdiCamelExtension ConsumerTemplate consumerTemplate(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     return selectContext(ip, instance, extension).createConsumerTemplate(). }
false;private,static;3;8;;@Produces @Default @Uri("") private static // Qualifiers are dynamically added in CdiCamelExtension ProducerTemplate producerTemplate(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     return getQualifierByType(ip, Uri.class).map(uri -> producerTemplateFromUri(ip, instance, extension, uri)).orElseGet(() -> defaultProducerTemplate(ip, instance, extension)). }
false;private,static;4;11;;private static ProducerTemplate producerTemplateFromUri(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension, Uri uri) {     try {         CamelContext context = selectContext(ip, instance, extension).         ProducerTemplate producerTemplate = context.createProducerTemplate().         Endpoint endpoint = context.getEndpoint(uri.value(), Endpoint.class).         producerTemplate.setDefaultEndpoint(endpoint).         return producerTemplate.     } catch (Exception cause) {         throw new InjectionException("Error injecting producer template annotated with " + uri + " into " + ip, cause).     } }
false;private,static;3;8;;private static ProducerTemplate defaultProducerTemplate(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     try {         CamelContext context = selectContext(ip, instance, extension).         return context.createProducerTemplate().     } catch (Exception cause) {         throw new InjectionException("Error injecting producer template into " + ip, cause).     } }
false;private,static;3;8;;@Produces @Default @Uri("") private static // Qualifiers are dynamically added in CdiCamelExtension FluentProducerTemplate fluentProducerTemplate(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     return getQualifierByType(ip, Uri.class).map(uri -> fluentProducerTemplateFromUri(ip, instance, extension, uri)).orElseGet(() -> defaultFluentProducerTemplate(ip, instance, extension)). }
false;private,static;4;11;;private static FluentProducerTemplate fluentProducerTemplateFromUri(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension, Uri uri) {     try {         CamelContext context = selectContext(ip, instance, extension).         FluentProducerTemplate producerTemplate = context.createFluentProducerTemplate().         Endpoint endpoint = context.getEndpoint(uri.value(), Endpoint.class).         producerTemplate.setDefaultEndpoint(endpoint).         return producerTemplate.     } catch (Exception cause) {         throw new InjectionException("Error injecting fluent producer template annotated with " + uri + " into " + ip, cause).     } }
false;private,static;3;8;;private static FluentProducerTemplate defaultFluentProducerTemplate(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     try {         CamelContext context = selectContext(ip, instance, extension).         return context.createFluentProducerTemplate().     } catch (Exception cause) {         throw new InjectionException("Error injecting fluent producer template into " + ip, cause).     } }
false;private,static;3;11;;@Produces @Typed(MockEndpoint.class) private static // Qualifiers are dynamically added in CdiCamelExtension MockEndpoint mockEndpointFromMember(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     String uri = "mock:" + ip.getMember().getName().     try {         return selectContext(ip, instance, extension).getEndpoint(uri, MockEndpoint.class).     } catch (Exception cause) {         throw new InjectionException("Error injecting mock endpoint into " + ip, cause).     } }
false;private,static;3;14;;@Uri("") @Produces @Typed(MockEndpoint.class) private static // Qualifiers are dynamically added in CdiCamelExtension MockEndpoint mockEndpointFromUri(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     Uri uri = getQualifierByType(ip, Uri.class).get().     try {         CamelContext context = selectContext(ip, instance, extension).         return context.getEndpoint(uri.value(), MockEndpoint.class).     } catch (Exception cause) {         throw new InjectionException("Error injecting mock endpoint annotated with " + uri + " into " + ip, cause).     } }
false;private,static;3;12;;@Uri("") @Produces private static // Qualifiers are dynamically added in CdiCamelExtension Endpoint endpoint(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension) {     Uri uri = getQualifierByType(ip, Uri.class).get().     try {         CamelContext context = selectContext(ip, instance, extension).         return context.getEndpoint(uri.value(), Endpoint.class).     } catch (Exception cause) {         throw new InjectionException("Error injecting endpoint annotated with " + uri + " into " + ip, cause).     } }
false;private,static;4;15;;@Produces @SuppressWarnings("unchecked") private static <// Qualifiers are dynamically added in CdiCamelExtension T> CdiEventEndpoint<T> cdiEventEndpoint(InjectionPoint ip, @Any Instance<CamelContext> instance, CdiCamelExtension extension, @Any Event<Object> event) throws Exception {     CamelContext context = selectContext(ip, instance, extension).     Type type = Object.class.     if (ip.getType() instanceof ParameterizedType) {         type = ((ParameterizedType) ip.getType()).getActualTypeArguments()[0].     }     String uri = eventEndpointUri(type, ip.getQualifiers()).     if (context.hasEndpoint(uri) == null) {         context.addEndpoint(uri, extension.getEventEndpoint(uri)).     }     return context.getEndpoint(uri, CdiEventEndpoint.class). }
false;private,static;3;8;;private static <T extends CamelContext> T selectContext(InjectionPoint ip, Instance<T> instance, CdiCamelExtension extension) {     Collection<Annotation> qualifiers = new HashSet<>(ip.getQualifiers()).     qualifiers.retainAll(extension.getContextQualifiers()).     if (qualifiers.isEmpty() && !instance.select(DEFAULT).isUnsatisfied()) {         return instance.select(DEFAULT).get().     }     return instance.select(qualifiers.toArray(new Annotation[0])).get(). }
false;private,static;2;6;;private static <T extends Annotation> Optional<T> getQualifierByType(InjectionPoint ip, Class<T> type) {     return ip.getQualifiers().stream().filter(isAnnotationType(type)).findAny().map(type::cast). }
