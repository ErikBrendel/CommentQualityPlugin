# id;timestamp;commentText;codeText;commentWords;codeWords
CdiSpiHelper -> private static String createTypeId(Type type);1461070175;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(Collectors.joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,collectors,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1461148208;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(Collectors.joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,collectors,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1461148208;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(Collectors.joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,collectors,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1461166317;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1461167348;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1461226700;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1461335336;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1462271222;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1462274406;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1479898601;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeId(Type type);1538030521;Generates a unique signature for a {@link Type}.;private static String createTypeId(Type type) {_        if (type instanceof Class<?>) {_            return Class.class.cast(type).getName()__        }__        if (type instanceof ParameterizedType) {_            return createTypeId(((ParameterizedType) type).getRawType())_                + Stream.of(((ParameterizedType) type).getActualTypeArguments())_                .map(CdiSpiHelper::createTypeId)_                .collect(joining(",", "<", ">"))__        }__        if (type instanceof TypeVariable<?>) {_            return TypeVariable.class.cast(type).getName()__        }__        if (type instanceof GenericArrayType) {_            return createTypeId(GenericArrayType.class.cast(type).getGenericComponentType())__        }__        throw new UnsupportedOperationException("Unable to create type id for type [" + type + "]")__    };generates,a,unique,signature,for,a,link,type;private,static,string,create,type,id,type,type,if,type,instanceof,class,return,class,class,cast,type,get,name,if,type,instanceof,parameterized,type,return,create,type,id,parameterized,type,type,get,raw,type,stream,of,parameterized,type,type,get,actual,type,arguments,map,cdi,spi,helper,create,type,id,collect,joining,if,type,instanceof,type,variable,return,type,variable,class,cast,type,get,name,if,type,instanceof,generic,array,type,return,create,type,id,generic,array,type,class,cast,type,get,generic,component,type,throw,new,unsupported,operation,exception,unable,to,create,type,id,for,type,type
CdiSpiHelper -> private static String createTypeCollectionId(Collection<? extends Type> types);1461070175;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<? extends Type> types) {_        return types.stream()_            .sorted((t1, t2) -> createTypeId(t1).compareTo(createTypeId(t2)))_            .map(CdiSpiHelper::createTypeId)_            .collect(Collectors.joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,extends,type,types,return,types,stream,sorted,t1,t2,create,type,id,t1,compare,to,create,type,id,t2,map,cdi,spi,helper,create,type,id,collect,collectors,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<? extends Type> types);1461148208;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<? extends Type> types) {_        return types.stream()_            .sorted((t1, t2) -> createTypeId(t1).compareTo(createTypeId(t2)))_            .map(CdiSpiHelper::createTypeId)_            .collect(Collectors.joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,extends,type,types,return,types,stream,sorted,t1,t2,create,type,id,t1,compare,to,create,type,id,t2,map,cdi,spi,helper,create,type,id,collect,collectors,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<? extends Type> types);1461148208;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<? extends Type> types) {_        return types.stream()_            .sorted((t1, t2) -> createTypeId(t1).compareTo(createTypeId(t2)))_            .map(CdiSpiHelper::createTypeId)_            .collect(Collectors.joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,extends,type,types,return,types,stream,sorted,t1,t2,create,type,id,t1,compare,to,create,type,id,t2,map,cdi,spi,helper,create,type,id,collect,collectors,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<? extends Type> types);1461166317;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<? extends Type> types) {_        return types.stream()_            .sorted((t1, t2) -> createTypeId(t1).compareTo(createTypeId(t2)))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,extends,type,types,return,types,stream,sorted,t1,t2,create,type,id,t1,compare,to,create,type,id,t2,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<? extends Type> types);1461167348;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<? extends Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,extends,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<Type> types);1461226700;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<Type> types);1461335336;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<Type> types);1462271222;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<Type> types);1462274406;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<Type> types);1479898601;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> private static String createTypeCollectionId(Collection<Type> types);1538030521;Generates a unique signature of a collection of types.;private static String createTypeCollectionId(Collection<Type> types) {_        return types.stream()_            .sorted(comparing(CdiSpiHelper::createTypeId))_            .map(CdiSpiHelper::createTypeId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,of,a,collection,of,types;private,static,string,create,type,collection,id,collection,type,types,return,types,stream,sorted,comparing,cdi,spi,helper,create,type,id,map,cdi,spi,helper,create,type,id,collect,joining
CdiSpiHelper -> static String createAnnotationId(Annotation annotation);1462274406;Generates a unique signature for an {@link Annotation}.;static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .filter(method -> !method.isAnnotationPresent(Nonbinding.class))_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@" + annotation.annotationType().getCanonicalName() + "(", ")"),_                (joiner, method) -> {_                    try {_                        joiner.add(method.getName() + "=" + method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,filter,method,method,is,annotation,present,nonbinding,class,sorted,comparing,method,get,name,collect,new,string,joiner,annotation,annotation,type,get,canonical,name,joiner,method,try,joiner,add,method,get,name,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> static String createAnnotationId(Annotation annotation);1479898601;Generates a unique signature for an {@link Annotation}.;static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .filter(method -> !method.isAnnotationPresent(Nonbinding.class))_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@" + annotation.annotationType().getCanonicalName() + "(", ")"),_                (joiner, method) -> {_                    try {_                        joiner.add(method.getName() + "=" + method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,filter,method,method,is,annotation,present,nonbinding,class,sorted,comparing,method,get,name,collect,new,string,joiner,annotation,annotation,type,get,canonical,name,joiner,method,try,joiner,add,method,get,name,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> static String createAnnotationId(Annotation annotation);1538030521;Generates a unique signature for an {@link Annotation}.;static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .filter(method -> !method.isAnnotationPresent(Nonbinding.class))_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@" + annotation.annotationType().getCanonicalName() + "(", ")"),_                (joiner, method) -> {_                    try {_                        joiner.add(method.getName() + "=" + method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,filter,method,method,is,annotation,present,nonbinding,class,sorted,comparing,method,get,name,collect,new,string,joiner,annotation,annotation,type,get,canonical,name,joiner,method,try,joiner,add,method,get,name,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461070175;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(s -> s != null)_            .collect(Collectors.joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,s,s,null,collect,collectors,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461148208;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(s -> s != null)_            .collect(Collectors.joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,s,s,null,collect,collectors,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461148208;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(s -> s != null)_            .collect(Collectors.joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,s,s,null,collect,collectors,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461166317;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461167348;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461226700;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1461335336;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1462271222;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1462274406;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1479898601;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> static String createBeanId(Bean<?> bean);1538030521;Generates a unique signature for {@link Bean}.;static String createBeanId(Bean<?> bean) {_        return Stream.of(bean.getName(),_            bean.getScope().getName(),_            createAnnotationCollectionId(bean.getQualifiers()),_            createTypeCollectionId(bean.getTypes()))_            .filter(Objects::nonNull)_            .collect(joining(","))__    };generates,a,unique,signature,for,link,bean;static,string,create,bean,id,bean,bean,return,stream,of,bean,get,name,bean,get,scope,get,name,create,annotation,collection,id,bean,get,qualifiers,create,type,collection,id,bean,get,types,filter,objects,non,null,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461070175;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(Collectors.joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,collectors,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461148208;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(Collectors.joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,collectors,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461148208;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(Collectors.joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,collectors,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461166317;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461167348;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461226700;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1461335336;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1462271222;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1462274406;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted((a1, a2) -> a1.annotationType().getName().compareTo(a2.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,a1,a2,a1,annotation,type,get,name,compare,to,a2,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1479898601;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted(comparing(a -> a.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,comparing,a,a,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationCollectionId(Collection<Annotation> annotations);1538030521;Generates a unique signature for a collection of annotations.;private static String createAnnotationCollectionId(Collection<Annotation> annotations) {_        if (annotations.isEmpty()) {_            return ""__        }__        return annotations.stream()_            .sorted(comparing(a -> a.annotationType().getName()))_            .map(CdiSpiHelper::createAnnotationId)_            .collect(joining(",", "[", "]"))__    };generates,a,unique,signature,for,a,collection,of,annotations;private,static,string,create,annotation,collection,id,collection,annotation,annotations,if,annotations,is,empty,return,return,annotations,stream,sorted,comparing,a,a,annotation,type,get,name,map,cdi,spi,helper,create,annotation,id,collect,joining
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461070175;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = AccessController.doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted((m1, m2) -> m1.getName().compareTo(m2.getName()))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,access,controller,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,m1,m2,m1,get,name,compare,to,m2,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461148208;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = AccessController.doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted((m1, m2) -> m1.getName().compareTo(m2.getName()))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,access,controller,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,m1,m2,m1,get,name,compare,to,m2,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461148208;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = AccessController.doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted((m1, m2) -> m1.getName().compareTo(m2.getName()))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,access,controller,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,m1,m2,m1,get,name,compare,to,m2,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461166317;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted((m1, m2) -> m1.getName().compareTo(m2.getName()))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,m1,m2,m1,get,name,compare,to,m2,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461167348;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,comparing,method,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461226700;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,comparing,method,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1461335336;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@(", ")"),_                (joiner, method) -> {_                    try {_                        joiner_                            .add(method.getName()).add("=")_                            .add(method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,comparing,method,get,name,collect,new,string,joiner,joiner,method,try,joiner,add,method,get,name,add,add,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
CdiSpiHelper -> private static String createAnnotationId(Annotation annotation);1462271222;Generates a unique signature for an {@link Annotation}.;private static String createAnnotationId(Annotation annotation) {_        Method[] methods = doPrivileged(_            (PrivilegedAction<Method[]>) () -> annotation.annotationType().getDeclaredMethods())___        return Stream.of(methods)_            .sorted(comparing(Method::getName))_            .collect(() -> new StringJoiner(",", "@" + annotation.annotationType().getCanonicalName() + "(", ")"),_                (joiner, method) -> {_                    try {_                        joiner.add(method.getName() + "=" + method.invoke(annotation).toString())__                    } catch (NullPointerException | IllegalArgumentException | IllegalAccessException | InvocationTargetException cause) {_                        throw new RuntimeException(_                            "Error while accessing member [" + method.getName() + "]"_                                + " of annotation [" + annotation.annotationType().getName() + "]", cause)__                    }_                },_                StringJoiner::merge)_            .toString()__    };generates,a,unique,signature,for,an,link,annotation;private,static,string,create,annotation,id,annotation,annotation,method,methods,do,privileged,privileged,action,method,annotation,annotation,type,get,declared,methods,return,stream,of,methods,sorted,comparing,method,get,name,collect,new,string,joiner,annotation,annotation,type,get,canonical,name,joiner,method,try,joiner,add,method,get,name,method,invoke,annotation,to,string,catch,null,pointer,exception,illegal,argument,exception,illegal,access,exception,invocation,target,exception,cause,throw,new,runtime,exception,error,while,accessing,member,method,get,name,of,annotation,annotation,annotation,type,get,name,cause,string,joiner,merge,to,string
