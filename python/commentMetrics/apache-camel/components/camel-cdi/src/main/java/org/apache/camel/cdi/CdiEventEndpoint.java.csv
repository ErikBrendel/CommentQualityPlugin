commented;modifiers;parameterAmount;loc;comment;code
false;static;2;5;;static String eventEndpointUri(Type type, Set<Annotation> qualifiers) {     return "cdi-event://" + authorityFromType(type) + qualifiers.stream().map(CdiSpiHelper::createAnnotationId).collect(joining("%2C", qualifiers.size() > 0 ? "?qualifiers=" : "", "")). }
false;private,static;1;15;;private static String authorityFromType(Type type) {     if (type instanceof Class) {         return Class.class.cast(type).getName().     }     if (type instanceof ParameterizedType) {         return Stream.of(((ParameterizedType) type).getActualTypeArguments()).map(CdiEventEndpoint::authorityFromType).collect(joining("%2C", authorityFromType(((ParameterizedType) type).getRawType()) + "%3C", "%3E")).     }     if (type instanceof GenericArrayType) {         return authorityFromType(((GenericArrayType) type).getGenericComponentType()) + "%5B%5D".     }     throw new IllegalArgumentException("Cannot create URI authority for event type [" + type + "]"). }
false;;0;3;;Set<Annotation> getQualifiers() {     return qualifiers. }
false;;0;3;;Type getType() {     return type. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) {     return new CdiEventConsumer<>(this, processor). }
false;public;0;21;;@Override public Producer createProducer() throws IllegalAccessException {     // FIXME: to be replaced once event firing with dynamic parameterized type     // is properly supported (see https://issues.jboss.org/browse/CDI-516)     TypeLiteral<T> literal = new TypeLiteral<T>() {     }.     for (Field field : TypeLiteral.class.getDeclaredFields()) {         if (field.getType().equals(Type.class)) {             field.setAccessible(true).             field.set(literal, type).             break.         }     }     InjectionTarget<AnyEvent> target = manager.createInjectionTarget(manager.createAnnotatedType(AnyEvent.class)).     CreationalContext<AnyEvent> ctx = manager.createCreationalContext(null).     AnyEvent instance = target.produce(ctx).     target.inject(instance, ctx).     return new CdiEventProducer<>(this, instance.event.select(literal, qualifiers.toArray(new Annotation[0]))). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;;1;5;;void addConsumer(CdiEventConsumer<T> consumer) {     synchronized (consumers) {         consumers.add(consumer).     } }
false;;1;5;;void removeConsumer(CdiEventConsumer<T> consumer) {     synchronized (consumers) {         consumers.remove(consumer).     } }
false;;1;5;;void notify(T t) {     synchronized (consumers) {         consumers.forEach(consumer -> consumer.notify(t)).     } }
