commented;modifiers;parameterAmount;loc;comment;code
false;public;1;31;;@Override public T create(CreationalContext<T> creationalContext) {     try {         CamelContext context = isNotEmpty(exporter.getCamelContextId()) ? getReferenceByName(manager, exporter.getCamelContextId(), CamelContext.class).get() : getReference(manager, CamelContext.class, this.context).         Bean<?> bean = manager.resolve(manager.getBeans(exporter.getServiceRef())).         if (bean == null) {             throw new UnsatisfiedResolutionException("No bean with name [" + exporter.getServiceRef() + "] is deployed!").         }         @SuppressWarnings("unchecked")         T service = (T) manager.getReference(bean, type, manager.createCreationalContext(bean)).         Endpoint endpoint = getMandatoryEndpoint(context, exporter.getUri()).         try {             // need to start endpoint before we create consumer             startService(endpoint).             Consumer consumer = endpoint.createConsumer(new BeanProcessor(service, context)).             // add and start consumer             context.addService(consumer, true, true).         } catch (Exception cause) {             throw new FailedToCreateConsumerException(endpoint, cause).         }         return service.     } catch (Exception cause) {         throw new CreationException("Error while creating instance for " + this, cause).     } }
false;public;2;5;;@Override public void destroy(T instance, CreationalContext<T> creationalContext) { // We let the Camel context manage the lifecycle of the consumer and // shut it down when Camel stops. }
