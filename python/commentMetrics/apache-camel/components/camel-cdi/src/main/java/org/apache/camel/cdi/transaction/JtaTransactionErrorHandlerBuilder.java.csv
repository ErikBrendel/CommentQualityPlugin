commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean supportTransacted() {     return true. }
false;public;0;6;;@Override public ErrorHandlerBuilder cloneBuilder() {     final JtaTransactionErrorHandlerBuilder answer = new JtaTransactionErrorHandlerBuilder().     cloneBuilder(answer).     return answer. }
false;protected;1;9;;@Override protected void cloneBuilder(DefaultErrorHandlerBuilder other) {     super.cloneBuilder(other).     if (other instanceof JtaTransactionErrorHandlerBuilder) {         final JtaTransactionErrorHandlerBuilder otherTx = (JtaTransactionErrorHandlerBuilder) other.         transactionPolicy = otherTx.transactionPolicy.         rollbackLoggingLevel = otherTx.rollbackLoggingLevel.     } }
false;public;2;67;;public Processor createErrorHandler(final RouteContext routeContext, final Processor processor) throws Exception {     // resolve policy reference, if given     if (transactionPolicy == null) {         if (policyRef != null) {             final TransactedDefinition transactedDefinition = new TransactedDefinition().             transactedDefinition.setRef(policyRef).             final Policy policy = TransactedReifier.resolvePolicy(routeContext, transactedDefinition).             if (policy != null) {                 if (!(policy instanceof JtaTransactionPolicy)) {                     throw new RuntimeCamelException("The configured policy '" + policyRef + "' is of type '" + policyRef.getClass().getName() + "' but an instance of '" + JtaTransactionPolicy.class.getName() + "' is required!").                 }                 transactionPolicy = (JtaTransactionPolicy) policy.             }         }     }     // try to lookup default policy     if (transactionPolicy == null) {         LOG.debug("No transaction policy configured on TransactionErrorHandlerBuilder. Will try find it in the registry.").         Map<String, TransactedPolicy> mapPolicy = routeContext.lookupByType(TransactedPolicy.class).         if (mapPolicy != null && mapPolicy.size() == 1) {             TransactedPolicy policy = mapPolicy.values().iterator().next().             if (policy instanceof JtaTransactionPolicy) {                 transactionPolicy = (JtaTransactionPolicy) policy.             }         }         if (transactionPolicy == null) {             TransactedPolicy policy = routeContext.lookup(PROPAGATION_REQUIRED, TransactedPolicy.class).             if (policy instanceof JtaTransactionPolicy) {                 transactionPolicy = (JtaTransactionPolicy) policy.             }         }         if (transactionPolicy != null) {             LOG.debug("Found TransactionPolicy in registry to use: {}", transactionPolicy).         }     }     ObjectHelper.notNull(transactionPolicy, "transactionPolicy", this).     final CamelContext camelContext = routeContext.getCamelContext().     final Map<String, String> properties = camelContext.getGlobalOptions().     if ((properties != null) && properties.containsKey(ROLLBACK_LOGGING_LEVEL_PROPERTY)) {         rollbackLoggingLevel = LoggingLevel.valueOf(properties.get(ROLLBACK_LOGGING_LEVEL_PROPERTY)).     }     JtaTransactionErrorHandler answer = new JtaTransactionErrorHandler(camelContext, processor, getLogger(), getOnRedelivery(), getRedeliveryPolicy(), getExceptionPolicyStrategy(), transactionPolicy, getRetryWhilePolicy(camelContext), getExecutorService(camelContext), rollbackLoggingLevel, getOnExceptionOccurred()).     // configure error handler before we can use it     configure(routeContext, answer).     return answer. }
false;public;1;4;;public JtaTransactionErrorHandlerBuilder setTransactionPolicy(final String ref) {     policyRef = ref.     return this. }
false;public;1;4;;public JtaTransactionErrorHandlerBuilder setTransactionPolicy(final JtaTransactionPolicy transactionPolicy) {     this.transactionPolicy = transactionPolicy.     return this. }
false;public;1;4;;public JtaTransactionErrorHandlerBuilder setRollbackLoggingLevel(final LoggingLevel rollbackLoggingLevel) {     this.rollbackLoggingLevel = rollbackLoggingLevel.     return this. }
false;protected;0;3;;protected CamelLogger createLogger() {     return new CamelLogger(LoggerFactory.getLogger(TransactionErrorHandler.class), LoggingLevel.ERROR). }
false;public;0;4;;@Override public String toString() {     return "JtaTransactionErrorHandlerBuilder". }
