commented;modifiers;parameterAmount;loc;comment;code
false;public;1;35;;@Override public T produce(CreationalContext<T> ctx) {     T context = createCamelContextWithTCCL(() -> super.produce(ctx), annotated).     // Do not override the name if it's been already set (in the bean constructor for example)     if (context.getNameStrategy() instanceof DefaultCamelContextNameStrategy) {         context.setNameStrategy(nameStrategy(annotated)).     }     // Add bean registry and Camel injector     if (context instanceof DefaultCamelContext) {         DefaultCamelContext adapted = context.adapt(DefaultCamelContext.class).         adapted.setRegistry(new DefaultRegistry(new CdiCamelBeanRepository(manager))).         adapted.setInjector(new CdiCamelInjector(context.getInjector(), manager)).     } else {         // Fail fast for the time being to avoid side effects by the time these two methods get declared on the CamelContext interface         throw new InjectionException("Camel CDI requires Camel context [" + context.getName() + "] to be a subtype of DefaultCamelContext").     }     // Add event notifier if at least one observer is present     Set<Annotation> qualifiers = annotated.getAnnotations().stream().filter(isAnnotationType(Named.class).negate().and(q -> manager.isQualifier(q.annotationType()))).collect(toSet()).     qualifiers.add(ANY).     if (qualifiers.size() == 1) {         qualifiers.add(DEFAULT).     }     qualifiers.retainAll(extension.getObserverEvents()).     if (!qualifiers.isEmpty()) {         context.getManagementStrategy().addEventNotifier(new CdiEventNotifier(manager, qualifiers)).     }     return context. }
false;public;1;13;;@Override public void dispose(T context) {     super.dispose(context).     if (!context.getStatus().isStopped()) {         logger.info("Camel CDI is stopping Camel context [{}]", context.getName()).         try {             context.stop().         } catch (Exception cause) {             throw wrapRuntimeCamelException(cause).         }     } }
false;private,static;1;24;;private static CamelContextNameStrategy nameStrategy(Annotated annotated) {     if (annotated.isAnnotationPresent(ContextName.class)) {         return new ExplicitCamelContextNameStrategy(annotated.getAnnotation(ContextName.class).value()).     } else if (annotated.isAnnotationPresent(Named.class)) {         // TODO: support stereotype with empty @Named annotation         String name = annotated.getAnnotation(Named.class).value().         if (name.isEmpty()) {             if (annotated instanceof AnnotatedField) {                 name = ((AnnotatedField) annotated).getJavaMember().getName().             } else if (annotated instanceof AnnotatedMethod) {                 name = ((AnnotatedMethod) annotated).getJavaMember().getName().                 if (name.startsWith("get")) {                     name = decapitalize(name.substring(3)).                 }             } else {                 name = decapitalize(getRawType(annotated.getBaseType()).getSimpleName()).             }         }         return new ExplicitCamelContextNameStrategy(name).     } else {         // Use a specific naming strategy for Camel CDI as the default one increments the suffix for each CDI proxy created         return new CdiCamelContextNameStrategy().     } }
