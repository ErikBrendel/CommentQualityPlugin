commented;modifiers;parameterAmount;loc;comment;code
true;;1;24;/**  * Appends all the {@link org.apache.camel.builder.RouteBuilder} instances that can be found on the classpath  */ ;/**  * Appends all the {@link org.apache.camel.builder.RouteBuilder} instances that can be found on the classpath  */ void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {     Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages).     for (Class<?> aClass : classes) {         logger.trace("Found RouteBuilder class: {}", aClass).         // certain beans should be ignored         if (shouldIgnoreBean(aClass)) {             logger.debug("Ignoring RouteBuilder class: {}", aClass).             continue.         }         if (!isValidClass(aClass)) {             logger.debug("Ignoring invalid RouteBuilder class: {}", aClass).             continue.         }         // type is valid so create and instantiate the builder         @SuppressWarnings("unchecked")         RoutesBuilder builder = instantiateBuilder((Class<? extends RoutesBuilder>) aClass).         logger.debug("Adding instantiated RouteBuilder: {}", builder).         list.add(builder).     } }
false;private;1;4;;private boolean shouldIgnoreBean(Class<?> type) {     Map<String, ?> beans = camelContext.getRegistry().findByTypeWithName(type).     return !(beans == null || beans.isEmpty()). }
false;private;1;5;;private boolean isValidClass(Class<?> type) {     return Modifier.isPublic(type.getModifiers()) && !Modifier.isAbstract(type.getModifiers()) && !type.isInterface(). }
false;private;1;3;;private RoutesBuilder instantiateBuilder(Class<? extends RoutesBuilder> type) {     return camelContext.getInjector().newInstance(type). }
