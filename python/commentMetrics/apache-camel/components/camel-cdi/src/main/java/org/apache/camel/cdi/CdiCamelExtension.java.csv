commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;CdiEventEndpoint<?> getEventEndpoint(String uri) {     return cdiEventEndpoints.get(uri). }
false;;0;3;;Set<Annotation> getObserverEvents() {     return eventQualifiers. }
false;;0;3;;Set<Annotation> getContextQualifiers() {     return contextQualifiers. }
false;private;1;17;;private void processAnnotatedType(@Observes ProcessAnnotatedType<?> pat) {     if (pat.getAnnotatedType().isAnnotationPresent(Vetoed.class)) {         pat.veto().     }     if (hasAnnotation(pat.getAnnotatedType(), Converter.class)) {         converters.add(pat.getAnnotatedType().getJavaClass()).     }     if (hasAnnotation(pat.getAnnotatedType(), BeanInject.class, Consume.class, EndpointInject.class, Produce.class, PropertyInject.class)) {         camelBeans.add(pat.getAnnotatedType()).     }     if (hasAnnotation(pat.getAnnotatedType(), Consume.class)) {         eagerBeans.add(pat.getAnnotatedType()).     }     if (hasAnnotation(pat.getAnnotatedType(), ImportResource.class)) {         resources.put(pat.getAnnotatedType(), pat.getAnnotatedType().getAnnotation(ImportResource.class)).     } }
false;private;2;3;;private <T extends CamelContext> void camelContextBeans(@Observes ProcessInjectionTarget<T> pit, BeanManager manager) {     pit.setInjectionTarget(environment.camelContextInjectionTarget(pit.getInjectionTarget(), pit.getAnnotatedType(), manager, this)). }
false;private;2;3;;private <T extends CamelContext> void camelContextProducers(@Observes ProcessProducer<?, T> pp, BeanManager manager) {     pp.setProducer(environment.camelContextProducer(pp.getProducer(), pp.getAnnotatedMember(), manager, this)). }
false;private;2;5;;private <T> void camelBeansPostProcessor(@Observes ProcessInjectionTarget<T> pit, BeanManager manager) {     if (camelBeans.contains(pit.getAnnotatedType())) {         pit.setInjectionTarget(new CamelBeanInjectionTarget<>(pit.getInjectionTarget(), manager)).     } }
false;private;2;3;;private <T extends CamelContextAware> void camelContextAware(@Observes ProcessInjectionTarget<T> pit, BeanManager manager) {     pit.setInjectionTarget(new CamelBeanInjectionTarget<>(pit.getInjectionTarget(), manager)). }
false;private;1;3;;private <T extends Endpoint> void endpointBeans(@Observes ProcessProducerMethod<T, CdiCamelFactory> ppm) {     producerBeans.put(ppm.getAnnotatedProducerMethod().getJavaMember(), ppm.getBean()). }
false;private;1;3;;private void consumerTemplateBeans(@Observes ProcessProducerMethod<ConsumerTemplate, CdiCamelFactory> ppm) {     producerBeans.put(ppm.getAnnotatedProducerMethod().getJavaMember(), ppm.getBean()). }
false;private;1;3;;private void producerTemplateBeans(@Observes ProcessProducerMethod<ProducerTemplate, CdiCamelFactory> ppm) {     producerBeans.put(ppm.getAnnotatedProducerMethod().getJavaMember(), ppm.getBean()). }
false;private;1;3;;private void fluentProducerTemplateBeans(@Observes ProcessProducerMethod<FluentProducerTemplate, CdiCamelFactory> ppm) {     producerBeans.put(ppm.getAnnotatedProducerMethod().getJavaMember(), ppm.getBean()). }
false;private;2;14;;private void camelFactoryProducers(@Observes ProcessAnnotatedType<CdiCamelFactory> pat, BeanManager manager) {     pat.setAnnotatedType(new AnnotatedTypeDelegate<>(pat.getAnnotatedType(), pat.getAnnotatedType().getMethods().stream().filter(am -> am.isAnnotationPresent(Produces.class)).filter(am -> am.getTypeClosure().stream().noneMatch(isEqual(TypeConverter.class))).peek(am -> producerQualifiers.put(am.getJavaMember(), getQualifiers(am, manager))).map(am -> new AnnotatedMethodDelegate<>(am, am.getAnnotations().stream().filter(annotation -> !manager.isQualifier(annotation.annotationType())).collect(collectingAndThen(toSet(), annotations -> {         annotations.add(EXCLUDED).         return annotations.     })))).collect(toSet()))). }
false;private;1;16;;private <T extends CamelEvent> void camelEventNotifiers(@Observes ProcessObserverMethod<T, ?> pom) {     // Only activate Camel event notifiers for explicit Camel event observers, that is, an observer method for a super type won't activate notifiers.     Type type = pom.getObserverMethod().getObservedType().     // Camel events are raw types     if (type instanceof Class && CamelEvent.class.isAssignableFrom(Class.class.cast(type))) {         Set<Annotation> qualifiers = pom.getObserverMethod().getObservedQualifiers().         if (qualifiers.isEmpty()) {             eventQualifiers.add(ANY).         } else if (qualifiers.size() == 1 && qualifiers.stream().anyMatch(isAnnotationType(Named.class))) {             eventQualifiers.add(DEFAULT).         } else {             eventQualifiers.addAll(qualifiers).         }     } }
false;private;1;3;;private void beans(@Observes ProcessProducerField<?, ?> pb) {     cdiBeans.add(pb.getBean()). }
false;private;1;3;;private void beans(@Observes ProcessProducerMethod<?, ?> pb) {     cdiBeans.add(pb.getBean()). }
false;private;2;13;;private void beans(@Observes ProcessBean<?> pb, BeanManager manager) {     cdiBeans.add(pb.getBean()).     // Lookup for CDI event endpoint injection points     pb.getBean().getInjectionPoints().stream().filter(ip -> CdiEventEndpoint.class.equals(getRawType(ip.getType()))).forEach(ip -> {         Type type = ip.getType() instanceof ParameterizedType ? ((ParameterizedType) ip.getType()).getActualTypeArguments()[0] : Object.class.         String uri = eventEndpointUri(type, ip.getQualifiers()).         cdiEventEndpoints.put(uri, new CdiEventEndpoint<>(uri, type, ip.getQualifiers(), manager)).     }). }
false;private;2;93;;private void afterBeanDiscovery(@Observes AfterBeanDiscovery abd, BeanManager manager) {     // The set of extra Camel CDI beans     Set<SyntheticBean<?>> extraBeans = new HashSet<>().     // Add beans from Camel XML resources     for (AnnotatedType<?> annotatedType : resources.keySet()) {         XmlCdiBeanFactory factory = XmlCdiBeanFactory.with(manager, environment, this).         ImportResource resource = resources.get(annotatedType).         for (String path : resource.value()) {             try {                 extraBeans.addAll(factory.beansFrom(path, annotatedType)).             } catch (NoClassDefFoundError cause) {                 if (cause.getMessage().contains("AbstractCamelContextFactoryBean")) {                     logger.error("Importing Camel XML requires to have the 'camel-core-xml' dependency in the classpath!").                 }                 throw cause.             } catch (Exception cause) {                 abd.addDefinitionError(new InjectionException("Error while importing resource [" + getResource(path, annotatedType.getJavaClass().getClassLoader()) + "]", cause)).             }         }     }     // Camel contexts from the imported Camel XML     concat(cdiBeans.stream(), extraBeans.stream()).filter(hasType(CamelContext.class)).map(Bean::getQualifiers).forEach(contextQualifiers::addAll).     // From the @ContextName qualifiers on RoutesBuilder and RouteContainer beans     List<Bean<?>> routeBeans = cdiBeans.stream().filter(hasType(RoutesBuilder.class).or(hasType(RouteContainer.class))).filter(bean -> bean.getQualifiers().stream().filter(isAnnotationType(ContextName.class).and(name -> !contextQualifiers.contains(name))).peek(contextQualifiers::add).count() > 0).collect(Collectors.toList()).     for (Bean<?> bean : routeBeans) {         Optional<Annotation> annotation = bean.getQualifiers().stream().filter(isAnnotationType(ContextName.class)).findFirst().         extraBeans.add(camelContextBean(manager, bean.getBeanClass(), ANY, annotation.get(), APPLICATION_SCOPED)).     }     Set<Bean<?>> allBeans = concat(cdiBeans.stream(), extraBeans.stream()).collect(toSet()).     Set<Bean<?>> contexts = allBeans.stream().filter(hasType(CamelContext.class)).collect(toSet()).     if (contexts.size() == 0 && shouldDeployDefaultCamelContext(allBeans)) {         // Add @Default Camel context bean if any         extraBeans.add(camelContextBean(manager, null, ANY, DEFAULT, APPLICATION_SCOPED)).     } else if (contexts.size() == 1) {         // Add the @Default qualifier if there is only one Camel context bean         Bean<?> context = contexts.iterator().next().         if (!context.getQualifiers().contains(DEFAULT)) {             // Only decorate if that's a programmatic bean             if (context instanceof SyntheticBean) {                 ((SyntheticBean<?>) context).addQualifier(DEFAULT).             }         }     }     // Finally add the beans to the deployment     extraBeans.forEach(abd::addBean).     // Update the CDI Camel factory beans     Set<Annotation> endpointQualifiers = cdiEventEndpoints.values().stream().map(CdiEventEndpoint::getQualifiers).flatMap(Set::stream).collect(toSet()).     Set<Annotation> templateQualifiers = contextQualifiers.stream().filter(isAnnotationType(Default.class).or(isAnnotationType(Named.class)).negate()).collect(toSet()).     // TODO: would be more correct to add a bean for each Camel context bean     producerBeans.entrySet().stream().map(producer -> new BeanDelegate<>(producer.getValue(), producerQualifiers.get(producer.getKey()), CdiEventEndpoint.class.equals(producer.getKey().getReturnType()) ? endpointQualifiers : templateQualifiers)).forEach(abd::addBean).     // Add CDI event endpoint observer methods     cdiEventEndpoints.values().stream().map(ForwardingObserverMethod::new).forEach(abd::addObserverMethod). }
false;private;1;32;;private boolean shouldDeployDefaultCamelContext(Set<Bean<?>> beans) {     return beans.stream().filter(bean -> !bean.getBeanClass().getPackage().equals(getClass().getPackage())).filter(hasType(CamelContextAware.class).or(hasType(Component.class)).or(hasType(RouteContainer.class).or(hasType(RoutesBuilder.class)))).map(Bean::getQualifiers).flatMap(Set::stream).anyMatch(isEqual(DEFAULT)) || // Or a bean with Camel annotations?     concat(camelBeans.stream().map(AnnotatedType::getFields), camelBeans.stream().map(AnnotatedType::getMethods)).flatMap(Set::stream).map(Annotated::getAnnotations).flatMap(Set::stream).anyMatch(isAnnotationType(Consume.class).and(a -> ((Consume) a).context().isEmpty()).or(isAnnotationType(BeanInject.class).and(a -> ((BeanInject) a).context().isEmpty())).or(isAnnotationType(EndpointInject.class).and(a -> ((EndpointInject) a).context().isEmpty())).or(isAnnotationType(Produce.class).and(a -> ((Produce) a).context().isEmpty())).or(isAnnotationType(PropertyInject.class).and(a -> ((PropertyInject) a).context().isEmpty()))) || // Or an injection point for Camel primitives?     beans.stream().filter(bean -> !bean.getBeanClass().getPackage().equals(getClass().getPackage())).map(Bean::getInjectionPoints).flatMap(Set::stream).filter(ip -> getRawType(ip.getType()).getName().startsWith("org.apache.camel")).map(InjectionPoint::getQualifiers).flatMap(Set::stream).anyMatch(isAnnotationType(Uri.class).or(isEqual(DEFAULT))). }
false;private;3;8;;private SyntheticBean<?> camelContextBean(BeanManager manager, Class<?> beanClass, Annotation... qualifiers) {     SyntheticAnnotated annotated = new SyntheticAnnotated(DefaultCamelContext.class, manager.createAnnotatedType(DefaultCamelContext.class).getTypeClosure(), beanClass, qualifiers).     return new SyntheticBean<>(manager, annotated, DefaultCamelContext.class, environment.camelContextInjectionTarget(new SyntheticInjectionTarget<>(DefaultCamelContext::new), annotated, manager, this), bean -> "Default Camel context bean with qualifiers " + bean.getQualifiers()). }
false;private;2;65;;private void afterDeploymentValidation(@Observes AfterDeploymentValidation adv, BeanManager manager) {     // Send event for Camel CDI configuration     manager.fireEvent(configuration).     configuration.unmodifiable().     Collection<CamelContext> contexts = new ArrayList<>().     for (Bean<?> context : manager.getBeans(CamelContext.class, ANY)) {         contexts.add(getReference(manager, CamelContext.class, context)).     }     // Add type converters to Camel contexts     for (CamelContext context : contexts) {         CdiTypeConverterLoader loader = new CdiTypeConverterLoader().         for (Class<?> converter : converters) {             loader.loadConverterMethods(context.getTypeConverterRegistry(), converter).         }     }     // Add routes to Camel contexts     if (configuration.autoConfigureRoutes()) {         boolean deploymentException = false.         Set<Bean<?>> routes = new HashSet<>(manager.getBeans(RoutesBuilder.class, ANY)).         routes.addAll(manager.getBeans(RouteContainer.class, ANY)).         for (Bean<?> context : manager.getBeans(CamelContext.class, ANY)) {             for (Bean<?> route : routes) {                 Set<Annotation> qualifiers = new HashSet<>(context.getQualifiers()).                 qualifiers.retainAll(route.getQualifiers()).                 if (qualifiers.size() > 1) {                     deploymentException |= !addRouteToContext(route, context, manager, adv).                 }             }         }         // Let's return to avoid starting misconfigured contexts         if (deploymentException) {             return.         }     }     // Trigger eager beans instantiation (calling toString is necessary to force     // the initialization of normal-scoped beans).     // FIXME: This does not work with OpenWebBeans for bean whose bean type is an     // interface as the Object methods does not get forwarded to the bean instances!     eagerBeans.forEach(type -> getReferencesByType(manager, type.getJavaClass(), ANY).toString()).     manager.getBeans(Object.class, ANY, STARTUP).forEach(bean -> getReference(manager, bean.getBeanClass(), bean).toString()).     // Start Camel contexts     if (configuration.autoStartContexts()) {         for (CamelContext context : contexts) {             if (ServiceStatus.Started.equals(context.getStatus())) {                 continue.             }             logger.info("Camel CDI is starting Camel context [{}]", context.getName()).             try {                 context.start().             } catch (Exception exception) {                 adv.addDeploymentProblem(exception).             }         }     }     // Clean-up     Stream.of(converters, camelBeans, eagerBeans, cdiBeans).forEach(Set::clear).     Stream.of(producerBeans, producerQualifiers).forEach(Map::clear). }
false;private;4;26;;private boolean addRouteToContext(Bean<?> routeBean, Bean<?> contextBean, BeanManager manager, AfterDeploymentValidation adv) {     try {         CamelContext context = getReference(manager, CamelContext.class, contextBean).         try {             Object route = getReference(manager, Object.class, routeBean).             if (route instanceof RoutesBuilder) {                 context.addRoutes((RoutesBuilder) route).             } else if (route instanceof RouteContainer) {                 context.adapt(ModelCamelContext.class).addRouteDefinitions(((RouteContainer) route).getRoutes()).             } else {                 throw new IllegalArgumentException("Invalid routes type [" + routeBean.getBeanClass().getName() + "], " + "must be either of type RoutesBuilder or RouteContainer!").             }             return true.         } catch (Exception cause) {             adv.addDeploymentProblem(new InjectionException("Error adding routes of type [" + routeBean.getBeanClass().getName() + "] " + "to Camel context [" + context.getName() + "]", cause)).         }     } catch (Exception exception) {         adv.addDeploymentProblem(exception).     }     return false. }
