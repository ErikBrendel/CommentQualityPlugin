commented;modifiers;parameterAmount;loc;comment;code
false;public;1;24;;@Override public ErrorHandlerBuilder create(CreationalContext<ErrorHandlerBuilder> creationalContext) {     try {         ErrorHandlerBuilder builder = handler.getType().getTypeAsClass().newInstance().         switch(handler.getType()) {             case DefaultErrorHandler:             case DeadLetterChannel:                 setProperties((DefaultErrorHandlerBuilder) builder).                 break.             case NoErrorHandler:                 // No configuration required                 break.             case TransactionErrorHandler:                 break.             default:                 break.         }         return builder.     } catch (Exception cause) {         throw new CreationException("Error while creating instance for " + this, cause).     } }
false;public;2;4;;@Override public void destroy(ErrorHandlerBuilder instance, CreationalContext<ErrorHandlerBuilder> creationalContext) { // NOOP }
false;private;1;49;;private void setProperties(DefaultErrorHandlerBuilder builder) throws Exception {     if (nonNull(handler.getDeadLetterHandleNewException())) {         builder.setDeadLetterHandleNewException(handler.getDeadLetterHandleNewException()).     }     builder.setDeadLetterUri(handler.getDeadLetterUri()).     builder.setExecutorServiceRef(handler.getExecutorServiceRef()).     builder.setRetryWhileRef(handler.getRetryWhileRef()).     if (nonNull(handler.getUseOriginalMessage())) {         builder.setUseOriginalMessage(handler.getUseOriginalMessage()).     }     if (isNotEmpty(handler.getOnExceptionOccurredRef())) {         Processor processor = getReferenceByName(manager, handler.getOnExceptionOccurredRef(), Processor.class).orElseThrow(() -> new UnsatisfiedResolutionException(format("No bean with name [%s] to satisfy attribute [%s]", handler.getOnPrepareFailureRef(), "onExceptionOccurredRef"))).         builder.setOnExceptionOccurred(processor).     }     if (isNotEmpty(handler.getOnPrepareFailureRef())) {         Processor processor = getReferenceByName(manager, handler.getOnPrepareFailureRef(), Processor.class).orElseThrow(() -> new UnsatisfiedResolutionException(format("No bean with name [%s] to satisfy attribute [%s]", handler.getOnPrepareFailureRef(), "onPrepareFailureRef"))).         builder.setOnPrepareFailure(processor).     }     if (isNotEmpty(handler.getOnRedeliveryRef())) {         Processor processor = getReferenceByName(manager, handler.getOnRedeliveryRef(), Processor.class).orElseThrow(() -> new UnsatisfiedResolutionException(format("No bean with name [%s] to satisfy attribute [%s]", handler.getOnPrepareFailureRef(), "onRedeliveryRef"))).         builder.setOnRedelivery(processor).     }     if (nonNull(handler.getRedeliveryPolicy())) {         RedeliveryPolicyFactoryBean policy = handler.getRedeliveryPolicy().         policy.setBeanManager(manager).         builder.setRedeliveryPolicy(policy.getObject()).     }     if (isNotEmpty(handler.getRedeliveryPolicyRef())) {         RedeliveryPolicy policy = getReferenceByName(manager, handler.getRedeliveryPolicyRef(), RedeliveryPolicy.class).orElseThrow(() -> new UnsatisfiedResolutionException(format("No bean with name [%s] to satisfy attribute [%s]", handler.getRedeliveryPolicyRef(), "redeliveryPolicyRef"))).         builder.setRedeliveryPolicy(policy).     } }
