commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;14;;protected void runWithTransaction(final Runnable runnable, final boolean isNew) throws Throwable {     if (isNew) {         begin().     }     try {         runnable.run().     } catch (Throwable e) {         rollback(isNew).         throw e.     }     if (isNew) {         commit().     } }
false;private;0;3;;private void begin() throws Exception {     transactionManager.begin(). }
false;private;0;10;;private void commit() throws Exception {     try {         transactionManager.commit().     } catch (HeuristicMixedException | HeuristicRollbackException | RollbackException | SystemException e) {         throw new CamelException("Unable to commit transaction", e).     } catch (Exception | Error e) {         rollback(true).         throw e.     } }
false;protected;1;11;;protected void rollback(boolean isNew) throws Exception {     try {         if (isNew) {             transactionManager.rollback().         } else {             transactionManager.setRollbackOnly().         }     } catch (Throwable e) {         LOG.warn("Could not rollback transaction!", e).     } }
false;protected;0;3;;protected Transaction suspendTransaction() throws Exception {     return transactionManager.suspend(). }
false;protected;1;11;;protected void resumeTransaction(final Transaction suspendedTransaction) {     if (suspendedTransaction == null) {         return.     }     try {         transactionManager.resume(suspendedTransaction).     } catch (Throwable e) {         LOG.warn("Could not resume transaction!", e).     } }
false;protected;0;4;;protected boolean hasActiveTransaction() throws Exception {     return transactionManager.getStatus() != Status.STATUS_MARKED_ROLLBACK && transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION. }
