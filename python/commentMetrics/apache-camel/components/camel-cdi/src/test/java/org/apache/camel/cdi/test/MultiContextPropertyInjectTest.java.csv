commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;10;;@Produces @ApplicationScoped @Named("properties") private static PropertiesComponent configuration() {     Properties properties = new Properties().     properties.put("property", "default").     PropertiesComponent component = new PropertiesComponent().     component.setInitialProperties(properties).     return component. }
false;public,static;0;16;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class, PropertyInjectBean.class, FirstCamelContextBean.class, FirstCamelContextPropertyInjectBean.class, SecondCamelContextBean.class, SecondCamelContextPropertyInjectBean.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;4;;@Override public void configure() {     from("direct:in").bean(PropertyInjectBean.class).to("mock:out"). }
false;public;0;4;;@Override public void configure() {     from("direct:in").bean(FirstCamelContextPropertyInjectBean.class).to("mock:out"). }
false;public;0;4;;@Override public void configure() {     from("direct:in").bean(SecondCamelContextPropertyInjectBean.class).to("mock:out"). }
false;public;0;26;;@Test @InSequence(1) public void configureCamelContexts() throws Exception {     defaultCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:in").bean(PropertyInjectBean.class).to("mock:out").         }     }).     firstCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:in").bean(FirstCamelContextPropertyInjectBean.class).to("mock:out").         }     }).     secondCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:in").bean(SecondCamelContextPropertyInjectBean.class).to("mock:out").         }     }).     secondCamelContext.getRouteController().startAllRoutes(). }
false;public;0;11;;@Test @InSequence(2) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {     defaultOutbound.expectedMessageCount(1).     defaultOutbound.expectedBodiesReceived("test").     defaultOutbound.expectedHeaderReceived("header", "default").     defaultInbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, defaultOutbound). }
false;public;1;5;;@Test @InSequence(3) public void retrieveReferenceFromDefaultCamelContext(PropertyInjectBean bean) {     assertThat(bean.getProperty(), is(equalTo("default"))). }
false;public;0;11;;@Test @InSequence(4) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("test").     firstOutbound.expectedHeaderReceived("header", "default").     firstInbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound). }
false;public;1;5;;@Test @InSequence(5) public void retrieveReferenceFromFirstCamelContext(FirstCamelContextPropertyInjectBean bean) {     assertThat(bean.getProperty(), is(equalTo("default"))). }
false;public;0;11;;@Test @InSequence(6) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("test").     secondOutbound.expectedHeaderReceived("header", "default").     secondInbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound). }
false;public;1;5;;@Test @InSequence(7) public void retrieveReferenceFromSecondCamelContext(SecondCamelContextPropertyInjectBean bean) {     assertThat(bean.getProperty(), is(equalTo("default"))). }
