commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;1;12;;// We should ideally use an ExpectedException JUnit rule to assert the content of the exception // thrown at deployment time. Unfortunately, OpenWebBeans does not enable access to the underlying // cause added as deployment exception. To work-around that, we delay the start of the Camel context // at runtime. @Test public void createEventEndpointByUri(NotStartedCamelContext context) {     try {         context.start(true).     } catch (Exception exception) {         Throwable cause = exception.getCause().getCause().         assertThat("Exception cause is not an UnsupportedOperationException!", cause, is(instanceOf(UnsupportedOperationException.class))).         assertThat("Incorrect exception message!", cause.getMessage(), is(equalTo("Creating CDI event endpoint isn't supported. Use @Inject CdiEventEndpoint instead"))).         return.     }     fail("CDI event endpoint creation by URI should throw an exception!"). }
false;public;0;4;;@Override public void configure() {     from("cdi-event://Object").log("Unsupported operation!"). }
false;public;0;4;;@Override public void start() throws Exception {     start(false). }
false;;1;5;;void start(boolean start) throws Exception {     if (start) {         super.start().     } }
