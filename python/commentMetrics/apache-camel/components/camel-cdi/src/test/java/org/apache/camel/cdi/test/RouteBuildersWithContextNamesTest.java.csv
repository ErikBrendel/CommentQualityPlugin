commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;12;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(FirstCamelContextEndpointInjectRoute.class, SecondCamelContextEndpointInjectRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;1;7;;@Test public void verifyCamelContexts(@Any Instance<CamelContext> contexts) {     assertThat("Context instances are incorrect!", contexts, containsInAnyOrder(hasProperty("name", is(equalTo("first"))), hasProperty("name", is(equalTo("second"))))). }
false;public;1;6;;@Test public void verifyFirstCamelContext(@ContextName("first") CamelContext first) {     assertThat("Context name is incorrect!", first.getName(), is(equalTo("first"))).     assertThat("Number of routes is incorrect!", first.getRoutes().size(), is(equalTo(1))).     assertThat("Context status is incorrect!", first.getStatus(), is(equalTo(ServiceStatus.Started))). }
false;public;1;6;;@Test public void verifySecondCamelContext(@ContextName("second") CamelContext second) {     assertThat("Context name is incorrect!", second.getName(), is(equalTo("second"))).     assertThat("Number of routes is incorrect!", second.getRoutes().size(), is(equalTo(1))).     assertThat("Context status is incorrect!", second.getStatus(), is(equalTo(ServiceStatus.Started))). }
false;public;2;13;;@Test public void sendMessageToFirstInbound(@Uri(value = "direct:inbound") @ContextName("first") ProducerTemplate inbound, @Uri(value = "mock:outbound") @ContextName("first") MockEndpoint outbound) throws InterruptedException {     outbound.expectedMessageCount(1).     outbound.expectedBodiesReceived("test").     outbound.expectedHeaderReceived("context", "first").     inbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound). }
false;public;2;13;;@Test public void sendMessageToSecondInbound(@Uri("direct:inbound") @ContextName("second") ProducerTemplate inbound, @Uri("mock:outbound") @ContextName("second") MockEndpoint outbound) throws InterruptedException {     outbound.expectedMessageCount(1).     outbound.expectedBodiesReceived("test").     outbound.expectedHeaderReceived("context", "second").     inbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound). }
