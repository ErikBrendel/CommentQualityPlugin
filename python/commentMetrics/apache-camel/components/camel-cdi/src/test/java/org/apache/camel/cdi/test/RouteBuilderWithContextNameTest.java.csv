commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(FirstCamelContextEndpointInjectRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;1;6;;@Test public void verifyCamelContexts(@Any Instance<CamelContext> contexts) {     assertThat("Context instances are incorrect!", contexts, contains(hasProperty("name", is(equalTo("first"))))). }
false;public;1;6;;@Test public void verifyNamedCamelContext(@ContextName("first") CamelContext first) {     assertThat("Context name is incorrect!", first.getName(), is(equalTo("first"))).     assertThat("Number of routes is incorrect!", first.getRoutes().size(), is(equalTo(1))).     assertThat("Context status is incorrect!", first.getStatus(), is(equalTo(ServiceStatus.Started))). }
false;public;1;6;;@Test public void verifyDefaultCamelContext(CamelContext context) {     assertThat("Context name is incorrect!", context.getName(), is(equalTo("first"))).     assertThat("Number of routes is incorrect!", context.getRoutes().size(), is(equalTo(1))).     assertThat("Context status is incorrect!", context.getStatus(), is(equalTo(ServiceStatus.Started))). }
false;public;2;11;;@Test public void sendMessageToInbound(@Uri("direct:inbound") ProducerTemplate inbound, @Uri("mock:outbound") MockEndpoint outbound) throws InterruptedException {     outbound.expectedMessageCount(1).     outbound.expectedBodiesReceived("test").     outbound.expectedHeaderReceived("context", "first").     inbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound). }
