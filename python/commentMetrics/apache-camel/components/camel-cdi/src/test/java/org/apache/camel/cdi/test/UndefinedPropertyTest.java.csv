commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;12;;@Produces @ApplicationScoped @Named("properties") private static PropertiesComponent configuration() {     Properties properties = new Properties().     properties.put("from", "inbound").     // Do not add the looked up property for test purpose     // properties.put("to", "mock:outbound").     PropertiesComponent component = new PropertiesComponent().     component.setInitialProperties(properties).     return component. }
false;public,static;0;8;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;1;5;;@Test public void lookupDefinedProperty(CamelContext context) throws Exception {     assertThat("Resolved property value is incorrect", context.resolvePropertyPlaceholders("{{from}}"), is(equalTo("inbound"))). }
false;public;1;12;;@Test public void lookupUndefinedProperty(CamelContext context) {     try {         context.resolvePropertyPlaceholders("{{to}}").         fail("No exception is thrown!").     } catch (Exception cause) {         assertThat("Exception thrown is incorrect", cause, is(instanceOf(IllegalArgumentException.class))).         assertThat("Exception message is incorrect", cause.getMessage(), is(equalTo("Property with key [to] not found in properties from text: {{to}}"))).     } }
