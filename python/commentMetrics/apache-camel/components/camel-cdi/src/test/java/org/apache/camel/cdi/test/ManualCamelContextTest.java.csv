commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(SimpleCamelRoute.class, ManualCamelRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;1;6;;@Test @InSequence(1) public void verifyContext(CamelContext context) {     assertThat("Number of routes is incorrect!", context.getRoutes().size(), is(equalTo(1))).     assertThat("Configured route is incorrect!", context.getRouteController().getRouteStatus("simple"), is(equalTo(ServiceStatus.Started))). }
false;public;1;8;;@Test @InSequence(2) public void addManualRoute(CamelContext context) throws Exception {     context.addRoutes(builder).     assertThat("Number of routes is incorrect!", context.getRoutes().size(), is(equalTo(2))).     assertThat("Configured route is incorrect!", context.getRouteController().getRouteStatus("manual"), is(equalTo(ServiceStatus.Started))). }
false;public;0;10;;@Test @InSequence(3) public void sendMessageToInbound() throws InterruptedException {     outbound.expectedMessageCount(1).     outbound.expectedBodiesReceived("test").     inbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound). }
false;public;0;10;;@Test @InSequence(4) public void sendMessageToManual() throws InterruptedException {     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("manual").     manual.sendBody("manual").     assertIsSatisfied(2L, TimeUnit.SECONDS, mock). }
