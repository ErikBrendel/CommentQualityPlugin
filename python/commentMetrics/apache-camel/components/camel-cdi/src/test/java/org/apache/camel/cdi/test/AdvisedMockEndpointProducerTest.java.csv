commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(ManualStartupCamelContext.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;9;;@Override public void configure() {     interceptSendToEndpoint("mock:outbound").skipSendToOriginalEndpoint().log("Intercepting message [${body}] from mock endpoint").to("mock:intercepted").     from("direct:inbound").to("mock:outbound"). }
false;public;1;17;;@Test @InSequence(1) public void startCamelContext(CamelContext context) throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             interceptSendToEndpoint("mock:outbound").skipSendToOriginalEndpoint().log("Intercepting message [${body}] from mock endpoint").to("mock:intercepted").             from("direct:inbound").to("mock:outbound").         }     }).     context.getRouteController().startAllRoutes(). }
false;public;0;11;;@Test @InSequence(2) public void sendMessageToInbound() throws InterruptedException {     outbound.expectedMessageCount(0).     intercepted.expectedMessageCount(1).     intercepted.expectedBodiesReceived("test").     inbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound, intercepted). }
