commented;modifiers;parameterAmount;loc;comment;code
false;private;2;3;;private void onCamelContextStartingEvent(@Observes CamelContextStartingEvent event, List<Class> events) {     events.add(CamelContextStartingEvent.class). }
false;private;2;3;;private void onCamelContextStartedEvent(@Observes CamelContextStartedEvent event, List<Class> events) {     events.add(CamelContextStartedEvent.class). }
false;private;2;3;;private void onExchangeEvent(@Observes ExchangeEvent event, List<Class> events) {     events.add(event.getClass().getInterfaces()[0]). }
false;private;2;3;;private void onCamelContextStoppingEvent(@Observes CamelContextStoppingEvent event, List<Class> events) {     events.add(CamelContextStoppingEvent.class). }
false;private;2;3;;private void onCamelContextStoppedEvent(@Observes CamelContextStoppedEvent event, List<Class> events) {     events.add(CamelContextStoppedEvent.class). }
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(SimpleCamelRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;1;8;;@Test @InSequence(1) public void startedCamelContext(List<Class> events) {     assertThat("Events fired are incorrect!", events, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class)). }
false;public;1;21;;@Test @InSequence(2) public void sendMessageToInbound(List<Class> events) throws InterruptedException {     outbound.expectedMessageCount(1).     outbound.expectedBodiesReceived("test").     inbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound).     assertThat("Events fired are incorrect!", events, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class, ExchangeSendingEvent.class, ExchangeCreatedEvent.class, ExchangeSendingEvent.class, ExchangeSentEvent.class, ExchangeCompletedEvent.class, ExchangeSentEvent.class)). }
false;public;2;18;;@Test @InSequence(3) public void stopCamelContext(CamelContext context, List<Class> events) throws Exception {     context.stop().     assertThat("Events fired are incorrect!", events, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class, ExchangeSendingEvent.class, ExchangeCreatedEvent.class, ExchangeSendingEvent.class, ExchangeSentEvent.class, ExchangeCompletedEvent.class, ExchangeSentEvent.class, CamelContextStoppingEvent.class, CamelContextStoppedEvent.class)). }
