commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;14;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addAsResource(Paths.get("src/test/resources/camel-context-multiples.xml").toFile(), "imported-context.xml").addClass(SecondNamedCamelContextRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;12;;@Test public void verifyCamelContexts() {     assertThat("Camel context name is incorrect!", firstCamelContext.getName(), is(equalTo("first"))).     assertThat("Camel context name is incorrect!", secondCamelContext.getName(), is(equalTo("second"))).     assertThat("Producer template context is incorrect!", firstOutbound.getCamelContext().getName(), is(equalTo(firstCamelContext.getName()))).     assertThat("Producer template context is incorrect!", secondOutbound.getCamelContext().getName(), is(equalTo(secondCamelContext.getName()))). }
false;public;0;11;;@Test public void sendMessageToFirstCamelContextInbound() throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("first-message").     firstOutbound.expectedHeaderReceived("context", "first").     firstOutbound.message(0).exchange().matches(fromCamelContext("first")).     firstInbound.sendBody("first-message").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound). }
false;public;0;11;;@Test public void sendMessageToSecondCamelContextInbound() throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("second-message").     firstOutbound.expectedHeaderReceived("context", "second").     secondOutbound.message(0).exchange().matches(fromCamelContext("second")).     secondInbound.sendBody("message").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound). }
false;public;0;4;;@Override public void configure() {     from("direct:out").setHeader("context").constant("second").to("mock:outbound"). }
