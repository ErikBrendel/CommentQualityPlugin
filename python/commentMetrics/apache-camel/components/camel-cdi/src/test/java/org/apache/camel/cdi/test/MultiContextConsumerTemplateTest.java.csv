commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;13;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class, FirstCamelContextBean.class, SecondCamelContextBean.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;5;;@Test @InSequence(1) public void configureCamelContexts() throws Exception {     secondCamelContext.getRouteController().startAllRoutes(). }
false;public;0;9;;@Test @InSequence(2) public void receiveBodyFromDefaultCamelContext() {     defaultProducer.sendBody("seda:foo", "foo").     String body = defaultConsumer.receiveBody("seda:foo", TimeUnit.SECONDS.toMillis(1L), String.class).     assertThat("Body is incorrect!", body, is(equalTo("foo"))). }
false;public;0;9;;@Test @InSequence(3) public void receiveBodyFromFirstCamelContext() {     firstProducer.sendBody("seda:bar", "bar").     String body = firstConsumer.receiveBody("seda:bar", TimeUnit.SECONDS.toMillis(1L), String.class).     assertThat("Body is incorrect!", body, is(equalTo("bar"))). }
false;public;0;9;;@Test @InSequence(4) public void receiveBodyFromSecondCamelContext() {     secondProducer.sendBody("seda:baz", "baz").     String body = secondConsumer.receiveBody("seda:baz", TimeUnit.SECONDS.toMillis(1L), String.class).     assertThat("Body is incorrect!", body, is(equalTo("baz"))). }
