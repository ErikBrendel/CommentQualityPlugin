commented;modifiers;parameterAmount;loc;comment;code
false;private;2;3;;private void onAnyContextStartingEvent(@Observes CamelContextStartingEvent event, @Named("anyContext") List<Class> events) {     events.add(CamelContextStartingEvent.class). }
false;private;2;3;;private void onAnyContextStartedEvent(@Observes CamelContextStartedEvent event, @Named("anyContext") List<Class> events) {     events.add(CamelContextStartedEvent.class). }
false;private;2;3;;private void onAnyExchangeEvent(@Observes ExchangeEvent event, @Named("anyContext") List<Class> events) {     events.add(event.getClass().getInterfaces()[0]). }
false;private;2;3;;private void onDefaultContextStartingEvent(@Observes @Default CamelContextStartingEvent event, @Named("defaultContext") List<Class> events) {     events.add(CamelContextStartingEvent.class). }
false;private;2;3;;private void onDefaultContextStartedEvent(@Observes @Default CamelContextStartedEvent event, @Named("defaultContext") List<Class> events) {     events.add(CamelContextStartedEvent.class). }
false;private;2;3;;private void onDefaultExchangeEvent(@Observes @Default ExchangeEvent event, @Named("defaultContext") List<Class> events) {     events.add(event.getClass().getInterfaces()[0]). }
false;private;2;3;;private void onFirstContextStartingEvent(@Observes @ContextName("first") CamelContextStartingEvent event, @ContextName("first") List<Class> events) {     events.add(CamelContextStartingEvent.class). }
false;private;2;3;;private void onFirstContextStartedEvent(@Observes @ContextName("first") CamelContextStartedEvent event, @ContextName("first") List<Class> events) {     events.add(CamelContextStartedEvent.class). }
false;private;2;3;;private void onFirstExchangeEvent(@Observes @ContextName("first") ExchangeEvent event, @ContextName("first") List<Class> events) {     events.add(event.getClass().getInterfaces()[0]). }
false;private;2;3;;private void onSecondContextStartingEvent(@Observes @ContextName("second") CamelContextStartingEvent event, @ContextName("second") List<Class> events) {     events.add(CamelContextStartingEvent.class). }
false;private;2;3;;private void onSecondContextStartedEvent(@Observes @ContextName("second") CamelContextStartedEvent event, @ContextName("second") List<Class> events) {     events.add(CamelContextStartedEvent.class). }
false;private;2;3;;private void onSecondExchangeEvent(@Observes @ContextName("second") ExchangeEvent event, @ContextName("second") List<Class> events) {     events.add(event.getClass().getInterfaces()[0]). }
false;public,static;0;15;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class, UriEndpointRoute.class, FirstCamelContextBean.class, FirstCamelContextRoute.class, SecondCamelContextBean.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;4;;@Override public void configure() {     from("direct:inbound").setHeader("context").constant("second").to("mock:outbound"). }
false;public;4;33;;@Test @InSequence(1) public void configureCamelContexts(@Named("defaultContext") List<Class> defaultEvents, @ContextName("first") List<Class> firstEvents, @ContextName("second") List<Class> secondEvents, @Named("anyContext") List<Class> anyEvents) throws Exception {     secondCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:inbound").setHeader("context").constant("second").to("mock:outbound").         }     }).     secondCamelContext.getRouteController().startAllRoutes().     assertThat("Events fired for any contexts are incorrect", anyEvents, everyItem(isOneOf(CamelContextStartingEvent.class, CamelContextStartedEvent.class))).     assertThat("Events fired for default context are incorrect", defaultEvents, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class)).     assertThat("Events fired for first context are incorrect", firstEvents, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class)).     assertThat("Events fired for second context are incorrect", secondEvents, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class)). }
false;public;1;22;;@Test @InSequence(2) public void sendMessageToDefaultCamelContextInbound(@Named("defaultContext") List<Class> events) throws InterruptedException {     defaultOutbound.expectedMessageCount(1).     defaultOutbound.expectedBodiesReceived("test-default").     defaultOutbound.message(0).exchange().matches(fromCamelContext("camel-cdi")).     defaultInbound.sendBody("test-default").     assertIsSatisfied(2L, TimeUnit.SECONDS, defaultOutbound).     assertThat("Events fired are incorrect", events, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class, ExchangeSendingEvent.class, ExchangeCreatedEvent.class, ExchangeSendingEvent.class, ExchangeSentEvent.class, ExchangeCompletedEvent.class, ExchangeSentEvent.class)). }
false;public;1;23;;@Test @InSequence(3) public void sendMessageToFirstCamelContextInbound(@ContextName("first") List<Class> events) throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("test-first").     firstOutbound.expectedHeaderReceived("context", "first").     firstOutbound.message(0).exchange().matches(fromCamelContext("first")).     firstInbound.sendBody("test-first").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound).     assertThat("Events fired are incorrect", events, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class, ExchangeSendingEvent.class, ExchangeCreatedEvent.class, ExchangeSendingEvent.class, ExchangeSentEvent.class, ExchangeCompletedEvent.class, ExchangeSentEvent.class)). }
false;public;1;23;;@Test @InSequence(4) public void sendMessageToSecondCamelContextInbound(@ContextName("second") List<Class> events) throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("test-second").     secondOutbound.expectedHeaderReceived("context", "second").     secondOutbound.message(0).exchange().matches(fromCamelContext("second")).     secondInbound.sendBody("test-second").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound).     assertThat("Events fired are incorrect", events, contains(CamelContextStartingEvent.class, CamelContextStartedEvent.class, ExchangeSendingEvent.class, ExchangeCreatedEvent.class, ExchangeSendingEvent.class, ExchangeSentEvent.class, ExchangeCompletedEvent.class, ExchangeSentEvent.class)). }
false;public;4;15;;@Test @InSequence(5) public void stopCamelContexts(@Named("defaultContext") List<Class> defaultEvents, @ContextName("first") List<Class> firstEvents, @ContextName("second") List<Class> secondEvents, @Named("anyContext") List<Class> anyEvents) throws Exception {     defaultCamelContext.stop().     firstCamelContext.stop().     secondCamelContext.stop().     assertThat("Events count fired for default context are incorrect", defaultEvents, hasSize(8)).     assertThat("Events count fired for first context are incorrect", firstEvents, hasSize(8)).     assertThat("Events count fired for second context are incorrect", secondEvents, hasSize(8)).     assertThat("Events count fired for any contexts are incorrect", anyEvents, hasSize(24)). }
