commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(RawEventRoute.class, RawEventObserver.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;4;;@Before public void resetMock() {     consumed.reset(). }
false;public;1;9;;@Test public void sendEventToConsumer(Event<Object> event) throws InterruptedException {     consumed.expectedMessageCount(1).     consumed.expectedBodiesReceived("test").     event.select(String.class).fire("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, consumed). }
false;public;1;12;;@Test public void sendMessageToProducer(@Uri("direct:produce") ProducerTemplate producer) throws InterruptedException {     long random = Math.round(Math.random() * Long.MAX_VALUE).     produced.expectedMessageCount(1).     produced.expectedBodiesReceived(random).     consumed.expectedMessageCount(1).     consumed.expectedBodiesReceived(random).     producer.sendBody(random).     assertIsSatisfied(2L, TimeUnit.SECONDS, consumed, produced). }
false;public;0;5;;@Override public void configure() {     from(rawEventEndpoint).to("mock:consumed").     from("direct:produce").to(rawEventEndpoint). }
false;;2;3;;void collectEvents(@Observes long event, @Uri("mock:produced") ProducerTemplate producer) {     producer.sendBody(event). }
