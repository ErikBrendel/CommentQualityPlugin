commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class, EndpointInjectRoute.class, FirstCamelContextBean.class, FirstCamelContextEndpointInjectRoute.class, SecondCamelContextBean.class, SecondCamelContextEndpointInjectRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;5;;@Test @InSequence(1) public void configureCamelContexts() throws Exception {     secondCamelContext.getRouteController().startAllRoutes(). }
false;public;0;11;;@Test @InSequence(2) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {     defaultOutbound.expectedMessageCount(1).     defaultOutbound.expectedBodiesReceived("test-default").     defaultOutbound.message(0).exchange().matches(fromCamelContext("camel-cdi")).     defaultInbound.sendBody("test-default").     assertIsSatisfied(2L, TimeUnit.SECONDS, defaultOutbound). }
false;public;0;12;;@Test @InSequence(3) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("test-first").     firstOutbound.expectedHeaderReceived("context", "first").     firstOutbound.message(0).exchange().matches(fromCamelContext("first")).     firstInbound.sendBody("test-first").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound). }
false;public;0;12;;@Test @InSequence(4) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("test-second").     secondOutbound.expectedHeaderReceived("context", "second").     secondOutbound.message(0).exchange().matches(fromCamelContext("second")).     secondInbound.sendBody("test-second").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound). }
