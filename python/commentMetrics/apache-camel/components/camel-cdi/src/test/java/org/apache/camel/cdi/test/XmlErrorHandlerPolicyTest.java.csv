commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;25;;@Override protected void verify() {     assertThat("Log messages not found!", getEvents(), containsInRelativeOrder(logEvent().withLevel("INFO").withMessage(containsString("Camel CDI is starting Camel context [test]")), logEvent().withLevel("WARN").withMessage(matchesPattern("Failed delivery for \\(MessageId: .+\\). " + "On delivery attempt: 3 " + "caught: org.apache.camel.CamelException: failure message!")), logEvent().withLevel("ERROR").withMessage(matchesPattern("(?s)Failed delivery for \\(MessageId: .+\\). " + "Exhausted after delivery attempt: 4 " + "caught: org.apache.camel.CamelException: failure message!.*")), logEvent().withLevel("INFO").withMessage(containsString("Camel CDI is stopping Camel context [test]")))). }
false;public,static;0;12;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addAsResource(Paths.get("src/test/resources/camel-context-errorHandler-policy.xml").toFile(), "imported-context.xml").addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;9;;@Test public void sendMessageToInbound() throws InterruptedException {     outbound.expectedMessageCount(1).     outbound.expectedBodiesReceived("Response to message").     inbound.sendBody("message").     assertIsSatisfied(2L, TimeUnit.SECONDS, outbound). }
false;public;0;15;;@Test public void sendExceptionToInbound() {     try {         inbound.sendBody("exception").     } catch (Exception exception) {         assertThat("Exception is incorrect!", exception, is(instanceOf(CamelExecutionException.class))).         assertThat("Exception cause is incorrect!", exception.getCause(), is(instanceOf(CamelException.class))).         assertThat("Exception message is incorrect!", exception.getCause().getMessage(), is(equalTo("failure message!"))).         return.     }     fail("No exception thrown!"). }
