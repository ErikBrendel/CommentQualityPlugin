commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class, ProduceTemplateBean.class, FirstCamelContextBean.class, FirstCamelContextProduceTemplateBean.class, SecondCamelContextBean.class, SecondCamelContextProduceTemplateBean.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;4;;@Override public void configure() {     from("direct:inbound").bean(ProduceTemplateBean.class). }
false;public;0;4;;@Override public void configure() {     from("direct:inbound").bean(FirstCamelContextProduceTemplateBean.class). }
false;public;0;4;;@Override public void configure() {     from("direct:inbound").bean(SecondCamelContextProduceTemplateBean.class). }
false;public;0;26;;@Test @InSequence(1) public void configureCamelContexts() throws Exception {     defaultCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:inbound").bean(ProduceTemplateBean.class).         }     }).     firstCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:inbound").bean(FirstCamelContextProduceTemplateBean.class).         }     }).     secondCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:inbound").bean(SecondCamelContextProduceTemplateBean.class).         }     }).     secondCamelContext.getRouteController().startAllRoutes(). }
false;public;0;11;;@Test @InSequence(2) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {     defaultOutbound.expectedMessageCount(1).     defaultOutbound.expectedBodiesReceived("test-processed").     defaultOutbound.message(0).exchange().matches(fromCamelContext("camel-cdi")).     defaultInbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, defaultOutbound). }
false;public;0;11;;@Test @InSequence(3) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("test-first").     firstOutbound.message(0).exchange().matches(fromCamelContext("first")).     firstInbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound). }
false;public;0;11;;@Test @InSequence(4) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("test-second").     secondOutbound.message(0).exchange().matches(fromCamelContext("second")).     secondInbound.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound). }
