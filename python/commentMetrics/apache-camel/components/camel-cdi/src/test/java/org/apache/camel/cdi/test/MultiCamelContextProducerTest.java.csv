commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;6;;@Produces @ApplicationScoped @ContextName("second") private static CamelContext secondContext() {     return new DefaultCamelContext(). }
false;public,static;0;13;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(DefaultCamelContextBean.class, UriEndpointRoute.class, FirstCamelContextRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;11;;@Test @InSequence(1) public void verifyCamelContexts() {     assertThat(defaultCamelContext.getName(), is(equalTo("camel-cdi"))).     assertThat(firstCamelContext.getName(), is(equalTo("first"))).     assertThat(secondCamelContext.getName(), is(equalTo("second"))).     assertThat(defaultOutbound.getCamelContext().getName(), is(equalTo(defaultCamelContext.getName()))).     assertThat(firstOutbound.getCamelContext().getName(), is(equalTo(firstCamelContext.getName()))).     assertThat(secondOutbound.getCamelContext().getName(), is(equalTo(secondCamelContext.getName()))). }
false;public;0;4;;@Override public void configure() {     from("direct:inbound").setHeader("context").constant("second").to("mock:outbound"). }
false;public;0;10;;@Test @InSequence(2) public void configureCamelContexts() throws Exception {     secondCamelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:inbound").setHeader("context").constant("second").to("mock:outbound").         }     }). }
false;public;0;11;;@Test @InSequence(3) public void sendMessageToDefaultCamelContextInbound() throws InterruptedException {     defaultOutbound.expectedMessageCount(1).     defaultOutbound.expectedBodiesReceived("test-default").     defaultOutbound.message(0).exchange().matches(fromCamelContext("camel-cdi")).     defaultInbound.sendBody("test-default").     assertIsSatisfied(2L, TimeUnit.SECONDS, defaultOutbound). }
false;public;0;12;;@Test @InSequence(4) public void sendMessageToFirstCamelContextInbound() throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("test-first").     firstOutbound.expectedHeaderReceived("context", "first").     firstOutbound.message(0).exchange().matches(fromCamelContext("first")).     firstInbound.sendBody("test-first").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound). }
false;public;0;12;;@Test @InSequence(5) public void sendMessageToSecondCamelContextInbound() throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("test-second").     secondOutbound.expectedHeaderReceived("context", "second").     secondOutbound.message(0).exchange().matches(fromCamelContext("second")).     secondInbound.sendBody("test-second").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound). }
