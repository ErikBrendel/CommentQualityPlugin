commented;modifiers;parameterAmount;loc;comment;code
false;private;2;4;;private void onRouteAddedEventEventAll(@Observes RouteAddedEvent event, @Named("all") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteAddedEventEventSimple(@Observes @Named("simple") RouteAddedEvent event, @Named("simple") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteAddedEventEventOther(@Observes @Named("other") RouteAddedEvent event, @Named("other") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteStartedEventEventAll(@Observes RouteStartedEvent event, @Named("all") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteStartedEventEventSimple(@Observes @Named("simple") RouteStartedEvent event, @Named("simple") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteStartedEventEventOther(@Observes @Named("other") RouteStartedEvent event, @Named("other") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteStoppedEventEventAll(@Observes RouteStoppedEvent event, @Named("all") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteStoppedEventEventSimple(@Observes @Named("simple") RouteStoppedEvent event, @Named("simple") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteStoppedEventEventOther(@Observes @Named("other") RouteStoppedEvent event, @Named("other") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteRemovedEventEventAll(@Observes RouteRemovedEvent event, @Named("all") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteRemovedEventEventSimple(@Observes @Named("simple") RouteRemovedEvent event, @Named("simple") List<CamelEvent> events) {     events.add(event). }
false;private;2;4;;private void onRouteRemovedEventEventOther(@Observes @Named("other") RouteRemovedEvent event, @Named("other") List<CamelEvent> events) {     events.add(event). }
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(SimpleCamelRoute.class, OtherCamelRoute.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;3;42;;@Test @InSequence(1) public void startedCamelContext(@Named("all") List<CamelEvent> all, @Named("simple") List<CamelEvent> simple, @Named("other") List<CamelEvent> other) {     assertThat("Events fired are incorrect!", all, contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))))).     assertThat("Events fired are incorrect!", simple, contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))))).     assertThat("Events fired are incorrect!", other, contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))))). }
false;public;4;69;;@Test @InSequence(3) public void stopCamelContext(CamelContext context, @Named("all") List<CamelEvent> all, @Named("simple") List<CamelEvent> simple, @Named("other") List<CamelEvent> other) throws Exception {     context.stop().     assertThat("Events fired are incorrect!", all, contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))))).     assertThat("Events fired are incorrect!", simple, contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))), both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("simple"))))))).     assertThat("Events fired are incorrect!", other, contains(both(instanceOf(RouteAddedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStartedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteStoppedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))), both(instanceOf(RouteRemovedEvent.class)).and(hasProperty("route", hasProperty("id", is(equalTo("other"))))))). }
