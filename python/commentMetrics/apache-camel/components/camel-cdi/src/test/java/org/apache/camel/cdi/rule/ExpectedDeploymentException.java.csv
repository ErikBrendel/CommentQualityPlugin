commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public void evaluate() throws Throwable {     try {         base.evaluate().     } catch (Throwable exception) {         assertThat(exception, allOf(pecs(exceptions))).         try {             // OpenWebBeans logs the deployment exception details             // TODO: OpenWebBeans only log the root cause of exception thrown in producer methods             // assertThat(log.getMessages(), containsInRelativeOrder(pecs(messages)))             assertThat(log.getMessages(), anyOf(hasItems(messages))).         } catch (AssertionError error) {             // Weld stores the deployment exception details in the exception message             assertThat(exception.getMessage(), allOf(pecs(messages))).         }     } }
false;public,static;0;3;;public static ExpectedDeploymentException none() {     return new ExpectedDeploymentException(). }
false;public;1;4;;public ExpectedDeploymentException expect(Class<? extends Throwable> type) {     exceptions.add(Matchers.instanceOf(type)).     return this. }
false;public;1;4;;public ExpectedDeploymentException expectMessage(Matcher<String> matcher) {     messages.add(matcher).     return this. }
false;private;1;4;;@SuppressWarnings({ "unchecked", "rawtypes" }) private <T> List<Matcher<? super T>> pecs(List<Matcher<T>> matchers) {     return new ArrayList<>((List) matchers). }
false;private;1;8;;private <T> Matcher<Iterable<? super T>>[] hasItems(List<Matcher<T>> matchers) {     @SuppressWarnings("unchecked")     Matcher<Iterable<? super T>>[] items = new Matcher[matchers.size()].     for (int i = 0. i < items.length. i++) {         items[i] = hasItem(matchers.get(i)).     }     return items. }
false;public;2;4;;@Override public Statement apply(Statement base, Description description) {     return chain.apply(base, description). }
