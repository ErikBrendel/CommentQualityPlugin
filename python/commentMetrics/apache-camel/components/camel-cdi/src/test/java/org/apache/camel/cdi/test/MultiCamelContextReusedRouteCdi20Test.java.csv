commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClasses(FirstCamelContextBean.class, SecondNamedCamelContextBean.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;11;;@Test public void sendMessageToFirstCamelContextInbound() throws InterruptedException {     firstOutbound.expectedMessageCount(1).     firstOutbound.expectedBodiesReceived("test-first").     firstOutbound.expectedHeaderReceived("context", "test").     firstOutbound.message(0).exchange().matches(fromCamelContext("first")).     firstInbound.sendBody("test-first").     assertIsSatisfied(2L, TimeUnit.SECONDS, firstOutbound). }
false;public;0;11;;@Test public void sendMessageToSecondCamelContextInbound() throws InterruptedException {     secondOutbound.expectedMessageCount(1).     secondOutbound.expectedBodiesReceived("test-second").     secondOutbound.expectedHeaderReceived("context", "test").     secondOutbound.message(0).exchange().matches(fromCamelContext("second")).     secondInbound.sendBody("test-second").     assertIsSatisfied(2L, TimeUnit.SECONDS, secondOutbound). }
false;public;0;4;;@Override public void configure() {     from("direct:inbound").setHeader("context").constant("test").to("mock:outbound"). }
