commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;10;;@Produces @ApplicationScoped @Named("properties") private static PropertiesComponent configuration() {     Properties properties = new Properties().     properties.put("property", "value").     PropertiesComponent component = new PropertiesComponent().     component.setInitialProperties(properties).     return component. }
false;public,static;0;10;;@Deployment public static Archive<?> deployment() {     return ShrinkWrap.create(JavaArchive.class).addPackage(CdiCamelExtension.class.getPackage()).addClass(PropertyInjectBean.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml"). }
false;public;0;4;;@Override public void configure() {     from("direct:in").bean(PropertyInjectBean.class).to("mock:out"). }
false;public;1;10;;@Test @InSequence(1) public void configureCamelContext(CamelContext context) throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("direct:in").bean(PropertyInjectBean.class).to("mock:out").         }     }). }
false;public;2;11;;@Test @InSequence(2) public void sendMessageToInbound(@Uri("direct:in") ProducerTemplate in, @Uri("mock:out") MockEndpoint out) throws InterruptedException {     out.expectedMessageCount(1).     out.expectedBodiesReceived("test").     out.expectedHeaderReceived("header", "value").     in.sendBody("test").     assertIsSatisfied(2L, TimeUnit.SECONDS, out). }
false;public;1;5;;@Test @InSequence(3) public void retrieveContextualReference(PropertyInjectBean bean) {     assertThat(bean.getProperty(), is(equalTo("value"))). }
