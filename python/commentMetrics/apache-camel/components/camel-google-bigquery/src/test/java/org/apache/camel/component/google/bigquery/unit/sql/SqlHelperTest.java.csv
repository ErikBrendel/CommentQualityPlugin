commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testResolveQuery() throws Exception {     String answer = SqlHelper.resolveQuery(context, "delete from test.test_sql_table where id = 1", null).     assertEquals("delete from test.test_sql_table where id = 1", answer). }
false;public;0;6;;@Test @Ignore public void testResolveClasspathQuery() throws Exception {     String answer = SqlHelper.resolveQuery(context, "classpath:sql/delete.sql", ":").     assertEquals("delete from test.test_sql_table where id = @id", answer). }
false;public;0;9;;@Test public void testTranslateQuery() {     when(exchange.getMessage()).thenReturn(message).     when(message.getHeader(eq("report"), eq(String.class))).thenReturn("report_data").     when(message.getHeader(eq("import"), eq(String.class))).thenReturn("import_data").     String answer = SqlHelper.translateQuery(query, exchange).     assertEquals(expected, answer). }
false;public;0;9;;@Test public void testTranslateQueryProperties() {     when(exchange.getMessage()).thenReturn(message).     when(exchange.getProperty(eq("report"), eq(String.class))).thenReturn("report_data").     when(exchange.getProperty(eq("import"), eq(String.class))).thenReturn("import_data").     String answer = SqlHelper.translateQuery(query, exchange).     assertEquals(expected, answer). }
false;public;0;8;;@Test(expected = RuntimeExchangeException.class) public void testTranslateQueryWithoutParam() {     when(exchange.getMessage()).thenReturn(message).     when(message.getHeader(eq("report"), eq(String.class))).thenReturn("report_data").     SqlHelper.translateQuery(query, exchange).     fail("Should have thrown exception"). }
false;public;0;7;;@Test public void testExtractParameterNames() {     Set<String> answer = SqlHelper.extractParameterNames(query).     assertEquals(2, answer.size()).     assertTrue("Parameter 'date' not found", answer.contains("date")).     assertTrue("Parameter 'id' not found", answer.contains("id")). }
