commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;12;;private static Properties loadProperties() {     Properties testProperties = new Properties().     InputStream fileIn = BigQueryTestSupport.class.getClassLoader().getResourceAsStream("simple.properties").     try {         testProperties.load(fileIn).     } catch (Exception e) {         throw new RuntimeException(e).     }     return testProperties. }
false;protected;1;13;;protected void addBigqueryComponent(CamelContext context) {     connectionFactory = new GoogleBigQueryConnectionFactory().setServiceAccount(SERVICE_ACCOUNT).setServiceAccountKey(SERVICE_KEY).setServiceURL(SERVICE_URL).     GoogleBigQueryComponent component = new GoogleBigQueryComponent().     component.setConnectionFactory(connectionFactory).     context.addComponent("google-bigquery", component).     context.addComponent("properties", new PropertiesComponent("ref:prop")). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     addBigqueryComponent(context).     return context. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("prop", loadProperties()).     return jndi. }
false;public;0;3;;public GoogleBigQueryConnectionFactory getConnectionFactory() {     return connectionFactory. }
false;protected;2;15;;protected void assertRowExist(String tableName, Map<String, String> row) throws Exception {     QueryRequest queryRequest = new QueryRequest().     String query = "SELECT * FROM " + DATASET_ID + "." + tableName + " WHERE " + row.entrySet().stream().map(e -> e.getKey() + " = '" + e.getValue() + "'").collect(Collectors.joining(" AND ")).     log.debug("Query: {}", query).     queryRequest.setQuery(query).     QueryResponse queryResponse = getConnectionFactory().getDefaultClient().jobs().query(PROJECT_ID, queryRequest).execute().     assertEquals(1, queryResponse.getRows().size()). }
false;protected;1;22;;protected void createBqTable(String tableId) throws Exception {     TableReference reference = new TableReference().setTableId(tableId).setDatasetId(DATASET_ID).setProjectId(PROJECT_ID).     InputStream in = this.getClass().getResourceAsStream("/schema/simple-table.json").     TableSchema schema = readDefinition(in).     Table table = new Table().setTableReference(reference).setSchema(schema).     try {         getConnectionFactory().getDefaultClient().tables().insert(PROJECT_ID, DATASET_ID, table).execute().     } catch (GoogleJsonResponseException e) {         if (e.getDetails().getCode() == 409) {             log.info("Table {} already exist").         } else {             throw e.         }     } }
false;private;1;10;;private TableSchema readDefinition(InputStream schemaInputStream) throws Exception {     TableSchema schema = new TableSchema().     ObjectMapper mapper = new ObjectMapper().     List<TableFieldSchema> fields = mapper.readValue(schemaInputStream, ArrayList.class).     schema.setFields(fields).     return schema. }
