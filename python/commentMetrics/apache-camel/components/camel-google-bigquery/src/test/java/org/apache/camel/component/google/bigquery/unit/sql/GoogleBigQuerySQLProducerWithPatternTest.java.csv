commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void init() throws Exception {     sql = "insert into ${testDatasetId}.testTableId(id, data) values(1, 'test')".     setupBigqueryMock().     producer = createAndStartProducer(). }
false;public;0;14;;@Test public void sendExchangeWithProperties() throws Exception {     Exchange exchange = createExchangeWithBody(null).     exchange.getProperties().put("testDatasetId", "dataset").     String expected = "insert into dataset.testTableId(id, data) values(1, 'test')".     producer.process(exchange).     ArgumentCaptor<QueryRequest> dataCaptor = ArgumentCaptor.forClass(QueryRequest.class).     verify(bigquery.jobs()).query(eq(projectId), dataCaptor.capture()).     List<QueryRequest> requests = dataCaptor.getAllValues().     assertEquals(1, requests.size()).     assertEquals(expected, requests.get(0).getQuery()). }
false;public;0;14;;@Test public void sendMessageWithHeaders() throws Exception {     Exchange exchange = createExchangeWithBody(null).     exchange.getMessage().getHeaders().put("testDatasetId", "dataset").     String expected = "insert into dataset.testTableId(id, data) values(1, 'test')".     producer.process(exchange).     ArgumentCaptor<QueryRequest> dataCaptor = ArgumentCaptor.forClass(QueryRequest.class).     verify(bigquery.jobs()).query(eq(projectId), dataCaptor.capture()).     List<QueryRequest> requests = dataCaptor.getAllValues().     assertEquals(1, requests.size()).     assertEquals(expected, requests.get(0).getQuery()). }
