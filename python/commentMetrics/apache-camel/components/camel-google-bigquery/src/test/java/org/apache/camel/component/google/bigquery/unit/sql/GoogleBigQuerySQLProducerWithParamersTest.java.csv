commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void init() throws Exception {     sql = "insert into testDatasetId.testTableId(id, data) values(@id, @data)".     setupBigqueryMock().     producer = createAndStartProducer(). }
false;public;0;20;;@Test public void sendMessageWithParametersInBody() throws Exception {     Map<String, String> body = new HashMap<>().     body.put("id", "100").     body.put("data", "some data").     producer.process(createExchangeWithBody(body)).     ArgumentCaptor<QueryRequest> dataCaptor = ArgumentCaptor.forClass(QueryRequest.class).     verify(bigquery.jobs()).query(eq(projectId), dataCaptor.capture()).     QueryRequest request = dataCaptor.getValue().     assertEquals(sql, request.getQuery()).     assertEquals(2, request.getQueryParameters().size()).     assertEquals("id", request.getQueryParameters().get(1).getName()).     assertEquals("100", request.getQueryParameters().get(1).getParameterValue().getValue()).     assertEquals("data", request.getQueryParameters().get(0).getName()).     assertEquals("some data", request.getQueryParameters().get(0).getParameterValue().getValue()). }
false;public;0;24;;@Test public void sendMessageWithParametersInBodyAndHeaders() throws Exception {     Map<String, String> body = new HashMap<>().     body.put("id", "100").     Exchange exchange = createExchangeWithBody(body).     exchange.getMessage().getHeaders().put("id", "200").     exchange.getMessage().getHeaders().put("data", "some data").     producer.process(exchange).     ArgumentCaptor<QueryRequest> dataCaptor = ArgumentCaptor.forClass(QueryRequest.class).     verify(bigquery.jobs()).query(eq(projectId), dataCaptor.capture()).     QueryRequest request = dataCaptor.getValue().     assertEquals(sql, request.getQuery()).     assertEquals(2, request.getQueryParameters().size()).     assertEquals("id", request.getQueryParameters().get(1).getName()).     assertEquals("Body data must have higher priority", "100", request.getQueryParameters().get(1).getParameterValue().getValue()).     assertEquals("data", request.getQueryParameters().get(0).getName()).     assertEquals("some data", request.getQueryParameters().get(0).getParameterValue().getValue()). }
false;public;0;4;;@Test(expected = RuntimeExchangeException.class) public void sendMessageWithoutParameters() throws Exception {     producer.process(createExchangeWithBody(new HashMap<>())). }
