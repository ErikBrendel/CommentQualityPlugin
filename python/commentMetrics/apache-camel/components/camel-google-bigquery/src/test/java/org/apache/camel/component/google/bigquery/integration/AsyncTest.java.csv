commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() throws Exception {     createBqTable(TABLE_ID). }
false;public;0;9;;public void configure() {     from(directIn).to("seda:seda").     from("seda:seda").routeId("Async").inOnly(bigqueryEndpoint).log(LoggingLevel.INFO, "To sendresult").to(sendResult). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from(directIn).to("seda:seda").             from("seda:seda").routeId("Async").inOnly(bigqueryEndpoint).log(LoggingLevel.INFO, "To sendresult").to(sendResult).         }     }. }
false;public;0;23;;@Test public void sendAsync() throws Exception {     List<Map> objects = new ArrayList<>().     for (int i = 0. i < 5. i++) {         Exchange exchange = new DefaultExchange(context).         String uuidCol1 = UUID.randomUUID().toString().         String uuidCol2 = UUID.randomUUID().toString().         Map<String, String> object = new HashMap<>().         object.put("col1", uuidCol1).         object.put("col2", uuidCol2).         objects.add(object).         exchange.getIn().setBody(object).         producer.send(exchange).     }     sendResult.expectedMessageCount(5).     sendResult.assertIsSatisfied(4000).     for (Map object : objects) {         assertRowExist(TABLE_ID, object).     } }
