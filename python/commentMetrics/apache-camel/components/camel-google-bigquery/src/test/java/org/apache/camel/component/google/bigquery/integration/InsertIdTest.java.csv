commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() throws Exception {     createBqTable(TABLE_ID). }
false;public;0;11;;public void configure() {     from(directInWithInsertId).routeId("SingleRowWithInsertId").to(bigqueryEndpointWithInsertId).to(sendResultWithInsertId).     from(directIn).routeId("SingleRow").to(bigqueryEndpoint).to(sendResult). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from(directInWithInsertId).routeId("SingleRowWithInsertId").to(bigqueryEndpointWithInsertId).to(sendResultWithInsertId).             from(directIn).routeId("SingleRow").to(bigqueryEndpoint).to(sendResult).         }     }. }
false;public;0;27;;@Test public void sendTwoMessagesExpectOneRowUsingConfig() throws Exception {     Exchange exchange = new DefaultExchange(context).     String uuidCol1 = UUID.randomUUID().toString().     String uuidCol2 = UUID.randomUUID().toString().     Map<String, String> object = new HashMap<>().     object.put("col1", uuidCol1).     object.put("col2", uuidCol2).     exchange.getIn().setBody(object).     Exchange exchange2 = new DefaultExchange(context).     String uuid2Col2 = UUID.randomUUID().toString().     object.put("col1", uuidCol1).     object.put("col2", uuid2Col2).     exchange2.getIn().setBody(object).     sendResultWithInsertId.expectedMessageCount(2).     producerWithInsertId.send(exchange).     producerWithInsertId.send(exchange2).     sendResultWithInsertId.assertIsSatisfied(4000).     assertRowExist(TABLE_ID, object). }
false;public;0;28;;@Test public void sendTwoMessagesExpectOneRowUsingExchange() throws Exception {     Exchange exchange = new DefaultExchange(context).     String uuidCol1 = UUID.randomUUID().toString().     String uuidCol2 = UUID.randomUUID().toString().     Map<String, String> object = new HashMap<>().     object.put("col1", uuidCol1).     object.put("col2", uuidCol2).     exchange.getIn().setBody(object).     exchange.getIn().setHeader(GoogleBigQueryConstants.INSERT_ID, uuidCol1).     Exchange exchange2 = new DefaultExchange(context).     String uuid2Col2 = UUID.randomUUID().toString().     object.put("col1", uuidCol1).     object.put("col2", uuid2Col2).     exchange2.getIn().setBody(object).     exchange2.getIn().setHeader(GoogleBigQueryConstants.INSERT_ID, uuidCol1).     sendResult.expectedMessageCount(2).     producer.send(exchange).     producer.send(exchange2).     sendResult.assertIsSatisfied(4000).     assertRowExist(TABLE_ID, object). }
