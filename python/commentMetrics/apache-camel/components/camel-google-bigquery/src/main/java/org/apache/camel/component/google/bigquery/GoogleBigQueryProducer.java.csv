# id;timestamp;commentText;codeText;commentWords;codeWords
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1501835186;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId.isEmpty() ? tableId : tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            logger.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,is,empty,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,logger,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1501835186;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            logger.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,logger,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1501835187;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            log.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,log,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1504532038;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            log.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,log,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1504943497;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            log.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,log,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1523994338;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            log.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,log,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1530644042;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            log.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,log,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> @Override     public void process(Exchange exchange) throws Exception;1540108163;Process the exchange__The incoming exchange can be a grouped exchange in which case all the exchanges will be combined.__The incoming can be_<ul>_<li>A map where all map keys will map to field records. One map object maps to one bigquery row</li>_<li>A list of maps. Each entry in the list will map to one bigquery row</li>_</ul>_The incoming message is expected to be a List of Maps_The assumptions:_- All incoming records go into the same table_- Incoming records sorted by the timestamp;@Override_    public void process(Exchange exchange) throws Exception {_        List<Exchange> exchanges = prepareExchangeList(exchange)___        List<Exchange> processGroup = new ArrayList<>()___        String partitionDecorator = ""__        String suffix = ""__        String tableId = configuration.getTableId() == null ? "" : configuration.getTableId()__        int totalProcessed = 0___        for (Exchange ex: exchanges) {_            String tmpPartitionDecorator = ex.getIn().getHeader(GoogleBigQueryConstants.PARTITION_DECORATOR, "", String.class)__            String tmpSuffix = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_SUFFIX, "", String.class)__            String tmpTableId = ex.getIn().getHeader(GoogleBigQueryConstants.TABLE_ID, tableId, String.class)___            if (tmpTableId.isEmpty()) {_                throw new IllegalArgumentException("tableId need to be specified in one of endpoint configuration or exchange header")__            }__            _            if (!tmpPartitionDecorator.equals(partitionDecorator) || !tmpSuffix.equals(suffix) || !tmpTableId.equals(tableId)) {_                if (!processGroup.isEmpty()) {_                    totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__                }_                processGroup.clear()__                partitionDecorator = tmpPartitionDecorator__                suffix = tmpSuffix__                tableId = tmpTableId__            }_            processGroup.add(ex)__        }_        if (!processGroup.isEmpty()) {_            totalProcessed += process(tableId, partitionDecorator, suffix, processGroup, exchange.getExchangeId())__        }__        if (totalProcessed == 0) {_            log.debug("The incoming message is either null or empty for exchange {}", exchange.getExchangeId())__        }_    };process,the,exchange,the,incoming,exchange,can,be,a,grouped,exchange,in,which,case,all,the,exchanges,will,be,combined,the,incoming,can,be,ul,li,a,map,where,all,map,keys,will,map,to,field,records,one,map,object,maps,to,one,bigquery,row,li,li,a,list,of,maps,each,entry,in,the,list,will,map,to,one,bigquery,row,li,ul,the,incoming,message,is,expected,to,be,a,list,of,maps,the,assumptions,all,incoming,records,go,into,the,same,table,incoming,records,sorted,by,the,timestamp;override,public,void,process,exchange,exchange,throws,exception,list,exchange,exchanges,prepare,exchange,list,exchange,list,exchange,process,group,new,array,list,string,partition,decorator,string,suffix,string,table,id,configuration,get,table,id,null,configuration,get,table,id,int,total,processed,0,for,exchange,ex,exchanges,string,tmp,partition,decorator,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,suffix,ex,get,in,get,header,google,big,query,constants,string,class,string,tmp,table,id,ex,get,in,get,header,google,big,query,constants,table,id,string,class,if,tmp,table,id,is,empty,throw,new,illegal,argument,exception,table,id,need,to,be,specified,in,one,of,endpoint,configuration,or,exchange,header,if,tmp,partition,decorator,equals,partition,decorator,tmp,suffix,equals,suffix,tmp,table,id,equals,table,id,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,process,group,clear,partition,decorator,tmp,partition,decorator,suffix,tmp,suffix,table,id,tmp,table,id,process,group,add,ex,if,process,group,is,empty,total,processed,process,table,id,partition,decorator,suffix,process,group,exchange,get,exchange,id,if,total,processed,0,log,debug,the,incoming,message,is,either,null,or,empty,for,exchange,exchange,get,exchange,id
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1501835186;The method converts a single incoming message into a List__@param exchange_@return;private static List<Exchange> prepareExchangeList(Exchange exchange) {__        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list,param,exchange,return;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1501835186;The method converts a single incoming message into a List__@param exchange_@return;private static List<Exchange> prepareExchangeList(Exchange exchange) {__        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list,param,exchange,return;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1501835187;The method converts a single incoming message into a List__@param exchange_@return;private static List<Exchange> prepareExchangeList(Exchange exchange) {__        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list,param,exchange,return;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1504532038;The method converts a single incoming message into a List__@param exchange_@return;private static List<Exchange> prepareExchangeList(Exchange exchange) {__        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list,param,exchange,return;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1504943497;The method converts a single incoming message into a List;private static List<Exchange> prepareExchangeList(Exchange exchange) {_        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1523994338;The method converts a single incoming message into a List;private static List<Exchange> prepareExchangeList(Exchange exchange) {_        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1530644042;The method converts a single incoming message into a List;private static List<Exchange> prepareExchangeList(Exchange exchange) {_        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
GoogleBigQueryProducer -> private static List<Exchange> prepareExchangeList(Exchange exchange);1540108163;The method converts a single incoming message into a List;private static List<Exchange> prepareExchangeList(Exchange exchange) {_        List<Exchange> entryList___        if (null == exchange.getProperty(Exchange.GROUPED_EXCHANGE)) {_            entryList = new ArrayList<>()__            entryList.add(exchange)__        } else {_            entryList = (List<Exchange>) exchange.getProperty(Exchange.GROUPED_EXCHANGE)__        }__        return entryList__    };the,method,converts,a,single,incoming,message,into,a,list;private,static,list,exchange,prepare,exchange,list,exchange,exchange,list,exchange,entry,list,if,null,exchange,get,property,exchange,entry,list,new,array,list,entry,list,add,exchange,else,entry,list,list,exchange,exchange,get,property,exchange,return,entry,list
