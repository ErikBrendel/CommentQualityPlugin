commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Process the exchange The incoming exchange can be a grouped exchange in  * which case all the exchanges will be combined. The incoming can be  * <ul>  * <li>A map where all map keys will map to field records. One map object  * maps to one bigquery row</li>  * <li>A list of maps. Each entry in the list will map to one bigquery  * row</li>  * </ul>  * The incoming message is expected to be a List of Maps The assumptions: -  * All incoming records go into the same table - Incoming records sorted by  * the timestamp  */ ;/**  * Process the exchange The incoming exchange can be a grouped exchange in  * which case all the exchanges will be combined. The incoming can be  * <ul>  * <li>A map where all map keys will map to field records. One map object  * maps to one bigquery row</li>  * <li>A list of maps. Each entry in the list will map to one bigquery  * row</li>  * </ul>  * The incoming message is expected to be a List of Maps The assumptions: -  * All incoming records go into the same table - Incoming records sorted by  * the timestamp  */ @Override public void process(Exchange exchange) throws Exception {     String translatedQuery = SqlHelper.translateQuery(query, exchange).     Map<String, Object> queryParameters = extractParameters(exchange).     exchange.getMessage().setHeader(GoogleBigQueryConstants.TRANSLATED_QUERY, translatedQuery).     Long affectedRows = executeSQL(translatedQuery, queryParameters).     log.debug("The query {} affected {} rows", query, affectedRows).     exchange.getMessage().setBody(affectedRows). }
false;private;2;22;;private Long executeSQL(String translatedQuery, Map<String, Object> queryParameters) throws Exception {     QueryRequest apiQueryRequest = new QueryRequest().setQuery(translatedQuery).setUseLegacySql(false).     Bigquery.Jobs.Query apiQuery = bigquery.jobs().query(configuration.getProjectId(), apiQueryRequest).     setQueryParameters(queryParameters, apiQueryRequest).     if (log.isTraceEnabled()) {         log.trace("Sending query to bigquery standard sql: {}", translatedQuery).     }     QueryResponse apiResponse = apiQuery.execute().     if (apiResponse.getErrors() != null && !apiResponse.getErrors().isEmpty()) {         throw new Exception("Query " + translatedQuery + " failed: " + apiResponse.getErrors()).     }     if (log.isTraceEnabled()) {         log.trace("Result of query {} is {}", translatedQuery, apiResponse.toPrettyString()).     }     return apiResponse.getNumDmlAffectedRows(). }
false;private;1;28;;private Map<String, Object> extractParameters(Exchange exchange) {     if (queryParameterNames == null || queryParameterNames.size() == 0) {         return null.     }     Message message = exchange.getMessage().     HashMap<String, Object> headers = new HashMap<>(message.getHeaders()).     if (message.getBody() instanceof Map) {         try {             headers.putAll(message.getBody(Map.class)).         } catch (ClassCastException e) {             e.printStackTrace().         }     }     HashMap<String, Object> result = new HashMap<>(queryParameterNames.size()).     queryParameterNames.forEach(s -> {         Object value = headers.get(s).         if (value == null) {             throw new RuntimeExchangeException("SQL parameter with name '" + s + "' not found in the message headers", exchange).         }         result.put(s, headers.get(s)).     }).     return result. }
false;private;2;13;;private void setQueryParameters(Map<String, Object> params, QueryRequest apiQueryRequest) {     if (params == null) {         return.     }     List<QueryParameter> list = new ArrayList<>().     params.forEach((key, value) -> {         QueryParameter param = new QueryParameter().         param.setName(key).setParameterType(new QueryParameterType().setType("STRING")).setParameterValue(new QueryParameterValue().setValue(value.toString())).         list.add(param).     }).     apiQueryRequest.setQueryParameters(list). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public GoogleBigQuerySQLEndpoint getEndpoint() {     return (GoogleBigQuerySQLEndpoint) super.getEndpoint(). }
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     // TODO     String placeholder = ":#".     query = SqlHelper.resolveQuery(getEndpoint().getCamelContext(), configuration.getQuery(), placeholder).     queryParameterNames = SqlHelper.extractParameterNames(query). }
