# id;timestamp;commentText;codeText;commentWords;codeWords
SqlHelper -> public static String translateQuery(String query, Exchange exchange);1544005799;Replaces pattern in query in form of "${param}" with values from message header_Raises an error if param value not found in headers_@param exchange_@return Translated query text;public static String translateQuery(String query, Exchange exchange) {_        Message message = exchange.getMessage()__        Matcher matcher = pattern.matcher(query)__        StringBuffer stringBuffer = new StringBuffer()__        while (matcher.find()) {_            String paramKey = matcher.group(1)___            String value = message.getHeader(paramKey, String.class)__            if (value == null) {_                value = exchange.getProperty(paramKey, String.class)__                if (value == null)_                    throw new RuntimeExchangeException("SQL pattern with name '" + paramKey + "' not found in the message headers", exchange)__            }__            String replacement = Matcher.quoteReplacement(value)__            matcher.appendReplacement(stringBuffer, replacement)__        }_        matcher.appendTail(stringBuffer)__        return stringBuffer.toString()__    };replaces,pattern,in,query,in,form,of,param,with,values,from,message,header,raises,an,error,if,param,value,not,found,in,headers,param,exchange,return,translated,query,text;public,static,string,translate,query,string,query,exchange,exchange,message,message,exchange,get,message,matcher,matcher,pattern,matcher,query,string,buffer,string,buffer,new,string,buffer,while,matcher,find,string,param,key,matcher,group,1,string,value,message,get,header,param,key,string,class,if,value,null,value,exchange,get,property,param,key,string,class,if,value,null,throw,new,runtime,exchange,exception,sql,pattern,with,name,param,key,not,found,in,the,message,headers,exchange,string,replacement,matcher,quote,replacement,value,matcher,append,replacement,string,buffer,replacement,matcher,append,tail,string,buffer,return,string,buffer,to,string
SqlHelper -> public static String translateQuery(String query, Exchange exchange);1544005986;Replaces pattern in query in form of "${param}" with values from message header_Raises an error if param value not found in headers_@param exchange_@return Translated query text;public static String translateQuery(String query, Exchange exchange) {_        Message message = exchange.getMessage()__        Matcher matcher = pattern.matcher(query)__        StringBuffer stringBuffer = new StringBuffer()__        while (matcher.find()) {_            String paramKey = matcher.group(1)___            String value = message.getHeader(paramKey, String.class)__            if (value == null) {_                value = exchange.getProperty(paramKey, String.class)__                if (value == null)_                    throw new RuntimeExchangeException("SQL pattern with name '" + paramKey + "' not found in the message headers", exchange)__            }__            String replacement = Matcher.quoteReplacement(value)__            matcher.appendReplacement(stringBuffer, replacement)__        }_        matcher.appendTail(stringBuffer)__        return stringBuffer.toString()__    };replaces,pattern,in,query,in,form,of,param,with,values,from,message,header,raises,an,error,if,param,value,not,found,in,headers,param,exchange,return,translated,query,text;public,static,string,translate,query,string,query,exchange,exchange,message,message,exchange,get,message,matcher,matcher,pattern,matcher,query,string,buffer,string,buffer,new,string,buffer,while,matcher,find,string,param,key,matcher,group,1,string,value,message,get,header,param,key,string,class,if,value,null,value,exchange,get,property,param,key,string,class,if,value,null,throw,new,runtime,exchange,exception,sql,pattern,with,name,param,key,not,found,in,the,message,headers,exchange,string,replacement,matcher,quote,replacement,value,matcher,append,replacement,string,buffer,replacement,matcher,append,tail,string,buffer,return,string,buffer,to,string
SqlHelper -> public static String translateQuery(String query, Exchange exchange);1544006115;Replaces pattern in query in form of "${param}" with values from message_header Raises an error if param value not found in headers__@param exchange_@return Translated query text;public static String translateQuery(String query, Exchange exchange) {_        Message message = exchange.getMessage()__        Matcher matcher = pattern.matcher(query)__        StringBuffer stringBuffer = new StringBuffer()__        while (matcher.find()) {_            String paramKey = matcher.group(1)___            String value = message.getHeader(paramKey, String.class)__            if (value == null) {_                value = exchange.getProperty(paramKey, String.class)__                if (value == null) {_                    throw new RuntimeExchangeException("SQL pattern with name '" + paramKey + "' not found in the message headers", exchange)__                }_            }__            String replacement = Matcher.quoteReplacement(value)__            matcher.appendReplacement(stringBuffer, replacement)__        }_        matcher.appendTail(stringBuffer)__        return stringBuffer.toString()__    };replaces,pattern,in,query,in,form,of,param,with,values,from,message,header,raises,an,error,if,param,value,not,found,in,headers,param,exchange,return,translated,query,text;public,static,string,translate,query,string,query,exchange,exchange,message,message,exchange,get,message,matcher,matcher,pattern,matcher,query,string,buffer,string,buffer,new,string,buffer,while,matcher,find,string,param,key,matcher,group,1,string,value,message,get,header,param,key,string,class,if,value,null,value,exchange,get,property,param,key,string,class,if,value,null,throw,new,runtime,exchange,exception,sql,pattern,with,name,param,key,not,found,in,the,message,headers,exchange,string,replacement,matcher,quote,replacement,value,matcher,append,replacement,string,buffer,replacement,matcher,append,tail,string,buffer,return,string,buffer,to,string
SqlHelper -> public static String translateQuery(String query, Exchange exchange);1544006180;Replaces pattern in query in form of "${param}" with values from message_header Raises an error if param value not found in headers__@param exchange_@return Translated query text;public static String translateQuery(String query, Exchange exchange) {_        Message message = exchange.getMessage()__        Matcher matcher = pattern.matcher(query)__        StringBuffer stringBuffer = new StringBuffer()__        while (matcher.find()) {_            String paramKey = matcher.group(1)___            String value = message.getHeader(paramKey, String.class)__            if (value == null) {_                value = exchange.getProperty(paramKey, String.class)__                if (value == null) {_                    throw new RuntimeExchangeException("SQL pattern with name '" + paramKey + "' not found in the message headers", exchange)__                }_            }__            String replacement = Matcher.quoteReplacement(value)__            matcher.appendReplacement(stringBuffer, replacement)__        }_        matcher.appendTail(stringBuffer)__        return stringBuffer.toString()__    };replaces,pattern,in,query,in,form,of,param,with,values,from,message,header,raises,an,error,if,param,value,not,found,in,headers,param,exchange,return,translated,query,text;public,static,string,translate,query,string,query,exchange,exchange,message,message,exchange,get,message,matcher,matcher,pattern,matcher,query,string,buffer,string,buffer,new,string,buffer,while,matcher,find,string,param,key,matcher,group,1,string,value,message,get,header,param,key,string,class,if,value,null,value,exchange,get,property,param,key,string,class,if,value,null,throw,new,runtime,exchange,exception,sql,pattern,with,name,param,key,not,found,in,the,message,headers,exchange,string,replacement,matcher,quote,replacement,value,matcher,append,replacement,string,buffer,replacement,matcher,append,tail,string,buffer,return,string,buffer,to,string
SqlHelper -> public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException;1544005799;Resolve the query by loading the query from the classpath or file resource if needed.;public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException {_        String answer = query__        if (ResourceHelper.hasScheme(query)) {_            InputStream is = ResourceHelper_                    .resolveMandatoryResourceAsInputStream(camelContext, query)__            answer = camelContext.getTypeConverter().mandatoryConvertTo(String.class, is)__            if (placeholder != null) {_                answer = answer.replaceAll(placeholder, "@")__            }_        }_        return answer__    };resolve,the,query,by,loading,the,query,from,the,classpath,or,file,resource,if,needed;public,static,string,resolve,query,camel,context,camel,context,string,query,string,placeholder,throws,no,type,conversion,available,exception,ioexception,string,answer,query,if,resource,helper,has,scheme,query,input,stream,is,resource,helper,resolve,mandatory,resource,as,input,stream,camel,context,query,answer,camel,context,get,type,converter,mandatory,convert,to,string,class,is,if,placeholder,null,answer,answer,replace,all,placeholder,return,answer
SqlHelper -> public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException;1544005986;Resolve the query by loading the query from the classpath or file resource if needed.;public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException {_        String answer = query__        if (ResourceHelper.hasScheme(query)) {_            InputStream is = ResourceHelper_                    .resolveMandatoryResourceAsInputStream(camelContext, query)__            answer = camelContext.getTypeConverter().mandatoryConvertTo(String.class, is)__            if (placeholder != null) {_                answer = answer.replaceAll(placeholder, "@")__            }_        }_        return answer__    };resolve,the,query,by,loading,the,query,from,the,classpath,or,file,resource,if,needed;public,static,string,resolve,query,camel,context,camel,context,string,query,string,placeholder,throws,no,type,conversion,available,exception,ioexception,string,answer,query,if,resource,helper,has,scheme,query,input,stream,is,resource,helper,resolve,mandatory,resource,as,input,stream,camel,context,query,answer,camel,context,get,type,converter,mandatory,convert,to,string,class,is,if,placeholder,null,answer,answer,replace,all,placeholder,return,answer
SqlHelper -> public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException;1544006115;Resolve the query by loading the query from the classpath or file_resource if needed.;public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException {_        String answer = query__        if (ResourceHelper.hasScheme(query)) {_            InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, query)__            answer = camelContext.getTypeConverter().mandatoryConvertTo(String.class, is)__            if (placeholder != null) {_                answer = answer.replaceAll(placeholder, "@")__            }_        }_        return answer__    };resolve,the,query,by,loading,the,query,from,the,classpath,or,file,resource,if,needed;public,static,string,resolve,query,camel,context,camel,context,string,query,string,placeholder,throws,no,type,conversion,available,exception,ioexception,string,answer,query,if,resource,helper,has,scheme,query,input,stream,is,resource,helper,resolve,mandatory,resource,as,input,stream,camel,context,query,answer,camel,context,get,type,converter,mandatory,convert,to,string,class,is,if,placeholder,null,answer,answer,replace,all,placeholder,return,answer
SqlHelper -> public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException;1544006180;Resolve the query by loading the query from the classpath or file_resource if needed.;public static String resolveQuery(CamelContext camelContext, String query, String placeholder) throws NoTypeConversionAvailableException, IOException {_        String answer = query__        if (ResourceHelper.hasScheme(query)) {_            InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, query)__            answer = camelContext.getTypeConverter().mandatoryConvertTo(String.class, is)__            if (placeholder != null) {_                answer = answer.replaceAll(placeholder, "@")__            }_        }_        return answer__    };resolve,the,query,by,loading,the,query,from,the,classpath,or,file,resource,if,needed;public,static,string,resolve,query,camel,context,camel,context,string,query,string,placeholder,throws,no,type,conversion,available,exception,ioexception,string,answer,query,if,resource,helper,has,scheme,query,input,stream,is,resource,helper,resolve,mandatory,resource,as,input,stream,camel,context,query,answer,camel,context,get,type,converter,mandatory,convert,to,string,class,is,if,placeholder,null,answer,answer,replace,all,placeholder,return,answer
SqlHelper -> public static Set<String> extractParameterNames(String query);1544005799;Extracts list of parameters in form "@name" from query text_@param query_@return list of parameter names;public static Set<String> extractParameterNames(String query) {_        Matcher matcher = parameterPattern.matcher(query)__        Set<String> result = new HashSet<>()__        while (matcher.find()) {_            String paramName = matcher.group(1)__            result.add(paramName)__        }_        return result__    };extracts,list,of,parameters,in,form,name,from,query,text,param,query,return,list,of,parameter,names;public,static,set,string,extract,parameter,names,string,query,matcher,matcher,parameter,pattern,matcher,query,set,string,result,new,hash,set,while,matcher,find,string,param,name,matcher,group,1,result,add,param,name,return,result
SqlHelper -> public static Set<String> extractParameterNames(String query);1544005986;Extracts list of parameters in form "@name" from query text_@param query_@return list of parameter names;public static Set<String> extractParameterNames(String query) {_        Matcher matcher = parameterPattern.matcher(query)__        Set<String> result = new HashSet<>()__        while (matcher.find()) {_            String paramName = matcher.group(1)__            result.add(paramName)__        }_        return result__    };extracts,list,of,parameters,in,form,name,from,query,text,param,query,return,list,of,parameter,names;public,static,set,string,extract,parameter,names,string,query,matcher,matcher,parameter,pattern,matcher,query,set,string,result,new,hash,set,while,matcher,find,string,param,name,matcher,group,1,result,add,param,name,return,result
SqlHelper -> public static Set<String> extractParameterNames(String query);1544006115;Extracts list of parameters in form "@name" from query text__@param query_@return list of parameter names;public static Set<String> extractParameterNames(String query) {_        Matcher matcher = parameterPattern.matcher(query)__        Set<String> result = new HashSet<>()__        while (matcher.find()) {_            String paramName = matcher.group(1)__            result.add(paramName)__        }_        return result__    };extracts,list,of,parameters,in,form,name,from,query,text,param,query,return,list,of,parameter,names;public,static,set,string,extract,parameter,names,string,query,matcher,matcher,parameter,pattern,matcher,query,set,string,result,new,hash,set,while,matcher,find,string,param,name,matcher,group,1,result,add,param,name,return,result
SqlHelper -> public static Set<String> extractParameterNames(String query);1544006180;Extracts list of parameters in form "@name" from query text__@param query_@return list of parameter names;public static Set<String> extractParameterNames(String query) {_        Matcher matcher = parameterPattern.matcher(query)__        Set<String> result = new HashSet<>()__        while (matcher.find()) {_            String paramName = matcher.group(1)__            result.add(paramName)__        }_        return result__    };extracts,list,of,parameters,in,form,name,from,query,text,param,query,return,list,of,parameter,names;public,static,set,string,extract,parameter,names,string,query,matcher,matcher,parameter,pattern,matcher,query,set,string,result,new,hash,set,while,matcher,find,string,param,name,matcher,group,1,result,add,param,name,return,result
