commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;18;// Endpoint represents a single table ;// Endpoint represents a single table @Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String[] parts = remaining.split(":").     if (parts.length < 2) {         throw new IllegalArgumentException("Google BigQuery Endpoint format \"projectId:datasetId:tableName\"").     }     GoogleBigQueryConfiguration configuration = new GoogleBigQueryConfiguration().     setProperties(configuration, parameters).     configuration.parseRemaining(remaining).     if (configuration.getConnectionFactory() == null) {         configuration.setConnectionFactory(getConnectionFactory()).     }     return new GoogleBigQueryEndpoint(uri, this, configuration). }
false;public;0;3;;public String getProjectId() {     return projectId. }
true;public;1;3;/**  * Google Cloud Project Id  */ ;/**  * Google Cloud Project Id  */ public void setProjectId(String projectId) {     this.projectId = projectId. }
false;public;0;3;;public String getDatasetId() {     return datasetId. }
true;public;1;3;/**  * BigQuery Dataset Id  */ ;/**  * BigQuery Dataset Id  */ public void setDatasetId(String datasetId) {     this.datasetId = datasetId. }
false;public;0;6;;public GoogleBigQueryConnectionFactory getConnectionFactory() {     if (connectionFactory == null) {         connectionFactory = new GoogleBigQueryConnectionFactory().     }     return connectionFactory. }
true;public;1;3;/**  * ConnectionFactory to obtain connection to Bigquery Service. If non provided the default one will be used  */ ;/**  * ConnectionFactory to obtain connection to Bigquery Service. If non provided the default one will be used  */ public void setConnectionFactory(GoogleBigQueryConnectionFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
