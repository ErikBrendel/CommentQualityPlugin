commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;0;6;;public synchronized Bigquery getDefaultClient() throws Exception {     if (this.client == null) {         this.client = buildClient().     }     return this.client. }
false;public;1;9;;public Bigquery getMultiThreadClient(int parallelThreads) throws Exception {     PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager().     cm.setDefaultMaxPerRoute(parallelThreads).     cm.setMaxTotal(parallelThreads).     CloseableHttpClient httpClient = HttpClients.createMinimal(cm).     return buildClient(new ApacheHttpTransport(httpClient)). }
false;private;0;3;;private Bigquery buildClient() throws Exception {     return buildClient(GoogleNetHttpTransport.newTrustedTransport()). }
false;private;1;35;;private Bigquery buildClient(HttpTransport httpTransport) throws Exception {     GoogleCredential credential = null.     if (!Strings.isNullOrEmpty(serviceAccount) && !Strings.isNullOrEmpty(serviceAccountKey)) {         if (logger.isDebugEnabled()) {             logger.debug("Service Account and Key have been set explicitly. Initialising BigQuery using Service Account " + serviceAccount).         }         credential = createFromAccountKeyPair(httpTransport).     }     if (credential == null && !Strings.isNullOrEmpty(credentialsFileLocation)) {         if (logger.isDebugEnabled()) {             logger.debug("Key File Name has been set explicitly. Initialising BigQuery using Key File " + credentialsFileLocation).         }         credential = createFromFile().     }     if (credential == null) {         if (logger.isDebugEnabled()) {             logger.debug("No explicit Service Account or Key File Name have been provided. Initialising BigQuery using defaults ").         }         credential = createDefault().     }     Bigquery.Builder builder = new Bigquery.Builder(httpTransport, JSON_FACTORY, credential).setApplicationName("camel-google-bigquery").     // Local emulator, SOCKS proxy, etc.     if (serviceURL != null) {         builder.setRootUrl(serviceURL).     }     return builder.build(). }
false;private;0;10;;private GoogleCredential createFromFile() throws Exception {     GoogleCredential credential = GoogleCredential.fromStream(new FileInputStream(credentialsFileLocation)).     if (credential.createScopedRequired()) {         credential = credential.createScoped(BigqueryScopes.all()).     }     return credential. }
false;private;0;11;;private GoogleCredential createDefault() throws Exception {     GoogleCredential credential = GoogleCredential.getApplicationDefault().     Collection<String> scopes = Collections.singletonList(BigqueryScopes.BIGQUERY).     if (credential.createScopedRequired()) {         credential = credential.createScoped(scopes).     }     return credential. }
false;private;1;13;;private GoogleCredential createFromAccountKeyPair(HttpTransport httpTransport) {     try {         return new GoogleCredential.Builder().setTransport(httpTransport).setJsonFactory(JSON_FACTORY).setServiceAccountId(serviceAccount).setServiceAccountScopes(BigqueryScopes.all()).setServiceAccountPrivateKey(getPrivateKeyFromString(serviceAccountKey)).build().     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private;1;20;;private PrivateKey getPrivateKeyFromString(String serviceKeyPem) {     PrivateKey privateKey.     try {         String privKeyPEM = serviceKeyPem.replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "").replace("\r", "").replace("\n", "").         byte[] encoded = Base64.decodeBase64(privKeyPEM).         PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded).         privateKey = KeyFactory.getInstance("RSA").generatePrivate(keySpec).     } catch (Exception e) {         String error = "Constructing Private Key from PEM string failed: " + e.getMessage().         logger.error(error, e).         throw new RuntimeException(e).     }     return privateKey. }
false;public;0;3;;public String getServiceAccount() {     return serviceAccount. }
false;public;1;5;;public GoogleBigQueryConnectionFactory setServiceAccount(String serviceAccount) {     this.serviceAccount = serviceAccount.     resetClient().     return this. }
false;public;0;3;;public String getServiceAccountKey() {     return serviceAccountKey. }
false;public;1;5;;public GoogleBigQueryConnectionFactory setServiceAccountKey(String serviceAccountKey) {     this.serviceAccountKey = serviceAccountKey.     resetClient().     return this. }
false;public;0;3;;public String getCredentialsFileLocation() {     return credentialsFileLocation. }
false;public;1;5;;public GoogleBigQueryConnectionFactory setCredentialsFileLocation(String credentialsFileLocation) {     this.credentialsFileLocation = credentialsFileLocation.     resetClient().     return this. }
false;public;0;3;;public String getServiceURL() {     return serviceURL. }
false;public;1;5;;public GoogleBigQueryConnectionFactory setServiceURL(String serviceURL) {     this.serviceURL = serviceURL.     resetClient().     return this. }
false;private,synchronized;0;3;;private synchronized void resetClient() {     this.client = null. }
