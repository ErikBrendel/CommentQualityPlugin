commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;57;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     DataSource target = null.     // endpoint options overrule component configured datasource     DataSource ds = resolveAndRemoveReferenceParameter(parameters, "dataSource", DataSource.class).     if (ds != null) {         target = ds.     }     String dataSourceRef = getAndRemoveParameter(parameters, "dataSourceRef", String.class).     if (target == null && dataSourceRef != null) {         target = CamelContextHelper.mandatoryLookup(getCamelContext(), dataSourceRef, DataSource.class).     }     if (target == null) {         // fallback and use component         target = getDataSource().     }     if (target == null) {         throw new IllegalArgumentException("DataSource must be configured").     }     NamedParameterJdbcTemplate jdbcTemplate = new NamedParameterJdbcTemplate(target).     IntrospectionSupport.setProperties(jdbcTemplate, parameters, "template.").     String elsqlName = remaining.     String resUri = resourceUri.     String[] part = remaining.split(":").     if (part.length == 2) {         elsqlName = part[0].         resUri = part[1].     } else if (part.length > 2) {         throw new IllegalArgumentException("Invalid uri. Must by elsql:elsqlName:resourceUri, was: " + uri).     }     String onConsume = getAndRemoveParameter(parameters, "consumer.onConsume", String.class).     if (onConsume == null) {         onConsume = getAndRemoveParameter(parameters, "onConsume", String.class).     }     String onConsumeFailed = getAndRemoveParameter(parameters, "consumer.onConsumeFailed", String.class).     if (onConsumeFailed == null) {         onConsumeFailed = getAndRemoveParameter(parameters, "onConsumeFailed", String.class).     }     String onConsumeBatchComplete = getAndRemoveParameter(parameters, "consumer.onConsumeBatchComplete", String.class).     if (onConsumeBatchComplete == null) {         onConsumeBatchComplete = getAndRemoveParameter(parameters, "onConsumeBatchComplete", String.class).     }     ElsqlEndpoint endpoint = new ElsqlEndpoint(uri, this, jdbcTemplate, target, elsqlName, resUri).     endpoint.setElSqlConfig(elSqlConfig).     endpoint.setDatabaseVendor(databaseVendor).     endpoint.setDataSource(target).     endpoint.setDataSourceRef(dataSourceRef).     endpoint.setOnConsume(onConsume).     endpoint.setOnConsumeFailed(onConsumeFailed).     endpoint.setOnConsumeBatchComplete(onConsumeBatchComplete).     return endpoint. }
false;public;0;3;;public ElSqlDatabaseVendor getDatabaseVendor() {     return databaseVendor. }
true;public;1;3;/**  * To use a vendor specific {@link com.opengamma.elsql.ElSqlConfig}  */ ;/**  * To use a vendor specific {@link com.opengamma.elsql.ElSqlConfig}  */ public void setDatabaseVendor(ElSqlDatabaseVendor databaseVendor) {     this.databaseVendor = databaseVendor. }
true;public;1;3;/**  * Sets the DataSource to use to communicate with the database.  */ ;/**  * Sets the DataSource to use to communicate with the database.  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
false;public;0;3;;public DataSource getDataSource() {     return dataSource. }
true;public;0;3;/**  * Sets the DataSource to use to communicate with the database.  */ ;/**  * Sets the DataSource to use to communicate with the database.  */ public ElSqlConfig getElSqlConfig() {     return elSqlConfig. }
true;public;1;3;/**  * To use a specific configured ElSqlConfig. It may be better to use the <tt>databaseVendor</tt> option instead.  */ ;/**  * To use a specific configured ElSqlConfig. It may be better to use the <tt>databaseVendor</tt> option instead.  */ public void setElSqlConfig(ElSqlConfig elSqlConfig) {     this.elSqlConfig = elSqlConfig. }
false;public;0;3;;public String getResourceUri() {     return resourceUri. }
true;public;1;3;/**  * The resource file which contains the elsql SQL statements to use. You can specify multiple resources separated by comma.  * The resources are loaded on the classpath by default, you can prefix with <tt>file:</tt> to load from file system.  * Notice you can set this option on the component and then you do not have to configure this on the endpoint.  */ ;/**  * The resource file which contains the elsql SQL statements to use. You can specify multiple resources separated by comma.  * The resources are loaded on the classpath by default, you can prefix with <tt>file:</tt> to load from file system.  * Notice you can set this option on the component and then you do not have to configure this on the endpoint.  */ public void setResourceUri(String resourceUri) {     this.resourceUri = resourceUri. }
