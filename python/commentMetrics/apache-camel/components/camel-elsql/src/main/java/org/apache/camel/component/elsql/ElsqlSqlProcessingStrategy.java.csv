commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {     ps.execute().     int updateCount = ps.getUpdateCount().     if (LOG.isTraceEnabled()) {         LOG.trace("Update count {}", updateCount).     }     return updateCount. }
false;public;6;21;;@Override public int commit(DefaultSqlEndpoint defaultSqlEndpoint, Exchange exchange, Object data, NamedParameterJdbcTemplate jdbcTemplate, SqlParameterSource parameterSource, String query) throws Exception {     final SqlParameterSource param = new ElsqlSqlMapSource(exchange, data).     final String sql = elSql.getSql(query, new SpringSqlParams(param)).     LOG.debug("commit @{} using sql: {}", query, sql).     return jdbcTemplate.execute(sql, param, new PreparedStatementCallback<Integer>() {          @Override         public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {             ps.execute().             int updateCount = ps.getUpdateCount().             if (LOG.isTraceEnabled()) {                 LOG.trace("Update count {}", updateCount).             }             return updateCount.         }     }). }
false;public;1;10;;@Override public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {     ps.execute().     int updateCount = ps.getUpdateCount().     if (LOG.isTraceEnabled()) {         LOG.trace("Update count {}", updateCount).     }     return updateCount. }
false;public;4;21;;@Override public int commitBatchComplete(DefaultSqlEndpoint endpoint, NamedParameterJdbcTemplate namedJdbcTemplate, SqlParameterSource parameterSource, String query) throws Exception {     final SqlParameterSource param = new EmptySqlParameterSource().     final String sql = elSql.getSql(query, new SpringSqlParams(param)).     LOG.debug("commitBatchComplete @{} using sql: {}", query, sql).     return namedJdbcTemplate.execute(sql, param, new PreparedStatementCallback<Integer>() {          @Override         public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {             ps.execute().             int updateCount = ps.getUpdateCount().             if (LOG.isTraceEnabled()) {                 LOG.trace("Update count {}", updateCount).             }             return updateCount.         }     }). }
false;public;5;4;;@Override public int commit(DefaultSqlEndpoint defaultSqlEndpoint, Exchange exchange, Object data, JdbcTemplate jdbcTemplate, String query) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;3;4;;@Override public int commitBatchComplete(DefaultSqlEndpoint defaultSqlEndpoint, JdbcTemplate jdbcTemplate, String query) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
