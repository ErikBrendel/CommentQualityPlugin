commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static Map<?, ?> safeMap(Map<?, ?> map) {     return (map == null || map.isEmpty()) ? Collections.emptyMap() : map. }
false;public;1;10;;@Override public boolean hasValue(String paramName) {     if ("body".equals(paramName)) {         return true.     } else if ((paramName.startsWith("$simple{") || paramName.startsWith("${")) && paramName.endsWith("}")) {         return true.     } else {         return bodyMap.containsKey(paramName) || headersMap.containsKey(paramName).     } }
false;public;1;22;;@Override public Object getValue(String paramName) throws IllegalArgumentException {     Object answer.     if ("body".equals(paramName)) {         answer = exchange.getIn().getBody().     } else if ((paramName.startsWith("$simple{") || paramName.startsWith("${")) && paramName.endsWith("}")) {         // its a simple language expression         // spring org.springframework.jdbc.core.namedparam.NamedParameterUtils.PARAMETER_SEPARATORS         // uses : as parameter separator and we may use colon in simple languages as well such as bean:foo         // so we have to use # instead and replace them back         paramName = paramName.replace('#', ':').         answer = SimpleLanguage.expression(paramName).evaluate(exchange, Object.class).     } else {         answer = bodyMap.get(paramName).         if (answer == null) {             answer = headersMap.get(paramName).         }     }     return answer. }
