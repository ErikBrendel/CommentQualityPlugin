commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myIdGenerator", idGenerator).     // this is the database we create with some initial data for our unit test     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     jndi.bind("dataSource", db).     return jndi. }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;21;;@Test public void testDynamicConsume() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(3).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     List<Exchange> exchanges = mock.getReceivedExchanges().     assertEquals(1, exchanges.get(0).getIn().getBody(Map.class).get("ID")).     assertEquals("Camel", exchanges.get(0).getIn().getBody(Map.class).get("PROJECT")).     assertEquals(2, exchanges.get(1).getIn().getBody(Map.class).get("ID")).     assertEquals("AMQ", exchanges.get(1).getIn().getBody(Map.class).get("PROJECT")).     assertEquals(3, exchanges.get(2).getIn().getBody(Map.class).get("ID")).     assertEquals("Linux", exchanges.get(2).getIn().getBody(Map.class).get("PROJECT")).     // and the bean id should be > 1     assertTrue("Id counter should be > 1", idGenerator.getId() > 1). }
false;public;0;6;;@Override public void configure() throws Exception {     from("elsql:projectsByIdBean:elsql/projects.elsql?dataSource=#dataSource&consumer.initialDelay=0&consumer.delay=50").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("elsql:projectsByIdBean:elsql/projects.elsql?dataSource=#dataSource&consumer.initialDelay=0&consumer.delay=50").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
false;public;0;5;;public int nextId() {     // spring will call this twice, one for initializing query and 2nd for actual value     id++.     return id / 2. }
false;public;0;3;;public int getId() {     return id. }
