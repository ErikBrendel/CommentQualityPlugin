commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // this is the database we create with some initial data for our unit test     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     jndi.bind("dataSource", db).     return jndi. }
false;public;0;18;;@Test public void testSimpleBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:simple", "XXX").     mock.assertIsSatisfied().     // the result is a List     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     // and each row in the list is a Map     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     // and we should be able the get the project from the map that should be Linux     assertEquals("Linux", row.get("PROJECT")). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;5;;public void configure() {     from("direct:simple").to("elsql:projectsById:elsql/projects.elsql?dataSource=#dataSource").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:simple").to("elsql:projectsById:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").         }     }. }
