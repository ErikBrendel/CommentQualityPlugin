commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // this is the database we create with some initial data for our unit test     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     jndi.bind("dataSource", db).     return jndi. }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;15;;@Test public void testBatchMode() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(SqlConstants.SQL_UPDATE_COUNT).isEqualTo(1).     Map<String, Object> batchParams = new HashMap<>().     batchParams.put("id", "4").     batchParams.put("license", "GNU").     batchParams.put("project", "Batch").     template.sendBody("direct:batch", batchParams).     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testNonBatchMode() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(SqlConstants.SQL_UPDATE_COUNT).isEqualTo(1).     mock.message(0).header("id").isEqualTo("4").     mock.message(0).header("license").isEqualTo("GNU").     mock.message(0).header("project").isEqualTo("nonBatch").     Map<String, Object> headers = new HashMap<>().     headers.put("id", "4").     headers.put("license", "GNU").     headers.put("project", "nonBatch").     template.sendBodyAndHeaders("direct:nonBatch", "", headers).     mock.assertIsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:batch").to("elsql:insertProject:elsql/projects.elsql?dataSource=#dataSource&batch=true").to("mock:result").     from("direct:nonBatch").to("elsql:insertProject:elsql/projects.elsql?dataSource=#dataSource").to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:batch").to("elsql:insertProject:elsql/projects.elsql?dataSource=#dataSource&batch=true").to("mock:result").             from("direct:nonBatch").to("elsql:insertProject:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").         }     }. }
