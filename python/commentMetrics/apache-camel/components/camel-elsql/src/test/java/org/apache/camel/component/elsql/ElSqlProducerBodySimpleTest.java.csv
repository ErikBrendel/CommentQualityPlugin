commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // this is the database we create with some initial data for our unit test     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     jndi.bind("dataSource", db).     return jndi. }
false;public;0;21;;@Test public void testSimpleBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Project pojo = new Project().     pojo.setLicense("XXX").     template.sendBody("direct:simple", pojo).     mock.assertIsSatisfied().     // the result is a List     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     // and each row in the list is a Map     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     // and we should be able the get the project from the map that should be Linux     assertEquals("Linux", row.get("PROJECT")). }
false;public;0;17;;@Test public void testBodyParameter() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(List.class).     mock.message(0).header(SqlConstants.SQL_ROW_COUNT).isEqualTo(1).     template.sendBody("direct:parameters", Collections.singletonMap("id", 1)).     mock.assertIsSatisfied().     List<?> received = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Camel", row.get("PROJECT")). }
false;public;0;17;;@Test public void testHeadersParameter() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(List.class).     mock.message(0).header(SqlConstants.SQL_ROW_COUNT).isEqualTo(1).     template.sendBodyAndHeader("direct:parameters", "", "id", 1).     mock.assertIsSatisfied().     List<?> received = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Camel", row.get("PROJECT")). }
false;public;0;14;;@Test public void testUpdateHeader() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(SqlConstants.SQL_UPDATE_COUNT).isEqualTo(1).     Map<String, Object> headers = new HashMap<>().     headers.put("id", "3").     headers.put("lic", "GNU").     template.sendBodyAndHeaders("direct:update", "", headers).     mock.assertIsSatisfied(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;13;;public void configure() {     from("direct:simple").to("elsql:projectsByIdBody:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").     from("direct:parameters").to("elsql:projectById:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").     from("direct:update").to("elsql:updateLicense:elsql/projects.elsql?dataSource=#dataSource").to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:simple").to("elsql:projectsByIdBody:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").             from("direct:parameters").to("elsql:projectById:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").             from("direct:update").to("elsql:updateLicense:elsql/projects.elsql?dataSource=#dataSource").to("mock:result").         }     }. }
