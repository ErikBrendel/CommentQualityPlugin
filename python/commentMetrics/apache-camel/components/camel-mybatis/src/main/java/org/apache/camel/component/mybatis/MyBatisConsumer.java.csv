# id;timestamp;commentText;codeText;commentWords;codeWords
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1297757590;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1297975937;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1301257798;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1307685726;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1311748650;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1320497173;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1326561926;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1330892356;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1331674061;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1415367111;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1420183844;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1420184161;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1448103840;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1452076589;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1466273350;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1524063106;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1540108160;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1540108163;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
MyBatisConsumer -> public void setOnConsume(String onConsume);1297757590;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1297975937;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1301257798;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1307685726;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1311748650;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1320497173;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1326561926;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1330892356;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1331674061;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1415367111;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1420183844;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1420184161;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1448103840;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1452076589;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1466273350;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1524063106;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1540108160;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public void setOnConsume(String onConsume);1540108163;Sets the statement to run after successful processing._Use comma to separate multiple statements.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };sets,the,statement,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
MyBatisConsumer -> public String getOnConsume();1297757590;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1297975937;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1301257798;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1307685726;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1311748650;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1320497173;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1326561926;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1330892356;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1331674061;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1415367111;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1420183844;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1420184161;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1448103840;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1452076589;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1466273350;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1524063106;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1540108160;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> public String getOnConsume();1540108163;Gets the statement(s) to run after successful processing._Use comma to separate multiple statements.;public String getOnConsume() {_        return onConsume__    };gets,the,statement,s,to,run,after,successful,processing,use,comma,to,separate,multiple,statements;public,string,get,on,consume,return,on,consume
MyBatisConsumer -> @Override     protected int poll() throws Exception;1297757590;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        if (LOG.isTraceEnabled()) {_            LOG.trace("Polling: " + endpoint)__        }_        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,if,log,is,trace,enabled,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1297975937;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        if (LOG.isTraceEnabled()) {_            LOG.trace("Polling: " + endpoint)__        }_        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,if,log,is,trace,enabled,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1301257798;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1307685726;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1311748650;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1320497173;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1326561926;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<Object> data = CastUtils.cast(endpoint.getProcessingStrategy().poll(this, getEndpoint()))___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,object,data,cast,utils,cast,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1330892356;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1331674061;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1415367111;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1420183844;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1420184161;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1448103840;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1452076589;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1466273350;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<DataHolder>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,data,holder,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1524063106;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        LOG.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1540108160;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        log.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> @Override     protected int poll() throws Exception;1540108163;Polls the database;@Override_    protected int poll() throws Exception {_        _        shutdownRunningTask = null__        pendingExchanges = 0___        _        MyBatisEndpoint endpoint = getEndpoint()__        log.trace("Polling: {}", endpoint)__        List<?> data = endpoint.getProcessingStrategy().poll(this, getEndpoint())___        _        Queue<DataHolder> answer = new LinkedList<>()__        if (useIterator) {_            for (Object item : data) {_                Exchange exchange = createExchange(item)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = item__                answer.add(holder)__            }_        } else {_            if (!data.isEmpty() || routeEmptyResultSet) {_                Exchange exchange = createExchange(data)__                DataHolder holder = new DataHolder()__                holder.exchange = exchange__                holder.data = data__                answer.add(holder)__            }_        }__        _        return processBatch(CastUtils.cast(answer))__    };polls,the,database;override,protected,int,poll,throws,exception,shutdown,running,task,null,pending,exchanges,0,my,batis,endpoint,endpoint,get,endpoint,log,trace,polling,endpoint,list,data,endpoint,get,processing,strategy,poll,this,get,endpoint,queue,data,holder,answer,new,linked,list,if,use,iterator,for,object,item,data,exchange,exchange,create,exchange,item,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,item,answer,add,holder,else,if,data,is,empty,route,empty,result,set,exchange,exchange,create,exchange,data,data,holder,holder,new,data,holder,holder,exchange,exchange,holder,data,data,answer,add,holder,return,process,batch,cast,utils,cast,answer
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1297757590;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1297975937;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1301257798;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1307685726;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1311748650;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1320497173;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1326561926;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1330892356;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1331674061;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1415367111;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1420183844;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1420184161;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1448103840;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1452076589;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1466273350;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1524063106;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1540108160;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public void setUseIterator(boolean useIterator);1540108163;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1297757590;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1297975937;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1301257798;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1307685726;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1311748650;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1320497173;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1326561926;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1330892356;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1331674061;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1415367111;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1420183844;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1420184161;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1448103840;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1452076589;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1466273350;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1524063106;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1540108160;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isUseIterator();1540108163;Indicates how resultset should be delivered to the route;public boolean isUseIterator() {_        return useIterator__    };indicates,how,resultset,should,be,delivered,to,the,route;public,boolean,is,use,iterator,return,use,iterator
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1297757590;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1297975937;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1301257798;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1307685726;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1311748650;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1320497173;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1326561926;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1330892356;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1331674061;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1415367111;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1420183844;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1420184161;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1448103840;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1452076589;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1466273350;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1524063106;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1540108160;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
MyBatisConsumer -> public boolean isRouteEmptyResultSet();1540108163;Indicates whether empty resultset should be allowed to be sent to the next hop or not;public boolean isRouteEmptyResultSet() {_        return routeEmptyResultSet__    };indicates,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,or,not;public,boolean,is,route,empty,result,set,return,route,empty,result,set
