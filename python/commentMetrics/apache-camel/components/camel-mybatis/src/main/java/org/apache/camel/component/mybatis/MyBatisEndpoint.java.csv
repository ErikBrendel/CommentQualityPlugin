commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public Producer createProducer() throws Exception {     ObjectHelper.notNull(statementType, "statementType", this).     ObjectHelper.notNull(statement, "statement", this).     return new MyBatisProducer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     ObjectHelper.notNull(statement, "statement", this).     MyBatisConsumer consumer = new MyBatisConsumer(this, processor).     consumer.setMaxMessagesPerPoll(getMaxMessagesPerPoll()).     consumer.setOnConsume(getOnConsume()).     consumer.setUseIterator(isUseIterator()).     consumer.setRouteEmptyResultSet(isRouteEmptyResultSet()).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public String getStatement() {     return statement. }
true;public;1;3;/**  * The statement name in the MyBatis XML mapping file which maps to the query, insert, update or delete operation you wish to evaluate.  */ ;/**  * The statement name in the MyBatis XML mapping file which maps to the query, insert, update or delete operation you wish to evaluate.  */ public void setStatement(String statement) {     this.statement = statement. }
false;public;0;3;;public StatementType getStatementType() {     return statementType. }
true;public;1;3;/**  * Mandatory to specify for the producer to control which kind of operation to invoke.  */ ;/**  * Mandatory to specify for the producer to control which kind of operation to invoke.  */ public void setStatementType(StatementType statementType) {     this.statementType = statementType. }
false;public;0;3;;public boolean isTransacted() {     return transacted. }
true;public;1;3;/**  * Enables or disables transaction. If enabled then if processing an exchange failed then the consumer  *     + break out processing any further exchanges to cause a rollback eager  */ ;/**  * Enables or disables transaction. If enabled then if processing an exchange failed then the consumer  *     + break out processing any further exchanges to cause a rollback eager  */ public void setTransacted(boolean transacted) {     this.transacted = transacted. }
false;public;0;3;;public MyBatisProcessingStrategy getProcessingStrategy() {     return processingStrategy. }
true;public;1;3;/**  * To use a custom MyBatisProcessingStrategy  */ ;/**  * To use a custom MyBatisProcessingStrategy  */ public void setProcessingStrategy(MyBatisProcessingStrategy processingStrategy) {     this.processingStrategy = processingStrategy. }
false;public;0;3;;public int getMaxMessagesPerPoll() {     return maxMessagesPerPoll. }
true;public;1;3;/**  * This option is intended to split results returned by the database pool into the batches and deliver them in multiple exchanges.  * This integer defines the maximum messages to deliver in single exchange. By default, no maximum is set.  * Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files.  * Set a value of 0 or negative to disable it.  */ ;/**  * This option is intended to split results returned by the database pool into the batches and deliver them in multiple exchanges.  * This integer defines the maximum messages to deliver in single exchange. By default, no maximum is set.  * Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files.  * Set a value of 0 or negative to disable it.  */ public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {     this.maxMessagesPerPoll = maxMessagesPerPoll. }
false;public;0;3;;public String getOnConsume() {     return onConsume. }
true;public;1;3;/**  * Statement to run after data has been processed in the route  */ ;/**  * Statement to run after data has been processed in the route  */ public void setOnConsume(String onConsume) {     this.onConsume = onConsume. }
false;public;0;3;;public boolean isUseIterator() {     return useIterator. }
true;public;1;3;/**  * Process resultset individually or as a list  */ ;/**  * Process resultset individually or as a list  */ public void setUseIterator(boolean useIterator) {     this.useIterator = useIterator. }
false;public;0;3;;public boolean isRouteEmptyResultSet() {     return routeEmptyResultSet. }
true;public;1;3;/**  * Whether allow empty resultset to be routed to the next hop  */ ;/**  * Whether allow empty resultset to be routed to the next hop  */ public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {     this.routeEmptyResultSet = routeEmptyResultSet. }
