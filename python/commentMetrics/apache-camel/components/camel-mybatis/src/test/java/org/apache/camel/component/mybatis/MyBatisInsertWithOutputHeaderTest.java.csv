commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testInsert() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Account.class).     mock.message(0).header(TEST_CASE_HEADER_NAME).isEqualTo(1).     mock.message(0).header(MyBatisConstants.MYBATIS_RESULT).isNull().     Account account = new Account().     account.setId(TEST_ACCOUNT_ID).     account.setFirstName("Willem").     account.setLastName("Jiang").     account.setEmailAddress("Faraway@gmail.com").     template.sendBody("direct:start", account).     assertMockEndpointsSatisfied().     // there should be 3 rows now     Integer rows = template.requestBody("mybatis:count?statementType=SelectOne", null, Integer.class).     assertEquals("There should be 3 rows", 3, rows.intValue()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("mybatis:insertAccount?statementType=Insert&outputHeader=" + TEST_CASE_HEADER_NAME).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mybatis:insertAccount?statementType=Insert&outputHeader=" + TEST_CASE_HEADER_NAME).to("mock:result").         }     }. }
