commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSelectList() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied().     Account james = mock.getReceivedExchanges().get(0).getIn().getBody(Account.class).     Account claus = mock.getReceivedExchanges().get(1).getIn().getBody(Account.class).     assertEquals("James", james.getFirstName()).     assertEquals("Claus", claus.getFirstName()). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").to("mybatis:selectAllAccounts?statementType=SelectList").split(body()).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").to("mybatis:selectAllAccounts?statementType=SelectList").split(body()).to("mock:result").         // END SNIPPET: e1         }     }. }
