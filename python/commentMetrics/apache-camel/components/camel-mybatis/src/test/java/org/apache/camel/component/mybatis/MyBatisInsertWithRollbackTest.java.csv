commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testInsert() throws Exception {     getMockEndpoint("mock:commit").expectedMessageCount(0).     getMockEndpoint("mock:rollback").expectedMessageCount(1).     getMockEndpoint("mock:rollback").message(0).body().isEqualTo(null).     getMockEndpoint("mock:rollback").message(0).header(Exchange.EXCEPTION_CAUGHT).isInstanceOf(PersistenceException.class).     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied().     // there should be still 2 rows     Integer rows = template.requestBody("mybatis:count?statementType=SelectOne", null, Integer.class).     assertEquals("There should be 2 rows", 2, rows.intValue()). }
false;public;0;9;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:rollback").     from("direct:start").to("mybatis:insertAccount?statementType=Insert").to("mock:commit"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:rollback").             from("direct:start").to("mybatis:insertAccount?statementType=Insert").to("mock:commit").         }     }. }
