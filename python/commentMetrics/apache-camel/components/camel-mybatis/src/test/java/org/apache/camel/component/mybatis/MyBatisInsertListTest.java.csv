commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testInsertList() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Account account1 = new Account().     account1.setId(444).     account1.setFirstName("Willem").     account1.setLastName("Jiang").     account1.setEmailAddress("Faraway@gmail.com").     Account account2 = new Account().     account2.setId(555).     account2.setFirstName("Aaron").     account2.setLastName("Daubman").     account2.setEmailAddress("ReadTheDevList@gmail.com").     List<Account> accountList = new ArrayList<>(2).     accountList.add(account1).     accountList.add(account2).     // insert 2 new rows     template.sendBody("direct:start", accountList).     assertMockEndpointsSatisfied().     // there should be 4 rows now     Integer rows = template.requestBody("mybatis:count?statementType=SelectOne", null, Integer.class).     assertEquals("There should be 4 rows", 4, rows.intValue()). }
false;public;0;8;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").to("mybatis:batchInsertAccount?statementType=InsertList").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").to("mybatis:batchInsertAccount?statementType=InsertList").to("mock:result").         // END SNIPPET: e1         }     }. }
