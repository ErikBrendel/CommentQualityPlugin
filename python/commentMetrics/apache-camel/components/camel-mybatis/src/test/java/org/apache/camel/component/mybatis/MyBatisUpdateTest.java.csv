commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testUpdate() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Account account = new Account().     account.setId(456).     account.setFirstName("Claus").     account.setLastName("Jensen").     account.setEmailAddress("Other@gmail.com").     template.sendBody("direct:start", account).     assertMockEndpointsSatisfied().     // there should be 2 rows now     Integer rows = template.requestBody("mybatis:count?statementType=SelectOne", null, Integer.class).     assertEquals("There should be 2 rows", 2, rows.intValue()).     Account claus = template.requestBody("mybatis:selectAccountById?statementType=SelectOne", 456, Account.class).     assertEquals("Claus", claus.getFirstName()).     assertEquals("Jensen", claus.getLastName()).     assertEquals("Other@gmail.com", claus.getEmailAddress()). }
false;public;0;8;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").to("mybatis:updateAccount?statementType=Update").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").to("mybatis:updateAccount?statementType=Update").to("mock:result").         // END SNIPPET: e1         }     }. }
