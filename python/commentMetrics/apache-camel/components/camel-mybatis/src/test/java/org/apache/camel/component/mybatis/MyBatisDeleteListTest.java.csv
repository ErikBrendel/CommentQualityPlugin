commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testDelete() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", Arrays.asList(123, 456)).     assertMockEndpointsSatisfied().     // there should be 0 rows now     Integer rows = template.requestBody("mybatis:count?statementType=SelectOne", null, Integer.class).     assertEquals("There should be 0 rows", 0, rows.intValue()). }
false;public;0;13;;@Test public void testDeleteNotFound() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", Arrays.asList(999)).     assertMockEndpointsSatisfied().     // there should be 2 rows now     Integer rows = template.requestBody("mybatis:count?statementType=SelectOne", null, Integer.class).     assertEquals("There should be 2 rows", 2, rows.intValue()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("mybatis:batchDeleteAccountById?statementType=DeleteList").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mybatis:batchDeleteAccountById?statementType=DeleteList").to("mock:result").         }     }. }
