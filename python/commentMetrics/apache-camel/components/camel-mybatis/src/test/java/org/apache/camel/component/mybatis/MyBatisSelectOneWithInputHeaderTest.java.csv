commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSelectOne() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Account.class).     template.sendBodyAndHeader("direct:start", TEST_ACCOUNT_ID_BAD, TEST_CASE_HEADER_NAME, TEST_ACCOUNT_ID).     assertMockEndpointsSatisfied().     Account account = mock.getReceivedExchanges().get(0).getIn().getBody(Account.class).     assertEquals("Claus", account.getFirstName()). }
false;public;0;10;;@Test public void tesSelectOneNotFound() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isNull().     template.sendBodyAndHeader("direct:start", TEST_ACCOUNT_ID, TEST_CASE_HEADER_NAME, TEST_ACCOUNT_ID_BAD).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").to("mybatis:selectAccountById?statementType=SelectOne&inputHeader=" + TEST_CASE_HEADER_NAME).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").to("mybatis:selectAccountById?statementType=SelectOne&inputHeader=" + TEST_CASE_HEADER_NAME).to("mock:result").         // END SNIPPET: e1         }     }. }
