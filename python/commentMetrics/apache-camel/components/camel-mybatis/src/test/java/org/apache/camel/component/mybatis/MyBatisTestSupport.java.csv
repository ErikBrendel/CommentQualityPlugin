commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected boolean createTestData() {     return true. }
true;protected;0;3;/**  * Gets the name of the database table handling the test data.  *  * @return The name of the database table handling the test data.  */ ;/**  * Gets the name of the database table handling the test data.  *  * @return The name of the database table handling the test data.  */ protected String getTableName() {     return "ACCOUNT". }
true;protected;0;3;/**  * Gets the SQL query dropping the test data table.  *  * @return The SQL query dropping the test data table.  */ ;/**  * Gets the SQL query dropping the test data table.  *  * @return The SQL query dropping the test data table.  */ protected String getDropStatement() {     return "drop table ACCOUNT". }
true;protected;0;3;/**  * Gets the SQL query creating the test data table.  *  * @return The SQL query creating the test data table.  */ ;/**  * Gets the SQL query creating the test data table.  *  * @return The SQL query creating the test data table.  */ protected String getCreateStatement() {     return "create table ACCOUNT (ACC_ID INTEGER, ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255))". }
false;public;0;36;;@Override @Before public void setUp() throws Exception {     super.setUp().     try (Connection connection = createConnection().         ResultSet checkTableExistResultSet = connection.getMetaData().getTables(null, null, getTableName(), null).         Statement deletePreExistingTableStatement = connection.createStatement().         Statement createTableStatement = connection.createStatement()) {         // delete any pre-existing ACCOUNT table         if (checkTableExistResultSet.next()) {             deletePreExistingTableStatement.execute(getDropStatement()).         }         // lets create the table...         createTableStatement.execute(getCreateStatement()).         connection.commit().     }     if (createTestData()) {         Account account1 = new Account().         account1.setId(123).         account1.setFirstName("James").         account1.setLastName("Strachan").         account1.setEmailAddress("TryGuessing@gmail.com").         Account account2 = new Account().         account2.setId(456).         account2.setFirstName("Claus").         account2.setLastName("Ibsen").         account2.setEmailAddress("Noname@gmail.com").         template.sendBody("mybatis:insertAccount?statementType=Insert", new Account[] { account1, account2 }).     } }
false;protected;0;4;;protected Connection createConnection() throws Exception {     MyBatisComponent component = context.getComponent("mybatis", MyBatisComponent.class).     return component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection(). }
