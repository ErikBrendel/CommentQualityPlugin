commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSelectOne() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Account.class).     template.sendBody("direct:start", 456).     assertMockEndpointsSatisfied().     Account account = mock.getReceivedExchanges().get(0).getIn().getBody(Account.class).     assertEquals("Claus", account.getFirstName()). }
false;public;0;17;;@Test public void testSelectOneTwoTime() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.message(0).body().isInstanceOf(Account.class).     mock.message(1).body().isInstanceOf(Account.class).     template.sendBody("direct:start", 456).     template.sendBody("direct:start", 123).     assertMockEndpointsSatisfied().     Account account = mock.getReceivedExchanges().get(0).getIn().getBody(Account.class).     assertEquals("Claus", account.getFirstName()).     account = mock.getReceivedExchanges().get(1).getIn().getBody(Account.class).     assertEquals("James", account.getFirstName()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("mybatis-bean:AccountService:selectBeanAccountById").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mybatis-bean:AccountService:selectBeanAccountById").to("mock:result").         }     }. }
