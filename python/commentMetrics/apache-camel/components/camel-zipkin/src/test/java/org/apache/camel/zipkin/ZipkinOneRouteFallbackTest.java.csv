commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void setSpanReporter(ZipkinTracer zipkin) {     zipkin.setSpanReporter(Reporter.NOOP). }
false;protected;0;16;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     zipkin = new ZipkinTracer().     // no service so should use fallback naming style     // we do not want to trace any direct endpoints     zipkin.addExcludePattern("direct:*").     zipkin.setIncludeMessageBody(true).     setSpanReporter(zipkin).     // attaching ourself to CamelContext     zipkin.init(context).     return context. }
false;public;0;5;;@Test public void testZipkinRoute() throws Exception {     template.requestBody("direct:start", "Hello Goofy").     template.requestBody("direct:start", "Hello again Goofy"). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").to("seda:goofy").     from("seda:goofy").routeId("goofy").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")). }
false;protected;0;13;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("seda:goofy").             from("seda:goofy").routeId("goofy").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).         }     }. }
