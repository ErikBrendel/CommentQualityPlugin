commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void setSpanReporter(ZipkinTracer zipkin) {     zipkin.setSpanReporter(Reporter.NOOP). }
false;protected;0;19;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     zipkin = new ZipkinTracer().     zipkin.addClientServiceMapping("seda:a", "a").     zipkin.addClientServiceMapping("seda:b", "b").     zipkin.addClientServiceMapping("seda:c", "c").     zipkin.addServerServiceMapping("seda:a", "a").     zipkin.addServerServiceMapping("seda:b", "b").     zipkin.addServerServiceMapping("seda:c", "c").     setSpanReporter(zipkin).     // attaching ourself to CamelContext     zipkin.init(context).     return context. }
false;public;0;8;;@Test public void testZipkinRoute() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     template.requestBody("direct:start", "Hello World").     assertTrue(notify.matches(30, TimeUnit.SECONDS)). }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:start").to("seda:a").routeId("start").     from("seda:a").routeId("a").log("routing at ${routeId}").to("seda:b").delay(2000).to("seda:c").log("End of routing").     from("seda:b").routeId("b").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).     from("seda:c").routeId("c").log("routing at ${routeId}").delay(simple("${random(0,100)}")). }
false;protected;0;24;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("seda:a").routeId("start").             from("seda:a").routeId("a").log("routing at ${routeId}").to("seda:b").delay(2000).to("seda:c").log("End of routing").             from("seda:b").routeId("b").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).             from("seda:c").routeId("c").log("routing at ${routeId}").delay(simple("${random(0,100)}")).         }     }. }
