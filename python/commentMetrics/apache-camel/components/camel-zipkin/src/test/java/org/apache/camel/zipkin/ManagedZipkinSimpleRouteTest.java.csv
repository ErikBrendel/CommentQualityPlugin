commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void setSpanReporter(ZipkinTracer zipkin) {     zipkin.setSpanReporter(Reporter.NOOP). }
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;protected;0;13;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     zipkin = new ZipkinTracer().     zipkin.setServiceName("dude").     setSpanReporter(zipkin).     // attaching ourself to CamelContext     zipkin.init(context).     return context. }
false;public;0;23;;@Test public void testZipkinRoute() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = new ObjectName("org.apache.camel:context=camel-1,type=services,name=ZipkinTracer").     assertNotNull(on).     assertTrue(mbeanServer.isRegistered(on)).     Float rate = (Float) mbeanServer.getAttribute(on, "Rate").     assertEquals("Should be 1.0f", 1.0f, rate.floatValue(), 0.1f).     NotifyBuilder notify = new NotifyBuilder(context).whenDone(5).create().     for (int i = 0. i < 5. i++) {         template.sendBody("seda:dude", "Hello World").     }     assertTrue(notify.matches(30, TimeUnit.SECONDS)). }
false;public;0;6;;@Override public void configure() throws Exception {     from("seda:dude").routeId("dude").log("routing at ${routeId}").delay(simple("${random(10,20)}")). }
false;protected;0;11;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:dude").routeId("dude").log("routing at ${routeId}").delay(simple("${random(10,20)}")).         }     }. }
