commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void setSpanReporter(ZipkinTracer zipkin) {     zipkin.setSpanReporter(Reporter.NOOP). }
false;protected;0;19;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     zipkin = new ZipkinTracer().     // we have 2 routes as services     zipkin.addClientServiceMapping("seda:cat", "cat").     zipkin.addServerServiceMapping("seda:cat", "cat").     zipkin.addClientServiceMapping("seda:dog", "dog").     zipkin.addServerServiceMapping("seda:dog", "dog").     // capture message body as well     zipkin.setIncludeMessageBody(true).     setSpanReporter(zipkin).     // attaching ourself to CamelContext     zipkin.init(context).     return context. }
false;public;0;4;;@Test public void testZipkinRoute() throws Exception {     template.requestBody("direct:start", "Camel say hello Cat"). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").to("seda:cat").     from("seda:cat").routeId("cat").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).setBody().constant("Cat says hello Dog").to("seda:dog").     from("seda:dog").routeId("dog").log("routing at ${routeId}").delay(simple("${random(0,500)}")).setBody().constant("Dog say hello Cat and Camel"). }
false;protected;0;20;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("seda:cat").             from("seda:cat").routeId("cat").log("routing at ${routeId}").delay(simple("${random(1000,2000)}")).setBody().constant("Cat says hello Dog").to("seda:dog").             from("seda:dog").routeId("dog").log("routing at ${routeId}").delay(simple("${random(0,500)}")).setBody().constant("Dog say hello Cat and Camel").         }     }. }
