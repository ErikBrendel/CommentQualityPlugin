commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;public void process(Exchange exchange) throws Exception {     PublishRequest request = new PublishRequest().     request.setTopicArn(getConfiguration().getTopicArn()).     request.setSubject(determineSubject(exchange)).     request.setMessageStructure(determineMessageStructure(exchange)).     request.setMessage(exchange.getIn().getBody(String.class)).     request.setMessageAttributes(this.translateAttributes(exchange.getIn().getHeaders(), exchange)).     log.trace("Sending request [{}] from exchange [{}]...", request, exchange).     PublishResult result = getEndpoint().getSNSClient().publish(request).     log.trace("Received result [{}]", result).     Message message = getMessageForResponse(exchange).     message.setHeader(SnsConstants.MESSAGE_ID, result.getMessageId()). }
false;private;1;8;;private String determineSubject(Exchange exchange) {     String subject = exchange.getIn().getHeader(SnsConstants.SUBJECT, String.class).     if (subject == null) {         subject = getConfiguration().getSubject().     }     return subject. }
false;private;1;8;;private String determineMessageStructure(Exchange exchange) {     String structure = exchange.getIn().getHeader(SnsConstants.MESSAGE_STRUCTURE, String.class).     if (structure == null) {         structure = getConfiguration().getMessageStructure().     }     return structure. }
false;;2;30;;Map<String, MessageAttributeValue> translateAttributes(Map<String, Object> headers, Exchange exchange) {     Map<String, MessageAttributeValue> result = new HashMap<>().     HeaderFilterStrategy headerFilterStrategy = getEndpoint().getHeaderFilterStrategy().     for (Entry<String, Object> entry : headers.entrySet()) {         // only put the message header which is not filtered into the message attribute         if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {             Object value = entry.getValue().             if (value instanceof String && !((String) value).isEmpty()) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("String").                 mav.withStringValue((String) value).                 result.put(entry.getKey(), mav).             } else if (value instanceof ByteBuffer) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("Binary").                 mav.withBinaryValue((ByteBuffer) value).                 result.put(entry.getKey(), mav).             } else if (value instanceof Date) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("String").                 mav.withStringValue(value.toString()).                 result.put(entry.getKey(), mav).             } else {                 // cannot translate the message header to message attribute value                 log.warn("Cannot put the message header key={}, value={} into Sns MessageAttribute", entry.getKey(), entry.getValue()).             }         }     }     return result. }
false;protected;0;3;;protected SnsConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (snsProducerToString == null) {         snsProducerToString = "SnsProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return snsProducerToString. }
false;public;0;4;;@Override public SnsEndpoint getEndpoint() {     return (SnsEndpoint) super.getEndpoint(). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
