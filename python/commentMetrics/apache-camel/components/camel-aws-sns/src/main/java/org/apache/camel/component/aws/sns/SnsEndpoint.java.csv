commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HeaderFilterStrategy getHeaderFilterStrategy() {     return headerFilterStrategy. }
true;public;1;3;/**  * To use a custom HeaderFilterStrategy to map headers to/from Camel.  */ ;/**  * To use a custom HeaderFilterStrategy to map headers to/from Camel.  */ public void setHeaderFilterStrategy(HeaderFilterStrategy strategy) {     this.headerFilterStrategy = strategy. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot receive messages from this endpoint"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new SnsProducer(this). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;62;;@Override public void doStart() throws Exception {     super.doStart().     snsClient = configuration.getAmazonSNSClient() != null ? configuration.getAmazonSNSClient() : createSNSClient().     // check the setting the headerFilterStrategy     if (headerFilterStrategy == null) {         headerFilterStrategy = new SnsHeaderFilterStrategy().     }     if (configuration.getTopicArn() == null) {         try {             String nextToken = null.             final String arnSuffix = ":" + configuration.getTopicName().             do {                 final ListTopicsResult response = snsClient.listTopics(nextToken).                 nextToken = response.getNextToken().                 for (final Topic topic : response.getTopics()) {                     if (topic.getTopicArn().endsWith(arnSuffix)) {                         configuration.setTopicArn(topic.getTopicArn()).                         break.                     }                 }             } while (nextToken != null).         } catch (final AmazonServiceException ase) {             log.trace("The list topics operation return the following error code {}", ase.getErrorCode()).             throw ase.         }     }     if (configuration.getTopicArn() == null) {         // creates a new topic, or returns the URL of an existing one         CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName()).         log.trace("Creating topic [{}] with request [{}]...", configuration.getTopicName(), request).         CreateTopicResult result = snsClient.createTopic(request).         configuration.setTopicArn(result.getTopicArn()).         log.trace("Topic created with Amazon resource name: {}", configuration.getTopicArn()).     }     if (ObjectHelper.isNotEmpty(configuration.getPolicy())) {         log.trace("Updating topic [{}] with policy [{}]", configuration.getTopicArn(), configuration.getPolicy()).         snsClient.setTopicAttributes(new SetTopicAttributesRequest(configuration.getTopicArn(), "Policy", configuration.getPolicy())).         log.trace("Topic policy updated").     }     if (configuration.isSubscribeSNStoSQS()) {         if (ObjectHelper.isNotEmpty(configuration.getAmazonSQSClient()) && ObjectHelper.isNotEmpty(configuration.getQueueUrl())) {             String subscriptionARN = Topics.subscribeQueue(snsClient, configuration.getAmazonSQSClient(), configuration.getTopicArn(), configuration.getQueueUrl()).             log.trace("Subscription of SQS Queue to SNS Topic done with Amazon resource name: {}", subscriptionARN).         } else {             throw new IllegalArgumentException("Using the SubscribeSNStoSQS option require both AmazonSQSClient and Queue URL options").         }     } }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAmazonSNSClient())) {         if (snsClient != null) {             snsClient.shutdown().         }     }     super.doStop(). }
false;public;0;3;;public SnsConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(SnsConfiguration configuration) {     this.configuration = configuration. }
false;public;1;3;;public void setSNSClient(AmazonSNS snsClient) {     this.snsClient = snsClient. }
false;public;0;3;;public AmazonSNS getSNSClient() {     return snsClient. }
true;;0;32;/**  * Provide the possibility to override this method for an mock implementation  *  * @return AmazonSNSClient  */ ;/**  * Provide the possibility to override this method for an mock implementation  *  * @return AmazonSNSClient  */ AmazonSNS createSNSClient() {     AmazonSNS client = null.     AmazonSNSClientBuilder clientBuilder = null.     ClientConfiguration clientConfiguration = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonSNSClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonSNSClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonSNSClientBuilder.standard().         } else {             clientBuilder = AmazonSNSClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).     }     client = clientBuilder.build().     return client. }
