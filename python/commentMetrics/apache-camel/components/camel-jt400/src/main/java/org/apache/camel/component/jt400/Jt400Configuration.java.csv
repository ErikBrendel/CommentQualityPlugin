commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Jt400Type getType() {     return type. }
true;public;1;3;/**  * Whether to work with data queues or remote program call  */ ;/**  * Whether to work with data queues or remote program call  */ public void setType(Jt400Type type) {     this.type = type. }
true;public;0;3;/**  * Returns the name of the AS/400 system.  */ ;/**  * Returns the name of the AS/400 system.  */ public String getSystemName() {     return systemName. }
false;public;1;3;;public void setSystemName(String systemName) {     this.systemName = systemName. }
true;public;0;3;/**  * Returns the ID of the AS/400 user.  */ ;/**  * Returns the ID of the AS/400 user.  */ public String getUserID() {     return userID. }
false;public;1;3;;public void setUserID(String userID) {     this.userID = userID. }
true;public;0;3;/**  * Returns the password of the AS/400 user.  */ ;/**  * Returns the password of the AS/400 user.  */ public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
true;public;0;3;/**  * Returns the fully qualified integrated file system path name of the  * target object of this endpoint.  */ ;/**  * Returns the fully qualified integrated file system path name of the  * target object of this endpoint.  */ public String getObjectPath() {     return objectPath. }
false;public;1;3;;public void setObjectPath(String objectPath) {     this.objectPath = objectPath. }
true;public;0;3;/**  * Returns the CCSID to use for the connection with the AS/400 system.  * Returns -1 if the CCSID to use is the default system CCSID.  */ ;// Options /**  * Returns the CCSID to use for the connection with the AS/400 system.  * Returns -1 if the CCSID to use is the default system CCSID.  */ public int getCssid() {     return ccsid. }
true;public;1;3;/**  * Sets the CCSID to use for the connection with the AS/400 system.  */ ;/**  * Sets the CCSID to use for the connection with the AS/400 system.  */ public void setCcsid(int ccsid) {     this.ccsid = (ccsid < 0) ? DEFAULT_SYSTEM_CCSID : ccsid. }
true;public;0;3;/**  * Returns the data format for sending messages.  */ ;/**  * Returns the data format for sending messages.  */ public Format getFormat() {     return format. }
true;public;1;4;/**  * Sets the data format for sending messages.  */ ;/**  * Sets the data format for sending messages.  */ public void setFormat(Format format) {     ObjectHelper.notNull(format, "format", this).     this.format = format. }
true;public;0;3;/**  * Returns whether AS/400 prompting is enabled in the environment running  * Camel.  */ ;/**  * Returns whether AS/400 prompting is enabled in the environment running  * Camel.  */ public boolean isGuiAvailable() {     return guiAvailable. }
true;public;1;3;/**  * Sets whether AS/400 prompting is enabled in the environment running  * Camel.  */ ;/**  * Sets whether AS/400 prompting is enabled in the environment running  * Camel.  */ public void setGuiAvailable(boolean guiAvailable) {     this.guiAvailable = guiAvailable. }
false;public;0;3;;public int getCcsid() {     return ccsid. }
false;public;0;3;;public boolean isKeyed() {     return keyed. }
true;public;1;3;/**  * Whether to use keyed or non-keyed data queues.  */ ;/**  * Whether to use keyed or non-keyed data queues.  */ public void setKeyed(boolean keyed) {     this.keyed = keyed. }
false;public;0;3;;public String getSearchKey() {     return searchKey. }
true;public;1;3;/**  * Search key for keyed data queues.  */ ;/**  * Search key for keyed data queues.  */ public void setSearchKey(String searchKey) {     this.searchKey = searchKey. }
false;public;0;3;;public SearchType getSearchType() {     return searchType. }
true;public;1;3;/**  * Search type such as EQ for equal etc.  */ ;/**  * Search type such as EQ for equal etc.  */ public void setSearchType(SearchType searchType) {     this.searchType = searchType. }
false;public;0;3;;public Integer[] getOutputFieldsIdxArray() {     return outputFieldsIdxArray. }
false;public;0;3;;public boolean isSecured() {     return secured. }
true;public;1;3;/**  * Whether connections to AS/400 are secured with SSL.  */ ;/**  * Whether connections to AS/400 are secured with SSL.  */ public void setSecured(boolean secured) {     this.secured = secured. }
true;public;1;3;/**  * Specifies which fields (program parameters) are output parameters.  */ ;/**  * Specifies which fields (program parameters) are output parameters.  */ public void setOutputFieldsIdxArray(Integer[] outputFieldsIdxArray) {     this.outputFieldsIdxArray = outputFieldsIdxArray. }
false;public;0;3;;public Integer[] getOutputFieldsLengthArray() {     return outputFieldsLengthArray. }
true;public;1;3;/**  * Specifies the fields (program parameters) length as in the AS/400 program definition.  */ ;/**  * Specifies the fields (program parameters) length as in the AS/400 program definition.  */ public void setOutputFieldsLengthArray(Integer[] outputFieldsLengthArray) {     this.outputFieldsLengthArray = outputFieldsLengthArray. }
false;public;0;3;;public int getReadTimeout() {     return readTimeout. }
true;public;1;3;/**  * Timeout in millis the consumer will wait while trying to read a new message of the data queue.  */ ;/**  * Timeout in millis the consumer will wait while trying to read a new message of the data queue.  */ public void setReadTimeout(int readTimeout) {     this.readTimeout = readTimeout. }
false;public;0;3;;public String getProcedureName() {     return procedureName. }
true;public;1;3;/**  * Procedure name from a service program to call  */ ;/**  * Procedure name from a service program to call  */ public void setProcedureName(String procedureName) {     this.procedureName = procedureName. }
false;public;1;10;;public void setOutputFieldsIdx(String outputFieldsIdx) {     if (outputFieldsIdx != null) {         String[] outputArray = outputFieldsIdx.split(",").         outputFieldsIdxArray = new Integer[outputArray.length].         for (int i = 0. i < outputArray.length. i++) {             String str = outputArray[i].             outputFieldsIdxArray[i] = Integer.parseInt(str).         }     } }
false;public;1;10;;public void setFieldsLength(String fieldsLength) {     if (fieldsLength != null) {         String[] outputArray = fieldsLength.split(",").         outputFieldsLengthArray = new Integer[outputArray.length].         for (int i = 0. i < outputArray.length. i++) {             String str = outputArray[i].             outputFieldsLengthArray[i] = Integer.parseInt(str).         }     } }
true;public;0;28;/**  * Obtains an {@code AS400} object that connects to this endpoint. Since  * these objects represent limited resources, clients have the  * responsibility of {@link #releaseConnection(AS400) releasing them} when  * done.  *  * @return an {@code AS400} object that connects to this endpoint  */ ;// AS400 connections /**  * Obtains an {@code AS400} object that connects to this endpoint. Since  * these objects represent limited resources, clients have the  * responsibility of {@link #releaseConnection(AS400) releasing them} when  * done.  *  * @return an {@code AS400} object that connects to this endpoint  */ public AS400 getConnection() {     AS400 system = null.     try {         if (LOG.isDebugEnabled()) {             LOG.debug("Getting an AS400 object for '{}' from {}.", systemName + '/' + userID, connectionPool).         }         if (isSecured()) {             system = connectionPool.getSecureConnection(systemName, userID, password).         } else {             system = connectionPool.getConnection(systemName, userID, password).         }         if (ccsid != DEFAULT_SYSTEM_CCSID) {             system.setCcsid(ccsid).         }         try {             system.setGuiAvailable(guiAvailable).         } catch (PropertyVetoException e) {             LOG.warn("Failed to disable AS/400 prompting in the environment running Camel. This exception will be ignored.", e).         }         // Not null here.         return system.     } catch (ConnectionPoolException e) {         throw new RuntimeCamelException(String.format("Unable to obtain an AS/400 connection for system name '%s' and user ID '%s'", systemName, userID), e).     } catch (PropertyVetoException e) {         throw new RuntimeCamelException("Unable to set the CSSID to use with " + system, e).     } }
true;public;1;4;/**  * Releases a previously obtained {@code AS400} object from use.  *  * @param connection a previously obtained {@code AS400} object to release  */ ;/**  * Releases a previously obtained {@code AS400} object from use.  *  * @param connection a previously obtained {@code AS400} object to release  */ public void releaseConnection(AS400 connection) {     ObjectHelper.notNull(connection, "connection", this).     connectionPool.returnConnectionToPool(connection). }
