commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Jt400Endpoint getEndpoint() {     return (Jt400Endpoint) super.getEndpoint(). }
false;protected;0;10;;@Override protected int poll() throws Exception {     Exchange exchange = receive(getEndpoint().getReadTimeout()).     if (exchange != null) {         getProcessor().process(exchange).         return 1.     } else {         return 0.     } }
false;protected;0;5;;@Override protected void doStart() throws Exception {     queueService.start().     super.doStart(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     super.doStop().     queueService.stop(). }
false;public;0;5;;@Deprecated public Exchange receive() {     // -1 to indicate a blocking read from data queue     return receive(-1). }
false;public;0;4;;@Deprecated public Exchange receiveNoWait() {     return receive(0). }
true;public;1;12;/**  * Receives an entry from a data queue and returns an {@link Exchange} to  * send this data If the endpoint's format is set to {@link org.apache.camel.component.jt400.Jt400Configuration.Format#binary},  * the data queue entry's data will be received/sent as a  * <code>byte[]</code>. If the endpoint's format is set to  * {@link org.apache.camel.component.jt400.Jt400Configuration.Format#text}, the data queue entry's data will be received/sent as  * a <code>String</code>.  * <p/>  * The following message headers may be set by the receiver  * <ul>  * <li>SENDER_INFORMATION: The Sender Information from the Data Queue</li>  * <li>KEY: The message key if the endpoint is configured to connect to a <code>KeyedDataQueue</code></li>  * </ul>  *  * @param timeout time to wait when reading from data queue. A value of -1  *                indicates a blocking read.  */ ;/**  * Receives an entry from a data queue and returns an {@link Exchange} to  * send this data If the endpoint's format is set to {@link org.apache.camel.component.jt400.Jt400Configuration.Format#binary},  * the data queue entry's data will be received/sent as a  * <code>byte[]</code>. If the endpoint's format is set to  * {@link org.apache.camel.component.jt400.Jt400Configuration.Format#text}, the data queue entry's data will be received/sent as  * a <code>String</code>.  * <p/>  * The following message headers may be set by the receiver  * <ul>  * <li>SENDER_INFORMATION: The Sender Information from the Data Queue</li>  * <li>KEY: The message key if the endpoint is configured to connect to a <code>KeyedDataQueue</code></li>  * </ul>  *  * @param timeout time to wait when reading from data queue. A value of -1  *                indicates a blocking read.  */ public Exchange receive(long timeout) {     BaseDataQueue queue = queueService.getDataQueue().     try {         if (getEndpoint().isKeyed()) {             return receive((KeyedDataQueue) queue, timeout).         } else {             return receive((DataQueue) queue, timeout).         }     } catch (Exception e) {         throw new RuntimeCamelException("Unable to read from data queue: " + queue.getName(), e).     } }
false;private;2;23;;private Exchange receive(DataQueue queue, long timeout) throws Exception {     DataQueueEntry entry.     if (timeout >= 0) {         int seconds = (int) timeout / 1000.         log.trace("Reading from data queue: {} with {} seconds timeout", queue.getName(), seconds).         entry = queue.read(seconds).     } else {         log.trace("Reading from data queue: {} with no timeout", queue.getName()).         entry = queue.read(-1).     }     Exchange exchange = getEndpoint().createExchange().     if (entry != null) {         exchange.getIn().setHeader(Jt400Endpoint.SENDER_INFORMATION, entry.getSenderInformation()).         if (getEndpoint().getFormat() == Jt400Configuration.Format.binary) {             exchange.getIn().setBody(entry.getData()).         } else {             exchange.getIn().setBody(entry.getString()).         }         return exchange.     }     return null. }
false;private;2;27;;private Exchange receive(KeyedDataQueue queue, long timeout) throws Exception {     String key = getEndpoint().getSearchKey().     String searchType = getEndpoint().getSearchType().name().     KeyedDataQueueEntry entry.     if (timeout >= 0) {         int seconds = (int) timeout / 1000.         log.trace("Reading from data queue: {} with {} seconds timeout", queue.getName(), seconds).         entry = queue.read(key, seconds, searchType).     } else {         log.trace("Reading from data queue: {} with no timeout", queue.getName()).         entry = queue.read(key, -1, searchType).     }     Exchange exchange = getEndpoint().createExchange().     if (entry != null) {         exchange.getIn().setHeader(Jt400Endpoint.SENDER_INFORMATION, entry.getSenderInformation()).         if (getEndpoint().getFormat() == Jt400Configuration.Format.binary) {             exchange.getIn().setBody(entry.getData()).             exchange.getIn().setHeader(Jt400Endpoint.KEY, entry.getKey()).         } else {             exchange.getIn().setBody(entry.getString()).             exchange.getIn().setHeader(Jt400Endpoint.KEY, entry.getKeyString()).         }         return exchange.     }     return null. }
