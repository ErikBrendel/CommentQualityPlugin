commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void run() {     Exchange exchange = endpoint.getReceivedExchanges().get(0).     char[] secondParameter = new char[512].     Arrays.fill(secondParameter, ' ').     String[] expectedBody = new String[] { "1234", new String(secondParameter), "01" }.     Object actualBody = exchange.getIn().getBody().     assertNotNull(actualBody).     assertTrue(actualBody.getClass().isArray()).     String[] actualBodyTyped = (String[]) actualBody.     for (int i = 0. i < expectedBody.length. i++) {         assertEquals(expectedBody[i], actualBodyTyped[i]).     } }
false;public;0;28;;@Test public void testBasicTest() throws Exception {     if (SYSTEM != null) {         final MockEndpoint endpoint = getMockEndpoint("mock:a").         endpoint.setExpectedMessageCount(1).         Runnable runnable = new Runnable() {              public void run() {                 Exchange exchange = endpoint.getReceivedExchanges().get(0).                 char[] secondParameter = new char[512].                 Arrays.fill(secondParameter, ' ').                 String[] expectedBody = new String[] { "1234", new String(secondParameter), "01" }.                 Object actualBody = exchange.getIn().getBody().                 assertNotNull(actualBody).                 assertTrue(actualBody.getClass().isArray()).                 String[] actualBodyTyped = (String[]) actualBody.                 for (int i = 0. i < expectedBody.length. i++) {                     assertEquals(expectedBody[i], actualBodyTyped[i]).                 }             }         }.         endpoint.expects(runnable).         sendBody("direct:a", new String[] { "1234", "", "" }).         endpoint.assertIsSatisfied().     } }
false;public;0;9;;@Override public void configure() throws Exception {     if (SYSTEM != null) {         String uri = String.format("jt400://%s:%s@%s/QSYS.LIB/%s.LIB/%s.pgm?outputFieldsIdx=%s&fieldsLength=%s", USER, PASSWORD, SYSTEM, LIBRARY, PGM, OUTPUT_FIELDS, FIELDS_LENGTH).         from("direct:a").to(uri).to("mock:a").     } }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             if (SYSTEM != null) {                 String uri = String.format("jt400://%s:%s@%s/QSYS.LIB/%s.LIB/%s.pgm?outputFieldsIdx=%s&fieldsLength=%s", USER, PASSWORD, SYSTEM, LIBRARY, PGM, OUTPUT_FIELDS, FIELDS_LENGTH).                 from("direct:a").to(uri).to("mock:a").             }         }     }. }
