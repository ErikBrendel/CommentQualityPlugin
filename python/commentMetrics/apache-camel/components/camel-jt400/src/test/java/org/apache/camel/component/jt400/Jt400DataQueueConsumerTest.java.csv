# id;timestamp;commentText;codeText;commentWords;codeWords
Jt400DataQueueConsumerTest -> @Test     public void testReceive() throws InterruptedException;1294937955;Tests whether receive() blocks indefinitely.;@Test_    public void testReceive() throws InterruptedException {_        new Thread(new Runnable() {_            public void run() {_                consumer.receive()__                receiveFlag = true__            }_        }).start()___        final long startTime = System.currentTimeMillis()__        while (!receiveFlag) {_            if ((System.currentTimeMillis() - startTime) > BLOCKING_THRESHOLD) {_                _                return__            }_            Thread.sleep(50L)__        }_        assertTrue("Method receive() has returned from call.", false)__    };tests,whether,receive,blocks,indefinitely;test,public,void,test,receive,throws,interrupted,exception,new,thread,new,runnable,public,void,run,consumer,receive,receive,flag,true,start,final,long,start,time,system,current,time,millis,while,receive,flag,if,system,current,time,millis,start,time,return,thread,sleep,50l,assert,true,method,receive,has,returned,from,call,false
Jt400DataQueueConsumerTest -> @Test     public void testReceive() throws InterruptedException;1297975937;Tests whether receive() blocks indefinitely.;@Test_    public void testReceive() throws InterruptedException {_        new Thread(new Runnable() {_            public void run() {_                consumer.receive()__                receiveFlag = true__            }_        }).start()___        final long startTime = System.currentTimeMillis()__        while (!receiveFlag) {_            if ((System.currentTimeMillis() - startTime) > BLOCKING_THRESHOLD) {_                _                return__            }_            Thread.sleep(50L)__        }_        assertTrue("Method receive() has returned from call.", false)__    };tests,whether,receive,blocks,indefinitely;test,public,void,test,receive,throws,interrupted,exception,new,thread,new,runnable,public,void,run,consumer,receive,receive,flag,true,start,final,long,start,time,system,current,time,millis,while,receive,flag,if,system,current,time,millis,start,time,return,thread,sleep,50l,assert,true,method,receive,has,returned,from,call,false
Jt400DataQueueConsumerTest -> @Test     public void testReceive() throws InterruptedException;1324569391;Tests whether receive() blocks indefinitely.;@Test_    public void testReceive() throws InterruptedException {_        new Thread(new Runnable() {_            public void run() {_                consumer.receive()__                receiveFlag = true__            }_        }).start()___        final long startTime = System.currentTimeMillis()__        while (!receiveFlag) {_            if ((System.currentTimeMillis() - startTime) > BLOCKING_THRESHOLD) {_                _                return__            }_            Thread.sleep(50L)__        }_        assertTrue("Method receive() has returned from call.", false)__    };tests,whether,receive,blocks,indefinitely;test,public,void,test,receive,throws,interrupted,exception,new,thread,new,runnable,public,void,run,consumer,receive,receive,flag,true,start,final,long,start,time,system,current,time,millis,while,receive,flag,if,system,current,time,millis,start,time,return,thread,sleep,50l,assert,true,method,receive,has,returned,from,call,false
Jt400DataQueueConsumerTest -> @Test     public void testReceive() throws InterruptedException;1338889418;Tests whether receive() blocks indefinitely.;@Test_    public void testReceive() throws InterruptedException {_        new Thread(new Runnable() {_            public void run() {_                consumer.receive()__                receiveFlag = true__            }_        }).start()___        final long startTime = System.currentTimeMillis()__        while (!receiveFlag) {_            if ((System.currentTimeMillis() - startTime) > BLOCKING_THRESHOLD) {_                _                return__            }_            Thread.sleep(50L)__        }_        assertTrue("Method receive() has returned from call.", false)__    };tests,whether,receive,blocks,indefinitely;test,public,void,test,receive,throws,interrupted,exception,new,thread,new,runnable,public,void,run,consumer,receive,receive,flag,true,start,final,long,start,time,system,current,time,millis,while,receive,flag,if,system,current,time,millis,start,time,return,thread,sleep,50l,assert,true,method,receive,has,returned,from,call,false
Jt400DataQueueConsumerTest -> @Test     public void testReceive() throws InterruptedException;1535627650;Tests whether receive() blocks indefinitely.;@Test_    public void testReceive() throws InterruptedException {_        new Thread(new Runnable() {_            public void run() {_                consumer.receive()__                receiveFlag = true__            }_        }).start()___        final long startTime = System.currentTimeMillis()__        while (!receiveFlag) {_            if ((System.currentTimeMillis() - startTime) > BLOCKING_THRESHOLD) {_                _                return__            }_            Thread.sleep(50L)__        }_        assertTrue("Method receive() has returned from call.", false)__    };tests,whether,receive,blocks,indefinitely;test,public,void,test,receive,throws,interrupted,exception,new,thread,new,runnable,public,void,run,consumer,receive,receive,flag,true,start,final,long,start,time,system,current,time,millis,while,receive,flag,if,system,current,time,millis,start,time,return,thread,sleep,50l,assert,true,method,receive,has,returned,from,call,false
Jt400DataQueueConsumerTest -> @Test     public void testReceive() throws InterruptedException;1537290824;Tests whether receive() blocks indefinitely.;@Test_    public void testReceive() throws InterruptedException {_        new Thread(new Runnable() {_            public void run() {_                consumer.receive()__                receiveFlag = true__            }_        }).start()___        final long startTime = System.currentTimeMillis()__        while (!receiveFlag) {_            if ((System.currentTimeMillis() - startTime) > BLOCKING_THRESHOLD) {_                _                return__            }_            Thread.sleep(50L)__        }_        assertTrue("Method receive() has returned from call.", false)__    };tests,whether,receive,blocks,indefinitely;test,public,void,test,receive,throws,interrupted,exception,new,thread,new,runnable,public,void,run,consumer,receive,receive,flag,true,start,final,long,start,time,system,current,time,millis,while,receive,flag,if,system,current,time,millis,start,time,return,thread,sleep,50l,assert,true,method,receive,has,returned,from,call,false
Jt400DataQueueConsumerTest -> @Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)     public void testReceiveLong();1294937955;Tests whether <code>receive(long)</code> honours the <code>timeout</code> parameter.;@Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)_    public void testReceiveLong() {_        consumer.receive(TIMEOUT_VALUE)__    };tests,whether,code,receive,long,code,honours,the,code,timeout,code,parameter;test,timeout,public,void,test,receive,long,consumer,receive
Jt400DataQueueConsumerTest -> @Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)     public void testReceiveLong();1297975937;Tests whether <code>receive(long)</code> honours the <code>timeout</code> parameter.;@Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)_    public void testReceiveLong() {_        consumer.receive(TIMEOUT_VALUE)__    };tests,whether,code,receive,long,code,honours,the,code,timeout,code,parameter;test,timeout,public,void,test,receive,long,consumer,receive
Jt400DataQueueConsumerTest -> @Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)     public void testReceiveLong();1324569391;Tests whether <code>receive(long)</code> honours the <code>timeout</code> parameter.;@Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)_    public void testReceiveLong() {_        consumer.receive(TIMEOUT_VALUE)__    };tests,whether,code,receive,long,code,honours,the,code,timeout,code,parameter;test,timeout,public,void,test,receive,long,consumer,receive
Jt400DataQueueConsumerTest -> @Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)     public void testReceiveLong();1338889418;Tests whether <code>receive(long)</code> honours the <code>timeout</code> parameter.;@Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)_    public void testReceiveLong() {_        consumer.receive(TIMEOUT_VALUE)__    };tests,whether,code,receive,long,code,honours,the,code,timeout,code,parameter;test,timeout,public,void,test,receive,long,consumer,receive
Jt400DataQueueConsumerTest -> @Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)     public void testReceiveLong();1535627650;Tests whether <code>receive(long)</code> honours the <code>timeout</code> parameter.;@Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)_    public void testReceiveLong() {_        consumer.receive(TIMEOUT_VALUE)__    };tests,whether,code,receive,long,code,honours,the,code,timeout,code,parameter;test,timeout,public,void,test,receive,long,consumer,receive
Jt400DataQueueConsumerTest -> @Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)     public void testReceiveLong();1537290824;Tests whether <code>receive(long)</code> honours the <code>timeout</code> parameter.;@Test(timeout = TIMEOUT_VALUE + TIMEOUT_TOLERANCE)_    public void testReceiveLong() {_        consumer.receive(TIMEOUT_VALUE)__    };tests,whether,code,receive,long,code,honours,the,code,timeout,code,parameter;test,timeout,public,void,test,receive,long,consumer,receive
