commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@SuppressWarnings("unchecked") @Test @Override public void testJdbcRoutes() throws Exception {     // first we create our exchange using the endpoint     Endpoint endpoint = context.getEndpoint("direct:hello").     // repeat the test often enough to make sure preserved ordering is not a fluke     for (int i = 0. i < 10. i++) {         Exchange exchange = endpoint.createExchange().         // then we set the SQL on the in body         exchange.getIn().setBody("select * from customer order by ID").         // now we send the exchange to the endpoint, and receives the response from Camel         Exchange out = template.send(endpoint, exchange).         // assertions of the response         assertNotNull(out).         assertNotNull(out.getOut()).         List<Map<String, Object>> rowList = out.getOut().getBody(List.class).         assertNotNull("out body could not be converted to a List - was: " + out.getOut().getBody(), rowList).         assertEquals(3, rowList.size()).         Map<String, Object> row = rowList.get(0).         assertTrue("ordering not preserved " + row.keySet(), isOrdered(row.keySet())).         row = rowList.get(1).         assertTrue("ordering not preserved " + row.keySet(), isOrdered(row.keySet())).     } }
true;private,static;1;9;/**  * @param keySet (should have 2 items "ID" & "NAME")  * @return true if "ID" comes before "NAME", false otherwise  */ ;/**  * @param keySet (should have 2 items "ID" & "NAME")  * @return true if "ID" comes before "NAME", false otherwise  */ private static boolean isOrdered(Set<String> keySet) {     final String msg = "isOrdered() relies on \"ID\" & \"NAME\" being the only two fields".     assertTrue(msg, keySet.contains("ID")).     assertTrue(msg, keySet.contains("NAME")).     assertEquals(msg, 2, keySet.size()).     final Iterator<String> iter = keySet.iterator().     return "ID".equals(iter.next()) && "NAME".equals(iter.next()). }
