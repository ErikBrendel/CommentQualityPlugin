commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@SuppressWarnings("rawtypes") @Test public void testReadSize() throws Exception {     mock.expectedMessageCount(1).     template.sendBody("direct:start", "select * from customer").     assertMockEndpointsSatisfied().     List list = mock.getExchanges().get(0).getIn().getBody(ArrayList.class).     assertEquals(1, list.size()). }
false;public;0;26;;@SuppressWarnings("rawtypes") @Test public void testInsertCommit() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:resultTx").     mock.expectedMessageCount(2).     // insert 2 recs into table     template.sendBody("direct:startTx", "insert into customer values ('cust4', 'johnsmith')").     template.sendBody("direct:startTx", "insert into customer values ('cust5', 'hkesler')").     mock.assertIsSatisfied().     String body = mock.getExchanges().get(0).getIn().getBody(String.class).     assertNull(body).     // now test to see that they were inserted and committed properly     MockEndpoint mockTest = getMockEndpoint("mock:retrieve").     mockTest.expectedMessageCount(1).     template.sendBody("direct:retrieve", "select * from customer").     mockTest.assertIsSatisfied().     List list = mockTest.getExchanges().get(0).getIn().getBody(ArrayList.class).     // both records were committed     assertEquals(5, list.size()). }
false;public;0;10;;@Test public void testNoDataSourceInRegistry() throws Exception {     try {         template.sendBody("jdbc:xxx", "Hello World").         fail("Should have thrown a ResolveEndpointFailedException").     } catch (ResolveEndpointFailedException e) {         assertEquals("No bean could be found in the registry for: xxx of type: javax.sql.DataSource", e.getCause().getMessage()).     } }
false;public;0;12;;@Test public void testResettingAutoCommitOption() throws Exception {     Connection connection = db.getConnection().     assertTrue(connection.getAutoCommit()).     connection.close().     template.sendBody("direct:retrieve", "select * from customer").     connection = db.getConnection().     assertTrue(connection.getAutoCommit()).     connection.close(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").to("jdbc:testdb?readSize=1").to("mock:result").     from("direct:retrieve").to("jdbc:testdb").to("mock:retrieve").     from("direct:startTx").to("jdbc:testdb?transacted=true").to("mock:resultTx"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").to("jdbc:testdb?readSize=1").to("mock:result").             from("direct:retrieve").to("jdbc:testdb").to("mock:retrieve").             from("direct:startTx").to("jdbc:testdb?transacted=true").to("mock:resultTx").         }     }. }
