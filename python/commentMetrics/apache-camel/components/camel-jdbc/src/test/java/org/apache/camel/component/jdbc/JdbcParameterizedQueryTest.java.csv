commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testParameterizedQueryNoNames() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // The linkedHashMap values has different order in JDK7 and JDK8     // so I had to reduce the parameters size     Map<String, Object> jdbcParams = new HashMap<>().     jdbcParams.put("name", "jstrachan").     template.sendBodyAndHeaders("direct:start", "select * from customer where id = 'cust1' and name = ? order by ID", jdbcParams).     assertMockEndpointsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(1, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("jstrachan", row.get("NAME")). }
false;public;0;19;;@Test public void testParameterizedQuery() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Map<String, Object> jdbcParams = new HashMap<>().     jdbcParams.put("name", "jstrachan").     jdbcParams.put("id", "cust1").     template.sendBodyAndHeaders("direct:start", "select * from customer where id = :?id and name = :?name order by ID", jdbcParams).     assertMockEndpointsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(1, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("jstrachan", row.get("NAME")). }
false;public;0;23;;@Test public void testParameterizedQueryJdbcHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Map<String, Object> jdbcParams = new HashMap<>().     jdbcParams.put("id", "cust1").     jdbcParams.put("name", "jstrachan").     Map<String, Object> headers = new HashMap<>().     headers.put("id", "cust2").     // this header should take precedence so we will not get cust2     headers.put(JdbcConstants.JDBC_PARAMETERS, jdbcParams).     template.sendBodyAndHeaders("direct:start", "select * from customer where id = :?id and name = :?name order by ID", headers).     assertMockEndpointsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(1, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("jstrachan", row.get("NAME")). }
false;public;0;9;;public void configure() {     getContext().setUseBreadcrumb(false).     getContext().getComponent("jdbc", JdbcComponent.class).setDataSource(db).     from("direct:start").to("jdbc:testdb?useHeadersAsParameters=true").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().setUseBreadcrumb(false).             getContext().getComponent("jdbc", JdbcComponent.class).setDataSource(db).             from("direct:start").to("jdbc:testdb?useHeadersAsParameters=true").to("mock:result").         }     }. }
