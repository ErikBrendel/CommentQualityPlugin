commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@SuppressWarnings({ "unchecked" }) @Test public void testOutputTypeSelectList() throws Exception {     mock.expectedMessageCount(1).     template.sendBody("direct:start", "select * from customer").     assertMockEndpointsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(3, received.size()).     Map<String, Object> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("cust1", row.get("ID")).     assertEquals("jstrachan", row.get("NAME")).     row = assertIsInstanceOf(Map.class, received.get(1)).     assertEquals("cust2", row.get("ID")).     assertEquals("nsandhu", row.get("NAME")). }
false;public;0;3;;public void configure() throws Exception {     from("direct:start").to("jdbc:testdb?outputType=SelectList").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").to("jdbc:testdb?outputType=SelectList").to("mock:result").         }     }. }
