commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;30;;@SuppressWarnings("unchecked") protected void testRetrieveGeneratedKeys(String query, Map<String, Object> parameters) throws Exception {     // first we create our exchange using the endpoint     Endpoint endpoint = context.getEndpoint("direct:hello").     Exchange exchange = endpoint.createExchange().     // then we set the SQL on the in body and add possible parameters     exchange.getIn().setBody(query).     exchange.getIn().setHeader(JdbcConstants.JDBC_RETRIEVE_GENERATED_KEYS, true).     setHeaders(exchange, parameters).     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     // assertions of the response     assertNotNull(out).     assertNotNull(out.getOut()).     assertNotNull(out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA)).     assertNotNull(out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT)).     List<Map<String, Object>> generatedKeys = out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA, List.class).     assertNotNull("out body could not be converted to an ArrayList - was: " + out.getOut().getBody(), generatedKeys).     assertEquals(1, generatedKeys.size()).     Map<String, Object> row = generatedKeys.get(0).     assertEquals("auto increment value should be 2", BigDecimal.valueOf(2), row.get("1")).     assertEquals("generated keys row count should be one", 1, out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT)). }
false;protected;1;3;;protected void testRetrieveGeneratedKeys(String query) throws Exception {     testRetrieveGeneratedKeys(query, null). }
false;protected;2;32;;@SuppressWarnings("unchecked") protected void testRetrieveGeneratedKeysWithStringGeneratedColumns(String query, Map<String, Object> parameters) throws Exception {     // first we create our exchange using the endpoint     Endpoint endpoint = context.getEndpoint("direct:hello").     Exchange exchange = endpoint.createExchange().     // then we set the SQL on the in body and add possible parameters     exchange.getIn().setBody(query).     exchange.getIn().setHeader(JdbcConstants.JDBC_RETRIEVE_GENERATED_KEYS, true).     exchange.getIn().setHeader(JdbcConstants.JDBC_GENERATED_COLUMNS, new String[] { "ID" }).     setHeaders(exchange, parameters).     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     // assertions of the response     assertNotNull(out).     assertNotNull(out.getOut()).     assertNotNull(out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA)).     assertNotNull(out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT)).     List<Map<String, Object>> generatedKeys = out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA, List.class).     assertNotNull("out body could not be converted to an ArrayList - was: " + out.getOut().getBody(), generatedKeys).     assertEquals(1, generatedKeys.size()).     Map<String, Object> row = generatedKeys.get(0).     assertEquals("auto increment value should be 2", BigDecimal.valueOf(2), row.get("1")).     assertEquals("generated keys row count should be one", 1, out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT)). }
false;protected;1;3;;protected void testRetrieveGeneratedKeysWithStringGeneratedColumns(String query) throws Exception {     testRetrieveGeneratedKeysWithStringGeneratedColumns(query, null). }
false;protected;2;32;;@SuppressWarnings("unchecked") protected void testRetrieveGeneratedKeysWithIntGeneratedColumns(String query, Map<String, Object> parameters) throws Exception {     // first we create our exchange using the endpoint     Endpoint endpoint = context.getEndpoint("direct:hello").     Exchange exchange = endpoint.createExchange().     // then we set the SQL on the in body and add possible parameters     exchange.getIn().setBody(query).     exchange.getIn().setHeader(JdbcConstants.JDBC_RETRIEVE_GENERATED_KEYS, true).     exchange.getIn().setHeader(JdbcConstants.JDBC_GENERATED_COLUMNS, new int[] { 1 }).     setHeaders(exchange, parameters).     // now we send the exchange to the endpoint, and receives the response from Camel     Exchange out = template.send(endpoint, exchange).     // assertions of the response     assertNotNull(out).     assertNotNull(out.getOut()).     assertNotNull(out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA)).     assertNotNull(out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT)).     List<Map<String, Object>> generatedKeys = out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_DATA, List.class).     assertNotNull("out body could not be converted to an ArrayList - was: " + out.getOut().getBody(), generatedKeys).     assertEquals(1, generatedKeys.size()).     Map<String, Object> row = generatedKeys.get(0).     assertEquals("auto increment value should be 2", BigDecimal.valueOf(2), row.get("1")).     assertEquals("generated keys row count should be one", 1, out.getOut().getHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT)). }
false;protected;1;3;;protected void testRetrieveGeneratedKeysWithIntGeneratedColumns(String query) throws Exception {     testRetrieveGeneratedKeysWithIntGeneratedColumns(query, null). }
false;protected;2;19;;protected void testGivenAnInvalidGeneratedColumnsHeaderThenAnExceptionIsThrown(String query, Map<String, Object> parameters) throws Exception {     // first we create our exchange using the endpoint     Endpoint endpoint = context.getEndpoint("direct:hello").     Exchange exchange = endpoint.createExchange().     // then we set the SQL on the in body and add possible parameters     exchange.getIn().setBody(query).     exchange.getIn().setHeader(JdbcConstants.JDBC_RETRIEVE_GENERATED_KEYS, true).     setHeaders(exchange, parameters).     // set wrong data type for generated columns     exchange.getIn().setHeader(JdbcConstants.JDBC_GENERATED_COLUMNS, new Object[] {}).     // now we send the exchange to the endpoint, and receives the response from Camel     template.send(endpoint, exchange).     assertTrue(exchange.isFailed()). }
false;protected;1;3;;protected void testGivenAnInvalidGeneratedColumnsHeaderThenAnExceptionIsThrown(String query) throws Exception {     testGivenAnInvalidGeneratedColumnsHeaderThenAnExceptionIsThrown(query, null). }
false;private;2;7;;private void setHeaders(Exchange exchange, Map<String, Object> parameters) {     if (parameters != null) {         for (Map.Entry<String, Object> parameter : parameters.entrySet()) {             exchange.getIn().setHeader(parameter.getKey(), parameter.getValue()).         }     } }
false;protected,abstract;0;2;;@Override protected abstract RouteBuilder createRouteBuilder() throws Exception.
