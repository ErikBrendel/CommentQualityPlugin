commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;39;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     DataSource dataSource.     String dataSourceRef.     if (this.dataSource != null) {         // prefer to use datasource set by setter         dataSource = this.dataSource.         dataSourceRef = "component".     } else {         DataSource target = CamelContextHelper.lookup(getCamelContext(), remaining, DataSource.class).         if (target == null && !isDefaultDataSourceName(remaining)) {             throw new NoSuchBeanException(remaining, DataSource.class.getName()).         } else if (target == null) {             // check if the registry contains a single instance of DataSource             Set<DataSource> dataSources = getCamelContext().getRegistry().findByType(DataSource.class).             if (dataSources.size() > 1) {                 throw new IllegalArgumentException("Multiple DataSources found in the registry and no explicit configuration provided").             } else if (dataSources.size() == 1) {                 target = dataSources.stream().findFirst().orElse(null).             }             if (target == null) {                 throw new IllegalArgumentException("No default DataSource found in the registry").             }             log.debug("Using default DataSource discovered from registry: {}", target).         }         dataSource = target.         dataSourceRef = remaining.     }     Map<String, Object> params = IntrospectionSupport.extractProperties(parameters, "statement.").     JdbcEndpoint jdbc = new JdbcEndpoint(uri, this, dataSource).     jdbc.setDataSourceName(dataSourceRef).     jdbc.setParameters(params).     setProperties(jdbc, parameters).     return jdbc. }
true;public;1;3;/**  * To use the {@link DataSource} instance instead of looking up the data source by name from the registry.  */ ;/**  * To use the {@link DataSource} instance instead of looking up the data source by name from the registry.  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
false;private,static;1;3;;private static boolean isDefaultDataSourceName(String remaining) {     return "dataSource".equalsIgnoreCase(remaining) || "default".equalsIgnoreCase(remaining). }
