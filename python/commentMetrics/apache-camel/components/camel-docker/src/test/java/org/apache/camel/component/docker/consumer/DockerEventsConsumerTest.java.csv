commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void setupMocks() {     Mockito.when(dockerClient.eventsCmd()).thenReturn(eventsCmd).     Mockito.when(eventsCmd.withSince(anyString())).thenReturn(eventsCmd). }
false;public;0;5;;@Test public void testEvent() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1). }
false;public;0;3;;public void configure() {     from("docker://events?host=" + host + "&port=" + port).log("${body}").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("docker://events?host=" + host + "&port=" + port).log("${body}").to("mock:result").         }     }. }
false;protected;0;14;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     dockerConfiguration = new DockerConfiguration().     dockerConfiguration.setParameters(DockerTestUtils.getDefaultParameters(host, port, dockerConfiguration)).     DockerComponent dockerComponent = new DockerComponent(dockerConfiguration).     dockerComponent.setClient(DockerTestUtils.getClientProfile(host, port, dockerConfiguration), dockerClient).     camelContext.addComponent("docker", dockerComponent).     setupMocks().     return camelContext. }
