commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void buildImageFromInputStreamHeaderTest() {     template.sendBodyAndHeaders("direct:in", inputStream, getHeaders()).     Mockito.verify(dockerClient, Mockito.times(1)).buildImageCmd(any(InputStream.class)).     Mockito.verify(mockObject, Mockito.times(1)).withQuiet(quiet).     Mockito.verify(mockObject, Mockito.times(1)).withNoCache(noCache).     Mockito.verify(mockObject, Mockito.times(1)).withRemove(remove).     Mockito.verify(mockObject, Mockito.times(1)).withTag(tag). }
false;public;0;12;;@Test public void buildImageFromFileHeaderTest() {     template.sendBodyAndHeaders("direct:in", file, getHeaders()).     Mockito.verify(dockerClient, Mockito.times(1)).buildImageCmd(any(File.class)).     Mockito.verify(mockObject, Mockito.times(1)).withQuiet(quiet).     Mockito.verify(mockObject, Mockito.times(1)).withNoCache(noCache).     Mockito.verify(mockObject, Mockito.times(1)).withRemove(remove).     Mockito.verify(mockObject, Mockito.times(1)).withTag(tag). }
false;protected;0;8;;@Override protected void setupMocks() {     Mockito.when(dockerClient.buildImageCmd(any(InputStream.class))).thenReturn(mockObject).     Mockito.when(dockerClient.buildImageCmd(any(File.class))).thenReturn(mockObject).     Mockito.when(mockObject.exec(any())).thenReturn(callback).     Mockito.when(callback.awaitImageId()).thenReturn(anyString()). }
false;protected;0;4;;@Override protected DockerOperation getOperation() {     return DockerOperation.BUILD_IMAGE. }
false;private;0;10;;private Map<String, Object> getHeaders() {     Map<String, Object> headers = getDefaultParameters().     headers.put(DockerConstants.DOCKER_REPOSITORY, repository).     headers.put(DockerConstants.DOCKER_QUIET, quiet).     headers.put(DockerConstants.DOCKER_NO_CACHE, noCache).     headers.put(DockerConstants.DOCKER_TAG, tag).     headers.put(DockerConstants.DOCKER_REMOVE, remove).     return headers. }
