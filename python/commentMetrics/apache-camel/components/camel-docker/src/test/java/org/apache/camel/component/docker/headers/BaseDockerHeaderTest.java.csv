commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:in").to("docker://" + getOperation().toString()). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").to("docker://" + getOperation().toString()).         }     }. }
false;public;0;4;;@Before public void setupTest() {     setupMocks(). }
false;protected;0;13;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     dockerConfiguration = new DockerConfiguration().     dockerConfiguration.setParameters(getDefaultParameters()).     DockerComponent dockerComponent = new DockerComponent(dockerConfiguration).     dockerComponent.setClient(getClientProfile(), dockerClient).     camelContext.addComponent("docker", dockerComponent).     return camelContext. }
false;protected;0;3;;protected String getHost() {     return "localhost". }
false;protected;0;3;;protected Integer getPort() {     return 5000. }
false;protected;0;3;;protected String getEmail() {     return "docker@camel.apache.org". }
false;protected;0;3;;protected Integer getMaxPerRouteConnections() {     return 100. }
false;protected;0;3;;protected Integer getMaxTotalConnections() {     return 100. }
false;protected;0;3;;protected String getServerAddress() {     return "https://index.docker.io/v1/". }
false;public;0;3;;public boolean isSecure() {     return false. }
false;public;0;3;;public boolean isTlsVerify() {     return false. }
false;public;0;3;;public boolean isSocket() {     return false. }
false;public;0;3;;public String getCmdExecFactory() {     return DockerConstants.DEFAULT_CMD_EXEC_FACTORY. }
false;public;0;3;;public T getMockObject() {     return mockObject. }
false;protected;0;14;;protected Map<String, Object> getDefaultParameters() {     Map<String, Object> parameters = new HashMap<>().     parameters.put(DockerConstants.DOCKER_HOST, getHost()).     parameters.put(DockerConstants.DOCKER_PORT, getPort()).     parameters.put(DockerConstants.DOCKER_EMAIL, getEmail()).     parameters.put(DockerConstants.DOCKER_SERVER_ADDRESS, getServerAddress()).     parameters.put(DockerConstants.DOCKER_MAX_PER_ROUTE_CONNECTIONS, getMaxPerRouteConnections()).     parameters.put(DockerConstants.DOCKER_MAX_TOTAL_CONNECTIONS, getMaxTotalConnections()).     parameters.put(DockerConstants.DOCKER_SECURE, isSecure()).     parameters.put(DockerConstants.DOCKER_TLSVERIFY, isTlsVerify()).     parameters.put(DockerConstants.DOCKER_SOCKET_ENABLED, isSocket()).     parameters.put(DockerConstants.DOCKER_CMD_EXEC_FACTORY, getCmdExecFactory()).     return parameters. }
false;protected;0;16;;protected DockerClientProfile getClientProfile() {     DockerClientProfile clientProfile = new DockerClientProfile().     clientProfile.setHost(getHost()).     clientProfile.setPort(getPort()).     clientProfile.setEmail(getEmail()).     clientProfile.setServerAddress(getServerAddress()).     clientProfile.setMaxPerRouteConnections(getMaxPerRouteConnections()).     clientProfile.setMaxTotalConnections(getMaxTotalConnections()).     clientProfile.setSecure(isSecure()).     clientProfile.setTlsVerify(isTlsVerify()).     clientProfile.setSocket(isSocket()).     clientProfile.setCmdExecFactory(getCmdExecFactory()).     return clientProfile. }
false;protected,abstract;0;1;;protected abstract void setupMocks().
false;protected,abstract;0;1;;protected abstract DockerOperation getOperation().
