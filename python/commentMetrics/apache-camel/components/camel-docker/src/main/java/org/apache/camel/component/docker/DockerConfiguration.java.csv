commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * Docker host  */ ;/**  * Docker host  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public Integer getPort() {     return port. }
true;public;1;3;/**  * Docker port  */ ;/**  * Docker port  */ public void setPort(Integer port) {     this.port = port. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * User name to authenticate with  */ ;/**  * User name to authenticate with  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Password to authenticate with  */ ;/**  * Password to authenticate with  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public String getEmail() {     return email. }
true;public;1;3;/**  * Email address associated with the user  */ ;/**  * Email address associated with the user  */ public void setEmail(String email) {     this.email = email. }
false;public;0;3;;public String getServerAddress() {     return serverAddress. }
true;public;1;3;/**  * Server address for docker registry.  */ ;/**  * Server address for docker registry.  */ public void setServerAddress(String serverAddress) {     this.serverAddress = serverAddress. }
false;public;0;3;;public Integer getRequestTimeout() {     return requestTimeout. }
true;public;1;3;/**  * Request timeout for response (in seconds)  */ ;/**  * Request timeout for response (in seconds)  */ public void setRequestTimeout(Integer requestTimeout) {     this.requestTimeout = requestTimeout. }
false;public;0;3;;public boolean isSecure() {     return secure. }
true;public;1;3;/**  * Use HTTPS communication  */ ;/**  * Use HTTPS communication  */ public void setSecure(boolean secure) {     this.secure = secure. }
false;public;0;3;;public String getCertPath() {     return certPath. }
true;public;1;3;/**  * Location containing the SSL certificate chain  */ ;/**  * Location containing the SSL certificate chain  */ public void setCertPath(String certPath) {     this.certPath = certPath. }
false;public;0;3;;public Integer getMaxTotalConnections() {     return maxTotalConnections. }
true;public;1;3;/**  * Maximum total connections  */ ;/**  * Maximum total connections  */ public void setMaxTotalConnections(Integer maxTotalConnections) {     this.maxTotalConnections = maxTotalConnections. }
false;public;0;3;;public Integer getMaxPerRouteConnections() {     return maxPerRouteConnections. }
true;public;1;3;/**  * Maximum route connections  */ ;/**  * Maximum route connections  */ public void setMaxPerRouteConnections(Integer maxPerRouteConnections) {     this.maxPerRouteConnections = maxPerRouteConnections. }
false;public;0;3;;public boolean isLoggingFilterEnabled() {     return loggingFilter. }
true;public;1;3;/**  * Whether to use logging filter  */ ;/**  * Whether to use logging filter  */ public void setLoggingFilter(boolean loggingFilterEnabled) {     this.loggingFilter = loggingFilterEnabled. }
false;public;0;3;;public boolean isFollowRedirectFilterEnabled() {     return followRedirectFilter. }
true;public;1;3;/**  * Whether to follow redirect filter  */ ;/**  * Whether to follow redirect filter  */ public void setFollowRedirectFilter(boolean followRedirectFilterEnabled) {     this.followRedirectFilter = followRedirectFilterEnabled. }
false;public;0;3;;public Map<String, Object> getParameters() {     return parameters. }
true;public;1;3;/**  * Additional configuration parameters as key/value pairs  */ ;/**  * Additional configuration parameters as key/value pairs  */ public void setParameters(Map<String, Object> parameters) {     this.parameters = parameters. }
false;public;0;3;;public DockerOperation getOperation() {     return operation. }
true;public;1;3;/**  * Which operation to use  */ ;/**  * Which operation to use  */ public void setOperation(DockerOperation operation) {     this.operation = operation. }
false;public;0;3;;public boolean isTlsVerify() {     return tlsVerify. }
true;public;1;3;/**  * Check TLS  */ ;/**  * Check TLS  */ public void setTlsVerify(boolean tlsVerify) {     this.tlsVerify = tlsVerify. }
false;public;0;3;;public boolean isSocket() {     return socket. }
true;public;1;3;/**  * Socket connection mode  */ ;/**  * Socket connection mode  */ public void setSocket(boolean socket) {     this.socket = socket. }
false;public;0;3;;public String getCmdExecFactory() {     return cmdExecFactory. }
true;public;1;3;/**  * The fully qualified class name of the DockerCmdExecFactory implementation to use  */ ;/**  * The fully qualified class name of the DockerCmdExecFactory implementation to use  */ public void setCmdExecFactory(String cmdExecFactory) {     this.cmdExecFactory = cmdExecFactory. }
false;public;0;7;;public DockerConfiguration copy() {     try {         return (DockerConfiguration) clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
