commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;14;/**  * Transforms a Docker Component header value to its analogous URI  * parameter  *  * @param name  * @return  */ ;/**  * Transforms a Docker Component header value to its analogous URI  * parameter  *  * @param name  * @return  */ public static String transformFromHeaderName(String name) {     StringHelper.notEmpty(name, "name").     StringBuilder formattedName = new StringBuilder().     String nameSubstring = name.substring(DockerConstants.DOCKER_PREFIX.length()).     if (nameSubstring.length() > 0) {         formattedName.append(nameSubstring.substring(0, 1).toLowerCase()).         formattedName.append(nameSubstring.substring(1)).     }     return formattedName.toString(). }
true;public,static;4;3;/**  * Attempts to locate a given property name within a URI parameter or the  * message header. A found value in a message header takes precedence over a  * URI parameter.  *  * @param name  * @param configuration  * @param message  * @param clazz  * @return  */ ;/**  * Attempts to locate a given property name within a URI parameter or the  * message header. A found value in a message header takes precedence over a  * URI parameter.  *  * @param name  * @param configuration  * @param message  * @param clazz  * @return  */ public static <T> T getProperty(String name, DockerConfiguration configuration, Message message, Class<T> clazz) {     return getProperty(name, configuration, message, clazz, null). }
true;public,static;5;30;/**  * Attempts to locate a given property name within a URI parameter or the  * message header. A found value in a message header takes precedence over a  * URI parameter. Returns a default value if given  *  * @param name  * @param configuration  * @param message  * @param clazz  * @param defaultValue  * @return  */ ;/**  * Attempts to locate a given property name within a URI parameter or the  * message header. A found value in a message header takes precedence over a  * URI parameter. Returns a default value if given  *  * @param name  * @param configuration  * @param message  * @param clazz  * @param defaultValue  * @return  */ @SuppressWarnings("unchecked") public static <T> T getProperty(String name, DockerConfiguration configuration, Message message, Class<T> clazz, T defaultValue) {     if (message != null) {         T headerProperty = message.getHeader(name, clazz).         if (headerProperty != null) {             return headerProperty.         }     }     Object prop = configuration.getParameters().get(transformFromHeaderName(name)).     if (prop != null) {         if (prop.getClass().isAssignableFrom(clazz)) {             return (T) prop.         } else if (Integer.class == clazz) {             return (T) Integer.valueOf((String) prop).         } else if (Boolean.class == clazz) {             return (T) BooleanUtils.toBooleanObject((String) prop, "true", "false", "null").         }     } else if (defaultValue != null) {         return defaultValue.     }     return null. }
true;public,static;3;26;/**  * Attempts to locate a given property which is an array by name within a  * URI parameter or the message header. A found value in a message header  * takes precedence over a URI parameter.  *  * @param name  * @param message  * @param clazz  * @return  */ ;/**  * Attempts to locate a given property which is an array by name within a  * URI parameter or the message header. A found value in a message header  * takes precedence over a URI parameter.  *  * @param name  * @param message  * @param clazz  * @return  */ @SuppressWarnings("unchecked") public static <T> T[] getArrayProperty(String name, Message message, Class<T> clazz) {     if (message != null) {         Object header = message.getHeader(name).         if (header != null) {             if (header.getClass().isAssignableFrom(clazz)) {                 T[] headerArray = (T[]) Array.newInstance(clazz, 1).                 headerArray[0] = (T) header.                 return headerArray.             }             if (header.getClass().isArray()) {                 if (header.getClass().getComponentType().isAssignableFrom(clazz) || header.getClass().getDeclaringClass().isAssignableFrom(clazz)) {                     return (T[]) header.                 }             }         }     }     return null. }
true;public,static;2;17;/**  * @param headerName name of the header  * @param message the Camel message  * @return  */ ;/**  * @param headerName name of the header  * @param message the Camel message  * @return  */ public static String[] parseDelimitedStringHeader(String headerName, Message message) {     Object header = message.getHeader(headerName).     if (header != null) {         if (header instanceof String) {             return ((String) header).split(STRING_DELIMITER).         }         if (header instanceof String[]) {             return (String[]) header.         }     }     return null. }
