commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DockerEndpoint getEndpoint() {     return (DockerEndpoint) super.getEndpoint(). }
false;protected;0;9;;@Override protected void doStart() throws Exception {     String containerId = DockerHelper.getProperty(DockerConstants.DOCKER_CONTAINER_ID, endpoint.getConfiguration(), null, String.class).     this.statsCmd = DockerClientFactory.getDockerClient(component, endpoint.getConfiguration(), null).statsCmd(containerId).     this.statsCmd.exec(new StatsCallback()).     super.doStart(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     this.statsCmd.close().     super.doStop(). }
false;public;1;4;;@Override public void done(boolean doneSync) {     LOGGER.trace("Done processing exchange [{}]...", exchange). }
false;public;1;22;;public void onNext(Statistics statistics) {     LOGGER.debug("Received Docker Statistics Event: " + statistics).     final Exchange exchange = getEndpoint().createExchange().     Message message = exchange.getIn().     message.setBody(statistics).     try {         LOGGER.trace("Processing exchange [{}]...", exchange).         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 LOGGER.trace("Done processing exchange [{}]...", exchange).             }         }).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).     } }
