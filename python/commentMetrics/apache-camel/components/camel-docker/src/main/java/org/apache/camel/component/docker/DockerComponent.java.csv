commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;23;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // Each endpoint can have its own configuration so make     // a copy of the configuration     DockerConfiguration configuration = getConfiguration().copy().     String normalizedRemaining = remaining.replaceAll("/", "").     DockerOperation operation = DockerOperation.getDockerOperation(normalizedRemaining).     if (operation == null) {         throw new DockerException(remaining + " is not a valid operation").     }     configuration.setOperation(operation).     Endpoint endpoint = new DockerEndpoint(uri, this, configuration).     setProperties(configuration, parameters).     configuration.setParameters(parameters).     return endpoint. }
false;public;1;3;;public void setConfiguration(DockerConfiguration configuration) {     this.configuration = configuration. }
true;protected;0;3;/**  * To use the shared docker configuration  */ ;/**  * To use the shared docker configuration  */ protected DockerConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public DockerClient getClient(DockerClientProfile clientProfile) throws DockerException {     return clients.get(clientProfile). }
true;public;2;3;/**  * To use the given docker client  */ ;/**  * To use the given docker client  */ public void setClient(DockerClientProfile clientProfile, DockerClient client) {     clients.put(clientProfile, client). }
