commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract String getHost().
false;protected,abstract;0;1;;protected abstract String getUsername().
false;protected,abstract;0;1;;protected abstract String getDomain().
false;protected,abstract;0;1;;protected abstract String getPassword().
false;protected,abstract;0;1;;protected abstract String getProject().
false;protected,abstract;0;1;;protected abstract String getOperation().
false;protected,abstract;0;1;;protected abstract Config getConfig().
false;protected,abstract;0;1;;protected abstract String getApiVersion().
false;protected;0;9;;protected OSClient createClient() {     // client should reAuthenticate itself when token expires     if (V2.equals(getApiVersion())) {         return createV2Client().     }     return createV3Client(). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new IllegalStateException("There is no consumer available for OpenStack"). }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;private;0;14;;private OSClient.OSClientV3 createV3Client() {     IOSClientBuilder.V3 builder = OSFactory.builderV3().endpoint(getHost()).     builder.credentials(getUsername(), getPassword(), Identifier.byId(getDomain())).     builder.scopeToProject(Identifier.byId(getProject())).     if (getConfig() != null) {         builder.withConfig(getConfig()).     }     return builder.authenticate(). }
false;private;0;14;;private OSClient.OSClientV2 createV2Client() {     IOSClientBuilder.V2 builder = OSFactory.builderV2().endpoint(getHost()).     builder.credentials(getUsername(), getPassword()).     builder.tenantId(getProject()).     if (getConfig() != null) {         builder.withConfig(getConfig()).     }     return builder.authenticate(). }
