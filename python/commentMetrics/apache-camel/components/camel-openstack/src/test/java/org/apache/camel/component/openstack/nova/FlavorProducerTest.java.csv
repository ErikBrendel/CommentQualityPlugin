commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Before public void setUp() {     when(computeService.flavors()).thenReturn(flavorService).     producer = new FlavorsProducer(endpoint, client).     when(flavorService.create(any())).thenReturn(testOSFlavor).     when(flavorService.get(anyString())).thenReturn(testOSFlavor).     List<org.openstack4j.model.compute.Flavor> getAllList = new ArrayList<>().     getAllList.add(testOSFlavor).     getAllList.add(testOSFlavor).     doReturn(getAllList).when(flavorService).list().     dummyFlavor = createTestFlavor().     when(testOSFlavor.getId()).thenReturn(UUID.randomUUID().toString()).     when(testOSFlavor.getName()).thenReturn(dummyFlavor.getName()).     when(testOSFlavor.getRam()).thenReturn(dummyFlavor.getRam()).     when(testOSFlavor.getVcpus()).thenReturn(dummyFlavor.getVcpus()).     when(testOSFlavor.getDisk()).thenReturn(dummyFlavor.getDisk()). }
false;public;0;17;;@Test public void createFlavor() throws Exception {     when(endpoint.getOperation()).thenReturn(OpenstackConstants.CREATE).     final String expectedFlavorID = UUID.randomUUID().toString().     when(testOSFlavor.getId()).thenReturn(expectedFlavorID).     // send dummyFlavor to create     msg.setBody(dummyFlavor).     producer.process(exchange).     verify(flavorService).create(flavorCaptor.capture()).     assertEquals(dummyFlavor, flavorCaptor.getValue()).     final Flavor createdFlavor = msg.getBody(Flavor.class).     assertEqualsFlavors(dummyFlavor, createdFlavor).     assertNotNull(createdFlavor.getId()). }
false;public;0;19;;@Test public void createFlavorWithHeaders() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put(OpenstackConstants.OPERATION, OpenstackConstants.CREATE).     headers.put(OpenstackConstants.NAME, dummyFlavor.getName()).     headers.put(NovaConstants.VCPU, dummyFlavor.getVcpus()).     headers.put(NovaConstants.DISK, dummyFlavor.getDisk()).     headers.put(NovaConstants.SWAP, dummyFlavor.getSwap()).     headers.put(NovaConstants.RAM, dummyFlavor.getRam()).     msg.setHeaders(headers).     producer.process(exchange).     verify(flavorService).create(flavorCaptor.capture()).     assertEqualsFlavors(dummyFlavor, flavorCaptor.getValue()).     final Flavor created = msg.getBody(Flavor.class).     assertNotNull(created.getId()).     assertEqualsFlavors(dummyFlavor, created). }
false;public;0;12;;@Test public void getTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET).     msg.setHeader(OpenstackConstants.ID, "anything - client is mocked").     // should return dummyFlavor     producer.process(exchange).     final Flavor result = msg.getBody(Flavor.class).     assertEqualsFlavors(dummyFlavor, result).     assertNotNull(result.getId()). }
false;public;0;13;;@Test public void getAllTest() throws Exception {     when(endpoint.getOperation()).thenReturn(OpenstackConstants.GET_ALL).     producer.process(exchange).     List<Flavor> result = msg.getBody(List.class).     assertTrue(result.size() == 2).     for (Flavor f : result) {         assertEqualsFlavors(dummyFlavor, f).         assertNotNull(f.getId()).     } }
false;public;0;14;;@Test public void deleteSuccess() throws Exception {     when(flavorService.delete(anyString())).thenReturn(ActionResponse.actionSuccess()).     when(endpoint.getOperation()).thenReturn(OpenstackConstants.DELETE).     String id = "myID".     msg.setHeader(OpenstackConstants.ID, id).     producer.process(exchange).     verify(flavorService).delete(flavorIdCaptor.capture()).     assertEquals(id, flavorIdCaptor.getValue()).     assertFalse(msg.isFault()).     assertNull(msg.getBody()). }
false;public;0;15;;@Test public void deleteFailure() throws Exception {     final String failReason = "unknown".     when(flavorService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failReason, 401)).     when(endpoint.getOperation()).thenReturn(OpenstackConstants.DELETE).     String id = "myID".     msg.setHeader(OpenstackConstants.ID, id).     producer.process(exchange).     verify(flavorService).delete(flavorIdCaptor.capture()).     assertEquals(id, flavorIdCaptor.getValue()).     assertTrue(msg.isFault()).     assertTrue(msg.getBody(String.class).contains(failReason)). }
false;private;0;9;;private Flavor createTestFlavor() {     FlavorBuilder builder = Builders.flavor().name("dummy flavor").ram(3).vcpus(2).disk(5).swap(2).     return builder.build(). }
false;private;2;6;;private void assertEqualsFlavors(Flavor old, Flavor createdFlavor) {     assertEquals(old.getName(), createdFlavor.getName()).     assertEquals(old.getRam(), createdFlavor.getRam()).     assertEquals(old.getVcpus(), createdFlavor.getVcpus()).     assertEquals(old.getDisk(), createdFlavor.getDisk()). }
