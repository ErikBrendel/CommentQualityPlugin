commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void setUp() {     when(blockStorageService.volumes()).thenReturn(volumeService).     producer = new VolumeProducer(endpoint, client).     when(volumeService.create(any())).thenReturn(testOSVolume).     when(volumeService.get(anyString())).thenReturn(testOSVolume).     dummyVolume = createTestVolume().     when(testOSVolume.getId()).thenReturn(UUID.randomUUID().toString()).     when(testOSVolume.getName()).thenReturn(dummyVolume.getName()).     when(testOSVolume.getDescription()).thenReturn(dummyVolume.getDescription()).     when(testOSVolume.getImageRef()).thenReturn(dummyVolume.getImageRef()).     when(testOSVolume.getSize()).thenReturn(dummyVolume.getSize()).     when(testOSVolume.getVolumeType()).thenReturn(dummyVolume.getVolumeType()). }
false;public;0;7;;@Test public void createVolumeTest() throws Exception {     when(endpoint.getOperation()).thenReturn(OpenstackConstants.CREATE).     msg.setBody(dummyVolume).     producer.process(exchange).     assertEqualVolumes(dummyVolume, msg.getBody(Volume.class)). }
false;public;0;21;;@Test public void updateVolumeTest() throws Exception {     when(volumeService.update(anyString(), anyString(), anyString())).thenReturn(ActionResponse.actionSuccess()).     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.UPDATE).     final String id = "id".     final String desc = "newDesc".     final String name = "newName".     msg.setHeader(OpenstackConstants.ID, id).     msg.setHeader(OpenstackConstants.DESCRIPTION, desc).     msg.setHeader(OpenstackConstants.NAME, name).     producer.process(exchange).     verify(volumeService).update(idCaptor.capture(), nameCaptor.capture(), descCaptor.capture()).     assertEquals(id, idCaptor.getValue()).     assertEquals(name, nameCaptor.getValue()).     assertEquals(desc, descCaptor.getValue()).     assertFalse(msg.isFault()).     assertNull(msg.getBody()). }
false;public;0;15;;@Test public void updateVolumeFailTest() throws Exception {     final String faultMessage = "fault".     when(volumeService.update(anyString(), anyString(), anyString())).thenReturn(ActionResponse.actionFailed(faultMessage, 401)).     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.UPDATE).     final String id = "id".     msg.setHeader(OpenstackConstants.ID, id).     msg.setBody(createTestVolume()).     producer.process(exchange).     assertTrue(msg.isFault()).     assertTrue(msg.getBody(String.class).contains(faultMessage)). }
false;public;0;8;;@Test public void getVolumeTest() throws Exception {     when(endpoint.getOperation()).thenReturn(OpenstackConstants.GET).     msg.setHeader(OpenstackConstants.ID, "anyID").     producer.process(exchange).     assertEqualVolumes(dummyVolume, msg.getBody(Volume.class)). }
false;public;0;14;;@Test public void deleteVolumeTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.DELETE).     when(volumeService.delete(anyString())).thenReturn(ActionResponse.actionSuccess()).     final String id = "id".     msg.setHeader(OpenstackConstants.ID, id).     producer.process(exchange).     verify(volumeService).delete(captor.capture()).     assertEquals(id, captor.getValue()).     assertFalse(msg.isFault()). }
false;private;2;9;;private void assertEqualVolumes(Volume old, Volume newVolume) {     assertEquals(old.getName(), newVolume.getName()).     assertEquals(old.getDescription(), newVolume.getDescription()).     assertEquals(old.getImageRef(), newVolume.getImageRef()).     assertEquals(old.getSize(), newVolume.getSize()).     assertEquals(old.getVolumeType(), newVolume.getVolumeType()).     assertNotNull(newVolume.getId()). }
false;private;0;8;;private Volume createTestVolume() {     VolumeBuilder builder = Builders.volume().name("name").description("description").imageRef("ref").size(20).volumeType("type").     return builder.build(). }
