commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setUp() {     when(identityService.domains()).thenReturn(domainService).     producer = new DomainProducer(endpoint, client).     when(domainService.create(any())).thenReturn(testOSdomain).     when(domainService.get(anyString())).thenReturn(testOSdomain).     List<Domain> getAllList = new ArrayList<>().     getAllList.add(testOSdomain).     getAllList.add(testOSdomain).     doReturn(getAllList).when(domainService).list().     dummyDomain = createDomain().     when(testOSdomain.getName()).thenReturn(dummyDomain.getName()).     when(testOSdomain.getDescription()).thenReturn(dummyDomain.getDescription()). }
false;public;0;12;;@Test public void createTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.CREATE).     msg.setHeader(OpenstackConstants.NAME, dummyDomain.getName()).     msg.setHeader(KeystoneConstants.DESCRIPTION, dummyDomain.getDescription()).     producer.process(exchange).     verify(domainService).create(domainCaptor.capture()).     assertEqualsDomain(dummyDomain, domainCaptor.getValue()). }
false;public;0;13;;@Test public void getTest() throws Exception {     final String id = "id".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET).     msg.setHeader(OpenstackConstants.ID, id).     producer.process(exchange).     verify(domainService).get(domainIdCaptor.capture()).     assertEquals(id, domainIdCaptor.getValue()).     assertEqualsDomain(testOSdomain, msg.getBody(Domain.class)). }
false;public;0;10;;@Test public void getAllTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET_ALL).     producer.process(exchange).     final List<Network> result = msg.getBody(List.class).     assertTrue(result.size() == 2).     assertEquals(testOSdomain, result.get(0)). }
false;public;0;21;;@Test public void updateTest() throws Exception {     final String id = "myID".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.UPDATE).     final String newName = "newName".     when(testOSdomain.getId()).thenReturn(id).     when(testOSdomain.getName()).thenReturn(newName).     when(testOSdomain.getDescription()).thenReturn("desc").     when(domainService.update(any())).thenReturn(testOSdomain).     msg.setBody(testOSdomain).     producer.process(exchange).     verify(domainService).update(domainCaptor.capture()).     assertEqualsDomain(testOSdomain, domainCaptor.getValue()).     assertNotNull(domainCaptor.getValue().getId()).     assertEquals(newName, msg.getBody(Domain.class).getName()). }
false;public;0;20;;@Test public void deleteTest() throws Exception {     when(domainService.delete(anyString())).thenReturn(ActionResponse.actionSuccess()).     final String networkID = "myID".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.DELETE).     msg.setHeader(OpenstackConstants.ID, networkID).     producer.process(exchange).     verify(domainService).delete(domainIdCaptor.capture()).     assertEquals(networkID, domainIdCaptor.getValue()).     assertFalse(msg.isFault()).     // in case of failure     final String failureMessage = "fail".     when(domainService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failureMessage, 404)).     producer.process(exchange).     assertTrue(msg.isFault()).     assertTrue(msg.getBody(String.class).contains(failureMessage)). }
false;private;2;4;;private void assertEqualsDomain(Domain old, Domain newDomain) {     assertEquals(old.getName(), newDomain.getName()).     assertEquals(old.getDescription(), newDomain.getDescription()). }
false;private;0;5;;private Domain createDomain() {     return Builders.domain().description("desc").name("domain Name").build(). }
