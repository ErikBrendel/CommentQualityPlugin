commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setUp() {     when(identityService.groups()).thenReturn(groupService).     producer = new GroupProducer(endpoint, client).     when(groupService.create(any())).thenReturn(testOSgroup).     when(groupService.get(anyString())).thenReturn(testOSgroup).     List<Group> getAllList = new ArrayList<>().     getAllList.add(testOSgroup).     getAllList.add(testOSgroup).     doReturn(getAllList).when(groupService).list().     dummyGroup = createGroup().     when(testOSgroup.getName()).thenReturn(dummyGroup.getName()).     when(testOSgroup.getDescription()).thenReturn(dummyGroup.getDescription()). }
false;public;0;13;;@Test public void createTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.CREATE).     msg.setHeader(OpenstackConstants.NAME, dummyGroup.getName()).     msg.setHeader(KeystoneConstants.DESCRIPTION, dummyGroup.getDescription()).     msg.setHeader(KeystoneConstants.DOMAIN_ID, dummyGroup.getDomainId()).     producer.process(exchange).     verify(groupService).create(groupCaptor.capture()).     assertEqualsGroup(dummyGroup, groupCaptor.getValue()). }
false;public;0;13;;@Test public void getTest() throws Exception {     final String id = "id".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET).     msg.setHeader(OpenstackConstants.ID, id).     producer.process(exchange).     verify(groupService).get(groupIdCaptor.capture()).     assertEquals(id, groupIdCaptor.getValue()).     assertEqualsGroup(testOSgroup, msg.getBody(Group.class)). }
false;public;0;10;;@Test public void getAllTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET_ALL).     producer.process(exchange).     final List<Network> result = msg.getBody(List.class).     assertTrue(result.size() == 2).     assertEquals(testOSgroup, result.get(0)). }
false;public;0;21;;@Test public void updateTest() throws Exception {     final String id = "myID".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.UPDATE).     final String newName = "newName".     when(testOSgroup.getId()).thenReturn(id).     when(testOSgroup.getName()).thenReturn(newName).     when(testOSgroup.getDescription()).thenReturn("desc").     when(groupService.update(any())).thenReturn(testOSgroup).     msg.setBody(testOSgroup).     producer.process(exchange).     verify(groupService).update(groupCaptor.capture()).     assertEqualsGroup(testOSgroup, groupCaptor.getValue()).     assertNotNull(groupCaptor.getValue().getId()).     assertEquals(newName, msg.getBody(Group.class).getName()). }
false;public;0;20;;@Test public void deleteTest() throws Exception {     when(groupService.delete(anyString())).thenReturn(ActionResponse.actionSuccess()).     final String networkID = "myID".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.DELETE).     msg.setHeader(OpenstackConstants.ID, networkID).     producer.process(exchange).     verify(groupService).delete(groupIdCaptor.capture()).     assertEquals(networkID, groupIdCaptor.getValue()).     assertFalse(msg.isFault()).     // in case of failure     final String failureMessage = "fail".     when(groupService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failureMessage, 404)).     producer.process(exchange).     assertTrue(msg.isFault()).     assertTrue(msg.getBody(String.class).contains(failureMessage)). }
false;private;2;5;;private void assertEqualsGroup(Group old, Group newGroup) {     assertEquals(old.getName(), newGroup.getName()).     assertEquals(old.getDescription(), newGroup.getDescription()).     assertEquals(old.getDomainId(), newGroup.getDomainId()). }
false;private;0;6;;private Group createGroup() {     return Builders.group().domainId("domain").description("desc").name("group Name").build(). }
