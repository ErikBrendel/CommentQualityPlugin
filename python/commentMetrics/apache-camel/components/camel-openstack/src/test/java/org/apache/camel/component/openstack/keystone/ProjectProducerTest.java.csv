commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setUp() {     when(identityService.projects()).thenReturn(projectService).     producer = new ProjectProducer(endpoint, client).     when(projectService.create(any())).thenReturn(testOSproject).     when(projectService.get(anyString())).thenReturn(testOSproject).     List<Project> getAllList = new ArrayList<>().     getAllList.add(testOSproject).     getAllList.add(testOSproject).     doReturn(getAllList).when(projectService).list().     dummyProject = createProject().     when(testOSproject.getName()).thenReturn(dummyProject.getName()).     when(testOSproject.getDescription()).thenReturn(dummyProject.getDescription()). }
false;public;0;15;;@Test public void createTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.CREATE).     msg.setHeader(OpenstackConstants.NAME, dummyProject.getName()).     msg.setHeader(KeystoneConstants.DESCRIPTION, dummyProject.getDescription()).     msg.setHeader(KeystoneConstants.DOMAIN_ID, dummyProject.getDomainId()).     msg.setHeader(KeystoneConstants.PARENT_ID, dummyProject.getParentId()).     producer.process(exchange).     verify(projectService).create(projectCaptor.capture()).     assertEqualsProject(dummyProject, projectCaptor.getValue()). }
false;public;0;13;;@Test public void getTest() throws Exception {     final String id = "id".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET).     msg.setHeader(OpenstackConstants.ID, id).     producer.process(exchange).     verify(projectService).get(projectIdCaptor.capture()).     assertEquals(id, projectIdCaptor.getValue()).     assertEqualsProject(testOSproject, msg.getBody(Project.class)). }
false;public;0;10;;@Test public void getAllTest() throws Exception {     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.GET_ALL).     producer.process(exchange).     final List<Network> result = msg.getBody(List.class).     assertTrue(result.size() == 2).     assertEquals(testOSproject, result.get(0)). }
false;public;0;21;;@Test public void updateTest() throws Exception {     final String id = "myID".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.UPDATE).     final String newName = "newName".     when(testOSproject.getId()).thenReturn(id).     when(testOSproject.getName()).thenReturn(newName).     when(testOSproject.getDescription()).thenReturn("desc").     when(projectService.update(any())).thenReturn(testOSproject).     msg.setBody(testOSproject).     producer.process(exchange).     verify(projectService).update(projectCaptor.capture()).     assertEqualsProject(testOSproject, projectCaptor.getValue()).     assertNotNull(projectCaptor.getValue().getId()).     assertEquals(newName, msg.getBody(Project.class).getName()). }
false;public;0;20;;@Test public void deleteTest() throws Exception {     when(projectService.delete(anyString())).thenReturn(ActionResponse.actionSuccess()).     final String networkID = "myID".     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.DELETE).     msg.setHeader(OpenstackConstants.ID, networkID).     producer.process(exchange).     verify(projectService).delete(projectIdCaptor.capture()).     assertEquals(networkID, projectIdCaptor.getValue()).     assertFalse(msg.isFault()).     // in case of failure     final String failureMessage = "fail".     when(projectService.delete(anyString())).thenReturn(ActionResponse.actionFailed(failureMessage, 404)).     producer.process(exchange).     assertTrue(msg.isFault()).     assertTrue(msg.getBody(String.class).contains(failureMessage)). }
false;private;2;5;;private void assertEqualsProject(Project old, Project newProject) {     assertEquals(old.getName(), newProject.getName()).     assertEquals(old.getDescription(), newProject.getDescription()).     assertEquals(old.getDomainId(), newProject.getDomainId()). }
false;private;0;7;;private Project createProject() {     return Builders.project().domainId("domain").description("desc").name("project Name").parentId("parent").build(). }
