commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() {     when(objectStorageService.objects()).thenReturn(objectService).     producer = new ObjectProducer(endpoint, client).     when(mockOsObject.getETag()).thenReturn(ETAG). }
false;public;0;18;;@Test public void createTest() throws Exception {     when(objectService.put(anyString(), anyString(), any())).thenReturn(ETAG).     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.CREATE).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     msg.setHeader(SwiftConstants.OBJECT_NAME, OBJECT_NAME).     final Payload<?> payload = getTmpPayload().     msg.setBody(payload).     producer.process(exchange).     verify(objectService).put(containerNameCaptor.capture(), objectNameCaptor.capture(), payloadArgumentCaptor.capture()).     assertEquals(CONTAINER_NAME, containerNameCaptor.getValue()).     assertEquals(OBJECT_NAME, objectNameCaptor.getValue()).     assertEquals(payload, payloadArgumentCaptor.getValue()).     assertEquals(ETAG, msg.getBody(String.class)). }
false;public;0;12;;@Test public void getTest() throws Exception {     when(objectService.get(CONTAINER_NAME, OBJECT_NAME)).thenReturn(mockOsObject).     when(endpoint.getOperation()).thenReturn(OpenstackConstants.GET).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     msg.setHeader(SwiftConstants.OBJECT_NAME, OBJECT_NAME).     producer.process(exchange).     assertEquals(ETAG, msg.getBody(SwiftObject.class).getETag()). }
false;public;0;13;;@Test public void getAllFromContainerTest() throws Exception {     List<SwiftObject> objectsList = new ArrayList<>().     objectsList.add(mockOsObject).     doReturn(objectsList).when(objectService).list(CONTAINER_NAME).     when(endpoint.getOperation()).thenReturn(OpenstackConstants.GET_ALL).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     producer.process(exchange).     assertEquals(mockOsObject, msg.getBody(List.class).get(0)). }
false;public;0;15;;@Test public void deleteObjectTest() throws Exception {     when(objectService.delete(anyString(), anyString())).thenReturn(ActionResponse.actionSuccess()).     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.DELETE).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     msg.setHeader(SwiftConstants.OBJECT_NAME, OBJECT_NAME).     producer.process(exchange).     verify(objectService).delete(containerNameCaptor.capture(), objectNameCaptor.capture()).     assertEquals(CONTAINER_NAME, containerNameCaptor.getValue()).     assertEquals(OBJECT_NAME, objectNameCaptor.getValue()).     assertFalse(msg.isFault()). }
false;public;0;13;;@Test public void deleteObjectFailTest() throws Exception {     final String failMessage = "fail".     when(objectService.delete(anyString(), anyString())).thenReturn(ActionResponse.actionFailed(failMessage, 401)).     msg.setHeader(OpenstackConstants.OPERATION, OpenstackConstants.DELETE).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     msg.setHeader(SwiftConstants.OBJECT_NAME, OBJECT_NAME).     producer.process(exchange).     assertTrue(msg.isFault()).     assertTrue(msg.getBody(String.class).contains(failMessage)). }
false;public;0;18;;@Test public void updateMetadataTest() throws Exception {     final Map<String, String> md = new HashMap<>().     md.put("key", "val").     msg.setHeader(OpenstackConstants.OPERATION, SwiftConstants.CREATE_UPDATE_METADATA).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     msg.setHeader(SwiftConstants.OBJECT_NAME, OBJECT_NAME).     msg.setBody(md).     producer.process(exchange).     verify(objectService).updateMetadata(locationCaptor.capture(), dataCaptor.capture()).     ObjectLocation location = locationCaptor.getValue().     assertEquals(CONTAINER_NAME, location.getContainerName()).     assertEquals(OBJECT_NAME, location.getObjectName()).     assertEquals(md, dataCaptor.getValue()). }
false;public;0;14;;@Test public void getMetadataTest() throws Exception {     final Map<String, String> md = new HashMap<>().     md.put("key", "val").     when(objectService.getMetadata(CONTAINER_NAME, OBJECT_NAME)).thenReturn(md).     msg.setHeader(OpenstackConstants.OPERATION, SwiftConstants.GET_METADATA).     msg.setHeader(SwiftConstants.CONTAINER_NAME, CONTAINER_NAME).     msg.setHeader(SwiftConstants.OBJECT_NAME, OBJECT_NAME).     producer.process(exchange).     assertEquals(md, msg.getBody(Map.class)). }
false;private;0;3;;private Payload<File> getTmpPayload() throws IOException {     return Payloads.create(File.createTempFile("payloadPreffix", ".txt")). }
