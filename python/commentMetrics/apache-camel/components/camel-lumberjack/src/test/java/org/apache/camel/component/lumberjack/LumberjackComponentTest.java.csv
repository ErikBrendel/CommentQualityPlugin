commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     port = AvailablePortFinder.getNextAvailable(). }
false;public;0;4;;public void configure() {     // Lumberjack configured with a specific port     from("lumberjack:0.0.0.0:" + port).to("mock:output"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Lumberjack configured with a specific port             from("lumberjack:0.0.0.0:" + port).to("mock:output").         }     }. }
false;public;0;21;;@Test public void shouldListenToMessages() throws Exception {     // We're expecting 25 messages with Maps     MockEndpoint mock = getMockEndpoint("mock:output").     mock.expectedMessageCount(25).     mock.allMessages().body().isInstanceOf(Map.class).     // When sending messages     List<Integer> responses = LumberjackUtil.sendMessages(port, null).     // Then we should have the messages we're expecting     mock.assertIsSatisfied().     // And the first map should contains valid data (we're assuming it's also valid for the other ones)     Map first = mock.getExchanges().get(0).getIn().getBody(Map.class).     assertEquals("log", first.get("input_type")).     assertEquals("/home/qatest/collectNetwork/log/data-integration/00000000-f000-0000-1541-8da26f200001/absorption.log", first.get("source")).     // And we should have replied with 2 acknowledgments for each window frame     assertEquals(Arrays.asList(10, 15), responses). }
