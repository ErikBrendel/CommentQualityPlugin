commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     port = AvailablePortFinder.getNextAvailable(). }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.setSSLContextParameters(createServerSSLContextParameters()).     LumberjackComponent component = (LumberjackComponent) context.getComponent("lumberjack").     component.setUseGlobalSslContextParameters(true).     return context. }
false;public;0;5;;public void configure() {     // Lumberjack configured with SSL     from("lumberjack:0.0.0.0:" + port).to("mock:output"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Lumberjack configured with SSL             from("lumberjack:0.0.0.0:" + port).to("mock:output").         }     }. }
false;public;0;21;;@Test public void shouldListenToMessagesOverSSL() throws Exception {     // cannot test on java 1.9     if (isJava19()) {         return.     }     // We're expecting 25 messages with Maps     MockEndpoint mock = getMockEndpoint("mock:output").     mock.expectedMessageCount(25).     mock.allMessages().body().isInstanceOf(Map.class).     // When sending messages     List<Integer> responses = LumberjackUtil.sendMessages(port, createClientSSLContextParameters()).     // Then we should have the messages we're expecting     mock.assertIsSatisfied().     // And we should have replied with 2 acknowledgments for each window frame     assertEquals(Arrays.asList(10, 15), responses). }
true;private;0;13;/**  * Creates the {@link SSLContextParameters} Camel object for the Lumberjack component  *  * @return The {@link SSLContextParameters} Camel object for the Lumberjack component  */ ;/**  * Creates the {@link SSLContextParameters} Camel object for the Lumberjack component  *  * @return The {@link SSLContextParameters} Camel object for the Lumberjack component  */ private SSLContextParameters createServerSSLContextParameters() {     SSLContextParameters sslContextParameters = new SSLContextParameters().     KeyManagersParameters keyManagersParameters = new KeyManagersParameters().     KeyStoreParameters keyStore = new KeyStoreParameters().     keyStore.setPassword("changeit").     keyStore.setResource("org/apache/camel/component/lumberjack/keystore.jks").     keyManagersParameters.setKeyPassword("changeit").     keyManagersParameters.setKeyStore(keyStore).     sslContextParameters.setKeyManagers(keyManagersParameters).     return sslContextParameters. }
false;private;0;12;;private SSLContextParameters createClientSSLContextParameters() {     SSLContextParameters sslContextParameters = new SSLContextParameters().     TrustManagersParameters trustManagersParameters = new TrustManagersParameters().     KeyStoreParameters trustStore = new KeyStoreParameters().     trustStore.setPassword("changeit").     trustStore.setResource("org/apache/camel/component/lumberjack/keystore.jks").     trustManagersParameters.setKeyStore(trustStore).     sslContextParameters.setTrustManagers(trustManagersParameters).     return sslContextParameters. }
