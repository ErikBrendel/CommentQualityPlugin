commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() {     port = AvailablePortFinder.getNextAvailable(). }
false;public;0;4;;public void configure() {     // Lumberjack configured with something that throws an exception     from("lumberjack:0.0.0.0:" + port).process(new ErrorProcessor()).to("mock:output"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Lumberjack configured with something that throws an exception             from("lumberjack:0.0.0.0:" + port).process(new ErrorProcessor()).to("mock:output").         }     }. }
false;public;0;17;;@Test public void shouldDisconnectUponError() throws Exception {     // We're expecting 3 messages with Maps     // The fourth one crashed and we didn't received the next ones     MockEndpoint mock = getMockEndpoint("mock:output").     mock.expectedMessageCount(3).     mock.allMessages().body().isInstanceOf(Map.class).     // When sending messages     List<Integer> responses = LumberjackUtil.sendMessages(port, null).     // Then we should have the messages we're expecting     mock.assertIsSatisfied().     // And no acknowledgment is received     assertCollectionSize(responses, 0). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     count++.     if (count == 4) {         throw new RuntimeException("Ooops").     } }
