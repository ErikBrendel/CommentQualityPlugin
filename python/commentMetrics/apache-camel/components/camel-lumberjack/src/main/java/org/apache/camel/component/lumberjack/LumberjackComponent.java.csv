commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;24;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // Extract host and port     String host.     int port.     int separatorIndex = remaining.indexOf(':').     if (separatorIndex >= 0) {         host = remaining.substring(0, separatorIndex).         port = Integer.parseInt(remaining.substring(separatorIndex + 1)).     } else {         host = remaining.         port = DEFAULT_PORT.     }     // Create the endpoint     LumberjackEndpoint answer = new LumberjackEndpoint(uri, this, host, port).     setProperties(answer, parameters).     if (answer.getSslContextParameters() == null) {         answer.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return answer. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * Sets the default SSL configuration to use for all the endpoints. You can also configure it directly at  * the endpoint level.  */ ;/**  * Sets the default SSL configuration to use for all the endpoints. You can also configure it directly at  * the endpoint level.  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
