commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public LumberjackComponent getComponent() {     return (LumberjackComponent) super.getComponent(). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("The Lumberjack component cannot be used as a producer"). }
false;public;1;4;;@Override public LumberjackConsumer createConsumer(Processor processor) throws Exception {     return new LumberjackConsumer(this, processor, host, port, provideSSLContext()). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
false;public;1;3;;public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;private;0;9;;private SSLContext provideSSLContext() throws GeneralSecurityException, IOException {     if (sslContextParameters != null) {         return sslContextParameters.createSSLContext(getCamelContext()).     } else if (getComponent().getSslContextParameters() != null) {         return getComponent().getSslContextParameters().createSSLContext(getCamelContext()).     } else {         return null.     } }
