commented;modifiers;parameterAmount;loc;comment;code
false;;1;11;;void versionRead(int version) {     if (this.version == -1) {         if (version != VERSION_V1 && version != VERSION_V2) {             throw new RuntimeException("Unsupported frame version=" + version).         }         LOG.debug("Lumberjack protocol version is {}", (char) version).         this.version = version.     } else if (this.version != version) {         throw new IllegalStateException("Protocol version changed during session from " + this.version + " to " + version).     } }
false;;1;5;;void windowSizeRead(int windowSize) {     LOG.debug("Lumberjack window size is {}", windowSize).     this.windowSize = windowSize.     nextAck = ACK_UNSET. }
false;;2;14;;void notifyMessageProcessed(ChannelHandlerContext ctx, int sequenceNumber) {     if (nextAck == ACK_UNSET) {         nextAck = sequenceNumber + windowSize - 1.     }     if (sequenceNumber == nextAck) {         LOG.debug("Sequence number is {}. Sending ACK", sequenceNumber).         ByteBuf response = ctx.alloc().heapBuffer(FRAME_ACKNOWLEDGE_LENGTH, FRAME_ACKNOWLEDGE_LENGTH).         response.writeByte(version).         response.writeByte(TYPE_ACKNOWLEDGE).         response.writeInt(sequenceNumber).         ctx.writeAndFlush(response).     } }
