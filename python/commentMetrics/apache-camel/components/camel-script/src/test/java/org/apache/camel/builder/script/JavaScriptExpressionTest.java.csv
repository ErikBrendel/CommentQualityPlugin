commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSendMatchingMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     getMockEndpoint("mock:unmatched").expectedMessageCount(0).     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "bar").     sendBody("direct:start", "hello", headers).     assertEquals("Should get the message header here", mock.getExchanges().get(0).getIn().getHeader("foo"), "bar").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSendNonMatchingMessage() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:unmatched").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "foo").     sendBody("direct:start", "hello", headers).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public // START SNIPPET: e1 void testArgumentsExample() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:unmatched").expectedMessageCount(1).     // additional arguments to ScriptEngine     Map<String, Object> arguments = new HashMap<>().     arguments.put("foo", "bar").     arguments.put("baz", 7).     // those additional arguments is provided as a header on the Camel Message     template.sendBodyAndHeader("direct:start", "hello", ScriptBuilder.ARGUMENTS, arguments).     assertMockEndpointsSatisfied(). }
false;public;0;17;;// END SNIPPET: e1 @Test public void testArgumentsWithStringMap() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:unmatched").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     Map<String, Object> arguments = new HashMap<>().     arguments.put("foo", "bar").     arguments.put("baz", 7).     arguments.put("", "foo").     arguments.put(null, "bar").     headers.put(ScriptBuilder.ARGUMENTS, arguments).     sendBody("direct:start", "hello", headers).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testArgumentsWithIntegerMap() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:unmatched").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     Map<Integer, Object> arguments = new HashMap<>().     arguments.put(0, "bar").     arguments.put(1, 7).     headers.put(ScriptBuilder.ARGUMENTS, arguments).     sendBody("direct:start", "hello", headers).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testArgumentsWithNonMap() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:unmatched").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     String arguments = "foo".     headers.put(ScriptBuilder.ARGUMENTS, arguments).     sendBody("direct:start", "hello", headers).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void run() {     Map<String, Object> headers = new HashMap<>().     String arguments = "foo".     headers.put(ScriptBuilder.ARGUMENTS, arguments).     sendBody("direct:start", "hello", headers). }
false;public;0;28;;@Test public void testSendingRequestInMutipleThreads() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:unmatched").expectedMessageCount(100).     long start = System.currentTimeMillis().     ExecutorService executorService = Executors.newFixedThreadPool(100).     for (int i = 0. i < 100. i++) {         executorService.submit(new Runnable() {              @Override             public void run() {                 Map<String, Object> headers = new HashMap<>().                 String arguments = "foo".                 headers.put(ScriptBuilder.ARGUMENTS, arguments).                 sendBody("direct:start", "hello", headers).             }         }).     }     assertMockEndpointsSatisfied().     long delta = System.currentTimeMillis() - start.     log.info("Processing the 100 request tooks: " + delta + " ms").     executorService.shutdown(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").choice().when().javaScript("request.headers.get('foo') == 'bar'").to("log:info?showAll=true").to("mock:result").otherwise().to("mock:unmatched"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").choice().when().javaScript("request.headers.get('foo') == 'bar'").to("log:info?showAll=true").to("mock:result").otherwise().to("mock:unmatched").         }     }. }
