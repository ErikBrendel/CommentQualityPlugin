commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void configure() throws Exception {     getContext().getGlobalOptions().put(Exchange.REUSE_SCRIPT_ENGINE, "true").     // getContext().getProperties().put(Exchange.COMPILE_SCRIPT, "true").     from("seda:jruby?concurrentConsumers=5").to("language:ruby:puts $request.body.result = $request.body?cacheScript=true").to(resultEndpoint). }
false;public;0;22;;@Test public void parallelExecutionWithCachedScriptAndReusedScriptEngine() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             getContext().getGlobalOptions().put(Exchange.REUSE_SCRIPT_ENGINE, "true").             // getContext().getProperties().put(Exchange.COMPILE_SCRIPT, "true").             from("seda:jruby?concurrentConsumers=5").to("language:ruby:puts $request.body.result = $request.body?cacheScript=true").to(resultEndpoint).         }     }).     resultEndpoint.setExpectedMessageCount(messageCount).     resultEndpoint.assertNoDuplicates(body()).     for (int i = 1. i < messageCount + 1. i++) {         template.sendBody("seda:jruby", "BODY" + i).     }     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS). }
false;public;0;7;;public void configure() throws Exception {     // getContext().getProperties().put(Exchange.COMPILE_SCRIPT, "true").     from("seda:jruby?concurrentConsumers=5").to("language:ruby:puts $request.body.result = $request.body").to(resultEndpoint). }
false;public;0;22;;@Test @Ignore public void parallelExecutionWithoutCachedScriptAndNewScriptEngineForEachExchange() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             // getContext().getProperties().put(Exchange.COMPILE_SCRIPT, "true").             from("seda:jruby?concurrentConsumers=5").to("language:ruby:puts $request.body.result = $request.body").to(resultEndpoint).         }     }).     resultEndpoint.setExpectedMessageCount(messageCount).     resultEndpoint.assertNoDuplicates(body()).     for (int i = 1. i < messageCount + 1. i++) {         template.sendBody("seda:jruby", "BODY" + i).     }     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS). }
