commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() throws Exception {     // Create the LDAPConnection     ldapContext = getWiredContext(ldapServer).     SimpleRegistry reg = new SimpleRegistry().     reg.put(LDAP_CONN_NAME, getWiredConnection(ldapServer)).     camel = new DefaultCamelContext(reg).     template = camel.createProducerTemplate(). }
false;public;0;4;;@After public void tearDown() throws Exception {     camel.stop(). }
false;public;0;32;;@Test public void addOne() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/AddOne.ldif").     exchange.getIn().setBody(loc.toString()).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     // Container and user     assertThat(ldifResults.size(), equalTo(2)).     assertThat(ldifResults.get(0), equalTo("success")).     assertThat(ldifResults.get(1), equalTo("success")).     // Check LDAP     SearchResult sr.     NamingEnumeration<SearchResult> searchResults = ldapContext.search("", "(uid=test*)", SEARCH_CONTROLS).     assertNotNull(searchResults).     sr = searchResults.next().     assertNotNull(sr).     assertThat("uid=test1,ou=test,ou=system", equalTo(sr.getName())).     assertThat(false, equalTo(searchResults.hasMore())). }
false;public;0;32;;@Test public void addOneInline() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/AddOne.ldif").     exchange.getIn().setBody(readUrl(loc)).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     // Container and user     assertThat(ldifResults.size(), equalTo(2)).     assertThat(ldifResults.get(0), equalTo("success")).     assertThat(ldifResults.get(1), equalTo("success")).     // Check LDAP     SearchResult sr.     NamingEnumeration<SearchResult> searchResults = ldapContext.search("", "(uid=test*)", SEARCH_CONTROLS).     assertNotNull(searchResults).     sr = searchResults.next().     assertNotNull(sr).     assertThat("uid=test1,ou=test,ou=system", equalTo(sr.getName())).     assertThat(false, equalTo(searchResults.hasMore())). }
false;public;0;27;;@Test @ApplyLdifFiles({ "org/apache/camel/component/ldif/DeleteOneSetup.ldif" }) public void deleteOne() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/DeleteOne.ldif").     exchange.getIn().setBody(loc.toString()).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     assertThat(ldifResults.size(), equalTo(1)).     assertThat(ldifResults.get(0), equalTo("success")).     // Check LDAP     NamingEnumeration<SearchResult> searchResults = ldapContext.search("", "(uid=test*)", SEARCH_CONTROLS).     assertThat(false, equalTo(searchResults.hasMore())). }
false;public;0;23;;@Test @ApplyLdifFiles({ "org/apache/camel/component/ldif/AddDuplicateSetup.ldif" }) public void addDuplicate() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/AddDuplicate.ldif").     exchange.getIn().setBody(loc.toString()).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     assertThat(ldifResults.size(), equalTo(1)).     assertThat(ldifResults.get(0), not(equalTo("success"))). }
false;public;0;42;;@Test @ApplyLdifFiles({ "org/apache/camel/component/ldif/ModifySetup.ldif" }) public void modify() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/Modify.ldif").     exchange.getIn().setBody(loc.toString()).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     assertThat(ldifResults.size(), equalTo(1)).     assertThat(ldifResults.get(0), equalTo("success")).     // Check LDAP     SearchResult sr.     NamingEnumeration<SearchResult> searchResults = ldapContext.search("", "(uid=test*)", SEARCH_CONTROLS).     assertNotNull(searchResults).     sr = searchResults.next().     assertNotNull(sr).     assertThat("uid=test4,ou=test,ou=system", equalTo(sr.getName())).     // Check the attributes of the search result     Attributes attribs = sr.getAttributes().     assertNotNull(attribs).     Attribute attrib = attribs.get("sn").     assertNotNull(attribs).     assertThat(1, equalTo(attrib.size())).     assertThat("5", equalTo(attrib.get(0).toString())).     // Check no more results     assertThat(false, equalTo(searchResults.hasMore())). }
false;public;0;36;;@Test @ApplyLdifFiles({ "org/apache/camel/component/ldif/ModRdnSetup.ldif" }) public void modRdn() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/ModRdn.ldif").     exchange.getIn().setBody(loc.toString()).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     assertThat(ldifResults.size(), equalTo(1)).     assertThat(ldifResults.get(0), equalTo("success")).     // Check LDAP     SearchResult sr.     NamingEnumeration<SearchResult> searchResults = ldapContext.search("", "(uid=test*)", SEARCH_CONTROLS).     assertNotNull(searchResults).     sr = searchResults.next().     assertNotNull(sr).     // Check the DN     assertThat("uid=test6,ou=test,ou=system", equalTo(sr.getName())).     // Check no more results     assertThat(false, equalTo(searchResults.hasMore())). }
false;public;0;36;;@Test @ApplyLdifFiles({ "org/apache/camel/component/ldif/ModDnSetup.ldif" }) public void modDn() throws Exception {     camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF)).     camel.start().     Endpoint endpoint = camel.getEndpoint(ENDPOINT_START).     Exchange exchange = endpoint.createExchange().     // then we set the LDAP filter on the in body     URL loc = this.getClass().getResource("/org/apache/camel/component/ldif/ModDn.ldif").     exchange.getIn().setBody(loc.toString()).     // now we send the exchange to the endpoint, and receives the response     // from Camel     Exchange out = template.send(endpoint, exchange).     // Check the results     List<String> ldifResults = defaultLdapModuleOutAssertions(out).     assertThat(ldifResults, notNullValue()).     assertThat(ldifResults.size(), equalTo(1)).     assertThat(ldifResults.get(0), equalTo("success")).     // Check LDAP     SearchResult sr.     NamingEnumeration<SearchResult> searchResults = ldapContext.search("", "(uid=test*)", SEARCH_CONTROLS).     assertNotNull(searchResults).     sr = searchResults.next().     assertNotNull(sr).     // Check the DN     assertThat("uid=test7,ou=testnew,ou=system", equalTo(sr.getName())).     // Check no more results     assertThat(false, equalTo(searchResults.hasMore())). }
false;private;1;9;;@SuppressWarnings("unchecked") private List<String> defaultLdapModuleOutAssertions(Exchange out) {     // assertions of the response     assertNotNull(out).     assertNotNull(out.getOut()).     List<String> data = out.getOut().getBody(List.class).     assertNotNull("out body could not be converted to a List - was: " + out.getOut().getBody(), data).     return data. }
true;public;0;4;// START SNIPPET: route ;// START SNIPPET: route @Override public void configure() throws Exception {     from(ENDPOINT_START).to(ldapEndpointUrl). }
false;protected;1;10;;protected RouteBuilder createRouteBuilder(final String ldapEndpointUrl) throws Exception {     return new RouteBuilder() {          // START SNIPPET: route         @Override         public void configure() throws Exception {             from(ENDPOINT_START).to(ldapEndpointUrl).         }     }. }
true;private;1;11;/**  * Read the contents of a URL into a String  * @param in  * @return  * @throws IOException  */ ;/**  * Read the contents of a URL into a String  * @param in  * @return  * @throws IOException  */ private String readUrl(URL in) throws IOException {     BufferedReader br = new BufferedReader(new InputStreamReader(in.openStream())).     StringBuffer buf = new StringBuffer().     String s.     while (null != (s = br.readLine())) {         buf.append(s).         buf.append('\n').     }     return buf.toString(). }
