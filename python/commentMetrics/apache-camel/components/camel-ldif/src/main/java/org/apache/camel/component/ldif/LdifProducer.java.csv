# id;timestamp;commentText;codeText;commentWords;codeWords
LdifProducer -> private String getRootCause(LdapException e);1506148977;Get the root cause of an exception__@param e_@return;private String getRootCause(LdapException e) {_        Throwable oldt__        Throwable thist___        oldt = thist = e__        while (thist != null) {_            oldt = thist__            thist = thist.getCause()__        }_        return oldt.getMessage()__    };get,the,root,cause,of,an,exception,param,e,return;private,string,get,root,cause,ldap,exception,e,throwable,oldt,throwable,thist,oldt,thist,e,while,thist,null,oldt,thist,thist,thist,get,cause,return,oldt,get,message
LdifProducer -> private String getRootCause(LdapException e);1506150963;Get the root cause of an exception;private String getRootCause(LdapException e) {_        Throwable oldt__        Throwable thist___        oldt = thist = e__        while (thist != null) {_            oldt = thist__            thist = thist.getCause()__        }_        return oldt.getMessage()__    };get,the,root,cause,of,an,exception;private,string,get,root,cause,ldap,exception,e,throwable,oldt,throwable,thist,oldt,thist,e,while,thist,null,oldt,thist,thist,thist,get,cause,return,oldt,get,message
LdifProducer -> private String getRootCause(LdapException e);1524063106;Get the root cause of an exception;private String getRootCause(LdapException e) {_        Throwable oldt__        Throwable thist___        oldt = thist = e__        while (thist != null) {_            oldt = thist__            thist = thist.getCause()__        }_        return oldt.getMessage()__    };get,the,root,cause,of,an,exception;private,string,get,root,cause,ldap,exception,e,throwable,oldt,throwable,thist,oldt,thist,e,while,thist,null,oldt,thist,thist,thist,get,cause,return,oldt,get,message
LdifProducer -> private String getRootCause(LdapException e);1536687142;Get the root cause of an exception;private String getRootCause(LdapException e) {_        Throwable oldt__        Throwable thist___        oldt = thist = e__        while (thist != null) {_            oldt = thist__            thist = thist.getCause()__        }_        return oldt.getMessage()__    };get,the,root,cause,of,an,exception;private,string,get,root,cause,ldap,exception,e,throwable,oldt,throwable,thist,oldt,thist,e,while,thist,null,oldt,thist,thist,thist,get,cause,return,oldt,get,message
LdifProducer -> private String getRootCause(LdapException e);1536687571;Get the root cause of an exception;private String getRootCause(LdapException e) {_        Throwable oldt__        Throwable thist___        oldt = thist = e__        while (thist != null) {_            oldt = thist__            thist = thist.getCause()__        }_        return oldt.getMessage()__    };get,the,root,cause,of,an,exception;private,string,get,root,cause,ldap,exception,e,throwable,oldt,throwable,thist,oldt,thist,e,while,thist,null,oldt,thist,thist,thist,get,cause,return,oldt,get,message
LdifProducer -> private String getRootCause(LdapException e);1540108163;Get the root cause of an exception;private String getRootCause(LdapException e) {_        Throwable oldt__        Throwable thist___        oldt = thist = e__        while (thist != null) {_            oldt = thist__            thist = thist.getCause()__        }_        return oldt.getMessage()__    };get,the,root,cause,of,an,exception;private,string,get,root,cause,ldap,exception,e,throwable,oldt,throwable,thist,oldt,thist,e,while,thist,null,oldt,thist,thist,thist,get,cause,return,oldt,get,message
LdifProducer -> public void process(Exchange exchange) throws Exception;1506148977;Process the body. There are two options:_<ol>_<li>A String body that is the LDIF content. This needs to start with_"version: 1".</li>_<li>A String body that is a URL to ready the LDIF content from</li>_</ol>__@see org.apache.camel.impl.DefaultProducer#process(Exchange);public void process(Exchange exchange) throws Exception {_        String body = exchange.getIn().getBody(String.class)__        List<String> result = null___        _        exchange.setOut(exchange.getIn())___        _        if (null == body || "".equals(body)) {_            exchange.getOut().setBody("")__        } else if (body.startsWith(LDIF_HEADER)) {_            if (log.isDebugEnabled()) {_                log.debug("reading from LDIF body")__            }_            result = processLdif(new StringReader(body))__        } else {_            URL loc = null__            try {_                loc = new URL(body)__                if (log.isDebugEnabled()) {_                    log.debug("reading from URL: " + loc)__                }_                result = processLdif(new InputStreamReader(loc.openStream()))__            } catch (MalformedURLException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Failed to parse body as URL and LDIF", e)__                }_                throw new InvalidPayloadException(exchange, String.class)__            }_        }__        exchange.getOut().setBody(result)__    };process,the,body,there,are,two,options,ol,li,a,string,body,that,is,the,ldif,content,this,needs,to,start,with,version,1,li,li,a,string,body,that,is,a,url,to,ready,the,ldif,content,from,li,ol,see,org,apache,camel,impl,default,producer,process,exchange;public,void,process,exchange,exchange,throws,exception,string,body,exchange,get,in,get,body,string,class,list,string,result,null,exchange,set,out,exchange,get,in,if,null,body,equals,body,exchange,get,out,set,body,else,if,body,starts,with,if,log,is,debug,enabled,log,debug,reading,from,ldif,body,result,process,ldif,new,string,reader,body,else,url,loc,null,try,loc,new,url,body,if,log,is,debug,enabled,log,debug,reading,from,url,loc,result,process,ldif,new,input,stream,reader,loc,open,stream,catch,malformed,urlexception,e,if,log,is,debug,enabled,log,debug,failed,to,parse,body,as,url,and,ldif,e,throw,new,invalid,payload,exception,exchange,string,class,exchange,get,out,set,body,result
LdifProducer -> public void process(Exchange exchange) throws Exception;1506150963;Process the body. There are two options:_<ol>_<li>A String body that is the LDIF content. This needs to start with_"version: 1".</li>_<li>A String body that is a URL to ready the LDIF content from</li>_</ol>;public void process(Exchange exchange) throws Exception {_        String body = exchange.getIn().getBody(String.class)__        List<String> result = null___        _        exchange.setOut(exchange.getIn())___        _        if (ObjectHelper.isEmpty(body)) {_            exchange.getOut().setBody("")__        } else if (body.startsWith(LDIF_HEADER)) {_            log.debug("Reading from LDIF body")__            result = processLdif(new StringReader(body))__        } else {_            URL loc__            try {_                loc = new URL(body)__                log.debug("Reading from URL: {}", loc)__                result = processLdif(new InputStreamReader(loc.openStream()))__            } catch (MalformedURLException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Failed to parse body as URL and LDIF", e)__                }_                throw new InvalidPayloadException(exchange, String.class)__            }_        }__        exchange.getOut().setBody(result)__    };process,the,body,there,are,two,options,ol,li,a,string,body,that,is,the,ldif,content,this,needs,to,start,with,version,1,li,li,a,string,body,that,is,a,url,to,ready,the,ldif,content,from,li,ol;public,void,process,exchange,exchange,throws,exception,string,body,exchange,get,in,get,body,string,class,list,string,result,null,exchange,set,out,exchange,get,in,if,object,helper,is,empty,body,exchange,get,out,set,body,else,if,body,starts,with,log,debug,reading,from,ldif,body,result,process,ldif,new,string,reader,body,else,url,loc,try,loc,new,url,body,log,debug,reading,from,url,loc,result,process,ldif,new,input,stream,reader,loc,open,stream,catch,malformed,urlexception,e,if,log,is,debug,enabled,log,debug,failed,to,parse,body,as,url,and,ldif,e,throw,new,invalid,payload,exception,exchange,string,class,exchange,get,out,set,body,result
LdifProducer -> public void process(Exchange exchange) throws Exception;1524063106;Process the body. There are two options:_<ol>_<li>A String body that is the LDIF content. This needs to start with_"version: 1".</li>_<li>A String body that is a URL to ready the LDIF content from</li>_</ol>;public void process(Exchange exchange) throws Exception {_        String body = exchange.getIn().getBody(String.class)__        List<String> result = null___        _        exchange.setOut(exchange.getIn())___        _        if (ObjectHelper.isEmpty(body)) {_            exchange.getOut().setBody("")__        } else if (body.startsWith(LDIF_HEADER)) {_            log.debug("Reading from LDIF body")__            result = processLdif(new StringReader(body))__        } else {_            URL loc__            try {_                loc = new URL(body)__                log.debug("Reading from URL: {}", loc)__                result = processLdif(new InputStreamReader(loc.openStream()))__            } catch (MalformedURLException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Failed to parse body as URL and LDIF", e)__                }_                throw new InvalidPayloadException(exchange, String.class)__            }_        }__        exchange.getOut().setBody(result)__    };process,the,body,there,are,two,options,ol,li,a,string,body,that,is,the,ldif,content,this,needs,to,start,with,version,1,li,li,a,string,body,that,is,a,url,to,ready,the,ldif,content,from,li,ol;public,void,process,exchange,exchange,throws,exception,string,body,exchange,get,in,get,body,string,class,list,string,result,null,exchange,set,out,exchange,get,in,if,object,helper,is,empty,body,exchange,get,out,set,body,else,if,body,starts,with,log,debug,reading,from,ldif,body,result,process,ldif,new,string,reader,body,else,url,loc,try,loc,new,url,body,log,debug,reading,from,url,loc,result,process,ldif,new,input,stream,reader,loc,open,stream,catch,malformed,urlexception,e,if,log,is,debug,enabled,log,debug,failed,to,parse,body,as,url,and,ldif,e,throw,new,invalid,payload,exception,exchange,string,class,exchange,get,out,set,body,result
LdifProducer -> public void process(Exchange exchange) throws Exception;1536687142;Process the body. There are two options:_<ol>_<li>A String body that is the LDIF content. This needs to start with_"version: 1".</li>_<li>A String body that is a URL to ready the LDIF content from</li>_</ol>;public void process(Exchange exchange) throws Exception {_        String body = exchange.getIn().getBody(String.class)__        List<String> result = null___        _        exchange.setOut(exchange.getIn())___        _        if (ObjectHelper.isEmpty(body)) {_            exchange.getOut().setBody("")__        } else if (body.startsWith(LDIF_HEADER)) {_            log.debug("Reading from LDIF body")__            result = processLdif(new StringReader(body))__        } else {_            URL loc__            try {_                loc = new URL(body)__                log.debug("Reading from URL: {}", loc)__                result = processLdif(new InputStreamReader(loc.openStream()))__            } catch (MalformedURLException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Failed to parse body as URL and LDIF", e)__                }_                throw new InvalidPayloadException(exchange, String.class)__            }_        }__        exchange.getOut().setBody(result)__    };process,the,body,there,are,two,options,ol,li,a,string,body,that,is,the,ldif,content,this,needs,to,start,with,version,1,li,li,a,string,body,that,is,a,url,to,ready,the,ldif,content,from,li,ol;public,void,process,exchange,exchange,throws,exception,string,body,exchange,get,in,get,body,string,class,list,string,result,null,exchange,set,out,exchange,get,in,if,object,helper,is,empty,body,exchange,get,out,set,body,else,if,body,starts,with,log,debug,reading,from,ldif,body,result,process,ldif,new,string,reader,body,else,url,loc,try,loc,new,url,body,log,debug,reading,from,url,loc,result,process,ldif,new,input,stream,reader,loc,open,stream,catch,malformed,urlexception,e,if,log,is,debug,enabled,log,debug,failed,to,parse,body,as,url,and,ldif,e,throw,new,invalid,payload,exception,exchange,string,class,exchange,get,out,set,body,result
LdifProducer -> public void process(Exchange exchange) throws Exception;1536687571;Process the body. There are two options:_<ol>_<li>A String body that is the LDIF content. This needs to start with_"version: 1".</li>_<li>A String body that is a URL to ready the LDIF content from</li>_</ol>;public void process(Exchange exchange) throws Exception {_        String body = exchange.getIn().getBody(String.class)__        List<String> result = null___        _        exchange.setOut(exchange.getIn())___        _        if (ObjectHelper.isEmpty(body)) {_            exchange.getOut().setBody("")__        } else if (body.startsWith(LDIF_HEADER)) {_            log.debug("Reading from LDIF body")__            result = processLdif(new StringReader(body))__        } else {_            URL loc__            try {_                loc = new URL(body)__                log.debug("Reading from URL: {}", loc)__                result = processLdif(new InputStreamReader(loc.openStream()))__            } catch (MalformedURLException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Failed to parse body as URL and LDIF", e)__                }_                throw new InvalidPayloadException(exchange, String.class)__            }_        }__        exchange.getOut().setBody(result)__    };process,the,body,there,are,two,options,ol,li,a,string,body,that,is,the,ldif,content,this,needs,to,start,with,version,1,li,li,a,string,body,that,is,a,url,to,ready,the,ldif,content,from,li,ol;public,void,process,exchange,exchange,throws,exception,string,body,exchange,get,in,get,body,string,class,list,string,result,null,exchange,set,out,exchange,get,in,if,object,helper,is,empty,body,exchange,get,out,set,body,else,if,body,starts,with,log,debug,reading,from,ldif,body,result,process,ldif,new,string,reader,body,else,url,loc,try,loc,new,url,body,log,debug,reading,from,url,loc,result,process,ldif,new,input,stream,reader,loc,open,stream,catch,malformed,urlexception,e,if,log,is,debug,enabled,log,debug,failed,to,parse,body,as,url,and,ldif,e,throw,new,invalid,payload,exception,exchange,string,class,exchange,get,out,set,body,result
LdifProducer -> public void process(Exchange exchange) throws Exception;1540108163;Process the body. There are two options:_<ol>_<li>A String body that is the LDIF content. This needs to start with_"version: 1".</li>_<li>A String body that is a URL to ready the LDIF content from</li>_</ol>;public void process(Exchange exchange) throws Exception {_        String body = exchange.getIn().getBody(String.class)__        List<String> result = null___        _        exchange.setOut(exchange.getIn())___        _        if (ObjectHelper.isEmpty(body)) {_            exchange.getOut().setBody("")__        } else if (body.startsWith(LDIF_HEADER)) {_            log.debug("Reading from LDIF body")__            result = processLdif(new StringReader(body))__        } else {_            URL loc__            try {_                loc = new URL(body)__                log.debug("Reading from URL: {}", loc)__                result = processLdif(new InputStreamReader(loc.openStream()))__            } catch (MalformedURLException e) {_                if (log.isDebugEnabled()) {_                    log.debug("Failed to parse body as URL and LDIF", e)__                }_                throw new InvalidPayloadException(exchange, String.class)__            }_        }__        exchange.getOut().setBody(result)__    };process,the,body,there,are,two,options,ol,li,a,string,body,that,is,the,ldif,content,this,needs,to,start,with,version,1,li,li,a,string,body,that,is,a,url,to,ready,the,ldif,content,from,li,ol;public,void,process,exchange,exchange,throws,exception,string,body,exchange,get,in,get,body,string,class,list,string,result,null,exchange,set,out,exchange,get,in,if,object,helper,is,empty,body,exchange,get,out,set,body,else,if,body,starts,with,log,debug,reading,from,ldif,body,result,process,ldif,new,string,reader,body,else,url,loc,try,loc,new,url,body,log,debug,reading,from,url,loc,result,process,ldif,new,input,stream,reader,loc,open,stream,catch,malformed,urlexception,e,if,log,is,debug,enabled,log,debug,failed,to,parse,body,as,url,and,ldif,e,throw,new,invalid,payload,exception,exchange,string,class,exchange,get,out,set,body,result
LdifProducer -> protected LdapConnection getLdapConnection() throws CamelException;1506148977;Get the LdapConnection. Since the object is a factory, we'll just call_that. A future enhancement is to use the ApacheDS LdapConnectionPool_object to keep a pool of working connections that avoids the connection_pause.__@return The created LDAP connection.;protected LdapConnection getLdapConnection() throws CamelException {_        return (LdapConnection)getEndpoint().getCamelContext().getRegistry().lookupByName(ldapConnectionName)__    };get,the,ldap,connection,since,the,object,is,a,factory,we,ll,just,call,that,a,future,enhancement,is,to,use,the,apache,ds,ldap,connection,pool,object,to,keep,a,pool,of,working,connections,that,avoids,the,connection,pause,return,the,created,ldap,connection;protected,ldap,connection,get,ldap,connection,throws,camel,exception,return,ldap,connection,get,endpoint,get,camel,context,get,registry,lookup,by,name,ldap,connection,name
LdifProducer -> protected LdapConnection getLdapConnection() throws CamelException;1506150963;Get the LdapConnection. Since the object is a factory, we'll just call_that. A future enhancement is to use the ApacheDS LdapConnectionPool_object to keep a pool of working connections that avoids the connection_pause.__@return The created LDAP connection.;protected LdapConnection getLdapConnection() throws CamelException {_        return (LdapConnection)getEndpoint().getCamelContext().getRegistry().lookupByName(ldapConnectionName)__    };get,the,ldap,connection,since,the,object,is,a,factory,we,ll,just,call,that,a,future,enhancement,is,to,use,the,apache,ds,ldap,connection,pool,object,to,keep,a,pool,of,working,connections,that,avoids,the,connection,pause,return,the,created,ldap,connection;protected,ldap,connection,get,ldap,connection,throws,camel,exception,return,ldap,connection,get,endpoint,get,camel,context,get,registry,lookup,by,name,ldap,connection,name
LdifProducer -> protected LdapConnection getLdapConnection() throws CamelException;1524063106;Get the LdapConnection. Since the object is a factory, we'll just call_that. A future enhancement is to use the ApacheDS LdapConnectionPool_object to keep a pool of working connections that avoids the connection_pause.__@return The created LDAP connection.;protected LdapConnection getLdapConnection() throws CamelException {_        return (LdapConnection)getEndpoint().getCamelContext().getRegistry().lookupByName(ldapConnectionName)__    };get,the,ldap,connection,since,the,object,is,a,factory,we,ll,just,call,that,a,future,enhancement,is,to,use,the,apache,ds,ldap,connection,pool,object,to,keep,a,pool,of,working,connections,that,avoids,the,connection,pause,return,the,created,ldap,connection;protected,ldap,connection,get,ldap,connection,throws,camel,exception,return,ldap,connection,get,endpoint,get,camel,context,get,registry,lookup,by,name,ldap,connection,name
LdifProducer -> protected LdapConnection getLdapConnection() throws CamelException;1536687142;Get the LdapConnection. Since the object is a factory, we'll just call_that. A future enhancement is to use the ApacheDS LdapConnectionPool_object to keep a pool of working connections that avoids the connection_pause.__@return The created LDAP connection.;protected LdapConnection getLdapConnection() throws CamelException {_        return (LdapConnection)getEndpoint().getCamelContext().getRegistry().lookupByName(ldapConnectionName)__    };get,the,ldap,connection,since,the,object,is,a,factory,we,ll,just,call,that,a,future,enhancement,is,to,use,the,apache,ds,ldap,connection,pool,object,to,keep,a,pool,of,working,connections,that,avoids,the,connection,pause,return,the,created,ldap,connection;protected,ldap,connection,get,ldap,connection,throws,camel,exception,return,ldap,connection,get,endpoint,get,camel,context,get,registry,lookup,by,name,ldap,connection,name
LdifProducer -> protected LdapConnection getLdapConnection() throws CamelException;1536687571;Get the LdapConnection. Since the object is a factory, we'll just call_that. A future enhancement is to use the ApacheDS LdapConnectionPool_object to keep a pool of working connections that avoids the connection_pause.__@return The created LDAP connection.;protected LdapConnection getLdapConnection() throws CamelException {_        return (LdapConnection)getEndpoint().getCamelContext().getRegistry().lookupByName(ldapConnectionName)__    };get,the,ldap,connection,since,the,object,is,a,factory,we,ll,just,call,that,a,future,enhancement,is,to,use,the,apache,ds,ldap,connection,pool,object,to,keep,a,pool,of,working,connections,that,avoids,the,connection,pause,return,the,created,ldap,connection;protected,ldap,connection,get,ldap,connection,throws,camel,exception,return,ldap,connection,get,endpoint,get,camel,context,get,registry,lookup,by,name,ldap,connection,name
LdifProducer -> protected LdapConnection getLdapConnection() throws CamelException;1540108163;Get the LdapConnection. Since the object is a factory, we'll just call_that. A future enhancement is to use the ApacheDS LdapConnectionPool_object to keep a pool of working connections that avoids the connection_pause.__@return The created LDAP connection.;protected LdapConnection getLdapConnection() throws CamelException {_        return (LdapConnection)getEndpoint().getCamelContext().getRegistry().lookupByName(ldapConnectionName)__    };get,the,ldap,connection,since,the,object,is,a,factory,we,ll,just,call,that,a,future,enhancement,is,to,use,the,apache,ds,ldap,connection,pool,object,to,keep,a,pool,of,working,connections,that,avoids,the,connection,pause,return,the,created,ldap,connection;protected,ldap,connection,get,ldap,connection,throws,camel,exception,return,ldap,connection,get,endpoint,get,camel,context,get,registry,lookup,by,name,ldap,connection,name
LdifProducer -> private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry);1506148977;Figure out the change is and what to do about it.__@param conn_@param ldifEntry_@return A success/failure message;private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {_        try {_            if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting add of " + ldifEntry.toString())__                }_                conn.add(ldifEntry.getEntry())__            } else if (ldifEntry.isChangeModify()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting modify of " + ldifEntry.toString())__                }_                conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray())__            } else if (ldifEntry.isChangeDelete()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting delete of " + ldifEntry.toString())__                }_                conn.delete(ldifEntry.getDn())__            } else if (ldifEntry.isChangeModDn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting DN move of " + ldifEntry.toString())__                }_                conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn())__            } else if (ldifEntry.isChangeModRdn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting RDN move of " + ldifEntry.toString())__                }_                conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn())__            }__            if (log.isDebugEnabled()) {_                log.debug("ldif success")__            }_            return "success"__        } catch (LdapException e) {_            if (log.isDebugEnabled()) {_                log.debug("failed to apply ldif", e)__            }_            return getRootCause(e)__        }_    };figure,out,the,change,is,and,what,to,do,about,it,param,conn,param,ldif,entry,return,a,success,failure,message;private,string,process,ldif,entry,ldap,connection,conn,ldif,entry,ldif,entry,try,if,ldif,entry,is,change,add,ldif,entry,is,ldif,content,if,log,is,debug,enabled,log,debug,attempting,add,of,ldif,entry,to,string,conn,add,ldif,entry,get,entry,else,if,ldif,entry,is,change,modify,if,log,is,debug,enabled,log,debug,attempting,modify,of,ldif,entry,to,string,conn,modify,ldif,entry,get,dn,ldif,entry,get,modification,array,else,if,ldif,entry,is,change,delete,if,log,is,debug,enabled,log,debug,attempting,delete,of,ldif,entry,to,string,conn,delete,ldif,entry,get,dn,else,if,ldif,entry,is,change,mod,dn,if,log,is,debug,enabled,log,debug,attempting,dn,move,of,ldif,entry,to,string,conn,move,and,rename,ldif,entry,get,dn,new,dn,ldif,entry,get,new,rdn,ldif,entry,get,new,superior,ldif,entry,is,delete,old,rdn,else,if,ldif,entry,is,change,mod,rdn,if,log,is,debug,enabled,log,debug,attempting,rdn,move,of,ldif,entry,to,string,conn,rename,ldif,entry,get,dn,new,rdn,ldif,entry,get,new,rdn,ldif,entry,is,delete,old,rdn,if,log,is,debug,enabled,log,debug,ldif,success,return,success,catch,ldap,exception,e,if,log,is,debug,enabled,log,debug,failed,to,apply,ldif,e,return,get,root,cause,e
LdifProducer -> private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry);1506150963;Figure out the change is and what to do about it.__@return A success/failure message;private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {_        try {_            if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting add of " + ldifEntry.toString())__                }_                conn.add(ldifEntry.getEntry())__            } else if (ldifEntry.isChangeModify()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting modify of " + ldifEntry.toString())__                }_                conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray())__            } else if (ldifEntry.isChangeDelete()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting delete of " + ldifEntry.toString())__                }_                conn.delete(ldifEntry.getDn())__            } else if (ldifEntry.isChangeModDn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting DN move of " + ldifEntry.toString())__                }_                conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn())__            } else if (ldifEntry.isChangeModRdn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting RDN move of " + ldifEntry.toString())__                }_                conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn())__            }__            log.debug("ldif success")__            return "success"__        } catch (LdapException e) {_            log.debug("failed to apply ldif", e)__            return getRootCause(e)__        }_    };figure,out,the,change,is,and,what,to,do,about,it,return,a,success,failure,message;private,string,process,ldif,entry,ldap,connection,conn,ldif,entry,ldif,entry,try,if,ldif,entry,is,change,add,ldif,entry,is,ldif,content,if,log,is,debug,enabled,log,debug,attempting,add,of,ldif,entry,to,string,conn,add,ldif,entry,get,entry,else,if,ldif,entry,is,change,modify,if,log,is,debug,enabled,log,debug,attempting,modify,of,ldif,entry,to,string,conn,modify,ldif,entry,get,dn,ldif,entry,get,modification,array,else,if,ldif,entry,is,change,delete,if,log,is,debug,enabled,log,debug,attempting,delete,of,ldif,entry,to,string,conn,delete,ldif,entry,get,dn,else,if,ldif,entry,is,change,mod,dn,if,log,is,debug,enabled,log,debug,attempting,dn,move,of,ldif,entry,to,string,conn,move,and,rename,ldif,entry,get,dn,new,dn,ldif,entry,get,new,rdn,ldif,entry,get,new,superior,ldif,entry,is,delete,old,rdn,else,if,ldif,entry,is,change,mod,rdn,if,log,is,debug,enabled,log,debug,attempting,rdn,move,of,ldif,entry,to,string,conn,rename,ldif,entry,get,dn,new,rdn,ldif,entry,get,new,rdn,ldif,entry,is,delete,old,rdn,log,debug,ldif,success,return,success,catch,ldap,exception,e,log,debug,failed,to,apply,ldif,e,return,get,root,cause,e
LdifProducer -> private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry);1524063106;Figure out the change is and what to do about it.__@return A success/failure message;private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {_        try {_            if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting add of " + ldifEntry.toString())__                }_                conn.add(ldifEntry.getEntry())__            } else if (ldifEntry.isChangeModify()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting modify of " + ldifEntry.toString())__                }_                conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray())__            } else if (ldifEntry.isChangeDelete()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting delete of " + ldifEntry.toString())__                }_                conn.delete(ldifEntry.getDn())__            } else if (ldifEntry.isChangeModDn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting DN move of " + ldifEntry.toString())__                }_                conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn())__            } else if (ldifEntry.isChangeModRdn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting RDN move of " + ldifEntry.toString())__                }_                conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn())__            }__            log.debug("ldif success")__            return "success"__        } catch (LdapException e) {_            log.debug("failed to apply ldif", e)__            return getRootCause(e)__        }_    };figure,out,the,change,is,and,what,to,do,about,it,return,a,success,failure,message;private,string,process,ldif,entry,ldap,connection,conn,ldif,entry,ldif,entry,try,if,ldif,entry,is,change,add,ldif,entry,is,ldif,content,if,log,is,debug,enabled,log,debug,attempting,add,of,ldif,entry,to,string,conn,add,ldif,entry,get,entry,else,if,ldif,entry,is,change,modify,if,log,is,debug,enabled,log,debug,attempting,modify,of,ldif,entry,to,string,conn,modify,ldif,entry,get,dn,ldif,entry,get,modification,array,else,if,ldif,entry,is,change,delete,if,log,is,debug,enabled,log,debug,attempting,delete,of,ldif,entry,to,string,conn,delete,ldif,entry,get,dn,else,if,ldif,entry,is,change,mod,dn,if,log,is,debug,enabled,log,debug,attempting,dn,move,of,ldif,entry,to,string,conn,move,and,rename,ldif,entry,get,dn,new,dn,ldif,entry,get,new,rdn,ldif,entry,get,new,superior,ldif,entry,is,delete,old,rdn,else,if,ldif,entry,is,change,mod,rdn,if,log,is,debug,enabled,log,debug,attempting,rdn,move,of,ldif,entry,to,string,conn,rename,ldif,entry,get,dn,new,rdn,ldif,entry,get,new,rdn,ldif,entry,is,delete,old,rdn,log,debug,ldif,success,return,success,catch,ldap,exception,e,log,debug,failed,to,apply,ldif,e,return,get,root,cause,e
LdifProducer -> private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry);1536687142;Figure out the change is and what to do about it.__@return A success/failure message;private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {_        try {_            if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting add of {}", ldifEntry.toString())__                }_                conn.add(ldifEntry.getEntry())__            } else if (ldifEntry.isChangeModify()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting modify of {}", ldifEntry.toString())__                }_                conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray())__            } else if (ldifEntry.isChangeDelete()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting delete of {}", ldifEntry.toString())__                }_                conn.delete(ldifEntry.getDn())__            } else if (ldifEntry.isChangeModDn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting DN move of {}", ldifEntry.toString())__                }_                conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn())__            } else if (ldifEntry.isChangeModRdn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting RDN move of {}", ldifEntry.toString())__                }_                conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn())__            }__            log.debug("ldif success")__            return "success"__        } catch (LdapException e) {_            log.debug("failed to apply ldif", e)__            return getRootCause(e)__        }_    };figure,out,the,change,is,and,what,to,do,about,it,return,a,success,failure,message;private,string,process,ldif,entry,ldap,connection,conn,ldif,entry,ldif,entry,try,if,ldif,entry,is,change,add,ldif,entry,is,ldif,content,if,log,is,debug,enabled,log,debug,attempting,add,of,ldif,entry,to,string,conn,add,ldif,entry,get,entry,else,if,ldif,entry,is,change,modify,if,log,is,debug,enabled,log,debug,attempting,modify,of,ldif,entry,to,string,conn,modify,ldif,entry,get,dn,ldif,entry,get,modification,array,else,if,ldif,entry,is,change,delete,if,log,is,debug,enabled,log,debug,attempting,delete,of,ldif,entry,to,string,conn,delete,ldif,entry,get,dn,else,if,ldif,entry,is,change,mod,dn,if,log,is,debug,enabled,log,debug,attempting,dn,move,of,ldif,entry,to,string,conn,move,and,rename,ldif,entry,get,dn,new,dn,ldif,entry,get,new,rdn,ldif,entry,get,new,superior,ldif,entry,is,delete,old,rdn,else,if,ldif,entry,is,change,mod,rdn,if,log,is,debug,enabled,log,debug,attempting,rdn,move,of,ldif,entry,to,string,conn,rename,ldif,entry,get,dn,new,rdn,ldif,entry,get,new,rdn,ldif,entry,is,delete,old,rdn,log,debug,ldif,success,return,success,catch,ldap,exception,e,log,debug,failed,to,apply,ldif,e,return,get,root,cause,e
LdifProducer -> private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry);1536687571;Figure out the change is and what to do about it.__@return A success/failure message;private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {_        try {_            if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting add of {}", ldifEntry)__                }_                conn.add(ldifEntry.getEntry())__            } else if (ldifEntry.isChangeModify()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting modify of {}", ldifEntry)__                }_                conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray())__            } else if (ldifEntry.isChangeDelete()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting delete of {}", ldifEntry)__                }_                conn.delete(ldifEntry.getDn())__            } else if (ldifEntry.isChangeModDn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting DN move of {}", ldifEntry)__                }_                conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn())__            } else if (ldifEntry.isChangeModRdn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting RDN move of {}", ldifEntry)__                }_                conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn())__            }__            log.debug("ldif success")__            return "success"__        } catch (LdapException e) {_            log.debug("failed to apply ldif", e)__            return getRootCause(e)__        }_    };figure,out,the,change,is,and,what,to,do,about,it,return,a,success,failure,message;private,string,process,ldif,entry,ldap,connection,conn,ldif,entry,ldif,entry,try,if,ldif,entry,is,change,add,ldif,entry,is,ldif,content,if,log,is,debug,enabled,log,debug,attempting,add,of,ldif,entry,conn,add,ldif,entry,get,entry,else,if,ldif,entry,is,change,modify,if,log,is,debug,enabled,log,debug,attempting,modify,of,ldif,entry,conn,modify,ldif,entry,get,dn,ldif,entry,get,modification,array,else,if,ldif,entry,is,change,delete,if,log,is,debug,enabled,log,debug,attempting,delete,of,ldif,entry,conn,delete,ldif,entry,get,dn,else,if,ldif,entry,is,change,mod,dn,if,log,is,debug,enabled,log,debug,attempting,dn,move,of,ldif,entry,conn,move,and,rename,ldif,entry,get,dn,new,dn,ldif,entry,get,new,rdn,ldif,entry,get,new,superior,ldif,entry,is,delete,old,rdn,else,if,ldif,entry,is,change,mod,rdn,if,log,is,debug,enabled,log,debug,attempting,rdn,move,of,ldif,entry,conn,rename,ldif,entry,get,dn,new,rdn,ldif,entry,get,new,rdn,ldif,entry,is,delete,old,rdn,log,debug,ldif,success,return,success,catch,ldap,exception,e,log,debug,failed,to,apply,ldif,e,return,get,root,cause,e
LdifProducer -> private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry);1540108163;Figure out the change is and what to do about it.__@return A success/failure message;private String processLdifEntry(LdapConnection conn, LdifEntry ldifEntry) {_        try {_            if (ldifEntry.isChangeAdd() || ldifEntry.isLdifContent()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting add of {}", ldifEntry)__                }_                conn.add(ldifEntry.getEntry())__            } else if (ldifEntry.isChangeModify()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting modify of {}", ldifEntry)__                }_                conn.modify(ldifEntry.getDn(), ldifEntry.getModificationArray())__            } else if (ldifEntry.isChangeDelete()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting delete of {}", ldifEntry)__                }_                conn.delete(ldifEntry.getDn())__            } else if (ldifEntry.isChangeModDn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting DN move of {}", ldifEntry)__                }_                conn.moveAndRename(ldifEntry.getDn(), new Dn(ldifEntry.getNewRdn(), ldifEntry.getNewSuperior()), ldifEntry.isDeleteOldRdn())__            } else if (ldifEntry.isChangeModRdn()) {_                if (log.isDebugEnabled()) {_                    log.debug("attempting RDN move of {}", ldifEntry)__                }_                conn.rename(ldifEntry.getDn(), new Rdn(ldifEntry.getNewRdn()), ldifEntry.isDeleteOldRdn())__            }__            log.debug("ldif success")__            return "success"__        } catch (LdapException e) {_            log.debug("failed to apply ldif", e)__            return getRootCause(e)__        }_    };figure,out,the,change,is,and,what,to,do,about,it,return,a,success,failure,message;private,string,process,ldif,entry,ldap,connection,conn,ldif,entry,ldif,entry,try,if,ldif,entry,is,change,add,ldif,entry,is,ldif,content,if,log,is,debug,enabled,log,debug,attempting,add,of,ldif,entry,conn,add,ldif,entry,get,entry,else,if,ldif,entry,is,change,modify,if,log,is,debug,enabled,log,debug,attempting,modify,of,ldif,entry,conn,modify,ldif,entry,get,dn,ldif,entry,get,modification,array,else,if,ldif,entry,is,change,delete,if,log,is,debug,enabled,log,debug,attempting,delete,of,ldif,entry,conn,delete,ldif,entry,get,dn,else,if,ldif,entry,is,change,mod,dn,if,log,is,debug,enabled,log,debug,attempting,dn,move,of,ldif,entry,conn,move,and,rename,ldif,entry,get,dn,new,dn,ldif,entry,get,new,rdn,ldif,entry,get,new,superior,ldif,entry,is,delete,old,rdn,else,if,ldif,entry,is,change,mod,rdn,if,log,is,debug,enabled,log,debug,attempting,rdn,move,of,ldif,entry,conn,rename,ldif,entry,get,dn,new,rdn,ldif,entry,get,new,rdn,ldif,entry,is,delete,old,rdn,log,debug,ldif,success,return,success,catch,ldap,exception,e,log,debug,failed,to,apply,ldif,e,return,get,root,cause,e
LdifProducer -> private List<String> processLdif(Reader reader) throws CamelException;1506148977;Process an LDIF file from a reader.__@param ldifReader_@return;private List<String> processLdif(Reader reader) throws CamelException {_        LdapConnection conn = getLdapConnection()__        LdifReader ldifReader = null__        List<String> results = new ArrayList<String>()___        _        try {_            ldifReader = new LdifReader(reader)__        } catch (LdapException e) {_            throw new CamelException("Unable to create LDIF reader", e)__        }__        _        for (LdifEntry e : ldifReader) {_            results.add(processLdifEntry(conn, e))__        }__        _        try {_            conn.close()__        } catch (IOException e) {_            if (log.isDebugEnabled()) {_                log.debug("failed to close the LDAP connection", e)__            }_        }_        try {_            ldifReader.close()__        } catch (IOException e) {_            if (log.isDebugEnabled()) {_                log.debug("failed to close LDIF reader", e)__            }_        }__        return results__    };process,an,ldif,file,from,a,reader,param,ldif,reader,return;private,list,string,process,ldif,reader,reader,throws,camel,exception,ldap,connection,conn,get,ldap,connection,ldif,reader,ldif,reader,null,list,string,results,new,array,list,string,try,ldif,reader,new,ldif,reader,reader,catch,ldap,exception,e,throw,new,camel,exception,unable,to,create,ldif,reader,e,for,ldif,entry,e,ldif,reader,results,add,process,ldif,entry,conn,e,try,conn,close,catch,ioexception,e,if,log,is,debug,enabled,log,debug,failed,to,close,the,ldap,connection,e,try,ldif,reader,close,catch,ioexception,e,if,log,is,debug,enabled,log,debug,failed,to,close,ldif,reader,e,return,results
LdifProducer -> private List<String> processLdif(Reader reader) throws CamelException;1506150963;Process an LDIF file from a reader.;private List<String> processLdif(Reader reader) throws CamelException {_        LdapConnection conn = getLdapConnection()__        LdifReader ldifReader___        List<String> results = new ArrayList<String>()___        _        try {_            ldifReader = new LdifReader(reader)__        } catch (LdapException e) {_            throw new CamelException("Unable to create LDIF reader", e)__        }__        _        for (LdifEntry e : ldifReader) {_            results.add(processLdifEntry(conn, e))__        }__        IOHelper.close(conn, ldifReader, reader)___        return results__    };process,an,ldif,file,from,a,reader;private,list,string,process,ldif,reader,reader,throws,camel,exception,ldap,connection,conn,get,ldap,connection,ldif,reader,ldif,reader,list,string,results,new,array,list,string,try,ldif,reader,new,ldif,reader,reader,catch,ldap,exception,e,throw,new,camel,exception,unable,to,create,ldif,reader,e,for,ldif,entry,e,ldif,reader,results,add,process,ldif,entry,conn,e,iohelper,close,conn,ldif,reader,reader,return,results
LdifProducer -> private List<String> processLdif(Reader reader) throws CamelException;1524063106;Process an LDIF file from a reader.;private List<String> processLdif(Reader reader) throws CamelException {_        LdapConnection conn = getLdapConnection()__        LdifReader ldifReader___        List<String> results = new ArrayList<>()___        _        try {_            ldifReader = new LdifReader(reader)__        } catch (LdapException e) {_            throw new CamelException("Unable to create LDIF reader", e)__        }__        _        for (LdifEntry e : ldifReader) {_            results.add(processLdifEntry(conn, e))__        }__        IOHelper.close(conn, ldifReader, reader)___        return results__    };process,an,ldif,file,from,a,reader;private,list,string,process,ldif,reader,reader,throws,camel,exception,ldap,connection,conn,get,ldap,connection,ldif,reader,ldif,reader,list,string,results,new,array,list,try,ldif,reader,new,ldif,reader,reader,catch,ldap,exception,e,throw,new,camel,exception,unable,to,create,ldif,reader,e,for,ldif,entry,e,ldif,reader,results,add,process,ldif,entry,conn,e,iohelper,close,conn,ldif,reader,reader,return,results
LdifProducer -> private List<String> processLdif(Reader reader) throws CamelException;1536687142;Process an LDIF file from a reader.;private List<String> processLdif(Reader reader) throws CamelException {_        LdapConnection conn = getLdapConnection()__        LdifReader ldifReader___        List<String> results = new ArrayList<>()___        _        try {_            ldifReader = new LdifReader(reader)__        } catch (LdapException e) {_            throw new CamelException("Unable to create LDIF reader", e)__        }__        _        for (LdifEntry e : ldifReader) {_            results.add(processLdifEntry(conn, e))__        }__        IOHelper.close(conn, ldifReader, reader)___        return results__    };process,an,ldif,file,from,a,reader;private,list,string,process,ldif,reader,reader,throws,camel,exception,ldap,connection,conn,get,ldap,connection,ldif,reader,ldif,reader,list,string,results,new,array,list,try,ldif,reader,new,ldif,reader,reader,catch,ldap,exception,e,throw,new,camel,exception,unable,to,create,ldif,reader,e,for,ldif,entry,e,ldif,reader,results,add,process,ldif,entry,conn,e,iohelper,close,conn,ldif,reader,reader,return,results
LdifProducer -> private List<String> processLdif(Reader reader) throws CamelException;1536687571;Process an LDIF file from a reader.;private List<String> processLdif(Reader reader) throws CamelException {_        LdapConnection conn = getLdapConnection()__        LdifReader ldifReader___        List<String> results = new ArrayList<>()___        _        try {_            ldifReader = new LdifReader(reader)__        } catch (LdapException e) {_            throw new CamelException("Unable to create LDIF reader", e)__        }__        _        for (LdifEntry e : ldifReader) {_            results.add(processLdifEntry(conn, e))__        }__        IOHelper.close(conn, ldifReader, reader)___        return results__    };process,an,ldif,file,from,a,reader;private,list,string,process,ldif,reader,reader,throws,camel,exception,ldap,connection,conn,get,ldap,connection,ldif,reader,ldif,reader,list,string,results,new,array,list,try,ldif,reader,new,ldif,reader,reader,catch,ldap,exception,e,throw,new,camel,exception,unable,to,create,ldif,reader,e,for,ldif,entry,e,ldif,reader,results,add,process,ldif,entry,conn,e,iohelper,close,conn,ldif,reader,reader,return,results
LdifProducer -> private List<String> processLdif(Reader reader) throws CamelException;1540108163;Process an LDIF file from a reader.;private List<String> processLdif(Reader reader) throws CamelException {_        LdapConnection conn = getLdapConnection()__        LdifReader ldifReader___        List<String> results = new ArrayList<>()___        _        try {_            ldifReader = new LdifReader(reader)__        } catch (LdapException e) {_            throw new CamelException("Unable to create LDIF reader", e)__        }__        _        for (LdifEntry e : ldifReader) {_            results.add(processLdifEntry(conn, e))__        }__        IOHelper.close(conn, ldifReader, reader)___        return results__    };process,an,ldif,file,from,a,reader;private,list,string,process,ldif,reader,reader,throws,camel,exception,ldap,connection,conn,get,ldap,connection,ldif,reader,ldif,reader,list,string,results,new,array,list,try,ldif,reader,new,ldif,reader,reader,catch,ldap,exception,e,throw,new,camel,exception,unable,to,create,ldif,reader,e,for,ldif,entry,e,ldif,reader,results,add,process,ldif,entry,conn,e,iohelper,close,conn,ldif,reader,reader,return,results
