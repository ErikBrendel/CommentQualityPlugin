commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myAuthHandler", getSecurityHandler()).     return jndi. }
false;private;0;18;;private SecurityHandler getSecurityHandler() throws IOException {     Constraint constraint = new Constraint(Constraint.__BASIC_AUTH, "user").     constraint.setAuthenticate(true).     ConstraintMapping cm = new ConstraintMapping().     cm.setPathSpec("/*").     cm.setConstraint(constraint).     ConstraintSecurityHandler sh = new ConstraintSecurityHandler().     sh.setAuthenticator(new BasicAuthenticator()).     sh.setConstraintMappings(Arrays.asList(new ConstraintMapping[] { cm })).     HashLoginService loginService = new HashLoginService("MyRealm", "src/test/resources/myRealm.properties").     sh.setLoginService(loginService).     sh.setConstraintMappings(Arrays.asList(new ConstraintMapping[] { cm })).     return sh. }
false;public;0;5;;@Test public void testHttpBasicAuth() throws Exception {     String out = template.requestBody("http://localhost:{{port}}/test?authMethod=Basic&authUsername=donald&authPassword=duck", "Hello World", String.class).     assertEquals("Bye World", out). }
false;public;0;10;;@Test public void testHttpBasicAuthInvalidPassword() throws Exception {     try {         template.requestBody("http://localhost:{{port}}/test?authMethod=Basic&authUsername=donald&authPassword=sorry", "Hello World", String.class).         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(401, cause.getStatusCode()).     } }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class).     assertNotNull(req).     Principal user = req.getUserPrincipal().     assertNotNull(user).     assertEquals("donald", user.getName()). }
false;public;0;14;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test?handlers=myAuthHandler").process(new Processor() {          public void process(Exchange exchange) throws Exception {             HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class).             assertNotNull(req).             Principal user = req.getUserPrincipal().             assertNotNull(user).             assertEquals("donald", user.getName()).         }     }).transform(constant("Bye World")). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test?handlers=myAuthHandler").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class).                     assertNotNull(req).                     Principal user = req.getUserPrincipal().                     assertNotNull(user).                     assertEquals("donald", user.getName()).                 }             }).transform(constant("Bye World")).         }     }. }
