commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendWithSOTimeoutNoTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     String out = template.requestBody("http://localhost:{{port}}/myservice?socketTimeout=5000", null, String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testSendWithSOTimeoutTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     try {         // we use a timeout of 1 second         template.requestBody("http://localhost:{{port}}/myservice?socketTimeout=1000", null, String.class).         fail("Should throw an exception").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(SocketTimeoutException.class, e.getCause()).     }     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/myservice").delay(2000).transform().constant("Bye World").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/myservice").delay(2000).transform().constant("Bye World").to("mock:result").         }     }. }
