commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testJettyAsyncTimeout() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     StopWatch watch = new StopWatch().     try {         template.requestBody("http://localhost:{{port}}/myservice", null, String.class).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         log.info("Timeout hit and client got reply with failure status code").         long taken = watch.taken().         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(504, cause.getStatusCode()).         // should be approx 30-34 sec.         assertTrue("Timeout should occur faster than " + taken, taken < 34000).     }     assertMockEndpointsSatisfied(2, TimeUnit.MINUTES). }
false;public;0;8;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("jetty:http://localhost:{{port}}/myservice").to("async:bye:world?delay=45s").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("jetty:http://localhost:{{port}}/myservice").to("async:bye:world?delay=45s").to("mock:result").         }     }. }
