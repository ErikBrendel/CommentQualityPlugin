commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testHttpGetWithParamsViaURI() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedHeaderReceived("one", "einz").     mock.expectedHeaderReceived("two", "twei").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET").     // give Jetty time to startup properly     Thread.sleep(1000).     template.requestBody(serverUri + "?one=einz&two=twei", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;19;;@Test public void testHttpGetWithParamsViaHeader() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedHeaderReceived("one", "uno").     mock.expectedHeaderReceived("two", "dos").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET").     // give Jetty time to startup properly     Thread.sleep(1000).     template.requestBodyAndHeader(serverUri, null, Exchange.HTTP_QUERY, "one=uno&two=dos").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testHttpPost() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST").     // give Jetty time to startup properly     Thread.sleep(1000).     template.requestBody(serverUri, "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(serverUri).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(serverUri).to("mock:result").         }     }. }
