commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     // to enable the JMX connector     enableJMX().     System.setProperty("org.apache.camel.jmx.createRmiConnector", "True").     super.setUp(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     LOG.debug("URL is: " + exchange.getIn().getHeader("url")). }
false;public;0;10;;@Override public void configure() throws Exception {     from("jetty:http://localhost:{{port}}/leak").transform(constant("Bye World")).     from("direct:leak").process(new Processor() {          public void process(Exchange exchange) throws Exception {             LOG.debug("URL is: " + exchange.getIn().getHeader("url")).         }     }).recipientList(header("url")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty:http://localhost:{{port}}/leak").transform(constant("Bye World")).             from("direct:leak").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     LOG.debug("URL is: " + exchange.getIn().getHeader("url")).                 }             }).recipientList(header("url")).         }     }. }
false;public;0;4;;@Test public void testNothing() { // do nothing as this test is manual }
true;public;0;13;// TODO: disabled as this is a manual test ;// @Test // TODO: disabled as this is a manual test public void testSendAlot() throws Exception {     Endpoint ep = context.getEndpoint("direct:leak").     Producer p = ep.createProducer().     p.start().     for (int i = 0. i < 10000. i++) {         Exchange ex = ep.createExchange().         ex.getIn().setHeader("url", "http://localhost:{{port}}/leak?id=" + i).         p.process(ex).     }     p.stop(). }
