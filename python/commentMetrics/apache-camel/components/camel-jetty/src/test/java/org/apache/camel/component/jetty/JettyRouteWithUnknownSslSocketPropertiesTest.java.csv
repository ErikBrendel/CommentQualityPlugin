commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;14;;@Override public void configure() throws Exception {     // define socket connector properties     Map<String, Object> properties = new HashMap<>().     properties.put("acceptors", 4).     properties.put("statsOn", "false").     properties.put("soLingerTime", "5000").     properties.put("doesNotExist", 2000).     JettyHttpComponent jetty = getContext().getComponent("jetty", JettyHttpComponent.class).     jetty.setSslSocketConnectorProperties(properties).     from("jetty:https://localhost:{{port}}/myapp/myservice").to("log:foo"). }
false;public;0;30;;@Test public void testUnknownProperty() throws Exception {     if (!Server.getVersion().startsWith("8")) {         // SocketConnector props do not work for jetty 9         return.     }     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // define socket connector properties             Map<String, Object> properties = new HashMap<>().             properties.put("acceptors", 4).             properties.put("statsOn", "false").             properties.put("soLingerTime", "5000").             properties.put("doesNotExist", 2000).             JettyHttpComponent jetty = getContext().getComponent("jetty", JettyHttpComponent.class).             jetty.setSslSocketConnectorProperties(properties).             from("jetty:https://localhost:{{port}}/myapp/myservice").to("log:foo").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertTrue("Actual message: " + iae.getMessage(), iae.getMessage().endsWith("Unknown parameters=[{doesNotExist=2000}]")).     } }
