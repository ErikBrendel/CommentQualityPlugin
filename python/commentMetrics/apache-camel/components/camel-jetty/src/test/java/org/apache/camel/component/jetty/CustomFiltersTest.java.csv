commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     // set a marker attribute to show that this filter class was used     ((HttpServletResponse) response).addHeader("MyTestFilter", "true").     ((HttpServletResponse) response).setHeader("KeyWord", keyWord).     chain.doFilter(request, response). }
false;public;1;4;;@Override public void init(FilterConfig filterConfig) throws ServletException {     keyWord = filterConfig.getInitParameter("keyWord"). }
false;public;0;4;;@Override public void destroy() { // do nothing here }
false;private;1;19;;private void sendRequestAndVerify(String url) throws Exception {     HttpClient httpclient = new HttpClient().     PostMethod httppost = new PostMethod(url).     StringRequestEntity reqEntity = new StringRequestEntity("This is a test", null, null).     httppost.setRequestEntity(reqEntity).     int status = httpclient.executeMethod(httppost).     assertEquals("Get a wrong response status", 200, status).     String result = httppost.getResponseBodyAsString().     assertEquals("Get a wrong result", "This is a test response", result).     assertNotNull("Did not use custom multipart filter", httppost.getResponseHeader("MyTestFilter")).     // just make sure the KeyWord header is set     assertEquals("Did not set the right KeyWord header", "KEY", httppost.getResponseHeader("KeyWord").getValue()). }
false;public;0;4;;@Test public void testFilters() throws Exception {     sendRequestAndVerify("http://localhost:" + getPort() + "/testFilters"). }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     List<Filter> filters = new ArrayList<>().     filters.add(new MyTestFilter()).     jndi.bind("myFilters", filters).     return jndi. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     String request = in.getBody(String.class).     // The other form date can be get from the message header     exchange.getOut().setBody(request + " response"). }
false;public;0;12;;public void configure() throws Exception {     // Test the filter list options     from("jetty://http://localhost:{{port}}/testFilters?filtersRef=myFilters&filterInit.keyWord=KEY").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             String request = in.getBody(String.class).             // The other form date can be get from the message header             exchange.getOut().setBody(request + " response").         }     }). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // Test the filter list options             from("jetty://http://localhost:{{port}}/testFilters?filtersRef=myFilters&filterInit.keyWord=KEY").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     String request = in.getBody(String.class).                     // The other form date can be get from the message header                     exchange.getOut().setBody(request + " response").                 }             }).         }     }. }
