commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMethodNotAllowed() {     try {         template.sendBody("http://localhost:" + getPort() + "/users/123/basic", "body").         fail("Shall not pass!").     } catch (Exception e) {         HttpOperationFailedException hofe = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(405, hofe.getStatusCode()).     } }
false;public;0;8;;@Test public void testMethodAllowed() {     try {         template.sendBodyAndHeader("http://localhost:" + getPort() + "/users/123/basic", "body", Exchange.HTTP_METHOD, "GET").     } catch (Exception e) {         fail("Shall pass with GET http method!").     } }
false;public;0;15;;@Override public void configure() {     // configure to use jetty on localhost     restConfiguration().component("jetty").host("localhost").port(getPort()).     // use the rest DSL to define the rest services     rest("/users/").get("{id}/basic").route().to("mock:input").process(exchange -> {         String id = exchange.getIn().getHeader("id", String.class).         exchange.getOut().setBody(id + ".Donald Duck").     }). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             // configure to use jetty on localhost             restConfiguration().component("jetty").host("localhost").port(getPort()).             // use the rest DSL to define the rest services             rest("/users/").get("{id}/basic").route().to("mock:input").process(exchange -> {                 String id = exchange.getIn().getHeader("id", String.class).                 exchange.getOut().setBody(id + ".Donald Duck").             }).         }     }. }
