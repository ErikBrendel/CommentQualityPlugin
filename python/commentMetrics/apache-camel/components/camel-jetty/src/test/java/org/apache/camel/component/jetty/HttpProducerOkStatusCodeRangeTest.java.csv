commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testNoOk() throws Exception {     byte[] data = "Hello World".getBytes().     try {         template.requestBody("http://localhost:{{port}}/test?okStatusCodeRange=200-200", data, String.class).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(209, cause.getStatusCode()).         assertEquals("Not allowed", cause.getResponseBody()).     } }
false;public;0;6;;@Test public void testOk() throws Exception {     byte[] data = "Hello World".getBytes().     String out = template.requestBody("http://localhost:{{port}}/test?okStatusCodeRange=200-209", data, String.class).     assertEquals("Not allowed", out). }
false;public;0;6;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(209)).transform(constant("Not allowed")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(209)).transform(constant("Not allowed")).         }     }. }
