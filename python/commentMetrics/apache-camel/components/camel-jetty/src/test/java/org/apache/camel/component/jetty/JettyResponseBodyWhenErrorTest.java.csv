commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testResponseBodyWhenError() throws Exception {     try {         template.requestBody("http://localhost:{{port}}/myapp/myservice", "bookid=123").         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(500, cause.getStatusCode()).         String body = context.getTypeConverter().convertTo(String.class, cause.getResponseBody()).         assertTrue(body.indexOf("Damm") > -1).         assertTrue(body.indexOf("IllegalArgumentException") > -1).         assertNotNull(cause.getResponseHeaders()).         String type = cause.getResponseHeaders().get(Exchange.CONTENT_TYPE).         assertTrue(type.startsWith("text/plain")).     } }
false;public;0;4;;public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("jetty:http://localhost:{{port}}/myapp/myservice").process(new MyBookService()). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("jetty:http://localhost:{{port}}/myapp/myservice").process(new MyBookService()).         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Damm"). }
