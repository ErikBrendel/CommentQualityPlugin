commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     route += "B". }
false;public;0;20;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("jetty://http://localhost:{{port}}/myserver").wireTap("direct:continue").transform(constant("OK")).     from("direct:continue").delay(1500).process(new Processor() {          public void process(Exchange exchange) throws Exception {             route += "B".         }     }).to("mock:result"). // END SNIPPET: e1 }
false;public;0;40;;@Test public void testSimulateInOnlyUsingWireTap() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("jetty://http://localhost:{{port}}/myserver").wireTap("direct:continue").transform(constant("OK")).             from("direct:continue").delay(1500).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     route += "B".                 }             }).to("mock:result").         // END SNIPPET: e1         }     }).     context.start().     route = "".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("foo", "bar").     String reply = template.requestBody("http://localhost:{{port}}/myserver?foo=bar", null, String.class).     route += "A".     assertEquals("OK", reply).     assertMockEndpointsSatisfied().     assertEquals("AB", route). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     route += "B". }
false;public;0;20;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/myserver").setExchangePattern(ExchangePattern.InOnly).to("seda:continue").transform(constant("OK")).     from("seda:continue").delay(1000).process(new Processor() {          public void process(Exchange exchange) throws Exception {             route += "B".         }     }).to("mock:result"). }
false;public;0;40;;@Test public void testSimulateInOnly() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/myserver").setExchangePattern(ExchangePattern.InOnly).to("seda:continue").transform(constant("OK")).             from("seda:continue").delay(1000).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     route += "B".                 }             }).to("mock:result").         }     }).     context.start().     route = "".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("foo", "bar").     String reply = template.requestBody("http://localhost:{{port}}/myserver?foo=bar", null, String.class).     route += "A".     assertEquals("OK", reply).     assertMockEndpointsSatisfied().     assertEquals("AB", route). }
