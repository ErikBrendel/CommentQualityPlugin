commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("<b>Hello World</b>"). }
false;public;0;32;;public void configure() throws URISyntaxException {     JettyHttpComponent jetty = context.getComponent("jetty", JettyHttpComponent.class).     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost-alias.ks").toString()).     ksp.setPassword(pwd).     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword(pwd).     kmp.setKeyStore(ksp).     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     // Specify "server" cert alias     sslContextParameters.setCertAlias("server").     jetty.setSslContextParameters(sslContextParameters).     setSSLProps(jetty, "", "asdfasdfasdfdasfs", "sadfasdfasdfas").     from("jetty:https://localhost:" + port1 + "/test").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("<b>Hello World</b>").         }     }.     from("jetty:https://localhost:" + port1 + "/hello").process(proc).     from("jetty:https://localhost:" + port2 + "/test").to("mock:b"). }
false;protected;0;37;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws URISyntaxException {             JettyHttpComponent jetty = context.getComponent("jetty", JettyHttpComponent.class).             KeyStoreParameters ksp = new KeyStoreParameters().             ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost-alias.ks").toString()).             ksp.setPassword(pwd).             KeyManagersParameters kmp = new KeyManagersParameters().             kmp.setKeyPassword(pwd).             kmp.setKeyStore(ksp).             SSLContextParameters sslContextParameters = new SSLContextParameters().             sslContextParameters.setKeyManagers(kmp).             // Specify "server" cert alias             sslContextParameters.setCertAlias("server").             jetty.setSslContextParameters(sslContextParameters).             setSSLProps(jetty, "", "asdfasdfasdfdasfs", "sadfasdfasdfas").             from("jetty:https://localhost:" + port1 + "/test").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("<b>Hello World</b>").                 }             }.             from("jetty:https://localhost:" + port1 + "/hello").process(proc).             from("jetty:https://localhost:" + port2 + "/test").to("mock:b").         }     }. }
