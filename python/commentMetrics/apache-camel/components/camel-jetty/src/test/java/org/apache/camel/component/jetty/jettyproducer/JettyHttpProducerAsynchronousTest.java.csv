commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testAsynchronous() throws Exception {     // give Jetty time to startup properly     Thread.sleep(1000).     thread1 = "".     thread2 = "".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isEqualTo("Bye World").     Object body = null.     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     assertNotSame("Should not use same threads", thread1, thread2). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     thread2 = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     thread1 = Thread.currentThread().getName(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader("customer", "gold").     exchange.getIn().setBody("Bye World"). }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             thread1 = Thread.currentThread().getName().         }     }).to(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             thread2 = Thread.currentThread().getName().         }     }).to("mock:result").     from(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader("customer", "gold").             exchange.getIn().setBody("Bye World").         }     }). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     thread1 = Thread.currentThread().getName().                 }             }).to(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     thread2 = Thread.currentThread().getName().                 }             }).to("mock:result").             from(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader("customer", "gold").                     exchange.getIn().setBody("Bye World").                 }             }).         }     }. }
