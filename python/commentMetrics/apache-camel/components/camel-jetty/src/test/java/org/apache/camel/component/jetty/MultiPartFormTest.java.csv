commented;modifiers;parameterAmount;loc;comment;code
false;private;0;8;;private HttpEntity createMultipartRequestEntity() throws Exception {     File file = new File("src/test/resources/log4j2.properties").     return MultipartEntityBuilder.create().addTextBody("comment", "A binary file of some kind").addBinaryBody(file.getName(), file).build(). }
false;public;0;13;;@Test public void testSendMultiPartForm() throws Exception {     org.apache.http.client.HttpClient client = HttpClientBuilder.create().build().     HttpPost post = new HttpPost("http://localhost:" + getPort() + "/test").     post.setEntity(createMultipartRequestEntity()).     HttpResponse response = client.execute(post).     int status = response.getStatusLine().getStatusCode().     assertEquals("Get a wrong response status", 200, status).     String result = IOHelper.loadText(response.getEntity().getContent()).trim().     assertEquals("Get a wrong result", "A binary file of some kind", result). }
false;public;0;5;;@Test public void testSendMultiPartFormFromCamelHttpComponnent() throws Exception {     String result = template.requestBody("http://localhost:" + getPort() + "/test", createMultipartRequestEntity(), String.class).     assertEquals("Get a wrong result", "A binary file of some kind", result). }
false;public;1;30;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).     // The file name is attachment id     DataHandler data = in.getAttachment("log4j2.properties").     assertNotNull("Should get the DataHandle log4j2.properties", data).     // This assert is wrong, but the correct content-type     // (application/octet-stream)     // will not be returned until Jetty makes it available -     // currently the content-type     // returned is just the default for FileDataHandler (for     // the implentation being used)     // assertEquals("Get a wrong content type",     // "text/plain", data.getContentType()).     assertEquals("Got the wrong name", "log4j2.properties", data.getName()).     assertTrue("We should get the data from the DataHandle", data.getDataSource().getInputStream().available() > 0).     // The other form date can be get from the message     // header     // For binary attachment, header should also be populated by DataHandler but not payload     Object header = in.getHeader("log4j2.properties").     assertEquals(DataHandler.class, header.getClass()).     assertEquals(data, header).     exchange.getOut().setBody(in.getHeader("comment")). }
false;public;0;45;;public void configure() throws Exception {     // START SNIPPET: e1     // Set the jetty temp directory which store the file for multi     // part form     // camel-jetty will clean up the file after it handled the     // request.     // The option works rightly from Camel 2.4.0     getContext().getGlobalOptions().put("CamelJettyTempDir", "target").     from("jetty://http://localhost:{{port}}/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).             // The file name is attachment id             DataHandler data = in.getAttachment("log4j2.properties").             assertNotNull("Should get the DataHandle log4j2.properties", data).             // This assert is wrong, but the correct content-type             // (application/octet-stream)             // will not be returned until Jetty makes it available -             // currently the content-type             // returned is just the default for FileDataHandler (for             // the implentation being used)             // assertEquals("Get a wrong content type",             // "text/plain", data.getContentType()).             assertEquals("Got the wrong name", "log4j2.properties", data.getName()).             assertTrue("We should get the data from the DataHandle", data.getDataSource().getInputStream().available() > 0).             // The other form date can be get from the message             // header             // For binary attachment, header should also be populated by DataHandler but not payload             Object header = in.getHeader("log4j2.properties").             assertEquals(DataHandler.class, header.getClass()).             assertEquals(data, header).             exchange.getOut().setBody(in.getHeader("comment")).         }     }). // END SNIPPET: e1 }
false;protected;0;49;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // Set the jetty temp directory which store the file for multi             // part form             // camel-jetty will clean up the file after it handled the             // request.             // The option works rightly from Camel 2.4.0             getContext().getGlobalOptions().put("CamelJettyTempDir", "target").             from("jetty://http://localhost:{{port}}/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).                     // The file name is attachment id                     DataHandler data = in.getAttachment("log4j2.properties").                     assertNotNull("Should get the DataHandle log4j2.properties", data).                     // This assert is wrong, but the correct content-type                     // (application/octet-stream)                     // will not be returned until Jetty makes it available -                     // currently the content-type                     // returned is just the default for FileDataHandler (for                     // the implentation being used)                     // assertEquals("Get a wrong content type",                     // "text/plain", data.getContentType()).                     assertEquals("Got the wrong name", "log4j2.properties", data.getName()).                     assertTrue("We should get the data from the DataHandle", data.getDataSource().getInputStream().available() > 0).                     // The other form date can be get from the message                     // header                     // For binary attachment, header should also be populated by DataHandler but not payload                     Object header = in.getHeader("log4j2.properties").                     assertEquals(DataHandler.class, header.getClass()).                     assertEquals(data, header).                     exchange.getOut().setBody(in.getHeader("comment")).                 }             }).         // END SNIPPET: e1         }     }. }
