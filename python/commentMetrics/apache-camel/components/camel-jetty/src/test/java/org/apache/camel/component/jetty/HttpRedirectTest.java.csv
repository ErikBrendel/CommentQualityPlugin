commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testHttpRedirect() throws Exception {     try {         template.requestBody("http://localhost:{{port}}/test", "Hello World", String.class).         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(301, cause.getStatusCode()).         assertEquals(true, cause.isRedirectError()).         assertEquals(true, cause.hasRedirectLocation()).         assertEquals("http://localhost:" + getPort() + "/test", cause.getUri()).         assertEquals("http://localhost:" + getPort() + "/newtest", cause.getRedirectLocation()).     } }
false;public;0;17;;@Test public void testHttpRedirectFromCamelRoute() throws Exception {     MockEndpoint errorEndpoint = context.getEndpoint("mock:error", MockEndpoint.class).     errorEndpoint.expectedMessageCount(1).     MockEndpoint resultEndpoint = context.getEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(0).     try {         template.requestBody("direct:start", "Hello World", String.class).         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(302, cause.getStatusCode()).     }     errorEndpoint.assertIsSatisfied().     resultEndpoint.assertIsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 301).     exchange.getOut().setHeader("location", "http://localhost:" + getPort() + "/newtest"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 302). }
false;public;0;18;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 301).             exchange.getOut().setHeader("location", "http://localhost:" + getPort() + "/newtest").         }     }).     from("jetty://http://localhost:{{port}}/remove").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 302).         }     }).     from("direct:start").onException(HttpOperationFailedException.class).to("mock:error").end().to("http://localhost:{{port}}/remove?throwExceptionOnFailure=true").to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 301).                     exchange.getOut().setHeader("location", "http://localhost:" + getPort() + "/newtest").                 }             }).             from("jetty://http://localhost:{{port}}/remove").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 302).                 }             }).             from("direct:start").onException(HttpOperationFailedException.class).to("mock:error").end().to("http://localhost:{{port}}/remove?throwExceptionOnFailure=true").to("mock:result").         }     }. }
