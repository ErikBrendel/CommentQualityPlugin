commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testHttpProducerWithGzip() throws Exception {     String response = template.requestBodyAndHeader("http://localhost:" + port1 + "/gzip?httpClientConfigurer=#configurer", new ByteArrayInputStream("<Hello>World</Hello>".getBytes()), Exchange.CONTENT_ENCODING, "gzip", String.class).     assertEquals("The response is wrong", "<b>Hello World</b>", response). }
false;public;0;7;;@Test public void testGzipProxy() throws Exception {     String response = template.requestBodyAndHeader("http://localhost:" + port2 + "/route?httpClientConfigurer=#configurer", new ByteArrayInputStream("<Hello>World</Hello>".getBytes()), Exchange.CONTENT_ENCODING, "gzip", String.class).     assertEquals("The response is wrong", "<b>Hello World</b>", response). }
false;public;0;6;;@Test public void testGzipProducerWithGzipData() throws Exception {     String response = template.requestBodyAndHeader("direct:gzip", new ByteArrayInputStream("<Hello>World</Hello>".getBytes()), Exchange.CONTENT_ENCODING, "gzip", String.class).     assertEquals("The response is wrong", "<b>Hello World</b>", response). }
false;public;0;6;;@Test public void testGzipGet() throws Exception {     String response = template.requestBodyAndHeader("http://localhost:" + port1 + "/gzip", null, "Accept-Encoding", "gzip", String.class).     assertEquals("The response is wrong", "<b>Hello World for gzip</b>", response). }
false;public;1;4;;@Override public void configureHttpClient(HttpClientBuilder clientBuilder) {     clientBuilder.disableContentCompression(). }
false;public;1;16;;public void process(Exchange exchange) throws Exception {     // check the request method     HttpServletRequest request = exchange.getIn().getHeader(Exchange.HTTP_SERVLET_REQUEST, HttpServletRequest.class).     if ("POST".equals(request.getMethod())) {         String requestBody = exchange.getIn().getBody(String.class).         assertEquals("Get a wrong request string", "<Hello>World</Hello>", requestBody).     }     exchange.getOut().setHeader(Exchange.CONTENT_ENCODING, "gzip").     // check the Accept Encoding header     String header = exchange.getIn().getHeader("Accept-Encoding", String.class).     if (header != null && header.indexOf("gzip") > -1) {         exchange.getOut().setBody("<b>Hello World for gzip</b>").     } else {         exchange.getOut().setBody("<b>Hello World</b>").     } }
false;public;0;40;;public void configure() {     port1 = getPort().     port2 = getNextPort().     errorHandler(noErrorHandler()).     context.getRegistry(JndiRegistry.class).bind("configurer", new HttpClientConfigurer() {          @Override         public void configureHttpClient(HttpClientBuilder clientBuilder) {             clientBuilder.disableContentCompression().         }     }).     from("direct:gzip").marshal().gzip().setProperty(Exchange.SKIP_GZIP_ENCODING, ExpressionBuilder.constantExpression(Boolean.TRUE)).to("http://localhost:" + port1 + "/gzip?httpClientConfigurer=#configurer").unmarshal().gzip().     from("jetty:http://localhost:" + port1 + "/gzip").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // check the request method             HttpServletRequest request = exchange.getIn().getHeader(Exchange.HTTP_SERVLET_REQUEST, HttpServletRequest.class).             if ("POST".equals(request.getMethod())) {                 String requestBody = exchange.getIn().getBody(String.class).                 assertEquals("Get a wrong request string", "<Hello>World</Hello>", requestBody).             }             exchange.getOut().setHeader(Exchange.CONTENT_ENCODING, "gzip").             // check the Accept Encoding header             String header = exchange.getIn().getHeader("Accept-Encoding", String.class).             if (header != null && header.indexOf("gzip") > -1) {                 exchange.getOut().setBody("<b>Hello World for gzip</b>").             } else {                 exchange.getOut().setBody("<b>Hello World</b>").             }         }     }).     from("jetty:http://localhost:" + port2 + "/route?bridgeEndpoint=true&httpClientConfigurer=#configurer").to("http://localhost:" + port1 + "/gzip?bridgeEndpoint=true&httpClientConfigurer=#configurer"). }
false;protected;0;44;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getNextPort().             errorHandler(noErrorHandler()).             context.getRegistry(JndiRegistry.class).bind("configurer", new HttpClientConfigurer() {                  @Override                 public void configureHttpClient(HttpClientBuilder clientBuilder) {                     clientBuilder.disableContentCompression().                 }             }).             from("direct:gzip").marshal().gzip().setProperty(Exchange.SKIP_GZIP_ENCODING, ExpressionBuilder.constantExpression(Boolean.TRUE)).to("http://localhost:" + port1 + "/gzip?httpClientConfigurer=#configurer").unmarshal().gzip().             from("jetty:http://localhost:" + port1 + "/gzip").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // check the request method                     HttpServletRequest request = exchange.getIn().getHeader(Exchange.HTTP_SERVLET_REQUEST, HttpServletRequest.class).                     if ("POST".equals(request.getMethod())) {                         String requestBody = exchange.getIn().getBody(String.class).                         assertEquals("Get a wrong request string", "<Hello>World</Hello>", requestBody).                     }                     exchange.getOut().setHeader(Exchange.CONTENT_ENCODING, "gzip").                     // check the Accept Encoding header                     String header = exchange.getIn().getHeader("Accept-Encoding", String.class).                     if (header != null && header.indexOf("gzip") > -1) {                         exchange.getOut().setBody("<b>Hello World for gzip</b>").                     } else {                         exchange.getOut().setBody("<b>Hello World</b>").                     }                 }             }).             from("jetty:http://localhost:" + port2 + "/route?bridgeEndpoint=true&httpClientConfigurer=#configurer").to("http://localhost:" + port1 + "/gzip?bridgeEndpoint=true&httpClientConfigurer=#configurer").         }     }. }
