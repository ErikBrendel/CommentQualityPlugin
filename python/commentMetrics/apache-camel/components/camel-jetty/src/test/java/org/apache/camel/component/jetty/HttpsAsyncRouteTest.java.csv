commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override @Before public void setUp() throws Exception {     port1 = getNextPort().     port2 = getNextPort(port1 + 1).     super.setUp().     // ensure jsse clients can validate the self signed dummy localhost cert,     // use the server keystore as the trust store for these tests     URL trustStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     setSystemProp("javax.net.ssl.trustStore", trustStoreUrl.toURI().getPath()). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     restoreSystemProperties().     super.tearDown(). }
false;protected;2;4;;protected void setSystemProp(String key, String value) {     String originalValue = System.setProperty(key, value).     originalValues.put(key, originalValue != null ? originalValue : NULL_VALUE_MARKER). }
false;protected;0;10;;protected void restoreSystemProperties() {     for (Object key : originalValues.keySet()) {         Object value = originalValues.get(key).         if (NULL_VALUE_MARKER.equals(value)) {             System.clearProperty((String) key).         } else {             System.setProperty((String) key, (String) value).         }     } }
false;public;0;29;;@Test public void testEndpoint() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mockEndpointA = resolveMandatoryEndpoint("mock:a", MockEndpoint.class).     mockEndpointA.expectedBodiesReceived(expectedBody).     MockEndpoint mockEndpointB = resolveMandatoryEndpoint("mock:b", MockEndpoint.class).     mockEndpointB.expectedBodiesReceived(expectedBody).     invokeHttpEndpoint().     mockEndpointA.assertIsSatisfied().     mockEndpointB.assertIsSatisfied().     List<Exchange> list = mockEndpointA.getReceivedExchanges().     Exchange exchange = list.get(0).     assertNotNull("exchange", exchange).     Message in = exchange.getIn().     assertNotNull("in", in).     Map<String, Object> headers = in.getHeaders().     log.info("Headers: " + headers).     assertTrue("Should be more than one header but was: " + headers, headers.size() > 0). }
false;public;0;15;;@Test public void testEndpointWithoutHttps() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:a", MockEndpoint.class).     try {         template.sendBodyAndHeader("http://localhost:" + port1 + "/test", expectedBody, "Content-Type", "application/xml").         fail("expect exception on access to https endpoint via http").     } catch (RuntimeCamelException expected) {     }     assertTrue("mock endpoint was not called", mockEndpoint.getExchanges().isEmpty()). }
false;public;0;17;;@Test public void testHelloEndpoint() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     ByteArrayOutputStream os = new ByteArrayOutputStream().     InputStream is = new URL("https://localhost:" + port1 + "/hello").openStream().     int c.     while ((c = is.read()) >= 0) {         os.write(c).     }     String data = new String(os.toByteArray()).     assertEquals("<b>Hello World</b>", data). }
false;public;0;13;;@Test public void testHelloEndpointWithoutHttps() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     try {         new URL("http://localhost:" + port1 + "/hello").openStream().         fail("expected SocketException on use ot http").     } catch (SocketException expected) {     } }
false;protected;0;4;;protected void invokeHttpEndpoint() throws IOException {     template.sendBodyAndHeader(getHttpProducerScheme() + "localhost:" + port1 + "/test", expectedBody, "Content-Type", "application/xml").     template.sendBodyAndHeader(getHttpProducerScheme() + "localhost:" + port2 + "/test", expectedBody, "Content-Type", "application/xml"). }
false;protected;1;11;;protected void configureSslContextFactory(SslContextFactory sslContextFactory) {     sslContextFactory.setKeyManagerPassword(pwd).     sslContextFactory.setKeyStorePassword(pwd).     URL keyStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     try {         sslContextFactory.setKeyStorePath(keyStoreUrl.toURI().getPath()).     } catch (URISyntaxException e) {         throw new RuntimeException(e.getMessage(), e).     }     sslContextFactory.setTrustStoreType("JKS"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("<b>Hello World</b>"). }
false;public;0;18;;public void configure() throws URISyntaxException {     JettyHttpComponent componentJetty = (JettyHttpComponent) context.getComponent("jetty").     componentJetty.setSslPassword(pwd).     componentJetty.setSslKeyPassword(pwd).     URL keyStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     componentJetty.setKeystore(keyStoreUrl.toURI().getPath()).     from("jetty:https://localhost:" + port1 + "/test?async=true&useContinuation=false").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("<b>Hello World</b>").         }     }.     from("jetty:https://localhost:" + port1 + "/hello?async=true&useContinuation=false").process(proc).     from("jetty:https://localhost:" + port2 + "/test?async=true&useContinuation=false").to("mock:b"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws URISyntaxException {             JettyHttpComponent componentJetty = (JettyHttpComponent) context.getComponent("jetty").             componentJetty.setSslPassword(pwd).             componentJetty.setSslKeyPassword(pwd).             URL keyStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").             componentJetty.setKeystore(keyStoreUrl.toURI().getPath()).             from("jetty:https://localhost:" + port1 + "/test?async=true&useContinuation=false").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("<b>Hello World</b>").                 }             }.             from("jetty:https://localhost:" + port1 + "/hello?async=true&useContinuation=false").process(proc).             from("jetty:https://localhost:" + port2 + "/test?async=true&useContinuation=false").to("mock:b").         }     }. }
