commented;modifiers;parameterAmount;loc;comment;code
false;private;1;9;;private Connector createSslSocketConnector(int port) throws URISyntaxException {     /*         SslSelectChannelConnector sslSocketConnector = new SslSelectChannelConnector().         configureSslContextFactory(sslSocketConnector.getSslContextFactory()).         sslSocketConnector.setPort(port).         return sslSocketConnector.         */     return null. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("<b>Hello World</b>"). }
false;public;0;22;;public void configure() throws URISyntaxException {     // START SNIPPET: e1     // create SSL select channel connectors for port 9080 and 9090     Map<Integer, Connector> connectors = new HashMap<>().     connectors.put(port1, createSslSocketConnector(port1)).     connectors.put(port2, createSslSocketConnector(port2)).     JettyHttpComponent jetty = getContext().getComponent("jetty", JettyHttpComponent.class).     jetty.setSslSocketConnectors(connectors).     // END SNIPPET: e1     from("jetty:https://localhost:" + port1 + "/test").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("<b>Hello World</b>").         }     }.     from("jetty:https://localhost:" + port1 + "/hello").process(proc).     from("jetty:https://localhost:" + port2 + "/test").to("mock:b"). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws URISyntaxException {             // START SNIPPET: e1             // create SSL select channel connectors for port 9080 and 9090             Map<Integer, Connector> connectors = new HashMap<>().             connectors.put(port1, createSslSocketConnector(port1)).             connectors.put(port2, createSslSocketConnector(port2)).             JettyHttpComponent jetty = getContext().getComponent("jetty", JettyHttpComponent.class).             jetty.setSslSocketConnectors(connectors).             // END SNIPPET: e1             from("jetty:https://localhost:" + port1 + "/test").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("<b>Hello World</b>").                 }             }.             from("jetty:https://localhost:" + port1 + "/hello").process(proc).             from("jetty:https://localhost:" + port2 + "/test").to("mock:b").         }     }. }
