commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     // ensure we overflow and spool to disk     context.getStreamCachingStrategy().setSpoolThreshold(5000).     context.setStreamCaching(true).     return context. }
false;public;0;11;;@Test public void testStreamCache() throws Exception {     StringBuffer sb = new StringBuffer().     for (int i = 0. i < 10000. i++) {         sb.append("0123456789").     }     String input = sb.toString().     String out = template.requestBody("direct:input", input, String.class).     assertEquals(input, out). }
false;public;1;4;;@Override public void process(final Exchange exchange) throws Exception {     Assert.assertFalse(exchange.hasOut()). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:input").to("jetty:http://localhost:" + getPort() + "/input").     from("jetty:http://localhost:" + getPort() + "/input").process(new Processor() {          @Override         public void process(final Exchange exchange) throws Exception {             Assert.assertFalse(exchange.hasOut()).         }     }). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:input").to("jetty:http://localhost:" + getPort() + "/input").             from("jetty:http://localhost:" + getPort() + "/input").process(new Processor() {                  @Override                 public void process(final Exchange exchange) throws Exception {                     Assert.assertFalse(exchange.hasOut()).                 }             }).         }     }. }
