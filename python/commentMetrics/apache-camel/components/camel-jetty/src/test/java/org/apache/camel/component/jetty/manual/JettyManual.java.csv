commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test @Ignore public void testManual() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull("Body should not be null", body). }
false;public;0;11;;public void configure() throws Exception {     from("jetty:http://localhost:" + AvailablePortFinder.getNextAvailable() + "/ myapp / myservice").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull("Body should not be null", body).         }     }).transform(constant("OK")).setHeader("Content-Type", constant("text/plain")).to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty:http://localhost:" + AvailablePortFinder.getNextAvailable() + "/ myapp / myservice").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull("Body should not be null", body).                 }             }).transform(constant("OK")).setHeader("Content-Type", constant("text/plain")).to("mock:result").         }     }. }
