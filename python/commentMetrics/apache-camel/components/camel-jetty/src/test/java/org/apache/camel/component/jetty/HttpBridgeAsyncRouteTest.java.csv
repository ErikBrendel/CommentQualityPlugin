commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // get the request URL and copy it to the request body     String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).     exchange.getOut().setBody(uri). }
false;public;0;18;;public void configure() {     port1 = getPort().     port2 = getNextPort().     errorHandler(noErrorHandler()).     Processor serviceProc = new Processor() {          public void process(Exchange exchange) throws Exception {             // get the request URL and copy it to the request body             String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).             exchange.getOut().setBody(uri).         }     }.     from("jetty:http://localhost:" + port2 + "/test/hello?async=true&useContinuation=false").to("http://localhost:" + port1 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").     from("jetty://http://localhost:" + port1 + "?matchOnUriPrefix=true&async=true&useContinuation=false").process(serviceProc). }
false;protected;0;22;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getNextPort().             errorHandler(noErrorHandler()).             Processor serviceProc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     // get the request URL and copy it to the request body                     String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).                     exchange.getOut().setBody(uri).                 }             }.             from("jetty:http://localhost:" + port2 + "/test/hello?async=true&useContinuation=false").to("http://localhost:" + port1 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").             from("jetty://http://localhost:" + port1 + "?matchOnUriPrefix=true&async=true&useContinuation=false").process(serviceProc).         }     }. }
