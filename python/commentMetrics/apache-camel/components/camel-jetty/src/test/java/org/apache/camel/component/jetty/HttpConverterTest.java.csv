commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     HttpServletRequest request = exchange.getIn(HttpServletRequest.class).     assertNotNull("We should get request object here", request).     HttpServletResponse response = exchange.getIn(HttpServletResponse.class).     assertNotNull("We should get response object here", response).     String s = exchange.getIn().getBody(String.class).     assertEquals("Hello World", s). }
false;public;0;16;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test").convertBodyTo(String.class).process(new Processor() {          public void process(Exchange exchange) throws Exception {             HttpServletRequest request = exchange.getIn(HttpServletRequest.class).             assertNotNull("We should get request object here", request).             HttpServletResponse response = exchange.getIn(HttpServletResponse.class).             assertNotNull("We should get response object here", response).             String s = exchange.getIn().getBody(String.class).             assertEquals("Hello World", s).         }     }).transform(constant("Bye World")). }
false;public;0;25;;@Test public void testToServletRequestAndResponse() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test").convertBodyTo(String.class).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     HttpServletRequest request = exchange.getIn(HttpServletRequest.class).                     assertNotNull("We should get request object here", request).                     HttpServletResponse response = exchange.getIn(HttpServletResponse.class).                     assertNotNull("We should get response object here", response).                     String s = exchange.getIn().getBody(String.class).                     assertEquals("Hello World", s).                 }             }).transform(constant("Bye World")).         }     }).     context.start().     String out = template.requestBody("http://localhost:{{port}}/test", "Hello World", String.class).     assertEquals("Bye World", out). }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     HttpMessage msg = exchange.getIn(HttpMessage.class).     ServletInputStream sis = HttpConverter.toServletInputStream(msg).     assertNotNull(sis).     // The ServletInputStream should be cached and you can't read message here     assertTrue(sis.available() == 0).     String s = msg.getBody(String.class).     assertEquals("Hello World", s). }
false;public;0;17;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             HttpMessage msg = exchange.getIn(HttpMessage.class).             ServletInputStream sis = HttpConverter.toServletInputStream(msg).             assertNotNull(sis).             // The ServletInputStream should be cached and you can't read message here             assertTrue(sis.available() == 0).             String s = msg.getBody(String.class).             assertEquals("Hello World", s).         }     }).transform(constant("Bye World")). }
false;public;0;26;;@Test public void testToServletInputStream() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     HttpMessage msg = exchange.getIn(HttpMessage.class).                     ServletInputStream sis = HttpConverter.toServletInputStream(msg).                     assertNotNull(sis).                     // The ServletInputStream should be cached and you can't read message here                     assertTrue(sis.available() == 0).                     String s = msg.getBody(String.class).                     assertEquals("Hello World", s).                 }             }).transform(constant("Bye World")).         }     }).     context.start().     String out = template.requestBody("http://localhost:{{port}}/test", "Hello World", String.class).     assertEquals("Bye World", out). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     HttpMessage msg = exchange.getIn(HttpMessage.class).     InputStream sis = msg.getBody(InputStream.class).     assertNotNull(sis).     String s = exchange.getContext().getTypeConverter().convertTo(String.class, sis).     assertEquals("Hello World", s). }
false;public;0;15;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             HttpMessage msg = exchange.getIn(HttpMessage.class).             InputStream sis = msg.getBody(InputStream.class).             assertNotNull(sis).             String s = exchange.getContext().getTypeConverter().convertTo(String.class, sis).             assertEquals("Hello World", s).         }     }).transform(constant("Bye World")). }
false;public;0;24;;@Test public void testToInputStream() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     HttpMessage msg = exchange.getIn(HttpMessage.class).                     InputStream sis = msg.getBody(InputStream.class).                     assertNotNull(sis).                     String s = exchange.getContext().getTypeConverter().convertTo(String.class, sis).                     assertEquals("Hello World", s).                 }             }).transform(constant("Bye World")).         }     }).     context.start().     String out = template.requestBody("http://localhost:{{port}}/test", "Hello World", String.class).     assertEquals("Bye World", out). }
false;public;0;11;;@Test public void testNulls() throws Exception {     HttpMessage msg = null.     assertNull(HttpConverter.toInputStream(msg, null)).     assertNull(HttpConverter.toServletInputStream(msg)).     assertNull(HttpConverter.toServletRequest(msg)).     assertNull(HttpConverter.toServletResponse(msg)).     HttpServletRequest req = null.     assertNull(HttpConverter.toInputStream(req, null)). }
