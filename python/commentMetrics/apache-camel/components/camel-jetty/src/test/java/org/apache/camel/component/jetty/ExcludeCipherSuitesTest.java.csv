commented;modifiers;parameterAmount;loc;comment;code
false;private;0;18;;private SSLContextParameters createSslContextParameters() throws Exception {     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString()).     ksp.setPassword(pwd).     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword(pwd).     kmp.setKeyStore(ksp).     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     FilterParameters filter = new FilterParameters().     filter.getExclude().add("^.*_(MD5|SHA|SHA1)$").     sslContextParameters.setCipherSuitesFilter(filter).     return sslContextParameters. }
false;public;0;8;;@Test public void testExclude() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived(1).     template.sendBody("jetty:https://localhost:" + getPort() + "/test", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;public void configure() throws Exception {     JettyHttpComponent jetty = getContext().getComponent("jetty", JettyHttpComponent.class).     jetty.setSslContextParameters(createSslContextParameters()).     from("jetty:https://localhost:" + getPort() + "/test").to("mock:a"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             JettyHttpComponent jetty = getContext().getComponent("jetty", JettyHttpComponent.class).             jetty.setSslContextParameters(createSslContextParameters()).             from("jetty:https://localhost:" + getPort() + "/test").to("mock:a").         }     }. }
