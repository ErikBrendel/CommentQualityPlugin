commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testJettyProducerNoAccept() throws Exception {     String out = fluentTemplate.withHeader(Exchange.HTTP_METHOD, "post").withBody("{ \"name\": \"Donald Duck\" }").to("http://localhost:" + getPort() + "/users/123/update").request(String.class).     assertEquals("{ \"status\": \"ok\" }", out). }
false;public;0;11;;@Test public void testJettyProducerAcceptValid() throws Exception {     String out = fluentTemplate.withHeader(Exchange.CONTENT_TYPE, "application/json").withHeader("Accept", "application/json").withHeader(Exchange.HTTP_METHOD, "post").withBody("{ \"name\": \"Donald Duck\" }").to("http://localhost:" + getPort() + "/users/123/update").request(String.class).     assertEquals("{ \"status\": \"ok\" }", out). }
false;public;0;17;;@Test public void testJettyProducerAcceptInvalid() throws Exception {     try {         fluentTemplate.withHeader(Exchange.CONTENT_TYPE, "application/json").withHeader("Accept", "application/xml").withHeader(Exchange.HTTP_METHOD, "post").withBody("{ \"name\": \"Donald Duck\" }").to("http://localhost:" + getPort() + "/users/123/update").request(String.class).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(406, cause.getStatusCode()).         assertEquals("", cause.getResponseBody()).     } }
false;public;0;13;;@Override public void configure() throws Exception {     // configure to use jetty on localhost with the given port     restConfiguration().component("jetty").host("localhost").port(getPort()).clientRequestValidation(true).     // use the rest DSL to define the rest services     rest("/users/").post("{id}/update").consumes("application/json").produces("application/json").route().setBody(constant("{ \"status\": \"ok\" }")). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use jetty on localhost with the given port             restConfiguration().component("jetty").host("localhost").port(getPort()).clientRequestValidation(true).             // use the rest DSL to define the rest services             rest("/users/").post("{id}/update").consumes("application/json").produces("application/json").route().setBody(constant("{ \"status\": \"ok\" }")).         }     }. }
