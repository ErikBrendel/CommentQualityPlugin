commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     // ensure jsse clients can validate the self signed dummy localhost cert,     // use the server keystore as the trust store for these tests     URL trustStoreUrl = Thread.currentThread().getContextClassLoader().getResource("jsse/localhost.ks").     setSystemProp("javax.net.ssl.trustStore", trustStoreUrl.getPath()). }
false;public;0;4;;@After public void tearDown() throws Exception {     restoreSystemProperties(). }
false;private;2;4;;private void setSystemProp(String key, String value) {     String originalValue = System.setProperty(key, value).     originalValues.put(key, originalValue != null ? originalValue : NULL_VALUE_MARKER). }
false;private;0;10;;private void restoreSystemProperties() {     for (Object key : originalValues.keySet()) {         Object value = originalValues.get(key).         if (NULL_VALUE_MARKER.equals(value)) {             System.clearProperty((String) key).         } else {             System.setProperty((String) key, (String) value).         }     } }
false;public;0;21;;@Test public void testEndpoint() throws Exception {     mockEndpoint.reset().     mockEndpoint.expectedBodiesReceived(expectedBody).     template.sendBodyAndHeader("https://localhost:" + port + "/test", expectedBody, "Content-Type", "application/xml").     mockEndpoint.assertIsSatisfied().     List<Exchange> list = mockEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     Assert.assertNotNull("exchange", exchange).     Message in = exchange.getIn().     assertNotNull("in", in).     Map<String, Object> headers = in.getHeaders().     log.info("Headers: " + headers).     assertTrue("Should be more than one header but was: " + headers, headers.size() > 0). }
false;public;0;10;;@Test public void testEndpointWithoutHttps() {     mockEndpoint.reset().     try {         template.sendBodyAndHeader("http://localhost:" + port + "/test", expectedBody, "Content-Type", "application/xml").         fail("expect exception on access to https endpoint via http").     } catch (RuntimeCamelException expected) {     }     assertTrue("mock endpoint was not called", mockEndpoint.getExchanges().isEmpty()). }
false;public;0;3;;public Integer getPort() {     return port. }
false;public;1;4;;@Resource(name = "dynaPort") public void setPort(Integer port) {     this.port = port. }
