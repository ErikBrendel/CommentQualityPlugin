commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/cachedir").     createDirectory("target/cachedir").     super.setUp(). }
false;public;0;10;;@Test public void testStreamCacheToFileShouldBeDeletedInCaseOfResponse() throws Exception {     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     // the temporary files should have been deleted     File file = new File("target/cachedir").     String[] files = file.list().     assertEquals("There should be no files", 0, files.length). }
false;public;0;16;;@Test public void testStreamCacheToFileShouldBeDeletedInCaseOfException() throws Exception {     try {         template.requestBody("direct:start", null, String.class).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException hofe = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         String s = context.getTypeConverter().convertTo(String.class, hofe.getResponseBody()).         assertEquals("Response body", responseBody, s).     }     // the temporary files should have been deleted     File file = new File("target/cachedir").     String[] files = file.list().     assertEquals("There should be no files", 0, files.length). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (ObjectHelper.isEmpty(body)) {         exchange.getOut().setBody(responseBody).         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).     } else {         exchange.getOut().setBody("Bye World").     } }
false;public;0;23;;@Override public void configure() throws Exception {     // enable stream caching and use a low threshold so its forced to write to file     context.getStreamCachingStrategy().setSpoolThreshold(16).     context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir").     context.setStreamCaching(true).     // use a route so we got an unit of work     from("direct:start").to("http://localhost:{{port}}/myserver").     from("jetty://http://localhost:{{port}}/myserver").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if (ObjectHelper.isEmpty(body)) {                 exchange.getOut().setBody(responseBody).                 exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).             } else {                 exchange.getOut().setBody("Bye World").             }         }     }). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable stream caching and use a low threshold so its forced to write to file             context.getStreamCachingStrategy().setSpoolThreshold(16).             context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir").             context.setStreamCaching(true).             // use a route so we got an unit of work             from("direct:start").to("http://localhost:{{port}}/myserver").             from("jetty://http://localhost:{{port}}/myserver").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if (ObjectHelper.isEmpty(body)) {                         exchange.getOut().setBody(responseBody).                         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).                     } else {                         exchange.getOut().setBody("Bye World").                     }                 }             }).         }     }. }
