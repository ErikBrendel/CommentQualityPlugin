commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void test404() throws Exception {     // give Jetty time to startup properly     Thread.sleep(1000).     try {         template.sendBody(url, null).         fail("Should have thrown exception").     } catch (Exception e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(404, cause.getStatusCode()).         assertEquals("http://127.0.0.1:" + getPort() + "/bar", cause.getUri()).         assertEquals("Page not found", cause.getResponseBody()).         assertNotNull(cause.getResponseHeaders()).     } }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     Thread.sleep(1000).     exchange.getOut().setBody("Page not found").     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404). }
false;public;0;11;;@Override public void configure() throws Exception {     from(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             Thread.sleep(1000).             exchange.getOut().setBody("Page not found").             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).         }     }). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Thread.sleep(1000).                     exchange.getOut().setBody("Page not found").                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).                 }             }).         }     }. }
