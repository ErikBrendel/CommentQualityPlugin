commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testLocalInterfaceHandled() throws IOException, InterruptedException {     int expectedMessages = (remoteInterfaceAddress != null) ? 3 : 2.     getMockEndpoint("mock:endpoint").expectedMessageCount(expectedMessages).     URL localUrl = new URL("http://localhost:" + port1 + "/testRoute").     String localResponse = context.getTypeConverter().convertTo(String.class, localUrl.openStream()).     assertEquals("local", localResponse).     if (!isMacOS) {         localUrl = new URL("http://127.0.0.1:" + port2 + "/testRoute").     } else {         localUrl = new URL("http://localhost:" + port2 + "/testRoute").     }     localResponse = context.getTypeConverter().convertTo(String.class, localUrl.openStream()).     assertEquals("local-differentPort", localResponse).     if (remoteInterfaceAddress != null) {         URL url = new URL("http://" + remoteInterfaceAddress + ":" + port3 + "/testRoute").         String remoteResponse = context.getTypeConverter().convertTo(String.class, url.openStream()).         assertEquals("remote", remoteResponse).     }     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testAllInterfaces() throws Exception {     int expectedMessages = (remoteInterfaceAddress != null) ? 2 : 1.     getMockEndpoint("mock:endpoint").expectedMessageCount(expectedMessages).     URL localUrl = new URL("http://localhost:" + port4 + "/allInterfaces").     String localResponse = context.getTypeConverter().convertTo(String.class, localUrl.openStream()).     assertEquals("allInterfaces", localResponse).     if (remoteInterfaceAddress != null) {         URL url = new URL("http://" + remoteInterfaceAddress + ":" + port4 + "/allInterfaces").         String remoteResponse = context.getTypeConverter().convertTo(String.class, url.openStream()).         assertEquals("allInterfaces", remoteResponse).     }     assertMockEndpointsSatisfied(). }
false;public;0;26;;@Override public void configure() throws Exception {     port1 = getNextPort().     port2 = getNextPort(port1 + 1).     port3 = getNextPort(port2 + 1).     port4 = getNextPort(port3 + 1).     from("jetty:http://localhost:" + port1 + "/testRoute").setBody().constant("local").to("mock:endpoint").     from("jetty:http://localhost:" + port2 + "/testRoute").setBody().constant("local-differentPort").to("mock:endpoint").     if (remoteInterfaceAddress != null) {         from("jetty:http://" + remoteInterfaceAddress + ":" + port3 + "/testRoute").setBody().constant("remote").to("mock:endpoint").     }     from("jetty:http://0.0.0.0:" + port4 + "/allInterfaces").setBody().constant("allInterfaces").to("mock:endpoint"). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             port1 = getNextPort().             port2 = getNextPort(port1 + 1).             port3 = getNextPort(port2 + 1).             port4 = getNextPort(port3 + 1).             from("jetty:http://localhost:" + port1 + "/testRoute").setBody().constant("local").to("mock:endpoint").             from("jetty:http://localhost:" + port2 + "/testRoute").setBody().constant("local-differentPort").to("mock:endpoint").             if (remoteInterfaceAddress != null) {                 from("jetty:http://" + remoteInterfaceAddress + ":" + port3 + "/testRoute").setBody().constant("remote").to("mock:endpoint").             }             from("jetty:http://0.0.0.0:" + port4 + "/allInterfaces").setBody().constant("allInterfaces").to("mock:endpoint").         }     }. }
