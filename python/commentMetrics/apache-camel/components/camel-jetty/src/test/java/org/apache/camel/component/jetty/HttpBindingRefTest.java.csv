commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testDefaultHttpBinding() throws Exception {     Object out = template.requestBody("http://localhost:{{port}}/myapp/myservice", "Hello World").     assertEquals("Bye World", context.getTypeConverter().convertTo(String.class, out)). }
false;public;0;5;;@Test public void testCustomHttpBinding() throws Exception {     Object out = template.requestBody("http://localhost:{{port}}/myapp/myotherservice", "Hello World").     assertEquals("Something went wrong but we dont care", context.getTypeConverter().convertTo(String.class, out)). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("default", new DefaultHttpBinding()).     jndi.bind("myownbinder", new MyHttpBinding()).     return jndi. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalStateException("Not implemented"). }
false;public;0;12;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("jetty:http://localhost:{{port}}/myapp/myservice?httpBindingRef=default").transform().constant("Bye World").     from("jetty:http://localhost:{{port}}/myapp/myotherservice?httpBindingRef=myownbinder").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalStateException("Not implemented").         }     }). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("jetty:http://localhost:{{port}}/myapp/myservice?httpBindingRef=default").transform().constant("Bye World").             from("jetty:http://localhost:{{port}}/myapp/myotherservice?httpBindingRef=myownbinder").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalStateException("Not implemented").                 }             }).         }     }. }
false;public;2;10;;@Override public void doWriteExceptionResponse(Throwable exception, HttpServletResponse response) throws IOException {     // we override the doWriteExceptionResponse as we only want to alter the binding how exceptions is     // written back to the client.     // we just return HTTP 200 so the client thinks its okay     response.setStatus(200).     // and we return this fixed text     response.getWriter().write("Something went wrong but we dont care"). }
