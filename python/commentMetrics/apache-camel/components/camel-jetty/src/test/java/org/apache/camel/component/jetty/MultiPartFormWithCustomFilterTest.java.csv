commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     // set a marker attribute to show that this filter class was used     ((HttpServletResponse) response).addHeader("MyMultipartFilter", "true").     super.doFilter(request, response, chain). }
false;public;0;21;;@Test public void testSendMultiPartForm() throws Exception {     HttpClient httpclient = new HttpClient().     File file = new File("src/test/resources/log4j2.properties").     PostMethod httppost = new PostMethod("http://localhost:" + getPort() + "/test").     Part[] parts = { new StringPart("comment", "A binary file of some kind"), new FilePart(file.getName(), file) }.     MultipartRequestEntity reqEntity = new MultipartRequestEntity(parts, httppost.getParams()).     httppost.setRequestEntity(reqEntity).     int status = httpclient.executeMethod(httppost).     assertEquals("Get a wrong response status", 200, status).     String result = httppost.getResponseBodyAsString().     assertEquals("Get a wrong result", "A binary file of some kind", result).     assertNotNull("Did not use custom multipart filter", httppost.getResponseHeader("MyMultipartFilter")). }
false;public;0;20;;@Test public void testSendMultiPartFormOverrideEnableMultpartFilterFalse() throws Exception {     HttpClient httpclient = new HttpClient().     File file = new File("src/test/resources/log4j2.properties").     PostMethod httppost = new PostMethod("http://localhost:" + getPort() + "/test2").     Part[] parts = { new StringPart("comment", "A binary file of some kind"), new FilePart(file.getName(), file) }.     MultipartRequestEntity reqEntity = new MultipartRequestEntity(parts, httppost.getParams()).     httppost.setRequestEntity(reqEntity).     int status = httpclient.executeMethod(httppost).     assertEquals("Get a wrong response status", 200, status).     assertNotNull("Did not use custom multipart filter", httppost.getResponseHeader("MyMultipartFilter")). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myMultipartFilter", new MyMultipartFilter()).     return jndi. }
false;public;1;19;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).     // The file name is attachment id     DataHandler data = in.getAttachment("log4j2.properties").     assertNotNull("Should get the DataHandle log4j2.properties", data).     // This assert is wrong, but the correct content-type (application/octet-stream)     // will not be returned until Jetty makes it available - currently the content-type     // returned is just the default for FileDataHandler (for the implentation being used)     // assertEquals("Get a wrong content type", "text/plain", data.getContentType()).     assertEquals("Got the wrong name", "log4j2.properties", data.getName()).     assertTrue("We should get the data from the DataHandle", data.getDataSource().getInputStream().available() > 0).     // The other form date can be get from the message header     exchange.getOut().setBody(in.getHeader("comment")). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).     DataHandler data = in.getAttachment("log4j2.properties").     assertNotNull("Should get the DataHandle log4j2.properties", data).     // The other form date can be get from the message header     exchange.getOut().setBody(in.getHeader("comment")). }
false;public;0;43;;public void configure() throws Exception {     // START SNIPPET: e1     // Set the jetty temp directory which store the file for multi part form     // camel-jetty will clean up the file after it handled the request.     // The option works rightly from Camel 2.4.0     getContext().getGlobalOptions().put("CamelJettyTempDir", "target").     from("jetty://http://localhost:{{port}}/test?multipartFilterRef=myMultipartFilter").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).             // The file name is attachment id             DataHandler data = in.getAttachment("log4j2.properties").             assertNotNull("Should get the DataHandle log4j2.properties", data).             // This assert is wrong, but the correct content-type (application/octet-stream)             // will not be returned until Jetty makes it available - currently the content-type             // returned is just the default for FileDataHandler (for the implentation being used)             // assertEquals("Get a wrong content type", "text/plain", data.getContentType()).             assertEquals("Got the wrong name", "log4j2.properties", data.getName()).             assertTrue("We should get the data from the DataHandle", data.getDataSource().getInputStream().available() > 0).             // The other form date can be get from the message header             exchange.getOut().setBody(in.getHeader("comment")).         }     }).     // END SNIPPET: e1     // Test to ensure that setting a multipartFilterRef overrides the enableMultipartFilter=false parameter     from("jetty://http://localhost:{{port}}/test2?multipartFilterRef=myMultipartFilter&enableMultipartFilter=false").process(new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).             DataHandler data = in.getAttachment("log4j2.properties").             assertNotNull("Should get the DataHandle log4j2.properties", data).             // The other form date can be get from the message header             exchange.getOut().setBody(in.getHeader("comment")).         }     }). }
false;protected;0;47;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // Set the jetty temp directory which store the file for multi part form             // camel-jetty will clean up the file after it handled the request.             // The option works rightly from Camel 2.4.0             getContext().getGlobalOptions().put("CamelJettyTempDir", "target").             from("jetty://http://localhost:{{port}}/test?multipartFilterRef=myMultipartFilter").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).                     // The file name is attachment id                     DataHandler data = in.getAttachment("log4j2.properties").                     assertNotNull("Should get the DataHandle log4j2.properties", data).                     // This assert is wrong, but the correct content-type (application/octet-stream)                     // will not be returned until Jetty makes it available - currently the content-type                     // returned is just the default for FileDataHandler (for the implentation being used)                     // assertEquals("Get a wrong content type", "text/plain", data.getContentType()).                     assertEquals("Got the wrong name", "log4j2.properties", data.getName()).                     assertTrue("We should get the data from the DataHandle", data.getDataSource().getInputStream().available() > 0).                     // The other form date can be get from the message header                     exchange.getOut().setBody(in.getHeader("comment")).                 }             }).             // END SNIPPET: e1             // Test to ensure that setting a multipartFilterRef overrides the enableMultipartFilter=false parameter             from("jetty://http://localhost:{{port}}/test2?multipartFilterRef=myMultipartFilter&enableMultipartFilter=false").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     assertEquals("Get a wrong attachement size", 2, in.getAttachments().size()).                     DataHandler data = in.getAttachment("log4j2.properties").                     assertNotNull("Should get the DataHandle log4j2.properties", data).                     // The other form date can be get from the message header                     exchange.getOut().setBody(in.getHeader("comment")).                 }             }).         }     }. }
