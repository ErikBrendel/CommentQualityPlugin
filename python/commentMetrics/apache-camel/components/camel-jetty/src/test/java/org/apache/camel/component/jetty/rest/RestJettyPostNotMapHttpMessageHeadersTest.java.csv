commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testPostNotMapHttpMessageHeadersTest() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put(Exchange.HTTP_METHOD, "POST").     headers.put(Exchange.CONTENT_TYPE, "application/x-www-form-urlencoded").     String out = template.requestBodyAndHeaders("http://localhost:" + getPort() + "/rest/test", "{\"msg\": \"TEST\"}", headers, String.class).     assertEquals("\"OK\"", out). }
false;public;0;16;;@Override public void configure() throws Exception {     // configure to use jetty on localhost with the given port     // ensure we don't extract key=value pairs from form bodies     // (application/x-www-form-urlencoded)     restConfiguration().component("jetty").host("localhost").port(getPort()).bindingMode(RestBindingMode.json).endpointProperty("mapHttpMessageBody", "false").endpointProperty("mapHttpMessageHeaders", "false").     // use the rest DSL to define the rest services     rest("/rest").post("/test").produces("application/json").to("direct:test").     from("direct:test").log("*** ${body}").removeHeaders("Content-Type*").setBody().simple("OK"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use jetty on localhost with the given port             // ensure we don't extract key=value pairs from form bodies             // (application/x-www-form-urlencoded)             restConfiguration().component("jetty").host("localhost").port(getPort()).bindingMode(RestBindingMode.json).endpointProperty("mapHttpMessageBody", "false").endpointProperty("mapHttpMessageHeaders", "false").             // use the rest DSL to define the rest services             rest("/rest").post("/test").produces("application/json").to("direct:test").             from("direct:test").log("*** ${body}").removeHeaders("Content-Type*").setBody().simple("OK").         }     }. }
