commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testJettyBridgeEndpoint() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     String out = template.requestBody("http://localhost:" + getPort() + "/api/123/", null, String.class).     assertEquals("Bye 123", out).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     // configure to use jetty on localhost with the given port     restConfiguration().component("jetty").host("localhost").port(getPort()).     rest("/api/").get("/{id}/").to("jetty:http://localhost:" + getPort2() + "?bridgeEndpoint=true").     from("jetty:http://localhost:" + getPort2() + "?matchOnUriPrefix=true").to("mock:result").transform().simple("Bye ${header.id}"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use jetty on localhost with the given port             restConfiguration().component("jetty").host("localhost").port(getPort()).             rest("/api/").get("/{id}/").to("jetty:http://localhost:" + getPort2() + "?bridgeEndpoint=true").             from("jetty:http://localhost:" + getPort2() + "?matchOnUriPrefix=true").to("mock:result").transform().simple("Bye ${header.id}").         }     }. }
