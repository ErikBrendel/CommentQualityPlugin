commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSimulate404() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Page not found").     mock.expectedHeaderReceived(Exchange.HTTP_RESPONSE_CODE, 404).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;2;6;;public Exchange aggregate(Exchange original, Exchange resource) {     // get the response code     Integer code = resource.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class).     assertEquals(404, code.intValue()).     return resource. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Page not found").     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404). }
false;public;0;29;;@Override public void configure() throws Exception {     // disable error handling     errorHandler(noErrorHandler()).     // START SNIPPET: e1     // We set throwExceptionOnFailure to false to let Camel return any response from the remove HTTP server without thrown     // HttpOperationFailedException in case of failures.     // This allows us to handle all responses in the aggregation strategy where we can check the HTTP response code     // and decide what to do. As this is based on an unit test we assert the code is 404     from("direct:start").enrich("http://localhost:{{port}}/myserver?throwExceptionOnFailure=false&user=Camel", new AggregationStrategy() {          public Exchange aggregate(Exchange original, Exchange resource) {             // get the response code             Integer code = resource.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class).             assertEquals(404, code.intValue()).             return resource.         }     }).to("mock:result").     // this is our jetty server where we simulate the 404     from("jetty://http://localhost:{{port}}/myserver").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Page not found").             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).         }     }). // END SNIPPET: e1 }
false;protected;0;34;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // disable error handling             errorHandler(noErrorHandler()).             // START SNIPPET: e1             // We set throwExceptionOnFailure to false to let Camel return any response from the remove HTTP server without thrown             // HttpOperationFailedException in case of failures.             // This allows us to handle all responses in the aggregation strategy where we can check the HTTP response code             // and decide what to do. As this is based on an unit test we assert the code is 404             from("direct:start").enrich("http://localhost:{{port}}/myserver?throwExceptionOnFailure=false&user=Camel", new AggregationStrategy() {                  public Exchange aggregate(Exchange original, Exchange resource) {                     // get the response code                     Integer code = resource.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class).                     assertEquals(404, code.intValue()).                     return resource.                 }             }).to("mock:result").             // this is our jetty server where we simulate the 404             from("jetty://http://localhost:{{port}}/myserver").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Page not found").                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).                 }             }).         // END SNIPPET: e1         }     }. }
