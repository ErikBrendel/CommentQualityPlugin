commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testToJettyAndSaveToFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     Object out = template.requestBody("http://localhost:{{port}}/myworld", "Hello World").     String response = context.getTypeConverter().convertTo(String.class, out).     assertEquals("Response from Jetty", "We got the file", response).     assertMockEndpointsSatisfied().     // give file some time to save     Thread.sleep(500).     File file = new File("target/myworld/hello.txt").     assertTrue("File should exists", file.exists()).     String content = IOConverter.toString(file, null).     assertEquals("File content", "Hello World", content). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/myworld").     super.setUp(). }
false;public;0;14;;public void configure() throws Exception {     // put the incoming data on the seda queue and return a fixed response that we got the file     from("jetty:http://localhost:{{port}}/myworld").convertBodyTo(String.class).to("seda:in").setBody(constant("We got the file")).     // store the content from the queue as a file     from("seda:in").setHeader(Exchange.FILE_NAME, constant("hello.txt")).convertBodyTo(String.class).to("file://target/myworld/").to("mock:result"). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // put the incoming data on the seda queue and return a fixed response that we got the file             from("jetty:http://localhost:{{port}}/myworld").convertBodyTo(String.class).to("seda:in").setBody(constant("We got the file")).             // store the content from the queue as a file             from("seda:in").setHeader(Exchange.FILE_NAME, constant("hello.txt")).convertBodyTo(String.class).to("file://target/myworld/").to("mock:result").         }     }. }
