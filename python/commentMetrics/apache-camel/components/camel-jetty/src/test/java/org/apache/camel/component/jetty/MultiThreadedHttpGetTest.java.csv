commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHttpGetWithConversion() throws Exception {     // In this scenario response stream is converted to String     // so the stream has to be read to the end. When this happens     // the associated connection is released automatically.     String endpointName = "seda:withConversion?concurrentConsumers=5".     sendMessagesTo(endpointName, 5). }
false;public;0;15;;@Test public void testHttpGetWithoutConversion() throws Exception {     // This is needed as by default there are 2 parallel     // connections to some host and there is nothing that     // closes the http connection here.     // Need to set the httpConnectionManager     PoolingHttpClientConnectionManager httpConnectionManager = new PoolingHttpClientConnectionManager().     httpConnectionManager.setDefaultMaxPerRoute(5).     context.getComponent("http", HttpComponent.class).setClientConnectionManager(httpConnectionManager).     String endpointName = "seda:withoutConversion?concurrentConsumers=5".     sendMessagesTo(endpointName, 5). }
false;public;0;18;;@Test public void testHttpGetWithExplicitStreamClose() throws Exception {     // We close connections explicitely at the very end of the flow     // (camel doesn't know when the stream is not needed any more)     MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:results", MockEndpoint.class).     for (int i = 0. i < 5. i++) {         mockEndpoint.expectedMessageCount(1).         template.sendBody("seda:withoutConversion?concurrentConsumers=5", null).         mockEndpoint.assertIsSatisfied().         Object response = mockEndpoint.getReceivedExchanges().get(0).getIn().getBody().         InputStream responseStream = assertIsInstanceOf(InputStream.class, response).         responseStream.close().         mockEndpoint.reset().     } }
false;protected;2;18;;protected void sendMessagesTo(String endpointName, int count) throws InterruptedException {     MockEndpoint mockEndpoint = resolveMandatoryEndpoint("mock:results", MockEndpoint.class).     mockEndpoint.expectedMessageCount(count).     for (int i = 0. i < count. i++) {         template.sendBody(endpointName, null).     }     mockEndpoint.assertIsSatisfied().     List<Exchange> list = mockEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         String body = exchange.getIn().getBody(String.class).         log.debug("Body: " + body).         assertNotNull("Should have a body!", body).         assertTrue("body should contain: <html", body.contains("<html")).     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("<html>Bye World</html>"). }
false;public;0;13;;public void configure() {     from("seda:withConversion?concurrentConsumers=5").to("http://localhost:{{port}}/search").convertBodyTo(String.class).to("mock:results").     from("seda:withoutConversion?concurrentConsumers=5").to("http://localhost:{{port}}/search").to("mock:results").     from("jetty:http://localhost:{{port}}/search").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("<html>Bye World</html>").         }     }). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("seda:withConversion?concurrentConsumers=5").to("http://localhost:{{port}}/search").convertBodyTo(String.class).to("mock:results").             from("seda:withoutConversion?concurrentConsumers=5").to("http://localhost:{{port}}/search").to("mock:results").             from("jetty:http://localhost:{{port}}/search").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("<html>Bye World</html>").                 }             }).         }     }. }
