commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("mybinding", new JettyRestHttpBinding()).     return jndi. }
false;public;0;8;;@Test public void testDefaultValue() throws Exception {     String out = template.requestBody("http://localhost:" + getPort() + "/users/123/basic", null, String.class).     assertEquals("123.Donald Duck", out).     String out2 = template.requestBody("http://localhost:" + getPort() + "/users/123/basic?verbose=true", null, String.class).     assertEquals("123.Donald Duck.1113 Quack Street Duckburg", out2). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     Object verbose = exchange.getIn().getHeader("verbose").     ObjectHelper.notNull(verbose, "verbose").     if ("true".equals(verbose)) {         exchange.getOut().setBody(id + ".Donald Duck.1113 Quack Street Duckburg").     }     if ("false".equals(verbose)) {         exchange.getOut().setBody(id + ".Donald Duck").     } }
false;public;0;25;;@Override public void configure() throws Exception {     // configure to use jetty on localhost with the given port     restConfiguration().component("jetty").host("localhost").port(getPort()).endpointProperty("httpBindingRef", "#mybinding").     // use the rest DSL to define the rest services     rest("/users/").get("{id}/basic").param().name("verbose").type(RestParamType.query).defaultValue("false").endParam().route().process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             Object verbose = exchange.getIn().getHeader("verbose").             ObjectHelper.notNull(verbose, "verbose").             if ("true".equals(verbose)) {                 exchange.getOut().setBody(id + ".Donald Duck.1113 Quack Street Duckburg").             }             if ("false".equals(verbose)) {                 exchange.getOut().setBody(id + ".Donald Duck").             }         }     }). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use jetty on localhost with the given port             restConfiguration().component("jetty").host("localhost").port(getPort()).endpointProperty("httpBindingRef", "#mybinding").             // use the rest DSL to define the rest services             rest("/users/").get("{id}/basic").param().name("verbose").type(RestParamType.query).defaultValue("false").endParam().route().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     Object verbose = exchange.getIn().getHeader("verbose").                     ObjectHelper.notNull(verbose, "verbose").                     if ("true".equals(verbose)) {                         exchange.getOut().setBody(id + ".Donald Duck.1113 Quack Street Duckburg").                     }                     if ("false".equals(verbose)) {                         exchange.getOut().setBody(id + ".Donald Duck").                     }                 }             }).         }     }. }
