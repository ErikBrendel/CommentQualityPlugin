commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/cachedir").     createDirectory("target/cachedir").     super.setUp(). }
false;public;0;14;;@Test public void testStreamCacheToFileShouldBeDeletedInCaseOfStop() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals(body, out).     // the temporary files should have been deleted     File file = new File("target/cachedir").     String[] files = file.list().     assertEquals("There should be no files", 0, files.length).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // there should be a temp cache file     File file = new File("target/cachedir").     String[] files = file.list().     assertTrue("There should be a temp cache file", files.length > 0). }
false;public;0;26;;@Override public void configure() throws Exception {     // enable stream caching and use a low threshold so its forced to write to file     context.getStreamCachingStrategy().setSpoolThreshold(16).     context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir").     context.setStreamCaching(true).     // use a route so we got an unit of work     from("direct:start").to("http://localhost:{{port}}/myserver").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // there should be a temp cache file             File file = new File("target/cachedir").             String[] files = file.list().             assertTrue("There should be a temp cache file", files.length > 0).         }     }).convertBodyTo(String.class).to("mock:result").     from("jetty://http://localhost:{{port}}/myserver").transform().constant(body). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable stream caching and use a low threshold so its forced to write to file             context.getStreamCachingStrategy().setSpoolThreshold(16).             context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir").             context.setStreamCaching(true).             // use a route so we got an unit of work             from("direct:start").to("http://localhost:{{port}}/myserver").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // there should be a temp cache file                     File file = new File("target/cachedir").                     String[] files = file.list().                     assertTrue("There should be a temp cache file", files.length > 0).                 }             }).convertBodyTo(String.class).to("mock:result").             from("jetty://http://localhost:{{port}}/myserver").transform().constant(body).         }     }. }
