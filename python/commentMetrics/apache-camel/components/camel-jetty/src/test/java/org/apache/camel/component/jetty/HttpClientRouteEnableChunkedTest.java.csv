commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testHttpRouteWithOption() throws Exception {     testHttpClient("direct:start2"). }
false;private;1;27;;private void testHttpClient(String uri) throws Exception {     System.setProperty("HTTPClient.dontChunkRequests", "yes").     MockEndpoint mockEndpoint = getMockEndpoint("mock:a").     mockEndpoint.expectedBodiesReceived("<b>Hello World</b>").     template.requestBodyAndHeader(uri, new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "application/xml").     mockEndpoint.assertIsSatisfied().     List<Exchange> list = mockEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     assertNotNull("exchange", exchange).     Message in = exchange.getIn().     assertNotNull("in", in).     Map<String, Object> headers = in.getHeaders().     log.info("Headers: " + headers).     assertTrue("Should be more than one header but was: " + headers, headers.size() > 0).     // should get the Content-Length     assertEquals("Should get the transfer-encoding as chunked", "chunked", headers.get("Transfer-Encoding")).     // remove the system property     System.clearProperty("HTTPClient.dontChunkRequests"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     ByteArrayInputStream bis = new ByteArrayInputStream("<b>Hello World</b>".getBytes()).     exchange.getOut().setBody(bis). }
false;public;0;14;;public void configure() {     errorHandler(noErrorHandler()).     from("direct:start2").to("http://localhost:{{port}}/hello").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             ByteArrayInputStream bis = new ByteArrayInputStream("<b>Hello World</b>".getBytes()).             exchange.getOut().setBody(bis).         }     }.     from("jetty:http://localhost:{{port}}/hello").process(proc). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             errorHandler(noErrorHandler()).             from("direct:start2").to("http://localhost:{{port}}/hello").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     ByteArrayInputStream bis = new ByteArrayInputStream("<b>Hello World</b>".getBytes()).                     exchange.getOut().setBody(bis).                 }             }.             from("jetty:http://localhost:{{port}}/hello").process(proc).         }     }. }
