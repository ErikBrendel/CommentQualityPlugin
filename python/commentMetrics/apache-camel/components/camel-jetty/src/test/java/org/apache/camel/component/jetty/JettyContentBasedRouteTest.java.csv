commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendOne() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:one").     mock.expectedHeaderReceived("one", "true").     template.requestBody(serverUri + "?one=true", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSendOther() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:other").     mock.expectedHeaderReceived("two", "true").     template.requestBody(serverUri + "?two=true", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;9;;public void configure() throws Exception {     // START SNIPPET: e1     from("jetty:" + serverUri).choice().when().simple("${header.one}").to("mock:one").otherwise().to("mock:other"). // END SNIPPET: e1 }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             from("jetty:" + serverUri).choice().when().simple("${header.one}").to("mock:one").otherwise().to("mock:other").         // END SNIPPET: e1         }     }. }
