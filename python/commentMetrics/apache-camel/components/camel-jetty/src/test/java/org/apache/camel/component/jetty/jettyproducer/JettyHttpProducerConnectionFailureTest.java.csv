commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testHttpGetWithParamsViaURI() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     // give Jetty time to startup properly     Thread.sleep(1000).     // use another port with no connection     try {         template.requestBody("jetty://http://localhost:9999/myservice", null, Object.class).         fail("Should have thrown an exception").     } catch (Exception e) {         CamelExchangeException cause = assertIsInstanceOf(CamelExchangeException.class, e.getCause()).         assertIsInstanceOf(IOException.class, cause.getCause()).     }     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(serverUri).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(serverUri).to("mock:result").         }     }. }
