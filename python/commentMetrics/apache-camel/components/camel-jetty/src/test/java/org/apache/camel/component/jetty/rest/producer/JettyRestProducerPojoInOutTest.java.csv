commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testJettyEmptyBody() throws Exception {     String out = fluentTemplate.to("rest:get:users/lives").withHeader(Exchange.CONTENT_TYPE, "application/json").request(String.class).     assertNotNull(out).     assertEquals("{\"iso\":\"EN\",\"country\":\"England\"}", out). }
false;public;0;11;;@Test public void testJettyJSonBody() throws Exception {     String body = "{\"id\": 123, \"name\": \"Donald Duck\"}".     String out = fluentTemplate.to("rest:post:users/lives").withHeader(Exchange.CONTENT_TYPE, "application/json").withBody(body).request(String.class).     assertNotNull(out).     assertEquals("{\"iso\":\"EN\",\"country\":\"England\"}", out). }
false;public;0;13;;@Test public void testJettyPojoIn() throws Exception {     UserPojo user = new UserPojo().     user.setId(123).     user.setName("Donald Duck").     String out = fluentTemplate.to("rest:post:users/lives").withHeader(Exchange.CONTENT_TYPE, "application/json").withBody(user).request(String.class).     assertNotNull(out).     assertEquals("{\"iso\":\"EN\",\"country\":\"England\"}", out). }
false;public;0;15;;@Test public void testJettyPojoInOut() throws Exception {     UserPojo user = new UserPojo().     user.setId(123).     user.setName("Donald Duck").     // must provide outType parameter to tell Camel to bind the output from the REST service from json to POJO     CountryPojo pojo = fluentTemplate.to("rest:post:users/lives?outType=org.apache.camel.component.jetty.rest.CountryPojo").withHeader(Exchange.CONTENT_TYPE, "application/json").withBody(user).request(CountryPojo.class).     assertNotNull(pojo).     assertEquals("EN", pojo.getIso()).     assertEquals("England", pojo.getCountry()). }
false;public;0;19;;@Override public void configure() throws Exception {     // configure to use jetty on localhost with the given port     // and enable auto binding mode     restConfiguration().component("jetty").host("localhost").port(getPort()).bindingMode(RestBindingMode.auto).     // use the rest DSL to define the rest services     rest("/users/").get("lives").to("direct:start").post("lives").type(UserPojo.class).outType(CountryPojo.class).route().bean(new UserService(), "livesWhere").     CountryPojo country = new CountryPojo().     country.setIso("EN").     country.setCountry("England").     from("direct:start").transform().constant(country). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use jetty on localhost with the given port             // and enable auto binding mode             restConfiguration().component("jetty").host("localhost").port(getPort()).bindingMode(RestBindingMode.auto).             // use the rest DSL to define the rest services             rest("/users/").get("lives").to("direct:start").post("lives").type(UserPojo.class).outType(CountryPojo.class).route().bean(new UserService(), "livesWhere").             CountryPojo country = new CountryPojo().             country.setIso("EN").             country.setCountry("England").             from("direct:start").transform().constant(country).         }     }. }
