commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(is). }
false;public;0;18;;@Test public void testTimeout() throws Exception {     // give Jetty time to startup properly     Thread.sleep(1000).     final MyInputStream is = new MyInputStream("Content".getBytes()).     Exchange reply = template.request(url, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(is).         }     }).     Exception e = reply.getException().     assertNotNull("Should have thrown an exception", e).     ExchangeTimedOutException cause = assertIsInstanceOf(ExchangeTimedOutException.class, e).     assertEquals(2000, cause.getTimeout()).     assertTrue("The input stream should be closed", is.isClosed()). }
false;public;0;4;;@Override public void configure() throws Exception {     from(url).delay(5000).transform(constant("Bye World")). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).delay(5000).transform(constant("Bye World")).         }     }. }
