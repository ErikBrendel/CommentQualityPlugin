commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testTwoParametersWithSameKey() throws Exception {     Exchange out = template.request("http://localhost:{{port}}/myapp?from=me&to=foo&to=bar", null).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()).     assertEquals("OK", out.getOut().getBody(String.class)).     assertEquals("yes", out.getOut().getHeader("bar")).     List<?> foo = out.getOut().getHeader("foo", List.class).     assertNotNull(foo).     assertEquals(2, foo.size()).     assertEquals("123", foo.get(0)).     assertEquals("456", foo.get(1)). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(null).     exchange.getIn().setHeader("from", "me").     List<String> list = new ArrayList<>().     list.add("foo").     list.add("bar").     exchange.getIn().setHeader("to", list). }
false;public;0;24;;@Test public void testTwoHeadersWithSameKeyHeader() throws Exception {     Exchange out = template.request("http://localhost:{{port}}/myapp", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(null).             exchange.getIn().setHeader("from", "me").             List<String> list = new ArrayList<>().             list.add("foo").             list.add("bar").             exchange.getIn().setHeader("to", list).         }     }).     assertNotNull(out).     assertFalse("Should not fail", out.isFailed()).     assertEquals("OK", out.getOut().getBody(String.class)).     assertEquals("yes", out.getOut().getHeader("bar")).     List<?> foo = out.getOut().getHeader("foo", List.class).     assertNotNull(foo).     assertEquals(2, foo.size()).     assertEquals("123", foo.get(0)).     assertEquals("456", foo.get(1)). }
false;public;1;19;;public void process(Exchange exchange) throws Exception {     String from = exchange.getIn().getHeader("from", String.class).     assertEquals("me", from).     List<?> to = exchange.getIn().getHeader("to", List.class).     assertNotNull(to).     assertEquals(2, to.size()).     assertEquals("foo", to.get(0)).     assertEquals("bar", to.get(1)).     // response     exchange.getOut().setBody("OK").     // use multiple values for the foo header in the reply     List<Integer> list = new ArrayList<>().     list.add(123).     list.add(456).     exchange.getOut().setHeader("foo", list).     exchange.getOut().setHeader("bar", "yes"). }
false;public;0;24;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/myapp").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String from = exchange.getIn().getHeader("from", String.class).             assertEquals("me", from).             List<?> to = exchange.getIn().getHeader("to", List.class).             assertNotNull(to).             assertEquals(2, to.size()).             assertEquals("foo", to.get(0)).             assertEquals("bar", to.get(1)).             // response             exchange.getOut().setBody("OK").             // use multiple values for the foo header in the reply             List<Integer> list = new ArrayList<>().             list.add(123).             list.add(456).             exchange.getOut().setHeader("foo", list).             exchange.getOut().setHeader("bar", "yes").         }     }). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/myapp").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String from = exchange.getIn().getHeader("from", String.class).                     assertEquals("me", from).                     List<?> to = exchange.getIn().getHeader("to", List.class).                     assertNotNull(to).                     assertEquals(2, to.size()).                     assertEquals("foo", to.get(0)).                     assertEquals("bar", to.get(1)).                     // response                     exchange.getOut().setBody("OK").                     // use multiple values for the foo header in the reply                     List<Integer> list = new ArrayList<>().                     list.add(123).                     list.add(456).                     exchange.getOut().setHeader("foo", list).                     exchange.getOut().setHeader("bar", "yes").                 }             }).         }     }. }
