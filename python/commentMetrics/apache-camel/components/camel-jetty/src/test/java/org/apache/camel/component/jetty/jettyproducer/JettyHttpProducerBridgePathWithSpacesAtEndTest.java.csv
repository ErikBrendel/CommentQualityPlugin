commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testProxy() throws Exception {     // give Jetty time to startup properly     Thread.sleep(2000).     String reply = template.requestBody("jetty:http://127.0.0.1:" + port1 + "/foo ", "World", String.class).     assertEquals("Bye World", reply).     // and with more spaces     String reply2 = template.requestBody("jetty:http://127.0.0.1:" + port1 + "/foo /bar baz", "Camel", String.class).     assertEquals("Bye Camel", reply2). }
false;public;0;11;;@Override public void configure() throws Exception {     port1 = getPort().     port2 = getNextPort().     from("jetty:http://127.0.0.1:" + port1 + "/foo ?matchOnUriPrefix=true").to("jetty:http://127.0.0.1:" + port2 + "/proxy foo ?bridgeEndpoint=true&throwExceptionOnFailure=false").     from("jetty:http://127.0.0.1:" + port2 + "/proxy foo ?matchOnUriPrefix=true").transform().simple("Bye ${body}"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             port1 = getPort().             port2 = getNextPort().             from("jetty:http://127.0.0.1:" + port1 + "/foo ?matchOnUriPrefix=true").to("jetty:http://127.0.0.1:" + port2 + "/proxy foo ?bridgeEndpoint=true&throwExceptionOnFailure=false").             from("jetty:http://127.0.0.1:" + port2 + "/proxy foo ?matchOnUriPrefix=true").transform().simple("Bye ${body}").         }     }. }
