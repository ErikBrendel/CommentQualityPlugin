commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testHttpRouteWithMessageHeader() throws Exception {     testHttpClient("direct:start"). }
false;public;0;4;;@Test public void testHttpRouteWithOption() throws Exception {     testHttpClient("direct:start2"). }
false;private;1;22;;private void testHttpClient(String uri) throws Exception {     System.setProperty("HTTPClient.dontChunkRequests", "yes").     MockEndpoint mockEndpoint = getMockEndpoint("mock:a").     mockEndpoint.expectedBodiesReceived("<b>Hello World</b>").     template.requestBodyAndHeader(uri, new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "application/xml").     mockEndpoint.assertIsSatisfied().     List<Exchange> list = mockEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     assertNotNull("exchange", exchange).     Message in = exchange.getIn().     assertNotNull("in", in).     Map<String, Object> headers = in.getHeaders().     log.info("Headers: " + headers).     assertTrue("Should be more than one header but was: " + headers, headers.size() > 0). }
false;public;0;8;;@Test public void testHttpRouteWithQuery() throws Exception {     MockEndpoint mockEndpoint = getMockEndpoint("mock:a").     mockEndpoint.expectedBodiesReceived("@ query").     template.sendBody("direct:start3", null).     mockEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Test public void testHttpRouteWithQueryByHeader() throws Exception {     MockEndpoint mockEndpoint = getMockEndpoint("mock:a").     mockEndpoint.expectedBodiesReceived("test").     template.sendBody("direct:start4", "test").     mockEndpoint.assertIsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("").     exchange.getIn().setHeader(Exchange.HTTP_URI, "http://localhost:" + port2 + "/querystring?id=test"). }
false;public;0;11;;@Test public void testHttpRouteWithHttpURI() throws Exception {     Exchange exchange = template.send("http://localhost:" + port2 + "/querystring", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("").             exchange.getIn().setHeader(Exchange.HTTP_URI, "http://localhost:" + port2 + "/querystring?id=test").         }     }).     assertEquals("Get a wrong response.", "test", exchange.getOut().getBody(String.class)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     assertIsInstanceOf(InputStream.class, exchange.getIn().getBody()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     ByteArrayInputStream bis = new ByteArrayInputStream("<b>Hello World</b>".getBytes()).     exchange.getOut().setBody(bis). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody(exchange.getIn().getHeader("myQuery", String.class)). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String result = exchange.getIn().getHeader("id", String.class).     if (result == null) {         result = "No id header".     }     exchange.getOut().setBody(result). }
false;public;0;43;;public void configure() {     port1 = getPort().     port2 = getNextPort().     errorHandler(noErrorHandler()).     Processor clientProc = new Processor() {          public void process(Exchange exchange) throws Exception {             assertIsInstanceOf(InputStream.class, exchange.getIn().getBody()).         }     }.     from("direct:start").to("http://localhost:" + port1 + "/hello").process(clientProc).convertBodyTo(String.class).to("mock:a").     from("direct:start2").to("http://localhost:" + port2 + "/hello").to("mock:a").     from("direct:start3").to("http://localhost:" + port2 + "/Query%20/test?myQuery=%40%20query").to("mock:a").     from("direct:start4").setHeader(Exchange.HTTP_QUERY, simple("id=${body}")).to("http://localhost:" + port2 + "/querystring").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             ByteArrayInputStream bis = new ByteArrayInputStream("<b>Hello World</b>".getBytes()).             exchange.getOut().setBody(bis).         }     }.     from("jetty:http://localhost:" + port1 + "/hello").process(proc).setHeader(Exchange.HTTP_CHUNKED).constant(false).     from("jetty:http://localhost:" + port2 + "/hello?chunked=false").process(proc).     from("jetty:http://localhost:" + port2 + "/Query%20/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody(exchange.getIn().getHeader("myQuery", String.class)).         }     }).     from("jetty:http://localhost:" + port2 + "/querystring").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String result = exchange.getIn().getHeader("id", String.class).             if (result == null) {                 result = "No id header".             }             exchange.getOut().setBody(result).         }     }). }
false;protected;0;47;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getNextPort().             errorHandler(noErrorHandler()).             Processor clientProc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertIsInstanceOf(InputStream.class, exchange.getIn().getBody()).                 }             }.             from("direct:start").to("http://localhost:" + port1 + "/hello").process(clientProc).convertBodyTo(String.class).to("mock:a").             from("direct:start2").to("http://localhost:" + port2 + "/hello").to("mock:a").             from("direct:start3").to("http://localhost:" + port2 + "/Query%20/test?myQuery=%40%20query").to("mock:a").             from("direct:start4").setHeader(Exchange.HTTP_QUERY, simple("id=${body}")).to("http://localhost:" + port2 + "/querystring").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     ByteArrayInputStream bis = new ByteArrayInputStream("<b>Hello World</b>".getBytes()).                     exchange.getOut().setBody(bis).                 }             }.             from("jetty:http://localhost:" + port1 + "/hello").process(proc).setHeader(Exchange.HTTP_CHUNKED).constant(false).             from("jetty:http://localhost:" + port2 + "/hello?chunked=false").process(proc).             from("jetty:http://localhost:" + port2 + "/Query%20/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody(exchange.getIn().getHeader("myQuery", String.class)).                 }             }).             from("jetty:http://localhost:" + port2 + "/querystring").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String result = exchange.getIn().getHeader("id", String.class).                     if (result == null) {                         result = "No id header".                     }                     exchange.getOut().setBody(result).                 }             }).         }     }. }
