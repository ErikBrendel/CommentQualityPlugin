commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testEncodedQuery() throws Exception {     String response = template.requestBodyAndHeader("http://localhost:" + port2 + "/test/hello?param1=%2B447777111222", new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "text/plain", String.class).     assertEquals("Get a wrong response", "param1=+447777111222", response). }
false;public;0;17;;@Test public void testEncodedPath() throws Exception {     String path = URLEncoder.encode(" :/?#[]@!$", "UTF-8") + "/" + URLEncoder.encode("&'()+,.=", "UTF-8").     MockEndpoint mock = getMockEndpoint("mock:encodedPath").     mock.message(0).header(Exchange.HTTP_URI).isEqualTo("/" + path).     mock.message(0).header(Exchange.HTTP_PATH).isEqualTo(path).     mock.message(0).header(Exchange.HTTP_QUERY).isNull().     mock.message(0).header(Exchange.HTTP_RAW_QUERY).isNull().     // cannot use template as it automatically decodes some chars in the path     HttpClient httpClient = new HttpClient().     GetMethod httpGet = new GetMethod("http://localhost:" + port4 + "/test/" + path).     int status = httpClient.executeMethod(httpGet).     assertEquals("Get a wrong response status", 200, status).     assertMockEndpointsSatisfied(). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     // %2B becomes decoded to a space     assertEquals(" 447777111222", exchange.getIn().getHeader("param1")).     // and in the http query %20 becomes a + sign     assertEquals("param1=+447777111222", exchange.getIn().getHeader(Exchange.HTTP_QUERY)).     // send back the query     exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_QUERY)). }
false;public;0;27;;public void configure() {     port1 = getPort().     port2 = getPort2().     port3 = getNextPort().     port4 = getNextPort().     errorHandler(noErrorHandler()).     Processor serviceProc = new Processor() {          public void process(Exchange exchange) throws Exception {             // %2B becomes decoded to a space             assertEquals(" 447777111222", exchange.getIn().getHeader("param1")).             // and in the http query %20 becomes a + sign             assertEquals("param1=+447777111222", exchange.getIn().getHeader(Exchange.HTTP_QUERY)).             // send back the query             exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_QUERY)).         }     }.     from("jetty:http://localhost:" + port2 + "/test/hello").to("http://localhost:" + port1 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").     from("jetty:http://localhost:" + port1 + "?matchOnUriPrefix=true").process(serviceProc).     from("jetty:http://localhost:" + port4 + "/test?matchOnUriPrefix=true").to("http://localhost:" + port3 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").     from("jetty:http://localhost:" + port3 + "?matchOnUriPrefix=true").to("mock:encodedPath"). }
false;protected;0;31;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getPort2().             port3 = getNextPort().             port4 = getNextPort().             errorHandler(noErrorHandler()).             Processor serviceProc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     // %2B becomes decoded to a space                     assertEquals(" 447777111222", exchange.getIn().getHeader("param1")).                     // and in the http query %20 becomes a + sign                     assertEquals("param1=+447777111222", exchange.getIn().getHeader(Exchange.HTTP_QUERY)).                     // send back the query                     exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_QUERY)).                 }             }.             from("jetty:http://localhost:" + port2 + "/test/hello").to("http://localhost:" + port1 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").             from("jetty:http://localhost:" + port1 + "?matchOnUriPrefix=true").process(serviceProc).             from("jetty:http://localhost:" + port4 + "/test?matchOnUriPrefix=true").to("http://localhost:" + port3 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").             from("jetty:http://localhost:" + port3 + "?matchOnUriPrefix=true").to("mock:encodedPath").         }     }. }
