commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;9;;@Override public void configure() throws Exception {     // configure to use localhost with the given port     restConfiguration().component("jetty").host("localhost").     from("direct:start").to("rest:get:api/hello/unknown/{name}?apiDoc=hello-api.json"). }
false;public;0;21;;@Test public void testInvalidPath() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use localhost with the given port             restConfiguration().component("jetty").host("localhost").             from("direct:start").to("rest:get:api/hello/unknown/{name}?apiDoc=hello-api.json").         }     }).     try {         context.start().         fail("Should fail").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("Swagger api-doc does not contain operation for get:/api/hello/unknown/{name}", iae.getMessage()).     } }
false;public;0;9;;@Override public void configure() throws Exception {     // configure to use localhost with the given port     restConfiguration().component("jetty").host("localhost").producerApiDoc("hello-api.json").     from("direct:start").to("rest:get:api/bye/?unknown={name}"). }
false;public;0;21;;@Test public void testInvalidQuery() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use localhost with the given port             restConfiguration().component("jetty").host("localhost").producerApiDoc("hello-api.json").             from("direct:start").to("rest:get:api/bye/?unknown={name}").         }     }).     try {         context.start().         fail("Should fail").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("Swagger api-doc does not contain query parameter name for get:/api/bye", iae.getMessage()).     } }
