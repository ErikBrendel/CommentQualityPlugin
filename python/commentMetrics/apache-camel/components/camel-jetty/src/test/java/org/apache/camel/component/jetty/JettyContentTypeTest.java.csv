commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;20;;protected void sendMessageWithContentType(String charset, boolean usingGZip) {     Endpoint endpoint = context.getEndpoint("http://localhost:{{port}}/myapp/myservice").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("<order>123</order>").     exchange.getIn().setHeader("User", "Claus").     exchange.getIn().setHeader("SOAPAction", "test").     if (charset == null) {         exchange.getIn().setHeader("Content-Type", "text/xml").     } else {         exchange.getIn().setHeader("Content-Type", "text/xml. charset=" + charset).     }     if (usingGZip) {         exchange.getIn().setHeader(Exchange.CONTENT_ENCODING, "gzip").     }     template.send(endpoint, exchange).     String body = exchange.getOut().getBody(String.class).     assertEquals("<order>OK</order>", body).     assertEquals("Get a wrong content-type ", MessageHelper.getContentType(exchange.getOut()), "text/xml"). }
false;public;0;5;;@Test public void testSameContentType() throws Exception {     sendMessageWithContentType(null, false).     sendMessageWithContentType("UTF-8", false). }
false;public;0;5;;@Test public void testContentTypeWithGZipEncoding() throws Exception {     sendMessageWithContentType(null, true).     sendMessageWithContentType("UTF-8", true). }
false;public;0;12;;@Test public void testMixedContentType() throws Exception {     Endpoint endpoint = context.getEndpoint("http://localhost:{{port}}/myapp/myservice").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("<order>123</order>").     exchange.getIn().setHeader("Content-Type", "text/xml").     template.send(endpoint, exchange).     String body = exchange.getOut().getBody(String.class).     assertEquals("FAIL", body).     assertEquals("Get a wrong content-type ", MessageHelper.getContentType(exchange.getOut()), "text/plain"). }
false;public;0;3;;public void configure() throws Exception {     from("jetty:http://localhost:{{port}}/myapp/myservice").process(new MyBookService()). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty:http://localhost:{{port}}/myapp/myservice").process(new MyBookService()).         }     }. }
false;public;1;20;;public void process(Exchange exchange) throws Exception {     String user = exchange.getIn().getHeader("User", String.class).     String contentType = ExchangeHelper.getContentType(exchange).     String body = exchange.getIn().getBody(String.class).     String encoding = exchange.getIn().getHeader(Exchange.CONTENT_ENCODING, String.class).     if (encoding != null) {         exchange.getOut().setHeader(Exchange.CONTENT_ENCODING, encoding).     }     if ("Claus".equals(user) && contentType.startsWith("text/xml") && body.equals("<order>123</order>")) {         assertEquals("test", exchange.getIn().getHeader("SOAPAction", String.class)).         if (contentType.endsWith("UTF-8")) {             assertEquals("Get a wrong charset name.", exchange.getProperty(Exchange.CHARSET_NAME, String.class), "UTF-8").         }         exchange.getOut().setBody("<order>OK</order>").         exchange.getOut().setHeader("Content-Type", "text/xml").     } else {         exchange.getOut().setBody("FAIL").         exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "text/plain").     } }
