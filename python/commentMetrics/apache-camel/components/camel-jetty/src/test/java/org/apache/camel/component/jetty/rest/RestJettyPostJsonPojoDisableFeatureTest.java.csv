commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testPostPojoDisable() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(UserPojo.class).     // here we include an unknown property in the json     String body = "{\"id\": 123, \"name\": \"Donald Duck\", \"donotexists\": \"foo\"}".     template.sendBody("http://localhost:" + getPort() + "/users/new", body).     assertMockEndpointsSatisfied().     UserPojo user = mock.getReceivedExchanges().get(0).getIn().getBody(UserPojo.class).     assertNotNull(user).     assertEquals(123, user.getId()).     assertEquals("Donald Duck", user.getName()). }
false;public;0;11;;@Override public void configure() throws Exception {     // configure json to not fail on unknown properties     restConfiguration().component("jetty").host("localhost").port(getPort()).bindingMode(RestBindingMode.json).dataFormatProperty("json.in.disableFeatures", "FAIL_ON_UNKNOWN_PROPERTIES").     // use the rest DSL to define the rest services     rest("/users/").post("new").type(UserPojo.class).to("mock:input"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure json to not fail on unknown properties             restConfiguration().component("jetty").host("localhost").port(getPort()).bindingMode(RestBindingMode.json).dataFormatProperty("json.in.disableFeatures", "FAIL_ON_UNKNOWN_PROPERTIES").             // use the rest DSL to define the rest services             rest("/users/").post("new").type(UserPojo.class).to("mock:input").         }     }. }
