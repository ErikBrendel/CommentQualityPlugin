commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(new File("src/test/data/logo.jpeg")).     exchange.getIn().setHeader("Content-Type", "image/jpeg"). }
false;public;0;19;;@Test public void testSendImage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.message(0).body().isInstanceOf(InputStream.class).     mock.message(0).header("Content-Type").isEqualTo("image/jpeg").     Exchange out = template.send("http://localhost:{{port}}/myapp/myservice", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(new File("src/test/data/logo.jpeg")).             exchange.getIn().setHeader("Content-Type", "image/jpeg").         }     }).     assertMockEndpointsSatisfied().     assertEquals("OK", out.getOut().getBody(String.class)).     assertEquals("text/plain", out.getOut().getHeader("Content-Type")). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull("Body should not be null", body). }
false;public;0;11;;public void configure() throws Exception {     from("jetty:http://localhost:{{port}}/myapp/myservice").to("mock:result").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull("Body should not be null", body).         }     }).transform(constant("OK")).setHeader("Content-Type", constant("text/plain")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty:http://localhost:{{port}}/myapp/myservice").to("mock:result").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull("Body should not be null", body).                 }             }).transform(constant("OK")).setHeader("Content-Type", constant("text/plain")).         }     }. }
