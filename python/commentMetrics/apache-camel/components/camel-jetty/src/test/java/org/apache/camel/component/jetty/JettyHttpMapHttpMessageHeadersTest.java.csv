commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testHttpGetWithParamsViaURIFiltered() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("one", null).     mock.expectedHeaderReceived("two", null).     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET").     template.requestBody(serverUriFiltered + "?one=einz&two=twei", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testHttpGetWithParamsViaURINotFiltered() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result1").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("one", "einz").     mock.expectedHeaderReceived("two", "twei").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET").     template.requestBody(serverUriNotFiltered + "?one=einz&two=twei", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testHttpGetWithParamsViaHeaderFiltered() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("one", null).     mock.expectedHeaderReceived("two", null).     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET").     template.requestBodyAndHeader(serverUriFiltered, null, Exchange.HTTP_QUERY, "one=uno&two=dos").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testHttpGetWithParamsViaHeaderNotFiltered() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result1").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("one", "uno").     mock.expectedHeaderReceived("two", "dos").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET").     template.requestBodyAndHeader(serverUriNotFiltered, null, Exchange.HTTP_QUERY, "one=uno&two=dos").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testHttpPostNotFiltered() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result1").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST").     mock.expectedHeaderReceived("header1", "pippo").     template.requestBodyAndHeader(serverUriNotFiltered, "Hello World", "header1", "pippo").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testHttpPostFiltered() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST").     mock.expectedHeaderReceived("header1", null).     template.requestBodyAndHeader(serverUriFiltered, "Hello World", "header1", "pippo").     assertMockEndpointsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     from("jetty:" + serverUriFiltered + "?mapHttpMessageHeaders=false").to("mock:result").     from("jetty:" + serverUriNotFiltered).to("mock:result1"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty:" + serverUriFiltered + "?mapHttpMessageHeaders=false").to("mock:result").             from("jetty:" + serverUriNotFiltered).to("mock:result1").         }     }. }
