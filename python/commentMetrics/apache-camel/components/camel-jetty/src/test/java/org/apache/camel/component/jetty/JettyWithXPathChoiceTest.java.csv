commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testSendToFirstWhen() throws Exception {     String body = "<one/>".     expectsMessageCount(0, y, z).     sendBody(body).     assertMockEndpointsSatisfied().     x.reset().     y.reset().     z.reset().     body = "<two/>".     expectsMessageCount(0, x, z).     sendBody(body).     assertMockEndpointsSatisfied(). }
false;private;1;3;;private void sendBody(String body) {     template.sendBody("http://localhost:{{port}}/myworld", body). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z"). }
false;public;0;11;;public void configure() {     from("jetty:http://localhost:{{port}}/myworld").streamCaching().choice().when().xpath("/one").to("mock:x").when().xpath("/two").to("mock:y").otherwise().to("mock:z").end(). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("jetty:http://localhost:{{port}}/myworld").streamCaching().choice().when().xpath("/one").to("mock:x").when().xpath("/two").to("mock:y").otherwise().to("mock:z").end().         }     }. }
