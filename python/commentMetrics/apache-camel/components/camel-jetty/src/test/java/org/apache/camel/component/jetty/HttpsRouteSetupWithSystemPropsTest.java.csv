commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override @Before public void setUp() throws Exception {     // ensure jsse clients can validate the self signed dummy localhost cert,     // use the server keystore as the trust store for these tests     URL trustStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     setSystemProp("javax.net.ssl.trustStore", trustStoreUrl.getPath()).     // START SNIPPET: e1     // setup SSL using system properties     setSystemProp("org.eclipse.jetty.ssl.keystore", trustStoreUrl.getPath()).     setSystemProp("org.eclipse.jetty.ssl.keypassword", pwd).     setSystemProp("org.eclipse.jetty.ssl.password", pwd).     // END SNIPPET: e1     super.setUp(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("<b>Hello World</b>"). }
false;public;0;12;;public void configure() {     from("jetty:https://localhost:" + port1 + "/test").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("<b>Hello World</b>").         }     }.     from("jetty:https://localhost:" + port1 + "/hello").process(proc).     from("jetty:https://localhost:" + port2 + "/test").to("mock:b"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("jetty:https://localhost:" + port1 + "/test").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("<b>Hello World</b>").                 }             }.             from("jetty:https://localhost:" + port1 + "/hello").process(proc).             from("jetty:https://localhost:" + port2 + "/test").to("mock:b").         }     }. }
