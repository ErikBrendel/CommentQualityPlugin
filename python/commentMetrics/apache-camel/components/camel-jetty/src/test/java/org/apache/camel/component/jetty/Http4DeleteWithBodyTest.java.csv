commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testHttp4DeleteWithBodyFalseTest() throws Exception {     byte[] data = "World".getBytes().     String out = template.requestBodyAndHeader("http4://localhost:{{port}}/test", data, Exchange.HTTP_METHOD, "DELETE", String.class).     assertEquals("Bye ", out). }
false;public;0;6;;@Test public void testHttp4DeleteWithBodyTrueTest() throws Exception {     byte[] data = "World".getBytes().     String out = template.requestBodyAndHeader("http4://localhost:{{port}}/test?deleteWithBody=true", data, Exchange.HTTP_METHOD, "DELETE", String.class).     assertEquals("Bye World", out). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String method = exchange.getIn().getHeader(Exchange.HTTP_METHOD, String.class).     assertEquals("DELETE", method). }
false;public;0;12;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/test").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String method = exchange.getIn().getHeader(Exchange.HTTP_METHOD, String.class).             assertEquals("DELETE", method).         }     }).transform(simple("Bye ${body}")). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/test").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String method = exchange.getIn().getHeader(Exchange.HTTP_METHOD, String.class).                     assertEquals("DELETE", method).                 }             }).transform(simple("Bye ${body}")).         }     }. }
