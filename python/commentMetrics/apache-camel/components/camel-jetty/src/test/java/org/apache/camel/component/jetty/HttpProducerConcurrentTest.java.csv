commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;3;;public String call() throws Exception {     return template.requestBody("http://localhost:{{port}}/echo", "" + index, String.class). }
false;private;2;32;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     // we access the responses Map below only inside the main thread,     // so no need for a thread-safe Map implementation     Map<Integer, Future<String>> responses = new HashMap<>().     for (int i = 0. i < files. i++) {         final int index = i.         Future<String> out = executor.submit(new Callable<String>() {              public String call() throws Exception {                 return template.requestBody("http://localhost:{{port}}/echo", "" + index, String.class).             }         }).         responses.put(index, out).     }     assertMockEndpointsSatisfied().     assertEquals(files, responses.size()).     // get all responses     Set<String> unique = new HashSet<>().     for (Future<String> future : responses.values()) {         unique.add(future.get()).     }     // should be 'files' unique responses     assertEquals("Should be " + files + " unique responses", files, unique.size()).     executor.shutdownNow(). }
false;public;0;5;;public void configure() throws Exception {     // expose a echo service     from("jetty:http://localhost:{{port}}/echo").transform(body().append(body())).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // expose a echo service             from("jetty:http://localhost:{{port}}/echo").transform(body().append(body())).to("mock:result").         }     }. }
