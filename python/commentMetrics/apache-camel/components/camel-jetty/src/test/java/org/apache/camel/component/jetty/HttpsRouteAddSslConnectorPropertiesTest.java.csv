commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("<b>Hello World</b>"). }
false;public;0;21;;public void configure() throws URISyntaxException {     // START SNIPPET: e1     // keystore path     URL keyStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     String path = keyStoreUrl.toURI().getPath().     JettyHttpComponent jetty = context.getComponent("jetty", JettyHttpComponent.class).     setSSLProps(jetty, path, pwd, pwd).     // END SNIPPET: e1     from("jetty:https://localhost:" + port1 + "/test").to("mock:a").     Processor proc = new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("<b>Hello World</b>").         }     }.     from("jetty:https://localhost:" + port1 + "/hello").process(proc).     from("jetty:https://localhost:" + port2 + "/test").to("mock:b"). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws URISyntaxException {             // START SNIPPET: e1             // keystore path             URL keyStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").             String path = keyStoreUrl.toURI().getPath().             JettyHttpComponent jetty = context.getComponent("jetty", JettyHttpComponent.class).             setSSLProps(jetty, path, pwd, pwd).             // END SNIPPET: e1             from("jetty:https://localhost:" + port1 + "/test").to("mock:a").             Processor proc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("<b>Hello World</b>").                 }             }.             from("jetty:https://localhost:" + port1 + "/hello").process(proc).             from("jetty:https://localhost:" + port2 + "/test").to("mock:b").         }     }. }
