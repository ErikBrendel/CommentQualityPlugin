commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myRewrite", new MyUrlRewrite()).     return jndi. }
false;public;0;10;;@Test public void testUrlRewrite() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     String response = template.requestBody("jetty:http://localhost:" + port1 + "/foo?phrase=Bye", "Camel", String.class).     assertEquals("Get a wrong response", "Bye Camel", response).     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() {     port1 = getPort().     port2 = getNextPort().     from("jetty:http://localhost:" + port1 + "?matchOnUriPrefix=true").to("jetty:http://localhost:" + port2 + "?throwExceptionOnFailure=false&bridgeEndpoint=true&urlRewrite=#myRewrite").     from("jetty://http://localhost:" + port2 + "/bar").transform().simple("${header.phrase} ${body}").to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getNextPort().             from("jetty:http://localhost:" + port1 + "?matchOnUriPrefix=true").to("jetty:http://localhost:" + port2 + "?throwExceptionOnFailure=false&bridgeEndpoint=true&urlRewrite=#myRewrite").             from("jetty://http://localhost:" + port2 + "/bar").transform().simple("${header.phrase} ${body}").to("mock:result").         }     }. }
