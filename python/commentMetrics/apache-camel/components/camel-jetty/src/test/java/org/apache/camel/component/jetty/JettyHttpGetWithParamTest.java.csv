commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testHttpGetWithParamsViaURI() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.expectedHeaderReceived("one", "eins").     mock.expectedHeaderReceived("two", "zwei").     template.requestBody(serverUri + "?one=uno&two=dos", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testHttpGetWithParamsViaHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.expectedHeaderReceived("one", "eins").     mock.expectedHeaderReceived("two", "zwei").     template.requestBodyAndHeader(serverUri, "Hello World", Exchange.HTTP_QUERY, "one=uno&two=dos").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testHttpGetFromOtherRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.expectedHeaderReceived("one", "eins").     mock.expectedHeaderReceived("two", "zwei").     template.requestBodyAndHeader("direct:start", "Hello World", "parameters", "one=uno&two=dos").     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     from("jetty:" + serverUri).process(processor).to("mock:result").     from("direct:start").setHeader(Exchange.HTTP_METHOD, constant("GET")).setHeader(Exchange.HTTP_URI, simple(serverUri + "?${in.headers.parameters}")).to("http://example"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty:" + serverUri).process(processor).to("mock:result").             from("direct:start").setHeader(Exchange.HTTP_METHOD, constant("GET")).setHeader(Exchange.HTTP_URI, simple(serverUri + "?${in.headers.parameters}")).to("http://example").         }     }. }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     HttpMessage message = (HttpMessage) exchange.getIn().     assertNotNull(message.getRequest()).     assertEquals("uno", message.getRequest().getParameter("one")).     assertEquals("dos", message.getRequest().getParameter("two")).     exchange.getOut().setBody("Bye World").     exchange.getOut().setHeader("one", "eins").     exchange.getOut().setHeader("two", "zwei"). }
