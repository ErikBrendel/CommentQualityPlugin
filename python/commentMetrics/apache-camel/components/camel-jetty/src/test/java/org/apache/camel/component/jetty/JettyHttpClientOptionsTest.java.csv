commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public void setAttribute(String id, Object obj) {     if (obj instanceof HttpConnection) {         HttpConnection con = (HttpConnection) obj.         if (con.isOpen()) {             int so = con.getSocketTimeout().             if (so >= 0) {                 soTimeout.set(so).             }         }     }     super.setAttribute(id, obj). }
false;public;0;29;;@Test public void testCustomHttpBinding() throws Exception {     // assert jetty was configured with our timeout     HttpCommonEndpoint jettyEndpoint = context.getEndpoint("http://localhost:{{port}}/myapp/myservice?socketTimeout=5555", HttpCommonEndpoint.class).     assertNotNull("Jetty endpoint should not be null ", jettyEndpoint).     AtomicInteger soTimeout = new AtomicInteger().     HttpProducer producer = (HttpProducer) jettyEndpoint.createProducer().     HttpClientContext ctx = new HttpClientContext() {          @Override         public void setAttribute(String id, Object obj) {             if (obj instanceof HttpConnection) {                 HttpConnection con = (HttpConnection) obj.                 if (con.isOpen()) {                     int so = con.getSocketTimeout().                     if (so >= 0) {                         soTimeout.set(so).                     }                 }             }             super.setAttribute(id, obj).         }     }.     HttpResponse response = producer.getHttpClient().execute(new HttpHost("localhost", getPort()), new HttpHead(), ctx).     assertEquals("Get the wrong http client parameter", 5555, soTimeout.get()).     // send and receive     Object out = template.requestBody("http://localhost:{{port}}/myapp/myservice", "Hello World").     assertEquals("Bye World", context.getTypeConverter().convertTo(String.class, out)). }
false;public;0;17;;@Test public void testProxySettingOfJettyHttpClient() throws Exception {     // setup the Proxy setting through the URI     HttpCommonEndpoint jettyEndpoint = context.getEndpoint("jetty://http://localhost:{{port}}/proxy/setting?proxyHost=192.168.0.1&proxyPort=9090", HttpCommonEndpoint.class).     assertNotNull("Jetty endpoint should not be null ", jettyEndpoint).     JettyHttpProducer producer = (JettyHttpProducer) jettyEndpoint.createProducer().     assertProxyAddress(producer.getClient(), "192.168.0.1", 9090).     // setup the context properties     context.getGlobalOptions().put("http.proxyHost", "192.168.0.2").     context.getGlobalOptions().put("http.proxyPort", "8080").     jettyEndpoint = context.getEndpoint("jetty://http://localhost:{{port}}/proxy2/setting", HttpCommonEndpoint.class).     producer = (JettyHttpProducer) jettyEndpoint.createProducer().     assertProxyAddress(producer.getClient(), "192.168.0.2", 8080).     context.getGlobalOptions().clear(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("jetty:http://localhost:{{port}}/myapp/myservice?httpClient.soTimeout=5555").transform().constant("Bye World"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty:http://localhost:{{port}}/myapp/myservice?httpClient.soTimeout=5555").transform().constant("Bye World").         }     }. }
false;private;3;5;;private void assertProxyAddress(HttpClient client, String expectedHost, int expectedPort) {     CamelHttpClient camelHttpClient = (CamelHttpClient) client.     assertEquals("Got the wrong http proxy host parameter", expectedHost, camelHttpClient.getProxyHost()).     assertEquals("Got the wrong http proxy port paramerter", expectedPort, camelHttpClient.getProxyPort()). }
