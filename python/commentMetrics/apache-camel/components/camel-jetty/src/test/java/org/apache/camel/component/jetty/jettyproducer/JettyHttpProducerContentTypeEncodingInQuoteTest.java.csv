commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("Content-Type", "text/plain.charset=\"UTF-8\""). }
false;public;0;28;;@Test public void testHttpProducerEncodingInQuoteTest() throws Exception {     // these tests do not run well on Windows     if (isPlatform("windows")) {         return.     }     // give Jetty time to startup properly     Thread.sleep(1000).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     Exchange out = template.send("jetty:http://localhost:{{port}}/myapp/myservice", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.getIn().setHeader("Content-Type", "text/plain.charset=\"UTF-8\"").         }     }).     assertMockEndpointsSatisfied().     assertEquals("OK", out.getOut().getBody(String.class)).     // camel-jetty may remove quotes from charset     String res = out.getOut().getHeader("Content-Type").toString().     res = res.replace("\"UTF-8\"", "UTF-8").     assertEquals("text/plain.charset=UTF-8", res). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("Content-Type", "text/plain.charset=\"UTF-8\".action=\"http://somewhere.com/foo\""). }
false;public;0;28;;@Test public void testHttpProducerEncodingInQuoteAndActionParameterTest() throws Exception {     // these tests do not run well on Windows     if (isPlatform("windows")) {         return.     }     // give Jetty time to startup properly     Thread.sleep(1000).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     Exchange out = template.send("jetty:http://localhost:{{port}}/myapp/myservice", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.getIn().setHeader("Content-Type", "text/plain.charset=\"UTF-8\".action=\"http://somewhere.com/foo\"").         }     }).     assertMockEndpointsSatisfied().     assertEquals("OK", out.getOut().getBody(String.class)).     // camel-jetty may remove quotes from charset     String res = out.getOut().getHeader("Content-Type").toString().     res = res.replace("\"UTF-8\"", "UTF-8").     assertEquals("text/plain.charset=UTF-8.action=\"http://somewhere.com/foo\"", res). }
false;public;0;5;;public void configure() throws Exception {     from("jetty:http://localhost:{{port}}/myapp/myservice").to("mock:result").transform(constant("OK")). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty:http://localhost:{{port}}/myapp/myservice").to("mock:result").transform(constant("OK")).         }     }. }
