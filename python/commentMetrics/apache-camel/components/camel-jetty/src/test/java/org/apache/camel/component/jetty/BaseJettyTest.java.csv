commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void initPort() throws Exception {     // start from somewhere in the 23xxx range     port = AvailablePortFinder.getNextAvailable(23000).     // find another ports for proxy route test     port2 = AvailablePortFinder.getNextAvailable(24000). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("ref:prop")).     return context. }
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     Properties prop = new Properties().     prop.setProperty("port", "" + getPort()).     prop.setProperty("port2", "" + getPort2()).     jndi.bind("prop", prop).     return jndi. }
false;protected;0;3;;protected int getNextPort() {     return AvailablePortFinder.getNextAvailable(port + counter.getAndIncrement()). }
false;protected;1;3;;protected int getNextPort(int startWithPort) {     return AvailablePortFinder.getNextAvailable(startWithPort). }
false;public;4;13;;public void setSSLProps(JettyHttpComponent jetty, String path, String keyStorePasswd, String keyPasswd) {     if (jettyVersion() == 9) {         jetty.addSslSocketConnectorProperty("keyStorePassword", keyStorePasswd).         jetty.addSslSocketConnectorProperty("keyManagerPassword", keyPasswd).         jetty.addSslSocketConnectorProperty("keyStorePath", path).         jetty.addSslSocketConnectorProperty("trustStoreType", "JKS").     } else {         jetty.addSslSocketConnectorProperty("password", keyStorePasswd).         jetty.addSslSocketConnectorProperty("keyPassword", keyPasswd).         jetty.addSslSocketConnectorProperty("keystore", path).         jetty.addSslSocketConnectorProperty("truststoreType", "JKS").     } }
false;protected,static;0;3;;protected static int getPort() {     return port. }
false;protected,static;0;3;;protected static int getPort2() {     return port2. }
false;public;0;8;;public int jettyVersion() {     try {         this.getClass().getClassLoader().loadClass("org.eclipse.jetty.server.ssl.SslSelectChannelConnector").         return 8.     } catch (ClassNotFoundException e) {         return 9.     } }
false;protected;0;6;;protected void allowNullHeaders() {     JettyHttpComponent jetty = (JettyHttpComponent) context.getComponent("jetty").     HttpHeaderFilterStrategy filterStrat = new HttpHeaderFilterStrategy().     filterStrat.setAllowNullValues(true).     jetty.setHeaderFilterStrategy(filterStrat). }
false;protected;0;4;;protected boolean isJetty8() {     String majorVersion = Server.getVersion().split("\\.")[0].     return "8".equals(majorVersion). }
