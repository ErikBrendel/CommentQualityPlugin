commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;protected void initialize() {     setLowerCase(true).     getOutFilter().add("content-length").     setOutFilterPattern("(?i)(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*"). }
false;public;0;19;;@Test public void testHttpClient() throws Exception {     File jpg = new File("src/test/resources/java.jpg").     String body = "TEST".     Part[] parts = new Part[] { new StringPart("body", body), new FilePart(jpg.getName(), jpg) }.     PostMethod method = new PostMethod("http://localhost:" + port2 + "/test/hello").     MultipartRequestEntity requestEntity = new MultipartRequestEntity(parts, method.getParams()).     method.setRequestEntity(requestEntity).     HttpClient client = new HttpClient().     client.executeMethod(method).     String responseBody = method.getResponseBodyAsString().     assertEquals(body, responseBody).     String numAttachments = method.getResponseHeader("numAttachments").getValue().     assertEquals(numAttachments, "2"). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     // put the number of attachments in a response header     exchange.getOut().setHeader("numAttachments", in.getAttachments().size()).     exchange.getOut().setBody(in.getHeader("body")). }
false;public;0;23;;public void configure() {     port1 = getPort().     port2 = getNextPort().     errorHandler(noErrorHandler()).     Processor serviceProc = new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             // put the number of attachments in a response header             exchange.getOut().setHeader("numAttachments", in.getAttachments().size()).             exchange.getOut().setBody(in.getHeader("body")).         }     }.     HttpEndpoint epOut = getContext().getEndpoint("http://localhost:" + port1 + "?bridgeEndpoint=true&throwExceptionOnFailure=false", HttpEndpoint.class).     epOut.setHeaderFilterStrategy(new MultipartHeaderFilterStrategy()).     from("jetty:http://localhost:" + port2 + "/test/hello?enableMultipartFilter=false").to(epOut).     from("jetty://http://localhost:" + port1 + "?matchOnUriPrefix=true").process(serviceProc). }
false;protected;0;27;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getNextPort().             errorHandler(noErrorHandler()).             Processor serviceProc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     // put the number of attachments in a response header                     exchange.getOut().setHeader("numAttachments", in.getAttachments().size()).                     exchange.getOut().setBody(in.getHeader("body")).                 }             }.             HttpEndpoint epOut = getContext().getEndpoint("http://localhost:" + port1 + "?bridgeEndpoint=true&throwExceptionOnFailure=false", HttpEndpoint.class).             epOut.setHeaderFilterStrategy(new MultipartHeaderFilterStrategy()).             from("jetty:http://localhost:" + port2 + "/test/hello?enableMultipartFilter=false").to(epOut).             from("jetty://http://localhost:" + port1 + "?matchOnUriPrefix=true").process(serviceProc).         }     }. }
