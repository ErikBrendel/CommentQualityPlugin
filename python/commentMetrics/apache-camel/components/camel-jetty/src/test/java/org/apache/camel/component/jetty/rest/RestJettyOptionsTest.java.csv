commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS"). }
false;public;0;18;;@Test public void testJettyServerOptions() throws Exception {     Exchange exchange = template.request("http://localhost:" + getPort() + "/users/v1/customers", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS").         }     }).     assertEquals(200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("GET,OPTIONS", exchange.getOut().getHeader("ALLOW")).     assertEquals("", exchange.getOut().getBody(String.class)).     exchange = fluentTemplate.to("http://localhost:" + getPort() + "/users/v1/id/123").withHeader(Exchange.HTTP_METHOD, "OPTIONS").send().     assertEquals(200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("PUT,OPTIONS", exchange.getOut().getHeader("ALLOW")).     assertEquals("", exchange.getOut().getBody(String.class)). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS"). }
false;public;0;13;;@Test public void testJettyServerMultipleOptions() throws Exception {     Exchange exchange = template.request("http://localhost:" + getPort() + "/users/v2/options", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS").         }     }).     assertEquals(200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("GET,POST,OPTIONS", exchange.getOut().getHeader("ALLOW")).     assertEquals("", exchange.getOut().getBody(String.class)). }
false;public;0;16;;@Override public void configure() throws Exception {     // configure to use jetty on localhost with the given port     restConfiguration().component("jetty").host("localhost").port(getPort()).     // use the rest DSL to define the rest services     rest("/users/").get("v1/customers").to("mock:customers").put("v1/id/{id}").to("mock:id").get("v2/options").to("mock:options").post("v2/options").to("mock:options"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use jetty on localhost with the given port             restConfiguration().component("jetty").host("localhost").port(getPort()).             // use the rest DSL to define the rest services             rest("/users/").get("v1/customers").to("mock:customers").put("v1/id/{id}").to("mock:id").get("v2/options").to("mock:options").post("v2/options").to("mock:options").         }     }. }
