commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void run() {     try {         Thread.sleep(2000).         context.stop().     } catch (Exception e) {     // ignore     } }
false;public;0;38;;@Test public void testJettySuspendWhileInProgress() throws Exception {     context.getShutdownStrategy().setTimeout(50).     // send a request/reply and have future handle so we can shutdown while in progress     Future<String> reply = template.asyncRequestBodyAndHeader(serverUri, null, "name", "Camel", String.class).     // shutdown camel while in progress, wait 2 sec so the first req has been received in Camel route     Executors.newSingleThreadExecutor().execute(new Runnable() {          public void run() {             try {                 Thread.sleep(2000).                 context.stop().             } catch (Exception e) {             // ignore             }         }     }).     // wait a bit more before sending next     Thread.sleep(5000).     // now send a new req/reply     Future<String> reply2 = template.asyncRequestBodyAndHeader(serverUri, null, "name", "Tiger", String.class).     // the first should wait to have its reply returned     assertEquals("Bye Camel", reply.get(20, TimeUnit.SECONDS)).     // the 2nd should have a 503 returned as we are shutting down     try {         reply2.get(20, TimeUnit.SECONDS).         fail("Should throw exception").     } catch (Exception e) {         RuntimeCamelException rce = assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         HttpOperationFailedException hofe = assertIsInstanceOf(HttpOperationFailedException.class, rce.getCause()).         assertEquals(503, hofe.getStatusCode()).     } }
false;public;0;6;;public void configure() throws Exception {     from("jetty://" + serverUri).log("Got data will wait 10 sec with reply").delay(10000).transform(simple("Bye ${header.name}")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("jetty://" + serverUri).log("Got data will wait 10 sec with reply").delay(10000).transform(simple("Bye ${header.name}")).         }     }. }
