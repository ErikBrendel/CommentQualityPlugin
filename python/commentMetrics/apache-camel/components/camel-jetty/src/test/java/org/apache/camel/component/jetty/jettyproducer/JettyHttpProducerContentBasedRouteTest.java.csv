commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testSendOne() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     // give Jetty time to startup properly     Thread.sleep(1000).     MockEndpoint mock = getMockEndpoint("mock:one").     mock.expectedHeaderReceived("one", "true").     template.requestBody(serverUri + "?one=true", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testSendOther() throws Exception {     // these tests does not run well on Windows     if (isPlatform("windows")) {         return.     }     // give Jetty time to startup properly     Thread.sleep(1000).     MockEndpoint mock = getMockEndpoint("mock:other").     mock.expectedHeaderReceived("two", "true").     template.requestBody(serverUri + "?two=true", null, Object.class).     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     from(serverUri).choice().when().simple("${header.one}").to("mock:one").otherwise().to("mock:other"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(serverUri).choice().when().simple("${header.one}").to("mock:one").otherwise().to("mock:other").         }     }. }
