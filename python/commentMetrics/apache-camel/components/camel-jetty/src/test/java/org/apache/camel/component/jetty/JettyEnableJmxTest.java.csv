commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @After public void tearDown() throws Exception {     releaseMBeanServers().     mbsc = null.     super.tearDown().     disableJMX(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     enableJMX().     releaseMBeanServers().     super.setUp().     mbsc = getMBeanConnection(). }
false;public;0;17;;@Test public void testEnableJmxProperty() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     String expectedBody = "<html><body>foo</body></html>".     mock.expectedBodiesReceived(expectedBody, expectedBody, expectedBody, expectedBody).     mock.expectedHeaderReceived("x", "foo").     template.requestBody(serverUri0 + "&x=foo", null, Object.class).     template.requestBody(serverUri1 + "&x=foo", null, Object.class).     template.requestBody(serverUri2 + "&x=foo", null, Object.class).     template.requestBody(serverUri3 + "&x=foo", null, Object.class).     assertMockEndpointsSatisfied().     Set<ObjectName> s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 2 Jetty Server: " + s, 2, s.size()). }
false;public;0;10;;@Test public void testShutdown() throws Exception {     Set<ObjectName> s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 2 Jetty Server: " + s, 2, s.size()).     context.stop().     s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 0 Jetty Server: " + s, 0, s.size()). }
false;public;0;21;;@Test public void testEndpointDisconnect() throws Exception {     Set<ObjectName> s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 2 Jetty Server: " + s, 2, s.size()).     context.getRouteController().stopRoute("route0").     s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 1 Jetty Server: " + s, 1, s.size()).     context.getRouteController().stopRoute("route2").     context.getRouteController().stopRoute("route3").     s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 1 Jetty Server: " + s, 1, s.size()).     context.getRouteController().stopRoute("route1").     s = mbsc.queryNames(new ObjectName("org.eclipse.jetty.server:type=server,*"), null).     assertEquals("Could not find 0 Jetty Server: " + s, 0, s.size()). }
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;26;;public void configure() throws Exception {     serverUri0 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=true".     serverUri1 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=true".     serverUri2 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=false".     serverUri3 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=false".     from("jetty:" + serverUri0).routeId("route0").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").     from("jetty:" + serverUri1).routeId("route1").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").     from("jetty:" + serverUri2).routeId("route2").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").     from("jetty:" + serverUri3).routeId("route3").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             serverUri0 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=true".             serverUri1 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=true".             serverUri2 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=false".             serverUri3 = "http://localhost:" + getNextPort() + "/myservice?enableJmx=false".             from("jetty:" + serverUri0).routeId("route0").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").             from("jetty:" + serverUri1).routeId("route1").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").             from("jetty:" + serverUri2).routeId("route2").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").             from("jetty:" + serverUri3).routeId("route3").setBody().simple("<html><body>${in.header.x}</body></html>").to("mock:result").         }     }. }
false;protected;0;7;;protected void releaseMBeanServers() {     List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null).     for (MBeanServer server : servers) {         MBeanServerFactory.releaseMBeanServer(server).     } }
false;protected;0;6;;protected MBeanServerConnection getMBeanConnection() throws Exception {     if (mbsc == null) {         mbsc = ManagementFactory.getPlatformMBeanServer().     }     return mbsc. }
