commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testHttpOperationsFailedExceptionUri() throws Exception {     try {         template.requestBodyAndHeader("http://localhost:{{port}}/foo?bar=123", null, "foo", 123).         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(500, cause.getStatusCode()).         assertEquals("http://localhost:" + getPort() + "/foo?bar=123", cause.getUri()).     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500). }
false;public;0;9;;@Override public void configure() throws Exception {     from("jetty://http://localhost:{{port}}/foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty://http://localhost:{{port}}/foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).                 }             }).         }     }. }
