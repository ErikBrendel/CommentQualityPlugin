commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;23;;@Override protected void populateAttachments(HttpServletRequest request, HttpMessage message) {     Object object = request.getAttribute("org.eclipse.jetty.servlet.MultiPartFile.multiPartInputStream").     if (object instanceof MultiPartInputStreamParser) {         MultiPartInputStreamParser parser = (MultiPartInputStreamParser) object.         Collection<Part> parts.         try {             parts = parser.getParts().             for (Part part : parts) {                 DataSource ds = new PartDataSource(part).                 Attachment attachment = new DefaultAttachment(ds).                 for (String headerName : part.getHeaderNames()) {                     for (String headerValue : part.getHeaders(headerName)) {                         attachment.addHeader(headerName, headerValue).                     }                 }                 message.addAttachmentObject(part.getName(), attachment).             }         } catch (Exception e) {             throw new RuntimeCamelException("Cannot populate attachments", e).         }     } }
false;protected;2;39;;protected void populateRequestParameters(HttpServletRequest request, HttpMessage message) throws Exception {     // we populate the http request parameters without checking the request method     Map<String, Object> headers = message.getHeaders().     // remove Content-Encoding from request     if (request instanceof org.eclipse.jetty.server.Request) {         org.eclipse.jetty.server.Request jettyRequest = (org.eclipse.jetty.server.Request) request.         jettyRequest.getHttpFields().remove(Exchange.CONTENT_ENCODING).     }     Enumeration<?> names = request.getParameterNames().     while (names.hasMoreElements()) {         String name = (String) names.nextElement().         if (message.getAttachment(name) != null) {             DataHandler dh = message.getAttachment(name).             Object value = dh.             if (dh.getContentType() == null || dh.getContentType().startsWith("text/plain")) {                 value = request.getParameter(name).             }             if (getHeaderFilterStrategy() != null && !getHeaderFilterStrategy().applyFilterToExternalHeaders(name, value, message.getExchange())) {                 HttpHelper.appendHeader(headers, name, value).             }             continue.         }         // there may be multiple values for the same name         String[] values = request.getParameterValues(name).         LOG.trace("HTTP parameter {} = {}", name, values).         if (values != null) {             for (String value : values) {                 if (getHeaderFilterStrategy() != null && !getHeaderFilterStrategy().applyFilterToExternalHeaders(name, value, message.getExchange())) {                     HttpHelper.appendHeader(headers, name, value).                 }             }         }     } }
false;public;0;4;;@Override public OutputStream getOutputStream() throws IOException {     return null. }
false;public;0;4;;@Override public String getName() {     return part.getName(). }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return part.getInputStream(). }
false;public;0;4;;@Override public String getContentType() {     return part.getContentType(). }
