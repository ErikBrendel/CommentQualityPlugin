commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public UShort getNamespaceIndex() {     return this.namespaceIndex. }
false;public;0;4;;@Override public String getNamespaceUri() {     return this.namespaceUri. }
false;public;2;12;;@Override public CompletableFuture<List<Reference>> browse(final AccessContext context, final NodeId nodeId) {     final ServerNode node = this.nodeManager.get(nodeId).     if (node != null) {         return CompletableFuture.completedFuture(node.getReferences()).     } else {         final CompletableFuture<List<Reference>> f = new CompletableFuture<>().         f.completeExceptionally(new UaException(StatusCodes.Bad_NodeIdUnknown)).         return f.     } }
false;public;4;20;;@Override public void read(final ReadContext context, final Double maxAge, final TimestampsToReturn timestamps, final List<ReadValueId> readValueIds) {     final List<DataValue> results = Lists.newArrayListWithCapacity(readValueIds.size()).     for (final ReadValueId id : readValueIds) {         final ServerNode node = this.nodeManager.get(id.getNodeId()).         final DataValue value.         if (node != null) {             value = node.readAttribute(new AttributeContext(context), id.getAttributeId(), timestamps, id.getIndexRange(), null).         } else {             value = new DataValue(StatusCodes.Bad_NodeIdUnknown).         }         results.add(value).     }     context.complete(results). }
false;public;2;24;;@Override public void write(final WriteContext context, final List<WriteValue> writeValues) {     final List<StatusCode> results = Lists.newArrayListWithCapacity(writeValues.size()).     for (final WriteValue writeValue : writeValues) {         try {             final ServerNode node = this.nodeManager.getNode(writeValue.getNodeId()).orElseThrow(() -> new UaException(StatusCodes.Bad_NodeIdUnknown)).             node.writeAttribute(new AttributeContext(context), writeValue.getAttributeId(), writeValue.getValue(), writeValue.getIndexRange()).             if (LOG.isTraceEnabled()) {                 final Variant variant = writeValue.getValue().getValue().                 final Object o = variant != null ? variant.getValue() : null.                 LOG.trace("Wrote value={} to attributeId={} of {}", o, writeValue.getAttributeId(), writeValue.getNodeId()).             }             results.add(StatusCode.GOOD).         } catch (final UaException e) {             results.add(e.getStatusCode()).         }     }     context.complete(results). }
false;public;1;4;;@Override public void onDataItemsCreated(final List<DataItem> dataItems) {     this.subscriptionModel.onDataItemsCreated(dataItems). }
false;public;1;4;;@Override public void onDataItemsModified(final List<DataItem> dataItems) {     this.subscriptionModel.onDataItemsModified(dataItems). }
false;public;1;4;;@Override public void onDataItemsDeleted(final List<DataItem> dataItems) {     this.subscriptionModel.onDataItemsDeleted(dataItems). }
false;public;1;4;;@Override public void onMonitoringModeChanged(final List<MonitoredItem> monitoredItems) {     this.subscriptionModel.onMonitoringModeChanged(monitoredItems). }
false;public;1;10;;public CamelServerItem getOrAddItem(final String itemId) {     synchronized (this) {         CamelServerItem item = this.itemMap.get(itemId).         if (item == null) {             item = new CamelServerItem(itemId, this.nodeManager, this.namespaceIndex, this.itemsObject).             this.itemMap.put(itemId, item).         }         return item.     } }
