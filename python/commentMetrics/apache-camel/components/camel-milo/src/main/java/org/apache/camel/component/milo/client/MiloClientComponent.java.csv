commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;9;;@Override protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {     final MiloClientConfiguration configuration = new MiloClientConfiguration(this.defaultConfiguration).     configuration.setEndpointUri(remaining).     setProperties(configuration, parameters).     return createEndpoint(uri, configuration, parameters). }
false;private,synchronized;3;23;;private synchronized MiloClientEndpoint createEndpoint(final String uri, final MiloClientConfiguration configuration, final Map<String, Object> parameters) throws Exception {     final String cacheId = configuration.toCacheId().     MiloClientConnection connection = this.cache.get(cacheId).     if (connection == null) {         log.info("Cache miss - creating new connection instance: {}", cacheId).         connection = new MiloClientConnection(configuration).         this.cache.put(cacheId, connection).     }     final MiloClientEndpoint endpoint = new MiloClientEndpoint(uri, this, connection, configuration.getEndpointUri()).     setProperties(endpoint, parameters).     // register connection with endpoint     this.connectionMap.put(cacheId, endpoint).     return endpoint. }
true;public;1;3;/**  * All default options for client  */ ;/**  * All default options for client  */ public void setDefaultConfiguration(final MiloClientConfiguration defaultConfiguration) {     this.defaultConfiguration = defaultConfiguration. }
true;public;1;3;/**  * Default application name  */ ;/**  * Default application name  */ public void setApplicationName(final String applicationName) {     this.defaultConfiguration.setApplicationName(applicationName). }
true;public;1;3;/**  * Default application URI  */ ;/**  * Default application URI  */ public void setApplicationUri(final String applicationUri) {     this.defaultConfiguration.setApplicationUri(applicationUri). }
true;public;1;3;/**  * Default product URI  */ ;/**  * Default product URI  */ public void setProductUri(final String productUri) {     this.defaultConfiguration.setProductUri(productUri). }
true;public;1;3;/**  * Default reconnect timeout  */ ;/**  * Default reconnect timeout  */ public void setReconnectTimeout(final Long reconnectTimeout) {     this.defaultConfiguration.setRequestTimeout(reconnectTimeout). }
false;public,synchronized;1;27;;public synchronized void disposed(final MiloClientEndpoint endpoint) {     final MiloClientConnection connection = endpoint.getConnection().     // unregister usage of connection     this.connectionMap.remove(connection.getConnectionId(), endpoint).     if (!this.connectionMap.containsKey(connection.getConnectionId())) {         // this was the last endpoint using the connection ...         // ... remove from the cache         this.cache.remove(connection.getConnectionId()).         try {             connection.close().         } catch (final Exception e) {             log.warn("Failed to close connection", e).         }     } }
