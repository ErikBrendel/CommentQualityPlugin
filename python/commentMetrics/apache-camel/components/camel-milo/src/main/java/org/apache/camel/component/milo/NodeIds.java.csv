# id;timestamp;commentText;codeText;commentWords;codeWords
NodeIds -> public static String nodeValue(final String namespace, final int node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final int node) {_		Objects.requireNonNull(namespace)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,int,node,objects,require,non,null,namespace,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final int node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final int node) {_        Objects.requireNonNull(namespace)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,int,node,objects,require,non,null,namespace,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final int node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final int node) {_        Objects.requireNonNull(namespace)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,int,node,objects,require,non,null,namespace,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final ByteString node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final ByteString node) {_		Objects.requireNonNull(namespace)__		Objects.requireNonNull(node)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,byte,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final ByteString node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final ByteString node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,byte,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final ByteString node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final ByteString node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,byte,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final int node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final int node) {_		Objects.requireNonNull(namespace)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,int,node,objects,require,non,null,namespace,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final int node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final int node) {_        Objects.requireNonNull(namespace)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,int,node,objects,require,non,null,namespace,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final int node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final int node) {_        Objects.requireNonNull(namespace)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,int,node,objects,require,non,null,namespace,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final UUID node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final UUID node) {_		Objects.requireNonNull(namespace)__		Objects.requireNonNull(node)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,uuid,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final UUID node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final UUID node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,uuid,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final UUID node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final UUID node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,uuid,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final String node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final String node) {_		Objects.requireNonNull(namespace)__		Objects.requireNonNull(node)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final String node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final String node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final String node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final String node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final ByteString node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final ByteString node) {_		Objects.requireNonNull(namespace)__		Objects.requireNonNull(node)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,byte,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final ByteString node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final ByteString node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,byte,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final String namespace, final ByteString node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final String namespace, final ByteString node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,string,namespace,final,byte,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final UUID node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final UUID node) {_		Objects.requireNonNull(namespace)__		Objects.requireNonNull(node)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,uuid,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final UUID node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final UUID node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,uuid,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final UUID node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final UUID node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,uuid,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final String node);1491987326;Create an attribute value for the "node" attribute__@param namespace_the namespace to use_@param node_the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final String node) {_		Objects.requireNonNull(namespace)__		Objects.requireNonNull(node)___		final StringBuilder builder = new StringBuilder("RAW(")__		appendNamespace(builder, namespace)__		builder.append('_')__		appendNodeId(builder, node)__		builder.append(')')__		return builder.toString()__	};create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final String node);1491987327;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final String node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
NodeIds -> public static String nodeValue(final int namespace, final String node);1521799533;Create an attribute value for the "node" attribute__@param namespace the namespace to use_@param node the node ID_@return the value ready to append to a "node" URI attribute;public static String nodeValue(final int namespace, final String node) {_        Objects.requireNonNull(namespace)__        Objects.requireNonNull(node)___        final StringBuilder builder = new StringBuilder("RAW(")__        appendNamespace(builder, namespace)__        builder.append('_')__        appendNodeId(builder, node)__        builder.append(')')__        return builder.toString()__    };create,an,attribute,value,for,the,node,attribute,param,namespace,the,namespace,to,use,param,node,the,node,id,return,the,value,ready,to,append,to,a,node,uri,attribute;public,static,string,node,value,final,int,namespace,final,string,node,objects,require,non,null,namespace,objects,require,non,null,node,final,string,builder,builder,new,string,builder,raw,append,namespace,builder,namespace,builder,append,append,node,id,builder,node,builder,append,return,builder,to,string
