commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;17;;public static NodeId toNodeId(final UShort namespaceIndex, final ExpandedNodeId nodeId) {     requireNonNull(namespaceIndex).     final Object id = nodeId.getIdentifier().     if (id instanceof String) {         return new NodeId(namespaceIndex, (String) id).     } else if (id instanceof UInteger) {         return new NodeId(namespaceIndex, (UInteger) id).     } else if (id instanceof ByteString) {         return new NodeId(namespaceIndex, (ByteString) id).     } else if (id instanceof UUID) {         return new NodeId(namespaceIndex, (UUID) id).     }     throw new IllegalStateException("Invalid id type: " + id). }
false;public,static;2;3;;public static NodeId toNodeId(final int namespaceIndex, final ExpandedNodeId nodeId) {     return toNodeId(ushort(namespaceIndex), nodeId). }
true;public,static;2;11;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final String namespace, final String node) {     Objects.requireNonNull(namespace).     Objects.requireNonNull(node).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;10;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final String namespace, final int node) {     Objects.requireNonNull(namespace).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;11;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final String namespace, final UUID node) {     Objects.requireNonNull(namespace).     Objects.requireNonNull(node).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;11;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final String namespace, final ByteString node) {     Objects.requireNonNull(namespace).     Objects.requireNonNull(node).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;11;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final int namespace, final String node) {     Objects.requireNonNull(namespace).     Objects.requireNonNull(node).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;10;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final int namespace, final int node) {     Objects.requireNonNull(namespace).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;11;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final int namespace, final UUID node) {     Objects.requireNonNull(namespace).     Objects.requireNonNull(node).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
true;public,static;2;11;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ ;/**  * Create an attribute value for the "node" attribute  *  * @param namespace the namespace to use  * @param node the node ID  * @return the value ready to append to a "node" URI attribute  */ public static String nodeValue(final int namespace, final ByteString node) {     Objects.requireNonNull(namespace).     Objects.requireNonNull(node).     final StringBuilder builder = new StringBuilder("RAW(").     appendNamespace(builder, namespace).     builder.append('.').     appendNodeId(builder, node).     builder.append(')').     return builder.toString(). }
false;private,static;2;3;;private static void appendNamespace(final StringBuilder builder, final String namespace) {     builder.append("nsu=").append(namespace). }
false;private,static;2;3;;private static void appendNamespace(final StringBuilder builder, final int namespace) {     builder.append("ns=").append(Integer.toUnsignedString(namespace)). }
false;private,static;2;3;;private static void appendNodeId(final StringBuilder builder, final String nodeId) {     builder.append("s=").append(nodeId). }
false;private,static;2;3;;private static void appendNodeId(final StringBuilder builder, final int nodeId) {     builder.append("i=").append(Integer.toUnsignedString(nodeId)). }
false;private,static;2;3;;private static void appendNodeId(final StringBuilder builder, final UUID nodeId) {     builder.append("g=").append(nodeId). }
false;private,static;2;3;;private static void appendNodeId(final StringBuilder builder, final ByteString nodeId) {     builder.append("b=").append(Base64.getEncoder().encodeToString(nodeId.bytes())). }
