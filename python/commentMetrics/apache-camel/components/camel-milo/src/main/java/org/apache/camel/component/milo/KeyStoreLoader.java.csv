commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public X509Certificate getCertificate() {     return this.certificate. }
false;public;0;3;;public KeyPair getKeyPair() {     return this.keyPair. }
false;public;1;3;;public void setType(final String type) {     this.type = type != null ? type : DEFAULT_KEY_STORE_TYPE. }
false;public;0;3;;public String getType() {     return this.type. }
false;public;1;3;;public void setUrl(final URL url) {     this.url = url. }
false;public;0;3;;public URL getUrl() {     return this.url. }
false;public;1;3;;public void setUrl(final String url) throws MalformedURLException {     this.url = new URL(url). }
false;public;1;3;;public void setKeyStorePassword(final String keyStorePassword) {     this.keyStorePassword = keyStorePassword. }
false;public;0;3;;public String getKeyStorePassword() {     return this.keyStorePassword. }
false;public;1;3;;public void setKeyPassword(final String keyPassword) {     this.keyPassword = keyPassword. }
false;public;0;3;;public String getKeyPassword() {     return this.keyPassword. }
false;public;1;3;;public void setKeyAlias(final String keyAlias) {     this.keyAlias = keyAlias. }
false;public;0;3;;public String getKeyAlias() {     return this.keyAlias. }
false;public;0;36;;public Result load() throws GeneralSecurityException, IOException {     final KeyStore keyStore = KeyStore.getInstance(this.type).     try (InputStream stream = this.url.openStream()) {         keyStore.load(stream, this.keyStorePassword != null ? this.keyStorePassword.toCharArray() : null).     }     String effectiveKeyAlias = this.keyAlias.     if (effectiveKeyAlias == null) {         if (keyStore.size() != 1) {             throw new IllegalArgumentException("Key store contains more than one key. The use of the 'keyAlias' parameter is required.").         }         try {             effectiveKeyAlias = keyStore.aliases().nextElement().         } catch (final NoSuchElementException e) {             throw new RuntimeException("Failed to enumerate key alias", e).         }     }     final Key privateKey = keyStore.getKey(effectiveKeyAlias, this.keyPassword != null ? this.keyPassword.toCharArray() : null).     if (privateKey instanceof PrivateKey) {         final X509Certificate certificate = (X509Certificate) keyStore.getCertificate(effectiveKeyAlias).         if (certificate == null) {             return null.         }         final PublicKey publicKey = certificate.getPublicKey().         final KeyPair keyPair = new KeyPair(publicKey, (PrivateKey) privateKey).         return new Result(certificate, keyPair).     }     return null. }
