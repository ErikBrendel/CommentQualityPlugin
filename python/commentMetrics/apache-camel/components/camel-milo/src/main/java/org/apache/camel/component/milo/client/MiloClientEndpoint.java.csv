commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void doStart() throws Exception {     super.doStart(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     this.component.disposed(this).     super.doStop(). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new MiloClientProducer(this, this.connection, this.defaultAwaitWrites). }
false;public;1;4;;@Override public Consumer createConsumer(final Processor processor) throws Exception {     return new MiloClientConsumer(this, processor, this.connection). }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;3;;public MiloClientConnection getConnection() {     return this.connection. }
false;public;1;7;;// item configuration public void setMethod(final String method) {     if (method == null) {         this.method = null.     } else {         this.method = ExpandedNodeId.parse(method).     } }
false;public;0;7;;public String getMethod() {     if (this.method != null) {         return this.method.toParseableString().     } else {         return null.     } }
false;public;1;7;;public void setNode(final String node) {     if (node == null) {         this.node = null.     } else {         this.node = ExpandedNodeId.parse(node).     } }
false;public;0;7;;public String getNode() {     if (this.node != null) {         return this.node.toParseableString().     } else {         return null.     } }
false;;0;3;;ExpandedNodeId getNodeId() {     return this.node. }
false;;0;3;;ExpandedNodeId getMethodId() {     return this.method. }
false;public;0;3;;public Double getSamplingInterval() {     return this.samplingInterval. }
false;public;1;3;;public void setSamplingInterval(final Double samplingInterval) {     this.samplingInterval = samplingInterval. }
false;public;0;3;;public boolean isDefaultAwaitWrites() {     return this.defaultAwaitWrites. }
false;public;1;3;;public void setDefaultAwaitWrites(final boolean defaultAwaitWrites) {     this.defaultAwaitWrites = defaultAwaitWrites. }
