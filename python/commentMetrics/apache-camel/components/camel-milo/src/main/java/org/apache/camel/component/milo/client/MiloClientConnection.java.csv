commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected void init() throws Exception {     this.manager = new SubscriptionManager(this.configuration, Stack.sharedScheduledExecutor(), 10_000). }
false;public;0;7;;@Override public void close() throws Exception {     if (this.manager != null) {         this.manager.dispose().         this.manager = null.     } }
false;protected,synchronized;0;12;;protected synchronized void checkInit() {     if (this.initialized) {         return.     }     try {         init().     } catch (final Exception e) {         throw new RuntimeException(e).     }     this.initialized = true. }
false;;0;1;;void unregister().
false;public;3;11;;public MonitorHandle monitorValue(final ExpandedNodeId nodeId, Double samplingInterval, final Consumer<DataValue> valueConsumer) {     requireNonNull(configuration).     requireNonNull(valueConsumer).     checkInit().     final UInteger handle = this.manager.registerItem(nodeId, samplingInterval, valueConsumer).     return () -> MiloClientConnection.this.manager.unregisterItem(handle). }
false;public;0;3;;public String getConnectionId() {     return this.configuration.toCacheId(). }
false;public;2;5;;public CompletableFuture<?> writeValue(final ExpandedNodeId nodeId, final Object value) {     checkInit().     return this.manager.write(nodeId, mapWriteValue(value)). }
false;public;3;5;;public CompletableFuture<CallMethodResult> call(final ExpandedNodeId nodeId, final ExpandedNodeId methodId, final Object value) {     checkInit().     return this.manager.call(nodeId, methodId, mapCallValue(value)). }
true;private;1;15;/**  * Map the incoming value to some value callable to the milo client  *  * @param value the incoming value  * @return the outgoing call request  */ ;/**  * Map the incoming value to some value callable to the milo client  *  * @param value the incoming value  * @return the outgoing call request  */ private Variant[] mapCallValue(final Object value) {     if (value == null) {         return new Variant[0].     }     if (value instanceof Variant[]) {         return (Variant[]) value.     }     if (value instanceof Variant) {         return new Variant[] { (Variant) value }.     }     return new Variant[] { new Variant(value) }. }
true;private;1;9;/**  * Map the incoming value to some value writable to the milo client  *  * @param value the incoming value  * @return the outgoing value  */ ;/**  * Map the incoming value to some value writable to the milo client  *  * @param value the incoming value  * @return the outgoing value  */ private DataValue mapWriteValue(final Object value) {     if (value instanceof DataValue) {         return (DataValue) value.     }     if (value instanceof Variant) {         return new DataValue((Variant) value, StatusCode.GOOD, null, null).     }     return new DataValue(new Variant(value), StatusCode.GOOD, null, null). }
