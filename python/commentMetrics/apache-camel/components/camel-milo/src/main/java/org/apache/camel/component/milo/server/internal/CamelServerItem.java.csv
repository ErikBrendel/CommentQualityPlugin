commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DataValue getValue() {     return getDataValue(). }
false;public,synchronized;1;4;;@Override public synchronized void setValue(final DataValue value) {     setDataValue(value). }
false;public;0;4;;public void dispose() {     this.baseNode.removeComponent(this.item).     this.listeners.clear(). }
false;public;1;3;;public void addWriteListener(final Consumer<DataValue> consumer) {     this.listeners.add(consumer). }
false;public;1;3;;public void removeWriteListener(final Consumer<DataValue> consumer) {     this.listeners.remove(consumer). }
false;protected;1;4;;protected void setDataValue(final DataValue value) {     LOG.debug("setValue -> {}", value).     runThrough(this.listeners, c -> c.accept(value)). }
true;protected;2;22;/**  * Run through a list, aggregating errors  * <p>  * The consumer is called for each list item, regardless if the consumer did  * through an exception. All exceptions are caught and thrown in one  * RuntimeException. The first exception being wrapped directly while the  * latter ones, if any, are added as suppressed exceptions.  * </p>  *  * @param list the list to run through  * @param consumer the consumer processing list elements  */ ;/**  * Run through a list, aggregating errors  * <p>  * The consumer is called for each list item, regardless if the consumer did  * through an exception. All exceptions are caught and thrown in one  * RuntimeException. The first exception being wrapped directly while the  * latter ones, if any, are added as suppressed exceptions.  * </p>  *  * @param list the list to run through  * @param consumer the consumer processing list elements  */ protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {     LinkedList<Throwable> errors = null.     for (final Consumer<T> listener : list) {         try {             consumer.accept(listener).         } catch (final Throwable e) {             if (errors == null) {                 errors = new LinkedList<>().             }             errors.add(e).         }     }     if (errors == null || errors.isEmpty()) {         return.     }     final RuntimeException ex = new RuntimeException(errors.pollFirst()).     errors.forEach(ex::addSuppressed).     throw ex. }
false;protected;0;3;;protected DataValue getDataValue() {     return this.value. }
false;public;1;9;;public void update(final Object value) {     if (value instanceof DataValue) {         this.value = (DataValue) value.     } else if (value instanceof Variant) {         this.value = new DataValue((Variant) value, StatusCode.GOOD, DateTime.now()).     } else {         this.value = new DataValue(new Variant(value), StatusCode.GOOD, DateTime.now()).     } }
false;public;0;4;;@Override public String toString() {     return "[CamelServerItem - '" + this.itemId + "']". }
