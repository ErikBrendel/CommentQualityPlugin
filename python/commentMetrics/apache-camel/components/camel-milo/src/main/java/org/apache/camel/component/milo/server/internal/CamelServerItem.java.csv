# id;timestamp;commentText;codeText;commentWords;codeWords
CamelServerItem -> protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer);1491987326;Run through a list, aggregating errors__<p>_The consumer is called for each list item, regardless if the consumer did_through an exception. All exceptions are caught and thrown in one_RuntimeException. The first exception being wrapped directly while the_latter ones, if any, are added as suppressed exceptions._</p>__@param list_the list to run through_@param consumer_the consumer processing list elements;protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {_		LinkedList<Throwable> errors = null___		for (final Consumer<T> listener : list) {_			try {_				consumer.accept(listener)__			} catch (final Throwable e) {_				if (errors == null) {_					errors = new LinkedList<>()__				}_				errors.add(e)__			}_		}__		if (errors == null || errors.isEmpty()) {_			return__		}__		final RuntimeException ex = new RuntimeException(errors.pollFirst())__		errors.forEach(ex::addSuppressed)__		throw ex__	};run,through,a,list,aggregating,errors,p,the,consumer,is,called,for,each,list,item,regardless,if,the,consumer,did,through,an,exception,all,exceptions,are,caught,and,thrown,in,one,runtime,exception,the,first,exception,being,wrapped,directly,while,the,latter,ones,if,any,are,added,as,suppressed,exceptions,p,param,list,the,list,to,run,through,param,consumer,the,consumer,processing,list,elements;protected,t,void,run,through,final,collection,consumer,t,list,final,consumer,consumer,t,consumer,linked,list,throwable,errors,null,for,final,consumer,t,listener,list,try,consumer,accept,listener,catch,final,throwable,e,if,errors,null,errors,new,linked,list,errors,add,e,if,errors,null,errors,is,empty,return,final,runtime,exception,ex,new,runtime,exception,errors,poll,first,errors,for,each,ex,add,suppressed,throw,ex
CamelServerItem -> protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer);1491987326;Run through a list, aggregating errors__<p>_The consumer is called for each list item, regardless if the consumer did_through an exception. All exceptions are caught and thrown in one_RuntimeException. The first exception being wrapped directly while the_latter ones, if any, are added as suppressed exceptions._</p>__@param list_the list to run through_@param consumer_the consumer processing list elements;protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {_		LinkedList<Throwable> errors = null___		for (final Consumer<T> listener : list) {_			try {_				consumer.accept(listener)__			} catch (final Throwable e) {_				if (errors == null) {_					errors = new LinkedList<>()__				}_				errors.add(e)__			}_		}__		if (errors == null || errors.isEmpty()) {_			return__		}__		final RuntimeException ex = new RuntimeException(errors.pollFirst())__		errors.forEach(ex::addSuppressed)__		throw ex__	};run,through,a,list,aggregating,errors,p,the,consumer,is,called,for,each,list,item,regardless,if,the,consumer,did,through,an,exception,all,exceptions,are,caught,and,thrown,in,one,runtime,exception,the,first,exception,being,wrapped,directly,while,the,latter,ones,if,any,are,added,as,suppressed,exceptions,p,param,list,the,list,to,run,through,param,consumer,the,consumer,processing,list,elements;protected,t,void,run,through,final,collection,consumer,t,list,final,consumer,consumer,t,consumer,linked,list,throwable,errors,null,for,final,consumer,t,listener,list,try,consumer,accept,listener,catch,final,throwable,e,if,errors,null,errors,new,linked,list,errors,add,e,if,errors,null,errors,is,empty,return,final,runtime,exception,ex,new,runtime,exception,errors,poll,first,errors,for,each,ex,add,suppressed,throw,ex
CamelServerItem -> protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer);1491987327;Run through a list, aggregating errors_<p>_The consumer is called for each list item, regardless if the consumer did_through an exception. All exceptions are caught and thrown in one_RuntimeException. The first exception being wrapped directly while the_latter ones, if any, are added as suppressed exceptions._</p>__@param list the list to run through_@param consumer the consumer processing list elements;protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {_        LinkedList<Throwable> errors = null___        for (final Consumer<T> listener : list) {_            try {_                consumer.accept(listener)__            } catch (final Throwable e) {_                if (errors == null) {_                    errors = new LinkedList<>()__                }_                errors.add(e)__            }_        }__        if (errors == null || errors.isEmpty()) {_            return__        }__        final RuntimeException ex = new RuntimeException(errors.pollFirst())__        errors.forEach(ex::addSuppressed)__        throw ex__    };run,through,a,list,aggregating,errors,p,the,consumer,is,called,for,each,list,item,regardless,if,the,consumer,did,through,an,exception,all,exceptions,are,caught,and,thrown,in,one,runtime,exception,the,first,exception,being,wrapped,directly,while,the,latter,ones,if,any,are,added,as,suppressed,exceptions,p,param,list,the,list,to,run,through,param,consumer,the,consumer,processing,list,elements;protected,t,void,run,through,final,collection,consumer,t,list,final,consumer,consumer,t,consumer,linked,list,throwable,errors,null,for,final,consumer,t,listener,list,try,consumer,accept,listener,catch,final,throwable,e,if,errors,null,errors,new,linked,list,errors,add,e,if,errors,null,errors,is,empty,return,final,runtime,exception,ex,new,runtime,exception,errors,poll,first,errors,for,each,ex,add,suppressed,throw,ex
CamelServerItem -> protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer);1491987327;Run through a list, aggregating errors_<p>_The consumer is called for each list item, regardless if the consumer did_through an exception. All exceptions are caught and thrown in one_RuntimeException. The first exception being wrapped directly while the_latter ones, if any, are added as suppressed exceptions._</p>__@param list the list to run through_@param consumer the consumer processing list elements;protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {_        LinkedList<Throwable> errors = null___        for (final Consumer<T> listener : list) {_            try {_                consumer.accept(listener)__            } catch (final Throwable e) {_                if (errors == null) {_                    errors = new LinkedList<>()__                }_                errors.add(e)__            }_        }__        if (errors == null || errors.isEmpty()) {_            return__        }__        final RuntimeException ex = new RuntimeException(errors.pollFirst())__        errors.forEach(ex::addSuppressed)__        throw ex__    };run,through,a,list,aggregating,errors,p,the,consumer,is,called,for,each,list,item,regardless,if,the,consumer,did,through,an,exception,all,exceptions,are,caught,and,thrown,in,one,runtime,exception,the,first,exception,being,wrapped,directly,while,the,latter,ones,if,any,are,added,as,suppressed,exceptions,p,param,list,the,list,to,run,through,param,consumer,the,consumer,processing,list,elements;protected,t,void,run,through,final,collection,consumer,t,list,final,consumer,consumer,t,consumer,linked,list,throwable,errors,null,for,final,consumer,t,listener,list,try,consumer,accept,listener,catch,final,throwable,e,if,errors,null,errors,new,linked,list,errors,add,e,if,errors,null,errors,is,empty,return,final,runtime,exception,ex,new,runtime,exception,errors,poll,first,errors,for,each,ex,add,suppressed,throw,ex
CamelServerItem -> protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer);1521799533;Run through a list, aggregating errors_<p>_The consumer is called for each list item, regardless if the consumer did_through an exception. All exceptions are caught and thrown in one_RuntimeException. The first exception being wrapped directly while the_latter ones, if any, are added as suppressed exceptions._</p>__@param list the list to run through_@param consumer the consumer processing list elements;protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {_        LinkedList<Throwable> errors = null___        for (final Consumer<T> listener : list) {_            try {_                consumer.accept(listener)__            } catch (final Throwable e) {_                if (errors == null) {_                    errors = new LinkedList<>()__                }_                errors.add(e)__            }_        }__        if (errors == null || errors.isEmpty()) {_            return__        }__        final RuntimeException ex = new RuntimeException(errors.pollFirst())__        errors.forEach(ex::addSuppressed)__        throw ex__    };run,through,a,list,aggregating,errors,p,the,consumer,is,called,for,each,list,item,regardless,if,the,consumer,did,through,an,exception,all,exceptions,are,caught,and,thrown,in,one,runtime,exception,the,first,exception,being,wrapped,directly,while,the,latter,ones,if,any,are,added,as,suppressed,exceptions,p,param,list,the,list,to,run,through,param,consumer,the,consumer,processing,list,elements;protected,t,void,run,through,final,collection,consumer,t,list,final,consumer,consumer,t,consumer,linked,list,throwable,errors,null,for,final,consumer,t,listener,list,try,consumer,accept,listener,catch,final,throwable,e,if,errors,null,errors,new,linked,list,errors,add,e,if,errors,null,errors,is,empty,return,final,runtime,exception,ex,new,runtime,exception,errors,poll,first,errors,for,each,ex,add,suppressed,throw,ex
CamelServerItem -> protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer);1539016146;Run through a list, aggregating errors_<p>_The consumer is called for each list item, regardless if the consumer did_through an exception. All exceptions are caught and thrown in one_RuntimeException. The first exception being wrapped directly while the_latter ones, if any, are added as suppressed exceptions._</p>__@param list the list to run through_@param consumer the consumer processing list elements;protected <T> void runThrough(final Collection<Consumer<T>> list, final Consumer<Consumer<T>> consumer) {_        LinkedList<Throwable> errors = null___        for (final Consumer<T> listener : list) {_            try {_                consumer.accept(listener)__            } catch (final Throwable e) {_                if (errors == null) {_                    errors = new LinkedList<>()__                }_                errors.add(e)__            }_        }__        if (errors == null || errors.isEmpty()) {_            return__        }__        final RuntimeException ex = new RuntimeException(errors.pollFirst())__        errors.forEach(ex::addSuppressed)__        throw ex__    };run,through,a,list,aggregating,errors,p,the,consumer,is,called,for,each,list,item,regardless,if,the,consumer,did,through,an,exception,all,exceptions,are,caught,and,thrown,in,one,runtime,exception,the,first,exception,being,wrapped,directly,while,the,latter,ones,if,any,are,added,as,suppressed,exceptions,p,param,list,the,list,to,run,through,param,consumer,the,consumer,processing,list,elements;protected,t,void,run,through,final,collection,consumer,t,list,final,consumer,consumer,t,consumer,linked,list,throwable,errors,null,for,final,consumer,t,listener,list,try,consumer,accept,listener,catch,final,throwable,e,if,errors,null,errors,new,linked,list,errors,add,e,if,errors,null,errors,is,empty,return,final,runtime,exception,ex,new,runtime,exception,errors,poll,first,errors,for,each,ex,add,suppressed,throw,ex
