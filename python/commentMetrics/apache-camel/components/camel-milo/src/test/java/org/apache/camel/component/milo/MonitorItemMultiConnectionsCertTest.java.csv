commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;16;;@Override protected void configureMiloServer(final MiloServerComponent server) throws Exception {     super.configureMiloServer(server).     final Path baseDir = Paths.get("target/testing/cert/default").     final Path trusted = baseDir.resolve("trusted").     Files.createDirectories(trusted).     Files.copy(Paths.get("src/test/resources/cert/certificate.der"), trusted.resolve("certificate.der"), REPLACE_EXISTING).     server.setServerCertificate(loadDefaultTestKey()).     server.setDefaultCertificateValidator(baseDir.toFile()).     server.setSecurityPolicies(EnumSet.of(SecurityPolicy.Basic256Sha256)).     server.setUsernameSecurityPolicyUri(SecurityPolicy.Basic256Sha256). }
false;public;0;8;;@Override public void configure() throws Exception {     from(DIRECT_START_1).to(MILO_SERVER_ITEM_1).     from(resolve(MILO_CLIENT_ITEM_C1_1)).to(MOCK_TEST_1).     from(resolve(MILO_CLIENT_ITEM_C2_1)).to(MOCK_TEST_2).     from(resolve(MILO_CLIENT_ITEM_C3_1)).to(MOCK_TEST_3). }
false;protected;0;13;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(DIRECT_START_1).to(MILO_SERVER_ITEM_1).             from(resolve(MILO_CLIENT_ITEM_C1_1)).to(MOCK_TEST_1).             from(resolve(MILO_CLIENT_ITEM_C2_1)).to(MOCK_TEST_2).             from(resolve(MILO_CLIENT_ITEM_C3_1)).to(MOCK_TEST_3).         }     }. }
true;public;0;21;/**  * Monitor multiple connections, but only one has the correct credentials  */ ;/**  * Monitor multiple connections, but only one has the correct credentials  */ @Test public void testMonitorItem1() throws Exception {     // item 1 ... only this one receives     this.test1Endpoint.setExpectedCount(1).     this.test1Endpoint.setSleepForEmptyTest(5_000).     // item 2     this.test2Endpoint.setExpectedCount(0).     this.test2Endpoint.setSleepForEmptyTest(5_000).     // item 3     this.test3Endpoint.setExpectedCount(0).     this.test3Endpoint.setSleepForEmptyTest(5_000).     // set server value     this.producer1.sendBody("Foo").     // assert     assertMockEndpointsSatisfied(). }
