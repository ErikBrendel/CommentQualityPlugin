commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public void configure() throws Exception {     from(MILO_SERVER_ITEM_1).to(MOCK_TEST_1).     from(MILO_SERVER_ITEM_2).to(MOCK_TEST_2).     from(DIRECT_START_1).to(resolve(MILO_CLIENT_ITEM_C1_1)).     from(DIRECT_START_2).to(resolve(MILO_CLIENT_ITEM_C1_2)).     from(DIRECT_START_3).to(resolve(MILO_CLIENT_ITEM_C2_1)).     from(DIRECT_START_4).to(resolve(MILO_CLIENT_ITEM_C2_2)). }
false;protected;0;17;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(MILO_SERVER_ITEM_1).to(MOCK_TEST_1).             from(MILO_SERVER_ITEM_2).to(MOCK_TEST_2).             from(DIRECT_START_1).to(resolve(MILO_CLIENT_ITEM_C1_1)).             from(DIRECT_START_2).to(resolve(MILO_CLIENT_ITEM_C1_2)).             from(DIRECT_START_3).to(resolve(MILO_CLIENT_ITEM_C2_1)).             from(DIRECT_START_4).to(resolve(MILO_CLIENT_ITEM_C2_2)).         }     }. }
false;public;0;17;;@Test public void testWrite1() throws Exception {     // item 1     this.test1Endpoint.setExpectedCount(2).     testBody(this.test1Endpoint.message(0), assertGoodValue("Foo1")).     testBody(this.test1Endpoint.message(1), assertGoodValue("Foo2")).     // item 2     this.test2Endpoint.setExpectedCount(0).     // send     sendValue(this.producer1, new Variant("Foo1")).     sendValue(this.producer1, new Variant("Foo2")).     // assert     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testWrite2() throws Exception {     // item 1     this.test1Endpoint.setExpectedCount(0).     // item 2     this.test2Endpoint.setExpectedCount(2).     testBody(this.test2Endpoint.message(0), assertGoodValue("Foo1")).     testBody(this.test2Endpoint.message(1), assertGoodValue("Foo2")).     // send     sendValue(this.producer2, new Variant("Foo1")).     sendValue(this.producer2, new Variant("Foo2")).     // assert     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Test public void testWrite3() throws Exception {     // item 1     this.test1Endpoint.setExpectedCount(2).     testBody(this.test1Endpoint.message(0), assertGoodValue("Foo1")).     testBody(this.test1Endpoint.message(1), assertGoodValue("Foo3")).     // item 1     this.test2Endpoint.setExpectedCount(2).     testBody(this.test2Endpoint.message(0), assertGoodValue("Foo2")).     testBody(this.test2Endpoint.message(1), assertGoodValue("Foo4")).     // send     sendValue(this.producer1, new Variant("Foo1")).     sendValue(this.producer2, new Variant("Foo2")).     sendValue(this.producer3, new Variant("Foo3")).     sendValue(this.producer4, new Variant("Foo4")).     // assert     assertMockEndpointsSatisfied(). }
false;private,static;2;4;;private static void sendValue(final ProducerTemplate producerTemplate, final Variant variant) {     // we always write synchronously since we do need the message order     producerTemplate.sendBodyAndHeader(variant, "await", true). }
