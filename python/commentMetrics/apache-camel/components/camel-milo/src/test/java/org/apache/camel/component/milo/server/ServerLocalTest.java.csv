commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void pickFreePort() throws IOException {     final MiloServerComponent component = context().getComponent("milo-server", MiloServerComponent.class).     component.setBindPort(Ports.pickServerPort()). }
false;public;0;4;;@Override public void configure() throws Exception {     from(MILO_ITEM_1).to(MOCK_TEST). }
false;protected;0;9;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(MILO_ITEM_1).to(MOCK_TEST).         }     }. }
false;public;0;3;;@Test public void shouldStartComponent() { }
false;public;0;4;;@Test public void testAcceptVariantString() {     sendBody(MILO_ITEM_1, new Variant("Foo")). }
false;public;0;4;;@Test public void testAcceptVariantDouble() {     sendBody(MILO_ITEM_1, new Variant(0.0)). }
false;public;0;4;;@Test public void testAcceptString() {     sendBody(MILO_ITEM_1, "Foo"). }
false;public;0;4;;@Test public void testAcceptDouble() {     sendBody(MILO_ITEM_1, 0.0). }
false;public;0;4;;@Test public void testAcceptDataValueString() {     sendBody(MILO_ITEM_1, new DataValue(new Variant("Foo"))). }
false;public;0;4;;@Test public void testAcceptDataValueDouble() {     sendBody(MILO_ITEM_1, new DataValue(new Variant(0.0))). }
