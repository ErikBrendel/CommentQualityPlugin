commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from(DIRECT_START_1).to(MILO_SERVER_ITEM_1).     from(resolve(MILO_CLIENT_ITEM_C1_1)).to(MOCK_TEST_1). }
false;protected;0;11;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(DIRECT_START_1).to(MILO_SERVER_ITEM_1).             from(resolve(MILO_CLIENT_ITEM_C1_1)).to(MOCK_TEST_1).         }     }. }
true;public;0;26;/**  * Monitor multiple events  */ ;/**  * Monitor multiple events  */ @Test public void testMonitorItem1() throws Exception {     /*          * we will wait 2 * 1_000 milliseconds between server updates since the          * default server update rate is 1_000 milliseconds          */     // set server values     this.producer1.sendBody("Foo").     Thread.sleep(2_000).     this.producer1.sendBody("Bar").     Thread.sleep(2_000).     this.producer1.sendBody("Baz").     Thread.sleep(2_000).     // item 1 ... only this one receives     this.test1Endpoint.setExpectedCount(3).     // tests     testBody(this.test1Endpoint.message(0), assertGoodValue("Foo")).     testBody(this.test1Endpoint.message(1), assertGoodValue("Bar")).     testBody(this.test1Endpoint.message(2), assertGoodValue("Baz")).     // assert     assertMockEndpointsSatisfied(). }
