commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     this.serverPort = Ports.pickServerPort(). }
false;public;0;3;;public int getServerPort() {     return this.serverPort. }
false;protected;0;3;;protected boolean isAddServer() {     return true. }
true;protected;1;7;/**  * Replace the port placeholder with the dynamic server port  *  * @param uri the URI to process  * @return the result, may be {@code null} if the input is {@code null}  */ ;/**  * Replace the port placeholder with the dynamic server port  *  * @param uri the URI to process  * @return the result, may be {@code null} if the input is {@code null}  */ protected String resolve(String uri) {     if (uri == null) {         return uri.     }     return uri.replace("@@port@@", Integer.toString(this.serverPort)). }
false;public,static;2;3;;public static void testBody(final AssertionClause clause, final Consumer<DataValue> valueConsumer) {     testBody(clause, DataValue.class, valueConsumer). }
false;public,static;3;7;;public static <T> void testBody(final AssertionClause clause, final Class<T> bodyClass, final Consumer<T> valueConsumer) {     clause.predicate(exchange -> {         final T body = exchange.getIn().getBody(bodyClass).         valueConsumer.accept(body).         return true.     }). }
false;public,static;1;8;;public static Consumer<DataValue> assertGoodValue(final Object expectedValue) {     return value -> {         assertNotNull(value).         assertEquals(expectedValue, value.getValue().getValue()).         assertTrue(value.getStatusCode().isGood()).         assertFalse(value.getStatusCode().isBad()).     }. }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     configureContext(context).     return context. }
false;protected;1;6;;protected void configureContext(final CamelContext context) throws Exception {     if (isAddServer()) {         final MiloServerComponent server = context.getComponent("milo-server", MiloServerComponent.class).         configureMiloServer(server).     } }
false;protected;1;7;;protected void configureMiloServer(final MiloServerComponent server) throws Exception {     server.setBindAddresses("localhost").     server.setBindPort(this.serverPort).     server.setUserAuthenticationCredentials("foo:bar,foo2:bar2").     server.setUsernameSecurityPolicyUri(SecurityPolicy.None).     server.setSecurityPoliciesById("None"). }
true;protected;0;13;/**  * Create a default key store for testing  *  * @return always returns a key store  */ ;/**  * Create a default key store for testing  *  * @return always returns a key store  */ protected KeyStoreLoader.Result loadDefaultTestKey() {     try {         final KeyStoreLoader loader = new KeyStoreLoader().         loader.setUrl("file:src/test/resources/cert/cert.p12").         loader.setKeyStorePassword("pwd1").         loader.setKeyPassword("pwd1").         return loader.load().     } catch (final GeneralSecurityException | IOException e) {         throw new RuntimeException(e).     } }
