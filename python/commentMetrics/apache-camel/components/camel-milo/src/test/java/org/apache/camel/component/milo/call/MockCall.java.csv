commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@UaMethod public void call(final InvocationContext context, @UaInputArgument(name = "in1") final String in1, @UaOutputArgument(name = "out1") final Out<String> out1) {     this.calls.add(in1).     out1.set("out-" + in1). }
false;public,static;5;15;;public static UaMethodNode fromNode(final UShort index, final ServerNodeMap nodeMap, final String nodeId, final String name, final Object methodObject) {     try {         final UaMethodNode method = new UaMethodNode(nodeMap, new NodeId(index, nodeId), new QualifiedName(index, name), english(name), english(nodeId), UInteger.MIN, UInteger.MIN, true, true).         final AnnotationBasedInvocationHandler handler = AnnotationBasedInvocationHandler.fromAnnotatedObject(nodeMap, methodObject).         method.setInputArguments(handler.getInputArguments()).         method.setOutputArguments(handler.getOutputArguments()).         method.setInvocationHandler(handler).         return method.     } catch (Exception e) {         throw new RuntimeException(e).     } }
