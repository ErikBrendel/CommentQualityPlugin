commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean isAddServer() {     return false. }
false;public;0;25;;@Before public void start() throws Exception {     final OpcUaServerConfigBuilder config = new OpcUaServerConfigBuilder().     config.setBindAddresses(Arrays.asList("localhost")).     config.setBindPort(getServerPort()).     config.setIdentityValidator(AnonymousIdentityValidator.INSTANCE).     config.setUserTokenPolicies(Arrays.asList(OpcUaServerConfig.USER_TOKEN_POLICY_ANONYMOUS)).     config.setSecurityPolicies(EnumSet.of(SecurityPolicy.None)).     config.setCertificateManager(new DefaultCertificateManager()).     config.setCertificateValidator(new InsecureCertificateValidator()).     this.server = new OpcUaServer(config.build()).     this.call1 = new MockCall.Call1().     this.server.getNamespaceManager().registerAndAdd(MockNamespace.URI, index -> {         final List<UaMethodNode> methods = new LinkedList<>().         methods.add(MockCall.fromNode(index, this.server.getNodeMap(), "id1", "name1", this.call1)).         return new MockNamespace(index, this.server, methods).     }).     this.server.startup().get(). }
false;public;0;4;;@After public void stop() {     this.server.shutdown(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(DIRECT_START_1).to(resolve(MILO_CLIENT_ITEM_C1_1)). }
false;protected;0;9;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(DIRECT_START_1).to(resolve(MILO_CLIENT_ITEM_C1_1)).         }     }. }
false;public;0;11;;@Test public void testCall1() throws Exception {     // call     doCall(this.producer1, "foo").     doCall(this.producer1, "bar").     // assert     Assert.assertArrayEquals(new Object[] { "foo", "bar" }, this.call1.calls.toArray()). }
false;private,static;2;4;;private static void doCall(final ProducerTemplate producerTemplate, final Object input) {     // we always write synchronously since we do need the message order     producerTemplate.sendBodyAndHeader(input, "await", true). }
