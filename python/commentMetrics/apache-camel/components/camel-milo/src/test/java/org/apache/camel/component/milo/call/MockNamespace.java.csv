commented;modifiers;parameterAmount;loc;comment;code
false;private;1;17;;private void registerItems(List<UaMethodNode> methods) {     // create a folder     final UaFolderNode folder = new UaFolderNode(this.nodeMap, new NodeId(this.index, FOLDER_ID), new QualifiedName(this.index, "FooBarFolder"), LocalizedText.english("Foo Bar Folder")).     // add our folder to the objects folder     this.nodeMap.getNode(Identifiers.ObjectsFolder).ifPresent(node -> {         ((FolderNode) node).addComponent(folder).     }).     // add method calls     methods.forEach(folder::addComponent). }
false;public;4;17;;// default method implementations follow @Override public void read(final ReadContext context, final Double maxAge, final TimestampsToReturn timestamps, final List<ReadValueId> readValueIds) {     final List<DataValue> results = new ArrayList<>(readValueIds.size()).     for (final ReadValueId id : readValueIds) {         final ServerNode node = this.nodeMap.get(id.getNodeId()).         final DataValue value = node != null ? node.readAttribute(new AttributeContext(context), id.getAttributeId()) : new DataValue(StatusCodes.Bad_NodeIdUnknown).         results.add(value).     }     // report back with result     context.complete(results). }
false;public;2;15;;@Override public void write(final WriteContext context, final List<WriteValue> writeValues) {     final List<StatusCode> results = writeValues.stream().map(value -> {         if (this.nodeMap.containsKey(value.getNodeId())) {             return new StatusCode(StatusCodes.Bad_NotWritable).         } else {             return new StatusCode(StatusCodes.Bad_NodeIdUnknown).         }     }).collect(toList()).     // report back with result     context.complete(results). }
false;public;2;12;;@Override public CompletableFuture<List<Reference>> browse(final AccessContext context, final NodeId nodeId) {     final ServerNode node = this.nodeMap.get(nodeId).     if (node != null) {         return CompletableFuture.completedFuture(node.getReferences()).     } else {         final CompletableFuture<List<Reference>> f = new CompletableFuture<>().         f.completeExceptionally(new UaException(StatusCodes.Bad_NodeIdUnknown)).         return f.     } }
false;public;1;7;;@Override public Optional<MethodInvocationHandler> getInvocationHandler(final NodeId methodId) {     return Optional.ofNullable(this.nodeMap.get(methodId)).filter(n -> n instanceof UaMethodNode).flatMap(n -> {         final UaMethodNode m = (UaMethodNode) n.         return m.getInvocationHandler().     }). }
false;public;1;4;;@Override public void onDataItemsCreated(final List<DataItem> dataItems) {     this.subscriptionModel.onDataItemsCreated(dataItems). }
false;public;1;4;;@Override public void onDataItemsModified(final List<DataItem> dataItems) {     this.subscriptionModel.onDataItemsModified(dataItems). }
false;public;1;4;;@Override public void onDataItemsDeleted(final List<DataItem> dataItems) {     this.subscriptionModel.onDataItemsDeleted(dataItems). }
false;public;1;4;;@Override public void onMonitoringModeChanged(final List<MonitoredItem> monitoredItems) {     this.subscriptionModel.onMonitoringModeChanged(monitoredItems). }
false;public;0;4;;@Override public UShort getNamespaceIndex() {     return this.index. }
false;public;0;4;;@Override public String getNamespaceUri() {     return URI. }
