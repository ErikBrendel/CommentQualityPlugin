commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case listClusters:             listClusters(getEndpoint().getEksClient(), exchange).             break.         case describeCluster:             describeCluster(getEndpoint().getEksClient(), exchange).             break.         case createCluster:             createCluster(getEndpoint().getEksClient(), exchange).             break.         case deleteCluster:             deleteCluster(getEndpoint().getEksClient(), exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;7;;private EKSOperations determineOperation(Exchange exchange) {     EKSOperations operation = exchange.getIn().getHeader(EKSConstants.OPERATION, EKSOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected EKSConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (eksProducerToString == null) {         eksProducerToString = "EKSProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return eksProducerToString. }
false;public;0;4;;@Override public EKSEndpoint getEndpoint() {     return (EKSEndpoint) super.getEndpoint(). }
false;private;2;16;;private void listClusters(AmazonEKS eksClient, Exchange exchange) {     ListClustersRequest request = new ListClustersRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EKSConstants.MAX_RESULTS))) {         int maxRes = exchange.getIn().getHeader(EKSConstants.MAX_RESULTS, Integer.class).         request.withMaxResults(maxRes).     }     ListClustersResult result.     try {         result = eksClient.listClusters(request).     } catch (AmazonServiceException ase) {         log.trace("List Clusters command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;24;;private void createCluster(AmazonEKS eksClient, Exchange exchange) {     CreateClusterRequest request = new CreateClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EKSConstants.CLUSTER_NAME))) {         String name = exchange.getIn().getHeader(EKSConstants.CLUSTER_NAME, String.class).         request.withName(name).     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EKSConstants.ROLE_ARN))) {         String roleArn = exchange.getIn().getHeader(EKSConstants.ROLE_ARN, String.class).         request.withRoleArn(roleArn).     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EKSConstants.VPC_CONFIG))) {         VpcConfigRequest vpcConfig = exchange.getIn().getHeader(EKSConstants.VPC_CONFIG, VpcConfigRequest.class).         request.withResourcesVpcConfig(vpcConfig).     }     CreateClusterResult result.     try {         result = eksClient.createCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Create Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void describeCluster(AmazonEKS eksClient, Exchange exchange) {     DescribeClusterRequest request = new DescribeClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EKSConstants.CLUSTER_NAME))) {         String name = exchange.getIn().getHeader(EKSConstants.CLUSTER_NAME, String.class).         request.withName(name).     } else {         throw new IllegalArgumentException("Cluster name must be specified").     }     DescribeClusterResult result.     try {         result = eksClient.describeCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Describe Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void deleteCluster(AmazonEKS eksClient, Exchange exchange) {     DeleteClusterRequest request = new DeleteClusterRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(EKSConstants.CLUSTER_NAME))) {         String name = exchange.getIn().getHeader(EKSConstants.CLUSTER_NAME, String.class).         request.withName(name).     } else {         throw new IllegalArgumentException("Cluster name must be specified").     }     DeleteClusterResult result.     try {         result = eksClient.deleteCluster(request).     } catch (AmazonServiceException ase) {         log.trace("Delete Cluster command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
