commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.listClusters). }
false;public;0;17;;@Test public void kmsListClustersTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:listClusters", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.listClusters).         }     }).     assertMockEndpointsSatisfied().     ListClustersResult resultGet = (ListClustersResult) exchange.getIn().getBody().     assertEquals(1, resultGet.getClusters().size()).     assertEquals("Test", resultGet.getClusters().get(0)). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.createCluster).     exchange.getIn().setHeader(EKSConstants.CLUSTER_NAME, "Test").     VpcConfigRequest req = new VpcConfigRequest().     exchange.getIn().setHeader(EKSConstants.VPC_CONFIG, req).     exchange.getIn().setHeader(EKSConstants.ROLE_ARN, "arn:aws:eks::123456789012:user/Camel"). }
false;public;0;20;;@Test public void eksCreateClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:createCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.createCluster).             exchange.getIn().setHeader(EKSConstants.CLUSTER_NAME, "Test").             VpcConfigRequest req = new VpcConfigRequest().             exchange.getIn().setHeader(EKSConstants.VPC_CONFIG, req).             exchange.getIn().setHeader(EKSConstants.ROLE_ARN, "arn:aws:eks::123456789012:user/Camel").         }     }).     assertMockEndpointsSatisfied().     CreateClusterResult resultGet = (CreateClusterResult) exchange.getIn().getBody().     assertEquals("Test", resultGet.getCluster().getName()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.describeCluster).     exchange.getIn().setHeader(EKSConstants.CLUSTER_NAME, "Test"). }
false;public;0;17;;@Test public void eksDescribeClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:describeCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.describeCluster).             exchange.getIn().setHeader(EKSConstants.CLUSTER_NAME, "Test").         }     }).     assertMockEndpointsSatisfied().     DescribeClusterResult resultGet = exchange.getIn().getBody(DescribeClusterResult.class).     assertEquals("Test", resultGet.getCluster().getName()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.deleteCluster).     exchange.getIn().setHeader(EKSConstants.CLUSTER_NAME, "Test"). }
false;public;0;17;;@Test public void eksDeleteClusterTest() throws Exception {     mock.expectedMessageCount(1).     Exchange exchange = template.request("direct:deleteCluster", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(EKSConstants.OPERATION, EKSOperations.deleteCluster).             exchange.getIn().setHeader(EKSConstants.CLUSTER_NAME, "Test").         }     }).     assertMockEndpointsSatisfied().     DeleteClusterResult resultGet = exchange.getIn().getBody(DeleteClusterResult.class).     assertEquals("Test", resultGet.getCluster().getName()). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/aws/eks/EKSComponentSpringTest-context.xml"). }
