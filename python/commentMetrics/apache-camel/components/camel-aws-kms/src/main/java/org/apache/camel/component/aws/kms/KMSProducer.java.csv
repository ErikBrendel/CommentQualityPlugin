commented;modifiers;parameterAmount;loc;comment;code
false;public;1;24;;public void process(Exchange exchange) throws Exception {     switch(determineOperation(exchange)) {         case listKeys:             listKeys(getEndpoint().getKmsClient(), exchange).             break.         case createKey:             createKey(getEndpoint().getKmsClient(), exchange).             break.         case disableKey:             disableKey(getEndpoint().getKmsClient(), exchange).             break.         case enableKey:             enableKey(getEndpoint().getKmsClient(), exchange).             break.         case scheduleKeyDeletion:             scheduleKeyDeletion(getEndpoint().getKmsClient(), exchange).             break.         case describeKey:             describeKey(getEndpoint().getKmsClient(), exchange).             break.         default:             throw new IllegalArgumentException("Unsupported operation").     } }
false;private;1;7;;private KMSOperations determineOperation(Exchange exchange) {     KMSOperations operation = exchange.getIn().getHeader(KMSConstants.OPERATION, KMSOperations.class).     if (operation == null) {         operation = getConfiguration().getOperation().     }     return operation. }
false;protected;0;3;;protected KMSConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (kmsProducerToString == null) {         kmsProducerToString = "KMSProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return kmsProducerToString. }
false;public;0;4;;@Override public KMSEndpoint getEndpoint() {     return (KMSEndpoint) super.getEndpoint(). }
false;private;2;16;;private void listKeys(AWSKMS kmsClient, Exchange exchange) {     ListKeysRequest request = new ListKeysRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.LIMIT))) {         int limit = exchange.getIn().getHeader(KMSConstants.LIMIT, Integer.class).         request.withLimit(limit).     }     ListKeysResult result.     try {         result = kmsClient.listKeys(request).     } catch (AmazonServiceException ase) {         log.trace("List Keys command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;16;;private void createKey(AWSKMS kmsClient, Exchange exchange) {     CreateKeyRequest request = new CreateKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.DESCRIPTION))) {         String description = exchange.getIn().getHeader(KMSConstants.DESCRIPTION, String.class).         request.withDescription(description).     }     CreateKeyResult result.     try {         result = kmsClient.createKey(request).     } catch (AmazonServiceException ase) {         log.trace("Create Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void disableKey(AWSKMS kmsClient, Exchange exchange) {     DisableKeyRequest request = new DisableKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.KEY_ID))) {         String keyId = exchange.getIn().getHeader(KMSConstants.KEY_ID, String.class).         request.withKeyId(keyId).     } else {         throw new IllegalArgumentException("Key Id must be specified").     }     DisableKeyResult result.     try {         result = kmsClient.disableKey(request).     } catch (AmazonServiceException ase) {         log.trace("Disable Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;22;;private void scheduleKeyDeletion(AWSKMS kmsClient, Exchange exchange) {     ScheduleKeyDeletionRequest request = new ScheduleKeyDeletionRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.KEY_ID))) {         String keyId = exchange.getIn().getHeader(KMSConstants.KEY_ID, String.class).         request.withKeyId(keyId).     } else {         throw new IllegalArgumentException("Key Id must be specified").     }     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.PENDING_WINDOW_IN_DAYS))) {         int pendingWindows = exchange.getIn().getHeader(KMSConstants.PENDING_WINDOW_IN_DAYS, Integer.class).         request.withPendingWindowInDays(pendingWindows).     }     ScheduleKeyDeletionResult result.     try {         result = kmsClient.scheduleKeyDeletion(request).     } catch (AmazonServiceException ase) {         log.trace("Schedule Key Deletion command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void describeKey(AWSKMS kmsClient, Exchange exchange) {     DescribeKeyRequest request = new DescribeKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.KEY_ID))) {         String keyId = exchange.getIn().getHeader(KMSConstants.KEY_ID, String.class).         request.withKeyId(keyId).     } else {         throw new IllegalArgumentException("Key Id must be specified").     }     DescribeKeyResult result.     try {         result = kmsClient.describeKey(request).     } catch (AmazonServiceException ase) {         log.trace("Describe Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;private;2;18;;private void enableKey(AWSKMS kmsClient, Exchange exchange) {     EnableKeyRequest request = new EnableKeyRequest().     if (ObjectHelper.isNotEmpty(exchange.getIn().getHeader(KMSConstants.KEY_ID))) {         String keyId = exchange.getIn().getHeader(KMSConstants.KEY_ID, String.class).         request.withKeyId(keyId).     } else {         throw new IllegalArgumentException("Key Id must be specified").     }     EnableKeyResult result.     try {         result = kmsClient.enableKey(request).     } catch (AmazonServiceException ase) {         log.trace("Enable Key command returned the error code {}", ase.getErrorCode()).         throw ase.     }     Message message = getMessageForResponse(exchange).     message.setBody(result). }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
