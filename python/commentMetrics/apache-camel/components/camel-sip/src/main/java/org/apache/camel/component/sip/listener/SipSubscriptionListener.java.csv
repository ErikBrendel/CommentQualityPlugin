commented;modifiers;parameterAmount;loc;comment;code
false;private;1;10;;private void dispatchExchange(Object response) throws CamelException {     LOG.debug("Consumer Dispatching the received notification along the route").     Exchange exchange = sipSubscriber.getEndpoint().createExchange(ExchangePattern.InOnly).     exchange.getIn().setBody(response).     try {         sipSubscriber.getProcessor().process(exchange).     } catch (Exception e) {         throw new CamelException("Error in consumer while dispatching exchange", e).     } }
false;public;1;13;;public void processRequest(RequestEvent requestReceivedEvent) {     Request request = requestReceivedEvent.getRequest().     ServerTransaction serverTransactionId = requestReceivedEvent.getServerTransaction().     String viaBranch = ((ViaHeader) (request.getHeaders(ViaHeader.NAME).next())).getParameter("branch").     LOG.debug("Request: {}", request.getMethod()).     LOG.debug("Server Transaction Id: {}", serverTransactionId).     LOG.debug("Received From Branch: {}", viaBranch).     if (request.getMethod().equals(Request.NOTIFY)) {         processNotify(requestReceivedEvent, serverTransactionId).     } }
false;public,synchronized;2;35;;public synchronized void processNotify(RequestEvent requestEvent, ServerTransaction serverTransactionId) {     LOG.debug("Notification received at Subscriber").     SipProvider provider = (SipProvider) requestEvent.getSource().     Request notify = requestEvent.getRequest().     try {         if (serverTransactionId == null) {             LOG.info("ServerTransaction is null. Creating new Server transaction").             serverTransactionId = provider.getNewServerTransaction(notify).         }         Dialog dialog = serverTransactionId.getDialog().         if (dialog != subscriberDialog) {             forkedDialog = dialog.         }         // Dispatch the response along the route         dispatchExchange(notify.getContent()).         // Send back an success response         Response response = sipSubscriber.getConfiguration().getMessageFactory().createResponse(200, notify).         response.addHeader(sipSubscriber.getConfiguration().getContactHeader()).         serverTransactionId.sendResponse(response).         SubscriptionStateHeader subscriptionState = (SubscriptionStateHeader) notify.getHeader(SubscriptionStateHeader.NAME).         // Subscription is terminated?         if (subscriptionState.getState().equalsIgnoreCase(SubscriptionStateHeader.TERMINATED)) {             LOG.info("Subscription state is terminated. Deleting the current dialog").             dialog.delete().         }     } catch (Exception e) {         LOG.error("Exception thrown during Notify processing in the SipSubscriptionListener.", e).     } }
false;public;1;13;;public void processResponse(ResponseEvent responseReceivedEvent) {     LOG.debug("Response received at Subscriber").     Response response = responseReceivedEvent.getResponse().     Transaction clientTransactionId = responseReceivedEvent.getClientTransaction().     LOG.debug("Response received with client transaction id {}:{}", clientTransactionId, response.getStatusCode()).     if (clientTransactionId == null) {         if (LOG.isWarnEnabled()) {             LOG.warn("Stray response -- dropping").         }         return.     } }
false;public;1;5;;public void processIOException(IOExceptionEvent exceptionEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("IOExceptionEvent received at Sip Subscription Listener").     } }
false;public;1;6;;public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("TransactionTerminatedEvent received at Sip Subscription Listener").     } }
false;public;1;6;;public void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("DialogTerminatedEvent received at Sip Subscription Listener").     } }
false;public;1;5;;public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("TimeoutEvent received at Sip Subscription Listener").     } }
false;public;1;3;;public void setSipSubscriber(SipSubscriber sipSubscriber) {     this.sipSubscriber = sipSubscriber. }
false;public;0;3;;public SipSubscriber getSipSubscriber() {     return sipSubscriber. }
false;public;0;3;;public Dialog getForkedDialog() {     return forkedDialog. }
