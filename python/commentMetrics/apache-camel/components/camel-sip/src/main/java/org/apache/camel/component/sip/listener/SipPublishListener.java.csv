commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void processRequest(RequestEvent requestEvent) { // The SipPublishListener associated with the SipPublisher // may not accept incoming requests }
false;public;1;5;;public void processResponse(ResponseEvent responseReceivedEvent) { // The SipPublishListener sends InOnly requests to the Presence Agent // and only receives ACKs from the Presence Agent to satisfy the // Sip handshakeand. Hence any responses are not further processed. }
false;public;1;5;;public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("processTimeout received at Sip Publish Listener").     } }
false;public;1;5;;public void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("processDialogTerminated received at Sip Publish Listener").     } }
false;public;1;5;;public void processIOException(IOExceptionEvent ioExceptionEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("IOExceptionEvent received at Sip Publish Listener").     } }
false;public;1;5;;public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {     if (LOG.isWarnEnabled()) {         LOG.warn("processTransactionTerminated received at Sip Publish Listener").     } }
false;public;1;3;;public void setSipPublisher(SipPublisher sipPublisher) {     this.sipPublisher = sipPublisher. }
false;public;0;3;;public SipPublisher getSipPublisher() {     return sipPublisher. }
