commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;7;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     SchedulerEndpoint answer = new SchedulerEndpoint(uri, this, remaining).     answer.setConcurrentTasks(getConcurrentTasks()).     setProperties(answer, parameters).     return answer. }
false;public;0;3;;public int getConcurrentTasks() {     return concurrentTasks. }
true;public;1;3;/**  * Number of threads used by the scheduling thread pool.  * <p/>  * Is by default using a single thread  */ ;/**  * Number of threads used by the scheduling thread pool.  * <p/>  * Is by default using a single thread  */ public void setConcurrentTasks(int concurrentTasks) {     this.concurrentTasks = concurrentTasks. }
false;protected;1;22;;protected ScheduledExecutorService addConsumer(SchedulerConsumer consumer) {     String name = consumer.getEndpoint().getName().     int concurrentTasks = consumer.getEndpoint().getConcurrentTasks().     ScheduledExecutorService answer.     synchronized (executors) {         answer = executors.get(name).         if (answer == null) {             answer = getCamelContext().getExecutorServiceManager().newScheduledThreadPool(this, "scheduler://" + name, concurrentTasks).             executors.put(name, answer).             // store new reference counter             refCounts.put(name, new AtomicInteger(1)).         } else {             // increase reference counter             AtomicInteger counter = refCounts.get(name).             if (counter != null) {                 counter.incrementAndGet().             }         }     }     return answer. }
false;protected;1;16;;protected void removeConsumer(SchedulerConsumer consumer) {     String name = consumer.getEndpoint().getName().     synchronized (executors) {         // decrease reference counter         AtomicInteger counter = refCounts.get(name).         if (counter != null && counter.decrementAndGet() <= 0) {             refCounts.remove(name).             // remove scheduler as its no longer in use             ScheduledExecutorService scheduler = executors.remove(name).             if (scheduler != null) {                 getCamelContext().getExecutorServiceManager().shutdown(scheduler).             }         }     } }
false;protected;0;9;;@Override protected void doStop() throws Exception {     Collection<ScheduledExecutorService> collection = executors.values().     for (ScheduledExecutorService scheduler : collection) {         getCamelContext().getExecutorServiceManager().shutdown(scheduler).     }     executors.clear().     refCounts.clear(). }
