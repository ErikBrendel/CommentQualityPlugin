commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SchedulerEndpoint getEndpoint() {     return (SchedulerEndpoint) super.getEndpoint(). }
false;protected;0;4;;@Override protected int poll() throws Exception {     return sendTimerExchange(). }
false;public;1;7;;@Override public void done(boolean doneSync) {     // handle any thrown exception     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).     } }
false;protected;0;40;;protected int sendTimerExchange() {     final Exchange exchange = getEndpoint().createExchange().     exchange.setProperty(Exchange.TIMER_NAME, getEndpoint().getName()).     Date now = new Date().     exchange.setProperty(Exchange.TIMER_FIRED_TIME, now).     if (log.isTraceEnabled()) {         log.trace("Timer {} is firing", getEndpoint().getName()).     }     if (!getEndpoint().isSynchronous()) {         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 // handle any thrown exception                 if (exchange.getException() != null) {                     getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).                 }             }         }).     } else {         try {             getProcessor().process(exchange).         } catch (Exception e) {             exchange.setException(e).         }         // handle any thrown exception         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     }     // a property can be used to control if the scheduler polled a message or not     // for example to overrule and indicate no message was polled, which can affect the scheduler     // to leverage backoff on idle etc.     boolean polled = exchange.getProperty(Exchange.SCHEDULER_POLLED_MESSAGES, true, boolean.class).     return polled ? 1 : 0. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     getEndpoint().onConsumerStart(this).     super.doStart(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     getEndpoint().onConsumerStop(this).     super.doStop(). }
