commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setCheckException(boolean check) {     checkException = check. }
false;public;0;3;;public boolean isCheckException() {     return checkException. }
false;public;1;3;;public Conduit getConduit(EndpointInfo targetInfo) throws IOException {     return getConduit(targetInfo, null, bus). }
false;public;2;3;;public Conduit getConduit(EndpointInfo endpointInfo, EndpointReferenceType target) throws IOException {     return getConduit(endpointInfo, target, bus). }
false;public;1;3;;public Destination getDestination(EndpointInfo endpointInfo) throws IOException {     return getDestination(endpointInfo, bus). }
false;public;0;3;;public Set<String> getUriPrefixes() {     return URI_PREFIXES. }
false;public;0;3;;public HeaderFilterStrategy getHeaderFilterStrategy() {     return headerFilterStrategy. }
false;public;1;3;;public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {     this.headerFilterStrategy = headerFilterStrategy. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext c) {     camelContext = c. }
false;public;2;3;;public Destination getDestination(EndpointInfo ei, Bus b) throws IOException {     return new CamelDestination(camelContext, b, this, ei, headerFilterStrategy, checkException). }
false;public;2;3;;public Conduit getConduit(EndpointInfo targetInfo, Bus b) throws IOException {     return getConduit(targetInfo, null, b). }
false;public;3;4;;public Conduit getConduit(EndpointInfo localInfo, EndpointReferenceType target, Bus b) throws IOException {     return new CamelConduit(camelContext, b, localInfo, target, headerFilterStrategy). }
true;public;1;5;// CXF 2.x support methods ;// CXF 2.x support methods public void setBus(Bus b) {     unregisterFactory().     bus = b.     registerFactory(). }
false;public,final;0;17;;public final void registerFactory() {     if (null == bus) {         return.     }     DestinationFactoryManager dfm = bus.getExtension(DestinationFactoryManager.class).     if (null != dfm && getTransportIds() != null) {         for (String ns : getTransportIds()) {             dfm.registerDestinationFactory(ns, this).         }     }     ConduitInitiatorManager cim = bus.getExtension(ConduitInitiatorManager.class).     if (cim != null && getTransportIds() != null) {         for (String ns : getTransportIds()) {             cim.registerConduitInitiator(ns, this).         }     } }
false;public,final;0;29;;public final void unregisterFactory() {     if (null == bus) {         return.     }     DestinationFactoryManager dfm = bus.getExtension(DestinationFactoryManager.class).     if (null != dfm && getTransportIds() != null) {         for (String ns : getTransportIds()) {             try {                 if (dfm.getDestinationFactory(ns) == this) {                     dfm.deregisterDestinationFactory(ns).                 }             } catch (BusException e) {             // ignore             }         }     }     ConduitInitiatorManager cim = bus.getExtension(ConduitInitiatorManager.class).     if (cim != null && getTransportIds() != null) {         for (String ns : getTransportIds()) {             try {                 if (cim.getConduitInitiator(ns) == this) {                     cim.deregisterConduitInitiator(ns).                 }             } catch (BusException e) {             // ignore             }         }     } }
