commented;modifiers;parameterAmount;loc;comment;code
false;public;2;45;;public Message createCxfMessageFromCamelExchange(Exchange camelExchange, HeaderFilterStrategy headerFilterStrategy) {     org.apache.cxf.message.Message answer = CxfMessageHelper.getCxfInMessage(headerFilterStrategy, camelExchange, false).     org.apache.camel.Message camelMessage = camelExchange.getIn().     String requestContentType = getRequestContentType(camelMessage).     String acceptContentTypes = camelMessage.getHeader("Accept", String.class).     if (acceptContentTypes == null) {         acceptContentTypes = "*/*".     }     String enc = getCharacterEncoding(camelMessage).     String requestURI = getRequestURI(camelMessage).     String path = getPath(camelMessage).     String basePath = getBasePath(camelExchange).     String verb = getVerb(camelMessage).     String queryString = getQueryString(camelMessage).     answer.put(org.apache.cxf.message.Message.REQUEST_URI, requestURI).     answer.put(org.apache.cxf.message.Message.BASE_PATH, basePath).     answer.put(org.apache.cxf.message.Message.HTTP_REQUEST_METHOD, verb).     answer.put(org.apache.cxf.message.Message.PATH_INFO, path).     answer.put(org.apache.cxf.message.Message.CONTENT_TYPE, requestContentType).     answer.put(org.apache.cxf.message.Message.ACCEPT_CONTENT_TYPE, acceptContentTypes).     answer.put(org.apache.cxf.message.Message.ENCODING, enc).     answer.put(org.apache.cxf.message.Message.QUERY_STRING, queryString).     HttpServletRequest request = (HttpServletRequest) camelMessage.getHeader(Exchange.HTTP_SERVLET_REQUEST).     answer.put(CXF_HTTP_REQUEST, request).     if (request != null) {         setSecurityContext(answer, request).     }     Object response = camelMessage.getHeader(Exchange.HTTP_SERVLET_RESPONSE).     answer.put(CXF_HTTP_RESPONSE, response).     LOG.trace("Processing {}, requestContentType = {}, acceptContentTypes = {}, encoding = {}, path = {}, basePath = {}, verb = {}", new Object[] { camelExchange, requestContentType, acceptContentTypes, enc, path, basePath, verb }).     return answer. }
false;public;0;3;;public Principal getUserPrincipal() {     return request.getUserPrincipal(). }
false;public;1;4;;@Override public boolean isUserInRole(String role) {     return request.isUserInRole(role). }
false;protected;2;14;;protected void setSecurityContext(Message cxfMessage, final HttpServletRequest request) {     cxfMessage.put(SecurityContext.class, new SecurityContext() {          public Principal getUserPrincipal() {             return request.getUserPrincipal().         }          @Override         public boolean isUserInRole(String role) {             return request.isUserInRole(role).         }     }). }
false;public;3;40;;public void propagateResponseHeadersToCamel(Message cxfMessage, Exchange exchange, HeaderFilterStrategy strategy) {     LOG.trace("Propagating response headers from CXF message {}", cxfMessage).     if (strategy == null) {         return.     }     Map<String, Object> camelHeaders = exchange.getOut().getHeaders().     // copy the in message header to out message     camelHeaders.putAll(exchange.getIn().getHeaders()).     Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>) cxfMessage.get(Message.PROTOCOL_HEADERS)).     if (cxfHeaders != null) {         for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {             if (!strategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), exchange)) {                 camelHeaders.put(entry.getKey(), entry.getValue().get(0)).                 LOG.trace("Populate header from CXF header={} value={}", entry.getKey(), entry.getValue()).             }         }     }     // propagate HTTP RESPONSE_CODE     String key = Message.RESPONSE_CODE.     Object value = cxfMessage.get(key).     if (value != null && !strategy.applyFilterToExternalHeaders(key, value, exchange)) {         camelHeaders.put(Exchange.HTTP_RESPONSE_CODE, value).         LOG.trace("Populate header from CXF header={} value={} as {}", new Object[] { key, value, Exchange.HTTP_RESPONSE_CODE }).     }     // propagate HTTP CONTENT_TYPE     if (cxfMessage.get(Message.CONTENT_TYPE) != null) {         camelHeaders.put(Exchange.CONTENT_TYPE, cxfMessage.get(Message.CONTENT_TYPE)).     } }
false;protected;1;4;;protected String getPath(org.apache.camel.Message camelMessage) {     String answer = camelMessage.getHeader(Exchange.HTTP_PATH, String.class).     return answer. }
false;protected;1;4;;protected String getRequestURI(org.apache.camel.Message camelMessage) {     String answer = camelMessage.getHeader(Exchange.HTTP_URI, String.class).     return answer. }
false;protected;1;12;;protected String getBasePath(Exchange camelExchange) {     String answer = camelExchange.getIn().getHeader(Exchange.HTTP_BASE_URI, String.class).     if (answer == null) {         answer = camelExchange.getFromEndpoint().getEndpointUri().         // remove leading scheme before the http(s) transport so we build a correct base path         answer = answer.replaceFirst("^\\w+:http", "http").         answer = answer.replaceFirst("^\\w+:https", "https").     }     return answer. }
false;protected;1;4;;protected String getVerb(org.apache.camel.Message camelMessage) {     String answer = camelMessage.getHeader(Exchange.HTTP_METHOD, String.class).     return answer. }
false;protected;1;4;;protected String getQueryString(org.apache.camel.Message camelMessage) {     String answer = camelMessage.getHeader(Exchange.HTTP_QUERY, String.class).     return answer. }
false;protected;1;7;;protected String getCharacterEncoding(org.apache.camel.Message camelMessage) {     String answer = camelMessage.getHeader(Exchange.HTTP_CHARACTER_ENCODING, String.class).     if (answer == null) {         answer = camelMessage.getHeader(Exchange.CHARSET_NAME, String.class).     }     return answer. }
false;protected;1;8;;protected String getRequestContentType(org.apache.camel.Message camelMessage) {     String answer = camelMessage.getHeader(Exchange.CONTENT_TYPE, String.class).     if (answer != null) {         return answer.     }     // return default     return "*/*". }
