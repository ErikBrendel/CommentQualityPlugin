commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;14;;public static String getIdOrName(Element elem) {     String id = elem.getAttribute("id").     if (null == id || "".equals(id)) {         String names = elem.getAttribute("name").         if (null != names) {             StringTokenizer st = new StringTokenizer(names, ",").             if (st.countTokens() > 0) {                 id = st.nextToken().             }         }     }     return id. }
false;public;3;11;;public MutableBeanMetadata createBeanMetadata(Element element, ParserContext context, Class<?> runtimeClass) {     MutableBeanMetadata answer = context.createMetadata(MutableBeanMetadata.class).     answer.setRuntimeClass(runtimeClass).     if (!StringUtils.isEmpty(getIdOrName(element))) {         answer.setId(getIdOrName(element)).     } else {         // TODO we may need to throw exception for it         answer.setId("camel.cxf.transport." + runtimeClass.getSimpleName() + "." + context.generateId()).     }     return answer. }
false;public;3;18;;public Metadata parse(Element element, ParserContext context, Class<?> runtime) {     MutableBeanMetadata config = createBeanMetadata(element, context, runtime).     config.setScope(BeanMetadata.SCOPE_PROTOTYPE).     String camelContextId = "camelContext".     NamedNodeMap atts = element.getAttributes().     for (int i = 0. i < atts.getLength(). i++) {         Attr node = (Attr) atts.item(i).         String val = node.getValue().         // String pre = node.getPrefix().         String name = node.getLocalName().         if ("camelContextId".equals(name)) {             camelContextId = val.         }     }     config.addDependsOn(camelContextId).     config.addProperty("camelContext", createRef(context, camelContextId)).     return config. }
