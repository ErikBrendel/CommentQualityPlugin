commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setCamelContext(CamelContext context) {     camelContext = context. }
false;public;0;4;;public CamelContext getCamelContext() {     ObjectHelper.notNull(camelContext, "CamelContext", this).     return camelContext. }
true;public;1;9;// prepare the message for send out , not actually send out the message ;// prepare the message for send out , not actually send out the message public void prepare(Message message) throws IOException {     LOG.trace("CamelConduit send message").     CamelOutputStream os = new CamelOutputStream(this.targetCamelEndpointUri, this.producer, this.headerFilterStrategy, this.getMessageObserver(), message).     message.setContent(OutputStream.class, os). }
false;public;0;9;;public void close() {     LOG.trace("CamelConduit closed ").     // shutdown the producer     try {         producer.stop().     } catch (Exception e) {         LOG.warn("CamelConduit producer stop with the exception", e).     } }
false;protected;0;3;;protected java.util.logging.Logger getLogger() {     return JUL_LOG. }
false;public;0;6;;public String getBeanName() {     if (endpointInfo == null || endpointInfo.getName() == null) {         return "default" + BASE_BEAN_NAME_SUFFIX.     }     return endpointInfo.getName().toString() + BASE_BEAN_NAME_SUFFIX. }
false;private;0;9;;private void initConfig() {     // we could configure the camel context here     if (bus != null) {         Configurer configurer = bus.getExtension(Configurer.class).         if (null != configurer) {             configurer.configureBean(this).         }     } }
false;public;0;7;;@Deprecated public ProducerTemplate getCamelTemplate() throws Exception {     if (camelTemplate == null) {         camelTemplate = getCamelContext().createProducerTemplate().     }     return camelTemplate. }
false;public;1;4;;@Deprecated public void setCamelTemplate(ProducerTemplate template) {     camelTemplate = template. }
