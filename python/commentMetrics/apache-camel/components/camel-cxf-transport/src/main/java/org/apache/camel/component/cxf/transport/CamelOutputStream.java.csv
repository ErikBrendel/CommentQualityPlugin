commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected void doFlush() throws IOException { // do nothing here }
false;protected;0;5;;protected void doClose() throws IOException {     isOneWay = outMessage.getExchange().isOneWay().     commitOutputMessage(). }
false;protected;0;3;;protected void onWrite() throws IOException { // do nothing here }
false;private;0;27;;private void commitOutputMessage() throws IOException {     ExchangePattern pattern.     if (isOneWay) {         pattern = ExchangePattern.InOnly.     } else {         pattern = ExchangePattern.InOut.     }     LOG.debug("send the message to endpoint {}", this.targetCamelEndpointUri).     final org.apache.camel.Exchange exchange = this.producer.getEndpoint().createExchange(pattern).     exchange.setProperty(Exchange.TO_ENDPOINT, this.targetCamelEndpointUri).     CachedOutputStream outputStream = (CachedOutputStream) outMessage.getContent(OutputStream.class).     // Send out the request message here, copy the protocolHeader back     CxfHeaderHelper.propagateCxfToCamel(this.headerFilterStrategy, outMessage, exchange.getIn(), exchange).     // TODO support different encoding     exchange.getIn().setBody(outputStream.getInputStream()).     LOG.debug("template sending request: ", exchange.getIn()).     if (outMessage.getExchange().isSynchronous()) {         syncInvoke(exchange).     } else {         // submit the request to the work queue         asyncInvokeFromWorkQueue(exchange).     } }
false;protected;1;17;;protected void syncInvoke(org.apache.camel.Exchange exchange) throws IOException {     try {         this.producer.process(exchange).     } catch (Exception ex) {         exchange.setException(ex).     }     // Throw the exception that the template get     Exception exception = exchange.getException().     if (exception != null) {         throw new IOException("Cannot send the request message.", exchange.getException()).     }     exchange.setProperty(CamelTransportConstants.CXF_EXCHANGE, outMessage.getExchange()).     if (!isOneWay) {         handleResponseInternal(exchange).     } }
false;public;0;14;;public void run() {     try {         syncInvoke(exchange).     } catch (Throwable e) {         ((PhaseInterceptorChain) outMessage.getInterceptorChain()).abort().         outMessage.setContent(Exception.class, e).         ((PhaseInterceptorChain) outMessage.getInterceptorChain()).unwind(outMessage).         MessageObserver mo = outMessage.getInterceptorChain().getFaultObserver().         if (mo == null) {             mo = outMessage.getExchange().get(MessageObserver.class).         }         mo.onMessage(outMessage).     } }
false;protected;1;43;;protected void asyncInvokeFromWorkQueue(final org.apache.camel.Exchange exchange) throws IOException {     Runnable runnable = new Runnable() {          public void run() {             try {                 syncInvoke(exchange).             } catch (Throwable e) {                 ((PhaseInterceptorChain) outMessage.getInterceptorChain()).abort().                 outMessage.setContent(Exception.class, e).                 ((PhaseInterceptorChain) outMessage.getInterceptorChain()).unwind(outMessage).                 MessageObserver mo = outMessage.getInterceptorChain().getFaultObserver().                 if (mo == null) {                     mo = outMessage.getExchange().get(MessageObserver.class).                 }                 mo.onMessage(outMessage).             }         }     }.     try {         Executor ex = outMessage.getExchange().get(Executor.class).         if (ex != null) {             outMessage.getExchange().put(Executor.class.getName() + ".USING_SPECIFIED", Boolean.TRUE).             ex.execute(runnable).         } else {             WorkQueueManager mgr = outMessage.getExchange().get(Bus.class).getExtension(WorkQueueManager.class).             AutomaticWorkQueue qu = mgr.getNamedWorkQueue("camel-cxf-conduit").             if (qu == null) {                 qu = mgr.getAutomaticWorkQueue().             }             // need to set the time out somewhere             qu.execute(runnable).         }     } catch (RejectedExecutionException rex) {         if (!hasLoggedAsyncWarning) {             LOG.warn("Executor rejected background task to retrieve the response.  Suggest increasing the workqueue settings.").             hasLoggedAsyncWarning = true.         }         LOG.info("Executor rejected background task to retrieve the response, running on current thread.").         syncInvoke(exchange).     } }
false;private;1;5;;private void handleResponseInternal(org.apache.camel.Exchange exchange) {     org.apache.cxf.message.Message inMessage = null.     inMessage = CxfMessageHelper.getCxfInMessage(this.headerFilterStrategy, exchange, true).     this.observer.onMessage(inMessage). }
