# id;timestamp;commentText;codeText;commentWords;codeWords
CxfHeaderHelper -> private CxfHeaderHelper();1307014084;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1323096263;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1326207391;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1328256986;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1374615334;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1384881643;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1477999747;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1478332141;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1478545926;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> private CxfHeaderHelper();1540108161;Utility class does not have public constructor;private CxfHeaderHelper() {_    };utility,class,does,not,have,public,constructor;private,cxf,header,helper
CxfHeaderHelper -> public static void propagateCamelHeadersToCxfHeaders(HeaderFilterStrategy strategy,             Map<String, Object> camelHeaders, Map<String, List<String>> requestHeaders,             Exchange camelExchange) throws Exception;1478545926;Propagates Camel headers to CXF headers.__@param strategy header filter strategy_@param camelHeaders Camel headers_@param requestHeaders CXF request headers_@param camelExchange provides context for filtering;public static void propagateCamelHeadersToCxfHeaders(HeaderFilterStrategy strategy,_            Map<String, Object> camelHeaders, Map<String, List<String>> requestHeaders,_            Exchange camelExchange) throws Exception {_        if (strategy == null) {_            return__        }_        camelHeaders.entrySet().forEach(entry -> {_            _            if (strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)_                    && CAMEL_TO_CXF_HEADERS.get(entry.getKey()) == null) {_                LOG.trace("Drop Camel header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            _            if (entry.getValue() == null) {_                LOG.trace("Drop Camel header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            String cxfHeaderName = CAMEL_TO_CXF_HEADERS.getOrDefault(entry.getKey(), entry.getKey())___            LOG.trace("Propagate Camel header: {}={} as {}", entry.getKey(), entry.getValue(), cxfHeaderName)___            requestHeaders.put(cxfHeaderName, Arrays.asList(entry.getValue().toString()))__        })__    };propagates,camel,headers,to,cxf,headers,param,strategy,header,filter,strategy,param,camel,headers,camel,headers,param,request,headers,cxf,request,headers,param,camel,exchange,provides,context,for,filtering;public,static,void,propagate,camel,headers,to,cxf,headers,header,filter,strategy,strategy,map,string,object,camel,headers,map,string,list,string,request,headers,exchange,camel,exchange,throws,exception,if,strategy,null,return,camel,headers,entry,set,for,each,entry,if,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,get,entry,get,key,null,log,trace,drop,camel,header,entry,get,key,entry,get,value,return,if,entry,get,value,null,log,trace,drop,camel,header,entry,get,key,entry,get,value,return,string,cxf,header,name,get,or,default,entry,get,key,entry,get,key,log,trace,propagate,camel,header,as,entry,get,key,entry,get,value,cxf,header,name,request,headers,put,cxf,header,name,arrays,as,list,entry,get,value,to,string
CxfHeaderHelper -> public static void propagateCamelHeadersToCxfHeaders(HeaderFilterStrategy strategy,             Map<String, Object> camelHeaders, Map<String, List<String>> requestHeaders,             Exchange camelExchange) throws Exception;1540108161;Propagates Camel headers to CXF headers.__@param strategy header filter strategy_@param camelHeaders Camel headers_@param requestHeaders CXF request headers_@param camelExchange provides context for filtering;public static void propagateCamelHeadersToCxfHeaders(HeaderFilterStrategy strategy,_            Map<String, Object> camelHeaders, Map<String, List<String>> requestHeaders,_            Exchange camelExchange) throws Exception {_        if (strategy == null) {_            return__        }_        camelHeaders.entrySet().forEach(entry -> {_            _            if (strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)_                    && CAMEL_TO_CXF_HEADERS.get(entry.getKey()) == null) {_                LOG.trace("Drop Camel header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            _            if (entry.getValue() == null) {_                LOG.trace("Drop Camel header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            String cxfHeaderName = CAMEL_TO_CXF_HEADERS.getOrDefault(entry.getKey(), entry.getKey())___            LOG.trace("Propagate Camel header: {}={} as {}", entry.getKey(), entry.getValue(), cxfHeaderName)___            requestHeaders.put(cxfHeaderName, Arrays.asList(entry.getValue().toString()))__        })__    };propagates,camel,headers,to,cxf,headers,param,strategy,header,filter,strategy,param,camel,headers,camel,headers,param,request,headers,cxf,request,headers,param,camel,exchange,provides,context,for,filtering;public,static,void,propagate,camel,headers,to,cxf,headers,header,filter,strategy,strategy,map,string,object,camel,headers,map,string,list,string,request,headers,exchange,camel,exchange,throws,exception,if,strategy,null,return,camel,headers,entry,set,for,each,entry,if,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,get,entry,get,key,null,log,trace,drop,camel,header,entry,get,key,entry,get,value,return,if,entry,get,value,null,log,trace,drop,camel,header,entry,get,key,entry,get,value,return,string,cxf,header,name,get,or,default,entry,get,key,entry,get,key,log,trace,propagate,camel,header,as,entry,get,key,entry,get,value,cxf,header,name,request,headers,put,cxf,header,name,arrays,as,list,entry,get,value,to,string
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> camelHeaders, Message cxfMessage, Exchange exchange);1478545926;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param camelHeaders Camel header_@param cxfMessage CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> camelHeaders, Message cxfMessage, Exchange exchange) {__        _        cxfMessage.putIfAbsent(Message.PROTOCOL_HEADERS, new TreeMap<>(String.CASE_INSENSITIVE_ORDER))__        final Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>) cxfMessage.get(Message.PROTOCOL_HEADERS))___        if (strategy == null) {_            return__        }__        camelHeaders.entrySet().forEach(entry -> {_            _            if (strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                LOG.trace("Drop external header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            _            if (entry.getValue() == null) {_                LOG.trace("Drop Camel header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            String cxfHeaderName = CAMEL_TO_CXF_HEADERS.getOrDefault(entry.getKey(), entry.getKey())___            LOG.trace("Propagate Camel header: {}={} as {}", entry.getKey(), entry.getValue(), cxfHeaderName)___            if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                cxfMessage.put(cxfHeaderName, entry.getValue())__            }_            if (Exchange.HTTP_RESPONSE_CODE.equals(entry.getKey())_                || Client.REQUEST_CONTEXT.equals(entry.getKey())_                || Client.RESPONSE_CONTEXT.equals(entry.getKey())) {_                cxfMessage.put(cxfHeaderName, entry.getValue())__            } else {_                Object values = entry.getValue()__                if (values instanceof List<?>) {_                    cxfHeaders.put(cxfHeaderName, CastUtils.cast((List<?>) values, String.class))__                } else {_                    List<String> listValue = new ArrayList<>()__                    listValue.add(entry.getValue().toString())__                    cxfHeaders.put(cxfHeaderName, listValue)__                }_            }_        })__    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,camel,headers,camel,header,param,cxf,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,camel,headers,message,cxf,message,exchange,exchange,cxf,message,put,if,absent,message,new,tree,map,string,final,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,if,strategy,null,return,camel,headers,entry,set,for,each,entry,if,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,log,trace,drop,external,header,entry,get,key,entry,get,value,return,if,entry,get,value,null,log,trace,drop,camel,header,entry,get,key,entry,get,value,return,string,cxf,header,name,get,or,default,entry,get,key,entry,get,key,log,trace,propagate,camel,header,as,entry,get,key,entry,get,value,cxf,header,name,if,exchange,equals,entry,get,key,cxf,message,put,cxf,header,name,entry,get,value,if,exchange,equals,entry,get,key,client,equals,entry,get,key,client,equals,entry,get,key,cxf,message,put,cxf,header,name,entry,get,value,else,object,values,entry,get,value,if,values,instanceof,list,cxf,headers,put,cxf,header,name,cast,utils,cast,list,values,string,class,else,list,string,list,value,new,array,list,list,value,add,entry,get,value,to,string,cxf,headers,put,cxf,header,name,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> camelHeaders, Message cxfMessage, Exchange exchange);1540108161;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param camelHeaders Camel header_@param cxfMessage CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> camelHeaders, Message cxfMessage, Exchange exchange) {__        _        cxfMessage.putIfAbsent(Message.PROTOCOL_HEADERS, new TreeMap<>(String.CASE_INSENSITIVE_ORDER))__        final Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>) cxfMessage.get(Message.PROTOCOL_HEADERS))___        if (strategy == null) {_            return__        }__        camelHeaders.entrySet().forEach(entry -> {_            _            if (strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                LOG.trace("Drop external header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            _            if (entry.getValue() == null) {_                LOG.trace("Drop Camel header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            String cxfHeaderName = CAMEL_TO_CXF_HEADERS.getOrDefault(entry.getKey(), entry.getKey())___            LOG.trace("Propagate Camel header: {}={} as {}", entry.getKey(), entry.getValue(), cxfHeaderName)___            if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                cxfMessage.put(cxfHeaderName, entry.getValue())__            }_            if (Exchange.HTTP_RESPONSE_CODE.equals(entry.getKey())_                || Client.REQUEST_CONTEXT.equals(entry.getKey())_                || Client.RESPONSE_CONTEXT.equals(entry.getKey())) {_                cxfMessage.put(cxfHeaderName, entry.getValue())__            } else {_                Object values = entry.getValue()__                if (values instanceof List<?>) {_                    cxfHeaders.put(cxfHeaderName, CastUtils.cast((List<?>) values, String.class))__                } else {_                    List<String> listValue = new ArrayList<>()__                    listValue.add(entry.getValue().toString())__                    cxfHeaders.put(cxfHeaderName, listValue)__                }_            }_        })__    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,camel,headers,camel,header,param,cxf,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,camel,headers,message,cxf,message,exchange,exchange,cxf,message,put,if,absent,message,new,tree,map,string,final,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,if,strategy,null,return,camel,headers,entry,set,for,each,entry,if,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,log,trace,drop,external,header,entry,get,key,entry,get,value,return,if,entry,get,value,null,log,trace,drop,camel,header,entry,get,key,entry,get,value,return,string,cxf,header,name,get,or,default,entry,get,key,entry,get,key,log,trace,propagate,camel,header,as,entry,get,key,entry,get,value,cxf,header,name,if,exchange,equals,entry,get,key,cxf,message,put,cxf,header,name,entry,get,value,if,exchange,equals,entry,get,key,client,equals,entry,get,key,client,equals,entry,get,key,cxf,message,put,cxf,header,name,entry,get,value,else,object,values,entry,get,value,if,values,instanceof,list,cxf,headers,put,cxf,header,name,cast,utils,cast,list,values,string,class,else,list,string,list,value,new,array,list,list,value,add,entry,get,value,to,string,cxf,headers,put,cxf,header,name,list,value
CxfHeaderHelper -> public static void propagateCxfToCamel(HeaderFilterStrategy strategy, Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1478332141;Propagates CXF headers to Camel message.__@param strategy header filter strategy_@param cxfMessage CXF message_@param camelMessage Camel message_@param exchange provides context for filtering;public static void propagateCxfToCamel(HeaderFilterStrategy strategy, Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {__        if (strategy == null) {_            return__        }__        _        copyHttpHeadersFromCxfToCamel(strategy, cxfMessage, camelMessage, exchange)___        _        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>) cxfMessage.get(Message.PROTOCOL_HEADERS))__        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!strategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), exchange)) {_                    List<String> values = entry.getValue()__                    camelMessage.setHeader(entry.getKey(), protocolHeaderValuesToSingleValue(values, exchange))__                }_            }_        }__        _        copyMessageHeader(strategy, exchange, cxfMessage, camelMessage, Client.REQUEST_CONTEXT)___        _        copyMessageHeader(strategy, exchange, cxfMessage, camelMessage, Client.RESPONSE_CONTEXT)__        _        _        copyMessageHeader(strategy, exchange, cxfMessage, camelMessage, Message.RESPONSE_CODE, Exchange.HTTP_RESPONSE_CODE)__    };propagates,cxf,headers,to,camel,message,param,strategy,header,filter,strategy,param,cxf,message,cxf,message,param,camel,message,camel,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,cxf,to,camel,header,filter,strategy,strategy,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,if,strategy,null,return,copy,http,headers,from,cxf,to,camel,strategy,cxf,message,camel,message,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,list,string,values,entry,get,value,camel,message,set,header,entry,get,key,protocol,header,values,to,single,value,values,exchange,copy,message,header,strategy,exchange,cxf,message,camel,message,client,copy,message,header,strategy,exchange,cxf,message,camel,message,client,copy,message,header,strategy,exchange,cxf,message,camel,message,message,exchange
CxfHeaderHelper -> public static void propagateCxfToCamel(HeaderFilterStrategy strategy, Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1478545926;Propagates CXF headers to Camel message.__@param strategy header filter strategy_@param cxfMessage CXF message_@param camelMessage Camel message_@param exchange provides context for filtering;public static void propagateCxfToCamel(HeaderFilterStrategy strategy, Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {__        if (strategy == null) {_            return__        }__        _        copyProtocolHeadersFromCxfToCamel(strategy, exchange, cxfMessage, camelMessage)___        _        copyHttpHeadersFromCxfToCamel(strategy, cxfMessage, camelMessage, exchange)___        _        copyCxfHeaderToCamel(strategy, exchange, cxfMessage, camelMessage, Client.REQUEST_CONTEXT)___        _        copyCxfHeaderToCamel(strategy, exchange, cxfMessage, camelMessage, Client.RESPONSE_CONTEXT)__    };propagates,cxf,headers,to,camel,message,param,strategy,header,filter,strategy,param,cxf,message,cxf,message,param,camel,message,camel,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,cxf,to,camel,header,filter,strategy,strategy,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,if,strategy,null,return,copy,protocol,headers,from,cxf,to,camel,strategy,exchange,cxf,message,camel,message,copy,http,headers,from,cxf,to,camel,strategy,cxf,message,camel,message,exchange,copy,cxf,header,to,camel,strategy,exchange,cxf,message,camel,message,client,copy,cxf,header,to,camel,strategy,exchange,cxf,message,camel,message,client
CxfHeaderHelper -> public static void propagateCxfToCamel(HeaderFilterStrategy strategy, Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1540108161;Propagates CXF headers to Camel message.__@param strategy header filter strategy_@param cxfMessage CXF message_@param camelMessage Camel message_@param exchange provides context for filtering;public static void propagateCxfToCamel(HeaderFilterStrategy strategy, Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {__        if (strategy == null) {_            return__        }__        _        copyProtocolHeadersFromCxfToCamel(strategy, exchange, cxfMessage, camelMessage)___        _        copyHttpHeadersFromCxfToCamel(strategy, cxfMessage, camelMessage, exchange)___        _        copyCxfHeaderToCamel(strategy, exchange, cxfMessage, camelMessage, Client.REQUEST_CONTEXT)___        _        copyCxfHeaderToCamel(strategy, exchange, cxfMessage, camelMessage, Client.RESPONSE_CONTEXT)__    };propagates,cxf,headers,to,camel,message,param,strategy,header,filter,strategy,param,cxf,message,cxf,message,param,camel,message,camel,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,cxf,to,camel,header,filter,strategy,strategy,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,if,strategy,null,return,copy,protocol,headers,from,cxf,to,camel,strategy,exchange,cxf,message,camel,message,copy,http,headers,from,cxf,to,camel,strategy,cxf,message,camel,message,exchange,copy,cxf,header,to,camel,strategy,exchange,cxf,message,camel,message,client,copy,cxf,header,to,camel,strategy,exchange,cxf,message,camel,message,client
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1307014084;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                } else if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                            || Client.RESPONSE_CONTEXT.equals(entry.getKey())_                            || Message.RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else {_                    List<String> listValue = new ArrayList<String>()__                    listValue.add(entry.getValue().toString())__                    cxfHeaders.put(entry.getKey(), listValue)__                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,if,client,equals,entry,get,key,client,equals,entry,get,key,message,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1323096263;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                } else if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                            || Client.RESPONSE_CONTEXT.equals(entry.getKey())_                            || Message.RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else {_                    List<String> listValue = new ArrayList<String>()__                    listValue.add(entry.getValue().toString())__                    cxfHeaders.put(entry.getKey(), listValue)__                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,if,client,equals,entry,get,key,client,equals,entry,get,key,message,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1326207391;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                } else if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                            || Client.RESPONSE_CONTEXT.equals(entry.getKey())_                            || Message.RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else {_                    List<String> listValue = new ArrayList<String>()__                    listValue.add(entry.getValue().toString())__                    cxfHeaders.put(entry.getKey(), listValue)__                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,if,client,equals,entry,get,key,client,equals,entry,get,key,message,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1328256986;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                } else if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                            || Client.RESPONSE_CONTEXT.equals(entry.getKey())_                            || Message.RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else {_                    List<String> listValue = new ArrayList<String>()__                    listValue.add(entry.getValue().toString())__                    cxfHeaders.put(entry.getKey(), listValue)__                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,if,client,equals,entry,get,key,client,equals,entry,get,key,message,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1374615334;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                } else if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                            || Client.RESPONSE_CONTEXT.equals(entry.getKey())_                            || Message.RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else {_                    Object values = entry.getValue()__                    if (values instanceof List<?>) {_                        cxfHeaders.put(entry.getKey(), CastUtils.cast((List<?>)values, String.class))__                    } else {_                        List<String> listValue = new ArrayList<String>()__                        listValue.add(entry.getValue().toString())__                        cxfHeaders.put(entry.getKey(), listValue)__                    }_                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,if,client,equals,entry,get,key,client,equals,entry,get,key,message,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,object,values,entry,get,value,if,values,instanceof,list,cxf,headers,put,entry,get,key,cast,utils,cast,list,values,string,class,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1384881643;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                }_                if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                    || Client.RESPONSE_CONTEXT.equals(entry.getKey())_                    || Message.RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else {_                    Object values = entry.getValue()__                    if (values instanceof List<?>) {_                        cxfHeaders.put(entry.getKey(), CastUtils.cast((List<?>)values, String.class))__                    } else {_                        List<String> listValue = new ArrayList<String>()__                        listValue.add(entry.getValue().toString())__                        cxfHeaders.put(entry.getKey(), listValue)__                    }_                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,if,client,equals,entry,get,key,client,equals,entry,get,key,message,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,object,values,entry,get,value,if,values,instanceof,list,cxf,headers,put,entry,get,key,cast,utils,cast,list,values,string,class,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1477999747;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                }_                if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                    || Client.RESPONSE_CONTEXT.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else if (Exchange.HTTP_RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(Message.RESPONSE_CODE, entry.getValue())__                } else {_                    Object values = entry.getValue()__                    if (values instanceof List<?>) {_                        cxfHeaders.put(entry.getKey(), CastUtils.cast((List<?>)values, String.class))__                    } else {_                        List<String> listValue = new ArrayList<String>()__                        listValue.add(entry.getValue().toString())__                        cxfHeaders.put(entry.getKey(), listValue)__                    }_                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,if,client,equals,entry,get,key,client,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,object,values,entry,get,value,if,values,instanceof,list,cxf,headers,put,entry,get,key,cast,utils,cast,list,values,string,class,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCamelToCxf(HeaderFilterStrategy strategy,             Map<String, Object> headers, Message message, Exchange exchange);1478332141;Propagates Camel headers to CXF message.__@param strategy header filter strategy_@param headers Camel header_@param message CXF message_@param exchange provides context for filtering;public static void propagateCamelToCxf(HeaderFilterStrategy strategy,_            Map<String, Object> headers, Message message, Exchange exchange) {__        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS))___        if (cxfHeaders == null) {_            _            cxfHeaders = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER)__            message.put(Message.PROTOCOL_HEADERS, cxfHeaders)__        }__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (strategy != null_                    && !strategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {__                if (Exchange.CONTENT_TYPE.equals(entry.getKey())) {_                    message.put(Message.CONTENT_TYPE, entry.getValue())__                }_                if (Client.REQUEST_CONTEXT.equals(entry.getKey())_                    || Client.RESPONSE_CONTEXT.equals(entry.getKey())) {_                    message.put(entry.getKey(), entry.getValue())__                } else if (Exchange.HTTP_RESPONSE_CODE.equals(entry.getKey())) {_                    message.put(Message.RESPONSE_CODE, entry.getValue())__                } else {_                    Object values = entry.getValue()__                    if (values instanceof List<?>) {_                        cxfHeaders.put(entry.getKey(), CastUtils.cast((List<?>)values, String.class))__                    } else {_                        List<String> listValue = new ArrayList<String>()__                        listValue.add(entry.getValue().toString())__                        cxfHeaders.put(entry.getKey(), listValue)__                    }_                }_            }_        }_    };propagates,camel,headers,to,cxf,message,param,strategy,header,filter,strategy,param,headers,camel,header,param,message,cxf,message,param,exchange,provides,context,for,filtering;public,static,void,propagate,camel,to,cxf,header,filter,strategy,strategy,map,string,object,headers,message,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,message,get,message,if,cxf,headers,null,cxf,headers,new,tree,map,string,list,string,string,message,put,message,cxf,headers,for,map,entry,string,object,entry,headers,entry,set,if,strategy,null,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,if,client,equals,entry,get,key,client,equals,entry,get,key,message,put,entry,get,key,entry,get,value,else,if,exchange,equals,entry,get,key,message,put,message,entry,get,value,else,object,values,entry,get,value,if,values,instanceof,list,cxf,headers,put,entry,get,key,cast,utils,cast,list,values,string,class,else,list,string,list,value,new,array,list,string,list,value,add,entry,get,value,to,string,cxf,headers,put,entry,get,key,list,value
CxfHeaderHelper -> public static void propagateCxfHeadersToCamelHeaders(HeaderFilterStrategy strategy,             Map<String, List<Object>> responseHeaders, Map<String, Object> camelHeaders,             Exchange camelExchange) throws Exception;1478545926;Propagates CXF headers to Camel headers.__@param strategy header filter strategy_@param responseHeaders CXF response headers_@param camelHeaders Camel headers_@param camelExchange provides context for filtering;public static void propagateCxfHeadersToCamelHeaders(HeaderFilterStrategy strategy,_            Map<String, List<Object>> responseHeaders, Map<String, Object> camelHeaders,_            Exchange camelExchange) throws Exception {_        if (strategy == null) {_            return__        }_        responseHeaders.entrySet().forEach(entry -> {_            if (strategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                LOG.trace("Drop external header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            String camelHeaderName = CXF_TO_CAMEL_HEADERS.getOrDefault(entry.getKey(), entry.getKey())___            LOG.trace("Populate external header: {}={} as {}", entry.getKey(), entry.getValue(), camelHeaderName)___            camelHeaders.put(camelHeaderName, entry.getValue().get(0))__        })__    };propagates,cxf,headers,to,camel,headers,param,strategy,header,filter,strategy,param,response,headers,cxf,response,headers,param,camel,headers,camel,headers,param,camel,exchange,provides,context,for,filtering;public,static,void,propagate,cxf,headers,to,camel,headers,header,filter,strategy,strategy,map,string,list,object,response,headers,map,string,object,camel,headers,exchange,camel,exchange,throws,exception,if,strategy,null,return,response,headers,entry,set,for,each,entry,if,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,camel,exchange,log,trace,drop,external,header,entry,get,key,entry,get,value,return,string,camel,header,name,get,or,default,entry,get,key,entry,get,key,log,trace,populate,external,header,as,entry,get,key,entry,get,value,camel,header,name,camel,headers,put,camel,header,name,entry,get,value,get,0
CxfHeaderHelper -> public static void propagateCxfHeadersToCamelHeaders(HeaderFilterStrategy strategy,             Map<String, List<Object>> responseHeaders, Map<String, Object> camelHeaders,             Exchange camelExchange) throws Exception;1540108161;Propagates CXF headers to Camel headers.__@param strategy header filter strategy_@param responseHeaders CXF response headers_@param camelHeaders Camel headers_@param camelExchange provides context for filtering;public static void propagateCxfHeadersToCamelHeaders(HeaderFilterStrategy strategy,_            Map<String, List<Object>> responseHeaders, Map<String, Object> camelHeaders,_            Exchange camelExchange) throws Exception {_        if (strategy == null) {_            return__        }_        responseHeaders.entrySet().forEach(entry -> {_            if (strategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                LOG.trace("Drop external header: {}={}", entry.getKey(), entry.getValue())__                return__            }__            String camelHeaderName = CXF_TO_CAMEL_HEADERS.getOrDefault(entry.getKey(), entry.getKey())___            LOG.trace("Populate external header: {}={} as {}", entry.getKey(), entry.getValue(), camelHeaderName)___            camelHeaders.put(camelHeaderName, entry.getValue().get(0))__        })__    };propagates,cxf,headers,to,camel,headers,param,strategy,header,filter,strategy,param,response,headers,cxf,response,headers,param,camel,headers,camel,headers,param,camel,exchange,provides,context,for,filtering;public,static,void,propagate,cxf,headers,to,camel,headers,header,filter,strategy,strategy,map,string,list,object,response,headers,map,string,object,camel,headers,exchange,camel,exchange,throws,exception,if,strategy,null,return,response,headers,entry,set,for,each,entry,if,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,camel,exchange,log,trace,drop,external,header,entry,get,key,entry,get,value,return,string,camel,header,name,get,or,default,entry,get,key,entry,get,key,log,trace,populate,external,header,as,entry,get,key,entry,get,value,camel,header,name,camel,headers,put,camel,header,name,entry,get,value,get,0
