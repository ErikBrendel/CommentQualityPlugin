commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void configure() {     onException(RuntimeCamelException.class).handled(true).to("mock:error").     from("direct:Producer").to("direct:EndpointA"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             onException(RuntimeCamelException.class).handled(true).to("mock:error").             from("direct:Producer").to("direct:EndpointA").         }     }. }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return new DefaultCamelContext(). }
false;public;0;21;;@Test public void testCamelDestinationConfiguration() throws Exception {     QName testEndpointQName = new QName("http://camel.apache.org/camel-test", "port").     // set up the bus with configure file     SpringBusFactory bf = new SpringBusFactory().     BusFactory.setDefaultBus(null).     Bus bus = bf.createBus("/org/apache/camel/component/cxf/transport/CamelDestination.xml").     BusFactory.setDefaultBus(bus).     endpointInfo.setAddress("camel://direct:EndpointA").     endpointInfo.setName(testEndpointQName).     CamelDestination destination = new CamelDestination(null, bus, null, endpointInfo).     assertEquals("{http://camel.apache.org/camel-test}port.camel-destination", destination.getBeanName()).     CamelContext context = destination.getCamelContext().     assertNotNull("The camel context which get from camel destination is not null", context).     assertEquals("Get the wrong camel context", context.getName(), "dest_context").     assertEquals("The camel context should has two routers", context.getRoutes().size(), 2).     bus.shutdown(false). }
false;public;1;6;;public void onMessage(Message m) {     Exchange exchange = new ExchangeImpl().     exchange.setInMessage(m).     m.setExchange(exchange).     destMessage = m. }
false;public;2;17;;public CamelDestination setupCamelDestination(EndpointInfo endpointInfo, boolean send) throws IOException {     ConduitInitiator conduitInitiator = mock(ConduitInitiator.class).     CamelDestination camelDestination = new CamelDestination(context, bus, conduitInitiator, endpointInfo).     if (send) {         // setMessageObserver         observer = new MessageObserver() {              public void onMessage(Message m) {                 Exchange exchange = new ExchangeImpl().                 exchange.setInMessage(m).                 m.setExchange(exchange).                 destMessage = m.             }         }.         camelDestination.setMessageObserver(observer).     }     return camelDestination. }
false;public;0;6;;@Test public void testGetTransportFactoryFromBus() throws Exception {     Bus bus = BusFactory.getDefaultBus().     assertNotNull(bus.getExtension(ConduitInitiatorManager.class).getConduitInitiator(CamelTransportFactory.TRANSPORT_ID)). }
false;public;0;24;;@Test public void testOneWayDestination() throws Exception {     destMessage = null.     inMessage = null.     EndpointInfo conduitEpInfo = new EndpointInfo().     conduitEpInfo.setAddress("camel://direct:Producer").     CamelConduit conduit = setupCamelConduit(conduitEpInfo, true, false).     Message outMessage = new MessageImpl().     CamelDestination destination = null.     try {         endpointInfo.setAddress("camel://direct:EndpointA").         destination = setupCamelDestination(endpointInfo, true).     // destination.activate().     } catch (IOException e) {         assertFalse("The CamelDestination activate should not through exception ", false).         e.printStackTrace().     }     sendoutMessage(conduit, outMessage, true, "HelloWorld").     // just verify the Destination inMessage     assertTrue("The destiantion should have got the message ", destMessage != null).     verifyReceivedMessage(destMessage, "HelloWorld").     destination.shutdown(). }
false;private;2;7;;private void verifyReceivedMessage(Message inMessage, String content) throws IOException {     ByteArrayInputStream bis = (ByteArrayInputStream) inMessage.getContent(InputStream.class).     byte[] bytes = new byte[bis.available()].     bis.read(bytes).     String reponse = new String(bytes).     assertEquals("The reponse date should be equals", content, reponse). }
false;public;1;17;;public void onMessage(Message m) {     try {         Exchange exchange = new ExchangeImpl().         exchange.setInMessage(m).         m.setExchange(exchange).         verifyReceivedMessage(m, "HelloWorld").         // verifyHeaders(m, outMessage).         // setup the message for         Conduit backConduit.         backConduit = getBackChannel(destination, m).         // wait for the message to be got from the conduit         Message replyMessage = new MessageImpl().         sendoutMessage(backConduit, replyMessage, true, "HelloWorld Response").     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;0;47;;@Test public void testRoundTripDestination() throws Exception {     inMessage = null.     EndpointInfo conduitEpInfo = new EndpointInfo().     conduitEpInfo.setAddress("camel://direct:Producer").     // set up the conduit send to be true     CamelConduit conduit = setupCamelConduit(conduitEpInfo, true, false).     final Message outMessage = new MessageImpl().     endpointInfo.setAddress("camel://direct:EndpointA").     final CamelDestination destination = setupCamelDestination(endpointInfo, true).     // set up MessageObserver for handling the conduit message     MessageObserver observer = new MessageObserver() {          public void onMessage(Message m) {             try {                 Exchange exchange = new ExchangeImpl().                 exchange.setInMessage(m).                 m.setExchange(exchange).                 verifyReceivedMessage(m, "HelloWorld").                 // verifyHeaders(m, outMessage).                 // setup the message for                 Conduit backConduit.                 backConduit = getBackChannel(destination, m).                 // wait for the message to be got from the conduit                 Message replyMessage = new MessageImpl().                 sendoutMessage(backConduit, replyMessage, true, "HelloWorld Response").             } catch (Exception e) {                 throw new RuntimeException(e).             }         }     }.     MockEndpoint error = context.getEndpoint("mock:error", MockEndpoint.class).     error.expectedMessageCount(0).     // this call will active the camelDestination     destination.setMessageObserver(observer).     // set is one way false for get response from destination     // need to use another thread to send the request message     sendoutMessage(conduit, outMessage, false, "HelloWorld").     // wait for the message to be got from the destination,     // create the thread to handler the Destination incoming message     verifyReceivedMessage(inMessage, "HelloWorld Response").     error.assertIsSatisfied().     destination.shutdown(). }
false;public;1;18;;public void onMessage(Message m) {     try {         Exchange exchange = new ExchangeImpl().         exchange.setInMessage(m).         m.setExchange(exchange).         verifyReceivedMessage(m, "HelloWorld").         // verifyHeaders(m, outMessage).         // setup the message for         Conduit backConduit.         backConduit = getBackChannel(destination, m).         // wait for the message to be got from the conduit         Message replyMessage = new MessageImpl().         replyMessage.setContent(Exception.class, new RuntimeCamelException()).         sendoutMessage(backConduit, replyMessage, true, "HelloWorld Fault").     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;0;52;;@Test public void testRoundTripDestinationWithFault() throws Exception {     inMessage = null.     EndpointInfo conduitEpInfo = new EndpointInfo().     conduitEpInfo.setAddress("camel://direct:Producer").     // set up the conduit send to be true     CamelConduit conduit = setupCamelConduit(conduitEpInfo, true, false).     final Message outMessage = new MessageImpl().     endpointInfo.setAddress("camel://direct:EndpointA").     final CamelDestination destination = setupCamelDestination(endpointInfo, true).     destination.setCheckException(true).     // set up MessageObserver for handling the conduit message     MessageObserver observer = new MessageObserver() {          public void onMessage(Message m) {             try {                 Exchange exchange = new ExchangeImpl().                 exchange.setInMessage(m).                 m.setExchange(exchange).                 verifyReceivedMessage(m, "HelloWorld").                 // verifyHeaders(m, outMessage).                 // setup the message for                 Conduit backConduit.                 backConduit = getBackChannel(destination, m).                 // wait for the message to be got from the conduit                 Message replyMessage = new MessageImpl().                 replyMessage.setContent(Exception.class, new RuntimeCamelException()).                 sendoutMessage(backConduit, replyMessage, true, "HelloWorld Fault").             } catch (Exception e) {                 throw new RuntimeException(e).             }         }     }.     MockEndpoint error = context.getEndpoint("mock:error", MockEndpoint.class).     error.expectedMessageCount(1).     // this call will active the camelDestination     destination.setMessageObserver(observer).     // set is one way false for get response from destination     // need to use another thread to send the request message     sendoutMessage(conduit, outMessage, false, "HelloWorld").     // wait for the message to be got from the destination,     // create the thread to handler the Destination incoming message     verifyReceivedMessage(inMessage, "HelloWorld Fault").     error.assertIsSatisfied().     destination.shutdown(). }
false;private;2;3;;private Conduit getBackChannel(CamelDestination destination, Message m) throws IOException {     return destination.getInbuiltBackChannel(m). }
false;public;0;16;;@Test public void testExceptionForwardedToExchange() throws IOException {     final RuntimeException expectedException = new RuntimeException("We simulate an exception in CXF processing").     DefaultCamelContext camelContext = new DefaultCamelContext().     CamelDestination dest = mock(CamelDestination.class).     doThrow(expectedException).when(dest).incoming(isA(org.apache.camel.Exchange.class)).     ConsumerProcessor consumerProcessor = dest.new ConsumerProcessor().     // Send our dummy exchange and check that the exception that occurred on incoming is set     DefaultExchange exchange = new DefaultExchange(camelContext).     consumerProcessor.process(exchange).     Exception exc = exchange.getException().     assertNotNull(exc).     assertEquals(expectedException, exc). }
false;public;3;3;;public void getPerson(Holder<String> personId, Holder<String> ssn, Holder<String> name) throws UnknownPersonFault { }
false;public;0;15;;@Test public void testCAMEL4073() throws Exception {     try {         Endpoint.publish("camel://foo", new Person() {              public void getPerson(Holder<String> personId, Holder<String> ssn, Holder<String> name) throws UnknownPersonFault {             }         }).         fail("Should throw and Exception").     } catch (WebServiceException ex) {         Throwable c = ex.getCause().         assertNotNull(c).         assertTrue(c instanceof NoSuchEndpointException).     } }
