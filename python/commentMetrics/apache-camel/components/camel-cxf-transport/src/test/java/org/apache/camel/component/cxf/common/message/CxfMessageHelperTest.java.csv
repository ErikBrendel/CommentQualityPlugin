commented;modifiers;parameterAmount;loc;comment;code
true;public;0;49;// setup the default context for testing ;// setup the default context for testing @Test public void testGetCxfInMessage() throws Exception {     HeaderFilterStrategy headerFilterStrategy = new CxfHeaderFilterStrategy().     org.apache.camel.Exchange exchange = new DefaultExchange(context).     // String     exchange.getIn().setBody("hello world").     org.apache.cxf.message.Message message = CxfMessageHelper.getCxfInMessage(headerFilterStrategy, exchange, false).     // test message     InputStream is = message.getContent(InputStream.class).     assertNotNull("The input stream should not be null", is).     assertEquals("Don't get the right message", toString(is), "hello world").     // DOMSource     URL request = this.getClass().getResource("RequestBody.xml").     File requestFile = new File(request.toURI()).     FileInputStream inputStream = new FileInputStream(requestFile).     XMLStreamReader xmlReader = StaxUtils.createXMLStreamReader(inputStream).     DOMSource source = new DOMSource(StaxUtils.read(xmlReader)).     exchange.getIn().setBody(source).     message = CxfMessageHelper.getCxfInMessage(headerFilterStrategy, exchange, false).     is = message.getContent(InputStream.class).     assertNotNull("The input stream should not be null", is).     assertEquals("Don't get the right message", toString(is), REQUEST_STRING).     // File     exchange.getIn().setBody(requestFile).     message = CxfMessageHelper.getCxfInMessage(headerFilterStrategy, exchange, false).     is = message.getContent(InputStream.class).     assertNotNull("The input stream should not be null", is).     assertEquals("Don't get the right message", toString(is), REQUEST_STRING).     // transport header's case insensitiveness     // String     exchange.getIn().setBody("hello world").     exchange.getIn().setHeader("soapAction", "urn:hello:world").     message = CxfMessageHelper.getCxfInMessage(headerFilterStrategy, exchange, false).     // test message     Map<String, List<String>> headers = CastUtils.cast((Map<?, ?>) message.get(Message.PROTOCOL_HEADERS)).     // verify there is no duplicate     assertNotNull("The headers must be present", headers).     assertTrue("There must be one header entry", headers.size() == 1).     // verify the soapaction can be retrieved in case-insensitive ways     verifyHeader(headers, "soapaction", "urn:hello:world").     verifyHeader(headers, "SoapAction", "urn:hello:world").     verifyHeader(headers, "SOAPAction", "urn:hello:world"). }
false;private;3;5;;private void verifyHeader(Map<String, List<String>> headers, String name, String value) {     List<String> values = headers.get(name).     assertTrue("The entry must be available", values != null && values.size() == 1).     assertEquals("The value must match", values.get(0), value). }
false;private;1;9;;private String toString(InputStream is) throws IOException {     StringBuilder out = new StringBuilder().     CachedOutputStream os = new CachedOutputStream().     IOHelper.copy(is, os).     is.close().     os.writeCacheTo(out).     return out.toString().replaceAll("(?s)<\\?.*\\?>", "").replaceAll("(?s)<!--.*-->", "").replaceAll("(\\r)?\\n", ""). }
