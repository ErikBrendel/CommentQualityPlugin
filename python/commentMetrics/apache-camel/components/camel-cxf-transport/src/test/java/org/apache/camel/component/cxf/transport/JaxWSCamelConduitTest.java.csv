commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(final Exchange exchange) {     exchange.getOut().setBody(ANSWER). }
false;public;0;15;;public void configure() throws Exception {     from("direct:start1").setBody(constant(ANSWER)).     from("direct:start2").setBody(constant(ANSWER)).log("Force pipeline creation").     from("direct:start3").choice().when(header(Exchange.CONTENT_TYPE).isEqualTo("text/xml. charset=UTF-8")).process(new Processor() {          public void process(final Exchange exchange) {             exchange.getOut().setBody(ANSWER).         }     }). // otherwise you will get the request message back }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start1").setBody(constant(ANSWER)).             from("direct:start2").setBody(constant(ANSWER)).log("Force pipeline creation").             from("direct:start3").choice().when(header(Exchange.CONTENT_TYPE).isEqualTo("text/xml. charset=UTF-8")).process(new Processor() {                  public void process(final Exchange exchange) {                     exchange.getOut().setBody(ANSWER).                 }             }).         // otherwise you will get the request message back         }     }. }
false;public;0;5;;@Test public void testStart1() {     assertThat(getSampleWS("direct:start1").getSomething(), is("Something")). }
true;public;0;4;/**  * Success  */ ;/**  * Success  */ @Test public void testStart2() {     assertThat(getSampleWSWithCXFAPI("direct:start2").getSomething(), is("Something")). }
true;public;0;4;// test the content type ;// test the content type @Test public void testStart3() {     assertThat(getSampleWS("direct:start3").getSomething(), is("Something")). }
false;public;0;9;;@Test public void testAsyncInvocation() throws InterruptedException, ExecutionException {     Future<?> result = getSampleWSAsyncWithCXFAPI("direct:start2").getSomethingAsync().     // as the CXF will build the getSomethingResponse by using asm, so we cannot get the response directly.     assertNotNull(result.get()). }
