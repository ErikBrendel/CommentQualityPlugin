commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void stopEndpoint() {     if (endpoint != null) {         endpoint.stop().     } }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").to("direct:endpoint"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").to("direct:endpoint").         }     }. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(REQUEST). }
false;public;0;15;;@Test public void testDestinationContentType() {     // publish the endpoint     endpoint = publishSampleWS("direct:endpoint").     Exchange exchange = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(REQUEST).         }     }).     assertThat(exchange.getOut().getHeader(Exchange.CONTENT_TYPE, String.class), is("text/xml. charset=UTF-8")).     assertTrue(exchange.getOut().getBody(String.class).indexOf("something!") > 0). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(REQUEST).     exchange.getIn().setHeader("Accept-Encoding", "gzip"). }
false;public;0;15;;@Test public void testDestinationWithGzip() {     // publish the endpoint     endpoint = publishSampleWSWithGzipEnabled("direct:endpoint").     Exchange exchange = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(REQUEST).             exchange.getIn().setHeader("Accept-Encoding", "gzip").         }     }).     assertThat(exchange.getOut().getHeader(Exchange.CONTENT_ENCODING, String.class), is("gzip")). }
