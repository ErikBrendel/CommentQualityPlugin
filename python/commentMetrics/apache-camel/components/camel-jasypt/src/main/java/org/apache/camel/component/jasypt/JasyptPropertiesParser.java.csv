commented;modifiers;parameterAmount;loc;comment;code
false;public;3;14;;@Override public String parseProperty(String key, String value, Properties properties) {     log.trace(format("Parsing property '%s=%s'", key, value)).     if (value != null) {         initEncryptor().         Matcher matcher = PATTERN.matcher(value).         while (matcher.find()) {             log.trace(format("Decrypting part '%s'", matcher.group(0))).             String decrypted = encryptor.decrypt(matcher.group(1)).             value = value.replace(matcher.group(0), decrypted).         }     }     return value. }
false;private,synchronized;0;14;;private synchronized void initEncryptor() {     if (encryptor == null) {         StringHelper.notEmpty("password", password).         StandardPBEStringEncryptor pbeStringEncryptor = new StandardPBEStringEncryptor().         pbeStringEncryptor.setPassword(password).         if (algorithm != null) {             pbeStringEncryptor.setAlgorithm(algorithm).             log.debug(format("Initialized encryptor using %s algorithm and provided password", algorithm)).         } else {             log.debug("Initialized encryptor using default algorithm and provided password").         }         encryptor = pbeStringEncryptor.     } }
false;public;1;3;;public void setEncryptor(StringEncryptor encryptor) {     this.encryptor = encryptor. }
false;public;1;3;;public void setAlgorithm(String algorithm) {     this.algorithm = algorithm. }
false;public;1;10;;public void setPassword(String password) {     // lookup password as either environment or JVM system property     if (password.startsWith("sysenv:")) {         password = System.getenv(StringHelper.after(password, "sysenv:")).     }     if (ObjectHelper.isNotEmpty(password) && password.startsWith("sys:")) {         password = System.getProperty(StringHelper.after(password, "sys:")).     }     this.password = password. }
