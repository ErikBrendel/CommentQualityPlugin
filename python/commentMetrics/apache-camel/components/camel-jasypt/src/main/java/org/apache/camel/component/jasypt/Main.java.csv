commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;public boolean processOption(String arg, LinkedList<String> remainingArgs) {     if (arg.equalsIgnoreCase(abbreviation) || fullName.startsWith(arg)) {         doProcess(arg, remainingArgs).         return true.     }     return false. }
false;public;0;3;;public String getAbbreviation() {     return abbreviation. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public String getFullName() {     return fullName. }
false;public;0;3;;public String getInformation() {     return "  " + getAbbreviation() + " or " + getFullName() + " = " + getDescription(). }
false;protected,abstract;2;1;;protected abstract void doProcess(String arg, LinkedList<String> remainingArgs).
false;protected;2;9;;protected void doProcess(String arg, LinkedList<String> remainingArgs) {     if (remainingArgs.isEmpty()) {         System.err.println("Expected fileName for ").         showOptions().     } else {         String parameter = remainingArgs.removeFirst().         doProcess(arg, parameter, remainingArgs).     } }
false;public;0;4;;public String getInformation() {     return "  " + getAbbreviation() + " or " + getFullName() + " <" + parameterName + "> = " + getDescription(). }
false;protected,abstract;3;1;;protected abstract void doProcess(String arg, String parameter, LinkedList<String> remainingArgs).
false;protected;2;5;;protected void doProcess(String arg, LinkedList<String> remainingArgs) {     showOptions().     // no need to process further if user just wants help     System.exit(0). }
false;protected;3;7;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     if ("encrypt".equals(parameter) || "decrypt".equals(parameter)) {         command = parameter.     } else {         throw new IllegalArgumentException("Unknown command, was: " + parameter).     } }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     password = parameter. }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     input = parameter. }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     algorithm = parameter. }
false;private;1;3;;private void addOption(Option option) {     options.add(option). }
false;private;0;9;;private void showOptions() {     System.out.println("Apache Camel Jasypt takes the following options:").     System.out.println().     for (Option option : options) {         System.out.println(option.getInformation()).     }     System.out.println().     System.out.println(). }
false;private;1;24;;private boolean parseArguments(String[] arguments) {     LinkedList<String> args = new LinkedList<>(Arrays.asList(arguments)).     boolean valid = true.     while (!args.isEmpty()) {         String arg = args.removeFirst().         boolean handled = false.         for (Option option : options) {             if (option.processOption(arg, args)) {                 handled = true.                 break.             }         }         if (!handled) {             System.out.println("Error: Unknown option: " + arg).             System.out.println().             valid = false.             break.         }     }     return valid. }
false;public;1;35;;public void run(String[] args) throws Exception {     if (!parseArguments(args)) {         showOptions().         return.     }     if (command == null) {         System.out.println("Error: Command is empty").         System.out.println().         showOptions().         return.     }     if (password == null) {         System.out.println("Error: Password is empty").         System.out.println().         showOptions().         return.     }     if (input == null) {         System.out.println("Error: Input is empty").         System.out.println().         showOptions().         return.     }     encryptor.setPassword(password).     if (algorithm != null) {         encryptor.setAlgorithm(algorithm).     }     if ("encrypt".equals(command)) {         System.out.println("Encrypted text: " + encryptor.encrypt(input)).     } else {         System.out.println("Decrypted text: " + encryptor.decrypt(input)).     } }
false;public,static;1;9;;public static void main(String[] args) throws Exception {     Main main = new Main().     if (args.length == 0) {         main.showOptions().         return.     } else {         main.run(args).     } }
