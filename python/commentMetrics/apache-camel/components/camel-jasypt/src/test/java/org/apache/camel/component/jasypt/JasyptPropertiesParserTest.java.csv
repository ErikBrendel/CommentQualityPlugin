commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void before() {     encryptor.setPassword(KNOWN_PASSWORD).     jasyptPropertiesParser.setEncryptor(encryptor). }
false;public;0;6;;@Test public void testNullPropertyIsUntouched() {     String expected = null.     String result = jasyptPropertiesParser.parseProperty(KEY, expected, null).     assertThat(result, is(expected)). }
false;public;0;6;;@Test public void testPlainPropertyIsUntouched() {     String expected = "http://somehost?1=someval1&2=someval2".     String result = jasyptPropertiesParser.parseProperty(KEY, expected, null).     assertThat(result, is(expected)). }
false;public;0;7;;@Test public void testDecryptsEncryptedProperty() {     String decrypted = "tiger".     String encrypted = format("%s%s%s", JASYPT_PREFIX_TOKEN, encryptor.encrypt(decrypted), JASYPT_SUFFIX_TOKEN).     String result = jasyptPropertiesParser.parseProperty(KEY, encrypted, null).     assertThat(result, is(decrypted)). }
false;public;0;11;;@Test public void testDecryptsPartiallyEncryptedProperty() {     String parmValue = "tiger".     String encParmValue = format("%s%s%s", JASYPT_PREFIX_TOKEN, encryptor.encrypt(parmValue), JASYPT_SUFFIX_TOKEN).     String expected = format("http://somehost:port/?param1=%s&param2=somethingelse", parmValue).     String propertyValue = format("http://somehost:port/?param1=%s&param2=somethingelse", encParmValue).     String result = jasyptPropertiesParser.parseProperty(KEY, propertyValue, null).     assertThat(result, is(expected)). }
false;public;0;13;;@Test public void testDecryptsMultitplePartsOfPartiallyEncryptedProperty() {     StringBuilder propertyValue = new StringBuilder().     StringBuilder expected = new StringBuilder().     for (int i = 0. i < 100. i++) {         propertyValue.append(format("param%s=%s%s%s()&", i, JASYPT_PREFIX_TOKEN, encryptor.encrypt("tiger" + i), JASYPT_SUFFIX_TOKEN)).         expected.append(format("param%s=tiger%s()&", i, i)).     }     String result = jasyptPropertiesParser.parseProperty(KEY, propertyValue.toString(), null).     assertThat(result, is(expected.toString())). }
false;public;0;7;;@Test public void testUsesProvidedPasswordIfEncryptorIsNotSet() throws Exception {     jasyptPropertiesParser.setEncryptor(null).     jasyptPropertiesParser.setPassword(KNOWN_PASSWORD).     assertEquals(KNOW_DECRYPTED, jasyptPropertiesParser.parseProperty(KEY, KNOWN_ENCRYPTED, null)). }
false;public;0;11;;@Test public void testUsesProvidedPasswordFromSystemPropertyIfEncryptorIsNotSet() throws Exception {     System.setProperty("myfoo", KNOWN_PASSWORD).     jasyptPropertiesParser.setEncryptor(null).     jasyptPropertiesParser.setPassword("sys:myfoo").     assertEquals(KNOW_DECRYPTED, jasyptPropertiesParser.parseProperty(KEY, KNOWN_ENCRYPTED, null)).     System.clearProperty("myfoo"). }
