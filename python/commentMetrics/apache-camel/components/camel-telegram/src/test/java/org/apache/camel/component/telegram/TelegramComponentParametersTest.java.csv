commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testDefaultsAndOverrides() throws Exception {     TelegramComponent component = (TelegramComponent) context().getComponent("telegram").     component.setAuthorizationToken("DEFAULT").     TelegramEndpoint ep1 = (TelegramEndpoint) component.createEndpoint("telegram:bots").     assertEquals("DEFAULT", ep1.getConfiguration().getAuthorizationToken()).     TelegramEndpoint ep2 = (TelegramEndpoint) component.createEndpoint("telegram:bots/CUSTOM").     assertEquals("CUSTOM", ep2.getConfiguration().getAuthorizationToken()).     TelegramEndpoint ep3 = (TelegramEndpoint) component.createEndpoint("telegram:bots/ANOTHER?chatId=123").     assertEquals("ANOTHER", ep3.getConfiguration().getAuthorizationToken()). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testNonDefaultConfig() throws Exception {     TelegramComponent component = (TelegramComponent) context().getComponent("telegram").     component.setAuthorizationToken(null).     component.createEndpoint("telegram:bots"). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWrongURI1() throws Exception {     TelegramComponent component = (TelegramComponent) context().getComponent("telegram").     component.setAuthorizationToken("ANY").     component.createEndpoint("telegram:bots/ "). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWrongURI2() throws Exception {     TelegramComponent component = (TelegramComponent) context().getComponent("telegram").     component.setAuthorizationToken("ANY").     component.createEndpoint("telegram:bots/token/s"). }
