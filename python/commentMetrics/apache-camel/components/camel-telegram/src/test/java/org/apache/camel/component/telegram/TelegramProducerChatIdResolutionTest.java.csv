commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testRouteWithFixedChatId() throws Exception {     TelegramService api = mockTelegramService().     context().createProducerTemplate().sendBody(endpoint, "Hello").     ArgumentCaptor<OutgoingTextMessage> captor = ArgumentCaptor.forClass(OutgoingTextMessage.class).     Mockito.verify(api).sendMessage(eq("mock-token"), captor.capture()).     assertEquals("my-id", captor.getValue().getChatId()).     assertEquals("Hello", captor.getValue().getText()).     assertNull(captor.getValue().getParseMode()). }
false;public;0;19;;@Test public void testRouteWithOverridenChatId() throws Exception {     TelegramService api = mockTelegramService().     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello 2").     exchange.getIn().setHeader(TelegramConstants.TELEGRAM_CHAT_ID, "my-second-id").     context().createProducerTemplate().send(endpoint, exchange).     ArgumentCaptor<OutgoingTextMessage> captor = ArgumentCaptor.forClass(OutgoingTextMessage.class).     Mockito.verify(api).sendMessage(eq("mock-token"), captor.capture()).     assertEquals("my-second-id", captor.getValue().getChatId()).     assertEquals("Hello 2", captor.getValue().getText()).     assertNull(captor.getValue().getParseMode()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:telegram").to("telegram:bots/mock-token?chatId=my-id"). }
false;protected;0;9;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:telegram").to("telegram:bots/mock-token?chatId=my-id").         }     }. }
