commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testChatBotResult() throws Exception {     TelegramEndpoint endpoint = (TelegramEndpoint) context().getEndpoints().stream().filter(e -> e instanceof TelegramEndpoint).findAny().get().     TelegramConfiguration config = endpoint.getConfiguration().     assertEquals("bots", config.getType()).     assertEquals("mock-token", config.getAuthorizationToken()).     assertEquals("12345", config.getChatId()).     assertEquals(2000L, endpoint.getDelay()).     assertEquals(Integer.valueOf(10), config.getTimeout()).     assertEquals(Integer.valueOf(60), config.getLimit()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:telegram").to("telegram:bots/mock-token?chatId=12345&delay=2000&timeout=10&limit=60"). }
false;protected;0;11;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:telegram").to("telegram:bots/mock-token?chatId=12345&delay=2000&timeout=10&limit=60").         }     }. }
