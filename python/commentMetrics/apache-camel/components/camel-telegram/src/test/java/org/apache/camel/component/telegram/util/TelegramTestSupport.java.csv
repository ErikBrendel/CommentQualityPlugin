# id;timestamp;commentText;codeText;commentWords;codeWords
TelegramTestSupport -> @After     public void tearDown();1463819764;Restores the status of {@code TelegramServiceProvider} if it has been mocked.;@After_    public void tearDown() {_        if (telegramServiceMocked) {_            TelegramServiceProvider.get().restoreDefaultService()__            this.telegramServiceMocked = false__        }_    };restores,the,status,of,code,telegram,service,provider,if,it,has,been,mocked;after,public,void,tear,down,if,telegram,service,mocked,telegram,service,provider,get,restore,default,service,this,telegram,service,mocked,false
TelegramTestSupport -> @After     public void tearDown();1525855624;Restores the status of {@code TelegramServiceProvider} if it has been mocked.;@After_    public void tearDown() {_        if (telegramServiceMocked) {_            TelegramServiceProvider.get().restoreDefaultService()__            this.telegramServiceMocked = false__        }_    };restores,the,status,of,code,telegram,service,provider,if,it,has,been,mocked;after,public,void,tear,down,if,telegram,service,mocked,telegram,service,provider,get,restore,default,service,this,telegram,service,mocked,false
TelegramTestSupport -> @After     public void tearDown();1525885142;Restores the status of {@code TelegramServiceProvider} if it has been mocked.;@After_    public void tearDown() {_        if (telegramServiceMocked) {_            TelegramServiceProvider.get().restoreDefaultService()__            this.telegramServiceMocked = false__        }_    };restores,the,status,of,code,telegram,service,provider,if,it,has,been,mocked;after,public,void,tear,down,if,telegram,service,mocked,telegram,service,provider,get,restore,default,service,this,telegram,service,mocked,false
TelegramTestSupport -> public TelegramService currentMockService();1463819764;Retrieves the currently mocked {@code TelegramService}.__@return the current mock of the telegram service;public TelegramService currentMockService() {_        return TelegramServiceProvider.get().getAlternativeService()__    };retrieves,the,currently,mocked,code,telegram,service,return,the,current,mock,of,the,telegram,service;public,telegram,service,current,mock,service,return,telegram,service,provider,get,get,alternative,service
TelegramTestSupport -> public TelegramService currentMockService();1525855624;Retrieves the currently mocked {@code TelegramService}.__@return the current mock of the telegram service;public TelegramService currentMockService() {_        return TelegramServiceProvider.get().getAlternativeService()__    };retrieves,the,currently,mocked,code,telegram,service,return,the,current,mock,of,the,telegram,service;public,telegram,service,current,mock,service,return,telegram,service,provider,get,get,alternative,service
TelegramTestSupport -> public TelegramService currentMockService();1525885142;Retrieves the currently mocked {@code TelegramService}.__@return the current mock of the telegram service;public TelegramService currentMockService() {_        return TelegramServiceProvider.get().getAlternativeService()__    };retrieves,the,currently,mocked,code,telegram,service,return,the,current,mock,of,the,telegram,service;public,telegram,service,current,mock,service,return,telegram,service,provider,get,get,alternative,service
TelegramTestSupport -> public TelegramService currentMockService();1528348698;Retrieves the currently mocked {@code TelegramService}.__@return the current mock of the telegram service;public TelegramService currentMockService() {_        return TelegramServiceProvider.get().getAlternativeService()__    };retrieves,the,currently,mocked,code,telegram,service,return,the,current,mock,of,the,telegram,service;public,telegram,service,current,mock,service,return,telegram,service,provider,get,get,alternative,service
TelegramTestSupport -> public <T> T getJSONResource(String fileName, Class<T> clazz);1463819764;Retrieves a response from a JSON file on classpath.__@param fileName the filename in the classpath_@param clazz the target class_@param <T> the type of the returned object_@return the object representation of the JSON file;public <T> T getJSONResource(String fileName, Class<T> clazz) {_        ObjectMapper mapper = new ObjectMapper()__        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName)) {_            T value = mapper.readValue(stream, clazz)__            return value__        } catch (IOException e) {_            throw new IllegalArgumentException("Unable to load file " + fileName, e)__        }_    };retrieves,a,response,from,a,json,file,on,classpath,param,file,name,the,filename,in,the,classpath,param,clazz,the,target,class,param,t,the,type,of,the,returned,object,return,the,object,representation,of,the,json,file;public,t,t,get,jsonresource,string,file,name,class,t,clazz,object,mapper,mapper,new,object,mapper,try,input,stream,stream,get,class,get,class,loader,get,resource,as,stream,file,name,t,value,mapper,read,value,stream,clazz,return,value,catch,ioexception,e,throw,new,illegal,argument,exception,unable,to,load,file,file,name,e
TelegramTestSupport -> public <T> T getJSONResource(String fileName, Class<T> clazz);1525855624;Retrieves a response from a JSON file on classpath.__@param fileName the filename in the classpath_@param clazz the target class_@param <T> the type of the returned object_@return the object representation of the JSON file;public <T> T getJSONResource(String fileName, Class<T> clazz) {_        ObjectMapper mapper = new ObjectMapper()__        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName)) {_            T value = mapper.readValue(stream, clazz)__            return value__        } catch (IOException e) {_            throw new IllegalArgumentException("Unable to load file " + fileName, e)__        }_    };retrieves,a,response,from,a,json,file,on,classpath,param,file,name,the,filename,in,the,classpath,param,clazz,the,target,class,param,t,the,type,of,the,returned,object,return,the,object,representation,of,the,json,file;public,t,t,get,jsonresource,string,file,name,class,t,clazz,object,mapper,mapper,new,object,mapper,try,input,stream,stream,get,class,get,class,loader,get,resource,as,stream,file,name,t,value,mapper,read,value,stream,clazz,return,value,catch,ioexception,e,throw,new,illegal,argument,exception,unable,to,load,file,file,name,e
TelegramTestSupport -> public <T> T getJSONResource(String fileName, Class<T> clazz);1525885142;Retrieves a response from a JSON file on classpath.__@param fileName the filename in the classpath_@param clazz the target class_@param <T> the type of the returned object_@return the object representation of the JSON file;public <T> T getJSONResource(String fileName, Class<T> clazz) {_        ObjectMapper mapper = new ObjectMapper()__        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName)) {_            T value = mapper.readValue(stream, clazz)__            return value__        } catch (IOException e) {_            throw new IllegalArgumentException("Unable to load file " + fileName, e)__        }_    };retrieves,a,response,from,a,json,file,on,classpath,param,file,name,the,filename,in,the,classpath,param,clazz,the,target,class,param,t,the,type,of,the,returned,object,return,the,object,representation,of,the,json,file;public,t,t,get,jsonresource,string,file,name,class,t,clazz,object,mapper,mapper,new,object,mapper,try,input,stream,stream,get,class,get,class,loader,get,resource,as,stream,file,name,t,value,mapper,read,value,stream,clazz,return,value,catch,ioexception,e,throw,new,illegal,argument,exception,unable,to,load,file,file,name,e
TelegramTestSupport -> public <T> T getJSONResource(String fileName, Class<T> clazz);1528348698;Retrieves a response from a JSON file on classpath.__@param fileName the filename in the classpath_@param clazz the target class_@param <T> the type of the returned object_@return the object representation of the JSON file;public <T> T getJSONResource(String fileName, Class<T> clazz) {_        ObjectMapper mapper = new ObjectMapper()__        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName)) {_            T value = mapper.readValue(stream, clazz)__            return value__        } catch (IOException e) {_            throw new IllegalArgumentException("Unable to load file " + fileName, e)__        }_    };retrieves,a,response,from,a,json,file,on,classpath,param,file,name,the,filename,in,the,classpath,param,clazz,the,target,class,param,t,the,type,of,the,returned,object,return,the,object,representation,of,the,json,file;public,t,t,get,jsonresource,string,file,name,class,t,clazz,object,mapper,mapper,new,object,mapper,try,input,stream,stream,get,class,get,class,loader,get,resource,as,stream,file,name,t,value,mapper,read,value,stream,clazz,return,value,catch,ioexception,e,throw,new,illegal,argument,exception,unable,to,load,file,file,name,e
TelegramTestSupport -> public TelegramService mockTelegramService();1463819764;Setup an alternative mock {@code TelegramService} in the {@code TelegramServiceProvider} and return it.__@return the mock service;public TelegramService mockTelegramService() {_        TelegramService mockService = Mockito.mock(TelegramService.class)__        TelegramServiceProvider.get().setAlternativeService(mockService)__        this.telegramServiceMocked = true___        return mockService__    };setup,an,alternative,mock,code,telegram,service,in,the,code,telegram,service,provider,and,return,it,return,the,mock,service;public,telegram,service,mock,telegram,service,telegram,service,mock,service,mockito,mock,telegram,service,class,telegram,service,provider,get,set,alternative,service,mock,service,this,telegram,service,mocked,true,return,mock,service
TelegramTestSupport -> public TelegramService mockTelegramService();1525855624;Setup an alternative mock {@code TelegramService} in the {@code TelegramServiceProvider} and return it.__@return the mock service;public TelegramService mockTelegramService() {_        TelegramService mockService = Mockito.mock(TelegramService.class)__        TelegramServiceProvider.get().setAlternativeService(mockService)__        this.telegramServiceMocked = true___        return mockService__    };setup,an,alternative,mock,code,telegram,service,in,the,code,telegram,service,provider,and,return,it,return,the,mock,service;public,telegram,service,mock,telegram,service,telegram,service,mock,service,mockito,mock,telegram,service,class,telegram,service,provider,get,set,alternative,service,mock,service,this,telegram,service,mocked,true,return,mock,service
TelegramTestSupport -> public TelegramService mockTelegramService();1525885142;Setup an alternative mock {@code TelegramService} in the {@code TelegramServiceProvider} and return it.__@return the mock service;public TelegramService mockTelegramService() {_        TelegramService mockService = Mockito.mock(TelegramService.class)__        TelegramServiceProvider.get().setAlternativeService(mockService)__        this.telegramServiceMocked = true___        return mockService__    };setup,an,alternative,mock,code,telegram,service,in,the,code,telegram,service,provider,and,return,it,return,the,mock,service;public,telegram,service,mock,telegram,service,telegram,service,mock,service,mockito,mock,telegram,service,class,telegram,service,provider,get,set,alternative,service,mock,service,this,telegram,service,mocked,true,return,mock,service
TelegramTestSupport -> public TelegramService mockTelegramService();1528348698;Setup an alternative mock {@code TelegramService} in the {@code TelegramServiceProvider} and return it.__@return the mock service;public TelegramService mockTelegramService() {_        TelegramService mockService = Mockito.mock(TelegramService.class)__        TelegramServiceProvider.get().setAlternativeService(mockService)__        this.telegramServiceMocked = true___        return mockService__    };setup,an,alternative,mock,code,telegram,service,in,the,code,telegram,service,provider,and,return,it,return,the,mock,service;public,telegram,service,mock,telegram,service,telegram,service,mock,service,mockito,mock,telegram,service,class,telegram,service,provider,get,set,alternative,service,mock,service,this,telegram,service,mocked,true,return,mock,service
TelegramTestSupport -> public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message);1525855624;Construct an inline keyboard sample to be used with an OutgoingTextMessage.__@param message OutgoingTextMessage previously created_@return OutgoingTextMessage set with an inline keyboard;public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message) {_        _        InlineKeyboardButton buttonOptionOneI = InlineKeyboardButton.builder()_                .text("Option One - I").build()__        _        InlineKeyboardButton buttonOptionOneII = InlineKeyboardButton.builder()_                .text("Option One - II").build()__        _        InlineKeyboardButton buttonOptionTwoI = InlineKeyboardButton.builder()_                .text("Option Two - I").build()__        _        ReplyKeyboardMarkup replyMarkup = ReplyKeyboardMarkup.builder()_                .keyboard()_                    .addRow(Arrays.asList(buttonOptionOneI, buttonOptionOneII))_                    .addRow(Arrays.asList(buttonOptionTwoI))_                    .close()_                .oneTimeKeyboard(true)_                .build()_        _        message.setReplyKeyboardMarkup(replyMarkup)_        _        _        return message__    };construct,an,inline,keyboard,sample,to,be,used,with,an,outgoing,text,message,param,message,outgoing,text,message,previously,created,return,outgoing,text,message,set,with,an,inline,keyboard;public,outgoing,text,message,with,inline,keyboard,containing,two,rows,outgoing,text,message,message,inline,keyboard,button,button,option,one,i,inline,keyboard,button,builder,text,option,one,i,build,inline,keyboard,button,button,option,one,ii,inline,keyboard,button,builder,text,option,one,ii,build,inline,keyboard,button,button,option,two,i,inline,keyboard,button,builder,text,option,two,i,build,reply,keyboard,markup,reply,markup,reply,keyboard,markup,builder,keyboard,add,row,arrays,as,list,button,option,one,i,button,option,one,ii,add,row,arrays,as,list,button,option,two,i,close,one,time,keyboard,true,build,message,set,reply,keyboard,markup,reply,markup,return,message
TelegramTestSupport -> public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message);1525885142;Construct an inline keyboard sample to be used with an OutgoingTextMessage.__@param message OutgoingTextMessage previously created_@return OutgoingTextMessage set with an inline keyboard;public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message) {_        _        InlineKeyboardButton buttonOptionOneI = InlineKeyboardButton.builder()_                .text("Option One - I").build()__        _        InlineKeyboardButton buttonOptionOneII = InlineKeyboardButton.builder()_                .text("Option One - II").build()__        _        InlineKeyboardButton buttonOptionTwoI = InlineKeyboardButton.builder()_                .text("Option Two - I").build()__        _        ReplyKeyboardMarkup replyMarkup = ReplyKeyboardMarkup.builder()_                .keyboard()_                    .addRow(Arrays.asList(buttonOptionOneI, buttonOptionOneII))_                    .addRow(Arrays.asList(buttonOptionTwoI))_                    .close()_                .oneTimeKeyboard(true)_                .build()_        _        message.setReplyKeyboardMarkup(replyMarkup)_        _        _        return message__    };construct,an,inline,keyboard,sample,to,be,used,with,an,outgoing,text,message,param,message,outgoing,text,message,previously,created,return,outgoing,text,message,set,with,an,inline,keyboard;public,outgoing,text,message,with,inline,keyboard,containing,two,rows,outgoing,text,message,message,inline,keyboard,button,button,option,one,i,inline,keyboard,button,builder,text,option,one,i,build,inline,keyboard,button,button,option,one,ii,inline,keyboard,button,builder,text,option,one,ii,build,inline,keyboard,button,button,option,two,i,inline,keyboard,button,builder,text,option,two,i,build,reply,keyboard,markup,reply,markup,reply,keyboard,markup,builder,keyboard,add,row,arrays,as,list,button,option,one,i,button,option,one,ii,add,row,arrays,as,list,button,option,two,i,close,one,time,keyboard,true,build,message,set,reply,keyboard,markup,reply,markup,return,message
TelegramTestSupport -> public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message);1528348698;Construct an inline keyboard sample to be used with an OutgoingTextMessage.__@param message OutgoingTextMessage previously created_@return OutgoingTextMessage set with an inline keyboard;public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message) {_        _        InlineKeyboardButton buttonOptionOneI = InlineKeyboardButton.builder()_                .text("Option One - I").build()__        _        InlineKeyboardButton buttonOptionOneII = InlineKeyboardButton.builder()_                .text("Option One - II").build()__        _        InlineKeyboardButton buttonOptionTwoI = InlineKeyboardButton.builder()_                .text("Option Two - I").build()__        _        ReplyKeyboardMarkup replyMarkup = ReplyKeyboardMarkup.builder()_                .keyboard()_                    .addRow(Arrays.asList(buttonOptionOneI, buttonOptionOneII))_                    .addRow(Arrays.asList(buttonOptionTwoI))_                    .close()_                .oneTimeKeyboard(true)_                .build()_        _        message.setReplyKeyboardMarkup(replyMarkup)_        _        _        return message__    };construct,an,inline,keyboard,sample,to,be,used,with,an,outgoing,text,message,param,message,outgoing,text,message,previously,created,return,outgoing,text,message,set,with,an,inline,keyboard;public,outgoing,text,message,with,inline,keyboard,containing,two,rows,outgoing,text,message,message,inline,keyboard,button,button,option,one,i,inline,keyboard,button,builder,text,option,one,i,build,inline,keyboard,button,button,option,one,ii,inline,keyboard,button,builder,text,option,one,ii,build,inline,keyboard,button,button,option,two,i,inline,keyboard,button,builder,text,option,two,i,build,reply,keyboard,markup,reply,markup,reply,keyboard,markup,builder,keyboard,add,row,arrays,as,list,button,option,one,i,button,option,one,ii,add,row,arrays,as,list,button,option,two,i,close,one,time,keyboard,true,build,message,set,reply,keyboard,markup,reply,markup,return,message
