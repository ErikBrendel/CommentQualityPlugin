commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;/**  * Restores the status of {@code TelegramServiceProvider} if it has been mocked.  */ ;/**  * Restores the status of {@code TelegramServiceProvider} if it has been mocked.  */ @Override public void doPostTearDown() throws Exception {     if (telegramServiceMocked) {         TelegramServiceProvider.get().restoreDefaultService().         this.telegramServiceMocked = false.     } }
true;public;0;7;/**  * Setup an alternative mock {@code TelegramService} in the {@code TelegramServiceProvider} and return it.  *  * @return the mock service  */ ;/**  * Setup an alternative mock {@code TelegramService} in the {@code TelegramServiceProvider} and return it.  *  * @return the mock service  */ public TelegramService mockTelegramService() {     TelegramService mockService = Mockito.mock(TelegramService.class).     TelegramServiceProvider.get().setAlternativeService(mockService).     this.telegramServiceMocked = true.     return mockService. }
true;public;1;22;/**  * Construct an inline keyboard sample to be used with an OutgoingTextMessage.  *  * @param message OutgoingTextMessage previously created  * @return OutgoingTextMessage set with an inline keyboard  */ ;/**  * Construct an inline keyboard sample to be used with an OutgoingTextMessage.  *  * @param message OutgoingTextMessage previously created  * @return OutgoingTextMessage set with an inline keyboard  */ public OutgoingTextMessage withInlineKeyboardContainingTwoRows(OutgoingTextMessage message) {     InlineKeyboardButton buttonOptionOneI = InlineKeyboardButton.builder().text("Option One - I").build().     InlineKeyboardButton buttonOptionOneII = InlineKeyboardButton.builder().text("Option One - II").build().     InlineKeyboardButton buttonOptionTwoI = InlineKeyboardButton.builder().text("Option Two - I").build().     ReplyKeyboardMarkup replyMarkup = ReplyKeyboardMarkup.builder().keyboard().addRow(Arrays.asList(buttonOptionOneI, buttonOptionOneII)).addRow(Arrays.asList(buttonOptionTwoI)).close().oneTimeKeyboard(true).build().     message.setReplyKeyboardMarkup(replyMarkup).     return message. }
true;public;0;3;/**  * Retrieves the currently mocked {@code TelegramService}.  *  * @return the current mock of the telegram service  */ ;/**  * Retrieves the currently mocked {@code TelegramService}.  *  * @return the current mock of the telegram service  */ public TelegramService currentMockService() {     return TelegramServiceProvider.get().getAlternativeService(). }
true;public;2;9;/**  * Retrieves a response from a JSON file on classpath.  *  * @param fileName the filename in the classpath  * @param clazz the target class  * @param <T> the type of the returned object  * @return the object representation of the JSON file  */ ;/**  * Retrieves a response from a JSON file on classpath.  *  * @param fileName the filename in the classpath  * @param clazz the target class  * @param <T> the type of the returned object  * @return the object representation of the JSON file  */ public <T> T getJSONResource(String fileName, Class<T> clazz) {     ObjectMapper mapper = new ObjectMapper().     try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName)) {         T value = mapper.readValue(stream, clazz).         return value.     } catch (IOException e) {         throw new IllegalArgumentException("Unable to load file " + fileName, e).     } }
