commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() {     service = new TelegramServiceRestBotAPIAdapter(restBotAPI).     TelegramServiceProvider.get().setAlternativeService(service). }
false;public;0;11;;@Test public void testSendLocation() {     MessageResult expected = new MessageResult().     expected.setOk(true).     when(restBotAPI.sendLocation(anyString(), any(SendLocationMessage.class))).thenReturn(expected).     SendLocationMessage msg = new SendLocationMessage(latitude, longitude).     MessageResult actual = (MessageResult) service.sendMessage("mock-token", msg).     assertEquals(expected, actual). }
false;public;0;11;;@Test public void testSendVenue() {     MessageResult expected = new MessageResult().     expected.setOk(true).     when(restBotAPI.sendVenue(anyString(), any(SendVenueMessage.class))).thenReturn(expected).     SendVenueMessage msg = new SendVenueMessage(latitude, longitude, "title", "address").     MessageResult actual = (MessageResult) service.sendMessage("mock-token", msg).     assertEquals(expected, actual). }
false;public;0;11;;@Test public void testEditMessageLiveLocation() {     MessageResult expected = new MessageResult().     expected.setOk(true).     when(restBotAPI.editMessageLiveLocation(anyString(), any(EditMessageLiveLocationMessage.class))).thenReturn(expected).     EditMessageLiveLocationMessage msg = new EditMessageLiveLocationMessage(latitude, longitude).     MessageResult actual = (MessageResult) service.sendMessage("mock-token", msg).     assertEquals(expected, actual). }
false;public;0;11;;@Test public void testStopMessageLiveLocation() {     MessageResult expected = new MessageResult().     expected.setOk(true).     when(restBotAPI.stopMessageLiveLocation(anyString(), any(StopMessageLiveLocationMessage.class))).thenReturn(expected).     StopMessageLiveLocationMessage msg = new StopMessageLiveLocationMessage().     MessageResult actual = (MessageResult) service.sendMessage("mock-token", msg).     assertEquals(expected, actual). }
false;public;0;4;;@Override public void configure() {     from("direct:telegram").to("telegram:bots/mock-token?chatId=my-id"). }
false;protected;0;9;;@Override protected RoutesBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:telegram").to("telegram:bots/mock-token?chatId=my-id").         }     }. }
