commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void mockAPIs() {     TelegramService api = mockTelegramService().     UpdateResult res1 = getJSONResource("messages/updates-single.json", UpdateResult.class).     UpdateResult defaultRes = getJSONResource("messages/updates-empty.json", UpdateResult.class).     when(api.getUpdates(any(), any(), any(), any())).thenReturn(res1).thenAnswer((i) -> defaultRes). }
false;public;0;38;;@Test public void testMessageMapping() throws Exception {     endpoint.expectedMinimumMessageCount(1).     endpoint.expectedMessageCount(1).     endpoint.assertIsSatisfied().     Exchange ex = endpoint.getExchanges().get(0).     Message m = ex.getIn().     assertNotNull(m).     // checking headers     assertEquals("-45658", m.getHeader(TelegramConstants.TELEGRAM_CHAT_ID)).     // checking body     assertNotNull(m.getBody()).     assertTrue(m.getBody() instanceof IncomingMessage).     IncomingMessage body = (IncomingMessage) m.getBody().     assertEquals("a message", body.getText()).     assertEquals(Long.valueOf(179L), body.getMessageId()).     assertEquals(Instant.ofEpochSecond(1463436626L), body.getDate()).     // checking from     User user = body.getFrom().     assertNotNull(user).     assertEquals("John", user.getFirstName()).     assertEquals("Doe", user.getLastName()).     assertEquals(Long.valueOf(1585844777), user.getId()).     // checking chat     Chat chat = body.getChat().     assertNotNull(chat).     assertEquals("-45658", chat.getId()).     assertEquals("A chat group", chat.getTitle()).     assertEquals("group", chat.getType()). }
false;public;0;21;;@Test public void testMessageResultMapping() {     MessageResult messageResult = getJSONResource("messages/updates-sendLocation.json", MessageResult.class).     assertEquals(true, messageResult.isOk()).     assertEquals(true, messageResult.isOk()).     assertEquals((Long) 33L, messageResult.getMessage().getMessageId()).     assertEquals(Instant.ofEpochSecond(1548091564).getEpochSecond(), messageResult.getMessage().getDate().getEpochSecond()).     assertEquals((Long) 665977497L, messageResult.getMessage().getFrom().getId()).     assertEquals(true, messageResult.getMessage().getFrom().isBot()).     assertEquals("camelbot", messageResult.getMessage().getFrom().getFirstName()).     assertEquals("camel_component_bot", messageResult.getMessage().getFrom().getUsername()).     assertEquals("-182520913", messageResult.getMessage().getChat().getId()).     assertEquals("testgroup", messageResult.getMessage().getChat().getTitle()).     assertEquals("group", messageResult.getMessage().getChat().getType()).     assertEquals(true, messageResult.getMessage().getChat().isAllMembersAreAdministrators()).     assertEquals(59.9386292, messageResult.getMessage().getLocation().getLatitude(), 1.0E-07).     assertEquals(30.3141308, messageResult.getMessage().getLocation().getLongitude(), 1.0E-07). }
false;public;0;4;;@Override public void configure() throws Exception {     from("telegram:bots/mock-token").to("mock:telegram"). }
false;protected;0;9;;@Override protected RoutesBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("telegram:bots/mock-token").to("mock:telegram").         }     }. }
