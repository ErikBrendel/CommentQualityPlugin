commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void mockAPIs() {     TelegramService api = mockTelegramService().     UpdateResult res = getJSONResource("messages/updates-media.json", UpdateResult.class).     UpdateResult defaultRes = getJSONResource("messages/updates-empty.json", UpdateResult.class).     when(api.getUpdates(any(), any(), any(), any())).thenReturn(res).thenAnswer((i) -> defaultRes). }
false;public;0;12;;@Test public void testReceptionOfTwoMessagesOneWithMedia() throws Exception {     endpoint.expectedMinimumMessageCount(2).     endpoint.assertIsSatisfied().     Exchange mediaExchange = endpoint.getExchanges().get(1).     IncomingMessage msg = mediaExchange.getIn().getBody(IncomingMessage.class).     assertNotNull(msg.getPhoto()).     assertCollectionSize(msg.getPhoto(), 4).     assertEquals(4, msg.getPhoto().stream().map(ph -> ph.getFileId()).distinct().count()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("telegram:bots/mock-token").to("mock:telegram"). }
false;protected;0;10;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("telegram:bots/mock-token").to("mock:telegram").         }     }. }
