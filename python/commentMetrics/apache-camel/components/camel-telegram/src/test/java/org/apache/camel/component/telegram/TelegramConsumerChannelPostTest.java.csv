commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void mockAPIs() {     TelegramService api = mockTelegramService().     UpdateResult res1 = getJSONResource("messages/updates-channelMessage.json", UpdateResult.class).     UpdateResult defaultRes = getJSONResource("messages/updates-empty.json", UpdateResult.class).     when(api.getUpdates(any(), any(), any(), any())).thenReturn(res1).thenAnswer((i) -> defaultRes). }
false;public;0;24;;@Test public void testReceptionOfMessageWithAMessage() throws Exception {     endpoint.expectedMinimumMessageCount(1).     endpoint.assertIsSatisfied().     Exchange mediaExchange = endpoint.getExchanges().get(0).     IncomingMessage msg = mediaExchange.getIn().getBody(IncomingMessage.class).     assertEquals("-1001245756934", mediaExchange.getIn().getHeader(TelegramConstants.TELEGRAM_CHAT_ID)).     // checking body     assertNotNull(msg).     assertEquals("test", msg.getText()).     assertEquals(Long.valueOf(67L), msg.getMessageId()).     assertEquals(Instant.ofEpochSecond(1546505413L), msg.getDate()).     // checking chat     Chat chat = msg.getChat().     assertNotNull(chat).     assertEquals("-1001245756934", chat.getId()).     assertEquals("cameltemp", chat.getTitle()).     assertEquals("channel", chat.getType()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("telegram:bots/mock-token").to("mock:telegram"). }
false;protected;0;10;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("telegram:bots/mock-token").to("mock:telegram").         }     }. }
