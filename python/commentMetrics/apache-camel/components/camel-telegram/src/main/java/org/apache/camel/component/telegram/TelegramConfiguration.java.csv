commented;modifiers;parameterAmount;loc;comment;code
true;public;2;23;/**  * Sets the remaining configuration parameters available in the URI.  *  * @param remaining the URI part after the scheme  * @param defaultAuthorizationToken the default authorization token to use if not present in the URI  */ ;/**  * Sets the remaining configuration parameters available in the URI.  *  * @param remaining the URI part after the scheme  * @param defaultAuthorizationToken the default authorization token to use if not present in the URI  */ public void updatePathConfig(String remaining, String defaultAuthorizationToken) {     String[] parts = remaining.split("/").     if (parts.length == 0 || parts.length > 2) {         throw new IllegalArgumentException("Unexpected URI format. Expected 'bots' or 'bots/<authorizationToken>', found '" + remaining + "'").     }     String type = parts[0].     if (!type.equals(ENDPOINT_TYPE_BOTS)) {         throw new IllegalArgumentException("Unexpected endpoint type. Expected 'bots', found '" + type + "'").     }     String authorizationToken = defaultAuthorizationToken.     if (parts.length > 1) {         authorizationToken = parts[1].     }     if (authorizationToken == null || authorizationToken.trim().length() == 0) {         throw new IllegalArgumentException("The authorization token must be provided and cannot be empty").     }     this.type = type.     this.authorizationToken = authorizationToken. }
false;public;0;3;;public String getType() {     return type. }
false;public;1;3;;public void setType(String type) {     this.type = type. }
false;public;0;3;;public String getAuthorizationToken() {     return authorizationToken. }
false;public;1;3;;public void setAuthorizationToken(String authorizationToken) {     this.authorizationToken = authorizationToken. }
false;public;0;3;;public String getChatId() {     return chatId. }
false;public;1;3;;public void setChatId(String chatId) {     this.chatId = chatId. }
false;public;0;3;;public Integer getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(Integer timeout) {     this.timeout = timeout. }
false;public;0;3;;public Integer getLimit() {     return limit. }
false;public;1;3;;public void setLimit(Integer limit) {     this.limit = limit. }
false;public;0;11;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("TelegramConfiguration{").     sb.append("type='").append(type).append('\'').     sb.append(", authorizationToken='").append(authorizationToken).append('\'').     sb.append(", chatId='").append(chatId).append('\'').     sb.append(", timeout=").append(timeout).     sb.append(", limit=").append(limit).     sb.append('}').     return sb.toString(). }
