commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;@Converter public static String toString(Update update) {     return update != null ? toString(update.getMessage()) : null. }
false;public,static;1;4;;@Converter public static String toString(IncomingMessage message) {     return message != null ? message.getText() : null. }
true;public,static;2;5;/**  * Fallback converter for any unlisted object, using String default mapping.  */ ;/**  * Fallback converter for any unlisted object, using String default mapping.  */ @Converter public static OutgoingMessage toOutgoingMessage(Object message, Exchange exchange) {     String content = exchange.getIn().getBody(String.class).     return toOutgoingMessage(content, exchange). }
false;public,static;2;43;;@Converter public static OutgoingMessage toOutgoingMessage(String message, Exchange exchange) {     if (message == null) {         // fail fast         return null.     }     Object typeObj = exchange.getIn().getHeader(TelegramConstants.TELEGRAM_MEDIA_TYPE).     TelegramMediaType type.     if (typeObj instanceof String) {         type = TelegramMediaType.valueOf((String) typeObj).     } else {         type = (TelegramMediaType) typeObj.     }     // If the message is a string, it will be converted to a OutgoingTextMessage     if (type == null) {         type = TelegramMediaType.TEXT.     }     OutgoingMessage result.     switch(type) {         case TEXT:             {                 OutgoingTextMessage txt = new OutgoingTextMessage().                 txt.setText(message).                 TelegramParseMode parseMode = getParseMode(exchange).                 if (parseMode != null) {                     txt.setParseMode(parseMode.getCode()).                 }                 result = txt.                 break.             }         default:             {                 throw new IllegalArgumentException("Unsupported conversion from String to media type " + type).             }     }     return result. }
false;public,static;2;78;;@Converter public static OutgoingMessage toOutgoingMessage(byte[] message, Exchange exchange) {     if (message == null) {         // fail fast         return null.     }     Object typeObj = exchange.getIn().getHeader(TelegramConstants.TELEGRAM_MEDIA_TYPE).     TelegramMediaType type.     if (typeObj instanceof String) {         type = TelegramMediaType.valueOf((String) typeObj).     } else {         type = (TelegramMediaType) typeObj.     }     // If the message is a string, it will be converted to a OutgoingTextMessage     if (type == null) {         throw new IllegalStateException("Binary message require the header " + TelegramConstants.TELEGRAM_MEDIA_TYPE + " to be set with an appropriate org.apache.camel.component.telegram" + ".TelegramMediaType object").     }     OutgoingMessage result.     switch(type) {         case PHOTO_JPG:         case PHOTO_PNG:             {                 OutgoingPhotoMessage img = new OutgoingPhotoMessage().                 String caption = (String) exchange.getIn().getHeader(TelegramConstants.TELEGRAM_MEDIA_TITLE_CAPTION).                 String fileName = "photo." + type.getFileExtension().                 img.setCaption(caption).                 img.setFilenameWithExtension(fileName).                 img.setPhoto(message).                 result = img.                 break.             }         case AUDIO:             {                 OutgoingAudioMessage audio = new OutgoingAudioMessage().                 String title = (String) exchange.getIn().getHeader(TelegramConstants.TELEGRAM_MEDIA_TITLE_CAPTION).                 String fileName = "audio." + type.getFileExtension().                 audio.setTitle(title).                 audio.setFilenameWithExtension(fileName).                 audio.setAudio(message).                 result = audio.                 break.             }         case VIDEO:             {                 OutgoingVideoMessage video = new OutgoingVideoMessage().                 String title = (String) exchange.getIn().getHeader(TelegramConstants.TELEGRAM_MEDIA_TITLE_CAPTION).                 String fileName = "video." + type.getFileExtension().                 video.setCaption(title).                 video.setFilenameWithExtension(fileName).                 video.setVideo(message).                 result = video.                 break.             }         case DOCUMENT:         default:             {                 // this can be any file                 OutgoingDocumentMessage document = new OutgoingDocumentMessage().                 String title = (String) exchange.getIn().getHeader(TelegramConstants.TELEGRAM_MEDIA_TITLE_CAPTION).                 document.setCaption(title).                 document.setFilenameWithExtension("file").                 document.setDocument(message).                 result = document.                 break.             }     }     return result. }
false;private,static;1;11;;private static TelegramParseMode getParseMode(Exchange exchange) {     TelegramParseMode mode = null.     Object parseMode = exchange.getIn().getHeader(TelegramConstants.TELEGRAM_PARSE_MODE).     if (parseMode instanceof String) {         mode = TelegramParseMode.valueOf((String) parseMode).     } else {         mode = (TelegramParseMode) parseMode.     }     return mode. }
