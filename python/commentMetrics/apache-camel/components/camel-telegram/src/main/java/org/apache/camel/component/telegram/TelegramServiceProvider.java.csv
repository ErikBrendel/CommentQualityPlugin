commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Returns the singleton provider.  */ ;/**  * Returns the singleton provider.  */ public static TelegramServiceProvider get() {     return INSTANCE. }
true;public;0;7;/**  * Provides the current service. It can be the default one or an alternative one.  * @return the active {@code TelegramService}  */ ;/**  * Provides the current service. It can be the default one or an alternative one.  * @return the active {@code TelegramService}  */ public TelegramService getService() {     if (telegramService != null) {         // no need for synchronization, it's only for testing purposes         return telegramService.     }     return service. }
true;public;0;3;/**  * Get the current alternative service, if any.  *  * @return the current alternative service  */ ;/**  * Get the current alternative service, if any.  *  * @return the current alternative service  */ public TelegramService getAlternativeService() {     return telegramService. }
true;public;1;3;/**  * Allows setting an alternative service.  *  * @param service the alternative service  */ ;/**  * Allows setting an alternative service.  *  * @param service the alternative service  */ public void setAlternativeService(TelegramService service) {     this.telegramService = service. }
true;public;0;3;/**  * Restores the provider to its original state.  */ ;/**  * Restores the provider to its original state.  */ public void restoreDefaultService() {     this.telegramService = null. }
