commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;34;;@Override protected int poll() throws Exception {     TelegramConfiguration config = endpoint.getConfiguration().     TelegramService service = TelegramServiceProvider.get().getService().     log.debug("Polling Telegram service to get updates").     UpdateResult updateResult = service.getUpdates(config.getAuthorizationToken(), offset, config.getLimit(), config.getTimeout()).     if (updateResult.getUpdates() == null) {         // to simplify processing         updateResult.setUpdates(Collections.emptyList()).     }     if (!updateResult.isOk()) {         throw new IllegalStateException("The server was unable to process the request. Response was " + updateResult).     }     List<Update> updates = updateResult.getUpdates().     if (updates.size() > 0) {         log.debug("Received {} updates from Telegram service", updates.size()).     } else {         log.debug("No updates received from Telegram service").     }     processUpdates(updates).     // update offset to prevent retrieving the same data again     updateOffset(updates).     return updates.size(). }
false;private;1;9;;private void processUpdates(List<Update> updates) throws Exception {     for (Update update : updates) {         log.debug("Received update from Telegram service: {}", update).         Exchange exchange = endpoint.createExchange(update).         getProcessor().process(exchange).     } }
false;private;1;7;;private void updateOffset(List<Update> updates) {     OptionalLong ol = updates.stream().mapToLong(Update::getUpdateId).max().     if (ol.isPresent()) {         this.offset = ol.getAsLong() + 1.         log.debug("Next Telegram offset will be {}", this.offset).     } }
