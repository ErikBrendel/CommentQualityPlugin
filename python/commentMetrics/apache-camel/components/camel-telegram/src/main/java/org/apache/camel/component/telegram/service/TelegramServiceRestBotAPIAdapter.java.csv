commented;modifiers;parameterAmount;loc;comment;code
false;public;4;4;;@Override public UpdateResult getUpdates(String authorizationToken, Long offset, Integer limit, Integer timeoutSeconds) {     return api.getUpdates(authorizationToken, offset, limit, timeoutSeconds). }
false;public;2;28;;@Override public Object sendMessage(String authorizationToken, OutgoingMessage message) {     Object resultMessage.     if (message instanceof OutgoingTextMessage) {         resultMessage = this.sendMessage(authorizationToken, (OutgoingTextMessage) message).     } else if (message instanceof OutgoingPhotoMessage) {         resultMessage = this.sendMessage(authorizationToken, (OutgoingPhotoMessage) message).     } else if (message instanceof OutgoingAudioMessage) {         resultMessage = this.sendMessage(authorizationToken, (OutgoingAudioMessage) message).     } else if (message instanceof OutgoingVideoMessage) {         resultMessage = this.sendMessage(authorizationToken, (OutgoingVideoMessage) message).     } else if (message instanceof OutgoingDocumentMessage) {         resultMessage = this.sendMessage(authorizationToken, (OutgoingDocumentMessage) message).     } else if (message instanceof SendLocationMessage) {         resultMessage = api.sendLocation(authorizationToken, (SendLocationMessage) message).     } else if (message instanceof EditMessageLiveLocationMessage) {         resultMessage = api.editMessageLiveLocation(authorizationToken, (EditMessageLiveLocationMessage) message).     } else if (message instanceof StopMessageLiveLocationMessage) {         resultMessage = api.stopMessageLiveLocation(authorizationToken, (StopMessageLiveLocationMessage) message).     } else if (message instanceof SendVenueMessage) {         resultMessage = api.sendVenue(authorizationToken, (SendVenueMessage) message).     } else {         throw new IllegalArgumentException("Unsupported message type " + (message != null ? message.getClass().getName() : null)).     }     return resultMessage. }
false;private;2;3;;private MessageResult sendMessage(String authorizationToken, OutgoingTextMessage message) {     return api.sendMessage(authorizationToken, message). }
false;private;2;12;;private MessageResult sendMessage(String authorizationToken, OutgoingPhotoMessage message) {     List<Attachment> parts = new LinkedList<>().     fillCommonMediaParts(parts, message).     parts.add(buildMediaPart("photo", message.getFilenameWithExtension(), message.getPhoto())).     if (message.getCaption() != null) {         parts.add(buildTextPart("caption", message.getCaption())).     }     return api.sendPhoto(authorizationToken, parts). }
false;private;2;18;;private MessageResult sendMessage(String authorizationToken, OutgoingAudioMessage message) {     List<Attachment> parts = new LinkedList<>().     fillCommonMediaParts(parts, message).     parts.add(buildMediaPart("audio", message.getFilenameWithExtension(), message.getAudio())).     if (message.getTitle() != null) {         parts.add(buildTextPart("title", message.getTitle())).     }     if (message.getDurationSeconds() != null) {         parts.add(buildTextPart("duration", String.valueOf(message.getDurationSeconds()))).     }     if (message.getPerformer() != null) {         parts.add(buildTextPart("performer", message.getPerformer())).     }     return api.sendAudio(authorizationToken, parts). }
false;private;2;21;;private MessageResult sendMessage(String authorizationToken, OutgoingVideoMessage message) {     List<Attachment> parts = new LinkedList<>().     fillCommonMediaParts(parts, message).     parts.add(buildMediaPart("video", message.getFilenameWithExtension(), message.getVideo())).     if (message.getCaption() != null) {         parts.add(buildTextPart("caption", message.getCaption())).     }     if (message.getDurationSeconds() != null) {         parts.add(buildTextPart("duration", String.valueOf(message.getDurationSeconds()))).     }     if (message.getWidth() != null) {         parts.add(buildTextPart("width", String.valueOf(message.getWidth()))).     }     if (message.getHeight() != null) {         parts.add(buildTextPart("height", String.valueOf(message.getHeight()))).     }     return api.sendVideo(authorizationToken, parts). }
false;private;2;12;;private MessageResult sendMessage(String authorizationToken, OutgoingDocumentMessage message) {     List<Attachment> parts = new LinkedList<>().     fillCommonMediaParts(parts, message).     parts.add(buildMediaPart("document", message.getFilenameWithExtension(), message.getDocument())).     if (message.getCaption() != null) {         parts.add(buildTextPart("caption", message.getCaption())).     }     return api.sendDocument(authorizationToken, parts). }
false;private;2;10;;private void fillCommonMediaParts(List<Attachment> parts, OutgoingMessage message) {     parts.add(buildTextPart("chat_id", message.getChatId())).     if (message.getReplyToMessageId() != null) {         parts.add(buildTextPart("reply_to_message_id", String.valueOf(message.getReplyToMessageId()))).     }     if (message.getDisableNotification() != null) {         parts.add(buildTextPart("disable_notification", String.valueOf(message.getDisableNotification()))).     } }
false;private;2;8;;private Attachment buildTextPart(String name, String value) {     MultivaluedMap m = new MultivaluedHashMap<>().     m.putSingle("Content-Type", "text/plain").     m.putSingle("Content-Disposition", "form-data. name=\"" + escapeMimeName(name) + "\"").     Attachment a = new Attachment(m, value).     return a. }
false;private;3;5;;private Attachment buildMediaPart(String name, String fileNameWithExtension, byte[] value) {     Attachment a = new Attachment(name, new ByteArrayInputStream(value), new ContentDisposition("form-data. name=\"" + escapeMimeName(name) + "\". filename=\"" + escapeMimeName(fileNameWithExtension) + "\"")).     return a. }
false;private;1;3;;private String escapeMimeName(String name) {     return name.replace("\"", ""). }
false;private;0;5;;private JacksonJsonProvider providerByCustomObjectMapper() {     ObjectMapper mapper = new ObjectMapper().     mapper.setSerializationInclusion(Include.NON_NULL).     return new JacksonJsonProvider(mapper). }
