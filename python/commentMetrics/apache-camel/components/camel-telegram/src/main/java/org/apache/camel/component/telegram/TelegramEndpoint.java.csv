commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new TelegramProducer(this). }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     TelegramConsumer consumer = new TelegramConsumer(this, processor).     configureConsumer(consumer).     return consumer. }
false;public;1;19;;public Exchange createExchange(Update update) {     Exchange exchange = super.createExchange().     if (update.getMessage() != null) {         exchange.getIn().setBody(update.getMessage()).         if (update.getMessage().getChat() != null) {             exchange.getIn().setHeader(TelegramConstants.TELEGRAM_CHAT_ID, update.getMessage().getChat().getId()).         }     } else if (update.getChannelPost() != null) {         exchange.getIn().setBody(update.getChannelPost()).         if (update.getChannelPost().getChat() != null) {             exchange.getIn().setHeader(TelegramConstants.TELEGRAM_CHAT_ID, update.getChannelPost().getChat().getId()).         }     }     return exchange. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public TelegramConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(TelegramConfiguration configuration) {     this.configuration = configuration. }
