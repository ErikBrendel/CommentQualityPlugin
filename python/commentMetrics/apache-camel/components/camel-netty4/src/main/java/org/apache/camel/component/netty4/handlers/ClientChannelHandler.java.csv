# id;timestamp;commentText;codeText;commentWords;codeWords
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1415211488;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {__        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1436421586;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {__        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1436518546;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {__        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1437118936;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {__        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1437674028;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {__        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1448566537;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1450380326;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1453634159;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1453636149;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1456309691;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1462363676;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1462363676;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1523288179;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1531637865;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", new Object[]{ctx.channel(), body})__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,new,object,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1536517284;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", ctx.channel(), body)__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1536687142;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", ctx.channel(), body)__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
ClientChannelHandler -> protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception;1540108163;Gets the Camel {@link Message} to use as the message to be set on the current {@link Exchange} when_we have received a reply message._<p/>__@param exchange      the current exchange_@param ctx       the channel handler context_@param message  the incoming event which has the response message from Netty._@return the Camel {@link Message} to set on the current {@link Exchange} as the response message._@throws Exception is thrown if error getting the response message;protected Message getResponseMessage(Exchange exchange, ChannelHandlerContext ctx, Object message) throws Exception {_        Object body = message___        if (LOG.isDebugEnabled()) {_            LOG.debug("Channel: {} received body: {}", ctx.channel(), body)__        }__        _        if (producer.getConfiguration().isTextline()) {_            body = producer.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, message)__        }__        _        if (ExchangeHelper.isOutCapable(exchange)) {_            NettyPayloadHelper.setOut(exchange, body)__            return exchange.getOut()__        } else {_            NettyPayloadHelper.setIn(exchange, body)__            return exchange.getIn()__        }_    };gets,the,camel,link,message,to,use,as,the,message,to,be,set,on,the,current,link,exchange,when,we,have,received,a,reply,message,p,param,exchange,the,current,exchange,param,ctx,the,channel,handler,context,param,message,the,incoming,event,which,has,the,response,message,from,netty,return,the,camel,link,message,to,set,on,the,current,link,exchange,as,the,response,message,throws,exception,is,thrown,if,error,getting,the,response,message;protected,message,get,response,message,exchange,exchange,channel,handler,context,ctx,object,message,throws,exception,object,body,message,if,log,is,debug,enabled,log,debug,channel,received,body,ctx,channel,body,if,producer,get,configuration,is,textline,body,producer,get,context,get,type,converter,mandatory,convert,to,string,class,exchange,message,if,exchange,helper,is,out,capable,exchange,netty,payload,helper,set,out,exchange,body,return,exchange,get,out,else,netty,payload,helper,set,in,exchange,body,return,exchange,get,in
