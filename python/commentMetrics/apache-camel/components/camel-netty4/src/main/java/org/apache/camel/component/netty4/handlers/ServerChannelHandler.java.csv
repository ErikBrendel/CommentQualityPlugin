# id;timestamp;commentText;codeText;commentWords;codeWords
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1375883136;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1415211488;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1448566537;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1505222606;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1536517284;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1540108163;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected Object getResponseBody(Exchange exchange) throws Exception;1540108164;Gets the object we want to use as the response object for sending to netty.__@param exchange the exchange_@return the object to use as response_@throws Exception is thrown if error getting the response body;protected Object getResponseBody(Exchange exchange) throws Exception {_        _        boolean exception = exchange.getException() != null && !consumer.getEndpoint().getConfiguration().isTransferExchange()__        if (exception) {_            return exchange.getException()__        }_        if (exchange.hasOut()) {_            return NettyPayloadHelper.getOut(consumer.getEndpoint(), exchange)__        } else {_            return NettyPayloadHelper.getIn(consumer.getEndpoint(), exchange)__        }_    };gets,the,object,we,want,to,use,as,the,response,object,for,sending,to,netty,param,exchange,the,exchange,return,the,object,to,use,as,response,throws,exception,is,thrown,if,error,getting,the,response,body;protected,object,get,response,body,exchange,exchange,throws,exception,boolean,exception,exchange,get,exception,null,consumer,get,endpoint,get,configuration,is,transfer,exchange,if,exception,return,exchange,get,exception,if,exchange,has,out,return,netty,payload,helper,get,out,consumer,get,endpoint,exchange,else,return,netty,payload,helper,get,in,consumer,get,endpoint,exchange
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1375883136;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1415211488;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1448566537;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1505222606;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1536517284;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1540108163;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress);1540108164;Creates the {@link ChannelFutureListener} to execute when writing the response is complete.__@param consumer          the netty consumer_@param exchange          the exchange_@param remoteAddress     the remote address of the message_@return the listener.;protected ChannelFutureListener createResponseFutureListener(NettyConsumer consumer, Exchange exchange, SocketAddress remoteAddress) {_        return new ServerResponseFutureListener(consumer, exchange, remoteAddress)__    };creates,the,link,channel,future,listener,to,execute,when,writing,the,response,is,complete,param,consumer,the,netty,consumer,param,exchange,the,exchange,param,remote,address,the,remote,address,of,the,message,return,the,listener;protected,channel,future,listener,create,response,future,listener,netty,consumer,consumer,exchange,exchange,socket,address,remote,address,return,new,server,response,future,listener,consumer,exchange,remote,address
ServerChannelHandler -> protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message);1415211488;Allows any custom logic before the {@link Exchange} is processed by the routing engine.__@param exchange       the exchange_@param ctx            the channel handler context_@param message        the message which needs to be sent;protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message) {_        _    };allows,any,custom,logic,before,the,link,exchange,is,processed,by,the,routing,engine,param,exchange,the,exchange,param,ctx,the,channel,handler,context,param,message,the,message,which,needs,to,be,sent;protected,void,before,process,final,exchange,exchange,final,channel,handler,context,ctx,final,object,message
ServerChannelHandler -> protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message);1448566537;Allows any custom logic before the {@link Exchange} is processed by the routing engine.__@param exchange       the exchange_@param ctx            the channel handler context_@param message        the message which needs to be sent;protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message) {_        _    };allows,any,custom,logic,before,the,link,exchange,is,processed,by,the,routing,engine,param,exchange,the,exchange,param,ctx,the,channel,handler,context,param,message,the,message,which,needs,to,be,sent;protected,void,before,process,final,exchange,exchange,final,channel,handler,context,ctx,final,object,message
ServerChannelHandler -> protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message);1505222606;Allows any custom logic before the {@link Exchange} is processed by the routing engine.__@param exchange       the exchange_@param ctx            the channel handler context_@param message        the message which needs to be sent;protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message) {_        _    };allows,any,custom,logic,before,the,link,exchange,is,processed,by,the,routing,engine,param,exchange,the,exchange,param,ctx,the,channel,handler,context,param,message,the,message,which,needs,to,be,sent;protected,void,before,process,final,exchange,exchange,final,channel,handler,context,ctx,final,object,message
ServerChannelHandler -> protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message);1536517284;Allows any custom logic before the {@link Exchange} is processed by the routing engine.__@param exchange       the exchange_@param ctx            the channel handler context_@param message        the message which needs to be sent;protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message) {_        _    };allows,any,custom,logic,before,the,link,exchange,is,processed,by,the,routing,engine,param,exchange,the,exchange,param,ctx,the,channel,handler,context,param,message,the,message,which,needs,to,be,sent;protected,void,before,process,final,exchange,exchange,final,channel,handler,context,ctx,final,object,message
ServerChannelHandler -> protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message);1540108163;Allows any custom logic before the {@link Exchange} is processed by the routing engine.__@param exchange       the exchange_@param ctx            the channel handler context_@param message        the message which needs to be sent;protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message) {_        _    };allows,any,custom,logic,before,the,link,exchange,is,processed,by,the,routing,engine,param,exchange,the,exchange,param,ctx,the,channel,handler,context,param,message,the,message,which,needs,to,be,sent;protected,void,before,process,final,exchange,exchange,final,channel,handler,context,ctx,final,object,message
ServerChannelHandler -> protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message);1540108164;Allows any custom logic before the {@link Exchange} is processed by the routing engine.__@param exchange       the exchange_@param ctx            the channel handler context_@param message        the message which needs to be sent;protected void beforeProcess(final Exchange exchange, final ChannelHandlerContext ctx, final Object message) {_        _    };allows,any,custom,logic,before,the,link,exchange,is,processed,by,the,routing,engine,param,exchange,the,exchange,param,ctx,the,channel,handler,context,param,message,the,message,which,needs,to,be,sent;protected,void,before,process,final,exchange,exchange,final,channel,handler,context,ctx,final,object,message
