commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;14;;public static Object getIn(NettyEndpoint endpoint, Exchange exchange) {     if (endpoint.getConfiguration().isTransferExchange()) {         // we should transfer the entire exchange over the wire (includes in/out)         return DefaultExchangeHolder.marshal(exchange, true, endpoint.getConfiguration().isAllowSerializedHeaders()).     } else {         if (endpoint.getConfiguration().isUseByteBuf()) {             // Just leverage the type converter             return exchange.getIn().getBody(ByteBuf.class).         } else {             // normal transfer using the body only             return exchange.getIn().getBody().         }     } }
false;public,static;2;9;;public static Object getOut(NettyEndpoint endpoint, Exchange exchange) {     if (endpoint.getConfiguration().isTransferExchange()) {         // we should transfer the entire exchange over the wire (includes in/out)         return DefaultExchangeHolder.marshal(exchange).     } else {         // normal transfer using the body only         return exchange.getOut().getBody().     } }
false;public,static;2;22;;public static void setIn(Exchange exchange, Object payload) {     if (payload instanceof DefaultExchangeHolder) {         DefaultExchangeHolder.unmarshal(exchange, (DefaultExchangeHolder) payload).     } else if (payload instanceof AddressedEnvelope) {         @SuppressWarnings("unchecked")         AddressedEnvelope<Object, InetSocketAddress> dp = (AddressedEnvelope<Object, InetSocketAddress>) payload.         // need to check if the content is ExchangeHolder         if (dp.content() instanceof DefaultExchangeHolder) {             DefaultExchangeHolder.unmarshal(exchange, (DefaultExchangeHolder) dp.content()).         } else {             // need to take out the payload here             exchange.getIn().setBody(dp.content()).         }         // setup the sender address here for sending the response message back         exchange.setProperty(NettyConstants.NETTY_REMOTE_ADDRESS, dp.sender()).         // setup the remote address to the message header at the same time         exchange.getIn().setHeader(NettyConstants.NETTY_REMOTE_ADDRESS, dp.sender()).     } else {         // normal transfer using the body only         exchange.getIn().setBody(payload).     } }
false;public,static;2;21;;public static void setOut(Exchange exchange, Object payload) {     if (payload instanceof DefaultExchangeHolder) {         DefaultExchangeHolder.unmarshal(exchange, (DefaultExchangeHolder) payload).     } else if (payload instanceof AddressedEnvelope) {         @SuppressWarnings("unchecked")         AddressedEnvelope<Object, InetSocketAddress> dp = (AddressedEnvelope<Object, InetSocketAddress>) payload.         // need to check if the content is ExchangeHolder         if (dp.content() instanceof DefaultExchangeHolder) {             DefaultExchangeHolder.unmarshal(exchange, (DefaultExchangeHolder) dp.content()).         } else {             // need to take out the payload here             exchange.getOut().setBody(dp.content()).         }         // setup the sender address here for sending the response message back         exchange.setProperty(NettyConstants.NETTY_REMOTE_ADDRESS, dp.sender()).     } else {         // normal transfer using the body only and preserve the headers         exchange.getOut().setHeaders(exchange.getIn().getHeaders()).         exchange.getOut().setBody(payload).     } }
