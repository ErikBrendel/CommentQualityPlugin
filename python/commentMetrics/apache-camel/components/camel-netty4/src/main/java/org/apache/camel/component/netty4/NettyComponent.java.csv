commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getMaximumPoolSize() {     return maximumPoolSize. }
true;public;1;3;/**  * The thread pool size for the EventExecutorGroup if its in use.  * <p/>  * The default value is 16.  */ ;/**  * The thread pool size for the EventExecutorGroup if its in use.  * <p/>  * The default value is 16.  */ public void setMaximumPoolSize(int maximumPoolSize) {     this.maximumPoolSize = maximumPoolSize. }
false;protected;3;30;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     NettyConfiguration config.     if (configuration != null) {         config = configuration.copy().     } else {         config = new NettyConfiguration().     }     config = parseConfiguration(config, remaining, parameters).     // merge any custom bootstrap configuration on the config     NettyServerBootstrapConfiguration bootstrapConfiguration = resolveAndRemoveReferenceParameter(parameters, "bootstrapConfiguration", NettyServerBootstrapConfiguration.class).     if (bootstrapConfiguration != null) {         Map<String, Object> options = new HashMap<>().         if (IntrospectionSupport.getProperties(bootstrapConfiguration, options, null, false)) {             IntrospectionSupport.setProperties(getCamelContext().getTypeConverter(), config, options).         }     }     if (config.getSslContextParameters() == null) {         config.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     // validate config     config.validateConfiguration().     NettyEndpoint nettyEndpoint = new NettyEndpoint(remaining, this, config).     setProperties(nettyEndpoint.getConfiguration(), parameters).     return nettyEndpoint. }
true;protected;3;4;/**  * Parses the configuration  *  * @return the parsed and valid configuration to use  */ ;/**  * Parses the configuration  *  * @return the parsed and valid configuration to use  */ protected NettyConfiguration parseConfiguration(NettyConfiguration configuration, String remaining, Map<String, Object> parameters) throws Exception {     configuration.parseURI(new URI(remaining), parameters, this, "tcp", "udp").     return configuration. }
false;public;0;3;;public NettyConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * To use the NettyConfiguration as configuration when creating endpoints.  */ ;/**  * To use the NettyConfiguration as configuration when creating endpoints.  */ public void setConfiguration(NettyConfiguration configuration) {     this.configuration = configuration. }
true;public;1;3;/**  * To use the given EventExecutorGroup.  */ ;/**  * To use the given EventExecutorGroup.  */ public void setExecutorService(EventExecutorGroup executorService) {     this.executorService = executorService. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;public;1;8;;@Metadata(description = "To configure security using SSLContextParameters", label = "security") public void setSslContextParameters(final SSLContextParameters sslContextParameters) {     if (configuration == null) {         configuration = new NettyConfiguration().     }     configuration.setSslContextParameters(sslContextParameters). }
false;public;0;3;;public EventExecutorGroup getExecutorService() {     return executorService. }
false;protected;0;13;;@Override protected void doStart() throws Exception {     if (configuration == null) {         configuration = new NettyConfiguration().     }     // Only setup the executorService if it is needed     if (configuration.isUsingExecutorService() && executorService == null) {         executorService = createExecutorService().     }     super.doStart(). }
false;protected;0;8;;protected EventExecutorGroup createExecutorService() {     // Provide the executor service for the application     // and use a Camel thread factory so we have consistent thread namings     // we should use a shared thread pool as recommended by Netty     String pattern = getCamelContext().getExecutorServiceManager().getThreadNamePattern().     ThreadFactory factory = new CamelThreadFactory(pattern, "NettyEventExecutorGroup", true).     return new DefaultEventExecutorGroup(getMaximumPoolSize(), factory). }
false;protected;0;15;;@Override protected void doStop() throws Exception {     // Only shutdown the executorService if it is created by netty component     if (configuration.isUsingExecutorService() && executorService != null) {         getCamelContext().getExecutorServiceManager().shutdownGraceful(executorService).         executorService = null.     }     // shutdown workerPool if configured     if (configuration.getWorkerGroup() != null) {         configuration.getWorkerGroup().shutdownGracefully().     }     super.doStop(). }
