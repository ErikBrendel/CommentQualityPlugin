commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public long getTimeout() {     return timeout. }
true;public;1;3;/**  * Sets timeout value in millis seconds. The default value is 30000 (30 seconds).  */ ;/**  * Sets timeout value in millis seconds. The default value is 30000 (30 seconds).  */ public void setTimeout(long timeout) {     this.timeout = timeout. }
false;public;0;3;;public long getTimeoutChecker() {     return timeoutChecker. }
true;public;1;3;/**  * Time in millis how frequent to check for timeouts. Set this to a lower value if you want  * to react faster upon timeouts. The default value is 1000.  */ ;/**  * Time in millis how frequent to check for timeouts. Set this to a lower value if you want  * to react faster upon timeouts. The default value is 1000.  */ public void setTimeoutChecker(long timeoutChecker) {     this.timeoutChecker = timeoutChecker. }
false;public;0;3;;public LoggingLevel getTimeoutLoggingLevel() {     return timeoutLoggingLevel. }
true;public;1;3;/**  * Sets the logging level to use when a timeout was hit.  */ ;/**  * Sets the logging level to use when a timeout was hit.  */ public void setTimeoutLoggingLevel(LoggingLevel timeoutLoggingLevel) {     this.timeoutLoggingLevel = timeoutLoggingLevel. }
false;public;0;3;;public ExecutorService getWorkerPool() {     return workerPool. }
true;public;1;3;/**  * To use a shared worker pool for processing timed out requests.  */ ;/**  * To use a shared worker pool for processing timed out requests.  */ public void setWorkerPool(ExecutorService workerPool) {     this.workerPool = workerPool. }
true;public,abstract;1;1;/**  * Implement this method to extract the correaltion id from the request message body.  */ ;/**  * Implement this method to extract the correaltion id from the request message body.  */ public abstract String getRequestCorrelationId(Object request).
true;public,abstract;1;1;/**  * Implement this method to extract the correaltion id from the response message body.  */ ;/**  * Implement this method to extract the correaltion id from the response message body.  */ public abstract String getResponseCorrelationId(Object response).
true;public;2;3;/**  * Override this to implement a custom timeout response message.  *  * @param correlationId  the correlation id  * @param request        the request message  * @return the response message or <tt>null</tt> to use an {@link ExchangeTimedOutException} exception.  */ ;/**  * Override this to implement a custom timeout response message.  *  * @param correlationId  the correlation id  * @param request        the request message  * @return the response message or <tt>null</tt> to use an {@link ExchangeTimedOutException} exception.  */ public String getTimeoutResponse(String correlationId, Object request) {     return null. }
false;public;2;12;;@Override public void putState(Channel channel, NettyCamelState state) {     // grab the correlation id     Object body = state.getExchange().getMessage().getBody().     // the correlation id is the first part of the message     String cid = getRequestCorrelationId(body).     if (ObjectHelper.isEmpty(cid)) {         throw new IllegalArgumentException("CorrelationID is missing").     }     LOG.debug("putState({}) on channel: {}", cid, channel.id()).     map.put(cid, state, timeout). }
false;public;2;4;;@Override public void removeState(ChannelHandlerContext ctx, Channel channel) { // noop }
false;public;3;11;;@Override public NettyCamelState getState(ChannelHandlerContext ctx, Channel channel, Object msg) {     String cid = getResponseCorrelationId(msg).     if (ObjectHelper.isEmpty(cid)) {         LOG.warn("CorrelationID is missing from response message.").         return null.     }     LOG.debug("getState({}) on channel: {}", cid, channel.id()).     // lets remove after use as its no longer needed     return map.remove(cid). }
false;public;3;5;;@Override public NettyCamelState getState(ChannelHandlerContext ctx, Channel channel, Throwable cause) {     // noop     return null. }
false;protected;0;17;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext", this).     timeoutLogger = new CamelLogger(LOG, timeoutLoggingLevel).     if (scheduledExecutorService == null) {         scheduledExecutorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "NettyTimeoutCorrelationManager").     }     if (workerPool == null) {         workerPool = camelContext.getExecutorServiceManager().newDefaultThreadPool(this, "NettyTimeoutWorkerPool").     }     map = new NettyStateTimeoutMap(scheduledExecutorService).     ServiceHelper.startService(map). }
false;protected;0;13;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(map).     if (scheduledExecutorService != null && stopScheduledExecutorService) {         camelContext.getExecutorServiceManager().shutdown(scheduledExecutorService).         scheduledExecutorService = null.     }     if (workerPool != null && stopWorkerPool) {         camelContext.getExecutorServiceManager().shutdown(workerPool).         workerPool = null.     } }
false;protected;0;13;;@Override protected void doShutdown() throws Exception {     ServiceHelper.stopAndShutdownService(map).     if (scheduledExecutorService != null && stopScheduledExecutorService) {         camelContext.getExecutorServiceManager().shutdown(scheduledExecutorService).         scheduledExecutorService = null.     }     if (workerPool != null && stopWorkerPool) {         camelContext.getExecutorServiceManager().shutdown(workerPool).         workerPool = null.     } }
false;public;2;20;;@Override public boolean onEviction(String key, NettyCamelState value) {     timeoutLogger.log("Timeout of correlation id: " + key).     workerPool.submit(() -> {         Exchange exchange = value.getExchange().         AsyncCallback callback = value.getCallback().         if (exchange != null && callback != null) {             Object timeoutBody = getTimeoutResponse(key, exchange.getMessage().getBody()).             if (timeoutBody != null) {                 exchange.getMessage().setBody(timeoutBody).             } else {                 exchange.setException(new ExchangeTimedOutException(exchange, timeout)).             }             callback.done(false).         }     }).     return true. }
