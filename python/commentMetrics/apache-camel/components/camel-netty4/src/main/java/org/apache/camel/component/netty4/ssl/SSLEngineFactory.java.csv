commented;modifiers;parameterAmount;loc;comment;code
false;public;6;34;;public SSLContext createSSLContext(CamelContext camelContext, String keyStoreFormat, String securityProvider, String keyStoreResource, String trustStoreResource, char[] passphrase) throws Exception {     SSLContext answer.     KeyStore ks = KeyStore.getInstance(keyStoreFormat).     InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, keyStoreResource).     try {         ks.load(is, passphrase).     } finally {         IOHelper.close(is).     }     KeyManagerFactory kmf = KeyManagerFactory.getInstance(securityProvider).     kmf.init(ks, passphrase).     answer = SSLContext.getInstance(SSL_PROTOCOL).     if (trustStoreResource != null) {         KeyStore ts = KeyStore.getInstance(keyStoreFormat).         is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, trustStoreResource).         try {             ts.load(is, passphrase).         } finally {             IOHelper.close(is).         }         TrustManagerFactory tmf = TrustManagerFactory.getInstance(securityProvider).         tmf.init(ts).         answer.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null).     } else {         answer.init(kmf.getKeyManagers(), null, null).     }     return answer. }
false;public;1;6;;public SSLEngine createServerSSLEngine(SSLContext sslContext) {     SSLEngine serverEngine = sslContext.createSSLEngine().     serverEngine.setUseClientMode(false).     serverEngine.setNeedClientAuth(true).     return serverEngine. }
false;public;1;5;;public SSLEngine createClientSSLEngine(SSLContext sslContext) {     SSLEngine clientEngine = sslContext.createSSLEngine().     clientEngine.setUseClientMode(true).     return clientEngine. }
