commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;15;;@Converter public static byte[] toByteArray(ByteBuf buffer, Exchange exchange) {     if (buffer.hasArray()) {         return buffer.array().     }     byte[] bytes = new byte[buffer.readableBytes()].     int readerIndex = buffer.readerIndex().     buffer.retain().     try {         buffer.getBytes(readerIndex, bytes).     } finally {         buffer.release().     }     return bytes. }
false;public,static;2;9;;@Converter public static String toString(ByteBuf buffer, Exchange exchange) throws UnsupportedEncodingException {     byte[] bytes = toByteArray(buffer, exchange).     // use type converter as it can handle encoding set on the Exchange     if (exchange != null) {         return exchange.getContext().getTypeConverter().convertTo(String.class, exchange, bytes).     }     return new String(bytes, "UTF-8"). }
false;public,static;2;4;;@Converter public static InputStream toInputStream(ByteBuf buffer, Exchange exchange) {     return new ByteBufInputStream(buffer). }
false;public,static;2;5;;@Converter public static ObjectInput toObjectInput(ByteBuf buffer, Exchange exchange) throws IOException {     InputStream is = toInputStream(buffer, exchange).     return new ObjectInputStream(is). }
false;public,static;1;6;;@Converter public static ByteBuf toByteBuffer(byte[] bytes) {     ByteBuf buf = ByteBufAllocator.DEFAULT.buffer(bytes.length).     buf.writeBytes(bytes).     return buf. }
false;public,static;2;11;;@Converter public static ByteBuf toByteBuffer(String s, Exchange exchange) {     byte[] bytes.     if (exchange != null) {         // use type converter as it can handle encoding set on the Exchange         bytes = exchange.getContext().getTypeConverter().convertTo(byte[].class, exchange, s).     } else {         bytes = s.getBytes().     }     return toByteBuffer(bytes). }
false;public,static;2;5;;@Converter public static Document toDocument(ByteBuf buffer, Exchange exchange) {     InputStream is = toInputStream(buffer, exchange).     return exchange.getContext().getTypeConverter().convertTo(Document.class, exchange, is). }
false;public,static;2;5;;@Converter public static DOMSource toDOMSource(ByteBuf buffer, Exchange exchange) {     InputStream is = toInputStream(buffer, exchange).     return exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, is). }
false;public,static;2;5;;@Converter public static SAXSource toSAXSource(ByteBuf buffer, Exchange exchange) {     InputStream is = toInputStream(buffer, exchange).     return exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, is). }
false;public,static;2;5;;@Converter public static StreamSource toStreamSource(ByteBuf buffer, Exchange exchange) {     InputStream is = toInputStream(buffer, exchange).     return exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, is). }
false;public,static;2;5;;@Converter public static StAXSource toStAXSource(ByteBuf buffer, Exchange exchange) {     InputStream is = toInputStream(buffer, exchange).     return exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, is). }
