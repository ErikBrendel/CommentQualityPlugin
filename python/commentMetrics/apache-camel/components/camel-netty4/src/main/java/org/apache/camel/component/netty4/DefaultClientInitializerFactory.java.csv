commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;46;;protected void initChannel(Channel ch) throws Exception {     // create a new pipeline     ChannelPipeline channelPipeline = ch.pipeline().     SslHandler sslHandler = configureClientSSLOnDemand().     if (sslHandler != null) {         // TODO  must close on SSL exception         // sslHandler.setCloseOnSSLException(true).         LOG.debug("Client SSL handler configured and added to the ChannelPipeline: {}", sslHandler).         addToPipeline("ssl", channelPipeline, sslHandler).     }     List<ChannelHandler> decoders = producer.getConfiguration().getDecoders().     for (int x = 0. x < decoders.size(). x++) {         ChannelHandler decoder = decoders.get(x).         if (decoder instanceof ChannelHandlerFactory) {             // use the factory to create a new instance of the channel as it may not be shareable             decoder = ((ChannelHandlerFactory) decoder).newChannelHandler().         }         addToPipeline("decoder-" + x, channelPipeline, decoder).     }     List<ChannelHandler> encoders = producer.getConfiguration().getEncoders().     for (int x = 0. x < encoders.size(). x++) {         ChannelHandler encoder = encoders.get(x).         if (encoder instanceof ChannelHandlerFactory) {             // use the factory to create a new instance of the channel as it may not be shareable             encoder = ((ChannelHandlerFactory) encoder).newChannelHandler().         }         addToPipeline("encoder-" + x, channelPipeline, encoder).     }     // do we use request timeout?     if (producer.getConfiguration().getRequestTimeout() > 0) {         if (LOG.isTraceEnabled()) {             LOG.trace("Using request timeout {} millis", producer.getConfiguration().getRequestTimeout()).         }         ChannelHandler timeout = new ReadTimeoutHandler(producer.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS).         addToPipeline("timeout", channelPipeline, timeout).     }     // our handler must be added last     addToPipeline("handler", channelPipeline, new ClientChannelHandler(producer)).     LOG.trace("Created ChannelPipeline: {}", channelPipeline). }
false;private;3;3;;private void addToPipeline(String name, ChannelPipeline pipeline, ChannelHandler handler) {     pipeline.addLast(name, handler). }
false;private;1;45;;private SSLContext createSSLContext(NettyProducer producer) throws Exception {     NettyConfiguration configuration = producer.getConfiguration().     if (!configuration.isSsl()) {         return null.     }     SSLContext answer.     // create ssl context once     if (configuration.getSslContextParameters() != null) {         answer = configuration.getSslContextParameters().createSSLContext(producer.getContext()).     } else {         if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {             LOG.debug("keystorefile is null").         }         if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {             LOG.debug("truststorefile is null").         }         if (configuration.getPassphrase().toCharArray() == null) {             LOG.debug("passphrase is null").         }         SSLEngineFactory sslEngineFactory.         if (configuration.getKeyStoreFile() != null || configuration.getTrustStoreFile() != null) {             sslEngineFactory = new SSLEngineFactory().             answer = sslEngineFactory.createSSLContext(producer.getContext(), configuration.getKeyStoreFormat(), configuration.getSecurityProvider(), "file:" + configuration.getKeyStoreFile().getPath(), "file:" + configuration.getTrustStoreFile().getPath(), configuration.getPassphrase().toCharArray()).         } else {             sslEngineFactory = new SSLEngineFactory().             answer = sslEngineFactory.createSSLContext(producer.getContext(), configuration.getKeyStoreFormat(), configuration.getSecurityProvider(), configuration.getKeyStoreResource(), configuration.getTrustStoreResource(), configuration.getPassphrase().toCharArray()).         }     }     return answer. }
false;private;0;19;;private SslHandler configureClientSSLOnDemand() throws Exception {     if (!producer.getConfiguration().isSsl()) {         return null.     }     if (producer.getConfiguration().getSslHandler() != null) {         return producer.getConfiguration().getSslHandler().     } else if (sslContext != null) {         SSLEngine engine = sslContext.createSSLEngine().         engine.setUseClientMode(true).         if (producer.getConfiguration().getSslContextParameters() == null) {             // just set the enabledProtocols if the SslContextParameter doesn't set             engine.setEnabledProtocols(producer.getConfiguration().getEnabledProtocols().split(",")).         }         return new SslHandler(engine).     }     return null. }
false;public;1;4;;@Override public ClientInitializerFactory createPipelineFactory(NettyProducer producer) {     return new DefaultClientInitializerFactory(producer). }
