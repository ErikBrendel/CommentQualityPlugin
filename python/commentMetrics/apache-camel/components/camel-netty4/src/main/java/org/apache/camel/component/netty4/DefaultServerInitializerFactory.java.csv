commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;46;;@Override protected void initChannel(Channel ch) throws Exception {     // create a new pipeline     ChannelPipeline channelPipeline = ch.pipeline().     SslHandler sslHandler = configureServerSSLOnDemand().     if (sslHandler != null) {         // TODO  must close on SSL exception         // sslHandler.setCloseOnSSLException(true).         LOG.debug("Server SSL handler configured and added as an interceptor against the ChannelPipeline: {}", sslHandler).         addToPipeline("ssl", channelPipeline, sslHandler).     }     List<ChannelHandler> encoders = consumer.getConfiguration().getEncoders().     for (int x = 0. x < encoders.size(). x++) {         ChannelHandler encoder = encoders.get(x).         if (encoder instanceof ChannelHandlerFactory) {             // use the factory to create a new instance of the channel as it may not be shareable             encoder = ((ChannelHandlerFactory) encoder).newChannelHandler().         }         addToPipeline("encoder-" + x, channelPipeline, encoder).     }     List<ChannelHandler> decoders = consumer.getConfiguration().getDecoders().     for (int x = 0. x < decoders.size(). x++) {         ChannelHandler decoder = decoders.get(x).         if (decoder instanceof ChannelHandlerFactory) {             // use the factory to create a new instance of the channel as it may not be shareable             decoder = ((ChannelHandlerFactory) decoder).newChannelHandler().         }         addToPipeline("decoder-" + x, channelPipeline, decoder).     }     if (consumer.getConfiguration().isUsingExecutorService()) {         // Just use EventExecutorGroup from the Netty Component         EventExecutorGroup applicationExecutor = consumer.getEndpoint().getComponent().getExecutorService().         addToPipeline("handler", channelPipeline, applicationExecutor, new ServerChannelHandler(consumer)).     } else {         // still use the worker event loop group here         addToPipeline("handler", channelPipeline, new ServerChannelHandler(consumer)).     }     LOG.trace("Created ChannelPipeline: {}", channelPipeline). }
false;private;3;3;;private void addToPipeline(String name, ChannelPipeline pipeline, ChannelHandler handler) {     pipeline.addLast(name, handler). }
false;private;4;3;;private void addToPipeline(String name, ChannelPipeline pipeline, EventExecutorGroup executor, ChannelHandler handler) {     pipeline.addLast(executor, name, handler). }
false;private;2;43;;private SSLContext createSSLContext(CamelContext camelContext, NettyServerBootstrapConfiguration configuration) throws Exception {     if (!configuration.isSsl()) {         return null.     }     SSLContext answer.     // create ssl context once     if (configuration.getSslContextParameters() != null) {         answer = configuration.getSslContextParameters().createSSLContext(camelContext).     } else {         if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {             LOG.debug("keystorefile is null").         }         if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {             LOG.debug("truststorefile is null").         }         if (configuration.getPassphrase().toCharArray() == null) {             LOG.debug("passphrase is null").         }         SSLEngineFactory sslEngineFactory.         if (configuration.getKeyStoreFile() != null || configuration.getTrustStoreFile() != null) {             sslEngineFactory = new SSLEngineFactory().             answer = sslEngineFactory.createSSLContext(camelContext, configuration.getKeyStoreFormat(), configuration.getSecurityProvider(), "file:" + configuration.getKeyStoreFile().getPath(), "file:" + configuration.getTrustStoreFile().getPath(), configuration.getPassphrase().toCharArray()).         } else {             sslEngineFactory = new SSLEngineFactory().             answer = sslEngineFactory.createSSLContext(camelContext, configuration.getKeyStoreFormat(), configuration.getSecurityProvider(), configuration.getKeyStoreResource(), configuration.getTrustStoreResource(), configuration.getPassphrase().toCharArray()).         }     }     return answer. }
false;private;0;20;;private SslHandler configureServerSSLOnDemand() throws Exception {     if (!consumer.getConfiguration().isSsl()) {         return null.     }     if (consumer.getConfiguration().getSslHandler() != null) {         return consumer.getConfiguration().getSslHandler().     } else if (sslContext != null) {         SSLEngine engine = sslContext.createSSLEngine().         engine.setUseClientMode(consumer.getConfiguration().isClientMode()).         engine.setNeedClientAuth(consumer.getConfiguration().isNeedClientAuth()).         if (consumer.getConfiguration().getSslContextParameters() == null) {             // just set the enabledProtocols if the SslContextParameter doesn't set             engine.setEnabledProtocols(consumer.getConfiguration().getEnabledProtocols().split(",")).         }         return new SslHandler(engine).     }     return null. }
false;public;1;4;;@Override public ServerInitializerFactory createPipelineFactory(NettyConsumer consumer) {     return new DefaultServerInitializerFactory(consumer). }
