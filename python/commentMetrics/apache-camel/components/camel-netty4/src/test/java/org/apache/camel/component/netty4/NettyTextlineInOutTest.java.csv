commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testTextlineInOut() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     String reply = template.requestBody("netty4:tcp://localhost:{{port}}?textline=true&sync=true", "Hello World", String.class).     assertEquals("Bye World", reply).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").validate(body().isInstanceOf(String.class)).to("mock:result").transform(body().regexReplaceAll("Hello", "Bye")). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").validate(body().isInstanceOf(String.class)).to("mock:result").transform(body().regexReplaceAll("Hello", "Bye")).         }     }. }
