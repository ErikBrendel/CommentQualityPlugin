commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("cpf", new TestClientChannelInitializerFactory(null)).     registry.bind("spf", new TestServerChannelPipelineFactory(null)).     return registry. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'"). }
false;public;0;9;;@Override public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?serverInitializerFactory=#spf&textline=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'").         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?serverInitializerFactory=#spf&textline=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'").                 }             }).         }     }. }
false;public;0;10;;@Test public void testCustomClientInitializerFactory() throws Exception {     String response = (String) template.requestBody("netty4:tcp://localhost:{{port}}?clientInitializerFactory=#cpf&textline=true", "Forest Gump describing Vietnam...").     assertEquals("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'", response).     assertEquals(true, clientInvoked).     assertEquals(true, serverInvoked). }
false;protected;1;10;;@Override protected void initChannel(Channel ch) throws Exception {     ChannelPipeline channelPipeline = ch.pipeline().     clientInvoked = true.     channelPipeline.addLast("decoder-DELIM", new DelimiterBasedFrameDecoder(maxLineSize, true, Delimiters.lineDelimiter())).     channelPipeline.addLast("decoder-SD", new StringDecoder(CharsetUtil.UTF_8)).     channelPipeline.addLast("encoder-SD", new StringEncoder(CharsetUtil.UTF_8)).     channelPipeline.addLast("handler", new ClientChannelHandler(producer)). }
false;public;1;4;;@Override public ClientInitializerFactory createPipelineFactory(NettyProducer producer) {     return new TestClientChannelInitializerFactory(producer). }
false;protected;1;8;;protected void initChannel(Channel ch) throws Exception {     ChannelPipeline channelPipeline = ch.pipeline().     serverInvoked = true.     channelPipeline.addLast("encoder-SD", new StringEncoder(CharsetUtil.UTF_8)).     channelPipeline.addLast("decoder-DELIM", new DelimiterBasedFrameDecoder(maxLineSize, true, Delimiters.lineDelimiter())).     channelPipeline.addLast("decoder-SD", new StringDecoder(CharsetUtil.UTF_8)).     channelPipeline.addLast("handler", new ServerChannelHandler(consumer)). }
false;public;1;4;;@Override public ServerInitializerFactory createPipelineFactory(NettyConsumer consumer) {     return new TestServerChannelPipelineFactory(consumer). }
