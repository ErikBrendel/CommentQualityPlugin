commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     // create a single decoder     ChannelHandlerFactory decoder = ChannelHandlerFactories.newLengthFieldBasedFrameDecoder(1048576, 0, 4, 0, 4).     registry.bind("length-decoder", decoder).     return registry. }
false;public;0;29;;@Test public void unsharableCodecsConflictsTest() throws Exception {     byte[] data1 = new byte[8192].     byte[] data2 = new byte[16383].     Arrays.fill(data1, (byte) 0x38).     Arrays.fill(data2, (byte) 0x39).     byte[] body1 = (new String(LENGTH_HEADER) + new String(data1)).getBytes().     byte[] body2 = (new String(LENGTH_HEADER) + new String(data2)).getBytes().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived(new String(data2) + "9").     Socket client1 = getSocket("localhost", port).     Socket client2 = getSocket("localhost", port).     // use two clients to send to the same server at the same time     try {         sendBuffer(body2, client2).         sendBuffer(body1, client1).         sendBuffer(new String("9").getBytes(), client2).     } catch (Exception e) {         log.error("", e).     } finally {         client1.close().         client2.close().     }     mock.assertIsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     port = getPort().     from("netty4:tcp://localhost:{{port}}?decoders=#length-decoder&sync=false").process(processor).to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             port = getPort().             from("netty4:tcp://localhost:{{port}}?decoders=#length-decoder&sync=false").process(processor).to("mock:result").         }     }. }
false;private,static;2;5;;private static Socket getSocket(String host, int port) throws IOException {     Socket s = new Socket(host, port).     s.setSoTimeout(60000).     return s. }
false;public,static;2;11;;public static void sendBuffer(byte[] buf, Socket server) throws Exception {     OutputStream netOut = server.getOutputStream().     OutputStream dataOut = new BufferedOutputStream(netOut).     try {         dataOut.write(buf, 0, buf.length).         dataOut.flush().     } catch (Exception e) {         server.close().         throw e.     } }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody(exchange.getIn().getBody(String.class)). }
