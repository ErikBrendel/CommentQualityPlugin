commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testNetty2978() throws Exception {     CamelClient client = new CamelClient(context).     try {         for (int i = 0. i < 1000. i++) {             Object reply = client.lookup(i).             assertEquals("Bye " + i, reply).         }     } finally {         client.close().     } }
false;public;0;3;;public String call() {     return client.lookup(i). }
false;public;0;31;;@Test public void testNetty2978Concurrent() throws Exception {     final CamelClient client = new CamelClient(context).     try {         final List<Callable<String>> callables = new ArrayList<>().         for (int count = 0. count < 1000. count++) {             final int i = count.             callables.add(new Callable<String>() {                  public String call() {                     return client.lookup(i).                 }             }).         }         final ExecutorService executorService = Executors.newFixedThreadPool(10).         final List<Future<String>> results = executorService.invokeAll(callables).         final Set<String> replies = new HashSet<>().         for (Future<String> future : results) {             // wait at most 60 sec to not hang test             String reply = future.get(60, TimeUnit.SECONDS).             assertTrue(reply.startsWith("Bye ")).             replies.add(reply).         }         // should be 1000 unique replies         assertEquals(1000, replies.size()).         executorService.shutdownNow().     } finally {         client.close().     } }
false;public;1;4;;public void process(final Exchange exchange) {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Bye " + body). }
false;public;0;10;;@Override public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?sync=true").process(new Processor() {          public void process(final Exchange exchange) {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Bye " + body).         }     }). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?sync=true").process(new Processor() {                  public void process(final Exchange exchange) {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Bye " + body).                 }             }).         }     }. }
false;public;0;3;;public void close() throws Exception {     producerTemplate.stop(). }
false;public;1;3;;public String lookup(int num) {     return producerTemplate.requestBody(endpoint, num, String.class). }
