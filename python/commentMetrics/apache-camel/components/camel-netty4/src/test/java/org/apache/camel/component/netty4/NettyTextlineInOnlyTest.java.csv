commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testTextlineInOnlyDual() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "how are you?").     template.sendBody("netty4:tcp://localhost:{{port}}?textline=true&sync=false", "Hello World\nhow are you?\n").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testTextlineInOnlyAutoAppend() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("netty4:tcp://localhost:{{port}}?textline=true&sync=false", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testTextlineInOnly() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("netty4:tcp://localhost:{{port}}?textline=true&sync=false", "Hello World\n").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?textline=true&sync=false").validate(body().isInstanceOf(String.class)).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?textline=true&sync=false").validate(body().isInstanceOf(String.class)).to("mock:result").         }     }. }
