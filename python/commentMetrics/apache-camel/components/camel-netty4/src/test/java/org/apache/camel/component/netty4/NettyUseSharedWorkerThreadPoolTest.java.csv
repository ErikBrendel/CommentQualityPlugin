commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;5;;@Override protected JndiRegistry createRegistry() throws Exception {     jndi = super.createRegistry().     return jndi. }
false;public;0;20;;@Test public void testSharedThreadPool() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(30).     for (int i = 0. i < 10. i++) {         String reply = template.requestBody("netty4:tcp://localhost:" + port + "?textline=true&sync=true&workerGroup=#sharedClientPool", "Hello World", String.class).         assertEquals("Bye World", reply).         reply = template.requestBody("netty4:tcp://localhost:" + port2 + "?textline=true&sync=true&workerGroup=#sharedClientPool", "Hello Camel", String.class).         assertEquals("Hi Camel", reply).         reply = template.requestBody("netty4:tcp://localhost:" + port3 + "?textline=true&sync=true&workerGroup=#sharedClientPool", "Hello Claus", String.class).         assertEquals("Hej Claus", reply).     }     assertMockEndpointsSatisfied().     sharedWorkerServerGroup.shutdownGracefully().sync().await().     sharedWorkerClientGroup.shutdownGracefully().sync().await(). }
false;public;0;30;;@Override public void configure() throws Exception {     // we have 3 routes, but lets try to have only 2 threads in the pool     sharedWorkerServerGroup = new NettyWorkerPoolBuilder().withWorkerCount(2).withName("NettyServer").build().     jndi.bind("sharedServerPool", sharedWorkerServerGroup).     sharedWorkerClientGroup = new NettyWorkerPoolBuilder().withWorkerCount(3).withName("NettyClient").build().     jndi.bind("sharedClientPool", sharedWorkerClientGroup).     port = getPort().     port2 = getNextPort().     port3 = getNextPort().     from("netty4:tcp://localhost:" + port + "?textline=true&sync=true&workerGroup=#sharedServerPool&usingExecutorService=false").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello", "Bye")).     from("netty4:tcp://localhost:" + port2 + "?textline=true&sync=true&workerGroup=#sharedServerPool&usingExecutorService=false").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello", "Hi")).     from("netty4:tcp://localhost:" + port3 + "?textline=true&sync=true&workerGroup=#sharedServerPool&usingExecutorService=false").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello", "Hej")). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // we have 3 routes, but lets try to have only 2 threads in the pool             sharedWorkerServerGroup = new NettyWorkerPoolBuilder().withWorkerCount(2).withName("NettyServer").build().             jndi.bind("sharedServerPool", sharedWorkerServerGroup).             sharedWorkerClientGroup = new NettyWorkerPoolBuilder().withWorkerCount(3).withName("NettyClient").build().             jndi.bind("sharedClientPool", sharedWorkerClientGroup).             port = getPort().             port2 = getNextPort().             port3 = getNextPort().             from("netty4:tcp://localhost:" + port + "?textline=true&sync=true&workerGroup=#sharedServerPool&usingExecutorService=false").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello", "Bye")).             from("netty4:tcp://localhost:" + port2 + "?textline=true&sync=true&workerGroup=#sharedServerPool&usingExecutorService=false").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello", "Hi")).             from("netty4:tcp://localhost:" + port3 + "?textline=true&sync=true&workerGroup=#sharedServerPool&usingExecutorService=false").validate(body().isInstanceOf(String.class)).to("log:result").to("mock:result").transform(body().regexReplaceAll("Hello", "Hej")).         }     }. }
