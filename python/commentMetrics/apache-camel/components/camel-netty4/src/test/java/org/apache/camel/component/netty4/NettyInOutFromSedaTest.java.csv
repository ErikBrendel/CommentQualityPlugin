commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testInOutIssue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Bye A", "Bye B", "Bye C").     template.sendBody("seda:start", "A").     template.sendBody("seda:start", "B").     template.sendBody("seda:start", "C").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     from("seda:start").log("before ${body}").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true").log("after ${body}").to("mock:result").     from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").transform(body().prepend("Bye ")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").log("before ${body}").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true").log("after ${body}").to("mock:result").             from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").transform(body().prepend("Bye ")).         }     }. }
