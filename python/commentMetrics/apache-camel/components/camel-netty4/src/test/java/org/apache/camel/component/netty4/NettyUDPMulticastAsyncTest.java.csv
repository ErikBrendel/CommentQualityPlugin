commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     byte[] buffer = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, new File("src/test/resources/test.txt")).     exchange.setProperty(Exchange.CHARSET_NAME, "ASCII").     exchange.getIn().setBody(buffer). }
false;private;1;9;;private void sendFile(String uri) throws Exception {     template.send(uri, new Processor() {          public void process(Exchange exchange) throws Exception {             byte[] buffer = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, new File("src/test/resources/test.txt")).             exchange.setProperty(Exchange.CHARSET_NAME, "ASCII").             exchange.getIn().setBody(buffer).         }     }). }
false;public;0;11;;@Test public void testUDPInOnlyMulticastWithNettyConsumer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().startsWith("Song Of A Dream".getBytes()).     // any IP in the range of 224.0.0.0 through 239.255.255.255 does the job     sendFile("netty4:udp://224.1.2.3:{{port}}?sync=false").     mock.assertIsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4:udp://224.1.2.3:{{port}}?sync=false&networkInterface=en0").to("mock:result").to("log:Message"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:udp://224.1.2.3:{{port}}?sync=false&networkInterface=en0").to("mock:result").to("log:Message").         }     }. }
