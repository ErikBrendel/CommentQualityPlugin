commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public Object call() throws Exception {     // wait until we're allowed to start     startLatch.await().     Object reply = template.requestBody(uri, "World").     // signal that we're done now     finishLatch.countDown().     return reply. }
false;public;0;42;;@Test public void testSimultaneousClients() throws Exception {     ExecutorService executorService = Executors.newFixedThreadPool(clientCount).     Future<?>[] replies = new Future[clientCount].     for (int i = 0. i < clientCount. i++) {         replies[i] = executorService.submit(new Callable<Object>() {              @Override             public Object call() throws Exception {                 // wait until we're allowed to start                 startLatch.await().                 Object reply = template.requestBody(uri, "World").                 // signal that we're done now                 finishLatch.countDown().                 return reply.             }         }).     }     Object[] expectedReplies = new Object[clientCount].     Arrays.fill(expectedReplies, "Bye World").     getMockEndpoint("mock:result").expectedMessageCount(clientCount).     getMockEndpoint("mock:result").expectedBodiesReceived(expectedReplies).     // fire the simultaneous client calls     startLatch.countDown().     // and wait long enough until they're all done     assertTrue("Waiting on the latch ended up with a timeout!", finishLatch.await(5, TimeUnit.SECONDS)).     executorService.shutdown().     // assert on what we expect to receive     for (int i = 0. i < clientCount. i++) {         assertEquals("Bye World", replies[i].get()).     }     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from(uri).log("${body}").transform(body().prepend("Bye ")).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(uri).log("${body}").transform(body().prepend("Bye ")).to("mock:result").         }     }. }
