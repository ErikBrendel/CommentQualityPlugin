commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testSmallConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;5;;@Test @Ignore public void testLargeConcurrentProducers() throws Exception {     doSendMessages(250000, 100). }
false;public;0;6;;public String call() throws Exception {     String reply = template.requestBody("netty4:tcp://localhost:{{port}}", index, String.class).     log.debug("Sent {} received {}", index, reply).     assertEquals("Bye " + index, reply).     return reply. }
false;private;2;35;;private void doSendMessages(int files, int poolSize) throws Exception {     StopWatch watch = new StopWatch().     NotifyBuilder notify = new NotifyBuilder(context).whenDone(files).create().     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     // we access the responses Map below only inside the main thread,     // so no need for a thread-safe Map implementation     Map<Integer, Future<String>> responses = new HashMap<>().     for (int i = 0. i < files. i++) {         final int index = i.         Future<String> out = executor.submit(new Callable<String>() {              public String call() throws Exception {                 String reply = template.requestBody("netty4:tcp://localhost:{{port}}", index, String.class).                 log.debug("Sent {} received {}", index, reply).                 assertEquals("Bye " + index, reply).                 return reply.             }         }).         responses.put(index, out).     }     notify.matches(2, TimeUnit.MINUTES).     log.info("Took " + watch.taken() + " millis to process " + files + " messages using " + poolSize + " client threads.").     assertEquals(files, responses.size()).     // get all responses     Set<String> unique = new HashSet<>().     for (Future<String> future : responses.values()) {         unique.add(future.get()).     }     // should be 'files' unique responses     assertEquals("Should be " + files + " unique responses", files, unique.size()).     executor.shutdownNow(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Bye " + body). }
false;public;0;8;;public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?sync=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Bye " + body).         }     }).to("log:progress?groupSize=1000"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?sync=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Bye " + body).                 }             }).to("log:progress?groupSize=1000").         }     }. }
