commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     // we can share the decoder between multiple netty consumers, because they have the same configuration     // and we use a ChannelHandlerFactory     ChannelHandlerFactory decoder = ChannelHandlerFactories.newLengthFieldBasedFrameDecoder(1048576, 0, 4, 0, 4).     registry.bind("length-decoder", decoder).     registry.bind("length-decoder2", decoder).     return registry. }
false;public;0;28;;@Test public void canSupplyMultipleCodecsToEndpointPipeline() throws Exception {     byte[] sPort1 = new byte[8192].     byte[] sPort2 = new byte[16383].     Arrays.fill(sPort1, (byte) 0x38).     Arrays.fill(sPort2, (byte) 0x39).     byte[] bodyPort1 = (new String(LENGTH_HEADER) + new String(sPort1)).getBytes().     byte[] bodyPort2 = (new String(LENGTH_HEADER) + new String(sPort2)).getBytes().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived(new String(sPort2) + "9").     Socket server1 = getSocket("localhost", port1).     Socket server2 = getSocket("localhost", port2).     try {         sendSopBuffer(bodyPort2, server2).         sendSopBuffer(bodyPort1, server1).         sendSopBuffer(new String("9").getBytes(), server2).     } catch (Exception e) {         log.error("", e).     } finally {         server1.close().         server2.close().     }     mock.assertIsSatisfied(). }
false;public;0;11;;public void configure() throws Exception {     port1 = getPort().     port2 = getNextPort().     from("netty4:tcp://localhost:" + port1 + "?decoders=#length-decoder&sync=false").process(processor).     from("netty4:tcp://localhost:" + port2 + "?decoders=#length-decoder2&sync=false").process(processor).to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             port1 = getPort().             port2 = getNextPort().             from("netty4:tcp://localhost:" + port1 + "?decoders=#length-decoder&sync=false").process(processor).             from("netty4:tcp://localhost:" + port2 + "?decoders=#length-decoder2&sync=false").process(processor).to("mock:result").         }     }. }
false;private,static;2;5;;private static Socket getSocket(String host, int port) throws IOException {     Socket s = new Socket(host, port).     s.setSoTimeout(60000).     return s. }
false;public,static;2;11;;public static void sendSopBuffer(byte[] buf, Socket server) throws Exception {     BufferedOutputStream dataOut = IOHelper.buffered(server.getOutputStream()).     try {         dataOut.write(buf, 0, buf.length).         dataOut.flush().     } catch (Exception e) {         IOHelper.close(dataOut).         server.close().         throw e.     } }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody(exchange.getIn().getBody(String.class)). }
