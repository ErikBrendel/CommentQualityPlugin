commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected void initChannel(Channel channel) throws Exception {     channel.pipeline().addLast(new UdpHandler()).     channel.pipeline().addLast(new ByteArrayDecoder()).     channel.pipeline().addLast(new ContentHandler()). }
false;public;0;14;;public void createNettyUdpReceiver() {     group = new NioEventLoopGroup().     bootstrap = new Bootstrap().     bootstrap.group(group).channel(NioDatagramChannel.class).handler(new ChannelInitializer<Channel>() {          @Override         protected void initChannel(Channel channel) throws Exception {             channel.pipeline().addLast(new UdpHandler()).             channel.pipeline().addLast(new ByteArrayDecoder()).             channel.pipeline().addLast(new ContentHandler()).         }     }).localAddress(new InetSocketAddress(getPort())). }
false;public;0;3;;public void bind() {     bootstrap.bind().syncUninterruptibly(). }
false;public;0;3;;public void stop() {     group.shutdownGracefully().syncUninterruptibly(). }
false;public;0;10;;@Test public void testSendingRawByteMessage() throws Exception {     createNettyUdpReceiver().     bind().     for (int i = 0. i < SEND_COUNT. ++i) {         template.sendBody("direct:in", fromHexString(SEND_STRING)).     }     stop().     assertTrue("We should have received some datagrams", receivedCount > 0). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:in").to("netty4:udp://localhost:{{port}}?sync=false&udpByteArrayCodec=true&udpConnectionlessSending=true"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").to("netty4:udp://localhost:{{port}}?sync=false&udpByteArrayCodec=true&udpConnectionlessSending=true").         }     }. }
false;protected;3;4;;@Override protected void decode(ChannelHandlerContext channelHandlerContext, DatagramPacket datagramPacket, List<Object> objects) throws Exception {     objects.add(datagramPacket.content().retain()). }
false;protected;2;5;;@Override protected void channelRead0(ChannelHandlerContext channelHandlerContext, byte[] s) throws Exception {     ++receivedCount.     assertEquals(SEND_STRING, byteArrayToHex(s)). }
