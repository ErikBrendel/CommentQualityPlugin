commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     StringEncoder stringEncoder = new StringEncoder().     StringDecoder stringDecoder = new StringDecoder().     registry.bind("encoder", stringEncoder).     registry.bind("decoder", stringDecoder).     return registry. }
false;public;0;10;;@Test public void canSupplySingleCodecToEndpointPipeline() throws Exception {     String poem = new Poetry().getPoem().     MockEndpoint mock = getMockEndpoint("mock:single-codec").     mock.expectedBodiesReceived(poem).     sendBody("direct:single-codec", poem).     mock.await(1, TimeUnit.SECONDS).     mock.assertIsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:single-codec").to("netty4:tcp://localhost:{{port}}?encoders=#encoder&sync=false").     from("netty4:tcp://localhost:{{port}}?decoders=#decoder&sync=false").to("mock:single-codec"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:single-codec").to("netty4:tcp://localhost:{{port}}?encoders=#encoder&sync=false").             from("netty4:tcp://localhost:{{port}}?decoders=#decoder&sync=false").to("mock:single-codec").         }     }. }
