commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testSuspendResume() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Camel", "Again").     String out = template.requestBody("netty4:tcp://localhost:{{port}}?sync=true&disconnect=true", "Camel", String.class).     assertEquals("Bye Camel", out).     context.getRouteController().suspendRoute("foo").     try {         template.requestBody("netty4:tcp://localhost:{{port}}?sync=true&disconnect=true", "World", String.class).         fail("Should not allow connecting as its suspended").     } catch (Exception e) {     // expected     }     context.getRouteController().resumeRoute("foo").     out = template.requestBody("netty4:tcp://localhost:{{port}}?sync=true&disconnect=true", "Again", String.class).     assertEquals("Bye Again", out).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?sync=true").routeId("foo").to("log:result").to("mock:result").transform(body().prepend("Bye ")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?sync=true").routeId("foo").to("log:result").to("mock:result").transform(body().prepend("Bye ")).         }     }. }
