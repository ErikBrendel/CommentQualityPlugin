commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testReuse() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("Hello Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello Hello World").     template.sendBody("direct:start", "World\n").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     assertEquals(2, channels.size()).     assertSame("Should reuse channel", channels.get(0), channels.get(1)).     assertFalse("And closed when routing done", channels.get(0).isOpen()).     assertFalse("And closed when routing done", channels.get(1).isOpen()). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Channel channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class).     channels.add(channel).     assertTrue("Should be active", channel.isActive()). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Channel channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class).     channels.add(channel).     assertTrue("Should be active", channel.isActive()). }
false;public;0;28;;@Override public void configure() throws Exception {     from("direct:start").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&reuseChannel=true&disconnect=true").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Channel channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class).             channels.add(channel).             assertTrue("Should be active", channel.isActive()).         }     }).to("mock:a").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&reuseChannel=true&disconnect=true").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Channel channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class).             channels.add(channel).             assertTrue("Should be active", channel.isActive()).         }     }).to("mock:b").     from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").transform(body().prepend("Hello ")).to("mock:result"). }
false;protected;0;33;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&reuseChannel=true&disconnect=true").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Channel channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class).                     channels.add(channel).                     assertTrue("Should be active", channel.isActive()).                 }             }).to("mock:a").to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&reuseChannel=true&disconnect=true").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Channel channel = exchange.getProperty(NettyConstants.NETTY_CHANNEL, Channel.class).                     channels.add(channel).                     assertTrue("Should be active", channel.isActive()).                 }             }).to("mock:b").             from("netty4:tcp://localhost:{{port}}?textline=true&sync=true").transform(body().prepend("Hello ")).to("mock:result").         }     }. }
