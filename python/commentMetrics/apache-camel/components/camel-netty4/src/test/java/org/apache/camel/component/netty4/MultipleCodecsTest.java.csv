commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;29;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     // START SNIPPET: registry-beans     ChannelHandlerFactory lengthDecoder = ChannelHandlerFactories.newLengthFieldBasedFrameDecoder(1048576, 0, 4, 0, 4).     StringDecoder stringDecoder = new StringDecoder().     registry.bind("length-decoder", lengthDecoder).     registry.bind("string-decoder", stringDecoder).     LengthFieldPrepender lengthEncoder = new LengthFieldPrepender(4).     StringEncoder stringEncoder = new StringEncoder().     registry.bind("length-encoder", lengthEncoder).     registry.bind("string-encoder", stringEncoder).     List<ChannelHandler> decoders = new ArrayList<>().     decoders.add(lengthDecoder).     decoders.add(stringDecoder).     List<ChannelHandler> encoders = new ArrayList<>().     encoders.add(lengthEncoder).     encoders.add(stringEncoder).     registry.bind("encoders", encoders).     registry.bind("decoders", decoders).     // END SNIPPET: registry-beans     return registry. }
false;public;0;10;;@Test public void canSupplyMultipleCodecsToEndpointPipeline() throws Exception {     String poem = new Poetry().getPoem().     MockEndpoint mock = getMockEndpoint("mock:multiple-codec").     mock.expectedBodiesReceived(poem).     sendBody("direct:multiple-codec", poem).     mock.await(1, TimeUnit.SECONDS).     mock.assertIsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     // START SNIPPET: routes     from("direct:multiple-codec").to("netty4:tcp://localhost:{{port}}?encoders=#encoders&sync=false").     from("netty4:tcp://localhost:{{port}}?decoders=#length-decoder,#string-decoder&sync=false").to("mock:multiple-codec"). // START SNIPPET: routes }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: routes             from("direct:multiple-codec").to("netty4:tcp://localhost:{{port}}?encoders=#encoders&sync=false").             from("netty4:tcp://localhost:{{port}}?decoders=#length-decoder,#string-decoder&sync=false").to("mock:multiple-codec").         // START SNIPPET: routes         }     }. }
