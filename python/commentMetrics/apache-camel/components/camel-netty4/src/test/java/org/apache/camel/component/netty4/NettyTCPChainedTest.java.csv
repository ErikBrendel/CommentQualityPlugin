commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;public void process(Exchange exchange) throws Exception {     // Read from an input stream     InputStream is = IOHelper.buffered(new FileInputStream("src/test/resources/test.txt")).     byte[] buffer = IOConverter.toBytes(is).     is.close().     // Set the property of the charset encoding     exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").     Message in = exchange.getIn().     in.setBody(buffer). }
false;private;1;20;;private void sendFile(String uri) throws Exception {     Exchange exchange = template.asyncSend(uri, new Processor() {          public void process(Exchange exchange) throws Exception {             // Read from an input stream             InputStream is = IOHelper.buffered(new FileInputStream("src/test/resources/test.txt")).             byte[] buffer = IOConverter.toBytes(is).             is.close().             // Set the property of the charset encoding             exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").             Message in = exchange.getIn().             in.setBody(buffer).         }     }).get().     if (exchange.getException() != null) {         throw new AssertionError(exchange.getException()).     }     Assert.assertFalse(exchange.isFailed()). }
false;public;0;8;;@Test public void testTCPChainedConnectionFromCallbackThread() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     sendFile("direct:chainedCalls").     mock.assertIsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     from("netty4:tcp://localhost:{{port}}?sync=false").to("log:result").to("mock:result").     from("direct:nettyCall").to("netty4:tcp://localhost:{{port}}?sync=false&disconnect=true&workerCount=1").     from("direct:chainedCalls").to("direct:nettyCall").to("direct:nettyCall"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4:tcp://localhost:{{port}}?sync=false").to("log:result").to("mock:result").             from("direct:nettyCall").to("netty4:tcp://localhost:{{port}}?sync=false&disconnect=true&workerCount=1").             from("direct:chainedCalls").to("direct:nettyCall").to("direct:nettyCall").         }     }. }
