commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void initChannel(Channel channel) throws Exception {     channel.pipeline().addLast(new UdpHandler()).     channel.pipeline().addLast(new ContentHandler()). }
false;public;0;13;;public void createNettyUdpReceiver() {     group = new NioEventLoopGroup().     bootstrap = new Bootstrap().     bootstrap.group(group).channel(NioDatagramChannel.class).handler(new ChannelInitializer<Channel>() {          @Override         protected void initChannel(Channel channel) throws Exception {             channel.pipeline().addLast(new UdpHandler()).             channel.pipeline().addLast(new ContentHandler()).         }     }).localAddress(new InetSocketAddress(getPort())). }
false;public;0;3;;public void bind() {     bootstrap.bind().syncUninterruptibly(). }
false;public;0;3;;public void stop() {     group.shutdownGracefully().syncUninterruptibly(). }
false;public;0;11;;@Test public void sendConnectionlessUdp() throws Exception {     createNettyUdpReceiver().     bind().     for (int i = 0. i < SEND_COUNT. ++i) {         template.sendBody("direct:in", SEND_STRING).     }     stop().     assertTrue("We should have received some datagrams", receivedCount > 0). }
false;public;0;12;;@Test public void sendWithoutReceiver() throws Exception {     int exceptionCount = 0.     for (int i = 0. i < SEND_COUNT. ++i) {         try {             template.sendBody("direct:in", SEND_STRING).         } catch (Exception ex) {             ++exceptionCount.         }     }     assertEquals("No exception should occur", 0, exceptionCount). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:in").to("netty4:udp://localhost:{{port}}?sync=false&textline=true&udpConnectionlessSending=true"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").to("netty4:udp://localhost:{{port}}?sync=false&textline=true&udpConnectionlessSending=true").         }     }. }
false;protected;3;4;;@Override protected void decode(ChannelHandlerContext channelHandlerContext, DatagramPacket datagramPacket, List<Object> objects) throws Exception {     objects.add(datagramPacket.content().toString(CharsetUtil.UTF_8)). }
false;protected;2;4;;@Override protected void channelRead0(ChannelHandlerContext channelHandlerContext, String s) throws Exception {     ++receivedCount. }
