commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSynchronous() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     String reply = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", reply).     assertMockEndpointsSatisfied().     assertTrue("Should use same threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;23;;@Override public void configure() throws Exception {     from("direct:start").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&synchronous=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:result").     from("netty4:tcp://localhost:{{port}}?textline=true&sync=true&synchronous=true").validate(body().isInstanceOf(String.class)).transform(body().regexReplaceAll("Hello", "Bye")). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("netty4:tcp://localhost:{{port}}?textline=true&sync=true&synchronous=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:result").             from("netty4:tcp://localhost:{{port}}?textline=true&sync=true&synchronous=true").validate(body().isInstanceOf(String.class)).transform(body().regexReplaceAll("Hello", "Bye")).         }     }. }
