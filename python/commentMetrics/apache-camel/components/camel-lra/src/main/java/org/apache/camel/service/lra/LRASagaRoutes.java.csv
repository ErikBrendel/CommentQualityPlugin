commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Override public void configure() throws Exception {     rest(sagaService.getLocalParticipantContextPath()).put(PARTICIPANT_PATH_COMPENSATE).route().id("lra-compensation").process(this::verifyRequest).choice().when(header(URL_COMPENSATION_KEY).isNotNull()).toD("header." + URL_COMPENSATION_KEY).end().     rest(sagaService.getLocalParticipantContextPath()).put(PARTICIPANT_PATH_COMPLETE).route().id("lra-completion").process(this::verifyRequest).choice().when(header(URL_COMPLETION_KEY).isNotNull()).toD("header." + URL_COMPLETION_KEY).end(). }
true;private;1;21;/**  * Check if the request is pointing to an allowed URI to prevent unauthorized remote uri invocation  */ ;/**  * Check if the request is pointing to an allowed URI to prevent unauthorized remote uri invocation  */ private void verifyRequest(Exchange exchange) {     if (exchange.getIn().getHeader(Exchange.SAGA_LONG_RUNNING_ACTION) == null) {         throw new IllegalArgumentException("Missing " + Exchange.SAGA_LONG_RUNNING_ACTION + " header in received request").     }     Set<String> usedURIs = new HashSet<>().     String compensationURI = exchange.getIn().getHeader(URL_COMPENSATION_KEY, String.class).     if (compensationURI != null) {         usedURIs.add(compensationURI).     }     String completionURI = exchange.getIn().getHeader(URL_COMPLETION_KEY, String.class).     if (completionURI != null) {         usedURIs.add(completionURI).     }     for (String uri : usedURIs) {         if (!sagaService.getRegisteredURIs().contains(uri)) {             throw new IllegalArgumentException("URI " + uri + " is not allowed").         }     } }
