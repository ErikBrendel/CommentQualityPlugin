commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public CompletableFuture<URL> newLRA() {     CompletableFuture<Response> future = new CompletableFuture<>().     target.path(COORDINATOR_PATH_START).request().async().post(Entity.text(""), callbackToCompletableFuture(future)).     return future.thenApply(res -> {         URL lraURL = toURL(res.getHeaders().getFirst(Exchange.SAGA_LONG_RUNNING_ACTION)).         if (lraURL == null) {             throw new IllegalStateException("Cannot obtain LRA id from LRA coordinator").         }         return lraURL.     }). }
false;public;2;42;;public CompletableFuture<Void> join(URL lra, LRASagaStep step) {     return CompletableFuture.supplyAsync(() -> {         LRAUrlBuilder participantBaseUrl = new LRAUrlBuilder().host(sagaService.getLocalParticipantUrl()).path(sagaService.getLocalParticipantContextPath()).options(step.getOptions()).compensation(step.getCompensation()).completion(step.getCompletion()).         String compensationURL = participantBaseUrl.path(PARTICIPANT_PATH_COMPENSATE).build().         String completionURL = participantBaseUrl.path(PARTICIPANT_PATH_COMPLETE).build().         StringBuilder link = new StringBuilder().         link.append('<').append(compensationURL).append('>').append(". rel=compensate").         link.append(',').         link.append('<').append(completionURL).append('>').append(". rel=complete").         WebTarget joinTarget = client.target(lra.toString()).         if (step.getTimeoutInMilliseconds().isPresent()) {             joinTarget = joinTarget.queryParam(HEADER_TIME_LIMIT, step.getTimeoutInMilliseconds().get()).         }         CompletableFuture<Response> future = new CompletableFuture<>().         joinTarget.request().header(HEADER_LINK, link.toString()).header(Exchange.SAGA_LONG_RUNNING_ACTION, lra).async().put(Entity.entity(link.toString(), MediaType.TEXT_PLAIN), callbackToCompletableFuture(future)).         return future.     }, sagaService.getExecutorService()).thenCompose(Function.identity()).thenApply(response -> {         if (response.getStatus() != Response.Status.OK.getStatusCode()) {             throw new RuntimeCamelException("Cannot join LRA").         }         return null.     }). }
false;public;1;16;;public CompletableFuture<Void> complete(URL lra) {     CompletableFuture<Response> future = new CompletableFuture<>().     client.target(lra.toString()).path(COORDINATOR_PATH_CLOSE).request().async().put(Entity.entity("", MediaType.TEXT_PLAIN), callbackToCompletableFuture(future)).     return future.thenApply(response -> {         if (response.getStatus() != Response.Status.OK.getStatusCode()) {             throw new RuntimeCamelException("Cannot complete LRA").         }         return null.     }). }
false;public;1;16;;public CompletableFuture<Void> compensate(URL lra) {     CompletableFuture<Response> future = new CompletableFuture<>().     client.target(lra.toString()).path(COORDINATOR_PATH_CANCEL).request().async().put(Entity.entity("", MediaType.TEXT_PLAIN), callbackToCompletableFuture(future)).     return future.thenApply(response -> {         if (response.getStatus() != Response.Status.OK.getStatusCode()) {             throw new RuntimeCamelException("Cannot compensate LRA").         }         return null.     }). }
false;public;1;4;;@Override public void completed(Response response) {     future.complete(response). }
false;public;1;4;;@Override public void failed(Throwable throwable) {     future.completeExceptionally(throwable). }
false;private;1;13;;private InvocationCallback<Response> callbackToCompletableFuture(CompletableFuture<Response> future) {     return new InvocationCallback<Response>() {          @Override         public void completed(Response response) {             future.complete(response).         }          @Override         public void failed(Throwable throwable) {             future.completeExceptionally(throwable).         }     }. }
false;private;1;14;;private URL toURL(Object url) {     if (url == null) {         return null.     }     if (url instanceof URL) {         return URL.class.cast(url).     }     try {         return new URL(url.toString()).     } catch (Exception ex) {         throw new RuntimeCamelException(ex).     } }
