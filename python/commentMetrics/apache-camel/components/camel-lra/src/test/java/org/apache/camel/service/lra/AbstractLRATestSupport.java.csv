commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void getActiveLRAs() throws IOException {     this.activeLRAs = getNumberOfActiveLRAs(). }
false;public;0;4;;@After public void checkActiveLRAs() throws IOException {     Assert.assertEquals("Some LRA have been left pending", activeLRAs, getNumberOfActiveLRAs()). }
false;public;0;5;;@Override public void configure() throws Exception {     restConfiguration().port(getServerPort()). }
false;protected;0;16;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addService(createLRASagaService()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().port(getServerPort()).         }     }).     return context. }
false;protected;0;6;;protected LRASagaService createLRASagaService() {     LRASagaService sagaService = new LRASagaService().     sagaService.setCoordinatorUrl(getCoordinatorURL()).     sagaService.setLocalParticipantUrl("http://localhost:" + getServerPort()).     return sagaService. }
false;protected;0;12;;protected int getNumberOfActiveLRAs() throws IOException {     Client client = ClientBuilder.newClient().     Response response = client.target(getCoordinatorURL() + "/lra-coordinator").request().accept("application/json").get().     ObjectMapper mapper = new ObjectMapper().     JsonNode lras = mapper.readTree(InputStream.class.cast(response.getEntity())).     return lras.size(). }
false;private;0;7;;private String getCoordinatorURL() {     String url = System.getenv("LRA_COORDINATOR_URL").     if (url == null) {         throw new IllegalStateException("Cannot run test: environment variable LRA_COORDINATOR_URL is missing").     }     return url. }
false;protected;0;6;;protected int getServerPort() {     if (serverPort == null) {         serverPort = AvailablePortFinder.getNextAvailable().     }     return serverPort. }
