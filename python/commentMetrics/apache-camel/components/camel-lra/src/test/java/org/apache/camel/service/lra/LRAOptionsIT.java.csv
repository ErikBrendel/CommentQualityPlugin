commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testHeaderForwardedToComplete() throws Exception {     MockEndpoint complete = getMockEndpoint("mock:complete").     complete.expectedMessageCount(1).     complete.expectedHeaderReceived("id", "myheader").     complete.expectedHeaderReceived("name", "Nicola").     complete.expectedMessagesMatches(ex -> ex.getIn().getHeader(Exchange.SAGA_LONG_RUNNING_ACTION) != null).     template.sendBodyAndHeader("direct:workflow", "Hello", "myname", "Nicola").     complete.assertIsSatisfied(). }
false;public;0;18;;@Test public void testHeaderForwardedToCompensate() throws Exception {     MockEndpoint compensate = getMockEndpoint("mock:compensate").     compensate.expectedMessageCount(1).     compensate.expectedHeaderReceived("id", "myheader").     compensate.expectedHeaderReceived("name", "Nicola").     compensate.expectedMessagesMatches(ex -> ex.getIn().getHeader(Exchange.SAGA_LONG_RUNNING_ACTION) != null).     try {         template.sendBodyAndHeader("direct:workflow", "compensate", "myname", "Nicola").         Assert.fail("Should throw an exception").     } catch (Exception ex) {     // OK     }     compensate.assertIsSatisfied(). }
false;public;0;4;;@Test(expected = RuntimeCamelException.class) public void testRouteDoesNotHangOnOptionError() throws Exception {     template.sendBody("direct:wrong-expression", "Hello"). }
false;public;0;25;;@Override public void configure() throws Exception {     from("direct:workflow").saga().option("id", constant("myheader")).option("name", header("myname")).completion("mock:complete").compensation("mock:compensate").choice().when(body().isEqualTo("compensate")).process(ex -> {         throw new RuntimeException("forced compensate").     }).end().setHeader("myname", constant("TryToOverride")).setHeader("name", constant("TryToOverride")).to("mock:endpoint").     from("direct:wrong-expression").saga().option("id", simple("${10 / 0}")).to("log:info"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:workflow").saga().option("id", constant("myheader")).option("name", header("myname")).completion("mock:complete").compensation("mock:compensate").choice().when(body().isEqualTo("compensate")).process(ex -> {                 throw new RuntimeException("forced compensate").             }).end().setHeader("myname", constant("TryToOverride")).setHeader("name", constant("TryToOverride")).to("mock:endpoint").             from("direct:wrong-expression").saga().option("id", simple("${10 / 0}")).to("log:info").         }     }. }
