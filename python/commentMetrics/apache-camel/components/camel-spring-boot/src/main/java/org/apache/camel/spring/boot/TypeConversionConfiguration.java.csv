commented;modifiers;parameterAmount;loc;comment;code
true;;1;5;// bean destruction. And we want Camel to handle the lifecycle. ;// We explicitly declare the destroyMethod to be "" as the Spring @Bean // annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise // and in that case ShutdownableService::shutdown/Service::close // (BaseTypeConverterRegistry extends ServiceSupport) would be used for // bean destruction. And we want Camel to handle the lifecycle. @Bean(destroyMethod = "") // Camel handles the lifecycle of this bean TypeConverter typeConverter(CamelContext camelContext) {     return camelContext.getTypeConverter(). }
false;;2;6;;@Bean SpringTypeConverter springTypeConverter(CamelContext camelContext, ConversionService[] conversionServices) {     SpringTypeConverter springTypeConverter = new SpringTypeConverter(asList(conversionServices)).     camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true).     return springTypeConverter. }
false;;1;9;;@ConditionalOnMissingBean @Bean ConversionService defaultCamelConversionService(ApplicationContext applicationContext) {     DefaultConversionService service = new DefaultConversionService().     for (Converter converter : applicationContext.getBeansOfType(Converter.class).values()) {         service.addConverter(converter).     }     return service. }
