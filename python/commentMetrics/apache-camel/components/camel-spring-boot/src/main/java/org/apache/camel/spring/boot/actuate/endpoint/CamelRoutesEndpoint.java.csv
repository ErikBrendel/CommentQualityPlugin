commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@ReadOperation public List<RouteEndpointInfo> readRoutes() {     return getRoutesInfo(). }
false;public;2;11;;@ReadOperation public Object doReadAction(@Selector String id, @Selector ReadAction action) {     switch(action) {         case DETAIL:             return getRouteDetailsInfo(id).         case INFO:             return getRouteInfo(id).         default:             throw new IllegalArgumentException("Unsupported read action " + action).     } }
false;public;3;32;;@WriteOperation public void doWriteAction(@Selector String id, @Selector WriteAction action, @Nullable TimeInfo timeInfo) {     if (this.properties.isReadOnly()) {         throw new IllegalArgumentException(String.format("Read only: write action %s is not allowed", action)).     }     switch(action) {         case STOP:             stopRoute(id, Optional.ofNullable(timeInfo).flatMap(ti -> Optional.ofNullable(ti.getTimeout())), Optional.of(TimeUnit.SECONDS), Optional.ofNullable(timeInfo).flatMap(ti -> Optional.ofNullable(ti.getAbortAfterTimeout()))).             break.         case START:             startRoute(id).             break.         case RESET:             resetRoute(id).             break.         case SUSPEND:             suspendRoute(id, Optional.ofNullable(timeInfo).flatMap(ti -> Optional.ofNullable(ti.getTimeout())), Optional.of(TimeUnit.SECONDS)).             break.         case RESUME:             resumeRoute(id).             break.         default:             throw new IllegalArgumentException("Unsupported write action " + action).     } }
false;public;1;16;;@WriteOperation public String getRouteDump(@Selector String id) {     if (this.properties.isReadOnly()) {         throw new IllegalArgumentException("Read only: route dump is not permitted in read-only mode").     }     RouteDefinition route = camelContext.adapt(ModelCamelContext.class).getRouteDefinition(id).     if (route != null) {         try {             return ModelHelper.dumpModelAsXml(camelContext, route).         } catch (Exception e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return null. }
false;private;1;8;;private RouteEndpointInfo getRouteInfo(String id) {     Route route = camelContext.getRoute(id).     if (route != null) {         return new RouteEndpointInfo(route).     }     return null. }
false;private;0;5;;private List<RouteEndpointInfo> getRoutesInfo() {     return camelContext.getRoutes().stream().map(RouteEndpointInfo::new).collect(Collectors.toList()). }
false;private;1;8;;private RouteDetailsEndpointInfo getRouteDetailsInfo(String id) {     Route route = camelContext.getRoute(id).     if (route != null) {         return new RouteDetailsEndpointInfo(camelContext, route).     }     return null. }
false;private;1;7;;private void startRoute(String id) {     try {         camelContext.getRouteController().startRoute(id).     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;private;1;13;;private void resetRoute(String id) {     try {         ManagedCamelContext mc = camelContext.getExtension(ManagedCamelContext.class).         if (mc != null) {             ManagedRouteMBean managedRouteMBean = mc.getManagedRoute(id).             if (managedRouteMBean != null) {                 managedRouteMBean.reset(true).             }         }     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;private;4;11;;private void stopRoute(String id, Optional<Long> timeout, Optional<TimeUnit> timeUnit, Optional<Boolean> abortAfterTimeout) {     try {         if (timeout.isPresent()) {             camelContext.getRouteController().stopRoute(id, timeout.get(), timeUnit.orElse(TimeUnit.SECONDS), abortAfterTimeout.orElse(Boolean.TRUE)).         } else {             camelContext.getRouteController().stopRoute(id).         }     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;private;3;11;;private void suspendRoute(String id, Optional<Long> timeout, Optional<TimeUnit> timeUnit) {     try {         if (timeout.isPresent()) {             camelContext.getRouteController().suspendRoute(id, timeout.get(), timeUnit.orElse(TimeUnit.SECONDS)).         } else {             camelContext.getRouteController().suspendRoute(id).         }     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;private;1;7;;private void resumeRoute(String id) {     try {         camelContext.getRouteController().resumeRoute(id).     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String getGroup() {     return group. }
false;public;0;3;;public Map<String, Object> getProperties() {     return properties. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public String getUptime() {     return uptime. }
false;public;0;3;;public long getUptimeMillis() {     return uptimeMillis. }
false;public;0;3;;public String getStatus() {     return status. }
false;public;0;3;;public long getDeltaProcessingTime() {     return deltaProcessingTime. }
false;public;0;3;;public long getExchangesInflight() {     return exchangesInflight. }
false;public;0;3;;public long getExchangesTotal() {     return exchangesTotal. }
false;public;0;3;;public long getExternalRedeliveries() {     return externalRedeliveries. }
false;public;0;3;;public long getFailuresHandled() {     return failuresHandled. }
false;public;0;3;;public String getFirstExchangeCompletedExchangeId() {     return firstExchangeCompletedExchangeId. }
false;public;0;3;;public Date getFirstExchangeCompletedTimestamp() {     return firstExchangeCompletedTimestamp. }
false;public;0;3;;public String getFirstExchangeFailureExchangeId() {     return firstExchangeFailureExchangeId. }
false;public;0;3;;public Date getFirstExchangeFailureTimestamp() {     return firstExchangeFailureTimestamp. }
false;public;0;3;;public String getLastExchangeCompletedExchangeId() {     return lastExchangeCompletedExchangeId. }
false;public;0;3;;public Date getLastExchangeCompletedTimestamp() {     return lastExchangeCompletedTimestamp. }
false;public;0;3;;public String getLastExchangeFailureExchangeId() {     return lastExchangeFailureExchangeId. }
false;public;0;3;;public Date getLastExchangeFailureTimestamp() {     return lastExchangeFailureTimestamp. }
false;public;0;3;;public long getLastProcessingTime() {     return lastProcessingTime. }
false;public;0;3;;public String getLoad01() {     return load01. }
false;public;0;3;;public String getLoad05() {     return load05. }
false;public;0;3;;public String getLoad15() {     return load15. }
false;public;0;3;;public long getMaxProcessingTime() {     return maxProcessingTime. }
false;public;0;3;;public long getMeanProcessingTime() {     return meanProcessingTime. }
false;public;0;3;;public long getMinProcessingTime() {     return minProcessingTime. }
false;public;0;3;;public Long getOldestInflightDuration() {     return oldestInflightDuration. }
false;public;0;3;;public String getOldestInflightExchangeId() {     return oldestInflightExchangeId. }
false;public;0;3;;public long getRedeliveries() {     return redeliveries. }
false;public;0;3;;public long getTotalProcessingTime() {     return totalProcessingTime. }
false;public;0;3;;public RouteError getLastError() {     return lastError. }
false;public;0;3;;public boolean getHasRouteController() {     return hasRouteController. }
false;public;0;3;;public Long getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(Long timeout) {     this.timeout = timeout. }
false;public;0;3;;public Boolean getAbortAfterTimeout() {     return abortAfterTimeout. }
false;public;1;3;;public void setAbortAfterTimeout(Boolean abortAfterTimeout) {     this.abortAfterTimeout = abortAfterTimeout. }
