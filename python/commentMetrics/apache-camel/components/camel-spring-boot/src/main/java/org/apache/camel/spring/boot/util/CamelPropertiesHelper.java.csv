# id;timestamp;commentText;codeText;commentWords;codeWords
CamelPropertiesHelper -> public static void resolvePropertyPlaceholders(CamelContext camelContext, Object target) throws Exception;1547836603;Inspects the given object and resolves any property placeholders from its properties._<p/>_This implementation will check all the getter/setter pairs on this instance and for all the values_(which is a String type) will be property placeholder resolved.__@param camelContext the Camel context_@param target       the object that should have the properties (eg getter/setter) resolved_@throws Exception is thrown if property placeholders was used and there was an error resolving them_@see CamelContext#resolvePropertyPlaceholders(String)_@see org.apache.camel.component.properties.PropertiesComponent;public static void resolvePropertyPlaceholders(CamelContext camelContext, Object target) throws Exception {_        LOG.trace("Resolving property placeholders for: {}", target)___        _        Map<String, Object> properties = new HashMap<>()__        IntrospectionSupport.getProperties(target, properties, null)___        Map<String, Object> changedProperties = new HashMap<>()__        if (!properties.isEmpty()) {_            LOG.trace("There are {} properties on: {}", properties.size(), target)__            _            for (Map.Entry<String, Object> entry : properties.entrySet()) {_                _                String name = entry.getKey()__                Object value = entry.getValue()__                if (value instanceof String) {_                    _                    String text = (String) value__                    text = camelContext.resolvePropertyPlaceholders(text)__                    if (text != value) {_                        _                        boolean changed = IntrospectionSupport.setProperty(camelContext.getTypeConverter(), target, name, text)__                        if (!changed) {_                            throw new IllegalArgumentException("No setter to set property: " + name + " to: " + text + " on: " + target)__                        }_                        changedProperties.put(name, value)__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Changed property [{}] from: {} to: {}", name, value, text)__                        }_                    }_                }_            }_        }_    };inspects,the,given,object,and,resolves,any,property,placeholders,from,its,properties,p,this,implementation,will,check,all,the,getter,setter,pairs,on,this,instance,and,for,all,the,values,which,is,a,string,type,will,be,property,placeholder,resolved,param,camel,context,the,camel,context,param,target,the,object,that,should,have,the,properties,eg,getter,setter,resolved,throws,exception,is,thrown,if,property,placeholders,was,used,and,there,was,an,error,resolving,them,see,camel,context,resolve,property,placeholders,string,see,org,apache,camel,component,properties,properties,component;public,static,void,resolve,property,placeholders,camel,context,camel,context,object,target,throws,exception,log,trace,resolving,property,placeholders,for,target,map,string,object,properties,new,hash,map,introspection,support,get,properties,target,properties,null,map,string,object,changed,properties,new,hash,map,if,properties,is,empty,log,trace,there,are,properties,on,properties,size,target,for,map,entry,string,object,entry,properties,entry,set,string,name,entry,get,key,object,value,entry,get,value,if,value,instanceof,string,string,text,string,value,text,camel,context,resolve,property,placeholders,text,if,text,value,boolean,changed,introspection,support,set,property,camel,context,get,type,converter,target,name,text,if,changed,throw,new,illegal,argument,exception,no,setter,to,set,property,name,to,text,on,target,changed,properties,put,name,value,if,log,is,debug,enabled,log,debug,changed,property,from,to,name,value,text
CamelPropertiesHelper -> public static void resolvePropertyPlaceholders(CamelContext camelContext, Object target) throws Exception;1549619328;Inspects the given object and resolves any property placeholders from its properties._<p/>_This implementation will check all the getter/setter pairs on this instance and for all the values_(which is a String type) will be property placeholder resolved.__@param camelContext the Camel context_@param target       the object that should have the properties (eg getter/setter) resolved_@throws Exception is thrown if property placeholders was used and there was an error resolving them_@see CamelContext#resolvePropertyPlaceholders(String)_@see org.apache.camel.component.properties.PropertiesComponent;public static void resolvePropertyPlaceholders(CamelContext camelContext, Object target) throws Exception {_        LOG.trace("Resolving property placeholders for: {}", target)___        _        Map<String, Object> properties = new HashMap<>()__        IntrospectionSupport.getProperties(target, properties, null)___        Map<String, Object> changedProperties = new HashMap<>()__        if (!properties.isEmpty()) {_            LOG.trace("There are {} properties on: {}", properties.size(), target)__            _            for (Map.Entry<String, Object> entry : properties.entrySet()) {_                _                String name = entry.getKey()__                Object value = entry.getValue()__                if (value instanceof String) {_                    _                    String text = (String) value__                    text = camelContext.resolvePropertyPlaceholders(text)__                    if (text != value) {_                        _                        boolean changed = IntrospectionSupport.setProperty(camelContext.getTypeConverter(), target, name, text)__                        if (!changed) {_                            throw new IllegalArgumentException("No setter to set property: " + name + " to: " + text + " on: " + target)__                        }_                        changedProperties.put(name, value)__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Changed property [{}] from: {} to: {}", name, value, text)__                        }_                    }_                }_            }_        }_    };inspects,the,given,object,and,resolves,any,property,placeholders,from,its,properties,p,this,implementation,will,check,all,the,getter,setter,pairs,on,this,instance,and,for,all,the,values,which,is,a,string,type,will,be,property,placeholder,resolved,param,camel,context,the,camel,context,param,target,the,object,that,should,have,the,properties,eg,getter,setter,resolved,throws,exception,is,thrown,if,property,placeholders,was,used,and,there,was,an,error,resolving,them,see,camel,context,resolve,property,placeholders,string,see,org,apache,camel,component,properties,properties,component;public,static,void,resolve,property,placeholders,camel,context,camel,context,object,target,throws,exception,log,trace,resolving,property,placeholders,for,target,map,string,object,properties,new,hash,map,introspection,support,get,properties,target,properties,null,map,string,object,changed,properties,new,hash,map,if,properties,is,empty,log,trace,there,are,properties,on,properties,size,target,for,map,entry,string,object,entry,properties,entry,set,string,name,entry,get,key,object,value,entry,get,value,if,value,instanceof,string,string,text,string,value,text,camel,context,resolve,property,placeholders,text,if,text,value,boolean,changed,introspection,support,set,property,camel,context,get,type,converter,target,name,text,if,changed,throw,new,illegal,argument,exception,no,setter,to,set,property,name,to,text,on,target,changed,properties,put,name,value,if,log,is,debug,enabled,log,debug,changed,property,from,to,name,value,text
CamelPropertiesHelper -> public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception;1504537429;Sets the properties on the target bean._<p/>_This implementation sets the properties using the following algorithm:_<ul>_<li>Value as reference lookup - If the value uses Camel reference syntax, eg #beanId then the bean is looked up from Registry and set on the target</li>_<li>Value as-is - The value is attempted to be converted to the class type of the bean setter method_ this is for regular types like String, numbers etc</li>_<li>Value as lookup - the bean is looked up from Registry and if there is a bean then its set on the target</li>_</ul>_When an option has been set on the target bean, then its removed from the given properties map. If all the options has been set, then the map will be empty.__@param context        the CamelContext_@param target         the target bean_@param properties     the properties_@param failIfNotSet   whether to fail if an option either does not exists on the target bean or if the option cannot be due no suitable setter methods with the given type_@return <tt>true</tt> if at least one option was configured_@throws IllegalArgumentException is thrown if an option cannot be configured on the bean because there is no suitable setter method and failOnNoSet is true._@throws Exception for any other kind of error;public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception {_        ObjectHelper.notNull(context, "context")__        ObjectHelper.notNull(target, "target")__        ObjectHelper.notNull(properties, "properties")__        boolean rc = false___        Iterator<Map.Entry<String, Object>> it = properties.entrySet().iterator()__        while (it.hasNext()) {_            Map.Entry<String, Object> entry = it.next()__            String name = entry.getKey()__            Object value = entry.getValue()__            String stringValue = value != null ? value.toString() : null__            boolean hit = false__            if (stringValue != null && isReferenceParameter(stringValue)) {_                _                hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__            } else if (value != null) {_                _                try {_                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, value)__                } catch (IllegalArgumentException e) {_                    _                    _                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__                }_            }__            if (hit) {_                _                it.remove()__                rc = true__            } else if (failIfNotSet) {_                throw new IllegalArgumentException("Cannot configure option [" + name + "] with value [" + stringValue_                    + "] as the bean class [" + ObjectHelper.classCanonicalName(target)_                    + "] has no suitable setter method, or not possible to lookup a bean with the id [" + stringValue + "] in Spring Boot registry")__            }_        }__        return rc__    };sets,the,properties,on,the,target,bean,p,this,implementation,sets,the,properties,using,the,following,algorithm,ul,li,value,as,reference,lookup,if,the,value,uses,camel,reference,syntax,eg,bean,id,then,the,bean,is,looked,up,from,registry,and,set,on,the,target,li,li,value,as,is,the,value,is,attempted,to,be,converted,to,the,class,type,of,the,bean,setter,method,this,is,for,regular,types,like,string,numbers,etc,li,li,value,as,lookup,the,bean,is,looked,up,from,registry,and,if,there,is,a,bean,then,its,set,on,the,target,li,ul,when,an,option,has,been,set,on,the,target,bean,then,its,removed,from,the,given,properties,map,if,all,the,options,has,been,set,then,the,map,will,be,empty,param,context,the,camel,context,param,target,the,target,bean,param,properties,the,properties,param,fail,if,not,set,whether,to,fail,if,an,option,either,does,not,exists,on,the,target,bean,or,if,the,option,cannot,be,due,no,suitable,setter,methods,with,the,given,type,return,tt,true,tt,if,at,least,one,option,was,configured,throws,illegal,argument,exception,is,thrown,if,an,option,cannot,be,configured,on,the,bean,because,there,is,no,suitable,setter,method,and,fail,on,no,set,is,true,throws,exception,for,any,other,kind,of,error;public,static,boolean,set,camel,properties,camel,context,context,object,target,map,string,object,properties,boolean,fail,if,not,set,throws,exception,object,helper,not,null,context,context,object,helper,not,null,target,target,object,helper,not,null,properties,properties,boolean,rc,false,iterator,map,entry,string,object,it,properties,entry,set,iterator,while,it,has,next,map,entry,string,object,entry,it,next,string,name,entry,get,key,object,value,entry,get,value,string,string,value,value,null,value,to,string,null,boolean,hit,false,if,string,value,null,is,reference,parameter,string,value,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,else,if,value,null,try,hit,introspection,support,set,property,context,context,get,type,converter,target,name,value,catch,illegal,argument,exception,e,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,if,hit,it,remove,rc,true,else,if,fail,if,not,set,throw,new,illegal,argument,exception,cannot,configure,option,name,with,value,string,value,as,the,bean,class,object,helper,class,canonical,name,target,has,no,suitable,setter,method,or,not,possible,to,lookup,a,bean,with,the,id,string,value,in,spring,boot,registry,return,rc
CamelPropertiesHelper -> public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception;1540108163;Sets the properties on the target bean._<p/>_This implementation sets the properties using the following algorithm:_<ul>_<li>Value as reference lookup - If the value uses Camel reference syntax, eg #beanId then the bean is looked up from Registry and set on the target</li>_<li>Value as-is - The value is attempted to be converted to the class type of the bean setter method_ this is for regular types like String, numbers etc</li>_<li>Value as lookup - the bean is looked up from Registry and if there is a bean then its set on the target</li>_</ul>_When an option has been set on the target bean, then its removed from the given properties map. If all the options has been set, then the map will be empty.__@param context        the CamelContext_@param target         the target bean_@param properties     the properties_@param failIfNotSet   whether to fail if an option either does not exists on the target bean or if the option cannot be due no suitable setter methods with the given type_@return <tt>true</tt> if at least one option was configured_@throws IllegalArgumentException is thrown if an option cannot be configured on the bean because there is no suitable setter method and failOnNoSet is true._@throws Exception for any other kind of error;public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception {_        ObjectHelper.notNull(context, "context")__        ObjectHelper.notNull(target, "target")__        ObjectHelper.notNull(properties, "properties")__        boolean rc = false___        Iterator<Map.Entry<String, Object>> it = properties.entrySet().iterator()__        while (it.hasNext()) {_            Map.Entry<String, Object> entry = it.next()__            String name = entry.getKey()__            Object value = entry.getValue()__            String stringValue = value != null ? value.toString() : null__            boolean hit = false__            if (stringValue != null && isReferenceParameter(stringValue)) {_                _                hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__            } else if (value != null) {_                _                try {_                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, value)__                } catch (IllegalArgumentException e) {_                    _                    _                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__                }_            }__            if (hit) {_                _                it.remove()__                rc = true__            } else if (failIfNotSet) {_                throw new IllegalArgumentException("Cannot configure option [" + name + "] with value [" + stringValue_                    + "] as the bean class [" + ObjectHelper.classCanonicalName(target)_                    + "] has no suitable setter method, or not possible to lookup a bean with the id [" + stringValue + "] in Spring Boot registry")__            }_        }__        return rc__    };sets,the,properties,on,the,target,bean,p,this,implementation,sets,the,properties,using,the,following,algorithm,ul,li,value,as,reference,lookup,if,the,value,uses,camel,reference,syntax,eg,bean,id,then,the,bean,is,looked,up,from,registry,and,set,on,the,target,li,li,value,as,is,the,value,is,attempted,to,be,converted,to,the,class,type,of,the,bean,setter,method,this,is,for,regular,types,like,string,numbers,etc,li,li,value,as,lookup,the,bean,is,looked,up,from,registry,and,if,there,is,a,bean,then,its,set,on,the,target,li,ul,when,an,option,has,been,set,on,the,target,bean,then,its,removed,from,the,given,properties,map,if,all,the,options,has,been,set,then,the,map,will,be,empty,param,context,the,camel,context,param,target,the,target,bean,param,properties,the,properties,param,fail,if,not,set,whether,to,fail,if,an,option,either,does,not,exists,on,the,target,bean,or,if,the,option,cannot,be,due,no,suitable,setter,methods,with,the,given,type,return,tt,true,tt,if,at,least,one,option,was,configured,throws,illegal,argument,exception,is,thrown,if,an,option,cannot,be,configured,on,the,bean,because,there,is,no,suitable,setter,method,and,fail,on,no,set,is,true,throws,exception,for,any,other,kind,of,error;public,static,boolean,set,camel,properties,camel,context,context,object,target,map,string,object,properties,boolean,fail,if,not,set,throws,exception,object,helper,not,null,context,context,object,helper,not,null,target,target,object,helper,not,null,properties,properties,boolean,rc,false,iterator,map,entry,string,object,it,properties,entry,set,iterator,while,it,has,next,map,entry,string,object,entry,it,next,string,name,entry,get,key,object,value,entry,get,value,string,string,value,value,null,value,to,string,null,boolean,hit,false,if,string,value,null,is,reference,parameter,string,value,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,else,if,value,null,try,hit,introspection,support,set,property,context,context,get,type,converter,target,name,value,catch,illegal,argument,exception,e,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,if,hit,it,remove,rc,true,else,if,fail,if,not,set,throw,new,illegal,argument,exception,cannot,configure,option,name,with,value,string,value,as,the,bean,class,object,helper,class,canonical,name,target,has,no,suitable,setter,method,or,not,possible,to,lookup,a,bean,with,the,id,string,value,in,spring,boot,registry,return,rc
CamelPropertiesHelper -> public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception;1547836603;Sets the properties on the target bean._<p/>_This implementation sets the properties using the following algorithm:_<ul>_<li>Value as reference lookup - If the value uses Camel reference syntax, eg #beanId then the bean is looked up from Registry and set on the target</li>_<li>Value as-is - The value is attempted to be converted to the class type of the bean setter method_ this is for regular types like String, numbers etc</li>_<li>Value as lookup - the bean is looked up from Registry and if there is a bean then its set on the target</li>_</ul>_When an option has been set on the target bean, then its removed from the given properties map. If all the options has been set, then the map will be empty.__@param context        the CamelContext_@param target         the target bean_@param properties     the properties_@param failIfNotSet   whether to fail if an option either does not exists on the target bean or if the option cannot be due no suitable setter methods with the given type_@return <tt>true</tt> if at least one option was configured_@throws IllegalArgumentException is thrown if an option cannot be configured on the bean because there is no suitable setter method and failOnNoSet is true._@throws Exception for any other kind of error;public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception {_        ObjectHelper.notNull(context, "context")__        ObjectHelper.notNull(target, "target")__        ObjectHelper.notNull(properties, "properties")__        boolean rc = false___        Iterator<Map.Entry<String, Object>> it = properties.entrySet().iterator()__        while (it.hasNext()) {_            Map.Entry<String, Object> entry = it.next()__            String name = entry.getKey()__            Object value = entry.getValue()__            String stringValue = value != null ? value.toString() : null__            boolean hit = false__            if (stringValue != null && isReferenceParameter(stringValue)) {_                _                hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__            } else if (value != null) {_                _                try {_                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, value)__                } catch (IllegalArgumentException e) {_                    _                    _                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__                }_            }__            if (hit) {_                _                it.remove()__                rc = true__            } else if (failIfNotSet) {_                throw new IllegalArgumentException("Cannot configure option [" + name + "] with value [" + stringValue_                    + "] as the bean class [" + ObjectHelper.classCanonicalName(target)_                    + "] has no suitable setter method, or not possible to lookup a bean with the id [" + stringValue + "] in Spring Boot registry")__            }_        }__        return rc__    };sets,the,properties,on,the,target,bean,p,this,implementation,sets,the,properties,using,the,following,algorithm,ul,li,value,as,reference,lookup,if,the,value,uses,camel,reference,syntax,eg,bean,id,then,the,bean,is,looked,up,from,registry,and,set,on,the,target,li,li,value,as,is,the,value,is,attempted,to,be,converted,to,the,class,type,of,the,bean,setter,method,this,is,for,regular,types,like,string,numbers,etc,li,li,value,as,lookup,the,bean,is,looked,up,from,registry,and,if,there,is,a,bean,then,its,set,on,the,target,li,ul,when,an,option,has,been,set,on,the,target,bean,then,its,removed,from,the,given,properties,map,if,all,the,options,has,been,set,then,the,map,will,be,empty,param,context,the,camel,context,param,target,the,target,bean,param,properties,the,properties,param,fail,if,not,set,whether,to,fail,if,an,option,either,does,not,exists,on,the,target,bean,or,if,the,option,cannot,be,due,no,suitable,setter,methods,with,the,given,type,return,tt,true,tt,if,at,least,one,option,was,configured,throws,illegal,argument,exception,is,thrown,if,an,option,cannot,be,configured,on,the,bean,because,there,is,no,suitable,setter,method,and,fail,on,no,set,is,true,throws,exception,for,any,other,kind,of,error;public,static,boolean,set,camel,properties,camel,context,context,object,target,map,string,object,properties,boolean,fail,if,not,set,throws,exception,object,helper,not,null,context,context,object,helper,not,null,target,target,object,helper,not,null,properties,properties,boolean,rc,false,iterator,map,entry,string,object,it,properties,entry,set,iterator,while,it,has,next,map,entry,string,object,entry,it,next,string,name,entry,get,key,object,value,entry,get,value,string,string,value,value,null,value,to,string,null,boolean,hit,false,if,string,value,null,is,reference,parameter,string,value,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,else,if,value,null,try,hit,introspection,support,set,property,context,context,get,type,converter,target,name,value,catch,illegal,argument,exception,e,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,if,hit,it,remove,rc,true,else,if,fail,if,not,set,throw,new,illegal,argument,exception,cannot,configure,option,name,with,value,string,value,as,the,bean,class,object,helper,class,canonical,name,target,has,no,suitable,setter,method,or,not,possible,to,lookup,a,bean,with,the,id,string,value,in,spring,boot,registry,return,rc
CamelPropertiesHelper -> public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception;1549619328;Sets the properties on the target bean._<p/>_This implementation sets the properties using the following algorithm:_<ul>_<li>Value as reference lookup - If the value uses Camel reference syntax, eg #beanId then the bean is looked up from Registry and set on the target</li>_<li>Value as-is - The value is attempted to be converted to the class type of the bean setter method_ this is for regular types like String, numbers etc</li>_<li>Value as lookup - the bean is looked up from Registry and if there is a bean then its set on the target</li>_</ul>_When an option has been set on the target bean, then its removed from the given properties map. If all the options has been set, then the map will be empty.__@param context        the CamelContext_@param target         the target bean_@param properties     the properties_@param failIfNotSet   whether to fail if an option either does not exists on the target bean or if the option cannot be due no suitable setter methods with the given type_@return <tt>true</tt> if at least one option was configured_@throws IllegalArgumentException is thrown if an option cannot be configured on the bean because there is no suitable setter method and failOnNoSet is true._@throws Exception for any other kind of error;public static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception {_        ObjectHelper.notNull(context, "context")__        ObjectHelper.notNull(target, "target")__        ObjectHelper.notNull(properties, "properties")__        boolean rc = false___        Iterator<Map.Entry<String, Object>> it = properties.entrySet().iterator()__        while (it.hasNext()) {_            Map.Entry<String, Object> entry = it.next()__            String name = entry.getKey()__            Object value = entry.getValue()__            String stringValue = value != null ? value.toString() : null__            boolean hit = false__            if (stringValue != null && isReferenceParameter(stringValue)) {_                _                hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__            } else if (value != null) {_                _                try {_                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, value)__                } catch (IllegalArgumentException e) {_                    _                    _                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, null, stringValue, true)__                }_            }__            if (hit) {_                _                it.remove()__                rc = true__            } else if (failIfNotSet) {_                throw new IllegalArgumentException("Cannot configure option [" + name + "] with value [" + stringValue_                    + "] as the bean class [" + ObjectHelper.classCanonicalName(target)_                    + "] has no suitable setter method, or not possible to lookup a bean with the id [" + stringValue + "] in Spring Boot registry")__            }_        }__        return rc__    };sets,the,properties,on,the,target,bean,p,this,implementation,sets,the,properties,using,the,following,algorithm,ul,li,value,as,reference,lookup,if,the,value,uses,camel,reference,syntax,eg,bean,id,then,the,bean,is,looked,up,from,registry,and,set,on,the,target,li,li,value,as,is,the,value,is,attempted,to,be,converted,to,the,class,type,of,the,bean,setter,method,this,is,for,regular,types,like,string,numbers,etc,li,li,value,as,lookup,the,bean,is,looked,up,from,registry,and,if,there,is,a,bean,then,its,set,on,the,target,li,ul,when,an,option,has,been,set,on,the,target,bean,then,its,removed,from,the,given,properties,map,if,all,the,options,has,been,set,then,the,map,will,be,empty,param,context,the,camel,context,param,target,the,target,bean,param,properties,the,properties,param,fail,if,not,set,whether,to,fail,if,an,option,either,does,not,exists,on,the,target,bean,or,if,the,option,cannot,be,due,no,suitable,setter,methods,with,the,given,type,return,tt,true,tt,if,at,least,one,option,was,configured,throws,illegal,argument,exception,is,thrown,if,an,option,cannot,be,configured,on,the,bean,because,there,is,no,suitable,setter,method,and,fail,on,no,set,is,true,throws,exception,for,any,other,kind,of,error;public,static,boolean,set,camel,properties,camel,context,context,object,target,map,string,object,properties,boolean,fail,if,not,set,throws,exception,object,helper,not,null,context,context,object,helper,not,null,target,target,object,helper,not,null,properties,properties,boolean,rc,false,iterator,map,entry,string,object,it,properties,entry,set,iterator,while,it,has,next,map,entry,string,object,entry,it,next,string,name,entry,get,key,object,value,entry,get,value,string,string,value,value,null,value,to,string,null,boolean,hit,false,if,string,value,null,is,reference,parameter,string,value,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,else,if,value,null,try,hit,introspection,support,set,property,context,context,get,type,converter,target,name,value,catch,illegal,argument,exception,e,hit,introspection,support,set,property,context,context,get,type,converter,target,name,null,string,value,true,if,hit,it,remove,rc,true,else,if,fail,if,not,set,throw,new,illegal,argument,exception,cannot,configure,option,name,with,value,string,value,as,the,bean,class,object,helper,class,canonical,name,target,has,no,suitable,setter,method,or,not,possible,to,lookup,a,bean,with,the,id,string,value,in,spring,boot,registry,return,rc
