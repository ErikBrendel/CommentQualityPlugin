commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanFactory(BeanFactory factory) throws BeansException {     beanFactory = factory. }
false;public;0;5;;@Lazy @Bean(name = "static-service-discovery") public ServiceDiscovery staticServiceDiscovery() {     return createStaticServiceDiscovery(configurationProperties.getServiceDiscovery()). }
false;public;1;12;;@Lazy @Bean(name = "service-discovery") public CamelCloudServiceDiscovery serviceDiscovery(List<ServiceDiscovery> serviceDiscoveryList) throws NoTypeConversionAvailableException {     String cacheTimeout = configurationProperties.getServiceDiscovery().getCacheTimeout().     Long timeout = null.     if (cacheTimeout != null) {         timeout = camelContext.getTypeConverter().mandatoryConvertTo(Long.class, timeout).     }     return new CamelCloudServiceDiscovery(timeout, serviceDiscoveryList). }
false;public;0;12;;@PostConstruct public void addServiceDiscoveryConfigurations() {     if (!(beanFactory instanceof ConfigurableBeanFactory)) {         LOGGER.warn("BeanFactory is not of type ConfigurableBeanFactory").         return.     }     final ConfigurableBeanFactory factory = (ConfigurableBeanFactory) beanFactory.     configurationProperties.getServiceDiscovery().getConfigurations().entrySet().stream().forEach(entry -> registerBean(factory, entry.getKey(), entry.getValue())). }
false;private;3;6;;// ******************************* // Helper // ******************************* private void registerBean(ConfigurableBeanFactory factory, String name, CamelCloudConfigurationProperties.ServiceDiscoveryConfiguration configuration) {     factory.registerSingleton(name, createStaticServiceDiscovery(configuration)). }
false;private;1;10;;private ServiceDiscovery createStaticServiceDiscovery(CamelCloudConfigurationProperties.ServiceDiscoveryConfiguration configuration) {     StaticServiceDiscovery staticServiceDiscovery = new StaticServiceDiscovery().     Map<String, List<String>> services = configuration.getServices().     for (Map.Entry<String, List<String>> entry : services.entrySet()) {         staticServiceDiscovery.addServers(entry.getKey(), entry.getValue()).     }     return staticServiceDiscovery. }
