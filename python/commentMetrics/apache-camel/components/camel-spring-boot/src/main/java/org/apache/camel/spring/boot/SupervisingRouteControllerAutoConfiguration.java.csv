commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Bean @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) @ConditionalOnMissingBean public RouteController routeController() {     SupervisingRouteController controller = new SupervisingRouteController().     // Initial delay     Optional.ofNullable(configuration.getInitialDelay()).map(TimePatternConverter::toMilliSeconds).ifPresent(controller::setInitialDelay).     // Filter list     controller.setFilters(filters).     // Back off     controller.setDefaultBackOff(configureBackOff(Optional.empty(), configuration.getDefaultBackOff())).     for (Map.Entry<String, RouteConfiguration> entry : configuration.getRoutes().entrySet()) {         final RouteConfiguration cfg = entry.getValue().         final Optional<BackOff> defaultBackOff = Optional.ofNullable(controller.getDefaultBackOff()).         if (!cfg.isSupervised()) {             // Mark this route as excluded from supervisor             controller.addFilter(new SupervisingRouteControllerFilters.BlackList(entry.getKey())).         } else {             // configure the route             controller.setBackOff(entry.getKey(), configureBackOff(defaultBackOff, cfg.getBackOff())).         }     }     return controller. }
false;private;2;11;;private BackOff configureBackOff(Optional<BackOff> template, BackOffConfiguration conf) {     final BackOff.Builder builder = template.map(BackOff::builder).orElseGet(BackOff::builder).     Optional.ofNullable(conf.getDelay()).map(TimePatternConverter::toMilliSeconds).ifPresent(builder::delay).     Optional.ofNullable(conf.getMaxDelay()).map(TimePatternConverter::toMilliSeconds).ifPresent(builder::maxDelay).     Optional.ofNullable(conf.getMaxElapsedTime()).map(TimePatternConverter::toMilliSeconds).ifPresent(builder::maxElapsedTime).     Optional.ofNullable(conf.getMaxAttempts()).ifPresent(builder::maxAttempts).     Optional.ofNullable(conf.getMultiplier()).ifPresent(builder::multiplier).     return builder.build(). }
