# id;timestamp;commentText;codeText;commentWords;codeWords
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1433256775;Default consumer template for the bootstrapped Camel context.;@Bean_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1447227332;Default consumer template for the bootstrapped Camel context.;@Bean_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1451039717;Default consumer template for the bootstrapped Camel context.;@Bean_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1433256775;Default producer template for the bootstrapped Camel context.;@Bean_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1447227332;Default producer template for the bootstrapped Camel context.;@Bean_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1451039717;Default producer template for the bootstrapped Camel context.;@Bean_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496001378;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496217571;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496396355;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496831837;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496942557;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1498120054;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1498552037;Default consumer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1499239702;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1500560411;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1501008447;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1501164628;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1501322381;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1504722046;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1505925729;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1506521818;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1508138292;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1508138808;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1510556404;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1516971295;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1518264301;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1520616475;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1524063178;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1525426048;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1527674661;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1527674663;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1528374634;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1532545815;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108157;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108163;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108165;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108165;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540472504;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ConsumerTemplate.class)     @Lazy     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1551167777;Default consumer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ConsumerTemplate.class)_    @Lazy_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        _        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,consumer,template,class,lazy,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1459342589;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1459418923;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1460442064;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1460612302;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1466491462;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1467375726;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1467380784;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1467386507;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1470048798;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1472665438;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1472749529;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1482173378;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1482243872;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1485104803;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,producer,template,config,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496001378;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496217571;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496396355;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496831837;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1496942557;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1498120054;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1498552037;Default producer template for the bootstrapped Camel context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1501322381;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1504722046;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1505925729;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1506521818;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1508138292;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1508138808;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1510556404;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1516971295;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1518264301;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1520616475;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1524063178;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1525426048;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1527674661;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1527674663;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1528374634;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1532545815;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1540108157;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1540108163;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1540108165;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1540108165;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1540472504;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(FluentProducerTemplate.class)     @Lazy     FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,                                                  CamelConfigurationProperties config) throws Exception;1551167777;Default fluent producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(FluentProducerTemplate.class)_    @Lazy_    FluentProducerTemplate fluentProducerTemplate(CamelContext camelContext,_                                                 CamelConfigurationProperties config) throws Exception {_        final FluentProducerTemplate fluentProducerTemplate = camelContext.createFluentProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(fluentProducerTemplate)__        return fluentProducerTemplate__    };default,fluent,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,fluent,producer,template,class,lazy,fluent,producer,template,fluent,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,fluent,producer,template,fluent,producer,template,camel,context,create,fluent,producer,template,config,get,producer,template,cache,size,camel,context,add,service,fluent,producer,template,return,fluent,producer,template
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1433256775;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1447227332;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1451039717;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1455010208;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420038179;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420142059;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420142491;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420212927;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420480649;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420481578;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1421750589;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1421753147;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1422531195;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1422534655;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1424036948;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1425325049;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1425325221;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1425502895;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1427090237;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1427105070;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1498552037;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1499239702;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1500560411;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1501008447;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1501164628;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1501322381;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1504722046;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1505925729;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1506521818;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1508138292;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1508138808;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1510556404;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1516971295;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1518264301;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1520616475;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1524063178;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1525426048;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1527674661;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1527674663;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1528374634;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1532545815;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1540108157;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1540108163;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1540108165;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1540108165;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1540472504;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config) throws Exception;1551167777;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        return doConfigureCamelContext(applicationContext, camelContext, config)__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,return,do,configure,camel,context,application,context,camel,context,config
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1420038179;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1420481578;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1421750589;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1421753147;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1422531195;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName()!=null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1422534655;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1424036948;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1425325049;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1425325221;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1425502895;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1427090237;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties);1427105070;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (configurationProperties.getName() != null) {_            ((SpringCamelContext) camelContext).setName(configurationProperties.getName())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,configuration,properties,get,name,null,spring,camel,context,camel,context,set,name,configuration,properties,get,name,return,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1467380784;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1467386507;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1470048798;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1472665438;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1472749529;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1482173378;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1482243872;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1485104803;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1489491981;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1490687176;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1491919462;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1496001378;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1496217571;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1496396355;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1496831837;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1496942557;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext);1498120054;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate() throws Exception;1415211488;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate() throws Exception {_        return camelContext().createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,throws,exception,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate() throws Exception;1415264660;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate() throws Exception {_        return camelContext().createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,throws,exception,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean     ConsumerTemplate consumerTemplate() throws Exception;1415265700;Default consumer template for the bootstrapped Camel context.;@Bean_    ConsumerTemplate consumerTemplate() throws Exception {_        return camelContext().createConsumerTemplate(configurationProperties.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,consumer,template,consumer,template,throws,exception,return,camel,context,create,consumer,template,configuration,properties,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1504722046;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1505925729;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1506521818;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1508138292;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1508138808;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1510556404;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1516971295;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1518264301;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1520616475;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1524063178;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1525426048;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1527674661;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1527674663;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1528374634;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1532545815;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1540108157;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1540108163;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1540108165;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1540108165;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1540472504;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(name = "xmlCamelContextConfigurer")     XmlCamelContextConfigurer springBootCamelContextConfigurer();1551167777;Allows to do custom configuration when running XML based Camel in Spring Boot;@Bean(name = "xmlCamelContextConfigurer")_    XmlCamelContextConfigurer springBootCamelContextConfigurer() {_        return new SpringBootXmlCamelContextConfigurer()__    };allows,to,do,custom,configuration,when,running,xml,based,camel,in,spring,boot;bean,name,xml,camel,context,configurer,xml,camel,context,configurer,spring,boot,camel,context,configurer,return,new,spring,boot,xml,camel,context,configurer
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1459342589;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1459418923;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1460442064;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1460612302;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1466491462;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1467375726;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1467380784;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1467386507;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1470048798;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1472665438;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1472749529;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1482173378;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1482243872;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config);1485104803;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) {_        return camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,return,camel,context,create,consumer,template,config,get,consumer,template,cache,size
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1499239702;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1500560411;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1501008447;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1501164628;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1501322381;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1504722046;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1505925729;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1506521818;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1508138292;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1508138808;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1510556404;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1516971295;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1518264301;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1520616475;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1524063178;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1525426048;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1527674661;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1527674663;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1528374634;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1532545815;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108157;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108163;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108165;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540108165;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1540472504;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(ProducerTemplate.class)     @Lazy     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1551167777;Default producer template for the bootstrapped Camel context._Create the bean lazy as it should only be created if its in-use.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(ProducerTemplate.class)_    @Lazy_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        _        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context,create,the,bean,lazy,as,it,should,only,be,created,if,its,in,use;bean,destroy,method,conditional,on,missing,bean,producer,template,class,lazy,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1459342589;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1459418923;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        camelContext.setStreamCaching(config.isStreamCaching())__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1460442064;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        camelContext.setStreamCaching(config.isStreamCaching())__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1460612302;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        camelContext.setStreamCaching(config.isStreamCaching())__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1466491462;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        camelContext.setStreamCaching(config.isStreamCaching())__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1467375726;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        camelContext.setStreamCaching(config.isStreamCaching())__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1467380784;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        camelContext.setStreamCaching(config.isStreamCaching())__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1467386507;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setTracing(config.isTracing())__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,tracing,config,is,tracing,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1470048798;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1472665438;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1472749529;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1482173378;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1482243872;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,properties,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1485104803;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1489491981;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1490687176;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1491919462;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)__        SpringCamelContext.setNoStart(true)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,spring,camel,context,set,no,start,true,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1489491981;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1490687176;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ProducerTemplate.class)     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1491919462;Default producer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ProducerTemplate.class)_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ProducerTemplate producerTemplate = camelContext.createProducerTemplate(config.getProducerTemplateCacheSize())__        camelContext.addService(producerTemplate)__        return producerTemplate__    };default,producer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,producer,template,class,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,producer,template,producer,template,camel,context,create,producer,template,config,get,producer,template,cache,size,camel,context,add,service,producer,template,return,producer,template
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1496001378;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1496217571;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1496396355;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1496831837;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1496942557;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean(destroyMethod = "")     @ConditionalOnMissingBean(CamelContext.class)     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties config);1498120054;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.;@Bean(destroyMethod = "")_    @ConditionalOnMissingBean(CamelContext.class)_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties config) {__        if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {_            Environment env = applicationContext.getEnvironment()__            if (env instanceof ConfigurableEnvironment) {_                MutablePropertySources sources = ((ConfigurableEnvironment) env).getPropertySources()__                if (sources != null) {_                    if (!sources.contains("camel-file-configuration")) {_                        sources.addFirst(new FilePropertySource("camel-file-configuration", applicationContext, config.getFileConfigurations()))__                    }_                }_            }_        }__        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!config.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (config.getName() != null) {_            ((SpringCamelContext) camelContext).setName(config.getName())__        }__        if (config.getShutdownTimeout() > 0) {_            camelContext.getShutdownStrategy().setTimeout(config.getShutdownTimeout())__        }_        camelContext.getShutdownStrategy().setSuppressLoggingOnTimeout(config.isShutdownSuppressLoggingOnTimeout())__        camelContext.getShutdownStrategy().setShutdownNowOnTimeout(config.isShutdownNowOnTimeout())__        camelContext.getShutdownStrategy().setShutdownRoutesInReverseOrder(config.isShutdownRoutesInReverseOrder())__        camelContext.getShutdownStrategy().setLogInflightExchangesOnTimeout(config.isShutdownLogInflightExchangesOnTimeout())___        if (config.getLogDebugMaxChars() > 0) {_            camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "" + config.getLogDebugMaxChars())__        }__        _        camelContext.setStreamCaching(config.isStreamCachingEnabled())__        camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules())__        camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize())__        camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping())__        camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper())__        if (config.getStreamCachingSpoolDirectory() != null) {_            camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory())__        }_        if (config.getStreamCachingSpoolThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold())__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {_            StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit__            if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed__            } else if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {_                limit = StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max__            } else {_                throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max")__            }_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit)__        }_        if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {_            camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold())__        }__        camelContext.setMessageHistory(config.isMessageHistory())__        camelContext.setLogMask(config.isLogMask())__        camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody())__        camelContext.setHandleFault(config.isHandleFault())__        camelContext.setAutoStartup(config.isAutoStartup())__        camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage())__        camelContext.setUseBreadcrumb(config.isUseBreadcrumb())__        camelContext.setUseDataType(config.isUseDataType())__        camelContext.setUseMDCLogging(config.isUseMDCLogging())__        camelContext.setLoadTypeConverters(config.isLoadTypeConverters())___        if (camelContext.getManagementStrategy().getManagementAgent() != null) {_            camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled())__            camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel())__            camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern())__            camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector())__        }__        camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver())___        _        camelContext.setTracing(config.isTracing())__        if (camelContext.getDefaultTracer() instanceof Tracer) {_            Tracer tracer = (Tracer) camelContext.getDefaultTracer()__            if (tracer.getDefaultTraceFormatter() != null) {_                DefaultTraceFormatter formatter = tracer.getDefaultTraceFormatter()__                if (config.getTracerFormatterBreadCrumbLength() != null) {_                    formatter.setBreadCrumbLength(config.getTracerFormatterBreadCrumbLength())__                }_                if (config.getTracerFormatterMaxChars() != null) {_                    formatter.setMaxChars(config.getTracerFormatterMaxChars())__                }_                if (config.getTracerFormatterNodeLength() != null) {_                    formatter.setNodeLength(config.getTracerFormatterNodeLength())__                }_                formatter.setShowBody(config.isTraceFormatterShowBody())__                formatter.setShowBodyType(config.isTracerFormatterShowBodyType())__                formatter.setShowBreadCrumb(config.isTraceFormatterShowBreadCrumb())__                formatter.setShowException(config.isTraceFormatterShowException())__                formatter.setShowExchangeId(config.isTraceFormatterShowExchangeId())__                formatter.setShowExchangePattern(config.isTraceFormatterShowExchangePattern())__                formatter.setShowHeaders(config.isTraceFormatterShowHeaders())__                formatter.setShowNode(config.isTraceFormatterShowNode())__                formatter.setShowProperties(config.isTraceFormatterShowProperties())__                formatter.setShowRouteId(config.isTraceFormatterShowRouteId())__                formatter.setShowShortExchangeId(config.isTraceFormatterShowShortExchangeId())__            }_        }__        if (config.getXmlRoutesReloadDirectory() != null) {_            ReloadStrategy reload = new FileWatcherReloadStrategy(config.getXmlRoutesReloadDirectory())__            camelContext.setReloadStrategy(reload)__        }__        _        afterPropertiesSet(applicationContext, camelContext)___        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,destroy,method,conditional,on,missing,bean,camel,context,class,camel,context,camel,context,application,context,application,context,camel,configuration,properties,config,if,object,helper,is,not,empty,config,get,file,configurations,environment,env,application,context,get,environment,if,env,instanceof,configurable,environment,mutable,property,sources,sources,configurable,environment,env,get,property,sources,if,sources,null,if,sources,contains,camel,file,configuration,sources,add,first,new,file,property,source,camel,file,configuration,application,context,config,get,file,configurations,camel,context,camel,context,new,spring,camel,context,application,context,if,config,is,jmx,enabled,camel,context,disable,jmx,if,config,get,name,null,spring,camel,context,camel,context,set,name,config,get,name,if,config,get,shutdown,timeout,0,camel,context,get,shutdown,strategy,set,timeout,config,get,shutdown,timeout,camel,context,get,shutdown,strategy,set,suppress,logging,on,timeout,config,is,shutdown,suppress,logging,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,now,on,timeout,config,is,shutdown,now,on,timeout,camel,context,get,shutdown,strategy,set,shutdown,routes,in,reverse,order,config,is,shutdown,routes,in,reverse,order,camel,context,get,shutdown,strategy,set,log,inflight,exchanges,on,timeout,config,is,shutdown,log,inflight,exchanges,on,timeout,if,config,get,log,debug,max,chars,0,camel,context,get,global,options,put,exchange,config,get,log,debug,max,chars,camel,context,set,stream,caching,config,is,stream,caching,enabled,camel,context,get,stream,caching,strategy,set,any,spool,rules,config,is,stream,caching,any,spool,rules,camel,context,get,stream,caching,strategy,set,buffer,size,config,get,stream,caching,buffer,size,camel,context,get,stream,caching,strategy,set,remove,spool,directory,when,stopping,config,is,stream,caching,remove,spool,directory,when,stopping,camel,context,get,stream,caching,strategy,set,spool,chiper,config,get,stream,caching,spool,chiper,if,config,get,stream,caching,spool,directory,null,camel,context,get,stream,caching,strategy,set,spool,directory,config,get,stream,caching,spool,directory,if,config,get,stream,caching,spool,threshold,0,camel,context,get,stream,caching,strategy,set,spool,threshold,config,get,stream,caching,spool,threshold,if,config,get,stream,caching,spool,used,heap,memory,limit,null,stream,caching,strategy,spool,used,heap,memory,limit,limit,if,committed,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,committed,else,if,max,equals,ignore,case,config,get,stream,caching,spool,used,heap,memory,limit,limit,stream,caching,strategy,spool,used,heap,memory,limit,max,else,throw,new,illegal,argument,exception,invalid,option,config,get,stream,caching,spool,used,heap,memory,limit,must,either,be,committed,or,max,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,limit,limit,if,config,get,stream,caching,spool,used,heap,memory,threshold,0,camel,context,get,stream,caching,strategy,set,spool,used,heap,memory,threshold,config,get,stream,caching,spool,used,heap,memory,threshold,camel,context,set,message,history,config,is,message,history,camel,context,set,log,mask,config,is,log,mask,camel,context,set,log,exhausted,message,body,config,is,log,exhausted,message,body,camel,context,set,handle,fault,config,is,handle,fault,camel,context,set,auto,startup,config,is,auto,startup,camel,context,set,allow,use,original,message,config,is,allow,use,original,message,camel,context,set,use,breadcrumb,config,is,use,breadcrumb,camel,context,set,use,data,type,config,is,use,data,type,camel,context,set,use,mdclogging,config,is,use,mdclogging,camel,context,set,load,type,converters,config,is,load,type,converters,if,camel,context,get,management,strategy,get,management,agent,null,camel,context,get,management,strategy,get,management,agent,set,endpoint,runtime,statistics,enabled,config,is,endpoint,runtime,statistics,enabled,camel,context,get,management,strategy,get,management,agent,set,statistics,level,config,get,jmx,management,statistics,level,camel,context,get,management,strategy,get,management,agent,set,management,name,pattern,config,get,jmx,management,name,pattern,camel,context,get,management,strategy,get,management,agent,set,create,connector,config,is,jmx,create,connector,camel,context,set,package,scan,class,resolver,new,fat,jar,package,scan,class,resolver,camel,context,set,tracing,config,is,tracing,if,camel,context,get,default,tracer,instanceof,tracer,tracer,tracer,tracer,camel,context,get,default,tracer,if,tracer,get,default,trace,formatter,null,default,trace,formatter,formatter,tracer,get,default,trace,formatter,if,config,get,tracer,formatter,bread,crumb,length,null,formatter,set,bread,crumb,length,config,get,tracer,formatter,bread,crumb,length,if,config,get,tracer,formatter,max,chars,null,formatter,set,max,chars,config,get,tracer,formatter,max,chars,if,config,get,tracer,formatter,node,length,null,formatter,set,node,length,config,get,tracer,formatter,node,length,formatter,set,show,body,config,is,trace,formatter,show,body,formatter,set,show,body,type,config,is,tracer,formatter,show,body,type,formatter,set,show,bread,crumb,config,is,trace,formatter,show,bread,crumb,formatter,set,show,exception,config,is,trace,formatter,show,exception,formatter,set,show,exchange,id,config,is,trace,formatter,show,exchange,id,formatter,set,show,exchange,pattern,config,is,trace,formatter,show,exchange,pattern,formatter,set,show,headers,config,is,trace,formatter,show,headers,formatter,set,show,node,config,is,trace,formatter,show,node,formatter,set,show,properties,config,is,trace,formatter,show,properties,formatter,set,show,route,id,config,is,trace,formatter,show,route,id,formatter,set,show,short,exchange,id,config,is,trace,formatter,show,short,exchange,id,if,config,get,xml,routes,reload,directory,null,reload,strategy,reload,new,file,watcher,reload,strategy,config,get,xml,routes,reload,directory,camel,context,set,reload,strategy,reload,after,properties,set,application,context,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1424036948;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1425325049;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1425325221;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1425502895;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1427090237;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1427105070;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1433256775;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1447227332;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1451039717;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1455010208;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1459342589;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1459418923;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1460442064;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1460612302;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1466491462;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1467375726;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1467380784;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1467386507;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1470048798;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1472665438;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1472749529;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1482173378;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1482243872;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1485104803;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1489491981;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1490687176;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1491919462;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1496001378;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1496217571;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1496396355;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1496831837;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1496942557;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1498120054;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1498552037;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1499239702;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1500560411;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1501008447;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1501164628;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1501322381;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1504722046;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1505925729;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1506521818;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1508138292;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1508138808;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1510556404;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1516971295;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1518264301;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1520616475;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1524063178;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1525426048;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1527674661;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1527674663;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1528374634;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1532545815;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1540108157;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1540108163;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1540108165;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1540108165;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1540472504;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext);1551167777;Camel post processor - required to support Camel annotations.;@Bean_    CamelBeanPostProcessor camelBeanPostProcessor(ApplicationContext applicationContext) {_        CamelBeanPostProcessor processor = new CamelBeanPostProcessor()__        processor.setApplicationContext(applicationContext)__        return processor__    };camel,post,processor,required,to,support,camel,annotations;bean,camel,bean,post,processor,camel,bean,post,processor,application,context,application,context,camel,bean,post,processor,processor,new,camel,bean,post,processor,processor,set,application,context,application,context,return,processor
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties,                               SpringTypeConverter springTypeConverter);1420142059;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties,_                              SpringTypeConverter springTypeConverter) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,spring,type,converter,spring,type,converter,camel,context,camel,context,new,spring,camel,context,application,context,camel,context,get,type,converter,registry,add,fallback,type,converter,spring,type,converter,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties,                               SpringTypeConverter springTypeConverter);1420142491;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties,_                              SpringTypeConverter springTypeConverter) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,spring,type,converter,spring,type,converter,camel,context,camel,context,new,spring,camel,context,application,context,camel,context,get,type,converter,registry,add,fallback,type,converter,spring,type,converter,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties,                               SpringTypeConverter springTypeConverter);1420212927;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties,_                              SpringTypeConverter springTypeConverter) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,spring,type,converter,spring,type,converter,camel,context,camel,context,new,spring,camel,context,application,context,camel,context,get,type,converter,registry,add,fallback,type,converter,spring,type,converter,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext(ApplicationContext applicationContext,                               CamelConfigurationProperties configurationProperties,                               SpringTypeConverter springTypeConverter);1420480649;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext(ApplicationContext applicationContext,_                              CamelConfigurationProperties configurationProperties,_                              SpringTypeConverter springTypeConverter) {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,application,context,application,context,camel,configuration,properties,configuration,properties,spring,type,converter,spring,type,converter,camel,context,camel,context,new,spring,camel,context,application,context,camel,context,get,type,converter,registry,add,fallback,type,converter,spring,type,converter,true,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1504722046;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1505925729;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1506521818;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1508138292;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1508138808;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1510556404;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1516971295;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1518264301;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1520616475;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1524063178;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1525426048;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        final ExecutorServiceManager executorServiceManager = getSingleBeanOfType(applicationContext, ExecutorServiceManager.class)__        if (executorServiceManager != null) {_            LOG.info("Using custom ExecutorServiceManager: {}", executorServiceManager)__            camelContext.setExecutorServiceManager(executorServiceManager)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,final,executor,service,manager,executor,service,manager,get,single,bean,of,type,application,context,executor,service,manager,class,if,executor,service,manager,null,log,info,using,custom,executor,service,manager,executor,service,manager,camel,context,set,executor,service,manager,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1527674661;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        final ExecutorServiceManager executorServiceManager = getSingleBeanOfType(applicationContext, ExecutorServiceManager.class)__        if (executorServiceManager != null) {_            LOG.info("Using custom ExecutorServiceManager: {}", executorServiceManager)__            camelContext.setExecutorServiceManager(executorServiceManager)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,final,executor,service,manager,executor,service,manager,get,single,bean,of,type,application,context,executor,service,manager,class,if,executor,service,manager,null,log,info,using,custom,executor,service,manager,executor,service,manager,camel,context,set,executor,service,manager,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1527674663;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        Map<String, CamelClusterService> clusterServices = applicationContext.getBeansOfType(CamelClusterService.class)__        if (clusterServices != null && !clusterServices.isEmpty()) {_            for (Map.Entry<String, CamelClusterService> entry : clusterServices.entrySet()) {_                CamelClusterService service = entry.getValue()__                LOG.info("Using CamelClusterService with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }_        _        Map<String, HealthCheckRepository> repositories = applicationContext.getBeansOfType(HealthCheckRepository.class)__        if (ObjectHelper.isNotEmpty(repositories)) {_            for (HealthCheckRepository repository: repositories.values()) {_                healthCheckRegistry.addRepository(repository)__            }_        }_        _        HealthCheckService healthCheckService = getSingleBeanOfType(applicationContext, HealthCheckService.class)__        if (healthCheckService != null) {_            LOG.info("Using HealthCheckService: {}", healthCheckService)__            camelContext.addService(healthCheckService)__        }_        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }_        _        UuidGenerator uuidGenerator = getSingleBeanOfType(applicationContext, UuidGenerator.class)__        if (uuidGenerator != null) {_            LOG.info("Using custom UuidGenerator: {}", uuidGenerator)__            camelContext.setUuidGenerator(uuidGenerator)__        }_        _        Map<String, LogListener> logListeners = applicationContext.getBeansOfType(LogListener.class)__        if (logListeners != null && !logListeners.isEmpty()) {_            for (Map.Entry<String, LogListener> entry : logListeners.entrySet()) {_                LogListener logListener = entry.getValue()__                if (!camelContext.getLogListeners().contains(logListener)) {_                    LOG.info("Using custom LogListener with id: {} and implementation: {}", entry.getKey(), logListener)__                    camelContext.addLogListener(logListener)__                }_            }_        }__        _        final ExecutorServiceManager executorServiceManager = getSingleBeanOfType(applicationContext, ExecutorServiceManager.class)__        if (executorServiceManager != null) {_            LOG.info("Using custom ExecutorServiceManager: {}", executorServiceManager)__            camelContext.setExecutorServiceManager(executorServiceManager)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,map,string,camel,cluster,service,cluster,services,application,context,get,beans,of,type,camel,cluster,service,class,if,cluster,services,null,cluster,services,is,empty,for,map,entry,string,camel,cluster,service,entry,cluster,services,entry,set,camel,cluster,service,service,entry,get,value,log,info,using,camel,cluster,service,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,map,string,health,check,repository,repositories,application,context,get,beans,of,type,health,check,repository,class,if,object,helper,is,not,empty,repositories,for,health,check,repository,repository,repositories,values,health,check,registry,add,repository,repository,health,check,service,health,check,service,get,single,bean,of,type,application,context,health,check,service,class,if,health,check,service,null,log,info,using,health,check,service,health,check,service,camel,context,add,service,health,check,service,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,uuid,generator,uuid,generator,get,single,bean,of,type,application,context,uuid,generator,class,if,uuid,generator,null,log,info,using,custom,uuid,generator,uuid,generator,camel,context,set,uuid,generator,uuid,generator,map,string,log,listener,log,listeners,application,context,get,beans,of,type,log,listener,class,if,log,listeners,null,log,listeners,is,empty,for,map,entry,string,log,listener,entry,log,listeners,entry,set,log,listener,log,listener,entry,get,value,if,camel,context,get,log,listeners,contains,log,listener,log,info,using,custom,log,listener,with,id,and,implementation,entry,get,key,log,listener,camel,context,add,log,listener,log,listener,final,executor,service,manager,executor,service,manager,get,single,bean,of,type,application,context,executor,service,manager,class,if,executor,service,manager,null,log,info,using,custom,executor,service,manager,executor,service,manager,camel,context,set,executor,service,manager,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1528374634;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }__        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementNamingStrategy.class, managementStrategy::setManagementNamingStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,naming,strategy,class,management,strategy,set,management,naming,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1532545815;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }__        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementNamingStrategy.class, managementStrategy::setManagementNamingStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,naming,strategy,class,management,strategy,set,management,naming,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1540108157;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementNamingStrategy.class, managementStrategy::setManagementNamingStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,naming,strategy,class,management,strategy,set,management,naming,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1540108163;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementNamingStrategy.class, managementStrategy::setManagementNamingStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,naming,strategy,class,management,strategy,set,management,naming,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1540108165;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementObjectNameStrategy.class, managementStrategy::setManagementObjectNameStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setHealthCheckRegistry(healthCheckRegistry)__        } else {_            healthCheckRegistry = camelContext.getHealthCheckRegistry()__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,object,name,strategy,class,management,strategy,set,management,object,name,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,health,check,registry,health,check,registry,else,health,check,registry,camel,context,get,health,check,registry,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1540108165;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, bt -> camelContext.setExtension(BacklogTracer.class, bt))__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementObjectNameStrategy.class, managementStrategy::setManagementObjectNameStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setExtension(HealthCheckRegistry.class, healthCheckRegistry)__        } else {_            healthCheckRegistry = HealthCheckRegistry.get(camelContext)__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,bt,camel,context,set,extension,backlog,tracer,class,bt,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,object,name,strategy,class,management,strategy,set,management,object,name,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,extension,health,check,registry,class,health,check,registry,else,health,check,registry,health,check,registry,get,camel,context,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1540472504;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, bt -> camelContext.setExtension(BacklogTracer.class, bt))__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementObjectNameStrategy.class, managementStrategy::setManagementObjectNameStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setExtension(HealthCheckRegistry.class, healthCheckRegistry)__        } else {_            healthCheckRegistry = HealthCheckRegistry.get(camelContext)__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,bt,camel,context,set,extension,backlog,tracer,class,bt,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,object,name,strategy,class,management,strategy,set,management,object,name,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,extension,health,check,registry,class,health,check,registry,else,health,check,registry,health,check,registry,get,camel,context,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1551167777;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;static void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        final ManagementStrategy managementStrategy = camelContext.getManagementStrategy()___        registerPropertyForBeanType(applicationContext, BacklogTracer.class, bt -> camelContext.setExtension(BacklogTracer.class, bt))__        registerPropertyForBeanType(applicationContext, HandleFault.class, camelContext::addInterceptStrategy)__        registerPropertyForBeanType(applicationContext, InflightRepository.class, camelContext::setInflightRepository)__        registerPropertyForBeanType(applicationContext, AsyncProcessorAwaitManager.class, camelContext::setAsyncProcessorAwaitManager)__        registerPropertyForBeanType(applicationContext, ManagementStrategy.class, camelContext::setManagementStrategy)__        registerPropertyForBeanType(applicationContext, ManagementObjectNameStrategy.class, managementStrategy::setManagementObjectNameStrategy)__        registerPropertyForBeanType(applicationContext, EventFactory.class, managementStrategy::setEventFactory)__        registerPropertyForBeanType(applicationContext, UnitOfWorkFactory.class, camelContext::setUnitOfWorkFactory)__        registerPropertyForBeanType(applicationContext, RuntimeEndpointRegistry.class, camelContext::setRuntimeEndpointRegistry)___        registerPropertiesForBeanTypes(applicationContext, TypeConverters.class, camelContext.getTypeConverterRegistry()::addTypeConverters)___        final Predicate<EventNotifier> containsEventNotifier = managementStrategy.getEventNotifiers()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, EventNotifier.class, containsEventNotifier.negate(), managementStrategy::addEventNotifier)___        registerPropertiesForBeanTypes(applicationContext, EndpointStrategy.class, camelContext::addRegisterEndpointCallback)___        registerPropertyForBeanType(applicationContext, ShutdownStrategy.class, camelContext::setShutdownStrategy)__        _        final Predicate<InterceptStrategy> containsInterceptStrategy = camelContext.getInterceptStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, InterceptStrategy.class, containsInterceptStrategy.negate(), camelContext::addInterceptStrategy)___        final Predicate<LifecycleStrategy> containsLifecycleStrategy = camelContext.getLifecycleStrategies()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LifecycleStrategy.class, containsLifecycleStrategy.negate(), camelContext::addLifecycleStrategy)___        registerPropertiesForBeanTypes(applicationContext, CamelClusterService.class, addServiceToContext(camelContext))___        _        Map<String, ServiceRegistry> serviceRegistries = applicationContext.getBeansOfType(ServiceRegistry.class)__        if (serviceRegistries != null && !serviceRegistries.isEmpty()) {_            for (Map.Entry<String, ServiceRegistry> entry : serviceRegistries.entrySet()) {_                ServiceRegistry service = entry.getValue()___                if (service.getId() == null) {_                    service.setId(camelContext.getUuidGenerator().generateUuid())__                }__                LOG.info("Using ServiceRegistry with id: {} and implementation: {}", service.getId(), service)__                camelContext.addService(service)__            }_        }__        registerPropertiesForBeanTypes(applicationContext, RoutePolicyFactory.class, camelContext::addRoutePolicyFactory)___        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }_        _        HealthCheckRegistry healthCheckRegistry = getSingleBeanOfType(applicationContext, HealthCheckRegistry.class)__        if (healthCheckRegistry != null) {_            healthCheckRegistry.setCamelContext(camelContext)__            LOG.info("Using HealthCheckRegistry: {}", healthCheckRegistry)__            camelContext.setExtension(HealthCheckRegistry.class, healthCheckRegistry)__        } else {_            healthCheckRegistry = HealthCheckRegistry.get(camelContext)__            healthCheckRegistry.setCamelContext(camelContext)__        }__        registerPropertiesForBeanTypes(applicationContext, HealthCheckRepository.class, healthCheckRegistry::addRepository)___        registerPropertyForBeanType(applicationContext, HealthCheckService.class, addServiceToContext(camelContext))__        registerPropertyForBeanType(applicationContext, RouteController.class, camelContext::setRouteController)__        registerPropertyForBeanType(applicationContext, UuidGenerator.class, camelContext::setUuidGenerator)___        final Predicate<LogListener> containsLogListener = camelContext.getLogListeners()::contains__        registerPropertiesForBeanTypesWithCondition(applicationContext, LogListener.class, containsLogListener.negate(), camelContext::addLogListener)___        registerPropertyForBeanType(applicationContext, ExecutorServiceManager.class, camelContext::setExecutorServiceManager)___        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;static,void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,final,management,strategy,management,strategy,camel,context,get,management,strategy,register,property,for,bean,type,application,context,backlog,tracer,class,bt,camel,context,set,extension,backlog,tracer,class,bt,register,property,for,bean,type,application,context,handle,fault,class,camel,context,add,intercept,strategy,register,property,for,bean,type,application,context,inflight,repository,class,camel,context,set,inflight,repository,register,property,for,bean,type,application,context,async,processor,await,manager,class,camel,context,set,async,processor,await,manager,register,property,for,bean,type,application,context,management,strategy,class,camel,context,set,management,strategy,register,property,for,bean,type,application,context,management,object,name,strategy,class,management,strategy,set,management,object,name,strategy,register,property,for,bean,type,application,context,event,factory,class,management,strategy,set,event,factory,register,property,for,bean,type,application,context,unit,of,work,factory,class,camel,context,set,unit,of,work,factory,register,property,for,bean,type,application,context,runtime,endpoint,registry,class,camel,context,set,runtime,endpoint,registry,register,properties,for,bean,types,application,context,type,converters,class,camel,context,get,type,converter,registry,add,type,converters,final,predicate,event,notifier,contains,event,notifier,management,strategy,get,event,notifiers,contains,register,properties,for,bean,types,with,condition,application,context,event,notifier,class,contains,event,notifier,negate,management,strategy,add,event,notifier,register,properties,for,bean,types,application,context,endpoint,strategy,class,camel,context,add,register,endpoint,callback,register,property,for,bean,type,application,context,shutdown,strategy,class,camel,context,set,shutdown,strategy,final,predicate,intercept,strategy,contains,intercept,strategy,camel,context,get,intercept,strategies,contains,register,properties,for,bean,types,with,condition,application,context,intercept,strategy,class,contains,intercept,strategy,negate,camel,context,add,intercept,strategy,final,predicate,lifecycle,strategy,contains,lifecycle,strategy,camel,context,get,lifecycle,strategies,contains,register,properties,for,bean,types,with,condition,application,context,lifecycle,strategy,class,contains,lifecycle,strategy,negate,camel,context,add,lifecycle,strategy,register,properties,for,bean,types,application,context,camel,cluster,service,class,add,service,to,context,camel,context,map,string,service,registry,service,registries,application,context,get,beans,of,type,service,registry,class,if,service,registries,null,service,registries,is,empty,for,map,entry,string,service,registry,entry,service,registries,entry,set,service,registry,service,entry,get,value,if,service,get,id,null,service,set,id,camel,context,get,uuid,generator,generate,uuid,log,info,using,service,registry,with,id,and,implementation,service,get,id,service,camel,context,add,service,service,register,properties,for,bean,types,application,context,route,policy,factory,class,camel,context,add,route,policy,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,health,check,registry,health,check,registry,get,single,bean,of,type,application,context,health,check,registry,class,if,health,check,registry,null,health,check,registry,set,camel,context,camel,context,log,info,using,health,check,registry,health,check,registry,camel,context,set,extension,health,check,registry,class,health,check,registry,else,health,check,registry,health,check,registry,get,camel,context,health,check,registry,set,camel,context,camel,context,register,properties,for,bean,types,application,context,health,check,repository,class,health,check,registry,add,repository,register,property,for,bean,type,application,context,health,check,service,class,add,service,to,context,camel,context,register,property,for,bean,type,application,context,route,controller,class,camel,context,set,route,controller,register,property,for,bean,type,application,context,uuid,generator,class,camel,context,set,uuid,generator,final,predicate,log,listener,contains,log,listener,camel,context,get,log,listeners,contains,register,properties,for,bean,types,with,condition,application,context,log,listener,class,contains,log,listener,negate,camel,context,add,log,listener,register,property,for,bean,type,application,context,executor,service,manager,class,camel,context,set,executor,service,manager,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext() throws Exception;1415211488;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext() throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (routesBuilders != null) {_            for (RoutesBuilder routesBuilder : routesBuilders) {_                camelContext.addRoutes(routesBuilder)__            }_        }__        if (camelContextConfiguration != null) {_            camelContextConfiguration.beforeStart(camelContext)__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,routes,builders,null,for,routes,builder,routes,builder,routes,builders,camel,context,add,routes,routes,builder,if,camel,context,configuration,null,camel,context,configuration,before,start,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext() throws Exception;1415264660;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext() throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        if (camelContextConfiguration != null) {_            camelContextConfiguration.beforeStart(camelContext)__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,if,camel,context,configuration,null,camel,context,configuration,before,start,camel,context,return,camel,context
CamelAutoConfiguration -> @Bean     CamelContext camelContext() throws Exception;1415265700;Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring_context.;@Bean_    CamelContext camelContext() throws Exception {_        CamelContext camelContext = new SpringCamelContext(applicationContext)___        if (!configurationProperties.isJmxEnabled()) {_            camelContext.disableJMX()__        }__        return camelContext__    };spring,aware,camel,context,for,the,application,auto,detects,and,loads,all,routes,available,in,the,spring,context;bean,camel,context,camel,context,throws,exception,camel,context,camel,context,new,spring,camel,context,application,context,if,configuration,properties,is,jmx,enabled,camel,context,disable,jmx,return,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1498552037;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1499239702;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1500560411;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1501008447;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        RestConfiguration restConfiguration = getSingleBeanOfType(applicationContext, RestConfiguration.class)__        if (restConfiguration != null) {_            camelContext.setRestConfiguration(restConfiguration)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,rest,configuration,rest,configuration,get,single,bean,of,type,application,context,rest,configuration,class,if,rest,configuration,null,camel,context,set,rest,configuration,rest,configuration,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1501164628;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception;1501322381;Performs additional configuration to lookup beans of Camel types to configure_advanced configurations._<p/>_Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.;void afterPropertiesSet(ApplicationContext applicationContext, CamelContext camelContext) throws Exception {_        Tracer tracer = getSingleBeanOfType(applicationContext, Tracer.class)__        if (tracer != null) {_            _            TraceFormatter formatter = getSingleBeanOfType(applicationContext, TraceFormatter.class)__            if (formatter != null) {_                tracer.setFormatter(formatter)__            }_            LOG.info("Using custom Tracer: {}", tracer)__            camelContext.addInterceptStrategy(tracer)__        }_        BacklogTracer backlogTracer = getSingleBeanOfType(applicationContext, BacklogTracer.class)__        if (backlogTracer != null) {_            LOG.info("Using custom BacklogTracer: {}", backlogTracer)__            camelContext.addInterceptStrategy(backlogTracer)__        }_        HandleFault handleFault = getSingleBeanOfType(applicationContext, HandleFault.class)__        if (handleFault != null) {_            LOG.info("Using custom HandleFault: {}", handleFault)__            camelContext.addInterceptStrategy(handleFault)__        }_        InflightRepository inflightRepository = getSingleBeanOfType(applicationContext, InflightRepository.class)__        if (inflightRepository != null) {_            LOG.info("Using custom InflightRepository: {}", inflightRepository)__            camelContext.setInflightRepository(inflightRepository)__        }_        AsyncProcessorAwaitManager asyncProcessorAwaitManager = getSingleBeanOfType(applicationContext, AsyncProcessorAwaitManager.class)__        if (asyncProcessorAwaitManager != null) {_            LOG.info("Using custom AsyncProcessorAwaitManager: {}", asyncProcessorAwaitManager)__            camelContext.setAsyncProcessorAwaitManager(asyncProcessorAwaitManager)__        }_        ManagementStrategy managementStrategy = getSingleBeanOfType(applicationContext, ManagementStrategy.class)__        if (managementStrategy != null) {_            LOG.info("Using custom ManagementStrategy: {}", managementStrategy)__            camelContext.setManagementStrategy(managementStrategy)__        }_        ManagementNamingStrategy managementNamingStrategy = getSingleBeanOfType(applicationContext, ManagementNamingStrategy.class)__        if (managementNamingStrategy != null) {_            LOG.info("Using custom ManagementNamingStrategy: {}", managementNamingStrategy)__            camelContext.getManagementStrategy().setManagementNamingStrategy(managementNamingStrategy)__        }_        EventFactory eventFactory = getSingleBeanOfType(applicationContext, EventFactory.class)__        if (eventFactory != null) {_            LOG.info("Using custom EventFactory: {}", eventFactory)__            camelContext.getManagementStrategy().setEventFactory(eventFactory)__        }_        UnitOfWorkFactory unitOfWorkFactory = getSingleBeanOfType(applicationContext, UnitOfWorkFactory.class)__        if (unitOfWorkFactory != null) {_            LOG.info("Using custom UnitOfWorkFactory: {}", unitOfWorkFactory)__            camelContext.setUnitOfWorkFactory(unitOfWorkFactory)__        }_        RuntimeEndpointRegistry runtimeEndpointRegistry = getSingleBeanOfType(applicationContext, RuntimeEndpointRegistry.class)__        if (runtimeEndpointRegistry != null) {_            LOG.info("Using custom RuntimeEndpointRegistry: {}", runtimeEndpointRegistry)__            camelContext.setRuntimeEndpointRegistry(runtimeEndpointRegistry)__        }_        _        Map<String, TypeConverters> typeConverters = applicationContext.getBeansOfType(TypeConverters.class)__        if (typeConverters != null && !typeConverters.isEmpty()) {_            for (Map.Entry<String, TypeConverters> entry : typeConverters.entrySet()) {_                TypeConverters converter = entry.getValue()__                LOG.info("Adding custom TypeConverters with id: {} and implementation: {}", entry.getKey(), converter)__                camelContext.getTypeConverterRegistry().addTypeConverters(converter)__            }_        }_        _        Map<String, EventNotifier> eventNotifiers = applicationContext.getBeansOfType(EventNotifier.class)__        if (eventNotifiers != null && !eventNotifiers.isEmpty()) {_            for (Map.Entry<String, EventNotifier> entry : eventNotifiers.entrySet()) {_                EventNotifier notifier = entry.getValue()__                _                if (!camelContext.getManagementStrategy().getEventNotifiers().contains(notifier)) {_                    LOG.info("Using custom EventNotifier with id: {} and implementation: {}", entry.getKey(), notifier)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            }_        }_        _        Map<String, EndpointStrategy> endpointStrategies = applicationContext.getBeansOfType(EndpointStrategy.class)__        if (endpointStrategies != null && !endpointStrategies.isEmpty()) {_            for (Map.Entry<String, EndpointStrategy> entry : endpointStrategies.entrySet()) {_                EndpointStrategy strategy = entry.getValue()__                LOG.info("Using custom EndpointStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                camelContext.addRegisterEndpointCallback(strategy)__            }_        }_        _        ShutdownStrategy shutdownStrategy = getSingleBeanOfType(applicationContext, ShutdownStrategy.class)__        if (shutdownStrategy != null) {_            LOG.info("Using custom ShutdownStrategy: " + shutdownStrategy)__            camelContext.setShutdownStrategy(shutdownStrategy)__        }_        _        Map<String, InterceptStrategy> interceptStrategies = applicationContext.getBeansOfType(InterceptStrategy.class)__        if (interceptStrategies != null && !interceptStrategies.isEmpty()) {_            for (Map.Entry<String, InterceptStrategy> entry : interceptStrategies.entrySet()) {_                InterceptStrategy strategy = entry.getValue()__                _                if (!camelContext.getInterceptStrategies().contains(strategy)) {_                    LOG.info("Using custom InterceptStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addInterceptStrategy(strategy)__                }_            }_        }_        _        Map<String, LifecycleStrategy> lifecycleStrategies = applicationContext.getBeansOfType(LifecycleStrategy.class)__        if (lifecycleStrategies != null && !lifecycleStrategies.isEmpty()) {_            for (Map.Entry<String, LifecycleStrategy> entry : lifecycleStrategies.entrySet()) {_                LifecycleStrategy strategy = entry.getValue()__                _                if (!camelContext.getLifecycleStrategies().contains(strategy)) {_                    LOG.info("Using custom LifecycleStrategy with id: {} and implementation: {}", entry.getKey(), strategy)__                    camelContext.addLifecycleStrategy(strategy)__                }_            }_        }_        _        CamelClusterService clusterService = getSingleBeanOfType(applicationContext, CamelClusterService.class)__        if (clusterService != null) {_            LOG.info("Using CamelClusterService: " + clusterService)__            camelContext.addService(clusterService)__        }_        _        Map<String, RoutePolicyFactory> routePolicyFactories = applicationContext.getBeansOfType(RoutePolicyFactory.class)__        if (routePolicyFactories != null && !routePolicyFactories.isEmpty()) {_            for (Map.Entry<String, RoutePolicyFactory> entry : routePolicyFactories.entrySet()) {_                RoutePolicyFactory factory = entry.getValue()__                LOG.info("Using custom RoutePolicyFactory with id: {} and implementation: {}", entry.getKey(), factory)__                camelContext.addRoutePolicyFactory(factory)__            }_        }_        _        GlobalSSLContextParametersSupplier sslContextParametersSupplier = getSingleBeanOfType(applicationContext, GlobalSSLContextParametersSupplier.class)__        if (sslContextParametersSupplier != null) {_            camelContext.setSSLContextParameters(sslContextParametersSupplier.get())__        }__        _        RouteController routeController = getSingleBeanOfType(applicationContext, RouteController.class)__        if (routeController != null) {_            LOG.info("Using RouteController: " + routeController)__            camelContext.setRouteController(routeController)__        }__        _        initThreadPoolProfiles(applicationContext, camelContext)__    };performs,additional,configuration,to,lookup,beans,of,camel,types,to,configure,advanced,configurations,p,similar,code,in,camel,core,xml,module,in,class,org,apache,camel,core,xml,abstract,camel,context,factory,bean;void,after,properties,set,application,context,application,context,camel,context,camel,context,throws,exception,tracer,tracer,get,single,bean,of,type,application,context,tracer,class,if,tracer,null,trace,formatter,formatter,get,single,bean,of,type,application,context,trace,formatter,class,if,formatter,null,tracer,set,formatter,formatter,log,info,using,custom,tracer,tracer,camel,context,add,intercept,strategy,tracer,backlog,tracer,backlog,tracer,get,single,bean,of,type,application,context,backlog,tracer,class,if,backlog,tracer,null,log,info,using,custom,backlog,tracer,backlog,tracer,camel,context,add,intercept,strategy,backlog,tracer,handle,fault,handle,fault,get,single,bean,of,type,application,context,handle,fault,class,if,handle,fault,null,log,info,using,custom,handle,fault,handle,fault,camel,context,add,intercept,strategy,handle,fault,inflight,repository,inflight,repository,get,single,bean,of,type,application,context,inflight,repository,class,if,inflight,repository,null,log,info,using,custom,inflight,repository,inflight,repository,camel,context,set,inflight,repository,inflight,repository,async,processor,await,manager,async,processor,await,manager,get,single,bean,of,type,application,context,async,processor,await,manager,class,if,async,processor,await,manager,null,log,info,using,custom,async,processor,await,manager,async,processor,await,manager,camel,context,set,async,processor,await,manager,async,processor,await,manager,management,strategy,management,strategy,get,single,bean,of,type,application,context,management,strategy,class,if,management,strategy,null,log,info,using,custom,management,strategy,management,strategy,camel,context,set,management,strategy,management,strategy,management,naming,strategy,management,naming,strategy,get,single,bean,of,type,application,context,management,naming,strategy,class,if,management,naming,strategy,null,log,info,using,custom,management,naming,strategy,management,naming,strategy,camel,context,get,management,strategy,set,management,naming,strategy,management,naming,strategy,event,factory,event,factory,get,single,bean,of,type,application,context,event,factory,class,if,event,factory,null,log,info,using,custom,event,factory,event,factory,camel,context,get,management,strategy,set,event,factory,event,factory,unit,of,work,factory,unit,of,work,factory,get,single,bean,of,type,application,context,unit,of,work,factory,class,if,unit,of,work,factory,null,log,info,using,custom,unit,of,work,factory,unit,of,work,factory,camel,context,set,unit,of,work,factory,unit,of,work,factory,runtime,endpoint,registry,runtime,endpoint,registry,get,single,bean,of,type,application,context,runtime,endpoint,registry,class,if,runtime,endpoint,registry,null,log,info,using,custom,runtime,endpoint,registry,runtime,endpoint,registry,camel,context,set,runtime,endpoint,registry,runtime,endpoint,registry,map,string,type,converters,type,converters,application,context,get,beans,of,type,type,converters,class,if,type,converters,null,type,converters,is,empty,for,map,entry,string,type,converters,entry,type,converters,entry,set,type,converters,converter,entry,get,value,log,info,adding,custom,type,converters,with,id,and,implementation,entry,get,key,converter,camel,context,get,type,converter,registry,add,type,converters,converter,map,string,event,notifier,event,notifiers,application,context,get,beans,of,type,event,notifier,class,if,event,notifiers,null,event,notifiers,is,empty,for,map,entry,string,event,notifier,entry,event,notifiers,entry,set,event,notifier,notifier,entry,get,value,if,camel,context,get,management,strategy,get,event,notifiers,contains,notifier,log,info,using,custom,event,notifier,with,id,and,implementation,entry,get,key,notifier,camel,context,get,management,strategy,add,event,notifier,notifier,map,string,endpoint,strategy,endpoint,strategies,application,context,get,beans,of,type,endpoint,strategy,class,if,endpoint,strategies,null,endpoint,strategies,is,empty,for,map,entry,string,endpoint,strategy,entry,endpoint,strategies,entry,set,endpoint,strategy,strategy,entry,get,value,log,info,using,custom,endpoint,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,register,endpoint,callback,strategy,shutdown,strategy,shutdown,strategy,get,single,bean,of,type,application,context,shutdown,strategy,class,if,shutdown,strategy,null,log,info,using,custom,shutdown,strategy,shutdown,strategy,camel,context,set,shutdown,strategy,shutdown,strategy,map,string,intercept,strategy,intercept,strategies,application,context,get,beans,of,type,intercept,strategy,class,if,intercept,strategies,null,intercept,strategies,is,empty,for,map,entry,string,intercept,strategy,entry,intercept,strategies,entry,set,intercept,strategy,strategy,entry,get,value,if,camel,context,get,intercept,strategies,contains,strategy,log,info,using,custom,intercept,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,intercept,strategy,strategy,map,string,lifecycle,strategy,lifecycle,strategies,application,context,get,beans,of,type,lifecycle,strategy,class,if,lifecycle,strategies,null,lifecycle,strategies,is,empty,for,map,entry,string,lifecycle,strategy,entry,lifecycle,strategies,entry,set,lifecycle,strategy,strategy,entry,get,value,if,camel,context,get,lifecycle,strategies,contains,strategy,log,info,using,custom,lifecycle,strategy,with,id,and,implementation,entry,get,key,strategy,camel,context,add,lifecycle,strategy,strategy,camel,cluster,service,cluster,service,get,single,bean,of,type,application,context,camel,cluster,service,class,if,cluster,service,null,log,info,using,camel,cluster,service,cluster,service,camel,context,add,service,cluster,service,map,string,route,policy,factory,route,policy,factories,application,context,get,beans,of,type,route,policy,factory,class,if,route,policy,factories,null,route,policy,factories,is,empty,for,map,entry,string,route,policy,factory,entry,route,policy,factories,entry,set,route,policy,factory,factory,entry,get,value,log,info,using,custom,route,policy,factory,with,id,and,implementation,entry,get,key,factory,camel,context,add,route,policy,factory,factory,global,sslcontext,parameters,supplier,ssl,context,parameters,supplier,get,single,bean,of,type,application,context,global,sslcontext,parameters,supplier,class,if,ssl,context,parameters,supplier,null,camel,context,set,sslcontext,parameters,ssl,context,parameters,supplier,get,route,controller,route,controller,get,single,bean,of,type,application,context,route,controller,class,if,route,controller,null,log,info,using,route,controller,route,controller,camel,context,set,route,controller,route,controller,init,thread,pool,profiles,application,context,camel,context
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420038179;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420142059;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420142491;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420212927;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420480649;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1420481578;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1421750589;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1421753147;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1422531195;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1422534655;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1424036948;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1425325049;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1425325221;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1425502895;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1427090237;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties configurationProperties);1427105070;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties configurationProperties) {_        return camelContext.createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,camel,context,camel,context,camel,configuration,properties,configuration,properties,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1489491981;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1490687176;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean(initMethod = "", destroyMethod = "")          @ConditionalOnMissingBean(ConsumerTemplate.class)     ConsumerTemplate consumerTemplate(CamelContext camelContext,                                       CamelConfigurationProperties config) throws Exception;1491919462;Default consumer template for the bootstrapped Camel context.;@Bean(initMethod = "", destroyMethod = "")_    _    @ConditionalOnMissingBean(ConsumerTemplate.class)_    ConsumerTemplate consumerTemplate(CamelContext camelContext,_                                      CamelConfigurationProperties config) throws Exception {_        final ConsumerTemplate consumerTemplate = camelContext.createConsumerTemplate(config.getConsumerTemplateCacheSize())__        camelContext.addService(consumerTemplate)__        return consumerTemplate__    };default,consumer,template,for,the,bootstrapped,camel,context;bean,init,method,destroy,method,conditional,on,missing,bean,consumer,template,class,consumer,template,consumer,template,camel,context,camel,context,camel,configuration,properties,config,throws,exception,final,consumer,template,consumer,template,camel,context,create,consumer,template,config,get,consumer,template,cache,size,camel,context,add,service,consumer,template,return,consumer,template
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate() throws Exception;1415211488;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate() throws Exception {_        return camelContext().createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,throws,exception,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate() throws Exception;1415264660;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate() throws Exception {_        return camelContext().createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,throws,exception,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
CamelAutoConfiguration -> @Bean     ProducerTemplate producerTemplate() throws Exception;1415265700;Default producer template for the bootstrapped Camel context.;@Bean_    ProducerTemplate producerTemplate() throws Exception {_        return camelContext().createProducerTemplate(configurationProperties.getProducerTemplateCacheSize())__    };default,producer,template,for,the,bootstrapped,camel,context;bean,producer,template,producer,template,throws,exception,return,camel,context,create,producer,template,configuration,properties,get,producer,template,cache,size
