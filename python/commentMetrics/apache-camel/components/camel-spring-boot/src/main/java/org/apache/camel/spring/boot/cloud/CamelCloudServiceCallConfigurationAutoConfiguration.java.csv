commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;@Lazy @Bean(name = ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_CONFIG_ID) @ConditionalOnMissingBean(name = ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_CONFIG_ID) public ServiceCallConfigurationDefinition serviceCallConfiguration() throws Exception {     final ServiceCallConfigurationDefinition definition = new ServiceCallConfigurationDefinition().     final CamelCloudConfigurationProperties.ServiceCall serviceCall = configurationProperties.getServiceCall().     ObjectHelper.ifNotEmpty(serviceCall.getComponent(), definition::setComponent).     ObjectHelper.ifNotEmpty(serviceCall.getUri(), definition::setUri).     ObjectHelper.ifNotEmpty(serviceCall.getServiceDiscovery(), definition::setServiceDiscoveryRef).     ObjectHelper.ifNotEmpty(serviceCall.getServiceFilter(), definition::setServiceFilterRef).     ObjectHelper.ifNotEmpty(serviceCall.getServiceChooser(), definition::setServiceChooserRef).     ObjectHelper.ifNotEmpty(serviceCall.getLoadBalancer(), definition::setLoadBalancerRef).     if (serviceCall.getLoadBalancer() == null && serviceCall.isDefaultLoadBalancer()) {         definition.defaultLoadBalancer().     }     final String expression = serviceCall.getExpression().     final String expressionLanguage = serviceCall.getExpressionLanguage().     if (ObjectHelper.isNotEmpty(expression) && ObjectHelper.isNotEmpty(expressionLanguage)) {         Language language = camelContext.resolveLanguage(expressionLanguage).         if (language == null) {             throw new IllegalArgumentException("Unable to resolve language: " + expressionLanguage).         }         definition.setExpression(language.createExpression(expression)).     }     return definition. }
