commented;modifiers;parameterAmount;loc;comment;code
false;public;1;107;;@Bean @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) @ConditionalOnMissingBean(RoutesHealthCheckRepository.class) public HealthCheckRepository routesHealthCheckRepository(HealthCheckRoutesConfiguration configuration) {     final RoutesHealthCheckRepository repository = new RoutesHealthCheckRepository().     final HealthCheckRoutesConfiguration.ThresholdsConfiguration thresholds = configuration.getThresholds().     if (thresholds.getExchangesFailed() != null) {         repository.addEvaluator(RoutePerformanceCounterEvaluators.exchangesFailed(thresholds.getExchangesFailed())).     }     if (thresholds.getExchangesInflight() != null) {         repository.addEvaluator(RoutePerformanceCounterEvaluators.exchangesInflight(thresholds.getExchangesInflight())).     }     if (thresholds.getRedeliveries() != null) {         repository.addEvaluator(RoutePerformanceCounterEvaluators.redeliveries(thresholds.getRedeliveries())).     }     if (thresholds.getExternalRedeliveries() != null) {         repository.addEvaluator(RoutePerformanceCounterEvaluators.redeliveries(thresholds.getExternalRedeliveries())).     }     if (thresholds.getLastProcessingTime() != null) {         final String time = thresholds.getLastProcessingTime().getThreshold().         final Integer failures = thresholds.getLastProcessingTime().getFailures().         if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {             repository.addEvaluator(RoutePerformanceCounterEvaluators.lastProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).         }     }     if (thresholds.getMinProcessingTime() != null) {         final String time = thresholds.getMinProcessingTime().getThreshold().         final Integer failures = thresholds.getMinProcessingTime().getFailures().         if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {             repository.addEvaluator(RoutePerformanceCounterEvaluators.minProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).         }     }     if (thresholds.getMeanProcessingTime() != null) {         final String time = thresholds.getMeanProcessingTime().getThreshold().         final Integer failures = thresholds.getMeanProcessingTime().getFailures().         if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {             repository.addEvaluator(RoutePerformanceCounterEvaluators.meanProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).         }     }     if (thresholds.getMaxProcessingTime() != null) {         final String time = thresholds.getMaxProcessingTime().getThreshold().         final Integer failures = thresholds.getMaxProcessingTime().getFailures().         if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {             repository.addEvaluator(RoutePerformanceCounterEvaluators.maxProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).         }     }     if (configuration.getThreshold() != null) {         for (String key : configuration.getThreshold().keySet()) {             final HealthCheckRoutesConfiguration.ThresholdsConfiguration threshold = configuration.getThreshold(key).             if (threshold.getExchangesFailed() != null) {                 repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.exchangesFailed(threshold.getExchangesFailed())).             }             if (threshold.getExchangesInflight() != null) {                 repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.exchangesInflight(threshold.getExchangesInflight())).             }             if (threshold.getRedeliveries() != null) {                 repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.redeliveries(threshold.getRedeliveries())).             }             if (threshold.getExternalRedeliveries() != null) {                 repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.redeliveries(threshold.getExternalRedeliveries())).             }             if (threshold.getLastProcessingTime() != null) {                 final String time = threshold.getLastProcessingTime().getThreshold().                 final Integer failures = threshold.getLastProcessingTime().getFailures().                 if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {                     repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.lastProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).                 }             }             if (threshold.getMinProcessingTime() != null) {                 final String time = threshold.getMinProcessingTime().getThreshold().                 final Integer failures = threshold.getMinProcessingTime().getFailures().                 if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {                     repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.minProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).                 }             }             if (threshold.getMeanProcessingTime() != null) {                 final String time = threshold.getMeanProcessingTime().getThreshold().                 final Integer failures = threshold.getMeanProcessingTime().getFailures().                 if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {                     repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.meanProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).                 }             }             if (threshold.getMaxProcessingTime() != null) {                 final String time = threshold.getMaxProcessingTime().getThreshold().                 final Integer failures = threshold.getMaxProcessingTime().getFailures().                 if (ObjectHelper.isNotEmpty(time) && ObjectHelper.isNotEmpty(failures)) {                     repository.addRouteEvaluator(key, RoutePerformanceCounterEvaluators.maxProcessingTime(TimePatternConverter.toMilliSeconds(time), failures)).                 }             }         }     }     return repository. }
