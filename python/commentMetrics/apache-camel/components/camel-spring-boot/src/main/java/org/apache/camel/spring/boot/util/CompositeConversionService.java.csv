commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public boolean canConvert(Class<?> sourceType, Class<?> targetType) {     for (ConversionService service : this.delegates) {         if (service.canConvert(sourceType, targetType)) {             return true.         }     }     return false. }
false;public;2;9;;@Override public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {     for (ConversionService service : this.delegates) {         if (service.canConvert(sourceType, targetType)) {             return true.         }     }     return false. }
false;public;2;15;;@Override public <T> T convert(Object source, Class<T> targetType) {     for (int i = 0. i < this.delegates.size() - 1. i++) {         try {             ConversionService delegate = this.delegates.get(i).             if (delegate.canConvert(source.getClass(), targetType)) {                 return delegate.convert(source, targetType).             }         } catch (ConversionException e) {         // ignored         }     }     return this.delegates.get(this.delegates.size() - 1).convert(source, targetType). }
false;public;3;15;;@Override public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     for (int i = 0. i < this.delegates.size() - 1. i++) {         try {             ConversionService delegate = this.delegates.get(i).             if (delegate.canConvert(sourceType, targetType)) {                 return delegate.convert(source, sourceType, targetType).             }         } catch (ConversionException e) {         // ignored         }     }     return this.delegates.get(this.delegates.size() - 1).convert(source, sourceType, targetType). }
