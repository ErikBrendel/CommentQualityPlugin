commented;modifiers;parameterAmount;loc;comment;code
false;public;3;37;;@Override public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {     // do not attempt to convert Camel types     if (type.getCanonicalName().startsWith("org.apache")) {         return null.     }     // do not attempt to convert List -> Map. Ognl expression may use this converter as a fallback expecting null     if (type.isAssignableFrom(Map.class) && (value.getClass().isArray() || value instanceof Collection)) {         return null.     }     TypeDescriptor sourceType = types.computeIfAbsent(value.getClass(), TypeDescriptor::valueOf).     TypeDescriptor targetType = types.computeIfAbsent(type, TypeDescriptor::valueOf).     for (ConversionService conversionService : conversionServices) {         if (conversionService.canConvert(sourceType, targetType)) {             try {                 return (T) conversionService.convert(value, sourceType, targetType).             } catch (ConversionFailedException e) {                 //                  if (e.getCause() instanceof ConverterNotFoundException && isArrayOrCollection(value)) {                     return null.                 } else {                     throw new TypeConversionException(value, type, e).                 }             }         }     }     return null. }
false;private;1;3;;private boolean isArrayOrCollection(Object value) {     return value instanceof Collection || value.getClass().isArray(). }
