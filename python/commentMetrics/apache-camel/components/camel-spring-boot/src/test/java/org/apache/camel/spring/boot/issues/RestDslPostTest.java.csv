commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testMultiplePostTypes() throws Exception {     UserPojo user = new UserPojo().     user.setId(1).     user.setName("My Name").     resultEndpointUser.expectedBodiesReceived(user).     resultEndpointUser.expectedMessageCount(1).     CountryPojo country = new CountryPojo().     country.setCountry("England").     country.setIso("EN").     resultEndpointCountry.expectedBodiesReceived(country).     resultEndpointCountry.expectedMessageCount(1).     ExchangeBuilder builder = ExchangeBuilder.anExchange(context).withHeader(Exchange.HTTP_METHOD, HttpMethod.POST).withHeader(Exchange.ACCEPT_CONTENT_TYPE, MediaType.APPLICATION_JSON).     Exchange outExchangeUser = builder.withBody("{\"id\": 1, \"name\": \"My Name\"}").build().     Exchange outExchangeCountry = builder.withBody("{\"iso\": \"EN\", \"country\": \"England\"}").build().     template.send("jetty:http://localhost:" + PORT + "/user", outExchangeUser).     template.send("jetty:http://localhost:" + PORT + "/country", outExchangeCountry).     resultEndpointCountry.assertIsSatisfied().     resultEndpointUser.assertIsSatisfied(). }
false;public;0;7;;public void configure() {     restConfiguration().host("localhost").port(PORT).bindingMode(RestBindingMode.json).     rest("/").post("/user").type(UserPojo.class).route().to("mock:user").endRest().post("/country").type(CountryPojo.class).route().to("mock:country").endRest(). }
false;public;0;12;;@Bean public RouteBuilder route() {     return new RouteBuilder() {          public void configure() {             restConfiguration().host("localhost").port(PORT).bindingMode(RestBindingMode.json).             rest("/").post("/user").type(UserPojo.class).route().to("mock:user").endRest().post("/country").type(CountryPojo.class).route().to("mock:country").endRest().         }     }. }
