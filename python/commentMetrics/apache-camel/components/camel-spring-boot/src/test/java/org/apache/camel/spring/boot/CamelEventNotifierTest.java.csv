commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;;0;9;;@Bean RouteBuilder routeBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }. }
false;public;0;4;;@Bean public EventNotifier myEventNotifier() {     return new MyEventNotifier(). }
false;public;0;13;;@Test public void testEventNotifier() throws InterruptedException {     MockEndpoint mockEndpoint = camelContext.getEndpoint("mock:result", MockEndpoint.class).     mockEndpoint.expectedMessageCount(1).     producerTemplate.sendBody("direct:start", "Hello World").     mockEndpoint.assertIsSatisfied().     MyEventNotifier notifier = (MyEventNotifier) camelContext.getManagementStrategy().getEventNotifiers().get(0).     assertNotNull(notifier).     assertTrue(notifier.getCount() > 0). }
false;public;1;4;;@Override public void notify(CamelEvent event) throws Exception {     counter.incrementAndGet(). }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return true. }
false;public;0;3;;public int getCount() {     return counter.get(). }
