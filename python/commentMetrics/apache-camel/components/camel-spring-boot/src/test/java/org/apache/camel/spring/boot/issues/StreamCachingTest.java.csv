commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void configure() throws Exception {     context.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter(context, new ConversionService[] { new DefaultConversionService() }), true).     from("direct:foo").streamCaching().bean(MyBean.class).to(URI_END_OF_ROUTE). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter(context, new ConversionService[] { new DefaultConversionService() }), true).             from("direct:foo").streamCaching().bean(MyBean.class).to(URI_END_OF_ROUTE).         }     }. }
false;public;0;8;;@Test public void streamCachingWithSpring() throws Exception {     endOfRoute.expectedMessageCount(1).     template.sendBody("direct:foo", new FileInputStream(new File("src/test/resources/logback.xml"))).     endOfRoute.assertIsSatisfied(). }
false;public;0;3;;public List<Integer> someNumbers() {     return asList(1, 2, 3). }
true;;2;5;/**  * Copied from org.apache.camel.spring.boot.TypeConversionConfiguration (they are package protected)  */ ;/**  * Copied from org.apache.camel.spring.boot.TypeConversionConfiguration (they are package protected)  */ SpringTypeConverter springTypeConverter(CamelContext camelContext, ConversionService[] conversionServices) {     SpringTypeConverter springTypeConverter = new SpringTypeConverter(asList(conversionServices)).     camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true).     return springTypeConverter. }
