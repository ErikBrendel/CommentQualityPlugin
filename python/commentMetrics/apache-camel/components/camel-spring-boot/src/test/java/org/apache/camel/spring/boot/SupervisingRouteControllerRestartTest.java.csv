commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Test public void testRouteRestart() throws Exception {     Assert.assertNotNull(context.getRouteController()).     Assert.assertTrue(context.getRouteController() instanceof SupervisingRouteController).     SupervisingRouteController controller = context.getRouteController().unwrap(SupervisingRouteController.class).     // Wait for the controller to start the routes     await().atMost(3, TimeUnit.SECONDS).untilAsserted(() -> {         // now its suspended by the policy         Assert.assertEquals(ServiceStatus.Started, context.getRouteController().getRouteStatus("foo")).         Assert.assertEquals(ServiceStatus.Started, context.getRouteController().getRouteStatus("bar")).         Assert.assertEquals(ServiceStatus.Started, context.getRouteController().getRouteStatus("dummy")).     }).     // restart the dummy route which should fail on first attempt     controller.stopRoute("dummy").     Assert.assertNull(context.getRoute("dummy").getRouteContext().getRouteController()).     try {         controller.startRoute("dummy").     } catch (Exception e) {         Assert.assertEquals("Forced error on restart", e.getMessage()).     }     Assert.assertTrue(controller.getBackOffContext("dummy").isPresent()).     Assert.assertEquals(BackOffTimer.Task.Status.Active, controller.getBackOffContext("dummy").get().getStatus()).     Assert.assertTrue(controller.getBackOffContext("dummy").get().getCurrentAttempts() > 0).     // Wait for wile to give time to the controller to start the route     await().atMost(2, TimeUnit.SECONDS).untilAsserted(() -> {         // now its suspended by the policy         Assert.assertEquals(ServiceStatus.Started, context.getRouteController().getRouteStatus("dummy")).         Assert.assertNotNull(context.getRoute("dummy").getRouteContext().getRouteController()).         Assert.assertFalse(controller.getBackOffContext("dummy").isPresent()).     }). }
false;public;0;24;;@Override public void configure() throws Exception {     getContext().addComponent("dummy", new DummyComponent()).     from("timer:foo?period=5s").id("foo").startupOrder(2).to("mock:foo").     from("timer:bar?period=5s").id("bar").startupOrder(1).to("mock:bar").     from("timer:unmanaged?period=5s").id("timer-unmanaged").to("mock:timer-unmanaged").     from("timer:no-autostartup?period=5s").id("timer-no-autostartup").autoStartup(false).to("mock:timer-no-autostartup").     from("dummy:foo?failOnRestart=true").id("dummy").to("mock:dummy"). }
false;public;0;29;;@Bean public RouteBuilder routeBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().addComponent("dummy", new DummyComponent()).             from("timer:foo?period=5s").id("foo").startupOrder(2).to("mock:foo").             from("timer:bar?period=5s").id("bar").startupOrder(1).to("mock:bar").             from("timer:unmanaged?period=5s").id("timer-unmanaged").to("mock:timer-unmanaged").             from("timer:no-autostartup?period=5s").id("timer-no-autostartup").autoStartup(false).to("mock:timer-no-autostartup").             from("dummy:foo?failOnRestart=true").id("dummy").to("mock:dummy").         }     }. }
