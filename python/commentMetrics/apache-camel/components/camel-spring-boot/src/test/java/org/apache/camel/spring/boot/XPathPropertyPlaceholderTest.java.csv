commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testFilter() throws Exception {     mockOutputFilter.expectedMessageCount(1).     template.sendBody("direct:filter", "<greeting><text>Hello, world!</text></greeting>").     mockOutputFilter.assertIsSatisfied(). }
false;public;0;8;;@Test public void testChoice() throws Exception {     mockOutputChoice.expectedMessageCount(1).     template.sendBody("direct:choice", "<greeting><text>Bye, world!</text></greeting>").     mockOutputChoice.assertIsSatisfied(). }
false;public;0;8;;@Test public void testChoice2() throws Exception {     mockOutputChoice2.expectedMessageCount(1).     template.sendBody("direct:choice2", "<greeting><text>Bye, world!</text></greeting>").     mockOutputChoice2.assertIsSatisfied(). }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:filter").filter().xpath("{{foo}}").log("Passed filter!").to("mock:output-filter").     from("direct:choice").choice().when(xpath("{{bar}}")).log("Passed choice!").to("mock:output-choice").     from("direct:choice2").choice().when().xpath("{{bar}}").log("Passed choice2!").to("mock:output-choice2"). }
false;public;0;24;;@Bean public RouteBuilder routeBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:filter").filter().xpath("{{foo}}").log("Passed filter!").to("mock:output-filter").             from("direct:choice").choice().when(xpath("{{bar}}")).log("Passed choice!").to("mock:output-choice").             from("direct:choice2").choice().when().xpath("{{bar}}").log("Passed choice2!").to("mock:output-choice2").         }     }. }
