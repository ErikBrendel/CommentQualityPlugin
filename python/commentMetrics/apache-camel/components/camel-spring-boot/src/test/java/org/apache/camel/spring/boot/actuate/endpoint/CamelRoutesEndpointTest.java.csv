commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testRoutesEndpoint() throws Exception {     List<RouteEndpointInfo> routes = endpoint.readRoutes().     assertFalse(routes.isEmpty()).     assertEquals(routes.size(), camelContext.getRoutes().size()).     assertTrue(routes.stream().anyMatch(r -> "foo-route".equals(r.getId()))).     assertTrue(routes.stream().anyMatch(r -> "foo-route-group".equals(r.getGroup()))).     assertTrue(routes.stream().anyMatch(r -> r.getProperties().containsKey("key1") && "val1".equals(r.getProperties().get("key1")))).     assertTrue(routes.stream().anyMatch(r -> r.getProperties().containsKey("key2") && "val2".equals(r.getProperties().get("key2")))). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testRouteDumpReadOnly() throws Exception {     endpoint.getRouteDump("foo-route"). }
false;public;0;8;;@Test public void testReadOperation() throws Exception {     Object answer = endpoint.doReadAction("foo-route", ReadAction.INFO).     Assert.assertEquals(RouteEndpointInfo.class, answer.getClass()).     Assert.assertEquals("foo-route", RouteEndpointInfo.class.cast(answer).getId()).     answer = endpoint.doReadAction("foo-route", ReadAction.DETAIL).     Assert.assertEquals(RouteDetailsEndpointInfo.class, answer.getClass()). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testWriteOperationReadOnly() throws Exception {     TimeInfo timeInfo = new TimeInfo().     timeInfo.setAbortAfterTimeout(true).     timeInfo.setTimeout(5L).     endpoint.doWriteAction("foo-route", WriteAction.STOP, timeInfo). }
