commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testServiceCall() throws Exception {     Assert.assertEquals(String.valueOf(SpringBootPropertyUtil.PORT1), template.requestBody("direct:start", null, String.class)).     Assert.assertEquals(String.valueOf(SpringBootPropertyUtil.PORT3), template.requestBody("direct:start", null, String.class)). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").serviceCall("{{service.name}}").     fromF("jetty:http://localhost:%d/hello", SpringBootPropertyUtil.PORT1).transform().constant(SpringBootPropertyUtil.PORT1).     fromF("jetty:http://localhost:%d/hello", SpringBootPropertyUtil.PORT2).transform().constant(SpringBootPropertyUtil.PORT2).     fromF("jetty:http://localhost:%d/hello", SpringBootPropertyUtil.PORT3).transform().constant(SpringBootPropertyUtil.PORT3). }
false;public;0;20;;@Bean public RouteBuilder myRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").serviceCall("{{service.name}}").             fromF("jetty:http://localhost:%d/hello", SpringBootPropertyUtil.PORT1).transform().constant(SpringBootPropertyUtil.PORT1).             fromF("jetty:http://localhost:%d/hello", SpringBootPropertyUtil.PORT2).transform().constant(SpringBootPropertyUtil.PORT2).             fromF("jetty:http://localhost:%d/hello", SpringBootPropertyUtil.PORT3).transform().constant(SpringBootPropertyUtil.PORT3).         }     }. }
false;private,static;0;14;;private static Properties getAllProperties() {     Properties prop = new Properties().     prop.put("service.name", "custom-svc-list").     prop.put("camel.cloud.load-balancer.enabled", false).     prop.put("camel.cloud.service-call.uri", "jetty:http://${service.name}/hello").     prop.put("camel.cloud.service-call.service-discovery", "sd").     prop.put("camel.cloud.service-call.service-filter", "sf").     prop.put("camel.cloud.service-discovery.configurations[sd].services[custom-svc-list]", SpringBootPropertyUtil.getDiscoveryServices()).     prop.put("camel.cloud.service-filter.configurations[sf].blacklist[custom-svc-list]", SpringBootPropertyUtil.getServiceFilterBlacklist()).     prop.put("ribbon.enabled", false).     prop.put("debug", false).     return prop. }
false;public;0;9;;@Bean @Lazy(false) public MutablePropertySources springBootPropertySource() {     MutablePropertySources sources = env.getPropertySources().     sources.addFirst(new PropertiesPropertySource("boot-test-property", CamelCloudServiceCallGlobalConfigurationTest.getAllProperties())).     return sources. }
