commented;modifiers;parameterAmount;loc;comment;code
false;;0;4;;@Bean(name = "myCoolOption") MyOption myCoolBean() {     return new MyOption(). }
false;public;0;3;;public int getId() {     return id. }
false;public;1;3;;public void setId(int id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public MyOption getOption() {     return option. }
false;public;1;3;;public void setOption(MyOption option) {     this.option = option. }
false;public;0;16;;@Test public void testSetCamelProperties() throws Exception {     MyClass target = new MyClass().     Map<String, Object> map = new HashMap<>().     map.put("id", "123").     map.put("name", "Donald Duck").     map.put("option", "myCoolOption").     CamelPropertiesHelper.setCamelProperties(camelContext, target, map, true).     Assert.assertEquals("Should configure all options", 0, map.size()).     Assert.assertEquals(123, target.getId()).     Assert.assertEquals("Donald Duck", target.getName()).     Assert.assertSame(context.getBean("myCoolOption"), target.getOption()). }
false;public;0;16;;@Test public void testSetCamelPropertiesReference() throws Exception {     MyClass target = new MyClass().     Map<String, Object> map = new HashMap<>().     map.put("id", "123").     map.put("name", "Donald Duck").     map.put("option", "#myCoolOption").     CamelPropertiesHelper.setCamelProperties(camelContext, target, map, true).     Assert.assertEquals("Should configure all options", 0, map.size()).     Assert.assertEquals(123, target.getId()).     Assert.assertEquals("Donald Duck", target.getName()).     Assert.assertSame(context.getBean("myCoolOption"), target.getOption()). }
false;public;0;23;;@Test public void testSetCamelPropertiesUnknownOption() throws Exception {     MyClass target = new MyClass().     Map<String, Object> map = new LinkedHashMap<>().     map.put("id", "123").     map.put("name", "Donald Duck").     map.put("option", "#myCoolOption").     map.put("unknown", "foo").     try {         CamelPropertiesHelper.setCamelProperties(camelContext, target, map, true).         Assert.fail("Should have thrown exception").     } catch (IllegalArgumentException e) {         // expected         Assert.assertTrue(e.getMessage().startsWith("Cannot configure option [unknown] with value [foo]")).     }     Assert.assertEquals("Should configure the three first options", 1, map.size()).     Assert.assertEquals(123, target.getId()).     Assert.assertEquals("Donald Duck", target.getName()).     Assert.assertSame(context.getBean("myCoolOption"), target.getOption()). }
false;public;0;17;;@Test public void testSetCamelPropertiesUnknownOptionIgnore() throws Exception {     MyClass target = new MyClass().     Map<String, Object> map = new LinkedHashMap<>().     map.put("id", "123").     map.put("name", "Donald Duck").     map.put("option", "#myCoolOption").     map.put("unknown", "foo").     CamelPropertiesHelper.setCamelProperties(camelContext, target, map, false).     Assert.assertEquals("Should configure the three first options", 1, map.size()).     Assert.assertEquals(123, target.getId()).     Assert.assertEquals("Donald Duck", target.getName()).     Assert.assertSame(context.getBean("myCoolOption"), target.getOption()). }
