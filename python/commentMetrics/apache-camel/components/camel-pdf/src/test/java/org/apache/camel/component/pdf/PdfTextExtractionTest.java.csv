commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public boolean matches(Exchange exchange) {     Object body = exchange.getIn().getBody().     assertThat(body, instanceOf(String.class)).     assertThat((String) body, containsString(expectedText)).     return true. }
false;public;0;28;;@Test public void testExtractText() throws Exception {     final String expectedText = "Test string".     PDDocument document = new PDDocument().     PDPage page = new PDPage(PDRectangle.A4).     document.addPage(page).     PDPageContentStream contentStream = new PDPageContentStream(document, page).     contentStream.setFont(PDType1Font.HELVETICA, 12).     contentStream.beginText().     contentStream.moveTextPositionByAmount(20, 400).     contentStream.drawString(expectedText).     contentStream.endText().     contentStream.close().     template.sendBody("direct:start", document).     resultEndpoint.setExpectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Object body = exchange.getIn().getBody().             assertThat(body, instanceOf(String.class)).             assertThat((String) body, containsString(expectedText)).             return true.         }     }).     resultEndpoint.assertIsSatisfied(). }
false;public;1;7;;@Override public boolean matches(Exchange exchange) {     Object body = exchange.getIn().getBody().     assertThat(body, instanceOf(String.class)).     assertThat((String) body, containsString(expectedText)).     return true. }
false;public;0;47;;@Test public void testExtractTextFromEncrypted() throws Exception {     final String ownerPass = "ownerPass".     final String userPass = "userPass".     AccessPermission accessPermission = new AccessPermission().     accessPermission.setCanExtractContent(false).     StandardProtectionPolicy protectionPolicy = new StandardProtectionPolicy(ownerPass, userPass, accessPermission).     protectionPolicy.setEncryptionKeyLength(128).     PDDocument document = new PDDocument().     final String expectedText = "Test string".     PDPage page = new PDPage(PDRectangle.A4).     document.addPage(page).     PDPageContentStream contentStream = new PDPageContentStream(document, page).     contentStream.setFont(PDType1Font.HELVETICA, 12).     contentStream.beginText().     contentStream.moveTextPositionByAmount(20, 400).     contentStream.drawString(expectedText).     contentStream.endText().     contentStream.close().     document.protect(protectionPolicy).     ByteArrayOutputStream output = new ByteArrayOutputStream().     document.save(output).     // Encryption happens after saving.     PDDocument encryptedDocument = PDDocument.load(new ByteArrayInputStream(output.toByteArray()), userPass).     template.sendBodyAndHeader("direct:start", encryptedDocument, PdfHeaderConstants.DECRYPTION_MATERIAL_HEADER_NAME, new StandardDecryptionMaterial(userPass)).     resultEndpoint.setExpectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Object body = exchange.getIn().getBody().             assertThat(body, instanceOf(String.class)).             assertThat((String) body, containsString(expectedText)).             return true.         }     }).     resultEndpoint.assertIsSatisfied().     document.isEncrypted(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("pdf:extractText").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("pdf:extractText").to("mock:result").         }     }. }
