# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultLineBuilderStrategy -> @Override     public Collection<String> buildLines(Collection<String> splittedText) throws IOException;1429432823;Builds lines from words. Utilizes the same behaviour as office software:_<ul>_<li>If word doesn't fit in current line, and current lines contains other words, then_it will be moved to new line.</td>_<li>Word doesn't fit in the line and line does not contain other words, then word will be_slitted, and split index will be on max amount of characters that fits in the line </li>_</ul>;@Override_    public Collection<String> buildLines(Collection<String> splittedText) throws IOException {_        LinkedList<String> wordsList = new LinkedList<>(splittedText)__        Collection<String> lines = new ArrayList<>()__        LineBuilder currentLine = new LineBuilder()__        float allowedLineWidth = getAllowedLineWidth()__        while (!wordsList.isEmpty()) {_            String word = wordsList.removeFirst()__            if (isWordFitInCurrentLine(currentLine, word, allowedLineWidth)) {_                currentLine.appendWord(word)__                if (wordsList.isEmpty()) {_                    lines.add(currentLine.buildLine())__                }_            } else if (currentLine.getWordsCount() != 0) {_                lines.add(currentLine.buildLine())__                wordsList.addFirst(word)__            } else {_                int splitIndex = findSplitIndex(word, allowedLineWidth)__                currentLine.appendWord(word.substring(0, splitIndex))__                lines.add(currentLine.buildLine())__                wordsList.addFirst(word.substring(splitIndex))__            }_        }_        return lines__    };builds,lines,from,words,utilizes,the,same,behaviour,as,office,software,ul,li,if,word,doesn,t,fit,in,current,line,and,current,lines,contains,other,words,then,it,will,be,moved,to,new,line,td,li,word,doesn,t,fit,in,the,line,and,line,does,not,contain,other,words,then,word,will,be,slitted,and,split,index,will,be,on,max,amount,of,characters,that,fits,in,the,line,li,ul;override,public,collection,string,build,lines,collection,string,splitted,text,throws,ioexception,linked,list,string,words,list,new,linked,list,splitted,text,collection,string,lines,new,array,list,line,builder,current,line,new,line,builder,float,allowed,line,width,get,allowed,line,width,while,words,list,is,empty,string,word,words,list,remove,first,if,is,word,fit,in,current,line,current,line,word,allowed,line,width,current,line,append,word,word,if,words,list,is,empty,lines,add,current,line,build,line,else,if,current,line,get,words,count,0,lines,add,current,line,build,line,words,list,add,first,word,else,int,split,index,find,split,index,word,allowed,line,width,current,line,append,word,word,substring,0,split,index,lines,add,current,line,build,line,words,list,add,first,word,substring,split,index,return,lines
DefaultLineBuilderStrategy -> @Override     public Collection<String> buildLines(Collection<String> splittedText) throws IOException;1429433428;Builds lines from words. Utilizes the same behaviour as office software:_<ul>_<li>If word doesn't fit in current line, and current lines contains other words, then_it will be moved to new line.</td>_<li>Word doesn't fit in the line and line does not contain other words, then word will be_slitted, and split index will be on max amount of characters that fits in the line </li>_</ul>;@Override_    public Collection<String> buildLines(Collection<String> splittedText) throws IOException {_        LinkedList<String> wordsList = new LinkedList<String>(splittedText)__        Collection<String> lines = new ArrayList<String>()__        LineBuilder currentLine = new LineBuilder()__        float allowedLineWidth = getAllowedLineWidth()__        while (!wordsList.isEmpty()) {_            String word = wordsList.removeFirst()__            if (isWordFitInCurrentLine(currentLine, word, allowedLineWidth)) {_                currentLine.appendWord(word)__                if (wordsList.isEmpty()) {_                    lines.add(currentLine.buildLine())__                }_            } else if (currentLine.getWordsCount() != 0) {_                lines.add(currentLine.buildLine())__                wordsList.addFirst(word)__            } else {_                int splitIndex = findSplitIndex(word, allowedLineWidth)__                currentLine.appendWord(word.substring(0, splitIndex))__                lines.add(currentLine.buildLine())__                wordsList.addFirst(word.substring(splitIndex))__            }_        }_        return lines__    };builds,lines,from,words,utilizes,the,same,behaviour,as,office,software,ul,li,if,word,doesn,t,fit,in,current,line,and,current,lines,contains,other,words,then,it,will,be,moved,to,new,line,td,li,word,doesn,t,fit,in,the,line,and,line,does,not,contain,other,words,then,word,will,be,slitted,and,split,index,will,be,on,max,amount,of,characters,that,fits,in,the,line,li,ul;override,public,collection,string,build,lines,collection,string,splitted,text,throws,ioexception,linked,list,string,words,list,new,linked,list,string,splitted,text,collection,string,lines,new,array,list,string,line,builder,current,line,new,line,builder,float,allowed,line,width,get,allowed,line,width,while,words,list,is,empty,string,word,words,list,remove,first,if,is,word,fit,in,current,line,current,line,word,allowed,line,width,current,line,append,word,word,if,words,list,is,empty,lines,add,current,line,build,line,else,if,current,line,get,words,count,0,lines,add,current,line,build,line,words,list,add,first,word,else,int,split,index,find,split,index,word,allowed,line,width,current,line,append,word,word,substring,0,split,index,lines,add,current,line,build,line,words,list,add,first,word,substring,split,index,return,lines
DefaultLineBuilderStrategy -> @Override     public Collection<String> buildLines(Collection<String> splittedText) throws IOException;1461921869;Builds lines from words. Utilizes the same behaviour as office software:_<ul>_<li>If word doesn't fit in current line, and current lines contains other words, then_it will be moved to new line.</td>_<li>Word doesn't fit in the line and line does not contain other words, then word will be_slitted, and split index will be on max amount of characters that fits in the line </li>_</ul>;@Override_    public Collection<String> buildLines(Collection<String> splittedText) throws IOException {_        LinkedList<String> wordsList = new LinkedList<String>(splittedText)__        Collection<String> lines = new ArrayList<String>()__        LineBuilder currentLine = new LineBuilder()__        float allowedLineWidth = getAllowedLineWidth()__        while (!wordsList.isEmpty()) {_            String word = wordsList.removeFirst()__            if (isWordFitInCurrentLine(currentLine, word, allowedLineWidth)) {_                currentLine.appendWord(word)__                if (wordsList.isEmpty()) {_                    lines.add(currentLine.buildLine())__                }_            } else if (currentLine.getWordsCount() != 0) {_                lines.add(currentLine.buildLine())__                wordsList.addFirst(word)__            } else {_                int splitIndex = findSplitIndex(word, allowedLineWidth)__                currentLine.appendWord(word.substring(0, splitIndex))__                lines.add(currentLine.buildLine())__                wordsList.addFirst(word.substring(splitIndex))__            }_        }_        return lines__    };builds,lines,from,words,utilizes,the,same,behaviour,as,office,software,ul,li,if,word,doesn,t,fit,in,current,line,and,current,lines,contains,other,words,then,it,will,be,moved,to,new,line,td,li,word,doesn,t,fit,in,the,line,and,line,does,not,contain,other,words,then,word,will,be,slitted,and,split,index,will,be,on,max,amount,of,characters,that,fits,in,the,line,li,ul;override,public,collection,string,build,lines,collection,string,splitted,text,throws,ioexception,linked,list,string,words,list,new,linked,list,string,splitted,text,collection,string,lines,new,array,list,string,line,builder,current,line,new,line,builder,float,allowed,line,width,get,allowed,line,width,while,words,list,is,empty,string,word,words,list,remove,first,if,is,word,fit,in,current,line,current,line,word,allowed,line,width,current,line,append,word,word,if,words,list,is,empty,lines,add,current,line,build,line,else,if,current,line,get,words,count,0,lines,add,current,line,build,line,words,list,add,first,word,else,int,split,index,find,split,index,word,allowed,line,width,current,line,append,word,word,substring,0,split,index,lines,add,current,line,build,line,words,list,add,first,word,substring,split,index,return,lines
DefaultLineBuilderStrategy -> @Override     public Collection<String> buildLines(Collection<String> splittedText) throws IOException;1524063141;Builds lines from words. Utilizes the same behaviour as office software:_<ul>_<li>If word doesn't fit in current line, and current lines contains other words, then_it will be moved to new line.</td>_<li>Word doesn't fit in the line and line does not contain other words, then word will be_slitted, and split index will be on max amount of characters that fits in the line </li>_</ul>;@Override_    public Collection<String> buildLines(Collection<String> splittedText) throws IOException {_        LinkedList<String> wordsList = new LinkedList<>(splittedText)__        Collection<String> lines = new ArrayList<>()__        LineBuilder currentLine = new LineBuilder()__        float allowedLineWidth = getAllowedLineWidth()__        while (!wordsList.isEmpty()) {_            String word = wordsList.removeFirst()__            if (isWordFitInCurrentLine(currentLine, word, allowedLineWidth)) {_                currentLine.appendWord(word)__                if (wordsList.isEmpty()) {_                    lines.add(currentLine.buildLine())__                }_            } else if (currentLine.getWordsCount() != 0) {_                lines.add(currentLine.buildLine())__                wordsList.addFirst(word)__            } else {_                int splitIndex = findSplitIndex(word, allowedLineWidth)__                currentLine.appendWord(word.substring(0, splitIndex))__                lines.add(currentLine.buildLine())__                wordsList.addFirst(word.substring(splitIndex))__            }_        }_        return lines__    };builds,lines,from,words,utilizes,the,same,behaviour,as,office,software,ul,li,if,word,doesn,t,fit,in,current,line,and,current,lines,contains,other,words,then,it,will,be,moved,to,new,line,td,li,word,doesn,t,fit,in,the,line,and,line,does,not,contain,other,words,then,word,will,be,slitted,and,split,index,will,be,on,max,amount,of,characters,that,fits,in,the,line,li,ul;override,public,collection,string,build,lines,collection,string,splitted,text,throws,ioexception,linked,list,string,words,list,new,linked,list,splitted,text,collection,string,lines,new,array,list,line,builder,current,line,new,line,builder,float,allowed,line,width,get,allowed,line,width,while,words,list,is,empty,string,word,words,list,remove,first,if,is,word,fit,in,current,line,current,line,word,allowed,line,width,current,line,append,word,word,if,words,list,is,empty,lines,add,current,line,build,line,else,if,current,line,get,words,count,0,lines,add,current,line,build,line,words,list,add,first,word,else,int,split,index,find,split,index,word,allowed,line,width,current,line,append,word,word,substring,0,split,index,lines,add,current,line,build,line,words,list,add,first,word,substring,split,index,return,lines
