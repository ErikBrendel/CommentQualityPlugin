commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public PdfOperation getOperation() {     return operation. }
false;public;1;3;;public void setOperation(String operation) {     this.operation = PdfOperation.valueOf(operation). }
false;public;1;3;;public void setOperation(PdfOperation operation) {     this.operation = operation. }
false;public;0;3;;public int getMarginTop() {     return marginTop. }
true;public;1;3;/**  * Margin top in pixels  */ ;/**  * Margin top in pixels  */ public void setMarginTop(int marginTop) {     this.marginTop = marginTop. }
false;public;0;3;;public int getMarginBottom() {     return marginBottom. }
true;public;1;3;/**  * Margin bottom in pixels  */ ;/**  * Margin bottom in pixels  */ public void setMarginBottom(int marginBottom) {     this.marginBottom = marginBottom. }
false;public;0;3;;public int getMarginLeft() {     return marginLeft. }
true;public;1;3;/**  * Margin left in pixels  */ ;/**  * Margin left in pixels  */ public void setMarginLeft(int marginLeft) {     this.marginLeft = marginLeft. }
false;public;0;3;;public int getMarginRight() {     return marginRight. }
true;public;1;3;/**  * Margin right in pixels  */ ;/**  * Margin right in pixels  */ public void setMarginRight(int marginRight) {     this.marginRight = marginRight. }
false;public;0;3;;public float getFontSize() {     return fontSize. }
true;public;1;3;/**  * Font size in pixels  */ ;/**  * Font size in pixels  */ public void setFontSize(float fontSize) {     this.fontSize = fontSize. }
false;public;0;3;;public PDRectangle getPageSize() {     return pageSize. }
true;public;1;3;/**  * Page size  */ ;/**  * Page size  */ public void setPageSize(PDRectangle pageSize) {     this.pageSize = pageSize. }
false;public;1;3;;public void setPageSize(String pageSize) {     setPageSize(PAGE_MAP.get(pageSize)). }
false;public;0;3;;public PDFont getFont() {     return font. }
true;public;1;3;/**  * Font  */ ;/**  * Font  */ public void setFont(PDFont font) {     this.font = font. }
false;public;1;3;;public void setFont(String font) {     setFont(Standard14Fonts.getByName(font)). }
false;public;0;3;;public TextProcessingFactory getTextProcessingFactory() {     return textProcessingFactory. }
true;public;1;3;/**  * Text processing to use.  * <ul>  *   <li>autoFormatting: Text is getting sliced by words, then max amount of words that fits in the line will  *   be written into pdf document. With this strategy all words that doesn't fit in the line will be moved to the new line.</li>  *   <li>lineTermination: Builds set of classes for line-termination writing strategy. Text getting sliced by line termination symbol  *   and then it will be written regardless it fits in the line or not.</li>  * </ul>  */ ;/**  * Text processing to use.  * <ul>  *   <li>autoFormatting: Text is getting sliced by words, then max amount of words that fits in the line will  *   be written into pdf document. With this strategy all words that doesn't fit in the line will be moved to the new line.</li>  *   <li>lineTermination: Builds set of classes for line-termination writing strategy. Text getting sliced by line termination symbol  *   and then it will be written regardless it fits in the line or not.</li>  * </ul>  */ public void setTextProcessingFactory(TextProcessingFactory textProcessingFactory) {     this.textProcessingFactory = textProcessingFactory. }
false;public;1;3;;public void setTextProcessingFactory(String textProcessingFactory) {     this.textProcessingFactory = TextProcessingFactory.valueOf(textProcessingFactory). }
