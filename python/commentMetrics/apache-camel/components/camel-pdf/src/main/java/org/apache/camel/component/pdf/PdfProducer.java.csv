commented;modifiers;parameterAmount;loc;comment;code
false;public;1;22;;@Override public void process(Exchange exchange) throws Exception {     Object result.     switch(pdfConfiguration.getOperation()) {         case append:             result = doAppend(exchange).             break.         case create:             result = doCreate(exchange).             break.         case extractText:             result = doExtractText(exchange).             break.         default:             throw new IllegalArgumentException(String.format("Unknown operation %s", pdfConfiguration.getOperation())).     }     // propagate headers     exchange.getOut().setHeaders(exchange.getIn().getHeaders()).     exchange.getOut().setAttachments(exchange.getIn().getAttachments()).     // and set result     exchange.getOut().setBody(result). }
false;private;1;21;;private Object doAppend(Exchange exchange) throws IOException {     log.debug("Got {} operation, going to append text to provided pdf.", pdfConfiguration.getOperation()).     String body = exchange.getIn().getBody(String.class).     PDDocument document = exchange.getIn().getHeader(PDF_DOCUMENT_HEADER_NAME, PDDocument.class).     if (document == null) {         throw new IllegalArgumentException(String.format("%s header is expected for append operation", PDF_DOCUMENT_HEADER_NAME)).     }     if (document.isEncrypted()) {         document.setAllSecurityToBeRemoved(true).     }     ProtectionPolicy protectionPolicy = exchange.getIn().getHeader(PROTECTION_POLICY_HEADER_NAME, ProtectionPolicy.class).     appendToPdfDocument(body, document, protectionPolicy).     OutputStream byteArrayOutputStream = new ByteArrayOutputStream().     document.save(byteArrayOutputStream).     return byteArrayOutputStream. }
false;private;1;8;;private String doExtractText(Exchange exchange) throws IOException {     log.debug("Got {} operation, going to extract text from provided pdf.", pdfConfiguration.getOperation()).     PDDocument document = exchange.getIn().getBody(PDDocument.class).     PDFTextStripper pdfTextStripper = new PDFTextStripper().     return pdfTextStripper.getText(document). }
false;private;1;12;;private OutputStream doCreate(Exchange exchange) throws IOException {     log.debug("Got {} operation, going to create and write provided string to pdf document.", pdfConfiguration.getOperation()).     String body = exchange.getIn().getBody(String.class).     PDDocument document = new PDDocument().     StandardProtectionPolicy protectionPolicy = exchange.getIn().getHeader(PROTECTION_POLICY_HEADER_NAME, StandardProtectionPolicy.class).     appendToPdfDocument(body, document, protectionPolicy).     OutputStream byteArrayOutputStream = new ByteArrayOutputStream().     document.save(byteArrayOutputStream).     return byteArrayOutputStream. }
false;private;3;8;;private void appendToPdfDocument(String text, PDDocument document, ProtectionPolicy protectionPolicy) throws IOException {     Collection<String> words = splitStrategy.split(text).     Collection<String> lines = lineBuilderStrategy.buildLines(words).     writeStrategy.write(lines, document).     if (protectionPolicy != null) {         document.protect(protectionPolicy).     } }
false;private;1;15;;private TextProcessingAbstractFactory createTextProcessingFactory(PdfConfiguration pdfConfiguration) {     TextProcessingAbstractFactory result.     switch(pdfConfiguration.getTextProcessingFactory()) {         case autoFormatting:             result = new AutoFormattedWriterAbstractFactory(pdfConfiguration).             break.         case lineTermination:             result = new LineTerminationWriterAbstractFactory(pdfConfiguration).             break.         default:             throw new IllegalArgumentException(String.format("Unknown text processing factory %s", pdfConfiguration.getTextProcessingFactory())).     }     return result. }
