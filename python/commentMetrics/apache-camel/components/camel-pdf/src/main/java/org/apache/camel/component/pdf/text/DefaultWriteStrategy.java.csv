commented;modifiers;parameterAmount;loc;comment;code
false;public;2;25;;@Override public PDDocument write(Collection<String> lines, PDDocument document) throws IOException {     PDPage page = new PDPage(pdfConfiguration.getPageSize()).     document.addPage(page).     float x = pdfConfiguration.getMarginLeft().     float y = page.getMediaBox().getHeight() - pdfConfiguration.getMarginTop().     float averageFontHeight = PdfUtils.getAverageFontHeight(pdfConfiguration.getFont(), pdfConfiguration.getFontSize()).     float lineSpacing = averageFontHeight * 2.     PDPageContentStream contentStream = initializeContentStream(document, page).     for (String line : lines) {         writeLine(x, y, line, contentStream).         y -= lineSpacing.         if (goToNextPage(y)) {             contentStream.close().             page = new PDPage(pdfConfiguration.getPageSize()).             document.addPage(page).             contentStream = initializeContentStream(document, page).             y = page.getMediaBox().getHeight() - pdfConfiguration.getMarginTop().         }     }     contentStream.close().     return document. }
false;private;1;3;;private boolean goToNextPage(float y) {     return y < pdfConfiguration.getMarginBottom(). }
false;private;4;6;;private void writeLine(float x, float y, String currentLine, PDPageContentStream contentStream) throws IOException {     contentStream.beginText().     contentStream.moveTextPositionByAmount(x, y).     contentStream.drawString(currentLine).     contentStream.endText(). }
false;private;2;5;;private PDPageContentStream initializeContentStream(PDDocument document, PDPage page) throws IOException {     PDPageContentStream contentStream = new PDPageContentStream(document, page).     contentStream.setFont(pdfConfiguration.getFont(), pdfConfiguration.getFontSize()).     return contentStream. }
