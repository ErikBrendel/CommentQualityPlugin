commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testFilterOutNonCamelPosts() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(6).     mock.assertIsSatisfied(). }
false;protected;1;4;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("myFilterBean", new FilterBean()). }
false;public;0;9;;public void configure() throws Exception {     // See RssFilterWithXPathTest for an example of how to do this with XPath     // START SNIPPET: ex1     // only entries with Camel in the title will get through the filter     from("rss:file:src/test/data/rss20.xml?splitEntries=true&consumer.delay=100").filter().method("myFilterBean", "titleContainsCamel").to("mock:result"). // END SNIPPET: ex1 }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // See RssFilterWithXPathTest for an example of how to do this with XPath             // START SNIPPET: ex1             // only entries with Camel in the title will get through the filter             from("rss:file:src/test/data/rss20.xml?splitEntries=true&consumer.delay=100").filter().method("myFilterBean", "titleContainsCamel").to("mock:result").         // END SNIPPET: ex1         }     }. }
false;public;1;4;;public boolean titleContainsCamel(@Body SyndFeed feed) {     SyndEntry firstEntry = (SyndEntry) feed.getEntries().get(0).     return firstEntry.getTitle().contains("Camel"). }
