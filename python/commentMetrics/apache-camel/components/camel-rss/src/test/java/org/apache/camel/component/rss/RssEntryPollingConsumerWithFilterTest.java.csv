commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testListOfEntriesIsSplitIntoPieces() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // two entries were published after Fri, 31 Oct 2008 12:02:21 -0500     mock.expectedMessageCount(2).     mock.assertIsSatisfied(). }
false;protected;1;9;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // timestamp from the feed to use as base     // Fri, 31 Oct 2008 12:02:21 -0500     Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT-5:00")).     cal.set(2008, Calendar.OCTOBER, 31, 12, 02, 21).     registry.bind("myBean", new MyBean(cal.getTime())). }
false;public;0;4;;public void configure() throws Exception {     from("rss:file:src/test/data/rss20.xml?splitEntries=true&consumer.delay=100").filter().method("myBean", "isAfterDate").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("rss:file:src/test/data/rss20.xml?splitEntries=true&consumer.delay=100").filter().method("myBean", "isAfterDate").to("mock:result").         }     }. }
false;public;1;6;;public boolean isAfterDate(Exchange ex) {     SyndFeed feed = ex.getIn().getBody(SyndFeed.class).     assertTrue(feed.getEntries().size() == 1).     SyndEntry entry = (SyndEntry) feed.getEntries().get(0).     return entry.getPublishedDate().after(time). }
