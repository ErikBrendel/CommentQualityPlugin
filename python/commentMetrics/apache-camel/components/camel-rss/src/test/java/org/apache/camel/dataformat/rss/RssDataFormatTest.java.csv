commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testMarshalling() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:marshal").     mock.expectedMessageCount(1).     mock.message(0).body(String.class).contains(feedXml).     mock.assertIsSatisfied(). }
false;public;0;8;;@Test public void testUnmarshalling() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:unmarshal").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(SyndFeed.class).     mock.message(0).body(SyndFeed.class).equals(feed).     mock.assertIsSatisfied(). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     feed = RssUtils.createFeed("file:src/test/data/rss20.xml").     feedXml = RssConverter.feedToXml(feed).     super.setUp(). }
false;public;0;6;;public void configure() throws Exception {     // START SNIPPET: ex     from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=1000").marshal().rss().to("mock:marshal").     // END SNIPPET: ex     from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=1500").marshal().rss().unmarshal().rss().to("mock:unmarshal"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: ex             from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=1000").marshal().rss().to("mock:marshal").             // END SNIPPET: ex             from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=1500").marshal().rss().unmarshal().rss().to("mock:unmarshal").         }     }. }
