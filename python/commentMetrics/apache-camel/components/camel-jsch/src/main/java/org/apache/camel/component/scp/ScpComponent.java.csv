commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;5;;@Override protected GenericFileEndpoint<ScpFile> buildFileEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     int query = uri.indexOf("?").     return new ScpEndpoint(uri, this, new ScpConfiguration(new URI(query >= 0 ? uri.substring(0, query) : uri))). }
false;protected;1;3;;protected void afterPropertiesSet(GenericFileEndpoint<ScpFile> endpoint) throws Exception { // noop }
false;protected;0;6;;@Override protected void doStart() throws Exception {     super.doStart().     initJsch(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     super.doStop(). // noop }
false;public;0;3;;public boolean isVerboseLogging() {     return verboseLogging. }
true;public;1;3;/**  * JSCH is verbose logging out of the box. Therefore we turn the logging down to DEBUG logging by default.  * But setting this option to <tt>true</tt> turns on the verbose logging again.  */ ;/**  * JSCH is verbose logging out of the box. Therefore we turn the logging down to DEBUG logging by default.  * But setting this option to <tt>true</tt> turns on the verbose logging again.  */ public void setVerboseLogging(boolean verboseLogging) {     this.verboseLogging = verboseLogging. }
false;public;1;6;;@Override public boolean isEnabled(int level) {     return level == FATAL || level == ERROR ? ScpComponent.this.log.isErrorEnabled() : level == WARN ? ScpComponent.this.log.isWarnEnabled() : level == INFO ? ScpComponent.this.log.isInfoEnabled() : ScpComponent.this.log.isDebugEnabled(). }
false;public;2;17;;@Override public void log(int level, String message) {     if (level == FATAL || level == ERROR) {         ScpComponent.this.log.error("[JSCH] {}", message).     } else if (level == WARN) {         ScpComponent.this.log.warn("[JSCH] {}", message).     } else if (level == INFO) {         // JSCH is verbose at INFO logging so allow to turn the noise down and log at DEBUG by default         if (isVerboseLogging()) {             ScpComponent.this.log.info("[JSCH] {}", message).         } else {             ScpComponent.this.log.debug("[JSCH] {}", message).         }     } else {         ScpComponent.this.log.debug("[JSCH] {}", message).     } }
false;protected;0;29;;protected void initJsch() {     JSch.setConfig("StrictHostKeyChecking", "yes").     JSch.setLogger(new com.jcraft.jsch.Logger() {          @Override         public boolean isEnabled(int level) {             return level == FATAL || level == ERROR ? ScpComponent.this.log.isErrorEnabled() : level == WARN ? ScpComponent.this.log.isWarnEnabled() : level == INFO ? ScpComponent.this.log.isInfoEnabled() : ScpComponent.this.log.isDebugEnabled().         }          @Override         public void log(int level, String message) {             if (level == FATAL || level == ERROR) {                 ScpComponent.this.log.error("[JSCH] {}", message).             } else if (level == WARN) {                 ScpComponent.this.log.warn("[JSCH] {}", message).             } else if (level == INFO) {                 // JSCH is verbose at INFO logging so allow to turn the noise down and log at DEBUG by default                 if (isVerboseLogging()) {                     ScpComponent.this.log.info("[JSCH] {}", message).                 } else {                     ScpComponent.this.log.debug("[JSCH] {}", message).                 }             } else {                 ScpComponent.this.log.debug("[JSCH] {}", message).             }         }     }). }
