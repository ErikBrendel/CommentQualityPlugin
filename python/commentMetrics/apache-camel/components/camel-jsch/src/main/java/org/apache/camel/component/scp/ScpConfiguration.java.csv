commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void setDefaultPort() {     setPort(DEFAULT_SFTP_PORT). }
false;public;0;3;;public String getKnownHostsFile() {     return knownHostsFile. }
true;public;1;3;/**  * Sets the known_hosts file, so that the jsch endpoint can do host key verification.  * You can prefix with classpath: to load the file from classpath instead of file system.  */ ;/**  * Sets the known_hosts file, so that the jsch endpoint can do host key verification.  * You can prefix with classpath: to load the file from classpath instead of file system.  */ public void setKnownHostsFile(String knownHostsFile) {     this.knownHostsFile = knownHostsFile. }
false;public;0;3;;public boolean isUseUserKnownHostsFile() {     return useUserKnownHostsFile. }
true;public;1;3;/**  * If knownHostFile has not been explicit configured, then use the host file from System.getProperty("user.home") + "/.ssh/known_hosts"  */ ;/**  * If knownHostFile has not been explicit configured, then use the host file from System.getProperty("user.home") + "/.ssh/known_hosts"  */ public void setUseUserKnownHostsFile(boolean useUserKnownHostsFile) {     this.useUserKnownHostsFile = useUserKnownHostsFile. }
false;public;0;3;;public String getPrivateKeyFile() {     return privateKeyFile. }
true;public;1;3;/**  * Set the private key file to that the endpoint can do private key verification.  * You can prefix with classpath: to load the file from classpath instead of file system.  */ ;/**  * Set the private key file to that the endpoint can do private key verification.  * You can prefix with classpath: to load the file from classpath instead of file system.  */ public void setPrivateKeyFile(String privateKeyFile) {     this.privateKeyFile = privateKeyFile. }
false;public;0;3;;public byte[] getPrivateKeyBytes() {     return privateKeyBytes. }
true;public;1;3;/**  * Set the private key bytes to that the endpoint can do private key verification.  * This must be used only if privateKeyFile wasn't set. Otherwise the file will have the priority.  */ ;/**  * Set the private key bytes to that the endpoint can do private key verification.  * This must be used only if privateKeyFile wasn't set. Otherwise the file will have the priority.  */ public void setPrivateKeyBytes(byte[] privateKeyBytes) {     this.privateKeyBytes = privateKeyBytes. }
false;public;0;3;;public String getPrivateKeyFilePassphrase() {     return privateKeyFilePassphrase. }
true;public;1;3;/**  * Set the private key file passphrase to that the endpoint can do private key verification.  */ ;/**  * Set the private key file passphrase to that the endpoint can do private key verification.  */ public void setPrivateKeyFilePassphrase(String privateKeyFilePassphrase) {     this.privateKeyFilePassphrase = privateKeyFilePassphrase. }
false;public;0;3;;public String getStrictHostKeyChecking() {     return strictHostKeyChecking. }
true;public;1;3;/**  * Sets whether to use strict host key checking. Possible values are: no, yes  */ ;/**  * Sets whether to use strict host key checking. Possible values are: no, yes  */ public void setStrictHostKeyChecking(String strictHostKeyChecking) {     this.strictHostKeyChecking = strictHostKeyChecking. }
true;public;1;14;/**  * Allows you to set chmod on the stored file. For example chmod=664.  */ ;/**  * Allows you to set chmod on the stored file. For example chmod=664.  */ public void setChmod(String chmod) {     if (chmod.length() == 3) {         for (byte c : chmod.getBytes()) {             if (c < '0' || c > '7') {                 chmod = DEFAULT_MOD.                 break.             }         }     } else {         chmod = DEFAULT_MOD.     }     // May be interesting to log the fallback to DEFAULT_MOD for invalid configuration     this.chmod = chmod. }
false;public;0;3;;public String getChmod() {     return chmod. }
true;public;1;3;/**  * Set a comma separated list of ciphers that will be used in order of preference.  * Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc.  * If not specified the default list from JSCH will be used.  */ ;/**  * Set a comma separated list of ciphers that will be used in order of preference.  * Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc.  * If not specified the default list from JSCH will be used.  */ public void setCiphers(String ciphers) {     this.ciphers = ciphers. }
false;public;0;3;;public String getCiphers() {     return ciphers. }
true;public;1;3;/**  * Set a comma separated list of authentications that will be used in order of preference.  * Possible authentication methods are defined by JCraft JSCH. Some examples include: gssapi-with-mic,publickey,keyboard-interactive,password  * If not specified the JSCH and/or system defaults will be used.  */ ;/**  * Set a comma separated list of authentications that will be used in order of preference.  * Possible authentication methods are defined by JCraft JSCH. Some examples include: gssapi-with-mic,publickey,keyboard-interactive,password  * If not specified the JSCH and/or system defaults will be used.  */ public void setPreferredAuthentications(final String preferredAuthentications) {     this.preferredAuthentications = preferredAuthentications. }
false;public;0;3;;public String getPreferredAuthentications() {     return preferredAuthentications. }
