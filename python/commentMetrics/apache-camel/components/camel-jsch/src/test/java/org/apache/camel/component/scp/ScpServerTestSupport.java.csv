commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected int getPort() {     return port. }
false;protected;0;3;;protected SshServer getSshd() {     return sshd. }
false;public,static;0;4;;@BeforeClass public static void initPort() throws Exception {     port = AvailablePortFinder.getNextAvailable(21000). }
false;public;0;10;;@Override @Before public void setUp() throws Exception {     deleteDirectory(getScpPath()).     createDirectory(getScpPath()).     setupComplete = startSshd().     setupKnownHosts().     super.setUp(). }
false;public;0;16;;@Override @After public void tearDown() throws Exception {     super.tearDown().     if (sshd != null) {         try {             sshd.stop(true).             sshd = null.         } catch (Exception e) {         // ignore while shutting down as we could be polling during shutdown         // and get errors when the ssh server is stopping.         }     }     deleteDirectory(getScpPath()). }
false;protected,final;0;5;;protected final String getScpPath() {     // (easier to debug and avoid interference)     return SCP_ROOT_DIR + "/" + getClass().getSimpleName(). }
false;protected;0;3;;protected String getScpUri() {     return "scp://localhost:" + getPort() + "/" + getScpPath(). }
false;public;3;5;;@Override public boolean authenticate(String username, String password, ServerSession session) {     // dummy authentication: allow any user whose password is the same as the username     return username != null && username.equals(password). }
false;public;3;4;;@Override public boolean authenticate(String username, PublicKey key, ServerSession session) {     return true. }
false;protected;0;27;;protected boolean startSshd() {     sshd = SshServer.setUpDefaultServer().     sshd.setPort(getPort()).     sshd.setKeyPairProvider(new FileKeyPairProvider(Paths.get("src/test/resources/hostkey.pem"))).     sshd.setSubsystemFactories(Arrays.asList(new SftpSubsystemFactory())).     sshd.setCommandFactory(new ScpCommandFactory()).     sshd.setPasswordAuthenticator(new PasswordAuthenticator() {          @Override         public boolean authenticate(String username, String password, ServerSession session) {             // dummy authentication: allow any user whose password is the same as the username             return username != null && username.equals(password).         }     }).     sshd.setPublickeyAuthenticator(new PublickeyAuthenticator() {          @Override         public boolean authenticate(String username, PublicKey key, ServerSession session) {             return true.         }     }).     try {         sshd.start().         return true.     } catch (IOException e) {         LOG.info("Failed to start ssh server.", e).     }     return false. }
false;public;0;4;;@Override public String getPassphrase() {     return null. }
false;public;0;4;;@Override public String getPassword() {     return "admin". }
false;public;1;4;;@Override public boolean promptPassword(String message) {     return true. }
false;public;1;4;;@Override public boolean promptPassphrase(String message) {     return false. }
false;public;1;5;;@Override public boolean promptYesNo(String message) {     // accept host authenticity     return true. }
false;public;1;3;;@Override public void showMessage(String message) { }
false;protected;0;62;;protected void setupKnownHosts() {     knownHostsFile = SCP_ROOT_DIR + "/" + KNOWN_HOSTS.     if (!acceptLocalhostConnections) {         return.     }     // For security reasons (avoiding man in the middle attacks),     // camel-jsch will only connect to known hosts. For unit testing     // we use a known key, but since the port is dynamic, the     // known_hosts file will be generated by the following code and     // should contain a line like below (if     // "HashKnownHosts"=="yes" the hostname:port part will be     // hashed and look a bit more complicated).     //      // [localhost]:21000 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDd \     // fIWeSV4o68dRrKSzFd/Bk51E65UTmmSrmW0O1ohtzi6HzsDPjXgCtlTt3F \     // qTcfFfI92IlTr4JWqC9UK1QT1ZTeng0MkPQmv68hDANHbt5CpETZHjW5q4 \     // OOgWhVvj5IyOC2NZHtKlJBkdsMAa15ouOOJLzBvAvbqOR/yUROsEiQ==     JSch jsch = new JSch().     try {         LOG.debug("Using '{}' for known hosts.", knownHostsFile).         jsch.setKnownHosts(knownHostsFile).         Session s = jsch.getSession("admin", "localhost", getPort()).         s.setConfig("StrictHostKeyChecking", "ask").         // TODO: by the current jsch (0.1.51) setting "HashKnownHosts" to "no" is a workaround         // to make the tests run green, see also http://sourceforge.net/p/jsch/bugs/63/         s.setConfig("HashKnownHosts", "no").         s.setUserInfo(new UserInfo() {              @Override             public String getPassphrase() {                 return null.             }              @Override             public String getPassword() {                 return "admin".             }              @Override             public boolean promptPassword(String message) {                 return true.             }              @Override             public boolean promptPassphrase(String message) {                 return false.             }              @Override             public boolean promptYesNo(String message) {                 // accept host authenticity                 return true.             }              @Override             public void showMessage(String message) {             }         }).         // in the process of connecting, "[localhost]:<port>" is added to the knownHostsFile         s.connect().         s.disconnect().     } catch (JSchException e) {         LOG.info("Could not add [localhost] to known hosts", e).     } }
false;public;0;3;;public String getKnownHostsFile() {     return knownHostsFile. }
false;public;0;3;;public boolean isSetupComplete() {     return setupComplete. }
false;protected,static;0;7;;protected static void traceSecurityProviders() {     for (Provider p : Security.getProviders()) {         for (Service s : p.getServices()) {             LOG.trace("Security provider {} for '{}' algorithm", s.getClassName(), s.getAlgorithm()).         }     } }
