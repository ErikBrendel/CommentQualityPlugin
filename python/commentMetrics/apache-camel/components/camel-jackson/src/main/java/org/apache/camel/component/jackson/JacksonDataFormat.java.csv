commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "json-jackson". }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;3;11;;public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {     this.objectMapper.writerWithView(jsonView).writeValue(stream, graph).     if (contentTypeHeader) {         if (exchange.hasOut()) {             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/json").         } else {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").         }     } }
false;public;2;21;;public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     // is there a header with the unmarshal type?     Class<?> clazz = unmarshalType.     String type = null.     if (allowUnmarshallType) {         type = exchange.getIn().getHeader(JacksonConstants.UNMARSHAL_TYPE, String.class).     }     if (type == null && isAllowJmsType()) {         type = exchange.getIn().getHeader("JMSType", String.class).     }     if (type != null) {         clazz = exchange.getContext().getClassResolver().resolveMandatoryClass(type).     }     if (collectionType != null) {         CollectionType collType = objectMapper.getTypeFactory().constructCollectionType(collectionType, clazz).         return this.objectMapper.readValue(stream, collType).     } else {         return this.objectMapper.readValue(stream, clazz).     } }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public ObjectMapper getObjectMapper() {     return this.objectMapper. }
false;public;1;3;;public void setObjectMapper(ObjectMapper objectMapper) {     this.objectMapper = objectMapper. }
false;public;0;3;;public boolean isUseDefaultObjectMapper() {     return useDefaultObjectMapper. }
false;public;1;3;;public void setUseDefaultObjectMapper(boolean useDefaultObjectMapper) {     this.useDefaultObjectMapper = useDefaultObjectMapper. }
false;public;0;3;;public Class<?> getUnmarshalType() {     return this.unmarshalType. }
false;public;1;3;;public void setUnmarshalType(Class<?> unmarshalType) {     this.unmarshalType = unmarshalType. }
false;public;0;3;;public Class<? extends Collection> getCollectionType() {     return collectionType. }
false;public;1;3;;public void setCollectionType(Class<? extends Collection> collectionType) {     this.collectionType = collectionType. }
false;public;0;3;;public Class<?> getJsonView() {     return jsonView. }
false;public;1;3;;public void setJsonView(Class<?> jsonView) {     this.jsonView = jsonView. }
false;public;0;3;;public String getInclude() {     return include. }
false;public;1;3;;public void setInclude(String include) {     this.include = include. }
false;public;0;3;;public boolean isAllowJmsType() {     return allowJmsType. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public boolean isUseList() {     return useList. }
false;public;1;3;;public void setUseList(boolean useList) {     this.useList = useList. }
false;public;0;3;;public boolean isEnableJaxbAnnotationModule() {     return enableJaxbAnnotationModule. }
false;public;1;3;;public void setEnableJaxbAnnotationModule(boolean enableJaxbAnnotationModule) {     this.enableJaxbAnnotationModule = enableJaxbAnnotationModule. }
false;public;0;3;;public List<Module> getModules() {     return modules. }
true;public;1;3;/**  * To use custom Jackson {@link Module}s  */ ;/**  * To use custom Jackson {@link Module}s  */ public void setModules(List<Module> modules) {     this.modules = modules. }
false;public;0;3;;public String getModuleClassNames() {     return moduleClassNames. }
true;public;1;6;/**  * To use the custom Jackson module  */ ;/**  * To use the custom Jackson module  */ public void addModule(Module module) {     if (this.modules == null) {         this.modules = new ArrayList<>().     }     this.modules.add(module). }
true;public;1;3;/**  * To use custom Jackson {@link Module}s specified as a String with FQN  * class names. Multiple classes can be separated by comma.  */ ;/**  * To use custom Jackson {@link Module}s specified as a String with FQN  * class names. Multiple classes can be separated by comma.  */ public void setModuleClassNames(String moduleClassNames) {     this.moduleClassNames = moduleClassNames. }
false;public;0;3;;public String getModuleRefs() {     return moduleRefs. }
true;public;1;3;/**  * To use custom Jackson modules referred from the Camel registry. Multiple  * modules can be separated by comma.  */ ;/**  * To use custom Jackson modules referred from the Camel registry. Multiple  * modules can be separated by comma.  */ public void setModuleRefs(String moduleRefs) {     this.moduleRefs = moduleRefs. }
true;public;0;3;/**  * Uses {@link java.util.ArrayList} when unmarshalling.  */ ;/**  * Uses {@link java.util.ArrayList} when unmarshalling.  */ public void useList() {     setCollectionType(ArrayList.class). }
true;public;0;4;/**  * Uses {@link java.util.HashMap} when unmarshalling.  */ ;/**  * Uses {@link java.util.HashMap} when unmarshalling.  */ public void useMap() {     setCollectionType(null).     setUnmarshalType(HashMap.class). }
true;public;1;3;/**  * Allows jackson to use the <tt>JMSType</tt> header as an indicator what  * the classname is for unmarshaling json content to POJO  * <p/>  * By default this option is <tt>false</tt>.  */ ;/**  * Allows jackson to use the <tt>JMSType</tt> header as an indicator what  * the classname is for unmarshaling json content to POJO  * <p/>  * By default this option is <tt>false</tt>.  */ public void setAllowJmsType(boolean allowJmsType) {     this.allowJmsType = allowJmsType. }
false;public;0;3;;public boolean isEnableJacksonTypeConverter() {     return enableJacksonTypeConverter. }
true;public;1;3;/**  * If enabled then Jackson is allowed to attempt to be used during Camels  * <a href="https://camel.apache.org/type-converter.html">type converter</a>  * as a {@link org.apache.camel.FallbackConverter} that attempts to convert  * POJOs to/from {@link Map}/{@link List} types.  * <p/>  * This should only be enabled when desired to be used.  */ ;/**  * If enabled then Jackson is allowed to attempt to be used during Camels  * <a href="https://camel.apache.org/type-converter.html">type converter</a>  * as a {@link org.apache.camel.FallbackConverter} that attempts to convert  * POJOs to/from {@link Map}/{@link List} types.  * <p/>  * This should only be enabled when desired to be used.  */ public void setEnableJacksonTypeConverter(boolean enableJacksonTypeConverter) {     this.enableJacksonTypeConverter = enableJacksonTypeConverter. }
false;public;0;3;;public boolean isAllowUnmarshallType() {     return allowUnmarshallType. }
true;public;1;3;/**  * If enabled then Jackson is allowed to attempt to use the  * CamelJacksonUnmarshalType header during the unmarshalling.  * <p/>  * This should only be enabled when desired to be used.  */ ;/**  * If enabled then Jackson is allowed to attempt to use the  * CamelJacksonUnmarshalType header during the unmarshalling.  * <p/>  * This should only be enabled when desired to be used.  */ public void setAllowUnmarshallType(boolean allowJacksonUnmarshallType) {     this.allowUnmarshallType = allowJacksonUnmarshallType. }
false;public;0;3;;public boolean isContentTypeHeader() {     return contentTypeHeader. }
true;public;1;3;/**  * If enabled then Jackson will set the Content-Type header to  * <tt>application/json</tt> when marshalling.  */ ;/**  * If enabled then Jackson will set the Content-Type header to  * <tt>application/json</tt> when marshalling.  */ public void setContentTypeHeader(boolean contentTypeHeader) {     this.contentTypeHeader = contentTypeHeader. }
false;public;0;3;;public TimeZone getTimezone() {     return timezone. }
true;public;1;3;/**  * If set then Jackson will use the Timezone when marshalling/unmarshalling.  */ ;/**  * If set then Jackson will use the Timezone when marshalling/unmarshalling.  */ public void setTimezone(TimeZone timezone) {     this.timezone = timezone. }
false;public;0;3;;public String getEnableFeatures() {     return enableFeatures. }
true;public;1;3;/**  * Set of features to enable on the Jackson {@link ObjectMapper}. The  * features should be a name that matches a enum from  * {@link SerializationFeature}, {@link DeserializationFeature}, or  * {@link MapperFeature}.  */ ;/**  * Set of features to enable on the Jackson {@link ObjectMapper}. The  * features should be a name that matches a enum from  * {@link SerializationFeature}, {@link DeserializationFeature}, or  * {@link MapperFeature}.  */ public void setEnableFeatures(String enableFeatures) {     this.enableFeatures = enableFeatures. }
false;public;0;3;;public String getDisableFeatures() {     return disableFeatures. }
true;public;1;3;/**  * Set of features to disable on the Jackson {@link ObjectMapper}. The  * features should be a name that matches a enum from  * {@link SerializationFeature}, {@link DeserializationFeature}, or  * {@link MapperFeature}.  */ ;/**  * Set of features to disable on the Jackson {@link ObjectMapper}. The  * features should be a name that matches a enum from  * {@link SerializationFeature}, {@link DeserializationFeature}, or  * {@link MapperFeature}.  */ public void setDisableFeatures(String disableFeatures) {     this.disableFeatures = disableFeatures. }
false;public;1;7;;public void enableFeature(SerializationFeature feature) {     if (enableFeatures == null) {         enableFeatures = feature.name().     } else {         enableFeatures += "," + feature.name().     } }
false;public;1;7;;public void enableFeature(DeserializationFeature feature) {     if (enableFeatures == null) {         enableFeatures = feature.name().     } else {         enableFeatures += "," + feature.name().     } }
false;public;1;7;;public void enableFeature(MapperFeature feature) {     if (enableFeatures == null) {         enableFeatures = feature.name().     } else {         enableFeatures += "," + feature.name().     } }
false;public;1;7;;public void disableFeature(SerializationFeature feature) {     if (disableFeatures == null) {         disableFeatures = feature.name().     } else {         disableFeatures += "," + feature.name().     } }
false;public;1;7;;public void disableFeature(DeserializationFeature feature) {     if (disableFeatures == null) {         disableFeatures = feature.name().     } else {         disableFeatures += "," + feature.name().     } }
false;public;1;7;;public void disableFeature(MapperFeature feature) {     if (disableFeatures == null) {         disableFeatures = feature.name().     } else {         disableFeatures += "," + feature.name().     } }
false;protected;0;119;;@Override protected void doStart() throws Exception {     if (objectMapper == null) {         // lookup if there is a single default mapper we can use         if (useDefaultObjectMapper && camelContext != null) {             Set<ObjectMapper> set = camelContext.getRegistry().findByType(ObjectMapper.class).             if (set.size() == 1) {                 objectMapper = set.iterator().next().                 log.info("Found single ObjectMapper in Registry to use: {}", objectMapper).             } else if (set.size() > 1) {                 log.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.", set.size()).             }         }         if (objectMapper == null) {             objectMapper = new ObjectMapper().             log.debug("Creating new ObjectMapper to use: {}", objectMapper).         }     }     if (enableJaxbAnnotationModule) {         // Enables JAXB processing         JaxbAnnotationModule module = new JaxbAnnotationModule().         log.debug("Registering JaxbAnnotationModule: {}", module).         objectMapper.registerModule(module).     }     if (useList) {         setCollectionType(ArrayList.class).     }     if (include != null) {         JsonInclude.Include inc = getCamelContext().getTypeConverter().mandatoryConvertTo(JsonInclude.Include.class, include).         objectMapper.setSerializationInclusion(inc).     }     if (prettyPrint) {         objectMapper.enable(SerializationFeature.INDENT_OUTPUT).     }     if (enableFeatures != null) {         Iterator<?> it = ObjectHelper.createIterator(enableFeatures).         while (it.hasNext()) {             String enable = it.next().toString().             // it can be different kind             SerializationFeature sf = getCamelContext().getTypeConverter().tryConvertTo(SerializationFeature.class, enable).             if (sf != null) {                 objectMapper.enable(sf).                 continue.             }             DeserializationFeature df = getCamelContext().getTypeConverter().tryConvertTo(DeserializationFeature.class, enable).             if (df != null) {                 objectMapper.enable(df).                 continue.             }             MapperFeature mf = getCamelContext().getTypeConverter().tryConvertTo(MapperFeature.class, enable).             if (mf != null) {                 objectMapper.enable(mf).                 continue.             }             throw new IllegalArgumentException("Enable feature: " + enable + " cannot be converted to an accepted enum of types [SerializationFeature,DeserializationFeature,MapperFeature]").         }     }     if (disableFeatures != null) {         Iterator<?> it = ObjectHelper.createIterator(disableFeatures).         while (it.hasNext()) {             String disable = it.next().toString().             // it can be different kind             SerializationFeature sf = getCamelContext().getTypeConverter().tryConvertTo(SerializationFeature.class, disable).             if (sf != null) {                 objectMapper.disable(sf).                 continue.             }             DeserializationFeature df = getCamelContext().getTypeConverter().tryConvertTo(DeserializationFeature.class, disable).             if (df != null) {                 objectMapper.disable(df).                 continue.             }             MapperFeature mf = getCamelContext().getTypeConverter().tryConvertTo(MapperFeature.class, disable).             if (mf != null) {                 objectMapper.disable(mf).                 continue.             }             throw new IllegalArgumentException("Disable feature: " + disable + " cannot be converted to an accepted enum of types [SerializationFeature,DeserializationFeature,MapperFeature]").         }     }     if (modules != null) {         for (Module module : modules) {             log.debug("Registering module: {}", module).             objectMapper.registerModules(module).         }     }     if (moduleClassNames != null) {         Iterable<?> it = ObjectHelper.createIterable(moduleClassNames).         for (Object o : it) {             String name = o.toString().             Class<Module> clazz = camelContext.getClassResolver().resolveMandatoryClass(name, Module.class).             Module module = camelContext.getInjector().newInstance(clazz).             log.debug("Registering module: {} -> {}", name, module).             objectMapper.registerModule(module).         }     }     if (moduleRefs != null) {         Iterable<?> it = ObjectHelper.createIterable(moduleRefs).         for (Object o : it) {             String name = o.toString().             if (name.startsWith("#")) {                 name = name.substring(1).             }             Module module = CamelContextHelper.mandatoryLookup(camelContext, name, Module.class).             log.debug("Registering module: {} -> {}", name, module).             objectMapper.registerModule(module).         }     }     if (org.apache.camel.util.ObjectHelper.isNotEmpty(timezone)) {         log.debug("Setting timezone to Object Mapper: {}", timezone).         objectMapper.setTimeZone(timezone).     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
