commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;7;;public Object call() throws Exception {     TestPojo pojo = new TestPojo().     pojo.setName("Hi " + index).     template.sendBody("direct:start", pojo).     return null. }
false;private;2;21;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 TestPojo pojo = new TestPojo().                 pojo.setName("Hi " + index).                 template.sendBody("direct:start", pojo).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;0;10;;public void configure() {     from("direct:start").marshal().json(JsonLibrary.Jackson).to("log:marshalled").to("direct:marshalled").     from("direct:marshalled").unmarshal().json(JsonLibrary.Jackson, TestPojo.class).to("mock:result"). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").marshal().json(JsonLibrary.Jackson).to("log:marshalled").to("direct:marshalled").             from("direct:marshalled").unmarshal().json(JsonLibrary.Jackson, TestPojo.class).to("mock:result").         }     }. }
