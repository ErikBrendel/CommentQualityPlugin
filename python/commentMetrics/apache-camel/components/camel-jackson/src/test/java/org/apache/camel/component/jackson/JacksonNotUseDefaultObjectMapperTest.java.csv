commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myMapper", objectMapper).     return jndi. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     df.setUseDefaultObjectMapper(false).     super.setUp(). }
false;public;0;20;;@Test public void testMarshalAndUnmarshalMap() throws Exception {     Map<String, Object> in = new HashMap<>().     in.put("name", "Camel").     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Map.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:in", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("{\"name\":\"Camel\"}", marshalledAsString).     template.sendBody("direct:back", marshalled).     mock.assertIsSatisfied().     assertNotSame(objectMapper, df.getObjectMapper()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:in").marshal(df).     from("direct:back").unmarshal(df).to("mock:reverse"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").marshal(df).             from("direct:back").unmarshal(df).to("mock:reverse").         }     }. }
