commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testUnmarshalPojo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:reversePojo").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TestPojo.class).     String json = "{\"name\":\"Camel\"}".     template.sendBodyAndHeader("direct:backPojo", json, JacksonConstants.UNMARSHAL_TYPE, TestPojo.class.getName()).     assertMockEndpointsSatisfied().     TestPojo pojo = mock.getReceivedExchanges().get(0).getIn().getBody(TestPojo.class).     assertNotNull(pojo).     assertEquals("Camel", pojo.getName()). }
false;public;0;8;;@Override public void configure() throws Exception {     JacksonDataFormat format = new JacksonDataFormat().     format.setAllowUnmarshallType(true).     from("direct:backPojo").unmarshal(format).to("mock:reversePojo"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             JacksonDataFormat format = new JacksonDataFormat().             format.setAllowUnmarshallType(true).             from("direct:backPojo").unmarshal(format).to("mock:reversePojo").         }     }. }
