commented;modifiers;parameterAmount;loc;comment;code
false;;2;28;;Map<Command, Processor> getProcessors(RedisClient redisClient, ExchangeConverter exchangeConverter) {     bind(Command.HDEL, exchange -> redisClient.hdel(exchangeConverter.getKey(exchange), exchangeConverter.getField(exchange))).     bind(Command.HEXISTS, wrap(exchange -> redisClient.hexists(exchangeConverter.getKey(exchange), exchangeConverter.getField(exchange)))).     bind(Command.HGET, wrap(exchange -> redisClient.hget(exchangeConverter.getKey(exchange), exchangeConverter.getField(exchange)))).     bind(Command.HGETALL, wrap(exchange -> redisClient.hgetAll(exchangeConverter.getKey(exchange)))).     bind(Command.HINCRBY, wrap(exchange -> redisClient.hincrBy(exchangeConverter.getKey(exchange), exchangeConverter.getField(exchange), exchangeConverter.getValueAsLong(exchange)))).     bind(Command.HKEYS, wrap(exchange -> redisClient.hkeys(exchangeConverter.getKey(exchange)))).     bind(Command.HLEN, wrap(exchange -> redisClient.hlen(exchangeConverter.getKey(exchange)))).     bind(Command.HMGET, wrap(exchange -> redisClient.hmget(exchangeConverter.getKey(exchange), exchangeConverter.getFields(exchange)))).     bind(Command.HMSET, exchange -> redisClient.hmset(exchangeConverter.getKey(exchange), exchangeConverter.getValuesAsMap(exchange))).     bind(Command.HSET, exchange -> redisClient.hset(exchangeConverter.getKey(exchange), exchangeConverter.getField(exchange), exchangeConverter.getValue(exchange))).     bind(Command.HSETNX, wrap(exchange -> redisClient.hsetnx(exchangeConverter.getKey(exchange), exchangeConverter.getField(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.HVALS, wrap(exchange -> redisClient.hvals(exchangeConverter.getKey(exchange)))).     return result. }
