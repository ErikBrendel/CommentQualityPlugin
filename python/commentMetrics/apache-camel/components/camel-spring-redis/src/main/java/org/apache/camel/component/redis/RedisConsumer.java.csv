commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void doStart() throws Exception {     super.doStart().     Collection<Topic> topics = toTopics(redisConfiguration.getChannels()).     redisConfiguration.getListenerContainer().addMessageListener(this, topics). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     Collection<Topic> topics = toTopics(redisConfiguration.getChannels()).     redisConfiguration.getListenerContainer().removeMessageListener(this, topics).     super.doStop(). }
false;private;1;15;;private Collection<Topic> toTopics(String channels) {     String[] channelsArrays = channels.split(",").     List<Topic> topics = new ArrayList<>().     for (String channel : channelsArrays) {         String name = channel.trim().         if (Command.PSUBSCRIBE.equals(redisConfiguration.getCommand())) {             topics.add(new PatternTopic(name)).         } else if (Command.SUBSCRIBE.equals(redisConfiguration.getCommand())) {             topics.add(new ChannelTopic(name)).         } else {             throw new IllegalArgumentException("Unsupported Command " + redisConfiguration.getCommand()).         }     }     return topics. }
false;public;2;12;;@Override public void onMessage(Message message, byte[] pattern) {     try {         Exchange exchange = getEndpoint().createExchange().         setChannel(exchange, message.getChannel()).         setPattern(exchange, pattern).         setBody(exchange, message.getBody()).         getProcessor().process(exchange).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private;2;5;;private void setBody(Exchange exchange, byte[] body) {     if (body != null) {         exchange.getIn().setBody(redisConfiguration.getSerializer().deserialize(body)).     } }
false;private;2;5;;private void setPattern(Exchange exchange, byte[] pattern) {     if (pattern != null) {         exchange.getIn().setHeader(RedisConstants.PATTERN, pattern).     } }
false;private;2;5;;private void setChannel(Exchange exchange, byte[] message) throws UnsupportedEncodingException {     if (message != null) {         exchange.getIn().setHeader(RedisConstants.CHANNEL, new String(message, StandardCharsets.UTF_8)).     } }
