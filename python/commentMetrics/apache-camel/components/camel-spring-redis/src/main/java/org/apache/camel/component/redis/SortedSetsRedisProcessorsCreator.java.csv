commented;modifiers;parameterAmount;loc;comment;code
false;;2;47;;Map<Command, Processor> getProcessors(RedisClient redisClient, ExchangeConverter exchangeConverter) {     bind(Command.ZADD, wrap(exchange -> redisClient.zadd(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getScore(exchange)))).     bind(Command.ZCARD, wrap(exchange -> redisClient.zcard(exchangeConverter.getKey(exchange)))).     bind(Command.ZCOUNT, wrap(exchange -> redisClient.zcount(exchangeConverter.getKey(exchange), exchangeConverter.getMin(exchange), exchangeConverter.getMax(exchange)))).     bind(Command.ZINCRBY, wrap(exchange -> redisClient.zincrby(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getIncrement(exchange)))).     bind(Command.ZINTERSTORE, exchange -> redisClient.zinterstore(exchangeConverter.getKey(exchange), exchangeConverter.getKeys(exchange), exchangeConverter.getDestination(exchange))).     bind(Command.ZRANGE, wrap(exchange -> redisClient.zrange(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange), exchangeConverter.getWithScore(exchange)))).     bind(Command.ZRANGEBYSCORE, wrap(exchange -> redisClient.zrangebyscore(exchangeConverter.getKey(exchange), exchangeConverter.getMin(exchange), exchangeConverter.getMax(exchange)))).     bind(Command.ZRANK, wrap(exchange -> redisClient.zrank(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.ZREM, wrap(exchange -> redisClient.zrem(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.ZREMRANGEBYRANK, exchange -> redisClient.zremrangebyrank(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange))).     bind(Command.ZREMRANGEBYSCORE, exchange -> redisClient.zremrangebyscore(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange))).     bind(Command.ZREVRANGE, wrap(exchange -> redisClient.zrevrange(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange), exchangeConverter.getWithScore(exchange)))).     bind(Command.ZREVRANGEBYSCORE, wrap(exchange -> redisClient.zrevrangebyscore(exchangeConverter.getKey(exchange), exchangeConverter.getMin(exchange), exchangeConverter.getMax(exchange)))).     bind(Command.ZREVRANK, wrap(exchange -> redisClient.zrevrank(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.ZUNIONSTORE, exchange -> redisClient.zunionstore(exchangeConverter.getKey(exchange), exchangeConverter.getKeys(exchange), exchangeConverter.getDestination(exchange))).     return result. }
