commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;public void set(String key, Object value) {     redisTemplate.opsForValue().set(key, value). }
false;public;2;3;;public void hmset(String key, Map<String, Object> param) {     redisTemplate.opsForHash().putAll(key, param). }
false;public;2;3;;public Collection<Object> hmget(String key, Collection<String> fields) {     return redisTemplate.<String, Object>opsForHash().multiGet(key, fields). }
false;public;1;3;;public Set<String> hkeys(String key) {     return redisTemplate.<String, Object>opsForHash().keys(key). }
false;public;1;3;;public Long hlen(String key) {     return redisTemplate.<String, Object>opsForHash().size(key). }
false;public;3;3;;public Long hincrBy(String key, String field, Long value) {     return redisTemplate.<String, Object>opsForHash().increment(key, field, value). }
false;public;1;3;;public Map<String, Object> hgetAll(String key) {     return redisTemplate.<String, Object>opsForHash().entries(key). }
false;public;2;3;;public Boolean hexists(String key, String field) {     return redisTemplate.<String, Object>opsForHash().hasKey(key, field). }
false;public;2;3;;public Object hget(String key, String field) {     return redisTemplate.<String, Object>opsForHash().get(key, field). }
false;public;2;3;;public void hdel(String key, String field) {     redisTemplate.<String, Object>opsForHash().delete(key, field). }
false;public;3;3;;public void hset(String key, String field, Object value) {     redisTemplate.<String, Object>opsForHash().put(key, field, value). }
false;public;0;6;;public void quit() {     redisTemplate.execute((RedisCallback<Object>) connection -> {         connection.close().         return null.     }). }
false;public;1;3;;public Object get(String key) {     return redisTemplate.opsForValue().get(key). }
false;public;1;3;;public Collection<Object> hvals(String key) {     return redisTemplate.<String, Object>opsForHash().values(key). }
false;public;3;3;;public Boolean hsetnx(String key, String field, Object value) {     return redisTemplate.<String, Object>opsForHash().putIfAbsent(key, field, value). }
false;public;1;3;;public Long decr(String key) {     return redisTemplate.opsForValue().increment(key, -1L). }
false;public;2;3;;public Long decrby(String key, Long value) {     return redisTemplate.opsForValue().increment(key, -value). }
false;public;1;3;;public Long incr(String key) {     return redisTemplate.opsForValue().increment(key, 1L). }
false;public;2;3;;public Long incrby(String key, Long value) {     return redisTemplate.opsForValue().increment(key, value). }
false;public;3;3;;public String getrange(String key, Long start, Long end) {     return redisTemplate.opsForValue().get(key, start, end). }
false;public;1;3;;public Long strlen(String key) {     return redisTemplate.opsForValue().size(key). }
false;public;1;3;;public List<Object> mget(Collection<String> fields) {     return redisTemplate.opsForValue().multiGet(fields). }
false;public;1;3;;public void mset(Map<String, Object> map) {     redisTemplate.opsForValue().multiSet(map). }
false;public;1;3;;public void msetnx(Map<String, Object> map) {     redisTemplate.opsForValue().multiSetIfAbsent(map). }
false;public;2;3;;public Object getset(String key, Object value) {     return redisTemplate.opsForValue().getAndSet(key, value). }
false;public;2;3;;public Boolean setnx(String key, Object value) {     return redisTemplate.opsForValue().setIfAbsent(key, value). }
false;public;4;3;;public void setex(String key, Object value, Long timeout, TimeUnit timeUnit) {     redisTemplate.opsForValue().set(key, value, timeout, timeUnit). }
false;public;3;3;;public void setex(String key, Object value, Long offset) {     redisTemplate.opsForValue().set(key, value, offset). }
false;public;3;6;;public void setbit(final String key, final Long offset, final Boolean value) {     redisTemplate.execute((RedisCallback<Object>) connection -> {         connection.setBit(key.getBytes(), offset, value).         return null.     }). }
false;public;2;5;;public Boolean getbit(final String key, final Long offset) {     return redisTemplate.execute((RedisCallback<Boolean>) connection -> {         return connection.getBit(key.getBytes(), offset).     }). }
false;public;2;3;;public Integer append(String key, String value) {     return redisTemplate.opsForValue().append(key, value). }
false;public;0;3;;public void multi() {     redisTemplate.multi(). }
false;public;0;3;;public void unwatch() {     redisTemplate.unwatch(). }
false;public;0;3;;public void discard() {     redisTemplate.discard(). }
false;public;0;3;;public void exec() {     redisTemplate.exec(). }
false;public;1;3;;public void watch(Collection<String> keys) {     redisTemplate.watch(keys). }
false;public;2;3;;public Long sadd(String key, Object value) {     return redisTemplate.opsForSet().add(key, value). }
false;public;1;3;;public Long scard(String key) {     return redisTemplate.opsForSet().size(key). }
false;public;2;3;;public Set<Object> sdiff(String key, Collection<String> keys) {     return redisTemplate.opsForSet().difference(key, keys). }
false;public;3;3;;public void sdiffstore(String key, Collection<String> keys, String destinations) {     redisTemplate.opsForSet().differenceAndStore(key, keys, destinations). }
false;public;2;3;;public Set<Object> sinter(String key, Collection<String> keys) {     return redisTemplate.opsForSet().intersect(key, keys). }
false;public;3;3;;public void sinterstore(String key, Collection<String> keys, String destination) {     redisTemplate.opsForSet().intersectAndStore(key, keys, destination). }
false;public;2;3;;public Boolean sismember(String key, Object value) {     return redisTemplate.opsForSet().isMember(key, value). }
false;public;1;3;;public Set<Object> smembers(String key) {     return redisTemplate.opsForSet().members(key). }
false;public;3;3;;public Boolean smove(String key, Object value, String destination) {     return redisTemplate.opsForSet().move(key, value, destination). }
false;public;1;3;;public Object spop(String key) {     return redisTemplate.opsForSet().pop(key). }
false;public;1;3;;public Object srandmember(String key) {     return redisTemplate.opsForSet().randomMember(key). }
false;public;2;3;;public Long srem(String key, Object value) {     return redisTemplate.opsForSet().remove(key, value). }
false;public;2;3;;public Set<Object> sunion(String key, Collection<String> keys) {     return redisTemplate.opsForSet().union(key, keys). }
false;public;3;3;;public void sunionstore(String key, Collection<String> keys, String destination) {     redisTemplate.opsForSet().unionAndStore(key, keys, destination). }
false;public;1;5;;public String echo(final String value) {     return redisTemplate.execute((RedisCallback<String>) connection -> {         return new String(connection.echo(value.getBytes())).     }). }
false;public;0;5;;public String ping() {     return redisTemplate.execute((RedisCallback<String>) connection -> {         return connection.ping().     }). }
false;public;2;3;;public void publish(String channel, Object message) {     redisTemplate.convertAndSend(channel, message). }
false;public;1;3;;public Object lpop(String key) {     return redisTemplate.opsForList().leftPop(key). }
false;public;2;3;;public Object blpop(String key, Long timeout) {     return redisTemplate.opsForList().leftPop(key, timeout, TimeUnit.SECONDS). }
false;public;3;3;;public Object brpoplpush(String key, String destination, Long timeout) {     return redisTemplate.opsForList().rightPopAndLeftPush(key, destination, timeout, TimeUnit.SECONDS). }
false;public;2;3;;public Object rpoplpush(String key, String destination) {     return redisTemplate.opsForList().rightPopAndLeftPush(key, destination). }
false;public;2;3;;public Object lindex(String key, Long index) {     return redisTemplate.opsForList().index(key, index). }
false;public;4;9;;public Long linsert(String key, Object value, String pivot, String position) {     if ("BEFORE".equals(position)) {         return redisTemplate.opsForList().leftPush(key, pivot, value).     } else if ("AFTER".equals(position)) {         return redisTemplate.opsForList().rightPush(key, pivot, value).     } else {         throw new IllegalArgumentException("Wrong position: " + position).     } }
false;public;1;3;;public Object rpop(String key) {     return redisTemplate.opsForList().rightPop(key). }
false;public;2;3;;public Object brpop(String key, Long timeout) {     return redisTemplate.opsForList().rightPop(key, timeout, TimeUnit.SECONDS). }
false;public;1;3;;public Long llen(String key) {     return redisTemplate.opsForList().size(key). }
false;public;3;3;;public List<Object> lrange(String key, Long start, Long end) {     return redisTemplate.opsForList().range(key, start, end). }
false;public;3;3;;public Long lrem(String key, Object value, Long count) {     return redisTemplate.opsForList().remove(key, count, value). }
false;public;3;3;;public void lset(String key, Object value, Long index) {     redisTemplate.opsForList().set(key, index, value). }
false;public;3;3;;public void ltrim(String key, Long start, Long end) {     redisTemplate.opsForList().trim(key, start, end). }
false;public;2;3;;public Long rpush(String key, Object value) {     return redisTemplate.opsForList().rightPush(key, value). }
false;public;2;3;;public Long rpushx(String key, Object value) {     return redisTemplate.opsForList().rightPushIfPresent(key, value). }
false;public;2;3;;public Long lpush(String key, Object value) {     return redisTemplate.opsForList().leftPush(key, value). }
false;public;2;3;;public Long lpushx(String key, Object value) {     return redisTemplate.opsForList().leftPushIfPresent(key, value). }
false;public;1;3;;public void del(Collection<String> keys) {     redisTemplate.delete(keys). }
false;public;1;3;;public Boolean exists(String key) {     return redisTemplate.hasKey(key). }
false;public;2;3;;public Boolean expire(String key, Long timeout) {     return redisTemplate.expire(key, timeout, TimeUnit.SECONDS). }
false;public;2;3;;public Boolean expireat(String key, Long seconds) {     return redisTemplate.expireAt(key, new Date(seconds * 1000L)). }
false;public;1;3;;public Collection<String> keys(String pattern) {     return redisTemplate.keys(pattern). }
false;public;2;3;;public Boolean move(String key, Integer db) {     return redisTemplate.move(key, db). }
false;public;1;3;;public Boolean persist(String key) {     return redisTemplate.persist(key). }
false;public;2;3;;public Boolean pexpire(String key, Long timeout) {     return redisTemplate.expire(key, timeout, TimeUnit.MILLISECONDS). }
false;public;2;3;;public Boolean pexpireat(String key, Long millis) {     return redisTemplate.expireAt(key, new Date(millis)). }
false;public;0;3;;public String randomkey() {     return redisTemplate.randomKey(). }
false;public;2;3;;public void rename(String key, String value) {     redisTemplate.rename(key, value). }
false;public;2;3;;public Boolean renamenx(String key, String value) {     return redisTemplate.renameIfAbsent(key, value). }
false;public;1;3;;public Long ttl(String key) {     return redisTemplate.getExpire(key). }
false;public;1;3;;public String type(String key) {     return redisTemplate.type(key).toString(). }
false;public;1;4;;public List<Object> sort(String key) {     SortQuery<String> sortQuery = SortQueryBuilder.sort(key).build().     return redisTemplate.sort(sortQuery). }
false;public;3;3;;public Boolean zadd(String key, Object value, Double score) {     return redisTemplate.opsForZSet().add(key, value, score). }
false;public;1;3;;public Long zcard(String key) {     return redisTemplate.opsForZSet().size(key). }
false;public;3;3;;public Long zcount(String key, Double min, Double max) {     return redisTemplate.opsForZSet().count(key, min, max). }
false;public;3;3;;public Double zincrby(String key, Object value, Double increment) {     return redisTemplate.opsForZSet().incrementScore(key, value, increment). }
false;public;3;3;;public void zinterstore(String key, Collection<String> keys, String destination) {     redisTemplate.opsForZSet().intersectAndStore(key, keys, destination). }
false;public;4;6;;public Object zrange(String key, Long start, Long end, Boolean withScore) {     if (withScore != null && withScore) {         return redisTemplate.opsForZSet().rangeWithScores(key, start, end).     }     return redisTemplate.opsForZSet().range(key, start, end). }
false;public;3;3;;public Set<Object> zrangebyscore(String key, Double min, Double max) {     return redisTemplate.opsForZSet().rangeByScore(key, min, max). }
false;public;2;3;;public Long zrank(String key, Object value) {     return redisTemplate.opsForZSet().rank(key, value). }
false;public;2;3;;public Long zrem(String key, Object value) {     return redisTemplate.opsForZSet().remove(key, value). }
false;public;3;3;;public void zremrangebyrank(String key, Long start, Long end) {     redisTemplate.opsForZSet().removeRange(key, start, end). }
false;public;3;3;;public void zremrangebyscore(String key, Long start, Long end) {     redisTemplate.opsForZSet().removeRangeByScore(key, start, end). }
false;public;4;7;;public Object zrevrange(String key, Long start, Long end, Boolean withScore) {     if (withScore != null && withScore) {         return redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end).     }     return redisTemplate.opsForZSet().reverseRange(key, start, end). }
false;public;3;3;;public Set<Object> zrevrangebyscore(String key, Double min, Double max) {     return redisTemplate.opsForZSet().reverseRangeByScore(key, min, max). }
false;public;2;3;;public Long zrevrank(String key, Object value) {     return redisTemplate.opsForZSet().reverseRank(key, value). }
false;public;3;3;;public void zunionstore(String key, Collection<String> keys, String destination) {     redisTemplate.opsForZSet().unionAndStore(key, keys, destination). }
false;public;4;4;;public Long geoadd(String key, double latitude, double longitude, Object member) {     Point point = new Point(latitude, longitude).     return redisTemplate.opsForGeo().add(key, point, member). }
false;public;3;3;;public Distance geodist(String key, Object member1, Object member2) {     return redisTemplate.opsForGeo().distance(key, member1, member2). }
false;public;2;3;;public List<String> geohash(String key, Object member) {     return redisTemplate.opsForGeo().hash(key, member). }
false;public;2;3;;public List<Point> geopos(String key, Object member) {     return redisTemplate.opsForGeo().position(key, member). }
false;public;5;9;;public GeoResults<GeoLocation<Object>> georadius(String key, double latitude, double longitude, double radius, Long limit) {     Point point = new Point(latitude, longitude).     Circle within = new Circle(point, radius).     GeoRadiusCommandArgs args = GeoRadiusCommandArgs.newGeoRadiusArgs().includeCoordinates().includeDistance().sortAscending().     if (limit != null) {         args.limit(limit).     }     return redisTemplate.opsForGeo().radius(key, within, args). }
false;public;4;8;;public GeoResults<GeoLocation<Object>> georadius(String key, Object member, double radius, Long limit) {     Distance distance = new Distance(radius).     GeoRadiusCommandArgs args = GeoRadiusCommandArgs.newGeoRadiusArgs().includeCoordinates().includeDistance().sortAscending().     if (limit != null) {         args.limit(limit).     }     return redisTemplate.opsForGeo().radius(key, member, distance, args). }
