commented;modifiers;parameterAmount;loc;comment;code
false;;2;39;;Map<Command, Processor> getProcessors(RedisClient redisClient, ExchangeConverter exchangeConverter) {     bind(Command.APPEND, wrap(exchange -> redisClient.append(exchangeConverter.getKey(exchange), exchangeConverter.getStringValue(exchange)))).     bind(Command.DECR, wrap(exchange -> redisClient.decr(exchangeConverter.getKey(exchange)))).     bind(Command.DECRBY, wrap(exchange -> redisClient.decrby(exchangeConverter.getKey(exchange), exchangeConverter.getLongValue(exchange)))).     bind(Command.GET, wrap(exchange -> redisClient.get(exchangeConverter.getKey(exchange)))).     bind(Command.GETBIT, wrap(exchange -> redisClient.getbit(exchangeConverter.getKey(exchange), exchangeConverter.getOffset(exchange)))).     bind(Command.GETRANGE, wrap(exchange -> redisClient.getrange(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange)))).     bind(Command.GETSET, wrap(exchange -> redisClient.getset(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.INCR, wrap(exchange -> redisClient.incr(exchangeConverter.getKey(exchange)))).     bind(Command.INCRBY, wrap(exchange -> redisClient.incrby(exchangeConverter.getKey(exchange), exchangeConverter.getLongValue(exchange)))).     bind(Command.MGET, wrap(exchange -> redisClient.mget(exchangeConverter.getFields(exchange)))).     bind(Command.MSET, exchange -> redisClient.mset(exchangeConverter.getValuesAsMap(exchange))).     bind(Command.MSETNX, exchange -> redisClient.msetnx(exchangeConverter.getValuesAsMap(exchange))).     bind(Command.SET, exchange -> redisClient.set(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange))).     bind(Command.SETBIT, exchange -> redisClient.setbit(exchangeConverter.getKey(exchange), exchangeConverter.getOffset(exchange), exchangeConverter.getBooleanValue(exchange))).     bind(Command.SETEX, exchange -> redisClient.setex(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getTimeout(exchange), TimeUnit.SECONDS)).     bind(Command.SETNX, wrap(exchange -> redisClient.setnx(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.SETRANGE, exchange -> redisClient.setex(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getOffset(exchange))).     bind(Command.STRLEN, wrap(exchange -> redisClient.strlen(exchangeConverter.getKey(exchange)))).     return result. }
