commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@ManagedOperation(description = "Does the store contain the given key") @Override public boolean contains(String key) {     String value = valueOperations.get(createRedisKey(key)).     return value != null. }
false;public;1;9;;@ManagedOperation(description = "Adds the key to the store") @Override public boolean add(String key) {     boolean added = valueOperations.setIfAbsent(createRedisKey(key), key).     if (expiry > 0) {         valueOperations.getOperations().expire(createRedisKey(key), expiry, TimeUnit.SECONDS).     }     return added. }
false;public;1;6;;@ManagedOperation(description = "Remove the key from the store") @Override public boolean remove(String key) {     valueOperations.getOperations().delete(createRedisKey(key)).     return true. }
false;public;1;14;;@Override public List<byte[]> doInRedis(RedisConnection connection) throws DataAccessException {     List<byte[]> binaryKeys = new ArrayList<>().     Cursor<byte[]> cursor = connection.scan(ScanOptions.scanOptions().match("*" + createRedisKey("*")).build()).     while (cursor.hasNext()) {         byte[] key = cursor.next().         binaryKeys.add(key).     }     if (binaryKeys.size() > 0) {         connection.del(binaryKeys.toArray(new byte[][] {})).     }     return binaryKeys. }
false;public;0;20;;@ManagedOperation(description = "Clear the store") @Override public void clear() {     valueOperations.getOperations().execute(new RedisCallback<List<byte[]>>() {          @Override         public List<byte[]> doInRedis(RedisConnection connection) throws DataAccessException {             List<byte[]> binaryKeys = new ArrayList<>().             Cursor<byte[]> cursor = connection.scan(ScanOptions.scanOptions().match("*" + createRedisKey("*")).build()).             while (cursor.hasNext()) {                 byte[] key = cursor.next().                 binaryKeys.add(key).             }             if (binaryKeys.size() > 0) {                 connection.del(binaryKeys.toArray(new byte[][] {})).             }             return binaryKeys.         }     }). }
false;protected;1;3;;protected String createRedisKey(String key) {     return getProcessorName() + ":" + key. }
false;public;0;3;;public long getExpiry() {     return expiry. }
true;public;1;3;/**  * Expire all newly added items after the given number of seconds (0 means never expire)  */ ;/**  * Expire all newly added items after the given number of seconds (0 means never expire)  */ public void setExpiry(long expiry) {     this.expiry = expiry. }
