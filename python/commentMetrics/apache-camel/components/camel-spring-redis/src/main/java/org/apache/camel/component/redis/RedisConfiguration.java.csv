commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Command getCommand() {     return command. }
true;public;1;3;/**  * Default command, which can be overridden by message header.  * <p/>  * Notice the consumer only supports the following commands: PSUBSCRIBE and SUBSCRIBE  */ ;/**  * Default command, which can be overridden by message header.  * <p/>  * Notice the consumer only supports the following commands: PSUBSCRIBE and SUBSCRIBE  */ public void setCommand(Command command) {     this.command = command. }
false;public;0;3;;public Integer getPort() {     return port. }
true;public;1;3;/**  * Redis server port number  */ ;/**  * Redis server port number  */ public void setPort(Integer port) {     this.port = port. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * The host where Redis server is running.  */ ;/**  * The host where Redis server is running.  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public RedisTemplate getRedisTemplate() {     return redisTemplate != null ? redisTemplate : createDefaultTemplate(). }
true;public;1;3;/**  * Reference to a pre-configured RedisTemplate instance to use.  */ ;/**  * Reference to a pre-configured RedisTemplate instance to use.  */ public void setRedisTemplate(RedisTemplate redisTemplate) {     this.redisTemplate = redisTemplate. }
false;public;0;3;;public RedisMessageListenerContainer getListenerContainer() {     return listenerContainer != null ? listenerContainer : createDefaultListenerContainer(). }
true;public;1;3;/**  * Reference to a pre-configured RedisMessageListenerContainer instance to use.  */ ;/**  * Reference to a pre-configured RedisMessageListenerContainer instance to use.  */ public void setListenerContainer(RedisMessageListenerContainer listenerContainer) {     this.listenerContainer = listenerContainer. }
false;public;0;3;;public String getChannels() {     return channels. }
true;public;1;3;/**  * List of topic names or name patterns to subscribe to. Multiple names can be separated by comma.  */ ;/**  * List of topic names or name patterns to subscribe to. Multiple names can be separated by comma.  */ public void setChannels(String channels) {     this.channels = channels. }
true;public;1;3;/**  * Reference to a pre-configured RedisConnectionFactory instance to use.  */ ;/**  * Reference to a pre-configured RedisConnectionFactory instance to use.  */ public void setConnectionFactory(RedisConnectionFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
false;public;0;3;;public RedisConnectionFactory getConnectionFactory() {     return connectionFactory != null ? connectionFactory : createDefaultConnectionFactory(). }
false;public;0;3;;public RedisSerializer getSerializer() {     return serializer != null ? serializer : createDefaultSerializer(). }
true;public;1;3;/**  * Reference to a pre-configured RedisSerializer instance to use.  */ ;/**  * Reference to a pre-configured RedisSerializer instance to use.  */ public void setSerializer(RedisSerializer serializer) {     this.serializer = serializer. }
false;private;0;14;;private RedisConnectionFactory createDefaultConnectionFactory() {     JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory().     managedConnectionFactory = true.     if (host != null) {         jedisConnectionFactory.setHostName(host).     }     if (port != null) {         jedisConnectionFactory.setPort(port).     }     jedisConnectionFactory.afterPropertiesSet().     connectionFactory = jedisConnectionFactory.     return jedisConnectionFactory. }
false;private;0;7;;private RedisTemplate createDefaultTemplate() {     redisTemplate = new RedisTemplate().     redisTemplate.setDefaultSerializer(getSerializer()).     redisTemplate.setConnectionFactory(getConnectionFactory()).     redisTemplate.afterPropertiesSet().     return redisTemplate. }
false;private;0;8;;private RedisMessageListenerContainer createDefaultListenerContainer() {     listenerContainer = new RedisMessageListenerContainer().     managedListenerContainer = true.     listenerContainer.setConnectionFactory(getConnectionFactory()).     listenerContainer.afterPropertiesSet().     listenerContainer.start().     return listenerContainer. }
false;private;0;4;;private RedisSerializer createDefaultSerializer() {     serializer = new JdkSerializationRedisSerializer().     return serializer. }
false;public;0;8;;public void stop() throws Exception {     if (managedConnectionFactory) {         ((JedisConnectionFactory) connectionFactory).destroy().     }     if (managedListenerContainer) {         listenerContainer.destroy().     } }
