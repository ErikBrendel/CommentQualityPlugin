commented;modifiers;parameterAmount;loc;comment;code
false;;2;44;;Map<Command, Processor> getProcessors(RedisClient redisClient, ExchangeConverter exchangeConverter) {     bind(Command.BLPOP, wrap(exchange -> redisClient.blpop(exchangeConverter.getKey(exchange), exchangeConverter.getTimeout(exchange)))).     bind(Command.BRPOP, wrap(exchange -> redisClient.brpop(exchangeConverter.getKey(exchange), exchangeConverter.getTimeout(exchange)))).     bind(Command.BRPOPLPUSH, wrap(exchange -> redisClient.brpoplpush(exchangeConverter.getKey(exchange), exchangeConverter.getDestination(exchange), exchangeConverter.getTimeout(exchange)))).     bind(Command.LINDEX, wrap(exchange -> redisClient.lindex(exchangeConverter.getKey(exchange), exchangeConverter.getIndex(exchange)))).     bind(Command.LINSERT, wrap(exchange -> redisClient.linsert(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getPivot(exchange), exchangeConverter.getPosition(exchange)))).     bind(Command.LLEN, wrap(exchange -> redisClient.llen(exchangeConverter.getKey(exchange)))).     bind(Command.LPOP, wrap(exchange -> redisClient.lpop(exchangeConverter.getKey(exchange)))).     bind(Command.LPUSH, wrap(exchange -> redisClient.lpush(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     // nieuwe actie     bind(Command.LPUSHX, wrap(exchange -> redisClient.lpushx(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.LRANGE, wrap(exchange -> redisClient.lrange(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange)))).     bind(Command.LREM, wrap(exchange -> redisClient.lrem(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getCount(exchange)))).     bind(Command.LSET, exchange -> redisClient.lset(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange), exchangeConverter.getIndex(exchange))).     bind(Command.LTRIM, exchange -> redisClient.ltrim(exchangeConverter.getKey(exchange), exchangeConverter.getStart(exchange), exchangeConverter.getEnd(exchange))).     bind(Command.RPOP, wrap(exchange -> redisClient.rpop(exchangeConverter.getKey(exchange)))).     bind(Command.RPOPLPUSH, wrap(exchange -> redisClient.rpoplpush(exchangeConverter.getKey(exchange), exchangeConverter.getDestination(exchange)))).     bind(Command.RPUSH, wrap(exchange -> redisClient.rpush(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     bind(Command.RPUSHX, wrap(exchange -> redisClient.rpushx(exchangeConverter.getKey(exchange), exchangeConverter.getValue(exchange)))).     return result. }
