commented;modifiers;parameterAmount;loc;comment;code
false;;2;27;;Map<Command, Processor> getProcessors(RedisClient redisClient, ExchangeConverter exchangeConverter) {     bind(Command.DEL, exchange -> redisClient.del(exchangeConverter.getKeys(exchange))).     bind(Command.EXISTS, wrap(exchange -> redisClient.exists(exchangeConverter.getKey(exchange)))).     bind(Command.EXPIRE, wrap(exchange -> redisClient.expire(exchangeConverter.getKey(exchange), exchangeConverter.getTimeout(exchange)))).     bind(Command.EXPIREAT, wrap(exchange -> redisClient.expireat(exchangeConverter.getKey(exchange), exchangeConverter.getTimestamp(exchange)))).     bind(Command.KEYS, wrap(exchange -> redisClient.keys(exchangeConverter.getPattern(exchange)))).     bind(Command.MOVE, wrap(exchange -> redisClient.move(exchangeConverter.getKey(exchange), exchangeConverter.getDb(exchange)))).     bind(Command.PERSIST, wrap(exchange -> redisClient.persist(exchangeConverter.getKey(exchange)))).     bind(Command.PEXPIRE, wrap(exchange -> redisClient.pexpire(exchangeConverter.getKey(exchange), exchangeConverter.getTimeout(exchange)))).     bind(Command.PEXPIREAT, wrap(exchange -> redisClient.pexpireat(exchangeConverter.getKey(exchange), exchangeConverter.getTimestamp(exchange)))).     bind(Command.RANDOMKEY, wrap(exchange -> redisClient.randomkey())).     bind(Command.RENAME, exchange -> redisClient.rename(exchangeConverter.getKey(exchange), exchangeConverter.getStringValue(exchange))).     bind(Command.RENAMENX, wrap(exchange -> redisClient.renamenx(exchangeConverter.getKey(exchange), exchangeConverter.getStringValue(exchange)))).     bind(Command.SORT, wrap(exchange -> redisClient.sort(exchangeConverter.getKey(exchange)))).     bind(Command.TTL, wrap(exchange -> redisClient.ttl(exchangeConverter.getKey(exchange)))).     bind(Command.TYPE, wrap(exchange -> redisClient.type(exchangeConverter.getKey(exchange)))).     return result. }
