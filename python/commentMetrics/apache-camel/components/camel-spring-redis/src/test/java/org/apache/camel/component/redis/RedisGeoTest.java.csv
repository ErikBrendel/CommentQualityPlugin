commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupTests() {     when(redisTemplate.opsForGeo()).thenReturn(geoOperations). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("redisTemplate", redisTemplate).     return registry. }
false;public;0;7;;@Test public void shouldExecuteGEOADD() throws Exception {     sendHeaders(RedisConstants.COMMAND, Command.GEOADD, RedisConstants.KEY, "Sicily", RedisConstants.LONGITUDE, 13.361389, RedisConstants.LATITUDE, 38.115556, RedisConstants.VALUE, "Palermo").     verify(redisTemplate).opsForGeo().     verify(geoOperations).add("Sicily", new Point(13.361389, 38.115556), "Palermo"). }
false;public;0;7;;@Test public void shouldExecuteGEODIST() throws Exception {     Object[] members = new String[] { "Palermo", "Catania" }.     sendHeaders(RedisConstants.COMMAND, Command.GEODIST, RedisConstants.KEY, "Sicily", RedisConstants.VALUES, members).     verify(redisTemplate).opsForGeo().     verify(geoOperations).distance("Sicily", "Palermo", "Catania"). }
false;public;0;6;;@Test public void shouldExecuteGEOHASH() throws Exception {     sendHeaders(RedisConstants.COMMAND, Command.GEOHASH, RedisConstants.KEY, "Sicily", RedisConstants.VALUE, "Palermo").     verify(redisTemplate).opsForGeo().     verify(geoOperations).hash("Sicily", "Palermo"). }
false;public;0;6;;@Test public void shouldExecuteGEOPOS() throws Exception {     sendHeaders(RedisConstants.COMMAND, Command.GEOPOS, RedisConstants.KEY, "Sicily", RedisConstants.VALUE, "Palermo").     verify(redisTemplate).opsForGeo().     verify(geoOperations).position("Sicily", "Palermo"). }
false;public;0;7;;@Test public void shouldExecuteGEORADIUS() throws Exception {     sendHeaders(RedisConstants.COMMAND, Command.GEORADIUS, RedisConstants.KEY, "Sicily", RedisConstants.LONGITUDE, 13.361389, RedisConstants.LATITUDE, 38.115556, RedisConstants.RADIUS, 200000, RedisConstants.COUNT, 10).     verify(redisTemplate).opsForGeo().     verify(geoOperations).radius(eq("Sicily"), eq(new Circle(new Point(13.361389, 38.115556), 200000)), any(GeoRadiusCommandArgs.class)). }
false;public;0;6;;@Test public void shouldExecuteGEORADIUSBYMEMBER() throws Exception {     sendHeaders(RedisConstants.COMMAND, Command.GEORADIUSBYMEMBER, RedisConstants.KEY, "Sicily", RedisConstants.VALUE, "Palermo", RedisConstants.RADIUS, 200000).     verify(redisTemplate).opsForGeo().     verify(geoOperations).radius(eq("Sicily"), eq("Palermo"), eq(new Distance(200000)), any(GeoRadiusCommandArgs.class)). }
