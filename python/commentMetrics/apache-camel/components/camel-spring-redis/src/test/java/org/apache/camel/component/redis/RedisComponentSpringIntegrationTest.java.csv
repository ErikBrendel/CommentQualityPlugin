commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(RedisConstants.COMMAND, "PUBLISH").     exchange.getIn().setHeader(RedisConstants.CHANNEL, "testChannel").     exchange.getIn().setHeader(RedisConstants.MESSAGE, "Message one"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(RedisConstants.COMMAND, "PUBLISH").     exchange.getIn().setHeader(RedisConstants.CHANNEL, "testChannel").     exchange.getIn().setHeader(RedisConstants.MESSAGE, "Message one"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(RedisConstants.COMMAND, "PUBLISH").     exchange.getIn().setHeader(RedisConstants.CHANNEL, "testChannel").     exchange.getIn().setHeader(RedisConstants.MESSAGE, "Message two"). }
false;public;0;34;;@Test public void shouldFilterDuplicateMessagesUsingIdempotentRepository() throws Exception {     result.expectedMessageCount(2).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(RedisConstants.COMMAND, "PUBLISH").             exchange.getIn().setHeader(RedisConstants.CHANNEL, "testChannel").             exchange.getIn().setHeader(RedisConstants.MESSAGE, "Message one").         }     }).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(RedisConstants.COMMAND, "PUBLISH").             exchange.getIn().setHeader(RedisConstants.CHANNEL, "testChannel").             exchange.getIn().setHeader(RedisConstants.MESSAGE, "Message one").         }     }).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(RedisConstants.COMMAND, "PUBLISH").             exchange.getIn().setHeader(RedisConstants.CHANNEL, "testChannel").             exchange.getIn().setHeader(RedisConstants.MESSAGE, "Message two").         }     }).     assertMockEndpointsSatisfied().     Exchange resultExchangeOne = result.getExchanges().get(0).     Exchange resultExchangeTwo = result.getExchanges().get(1).     assertEquals("Message one", resultExchangeOne.getIn().getBody()).     assertEquals("Message two", resultExchangeTwo.getIn().getBody()). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("RedisComponentSpringTest-context.xml"). }
