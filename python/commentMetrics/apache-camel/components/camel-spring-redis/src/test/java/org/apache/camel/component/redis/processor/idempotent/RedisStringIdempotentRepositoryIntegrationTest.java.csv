commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     redisTemplate = new RedisTemplate<>().     redisTemplate.setConnectionFactory(CONNECTION_FACTORY).     redisTemplate.afterPropertiesSet().     registry.bind("redisTemplate", redisTemplate).     return registry. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(body(), idempotentRepository).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     idempotentRepository = new RedisStringIdempotentRepository(redisTemplate, "redis-idempotent-repository").     RouteBuilder rb = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(body(), idempotentRepository).to("mock:result").         }     }.     return rb. }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.setTracing(true).     return context. }
false;public;0;16;;@Test public void blockDoubleSubmission() throws Exception {     mockResult.expectedMessageCount(3).     mockResult.setResultWaitTime(5000).     producer.sendBody("abc").     producer.sendBody("bcd").     producer.sendBody("abc").     producer.sendBody("xyz").     assertTrue(idempotentRepository.contains("abc")).     assertTrue(idempotentRepository.contains("bcd")).     assertTrue(idempotentRepository.contains("xyz")).     assertFalse(idempotentRepository.contains("mustNotContain")).     mockResult.assertIsSatisfied(). }
false;public;0;21;;@Test public void clearIdempotentRepository() {     for (int i = 0. i < 10000. i++) {         redisTemplate.opsForValue().set("key4711", "value4711").     }     assertEquals("value4711", redisTemplate.opsForValue().get("key4711")).     producer.sendBody("abc").     producer.sendBody("bcd").     redisTemplate.opsForValue().set("redis1", "1").     redisTemplate.opsForValue().set("different:xyz", "2").     assertTrue(idempotentRepository.contains("abc")).     assertTrue(idempotentRepository.contains("bcd")).     idempotentRepository.clear().     assertFalse(idempotentRepository.contains("abc")).     assertFalse(idempotentRepository.contains("bcd")).     assertFalse(idempotentRepository.contains("redis1")).     assertFalse(idempotentRepository.contains("different:xyz")).     assertEquals("1", redisTemplate.opsForValue().get("redis1")).     assertEquals("2", redisTemplate.opsForValue().get("different:xyz")). }
false;public;0;8;;@Test public void expireIdempotent() throws Exception {     idempotentRepository.setExpiry(5L).     producer.sendBody("abc").     assertTrue(idempotentRepository.contains("abc")).     Thread.sleep(5000).     assertFalse(idempotentRepository.contains("abc")). }
