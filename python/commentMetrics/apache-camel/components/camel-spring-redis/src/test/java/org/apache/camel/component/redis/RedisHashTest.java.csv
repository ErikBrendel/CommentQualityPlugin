commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     when(redisTemplate.<String, String>opsForHash()).thenReturn(hashOperations).     JndiRegistry registry = super.createRegistry().     registry.bind("redisTemplate", redisTemplate).     return registry. }
false;public;0;9;;@Test public void shouldExecuteHDEL() throws Exception {     sendHeaders(RedisConstants.COMMAND, "HDEL", RedisConstants.KEY, "key", RedisConstants.FIELD, "field").     verify(hashOperations).delete("key", "field"). }
false;public;0;12;;@Test public void shouldExecuteHEXISTS() throws Exception {     when(hashOperations.hasKey(anyString(), anyString())).thenReturn(true).     Object result = sendHeaders(RedisConstants.COMMAND, "HEXISTS", RedisConstants.KEY, "key", RedisConstants.FIELD, "field").     verify(hashOperations).hasKey("key", "field").     assertEquals(true, result). }
false;public;0;13;;@Test public void shouldExecuteHINCRBY() throws Exception {     when(hashOperations.increment(anyString(), anyString(), anyLong())).thenReturn(1L).     Object result = sendHeaders(RedisConstants.COMMAND, "HINCRBY", RedisConstants.KEY, "key", RedisConstants.FIELD, "field", RedisConstants.VALUE, "1").     verify(hashOperations).increment("key", "field", 1L).     assertEquals(1L, result). }
false;public;0;12;;@Test public void shouldExecuteHKEYS() throws Exception {     Set<String> fields = new HashSet<>(Arrays.asList(new String[] { "field1, field2" })).     when(hashOperations.keys(anyString())).thenReturn(fields).     Object result = sendHeaders(RedisConstants.COMMAND, "HKEYS", RedisConstants.KEY, "key").     verify(hashOperations).keys("key").     assertEquals(fields, result). }
false;public;0;13;;@Test public void shouldExecuteHMSET() throws Exception {     Map<String, String> values = new HashMap<>().     values.put("field1", "value1").     values.put("field2", "value").     sendHeaders(RedisConstants.COMMAND, "HMSET", RedisConstants.KEY, "key", RedisConstants.VALUES, values).     verify(hashOperations).putAll("key", values). }
false;public;0;16;;@Test public void shouldExecuteHVALS() throws Exception {     List<String> values = new ArrayList<>().     values.add("val1").     values.add("val2").     when(hashOperations.values(anyString())).thenReturn(values).     Object result = sendHeaders(RedisConstants.COMMAND, "HVALS", RedisConstants.KEY, "key", RedisConstants.VALUES, values).     verify(hashOperations).values("key").     assertEquals(values, result). }
false;public;0;11;;@Test public void shouldExecuteHLEN() throws Exception {     when(hashOperations.size(anyString())).thenReturn(2L).     Object result = sendHeaders(RedisConstants.COMMAND, "HLEN", RedisConstants.KEY, "key").     verify(hashOperations).size("key").     assertEquals(2L, result). }
false;public;0;10;;@Test public void shouldSetHashValue() throws Exception {     sendHeaders(RedisConstants.COMMAND, "HSET", RedisConstants.KEY, "key", RedisConstants.FIELD, "field", RedisConstants.VALUE, "value").     verify(hashOperations).put("key", "field", "value"). }
false;public;0;13;;@Test public void shouldExecuteHSETNX() throws Exception {     when(hashOperations.putIfAbsent(anyString(), anyString(), anyString())).thenReturn(true).     Object result = sendHeaders(RedisConstants.COMMAND, "HSETNX", RedisConstants.KEY, "key", RedisConstants.FIELD, "field", RedisConstants.VALUE, "value").     verify(hashOperations).putIfAbsent("key", "field", "value").     assertEquals(true, result). }
false;public;0;12;;@Test public void shouldExecuteHGET() throws Exception {     when(hashOperations.get(anyString(), anyString())).thenReturn("value").     Object result = sendHeaders(RedisConstants.COMMAND, "HGET", RedisConstants.KEY, "key", RedisConstants.FIELD, "field").     verify(hashOperations).get("key", "field").     assertEquals("value", result). }
false;public;0;13;;@Test public void shouldExecuteHGETALL() throws Exception {     HashMap<String, String> values = new HashMap<>().     values.put("field1", "valu1").     when(hashOperations.entries(anyString())).thenReturn(values).     Object result = sendHeaders(RedisConstants.COMMAND, "HGETALL", RedisConstants.KEY, "key").     verify(hashOperations).entries("key").     assertEquals(values, result). }
false;public;0;14;;@Test public void shouldExecuteHMGET() throws Exception {     List<String> fields = new ArrayList<>().     fields.add("field1").     when(hashOperations.multiGet(anyString(), anyList())).thenReturn(fields).     Object result = sendHeaders(RedisConstants.COMMAND, "HMGET", RedisConstants.KEY, "key", RedisConstants.FIELDS, fields).     verify(hashOperations).multiGet("key", fields).     assertEquals(fields, result). }
