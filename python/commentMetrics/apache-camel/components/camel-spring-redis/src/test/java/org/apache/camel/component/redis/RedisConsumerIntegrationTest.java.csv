commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     redisTemplate = new RedisTemplate<>().     redisTemplate.setConnectionFactory(CONNECTION_FACTORY).     redisTemplate.afterPropertiesSet().     registry.bind("redisTemplate", redisTemplate).     registry.bind("listenerContainer", LISTENER_CONTAINER).     return registry. }
false;public;0;10;;public void configure() {     from("spring-redis://localhost:6379?command=SUBSCRIBE&channels=one,two&listenerContainer=#listenerContainer&redisTemplate=#redisTemplate").startupOrder(1).to("mock:result").     from("direct:start").startupOrder(2).delay(2000).to("spring-redis://localhost:6379?redisTemplate=#redisTemplate"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("spring-redis://localhost:6379?command=SUBSCRIBE&channels=one,two&listenerContainer=#listenerContainer&redisTemplate=#redisTemplate").startupOrder(1).to("mock:result").             from("direct:start").startupOrder(2).delay(2000).to("spring-redis://localhost:6379?redisTemplate=#redisTemplate").         }     }. }
false;public;0;12;;@Test public void consumerReceivesMessages() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("message").     sendHeaders(RedisConstants.COMMAND, "PUBLISH", RedisConstants.CHANNEL, "two", RedisConstants.MESSAGE, "message").     mock.assertIsSatisfied(). }
