commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public ExchangePattern getExchangePattern() {     return ExchangePattern.InOut. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return MUSTACHE_ENDPOINT_URI_PREFIX + getResourceUri(). }
false;public;0;5;;@Override public void clearContentCache() {     this.mustache = null.     super.clearContentCache(). }
false;protected;1;31;;@Override protected void onExchange(Exchange exchange) throws Exception {     String newResourceUri = exchange.getIn().getHeader(MUSTACHE_RESOURCE_URI, String.class).     if (newResourceUri == null) {         // Get Mustache         String newTemplate = exchange.getIn().getHeader(MUSTACHE_TEMPLATE, String.class).         Mustache newMustache.         if (newTemplate == null) {             newMustache = getOrCreateMustache().         } else {             newMustache = createMustache(new StringReader(newTemplate), "mustache:temp#" + newTemplate.hashCode()).             exchange.getIn().removeHeader(MUSTACHE_TEMPLATE).         }         // Execute Mustache         Map<String, Object> variableMap = ExchangeHelper.createVariableMap(exchange).         StringWriter writer = new StringWriter().         newMustache.execute(writer, variableMap).         writer.flush().         // Fill out message         Message out = exchange.getOut().         out.setBody(writer.toString()).         out.setHeaders(exchange.getIn().getHeaders()).         out.setAttachments(exchange.getIn().getAttachments()).     } else {         exchange.getIn().removeHeader(MustacheConstants.MUSTACHE_RESOURCE_URI).         MustacheEndpoint newEndpoint = getCamelContext().getEndpoint(MUSTACHE_ENDPOINT_URI_PREFIX + newResourceUri, MustacheEndpoint.class).         newEndpoint.onExchange(exchange).     } }
true;private;2;22;/**  * Read and compile a Mustache template  *  * @param resourceReader Reader used to get template  * @param resourceUri    Template Id  * @return Template  */ ;/**  * Read and compile a Mustache template  *  * @param resourceReader Reader used to get template  * @param resourceUri    Template Id  * @return Template  */ private Mustache createMustache(Reader resourceReader, String resourceUri) throws IOException {     ClassLoader oldcl = Thread.currentThread().getContextClassLoader().     try {         ClassLoader apcl = getCamelContext().getApplicationContextClassLoader().         if (apcl != null) {             Thread.currentThread().setContextClassLoader(apcl).         }         Mustache newMustache.         if (startDelimiter != null && endDelimiter != null && mustacheFactory instanceof DefaultMustacheFactory) {             DefaultMustacheFactory defaultMustacheFactory = (DefaultMustacheFactory) mustacheFactory.             newMustache = defaultMustacheFactory.compile(resourceReader, resourceUri, startDelimiter, endDelimiter).         } else {             newMustache = mustacheFactory.compile(resourceReader, resourceUri).         }         return newMustache.     } finally {         resourceReader.close().         if (oldcl != null) {             Thread.currentThread().setContextClassLoader(oldcl).         }     } }
false;private;0;6;;private Mustache getOrCreateMustache() throws IOException {     if (mustache == null) {         mustache = createMustache(getResourceAsReader(), getResourceUri()).     }     return mustache. }
false;public;0;10;;@Override public String getResourceUri() {     // do not have leading slash as mustache cannot find the resource, as that entails classpath root     String uri = super.getResourceUri().     if (uri != null && (uri.startsWith("/") || uri.startsWith("\\"))) {         return uri.substring(1).     } else {         return uri.     } }
false;public;0;3;;public MustacheFactory getMustacheFactory() {     return mustacheFactory. }
true;public;1;3;/**  * To use a custom {@link MustacheFactory}  */ ;/**  * To use a custom {@link MustacheFactory}  */ public void setMustacheFactory(MustacheFactory mustacheFactory) {     this.mustacheFactory = mustacheFactory. }
false;public;0;3;;public String getEncoding() {     return encoding. }
true;public;1;3;/**  * Character encoding of the resource content.  */ ;/**  * Character encoding of the resource content.  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
false;private;0;5;;private Reader getResourceAsReader() throws IOException {     return encoding == null ? new InputStreamReader(getResourceAsInputStream()) : new InputStreamReader(getResourceAsInputStream(), encoding). }
false;public;0;3;;public String getStartDelimiter() {     return startDelimiter. }
true;public;1;3;/**  * Characters used to mark template code beginning.  */ ;/**  * Characters used to mark template code beginning.  */ public void setStartDelimiter(String startDelimiter) {     this.startDelimiter = startDelimiter. }
false;public;0;3;;public String getEndDelimiter() {     return endDelimiter. }
true;public;1;3;/**  * Characters used to mark template code end.  */ ;/**  * Characters used to mark template code end.  */ public void setEndDelimiter(String endDelimiter) {     this.endDelimiter = endDelimiter. }
