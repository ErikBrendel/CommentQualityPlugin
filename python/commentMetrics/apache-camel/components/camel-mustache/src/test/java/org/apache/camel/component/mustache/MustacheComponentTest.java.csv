commented;modifiers;parameterAmount;loc;comment;code
true;public;0;10;/**  * Main test  */ ;/**  * Main test  */ @Test public void testMustache() throws Exception {     // Prepare     endSimpleMock.expectedMessageCount(1).     endSimpleMock.expectedBodiesReceived("Message with body 'The Body' and some header 'Some Header'").     // Act     startSimpleProducerTemplate.sendBodyAndHeader("The Body", "someHeader", "Some Header").     // Verify     assertMockEndpointsSatisfied(). }
true;public;0;13;/**  * Test using code Template header  */ ;/**  * Test using code Template header  */ @Test public void testMustacheWithTemplateHeader() throws Exception {     // Prepare     Exchange exchange = createExchangeWithBody("The Body").     exchange.getIn().setHeader("someHeader", "Some Header").     exchange.getIn().setHeader(MustacheConstants.MUSTACHE_TEMPLATE, "Body='{{body}}'|SomeHeader='{{headers.someHeader}}'").     endSimpleMock.expectedMessageCount(1).     endSimpleMock.expectedBodiesReceived("Body='The Body'|SomeHeader='Some Header'").     // Act     startSimpleProducerTemplate.send(exchange).     // Verify     assertMockEndpointsSatisfied(). }
true;public;0;14;/**  * Test using Resource URI header  */ ;/**  * Test using Resource URI header  */ @Test public void testMustacheWithResourceUriHeader() throws Exception {     // Prepare     Exchange exchange = createExchangeWithBody("The Body").     exchange.getIn().setHeader("someHeader", "Some Header").     exchange.getIn().setHeader(MustacheConstants.MUSTACHE_RESOURCE_URI, "/another.mustache").     endSimpleMock.expectedMessageCount(1).     endSimpleMock.message(0).body().contains("The Body").     endSimpleMock.message(0).body().contains("Some Header").     // Act     startSimpleProducerTemplate.send(exchange).     // Verify     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testMustacheWithInheritance() throws Exception {     // Prepare     Exchange exchange = createExchangeWithBody("The Body").     exchange.getIn().setHeader(MustacheConstants.MUSTACHE_RESOURCE_URI, "/child.mustache").     endSimpleMock.expectedMessageCount(1).     endSimpleMock.message(0).body().contains("Content 1: Child 1").     endSimpleMock.message(0).body().contains("Middle").     endSimpleMock.message(0).body().contains("Content 2: Child 2").     // Act     startSimpleProducerTemplate.send(exchange).     // Verify     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testMustacheWithPartials() throws Exception {     // Prepare     Exchange exchange = createExchangeWithBody("The Body").     exchange.getIn().setHeader(MustacheConstants.MUSTACHE_RESOURCE_URI, "/includer.mustache").     endSimpleMock.expectedMessageCount(1).     endSimpleMock.message(0).body().contains("Start").     endSimpleMock.message(0).body().contains("Included").     endSimpleMock.message(0).body().contains("End").     // Act     startSimpleProducerTemplate.send(exchange).     // Verify     assertMockEndpointsSatisfied(). }
true;public;0;11;/**  * Main test  */ ;/**  * Main test  */ @Test public void testMustachePerformance() throws Exception {     int messageCount = 10000.     endSimpleMock.expectedMessageCount(messageCount).     StopWatch stopwatch = new StopWatch(true).     for (int i = 0. i < messageCount. i++) {         startSimpleProducerTemplate.sendBodyAndHeader("The Body", "someHeader", "Some Header").     }     assertMockEndpointsSatisfied().     LoggerFactory.getLogger(getClass()).info("Mustache performance: " + stopwatch.taken() + "ms for " + messageCount + " messages"). }
false;public;0;6;;@Override public void configure() {     from("direct:startSimple").to("mustache://simple.mustache").to("mock:endSimple"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:startSimple").to("mustache://simple.mustache").to("mock:endSimple").         }     }. }
