commented;modifiers;parameterAmount;loc;comment;code
true;private;0;11;// START SNIPPET: e1 ;// START SNIPPET: e1 private Exchange createLetter() {     Exchange exchange = context.getEndpoint("direct:a").createExchange().     Message msg = exchange.getIn().     msg.setHeader("firstName", "Claus").     msg.setHeader("lastName", "Ibsen").     msg.setHeader("item", "Camel in Action").     msg.setBody("PS: Next beer is on me, James").     return exchange. }
false;public;0;10;;@Test public void testMustacheLetter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().contains("Thanks for the order of Camel in Action").     template.send("direct:a", createLetter()).     mock.assertIsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:a").to("mustache:letter.mustache").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("mustache:letter.mustache").to("mock:result").         }     }. }
