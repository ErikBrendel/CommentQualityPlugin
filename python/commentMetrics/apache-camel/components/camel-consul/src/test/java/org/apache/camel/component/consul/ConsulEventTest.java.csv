commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testFireEvent() throws Exception {     String key = generateRandomString().     String val = generateRandomString().     MockEndpoint mock = getMockEndpoint("mock:event").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(ConsulConstants.CONSUL_RESULT, true).     fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulEventActions.FIRE).withHeader(ConsulConstants.CONSUL_KEY, key).withBody(val).to("direct:event").send().     mock.assertIsSatisfied().     EventResponse response = getConsul().eventClient().listEvents(key).     List<Event> events = response.getEvents().     assertFalse(events.isEmpty()).     assertTrue(events.get(0).getPayload().isPresent()).     assertEquals(val, events.get(0).getPayload().get()). }
false;public;0;5;;public void configure() {     from("direct:event").to("consul:event").to("mock:event"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:event").to("consul:event").to("mock:event").         }     }. }
