commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected Map<String, String> getMetadata() {     return Collections.emptyMap(). }
false;protected;0;15;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     ConsulServiceRegistry registry = new ConsulServiceRegistry().     registry.setId(context.getUuidGenerator().generateUuid()).     registry.setCamelContext(context()).     registry.setUrl(consulUrl()).     registry.setServiceHost(SERVICE_HOST).     registry.setOverrideServiceHost(true).     context.addService(registry, true, false).     return context. }
false;public;0;36;;@Test public void testRegistrationFromRoute() throws Exception {     final CatalogClient catalog = getConsul().catalogClient().     final HealthClient health = getConsul().healthClient().     // the service should not be registered as the route is not running     assertTrue(catalog.getService(SERVICE_NAME).getResponse().isEmpty()).     // let start the route     context().getRouteController().startRoute(SERVICE_ID).     // check that service has been registered     List<CatalogService> services = catalog.getService(SERVICE_NAME).getResponse().     assertEquals(1, services.size()).     assertEquals(SERVICE_PORT, services.get(0).getServicePort()).     assertEquals("localhost", services.get(0).getServiceAddress()).     assertTrue(services.get(0).getServiceTags().contains(ServiceDefinition.SERVICE_META_PROTOCOL + "=http")).     assertTrue(services.get(0).getServiceTags().contains(ServiceDefinition.SERVICE_META_PATH + "=/service/endpoint")).     getMetadata().forEach((k, v) -> {         assertTrue(services.get(0).getServiceTags().contains(k + "=" + v)).     }).     List<ServiceHealth> checks = health.getHealthyServiceInstances(SERVICE_NAME).getResponse().     assertEquals(1, checks.size()).     assertEquals(SERVICE_PORT, checks.get(0).getService().getPort()).     assertEquals("localhost", checks.get(0).getService().getAddress()).     // let stop the route     context().getRouteController().stopRoute(SERVICE_ID).     // the service should be removed once the route is stopped     assertTrue(catalog.getService(SERVICE_NAME).getResponse().isEmpty()). }
