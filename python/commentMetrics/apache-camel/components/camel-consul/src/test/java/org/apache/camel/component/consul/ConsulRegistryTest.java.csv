commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public String hello(String name) {     return "Hello " + name. }
false;public,static;0;7;;@BeforeClass public static void setUp() {     container = ConsulTestSupport.consulContainer().     container.start().     registry = new ConsulRegistry(container.getContainerIpAddress(), container.getMappedPort(Consul.DEFAULT_HTTP_PORT)). }
false;public,static;0;4;;@AfterClass public static void tearDown() {     container.stop(). }
false;public;0;8;;@Test public void storeString() {     registry.put("stringTestKey", "stringValue").     String result = (String) registry.lookupByName("stringTestKey").     registry.remove("stringTestKey").     assertNotNull(result).     assertEquals("stringValue", result). }
false;public;0;9;;@Test public void overrideExistingKey() {     registry.put("uniqueKey", "stringValueOne").     registry.put("uniqueKey", "stringValueTwo").     String result = (String) registry.lookupByName("uniqueKey").     registry.remove("uniqueKey").     assertNotNull(result).     assertEquals("stringValueTwo", result). }
false;public;0;8;;@Test public void checkLookupByName() {     registry.put("namedKey", "namedValue").     String result = (String) registry.lookupByName("namedKey").     registry.remove("namedKey").     assertNotNull(result).     assertEquals("namedValue", result). }
false;public;0;7;;@Test public void checkFailedLookupByName() {     registry.put("namedKey", "namedValue").     registry.remove("namedKey").     String result = (String) registry.lookupByName("namedKey").     assertNull(result). }
false;public;0;9;;@Test public void checkLookupByNameAndType() {     ConsulTestClass consulTestClass = new ConsulTestClass().     registry.put("testClass", consulTestClass).     ConsulTestClass consulTestClassClone = registry.lookupByNameAndType("testClass", consulTestClass.getClass()).     registry.remove("testClass").     assertNotNull(consulTestClassClone).     assertEquals(consulTestClass.getClass(), consulTestClassClone.getClass()). }
false;public;0;8;;@Test public void checkFailedLookupByNameAndType() {     ConsulTestClass consulTestClass = new ConsulTestClass().     registry.put("testClass", consulTestClass).     registry.remove("testClass").     ConsulTestClass consulTestClassClone = registry.lookupByNameAndType("testClass", consulTestClass.getClass()).     assertNull(consulTestClassClone). }
false;public;0;15;;@Test public void checkFindByTypeWithName() {     ConsulTestClass consulTestClassOne = new ConsulTestClass().     ConsulTestClass consulTestClassTwo = new ConsulTestClass().     registry.put("testClassOne", consulTestClassOne).     registry.put("testClassTwo", consulTestClassTwo).     Map<String, ? extends ConsulTestClass> consulTestClassMap = registry.findByTypeWithName(consulTestClassOne.getClass()).     registry.remove("testClassOne").     registry.remove("testClassTwo").     HashMap<String, ConsulTestClass> emptyHashMap = new HashMap<>().     assertNotNull(consulTestClassMap).     assertEquals(consulTestClassMap.getClass(), emptyHashMap.getClass()).     assertEquals(2, consulTestClassMap.size()). }
false;public;0;3;;public void checkFailedFindByTypeWithName() { }
false;public;0;8;;@Test public void storeObject() {     ConsulTestClass testObject = new ConsulTestClass().     registry.put("objectTestClass", testObject).     ConsulTestClass clone = (ConsulTestClass) registry.lookupByName("objectTestClass").     assertEquals(clone.hello("World"), "Hello World").     registry.remove("objectTestClass"). }
false;public;0;14;;@Test public void findByType() {     ConsulTestClass classOne = new ConsulTestClass().     registry.put("classOne", classOne).     ConsulTestClass classTwo = new ConsulTestClass().     registry.put("classTwo", classTwo).     Set<? extends ConsulTestClass> results = registry.findByType(classOne.getClass()).     assertNotNull(results).     HashSet<ConsulTestClass> hashSet = new HashSet<>().     registry.remove("classOne").     registry.remove("classTwo").     assertEquals(results.getClass(), hashSet.getClass()).     assertEquals(2, results.size()). }
false;public;0;3;;public void notFindByType() { }
false;public;0;4;;@Test(expected = NoSuchBeanException.class) public void deleteNonExisting() {     registry.remove("nonExisting"). }
