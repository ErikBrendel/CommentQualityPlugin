commented;modifiers;parameterAmount;loc;comment;code
false;public;0;49;;@Test public void testServiceInstance() throws Exception {     final String name = UUID.randomUUID().toString().     final int sessions = getConsul().sessionClient().listSessions().size().     {         List<SessionInfo> list = fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulSessionActions.LIST).to("direct:consul").request(List.class).         Assert.assertEquals(sessions, list.size()).         Assert.assertFalse(list.stream().anyMatch(s -> s.getName().isPresent() && s.getName().get().equals(name))).     }     SessionCreatedResponse res = fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulSessionActions.CREATE).withBody(ImmutableSession.builder().name(name).build()).to("direct:consul").request(SessionCreatedResponse.class).     Assert.assertNotNull(res.getId()).     {         List<SessionInfo> list = fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulSessionActions.LIST).to("direct:consul").request(List.class).         Assert.assertEquals(sessions + 1, list.size()).         Assert.assertTrue(list.stream().anyMatch(s -> s.getName().isPresent() && s.getName().get().equals(name))).     }     {         fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulSessionActions.DESTROY).withHeader(ConsulConstants.CONSUL_SESSION, res.getId()).to("direct:consul").send().         List<SessionInfo> list = fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulSessionActions.LIST).to("direct:consul").request(List.class).         Assert.assertEquals(sessions, list.size()).         Assert.assertFalse(list.stream().anyMatch(s -> s.getName().isPresent() && s.getName().get().equals(name))).     } }
false;public;0;4;;public void configure() {     from("direct:consul").to("consul:session"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:consul").to("consul:session").         }     }. }
