commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testKeyPut() throws Exception {     String key = generateKey().     String val = generateRandomString().     MockEndpoint mock = getMockEndpoint("mock:kv").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(val).     mock.expectedHeaderReceived(ConsulConstants.CONSUL_RESULT, true).     fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulKeyValueActions.PUT).withHeader(ConsulConstants.CONSUL_KEY, key).withBody(val).to("direct:kv").send().     mock.assertIsSatisfied().     Optional<String> keyVal = getConsul().keyValueClient().getValueAsString(key).     assertTrue(keyVal.isPresent()).     assertEquals(val, keyVal.get()). }
false;public;0;5;;public void configure() {     from("direct:kv").to("consul:kv").to("mock:kv"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:kv").to("consul:kv").to("mock:kv").         }     }. }
