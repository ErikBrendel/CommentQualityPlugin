commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testListDatacenters() throws Exception {     List<String> ref = getConsul().catalogClient().getDatacenters().     List<String> res = fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulCatalogActions.LIST_DATACENTERS).to("direct:consul").request(List.class).     Assert.assertFalse(ref.isEmpty()).     Assert.assertFalse(res.isEmpty()).     Assert.assertEquals(ref, res). }
false;public;0;12;;@Test public void testListNodes() throws Exception {     List<Node> ref = getConsul().catalogClient().getNodes().getResponse().     List<Node> res = fluentTemplate().withHeader(ConsulConstants.CONSUL_ACTION, ConsulCatalogActions.LIST_NODES).to("direct:consul").request(List.class).     Assert.assertFalse(ref.isEmpty()).     Assert.assertFalse(res.isEmpty()).     Assert.assertEquals(ref, res). }
false;public;0;4;;public void configure() {     from("direct:consul").to("consul:catalog"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:consul").to("consul:catalog").         }     }. }
