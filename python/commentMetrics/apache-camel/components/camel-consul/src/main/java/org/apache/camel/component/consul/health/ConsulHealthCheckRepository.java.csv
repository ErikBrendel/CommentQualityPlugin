commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ************************************* //  // ************************************* public ConsulHealthCheckRepositoryConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(ConsulHealthCheckRepositoryConfiguration configuration) {     this.configuration = configuration. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;0;12;;@Override public Stream<HealthCheck> stream() {     final Set<String> ids = configuration.getChecks().     if (ObjectHelper.isNotEmpty(ids)) {         return ids.stream().map(checkId -> checks.computeIfAbsent(checkId, ConsulHealthCheck::new)).filter(check -> check.getConfiguration().isEnabled()).     }     return Stream.empty(). }
false;private;0;9;;// ************************************* //  // ************************************* private Consul createConsul() throws Exception {     ConsulHealthCheckRepositoryConfiguration conf = configuration.     if (conf == null) {         conf = new ConsulHealthCheckRepositoryConfiguration().     }     return conf.createConsulClient(camelContext). }
false;protected;2;37;;@Override protected void doCall(HealthCheckResultBuilder builder, Map<String, Object> options) {     builder.unknown().     com.orbitz.consul.model.health.HealthCheck check = client.get().agentClient().getChecks().get(checkId).     if (check != null) {         // )         if (ObjectHelper.equalIgnoreCase(check.getStatus(), "passing")) {             builder.up().         }         if (ObjectHelper.equalIgnoreCase(check.getStatus(), "warning")) {             builder.down().         }         if (ObjectHelper.equalIgnoreCase(check.getStatus(), "critical")) {             builder.down().         }         builder.detail("consul.service.name", check.getServiceName().orElse(null)).         builder.detail("consul.service.id", check.getServiceId().orElse(null)).         builder.detail("consul.check.status", check.getStatus()).         builder.detail("consul.check.id", check.getCheckId()).     } }
false;public;1;4;;public Builder configuration(HealthCheckConfiguration defaultConfiguration) {     this.defaultConfiguration = defaultConfiguration.     return this. }
false;public;2;9;;public Builder configuration(String id, HealthCheckConfiguration configuration) {     if (this.configurations == null) {         this.configurations = new HashMap<>().     }     this.configurations.put(id, configuration).     return this. }
false;public;1;7;;public Builder configurations(Map<String, HealthCheckConfiguration> configurations) {     if (ObjectHelper.isNotEmpty(configurations)) {         configurations.forEach(this::configuration).     }     return this. }
false;public;1;10;;public Builder check(String id) {     if (ObjectHelper.isNotEmpty(id)) {         if (this.checks == null) {             this.checks = new HashSet<>().         }         this.checks.add(id).     }     return this. }
false;public;1;7;;public Builder checks(Collection<String> ids) {     if (ObjectHelper.isNotEmpty(ids)) {         ids.forEach(this::check).     }     return this. }
false;public;0;14;;@Override public ConsulHealthCheckRepository build() {     ConsulHealthCheckRepositoryConfiguration configuration = new ConsulHealthCheckRepositoryConfiguration().     configuration.setDefaultConfiguration(defaultConfiguration).     if (checks != null) {         checks.forEach(configuration::addCheck).     }     if (configurations != null) {         configurations.forEach(configuration::addConfiguration).     }     return new ConsulHealthCheckRepository(configuration). }
