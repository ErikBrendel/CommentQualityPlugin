commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Runnable createWatcher(KeyValueClient client) throws Exception {     return configuration.isRecursive() ? new RecursivePathWatcher(client) : new PathWatcher(client). }
false;protected;0;3;;protected QueryOptions queryOptions() {     return QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(). }
false;public;1;8;;@Override public void onComplete(ConsulResponse<T> consulResponse) {     if (isRunAllowed()) {         onResponse(consulResponse.getResponse()).         setIndex(consulResponse.getIndex()).         watch().     } }
false;public;1;4;;@Override public void onFailure(Throwable throwable) {     onError(throwable). }
false;protected;1;23;;protected void onValue(Value value) {     final Exchange exchange = endpoint.createExchange().     final Message message = exchange.getIn().     message.setHeader(ConsulConstants.CONSUL_KEY, value.getKey()).     message.setHeader(ConsulConstants.CONSUL_RESULT, true).     message.setHeader(ConsulConstants.CONSUL_FLAGS, value.getFlags()).     message.setHeader(ConsulConstants.CONSUL_CREATE_INDEX, value.getCreateIndex()).     message.setHeader(ConsulConstants.CONSUL_LOCK_INDEX, value.getLockIndex()).     message.setHeader(ConsulConstants.CONSUL_MODIFY_INDEX, value.getModifyIndex()).     if (value.getSession().isPresent()) {         message.setHeader(ConsulConstants.CONSUL_SESSION, value.getSession().get()).     }     message.setBody(configuration.isValueAsString() ? value.getValueAsString().orElse(null) : value.getValue().orElse(null)).     try {         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException("Error processing exchange", exchange, e).     } }
false;protected,abstract;1;1;;protected abstract void onResponse(T consulResponse).
false;public;1;4;;@Override public void watch(KeyValueClient client) {     client.getValue(key, queryOptions(), this). }
false;public;1;4;;@Override public void onResponse(Optional<Value> value) {     value.ifPresent(this::onValue). }
false;public;1;4;;@Override public void watch(KeyValueClient client) {     client.getValues(key, queryOptions(), this). }
false;public;1;4;;@Override public void onResponse(List<Value> values) {     values.forEach(this::onValue). }
