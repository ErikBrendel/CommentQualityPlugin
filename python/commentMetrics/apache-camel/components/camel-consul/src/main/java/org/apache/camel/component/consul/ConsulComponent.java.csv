commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ************************************ // Options // ************************************ public String getUrl() {     return this.configuration.getUrl(). }
true;public;1;3;/**  * The Consul agent URL  */ ;/**  * The Consul agent URL  */ public void setUrl(String url) {     this.configuration.setUrl(url). }
false;public;0;3;;public String getDatacenter() {     return configuration.getDatacenter(). }
true;public;1;3;/**  * The data center  * @param datacenter  */ ;/**  * The data center  * @param datacenter  */ public void setDatacenter(String datacenter) {     configuration.setDatacenter(datacenter). }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return configuration.getSslContextParameters(). }
true;public;1;3;/**  * SSL configuration using an org.apache.camel.support.jsse.SSLContextParameters  * instance.  * @param sslContextParameters  */ ;/**  * SSL configuration using an org.apache.camel.support.jsse.SSLContextParameters  * instance.  * @param sslContextParameters  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     configuration.setSslContextParameters(sslContextParameters). }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
false;public;0;3;;public String getAclToken() {     return configuration.getAclToken(). }
true;public;1;3;/**  * Sets the ACL token to be used with Consul  * @param aclToken  */ ;/**  * Sets the ACL token to be used with Consul  * @param aclToken  */ public void setAclToken(String aclToken) {     configuration.setAclToken(aclToken). }
false;public;0;3;;public String getUserName() {     return configuration.getUserName(). }
true;public;1;3;/**  * Sets the username to be used for basic authentication  * @param userName  */ ;/**  * Sets the username to be used for basic authentication  * @param userName  */ public void setUserName(String userName) {     configuration.setUserName(userName). }
false;public;0;3;;public String getPassword() {     return configuration.getPassword(). }
true;public;1;3;/**  * Sets the password to be used for basic authentication  * @param password  */ ;/**  * Sets the password to be used for basic authentication  * @param password  */ public void setPassword(String password) {     configuration.setPassword(password). }
false;public;0;3;;public ConsulConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * Sets the common configuration shared among endpoints  */ ;/**  * Sets the common configuration shared among endpoints  */ public void setConfiguration(ConsulConfiguration configuration) {     this.configuration = configuration. }
false;protected;3;52;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     ConsulConfiguration configuration = Optional.ofNullable(this.configuration).orElseGet(ConsulConfiguration::new).copy().     // using global ssl context parameters if set     if (configuration.getSslContextParameters() == null) {         configuration.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     setProperties(configuration, parameters).     switch(remaining) {         case "kv":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulKeyValueProducer::new), Optional.of(ConsulKeyValueConsumer::new)).         case "event":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulEventProducer::new), Optional.of(ConsulEventConsumer::new)).         case "agent":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulAgentProducer::new), Optional.empty()).         case "coordinates":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulCoordinatesProducer::new), Optional.empty()).         case "health":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulHealthProducer::new), Optional.empty()).         case "status":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulStatusProducer::new), Optional.empty()).         case "preparedQuery":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulPreparedQueryProducer::new), Optional.empty()).         case "catalog":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulCatalogProducer::new), Optional.empty()).         case "session":             return new ConsulEndpoint(remaining, uri, this, configuration, Optional.of(ConsulSessionProducer::new), Optional.empty()).         default:             throw new IllegalArgumentException("Unknown apiEndpoint: " + remaining).     } }
