commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// **************** // Properties // **************** public ConsulServiceRegistryConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(ConsulServiceRegistryConfiguration configuration) {     this.configuration = configuration.copy(). }
false;public;0;3;;public String getUrl() {     return configuration.getUrl(). }
false;public;1;3;;public void setUrl(String url) {     configuration.setUrl(url). }
false;public;0;3;;public String getDatacenter() {     return configuration.getDatacenter(). }
false;public;1;3;;public void setDatacenter(String datacenter) {     configuration.setDatacenter(datacenter). }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return configuration.getSslContextParameters(). }
false;public;1;3;;public void setSslContextParameters(SSLContextParameters sslContextParameters) {     configuration.setSslContextParameters(sslContextParameters). }
false;public;0;3;;public String getAclToken() {     return configuration.getAclToken(). }
false;public;1;3;;public void setAclToken(String aclToken) {     configuration.setAclToken(aclToken). }
false;public;0;3;;public String getUserName() {     return configuration.getUserName(). }
false;public;1;3;;public void setUserName(String userName) {     configuration.setUserName(userName). }
false;public;0;3;;public String getPassword() {     return configuration.getPassword(). }
false;public;1;3;;public void setPassword(String password) {     configuration.setPassword(password). }
false;public;0;3;;public Long getConnectTimeoutMillis() {     return configuration.getConnectTimeoutMillis(). }
false;public;1;3;;public void setConnectTimeoutMillis(Long connectTimeoutMillis) {     configuration.setConnectTimeoutMillis(connectTimeoutMillis). }
false;public;0;3;;public Long getReadTimeoutMillis() {     return configuration.getReadTimeoutMillis(). }
false;public;1;3;;public void setReadTimeoutMillis(Long readTimeoutMillis) {     configuration.setReadTimeoutMillis(readTimeoutMillis). }
false;public;0;3;;public Long getWriteTimeoutMillis() {     return configuration.getWriteTimeoutMillis(). }
false;public;1;3;;public void setWriteTimeoutMillis(Long writeTimeoutMillis) {     configuration.setWriteTimeoutMillis(writeTimeoutMillis). }
false;public;0;3;;public Integer getBlockSeconds() {     return configuration.getBlockSeconds(). }
false;public;1;3;;public void setBlockSeconds(Integer blockSeconds) {     configuration.setBlockSeconds(blockSeconds). }
false;public;0;3;;public boolean isOverrideServiceHost() {     return configuration.isOverrideServiceHost(). }
false;public;1;3;;public void setOverrideServiceHost(boolean overrideServiceHost) {     configuration.setOverrideServiceHost(overrideServiceHost). }
false;public;0;3;;public String getServiceHost() {     return configuration.getServiceHost(). }
false;public;1;3;;public void setServiceHost(String serviceHost) {     configuration.setServiceHost(serviceHost). }
false;public;0;3;;public int getCheckTtl() {     return configuration.getCheckTtl(). }
false;public;1;3;;public void setCheckTtl(int checkTtl) {     configuration.setCheckTtl(checkTtl). }
false;public;0;3;;public int getCheckInterval() {     return configuration.getCheckInterval(). }
false;public;1;3;;public void setCheckInterval(int checkInterval) {     configuration.setCheckInterval(checkInterval). }
false;public;0;3;;public int getDeregisterAfter() {     return configuration.getDeregisterAfter(). }
false;public;1;3;;public void setDeregisterAfter(int deregisterAfter) {     configuration.setDeregisterAfter(deregisterAfter). }
false;public;0;3;;public boolean isDeregisterServicesOnStop() {     return configuration.isDeregisterServicesOnStop(). }
false;public;1;3;;public void setDeregisterServicesOnStop(boolean deregisterServicesOnStop) {     configuration.setDeregisterServicesOnStop(deregisterServicesOnStop). }
false;protected;0;5;;// **************** // Lifecycle // **************** @Override protected void doStart() throws Exception {     client = this.configuration.createConsulClient(getCamelContext()).     scheduler = getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "ConsulServiceRegistry"). }
false;protected;0;22;;@Override protected void doStop() throws Exception {     if (scheduler != null) {         getCamelContext().getExecutorServiceManager().shutdownNow(scheduler).         scheduler = null.     }     if (configuration.isDeregisterServicesOnStop()) {         for (Service service : client.agentClient().getServices().values()) {             try {                 if (serviceList.contains(service.getId())) {                     client.agentClient().deregister(service.getId()).                     serviceList.remove(service.getId()).                 }             } catch (Exception e) {                 LOGGER.warn("Error de-registering service: " + service, e).             }         }         client = null.     } }
false;public;1;63;;// **************** // Registry // **************** @Override public void register(ServiceDefinition definition) {     if (definition.getId() == null) {         throw new IllegalArgumentException("Service ID must be defined (definition=" + definition + ")").     }     if (definition.getName() == null) {         throw new IllegalArgumentException("Service Name must be defined (definition=" + definition + ")").     }     Registration registration = ImmutableRegistration.builder().address(computeServiceHost(definition)).port(definition.getPort()).name(definition.getName()).id(definition.getId()).check(computeCheck(definition)).tags(definition.getMetadata().entrySet().stream().filter(e -> e.getValue() != null).map(e -> e.getKey() + "=" + e.getValue()).collect(Collectors.toList())).addTags("_consul.service.registry.id=" + getId()).build().     // perform service registration against consul     client.agentClient().register(registration).     try {         // mark the service as healthy         client.agentClient().pass(definition.getId()).         // If the service has TTL enabled         registration.getCheck().flatMap(Registration.RegCheck::getTtl).ifPresent(ignored -> {             LOGGER.debug("Configure service pass for: {}", definition).             scheduler.scheduleAtFixedRate(() -> {                 try {                     if (serviceList.contains(definition.getId())) {                         client.agentClient().pass(definition.getId()).                     }                 } catch (NotRegisteredException e) {                     LOGGER.warn("Service with id: {} is not more registered", definition.getId()).                     serviceList.remove(definition.getId()).                 }             }, configuration.getCheckInterval() / 2, configuration.getCheckInterval(), TimeUnit.SECONDS).         }).     } catch (NotRegisteredException e) {         LOGGER.warn("There was an issue registering service: {}", definition.getId()).     }     // add the serviceId to the list of known server     serviceList.add(definition.getId()). }
false;public;1;11;;@Override public void deregister(ServiceDefinition definition) {     if (definition.getId() == null) {         throw new IllegalArgumentException("ServiceID must be defined (definition=" + definition + ")").     }     client.agentClient().deregister(definition.getId()).     // remove the serviceId to the list of known server     serviceList.remove(definition.getId()). }
false;private;1;9;;private String computeServiceHost(ServiceDefinition definition) {     String host = definition.getHost().     if (configuration.isOverrideServiceHost() && configuration.getServiceHost() != null) {         host = configuration.getServiceHost().     }     return ObjectHelper.notNull(host, "service host"). }
true;private;1;56;// TODO: this need to be improved ;// TODO: this need to be improved private Registration.RegCheck computeCheck(ServiceDefinition definition) {     if (definition.getHealth() == null) {         return ImmutableRegCheck.builder().ttl(String.format("%ss", configuration.getCheckInterval())).deregisterCriticalServiceAfter(String.format("%ss", configuration.getDeregisterAfter())).build().     }     return definition.getHealth().getEndpoint().flatMap(uri -> {         if (Objects.equals("http", uri.getScheme())) {             return Optional.of(ImmutableRegCheck.builder().http(uri.toASCIIString()).interval(String.format("%ss", configuration.getCheckInterval())).deregisterCriticalServiceAfter(String.format("%ss", configuration.getDeregisterAfter())).build()).         }         if (Objects.equals("https", uri.getScheme())) {             return Optional.of(ImmutableRegCheck.builder().http(uri.toASCIIString()).interval(String.format("%ss", configuration.getCheckInterval())).deregisterCriticalServiceAfter(String.format("%ss", configuration.getDeregisterAfter())).build()).         }         if (Objects.equals("tcp", uri.getScheme())) {             return Optional.of(ImmutableRegCheck.builder().tcp(uri.getHost()).interval(String.format("%ss", configuration.getCheckInterval())).deregisterCriticalServiceAfter(String.format("%ss", configuration.getDeregisterAfter())).build()).         }         if (Objects.equals("grpc", uri.getScheme())) {             return Optional.of(ImmutableRegCheck.builder().grpc(uri.getHost()).interval(String.format("%ss", configuration.getCheckInterval())).deregisterCriticalServiceAfter(String.format("%ss", configuration.getDeregisterAfter())).build()).         }         return Optional.empty().     }).orElseGet(() -> ImmutableRegCheck.builder().ttl(String.format("%ss", configuration.getCheckInterval())).deregisterCriticalServiceAfter(String.format("%ss", configuration.getDeregisterAfter())).build()). }
