commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;// ************************************************************************* //  // ************************************************************************* protected C getClient() throws Exception {     if (client == null) {         client = clientSupplier.apply(endpoint.getConsul()).     }     return client. }
false;protected;0;3;;protected ConsulConfiguration getConfiguration() {     return configuration. }
false;protected;3;3;;protected <D> D getMandatoryHeader(Message message, String header, Class<D> type) throws Exception {     return getMandatoryHeader(message, header, (D) null, type). }
false;protected;4;8;;protected <D> D getMandatoryHeader(Message message, String header, D defaultValue, Class<D> type) throws Exception {     D value = message.getHeader(header, defaultValue, type).     if (value == null) {         throw new NoSuchHeaderException(message.getExchange(), header, type).     }     return value. }
false;protected;2;27;;protected QueryOptions buildQueryOptions(Message message, ConsulConfiguration conf) {     ImmutableQueryOptions.Builder builder = ImmutableQueryOptions.builder().     ObjectHelper.ifNotEmpty(message.getHeader(ConsulConstants.CONSUL_INDEX, BigInteger.class), builder::index).     ObjectHelper.ifNotEmpty(message.getHeader(ConsulConstants.CONSUL_WAIT, String.class), builder::wait).     ObjectHelper.ifNotEmpty(message.getHeader(ConsulConstants.CONSUL_DATACENTER, conf.getDatacenter(), String.class), builder::datacenter).     ObjectHelper.ifNotEmpty(message.getHeader(ConsulConstants.CONSUL_NEAR_NODE, conf.getNearNode(), String.class), builder::near).     ObjectHelper.ifNotEmpty(conf.getAclToken(), builder::token).     ObjectHelper.ifNotEmpty(message.getHeader(ConsulConstants.CONSUL_CONSISTENCY_MODE, conf.getConsistencyMode(), ConsistencyMode.class), builder::consistencyMode).     ObjectHelper.ifNotEmpty(message.getHeader(ConsulConstants.CONSUL_NODE_META, conf.getNodeMeta(), List.class), builder::nodeMeta).     return builder.build(). }
false;protected;2;7;;protected <T> void processConsulResponse(Message message, ConsulResponse<T> response) throws Exception {     message.setHeader(ConsulConstants.CONSUL_INDEX, response.getIndex()).     message.setHeader(ConsulConstants.CONSUL_LAST_CONTACT, response.getLastContact()).     message.setHeader(ConsulConstants.CONSUL_KNOWN_LEADER, response.isKnownLeader()).     setBodyAndResult(message, response.getResponse()). }
false;protected;2;3;;protected void setBodyAndResult(Message message, Object body) throws Exception {     setBodyAndResult(message, body, body != null). }
false;protected;3;6;;protected void setBodyAndResult(Message message, Object body, boolean result) throws Exception {     message.setHeader(ConsulConstants.CONSUL_RESULT, result).     if (body != null) {         message.setBody(body).     } }
false;protected;1;3;;protected Processor wrap(Function<C, Object> supplier) {     return exchange -> setBodyAndResult(exchange.getIn(), supplier.apply(getClient())). }
