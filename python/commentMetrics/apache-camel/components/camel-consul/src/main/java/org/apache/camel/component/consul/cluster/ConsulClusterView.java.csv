commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public Optional<CamelClusterMember> getLeader() {     if (keyValueClient == null) {         return Optional.empty().     }     return keyValueClient.getSession(configuration.getRootPath()).map(ConsulClusterMember::new). }
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return this.localMember. }
false;public;0;11;;@Override public List<CamelClusterMember> getMembers() {     if (sessionClient == null) {         return Collections.emptyList().     }     return sessionClient.listSessions().stream().filter(i -> i.getName().equals(getNamespace())).map(ConsulClusterMember::new).collect(Collectors.toList()). }
false;protected;0;25;;@Override protected void doStart() throws Exception {     if (sessionId.get() == null) {         client = configuration.createConsulClient(getCamelContext()).         sessionClient = client.sessionClient().         keyValueClient = client.keyValueClient().         sessionId.set(sessionClient.createSession(ImmutableSession.builder().name(getNamespace()).ttl(configuration.getSessionTtl() + "s").lockDelay(configuration.getSessionLockDelay() + "s").build()).getId()).         LOGGER.debug("Acquired session with id '{}'", sessionId.get()).         boolean lock = acquireLock().         LOGGER.debug("Acquire lock on path '{}' with id '{}' result '{}'", path, sessionId.get(), lock).         localMember.setMaster(lock).         watcher.watch().     } }
false;protected;0;13;;@Override protected void doStop() throws Exception {     if (sessionId.get() != null) {         if (keyValueClient.releaseLock(this.path, sessionId.get())) {             LOGGER.debug("Successfully released lock on path '{}' with id '{}'", path, sessionId.get()).         }         synchronized (sessionId) {             sessionClient.destroySession(sessionId.getAndSet(null)).             localMember.setMaster(false).         }     } }
false;private;0;9;;private boolean acquireLock() {     synchronized (sessionId) {         String sid = sessionId.get().         return (sid != null) ? sessionClient.getSessionInfo(sid).map(si -> keyValueClient.acquireLock(path, sid)).orElse(Boolean.FALSE) : false.     } }
false;;1;12;;void setMaster(boolean master) {     if (master && this.master.compareAndSet(false, true)) {         LOGGER.debug("Leadership taken for session id {}", sessionId.get()).         fireLeadershipChangedEvent(Optional.of(this)).         return.     }     if (!master && this.master.compareAndSet(true, false)) {         LOGGER.debug("Leadership lost for session id {}", sessionId.get()).         fireLeadershipChangedEvent(getLeader()).         return.     } }
false;public;0;4;;@Override public boolean isLeader() {     return master.get(). }
false;public;0;4;;@Override public boolean isLocal() {     return true. }
false;public;0;4;;@Override public String getId() {     return sessionId.get(). }
false;public;0;6;;@Override public String toString() {     return "ConsulLocalMember{" + "master=" + master + '}'. }
false;public;0;4;;@Override public String getId() {     return id. }
false;public;0;11;;@Override public boolean isLeader() {     if (keyValueClient == null) {         return false.     }     if (id == null) {         return false.     }     return id.equals(keyValueClient.getSession(path)). }
false;public;0;8;;@Override public boolean isLocal() {     if (id == null) {         return false.     }     return ObjectHelper.equal(id, localMember.getId()). }
false;public;0;6;;@Override public String toString() {     return "ConsulClusterMember{" + "id='" + id + '\'' + '}'. }
false;public;1;27;;@Override public void onComplete(ConsulResponse<Optional<Value>> consulResponse) {     if (isStarting() || isStarted()) {         Optional<Value> value = consulResponse.getResponse().         if (value.isPresent()) {             Optional<String> sid = value.get().getSession().             if (!sid.isPresent()) {                 // If the key is not held by any session, try acquire a                 // lock (become leader)                 boolean lock = acquireLock().                 LOGGER.debug("Try to acquire lock on path '{}' with id '{}', result '{}'", path, sessionId.get(), lock).                 localMember.setMaster(lock).             } else {                 boolean master = sid.get().equals(sessionId.get()).                 if (!master) {                     LOGGER.debug("Path {} is held by session {}, local session is {}", path, sid.get(), sessionId.get()).                 }                 localMember.setMaster(sid.get().equals(sessionId.get())).             }         }         index.set(consulResponse.getIndex()).         watch().     } }
false;public;1;11;;@Override public void onFailure(Throwable throwable) {     LOGGER.debug("", throwable).     if (sessionId.get() != null) {         keyValueClient.releaseLock(configuration.getRootPath(), sessionId.get()).     }     localMember.setMaster(false).     watch(). }
false;public;0;19;;public void watch() {     if (sessionId.get() == null) {         return.     }     if (isStarting() || isStarted()) {         // Watch for changes         keyValueClient.getValue(path, QueryOptions.blockSeconds(configuration.getSessionRefreshInterval(), index.get()).build(), this).         if (sessionId.get() != null) {             // Refresh session             sessionClient.renewSession(sessionId.get()).         }     } }
