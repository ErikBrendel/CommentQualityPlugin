commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     watcher = createWatcher(clientSupplier.apply(endpoint.getConsul())).     watcher.run(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     watcher = null.     super.doStop(). }
false;protected,abstract;1;1;;// ************************************************************************* //  // ************************************************************************* protected abstract Runnable createWatcher(C client) throws Exception.
false;protected;1;5;;protected void onError(Throwable throwable) {     if (isRunAllowed()) {         getExceptionHandler().handleException("Error watching for event " + key, throwable).     } }
false;protected,final;1;3;;protected final void setIndex(BigInteger responseIndex) {     index.set(responseIndex). }
false;public,final;0;6;;@Override public final void run() {     if (isRunAllowed()) {         watch(client).     } }
false;protected,final;0;3;;protected final C client() {     return client. }
false;protected,final;0;3;;protected final void watch() {     watch(client). }
false;protected,abstract;1;1;;protected abstract void watch(C client).
