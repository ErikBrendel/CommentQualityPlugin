commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Runnable createWatcher(EventClient client) throws Exception {     return new EventWatcher(client). }
false;protected;0;5;;@Override protected void doStart() throws Exception {     this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, "ConsulEventConsumer").     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (this.scheduledExecutorService != null) {         this.executorServiceManager.shutdownNow(scheduledExecutorService).     }     super.doStop(). }
false;public;0;8;;@Override public void run() {     client.listEvents(key, QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(), EventWatcher.this). }
false;public;1;13;;@Override public void watch(final EventClient client) {     scheduledExecutorService.schedule(new Runnable() {          @Override         public void run() {             client.listEvents(key, QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(), EventWatcher.this).         }     }, configuration.getBlockSeconds(), TimeUnit.SECONDS). }
false;public;1;11;;@Override public void onComplete(EventResponse eventResponse) {     if (isRunAllowed()) {         List<Event> events = filterEvents(eventResponse.getEvents(), index.get()).         events.forEach(this::onEvent).         setIndex(eventResponse.getIndex()).         watch().     } }
false;public;1;4;;@Override public void onFailure(Throwable throwable) {     onError(throwable). }
false;private;1;31;;private void onEvent(Event event) {     LoggerFactory.getLogger(ConsulEventConsumer.this.getClass()).info("{}", event).     final Exchange exchange = endpoint.createExchange().     final Message message = exchange.getIn().     message.setHeader(ConsulConstants.CONSUL_KEY, key).     message.setHeader(ConsulConstants.CONSUL_RESULT, true).     message.setHeader(ConsulConstants.CONSUL_EVENT_ID, event.getId()).     message.setHeader(ConsulConstants.CONSUL_EVENT_NAME, event.getName()).     message.setHeader(ConsulConstants.CONSUL_EVENT_LTIME, event.getLTime()).     message.setHeader(ConsulConstants.CONSUL_VERSION, event.getVersion()).     if (event.getNodeFilter().isPresent()) {         message.setHeader(ConsulConstants.CONSUL_NODE_FILTER, event.getNodeFilter().get()).     }     if (event.getServiceFilter().isPresent()) {         message.setHeader(ConsulConstants.CONSUL_SERVICE_FILTER, event.getServiceFilter().get()).     }     if (event.getTagFilter().isPresent()) {         message.setHeader(ConsulConstants.CONSUL_TAG_FILTER, event.getTagFilter().get()).     }     message.setBody(event.getPayload().orElse(null)).     try {         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException("Error processing exchange", exchange, e).     } }
true;private;2;14;/**  * from spring-cloud-consul (https://github.com/spring-cloud/spring-cloud-consul):  *     spring-cloud-consul-bus/src/main/java/org/springframework/cloud/consul/bus/EventService.java  */ ;/**  * from spring-cloud-consul (https://github.com/spring-cloud/spring-cloud-consul):  *     spring-cloud-consul-bus/src/main/java/org/springframework/cloud/consul/bus/EventService.java  */ private List<Event> filterEvents(List<Event> toFilter, BigInteger lastIndex) {     List<Event> events = toFilter.     if (lastIndex != null) {         for (int i = 0. i < events.size(). i++) {             Event event = events.get(i).             BigInteger eventIndex = getEventIndexFromId(event).             if (eventIndex.equals(lastIndex)) {                 events = events.subList(i + 1, events.size()).                 break.             }         }     }     return events. }
false;private;1;10;;private BigInteger getEventIndexFromId(Event event) {     String eventId = event.getId().     String lower = eventId.substring(0, 8) + eventId.substring(9, 13) + eventId.substring(14, 18).     String upper = eventId.substring(19, 23) + eventId.substring(24, 36).     BigInteger lowVal = new BigInteger(lower, 16).     BigInteger highVal = new BigInteger(upper, 16).     return lowVal.xor(highVal). }
