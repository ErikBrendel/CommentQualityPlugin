commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getUrl() {     return url. }
true;public;1;3;/**  * The Consul agent URL  */ ;/**  * The Consul agent URL  */ public void setUrl(String url) {     this.url = url. }
true;public;0;4;/**  * @deprecated replaced by {@link #getDatacenter()} ()}  */ ;/**  * @deprecated replaced by {@link #getDatacenter()} ()}  */ @Deprecated public String getDc() {     return datacenter. }
true;public;1;4;/**  * The data center  *  * @deprecated replaced by {@link #setDatacenter(String)} ()}  */ ;/**  * The data center  *  * @deprecated replaced by {@link #setDatacenter(String)} ()}  */ @Deprecated public void setDc(String dc) {     this.datacenter = dc. }
false;public;0;3;;public String getDatacenter() {     return datacenter. }
true;public;1;3;/**  * The data center  */ ;/**  * The data center  */ public void setDatacenter(String datacenter) {     this.datacenter = datacenter. }
false;public;0;3;;public String getNearNode() {     return nearNode. }
true;public;1;3;/**  * The near node to use for queries.  */ ;/**  * The near node to use for queries.  */ public void setNearNode(String nearNode) {     this.nearNode = nearNode. }
false;public;0;3;;public List<String> getNodeMeta() {     return nodeMeta. }
true;public;1;3;/**  * The note meta-data to use for queries.  */ ;/**  * The note meta-data to use for queries.  */ public void setNodeMeta(List<String> nodeMeta) {     this.nodeMeta = nodeMeta. }
false;public;0;3;;public ConsistencyMode getConsistencyMode() {     return consistencyMode. }
true;public;1;3;/**  * The consistencyMode used for queries, default ConsistencyMode.DEFAULT  */ ;/**  * The consistencyMode used for queries, default ConsistencyMode.DEFAULT  */ public void setConsistencyMode(ConsistencyMode consistencyMode) {     this.consistencyMode = consistencyMode. }
false;public;0;3;;public Set<String> getTags() {     return tags. }
true;public;1;3;/**  * Set tags. You can separate multiple tags by comma.  */ ;/**  * Set tags. You can separate multiple tags by comma.  */ public void setTags(Set<String> tags) {     this.tags = tags. }
true;public;1;4;/**  * Set tags. You can separate multiple tags by comma.  */ ;/**  * Set tags. You can separate multiple tags by comma.  */ public void setTags(String tagsAsString) {     this.tags = new HashSet<>().     Collections.addAll(tags, tagsAsString.split(",")). }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * SSL configuration using an org.apache.camel.support.jsse.SSLContextParameters  * instance.  */ ;/**  * SSL configuration using an org.apache.camel.support.jsse.SSLContextParameters  * instance.  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;3;;public String getAclToken() {     return aclToken. }
true;public;1;3;/**  * Sets the ACL token to be used with Consul  */ ;/**  * Sets the ACL token to be used with Consul  */ public void setAclToken(String aclToken) {     this.aclToken = aclToken. }
false;public;0;3;;public String getUserName() {     return userName. }
true;public;1;3;/**  * Sets the username to be used for basic authentication  */ ;/**  * Sets the username to be used for basic authentication  */ public void setUserName(String userName) {     this.userName = userName. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Sets the password to be used for basic authentication  */ ;/**  * Sets the password to be used for basic authentication  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public boolean requiresBasicAuthentication() {     return ObjectHelper.isNotEmpty(userName) && ObjectHelper.isNotEmpty(password). }
false;public;0;3;;public Long getConnectTimeoutMillis() {     return connectTimeoutMillis. }
true;public;1;3;/**  * Connect timeout for OkHttpClient  */ ;/**  * Connect timeout for OkHttpClient  */ public void setConnectTimeoutMillis(Long connectTimeoutMillis) {     this.connectTimeoutMillis = connectTimeoutMillis. }
false;public;0;3;;public Long getReadTimeoutMillis() {     return readTimeoutMillis. }
true;public;1;3;/**  * Read timeout for OkHttpClient  */ ;/**  * Read timeout for OkHttpClient  */ public void setReadTimeoutMillis(Long readTimeoutMillis) {     this.readTimeoutMillis = readTimeoutMillis. }
false;public;0;3;;public Long getWriteTimeoutMillis() {     return writeTimeoutMillis. }
true;public;1;3;/**  * Write timeout for OkHttpClient  */ ;/**  * Write timeout for OkHttpClient  */ public void setWriteTimeoutMillis(Long writeTimeoutMillis) {     this.writeTimeoutMillis = writeTimeoutMillis. }
false;public;0;3;;public boolean isPingInstance() {     return pingInstance. }
true;public;1;3;/**  * Configure if the AgentClient should attempt a ping before returning the Consul instance  */ ;/**  * Configure if the AgentClient should attempt a ping before returning the Consul instance  */ public void setPingInstance(boolean pingInstance) {     this.pingInstance = pingInstance. }
false;public;0;3;;public Integer getBlockSeconds() {     return blockSeconds. }
true;public;1;3;/**  * The second to wait for a watch event, default 10 seconds  */ ;/**  * The second to wait for a watch event, default 10 seconds  */ public void setBlockSeconds(Integer blockSeconds) {     this.blockSeconds = blockSeconds. }
false;public;0;3;;public BigInteger getFirstIndex() {     return firstIndex. }
true;public;1;3;/**  * The first index for watch for, default 0  */ ;/**  * The first index for watch for, default 0  */ public void setFirstIndex(BigInteger firstIndex) {     this.firstIndex = firstIndex. }
false;public;0;3;;public boolean isRecursive() {     return recursive. }
true;public;1;3;/**  * Recursively watch, default false  */ ;/**  * Recursively watch, default false  */ public void setRecursive(boolean recursive) {     this.recursive = recursive. }
false;public;0;3;;// **************************************** // Create a client // **************************************** public Consul createConsulClient() throws Exception {     return createConsulClient(null). }
false;public;1;28;;public Consul createConsulClient(CamelContext camelContext) throws Exception {     Consul.Builder builder = Consul.builder().     builder.withPing(pingInstance).     if (ObjectHelper.isNotEmpty(url)) {         builder.withUrl(url).     }     if (ObjectHelper.isNotEmpty(camelContext) && ObjectHelper.isNotEmpty(sslContextParameters)) {         builder.withSslContext(sslContextParameters.createSSLContext(camelContext)).     }     if (ObjectHelper.isNotEmpty(aclToken)) {         builder.withAclToken(aclToken).     }     if (requiresBasicAuthentication()) {         builder.withBasicAuth(userName, password).     }     if (ObjectHelper.isNotEmpty(connectTimeoutMillis)) {         builder.withConnectTimeoutMillis(connectTimeoutMillis).     }     if (ObjectHelper.isNotEmpty(readTimeoutMillis)) {         builder.withReadTimeoutMillis(readTimeoutMillis).     }     if (ObjectHelper.isNotEmpty(writeTimeoutMillis)) {         builder.withWriteTimeoutMillis(writeTimeoutMillis).     }     return builder.build(). }
false;public;0;7;;// **************************************** // Copy // **************************************** public ConsulClientConfiguration copy() {     try {         return (ConsulClientConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
