commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public List<ServiceDefinition> getServices(String name) {     List<CatalogService> services = client.get().catalogClient().getService(name, queryOptions).getResponse().     List<ServiceHealth> healths = client.get().healthClient().getAllServiceInstances(name, queryOptions).getResponse().     return services.stream().map(service -> newService(name, service, healths)).collect(Collectors.toList()). }
false;private;1;5;;// ************************* // Helpers // ************************* private boolean isHealthy(ServiceHealth serviceHealth) {     return serviceHealth.getChecks().stream().allMatch(check -> ObjectHelper.equal(check.getStatus(), "passing", true)). }
false;private;3;38;;private ServiceDefinition newService(String serviceName, CatalogService service, List<ServiceHealth> serviceHealthList) {     Map<String, String> meta = new HashMap<>().     ObjectHelper.ifNotEmpty(service.getServiceId(), val -> meta.put(ServiceDefinition.SERVICE_META_ID, val)).     ObjectHelper.ifNotEmpty(service.getServiceName(), val -> meta.put(ServiceDefinition.SERVICE_META_NAME, val)).     ObjectHelper.ifNotEmpty(service.getNode(), val -> meta.put("service.node", val)).     // Consul < 1.0.7 does not have a concept of meta-data so meta is     // retrieved using tags     List<String> tags = service.getServiceTags().     if (tags != null) {         for (String tag : service.getServiceTags()) {             String[] items = tag.split("=").             if (items.length == 1) {                 meta.put(items[0], items[0]).             } else if (items.length == 2) {                 meta.put(items[0], items[1]).             }         }     }     // From Consul => 1.0.7, a new meta data attribute has been introduced     // and it is now taken ito account     service.getServiceMeta().ifPresent(serviceMeta -> serviceMeta.forEach(meta::put)).     return new DefaultServiceDefinition(serviceName, service.getServiceAddress(), service.getServicePort(), meta, new DefaultServiceHealth(serviceHealthList.stream().filter(h -> ObjectHelper.equal(h.getService().getId(), service.getServiceId())).allMatch(this::isHealthy))). }
