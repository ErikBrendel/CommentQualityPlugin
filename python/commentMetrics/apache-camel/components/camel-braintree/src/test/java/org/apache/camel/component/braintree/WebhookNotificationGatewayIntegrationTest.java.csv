commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void checkAuthenticationType() {     Assume.assumeTrue(checkAuthenticationType(AuthenticationType.PUBLIC_PRIVATE_KEYS)). }
false;public;0;9;;@Test public void testParseSubscription() throws Exception {     runParseSubscriptionTest(WebhookNotification.Kind.SUBSCRIPTION_CANCELED).     runParseSubscriptionTest(WebhookNotification.Kind.SUBSCRIPTION_CHARGED_SUCCESSFULLY).     runParseSubscriptionTest(WebhookNotification.Kind.SUBSCRIPTION_CHARGED_UNSUCCESSFULLY).     runParseSubscriptionTest(WebhookNotification.Kind.SUBSCRIPTION_TRIAL_ENDED).     runParseSubscriptionTest(WebhookNotification.Kind.SUBSCRIPTION_WENT_ACTIVE).     runParseSubscriptionTest(WebhookNotification.Kind.SUBSCRIPTION_WENT_PAST_DUE). }
false;private;1;6;;private void runParseSubscriptionTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "my_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("my_id", result.getSubscription().getId()). }
false;public;0;5;;@Test public void testParseMerchantAccount() throws Exception {     runParseMerchantAccountTest(WebhookNotification.Kind.SUB_MERCHANT_ACCOUNT_APPROVED).     runParseMerchantAccountTest(WebhookNotification.Kind.SUB_MERCHANT_ACCOUNT_DECLINED). }
false;private;1;6;;private void runParseMerchantAccountTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "my_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("my_id", result.getMerchantAccount().getId()). }
false;public;0;6;;@Test public void testParseTransaction() throws Exception {     runParseTransactionTest(WebhookNotification.Kind.TRANSACTION_DISBURSED).     runParseTransactionTest(WebhookNotification.Kind.TRANSACTION_SETTLED).     runParseTransactionTest(WebhookNotification.Kind.TRANSACTION_SETTLEMENT_DECLINED). }
false;private;1;6;;private void runParseTransactionTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "my_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("my_id", result.getTransaction().getId()). }
false;public;0;5;;@Test public void testParseDisbursement() throws Exception {     runParseDisbursementTest(WebhookNotification.Kind.DISBURSEMENT).     runParseDisbursementTest(WebhookNotification.Kind.DISBURSEMENT_EXCEPTION). }
false;private;1;6;;private void runParseDisbursementTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "my_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("my_id", result.getDisbursement().getId()). }
false;public;0;6;;@Test public void testParseDispute() throws Exception {     runParseDisputeTest(WebhookNotification.Kind.DISPUTE_OPENED).     runParseDisputeTest(WebhookNotification.Kind.DISPUTE_LOST).     runParseDisputeTest(WebhookNotification.Kind.DISPUTE_WON). }
false;private;1;6;;private void runParseDisputeTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "my_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("my_id", result.getDispute().getId()). }
false;public;0;6;;@Test public void testParsePartnerMerchant() throws Exception {     runParsePartnerMerchantTest(WebhookNotification.Kind.PARTNER_MERCHANT_CONNECTED).     runParsePartnerMerchantTest(WebhookNotification.Kind.PARTNER_MERCHANT_DISCONNECTED).     runParsePartnerMerchantTest(WebhookNotification.Kind.PARTNER_MERCHANT_DECLINED). }
false;private;1;6;;private void runParsePartnerMerchantTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "merchant_public_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("abc123", result.getPartnerMerchant().getPartnerMerchantId()). }
false;public;0;15;;@Test public void testParseConnectedMerchantStatusTransitioned() throws Exception {     final WebhookNotification result = sendSampleNotification(WebhookNotification.Kind.CONNECTED_MERCHANT_STATUS_TRANSITIONED, "my_merchant_public_id").     assertNotNull("parse result", result).     assertEquals(WebhookNotification.Kind.CONNECTED_MERCHANT_STATUS_TRANSITIONED, result.getKind()).     ConnectedMerchantStatusTransitioned connectedMerchantStatusTransitioned = result.getConnectedMerchantStatusTransitioned().     assertEquals("my_merchant_public_id", connectedMerchantStatusTransitioned.getMerchantPublicId()).     assertEquals("oauth_application_client_id", connectedMerchantStatusTransitioned.getOAuthApplicationClientId()).     assertEquals("new_status", connectedMerchantStatusTransitioned.getStatus()). }
false;public;0;15;;@Test public void testParseConnectedMerchantPayPalStatusChanged() throws Exception {     final WebhookNotification result = sendSampleNotification(WebhookNotification.Kind.CONNECTED_MERCHANT_PAYPAL_STATUS_CHANGED, "my_merchant_public_id").     assertNotNull("parse result", result).     assertEquals(WebhookNotification.Kind.CONNECTED_MERCHANT_PAYPAL_STATUS_CHANGED, result.getKind()).     ConnectedMerchantPayPalStatusChanged connectedMerchantPayPalStatusChanged = result.getConnectedMerchantPayPalStatusChanged().     assertEquals("my_merchant_public_id", connectedMerchantPayPalStatusChanged.getMerchantPublicId()).     assertEquals("oauth_application_client_id", connectedMerchantPayPalStatusChanged.getOAuthApplicationClientId()).     assertEquals("link", connectedMerchantPayPalStatusChanged.getAction()). }
false;public;0;4;;@Test public void testParseAccountUpdater() throws Exception {     runParsePAccountUpdaterTest(WebhookNotification.Kind.ACCOUNT_UPDATER_DAILY_REPORT). }
false;private;1;8;;private void runParsePAccountUpdaterTest(WebhookNotification.Kind kind) throws Exception {     final WebhookNotification result = sendSampleNotification(kind, "my_id").     assertNotNull("parse result", result).     assertEquals(kind, result.getKind()).     assertEquals("link-to-csv-report", result.getAccountUpdaterDailyReport().getReportUrl()).     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd").     assertEquals("2016-01-14", sdf.format(result.getAccountUpdaterDailyReport().getReportDate().getTime())). }
false;private;2;8;;/* see https://issues.apache.org/jira/browse/CAMEL-12180     @Test     public void testParseIdealPayment() throws Exception {         runParseIdealPaymentTest(WebhookNotification.Kind.IDEAL_PAYMENT_COMPLETE).         runParseIdealPaymentTest(WebhookNotification.Kind.IDEAL_PAYMENT_FAILED).     }      private void runParseIdealPaymentTest(WebhookNotification.Kind kind) throws Exception {         final WebhookNotification result = sendSampleNotification(kind, "my_id").         assertNotNull("parse result", result).         assertEquals(kind, result.getKind()).         assertEquals("my_id", result.getIdealPayment().getId()).     }      @Test     public void testParsePaymentInstrument() throws Exception {         runParsePaymentInstrumentTest(WebhookNotification.Kind.GRANTED_PAYMENT_INSTRUMENT_UPDATE).     }      private void runParsePaymentInstrumentTest(WebhookNotification.Kind kind) throws Exception {         final WebhookNotification result = sendSampleNotification(kind, "my_id").         assertNotNull("parse result", result).         assertEquals(kind, result.getKind()).         assertEquals("abc123z", result.getGrantedPaymentInstrumentUpdate().getToken()).     }*/ private WebhookNotification sendSampleNotification(WebhookNotification.Kind kind, String id) {     final BraintreeGateway gateway = getGateway().     Map<String, String> notification = gateway.webhookTesting().sampleNotification(kind, id).     final Map<String, Object> headers = new HashMap<>().     headers.put(BraintreeConstants.PROPERTY_PREFIX + "signature", notification.get("bt_signature")).     headers.put(BraintreeConstants.PROPERTY_PREFIX + "payload", notification.get("bt_payload")).     return requestBodyAndHeaders("direct://PARSE", null, headers). }
false;public;0;8;;public void configure() {     // test route for parse     from("direct://PARSE").to("braintree://" + PATH_PREFIX + "/parse").     // test route for verify     from("direct://VERIFY").to("braintree://" + PATH_PREFIX + "/verify?inBody=challenge"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for parse             from("direct://PARSE").to("braintree://" + PATH_PREFIX + "/parse").             // test route for verify             from("direct://VERIFY").to("braintree://" + PATH_PREFIX + "/verify?inBody=challenge").         }     }. }
