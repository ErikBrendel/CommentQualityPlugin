commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void doPostSetup() throws Exception {     this.gateway = getGateway(). }
false;public;0;10;;@Override @After public void tearDown() throws Exception {     if (this.gateway != null) {         for (String token : this.transactionIds) {         // TODO: cleanup         }     }     this.transactionIds.clear(). }
false;public;0;20;;// ************************************************************************* //  // ************************************************************************* @Test public void testSale() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> result = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(), Result.class).     assertNotNull("sale result", result).     assertTrue(result.isSuccess()).     LOG.info("Transaction done - id={}", result.getTarget().getId()).     this.transactionIds.add(result.getTarget().getId()). }
false;public;0;41;;@Test public void testCloneTransaction() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     LOG.info("Transaction done - id={}", createResult.getTarget().getId()).     this.transactionIds.add(createResult.getTarget().getId()).     final Result<Transaction> cloneResult = requestBodyAndHeaders("direct://CLONETRANSACTION", null, new BraintreeHeaderBuilder().add("id", createResult.getTarget().getId()).add("cloneRequest", new TransactionCloneRequest().amount(new BigDecimal("99.00")).options().submitForSettlement(true).done()).build(), Result.class).     assertNotNull("clone result", cloneResult).     assertTrue(cloneResult.isSuccess()).     LOG.info("Clone Transaction done - clonedId={}, id={}", createResult.getTarget().getId(), cloneResult.getTarget().getId()).     this.transactionIds.add(cloneResult.getTarget().getId()). }
false;public;0;27;;@Test public void testFind() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     LOG.info("Transaction done - id={}", createResult.getTarget().getId()).     this.transactionIds.add(createResult.getTarget().getId()).     // using String message body for single parameter "id"     final Transaction result = requestBody("direct://FIND", createResult.getTarget().getId()).     assertNotNull("find result", result).     LOG.info("Transaction found - id={}", result.getId()). }
false;public;0;28;;@Test public void testSubmitForSettlementWithId() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     LOG.info("Transaction done - id={}", createResult.getTarget().getId()).     this.transactionIds.add(createResult.getTarget().getId()).     final Result<Transaction> result = requestBody("direct://SUBMITFORSETTLEMENT_WITH_ID", createResult.getTarget().getId(), Result.class).     assertNotNull("Submit For Settlement result", result).     LOG.debug("Transaction submitted for settlement - id={}", result.getTarget().getId()). }
false;public;0;32;;@Test public void testSubmitForSettlementWithIdAndAmount() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     LOG.info("Transaction done - id={}", createResult.getTarget().getId()).     this.transactionIds.add(createResult.getTarget().getId()).     final Result<Transaction> result = requestBodyAndHeaders("direct://SUBMITFORSETTLEMENT_WITH_ID_ADN_AMOUNT", null, new BraintreeHeaderBuilder().add("id", createResult.getTarget().getId()).add("amount", new BigDecimal("100.00")).build(), Result.class).     assertNotNull("Submit For Settlement result", result).     LOG.debug("Transaction submitted for settlement - id={}", result.getTarget().getId()). }
false;public;0;33;;@Test public void testSubmitForSettlementWithRequest() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(false).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     LOG.info("Transaction done - id={}", createResult.getTarget().getId()).     this.transactionIds.add(createResult.getTarget().getId()).     final Result<Transaction> result = requestBodyAndHeaders("direct://SUBMITFORSETTLEMENT_WITH_REQUEST", null, new BraintreeHeaderBuilder().add("id", createResult.getTarget().getId()).add("request", new TransactionRequest().amount(new BigDecimal("100.00"))).build(), Result.class).     assertNotNull("Submit For Settlement result", result).     LOG.debug("Transaction submitted for settlement - id={}", result.getTarget().getId()). }
false;public;0;34;;@Test public void testRefund() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     String createId = createResult.getTarget().getId().     final Result<Transaction> settleResult = this.gateway.testing().settle(createId).     assertNotNull("settle result", settleResult).     assertTrue(settleResult.isSuccess()).     final Result<Transaction> result = requestBody("direct://REFUND_WITH_ID", createId, Result.class).     assertNotNull("Request Refund result", result).     assertTrue(result.isSuccess()).     LOG.info(String.format("Refund id(%s) created for transaction id(%s)", result.getTarget().getId(), createId)). }
false;public;0;38;;@Test public void testRefundWithAmount() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     String createId = createResult.getTarget().getId().     final Result<Transaction> settleResult = this.gateway.testing().settle(createId).     assertNotNull("settle result", settleResult).     assertTrue(settleResult.isSuccess()).     final Result<Transaction> result = requestBodyAndHeaders("direct://REFUND", null, new BraintreeHeaderBuilder().add("id", createId).add("amount", new BigDecimal("99.00")).build(), Result.class).     assertNotNull("Request Refund result", result).     assertTrue(result.isSuccess()).     LOG.info(String.format("Refund id(%s) created for transaction id(%s)", result.getTarget().getId(), createId)). }
false;public;0;39;;@Test public void testRefundWithRequest() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     final Result<Transaction> createResult = requestBody("direct://SALE", new TransactionRequest().amount(new BigDecimal("100.00")).paymentMethodNonce("fake-valid-nonce").options().submitForSettlement(true).done(), Result.class).     assertNotNull("sale result", createResult).     assertTrue(createResult.isSuccess()).     String createId = createResult.getTarget().getId().     final Result<Transaction> settleResult = this.gateway.testing().settle(createId).     assertNotNull("settle result", settleResult).     assertTrue(settleResult.isSuccess()).     final Result<Transaction> result = requestBodyAndHeaders("direct://REFUND", null, new BraintreeHeaderBuilder().add("id", createId).add("refundRequest", new TransactionRefundRequest().amount(new BigDecimal("100.00"))).build(), Result.class).     assertNotNull("Request Refund result", result).     assertTrue(result.isSuccess()).     LOG.info(String.format("Refund id(%s) created for transaction id(%s)", result.getTarget().getId(), createId)). }
true;public;0;9;// TODO provide parameter values for cancelRelease ;// ************************************************************************* // Auto generated tests // ************************************************************************* // TODO provide parameter values for cancelRelease @Ignore @Test public void testCancelRelease() throws Exception {     // using String message body for single parameter "id"     final com.braintreegateway.Result result = requestBody("direct://CANCELRELEASE", null).     assertNotNull("cancelRelease result", result).     LOG.debug("cancelRelease: " + result). }
true;public;0;9;// TODO provide parameter values for credit ;// TODO provide parameter values for credit @Ignore @Test public void testCredit() throws Exception {     // using com.braintreegateway.TransactionRequest message body for single parameter "request"     final com.braintreegateway.Result result = requestBody("direct://CREDIT", null).     assertNotNull("credit result", result).     LOG.debug("credit: " + result). }
true;public;0;9;// TODO provide parameter values for holdInEscrow ;// TODO provide parameter values for holdInEscrow @Ignore @Test public void testHoldInEscrow() throws Exception {     // using String message body for single parameter "id"     final com.braintreegateway.Result result = requestBody("direct://HOLDINESCROW", null).     assertNotNull("holdInEscrow result", result).     LOG.debug("holdInEscrow: " + result). }
true;public;0;9;// TODO provide parameter values for releaseFromEscrow ;// TODO provide parameter values for releaseFromEscrow @Ignore @Test public void testReleaseFromEscrow() throws Exception {     // using String message body for single parameter "id"     final com.braintreegateway.Result result = requestBody("direct://RELEASEFROMESCROW", null).     assertNotNull("releaseFromEscrow result", result).     LOG.debug("releaseFromEscrow: " + result). }
true;public;0;9;// TODO provide parameter values for search ;// TODO provide parameter values for search @Ignore @Test public void testSearch() throws Exception {     // using com.braintreegateway.TransactionSearchRequest message body for single parameter "query"     final com.braintreegateway.ResourceCollection result = requestBody("direct://SEARCH", null).     assertNotNull("search result", result).     LOG.debug("search: " + result). }
true;public;0;14;// TODO provide parameter values for submitForPartialSettlement ;// TODO provide parameter values for submitForPartialSettlement @Ignore @Test public void testSubmitForPartialSettlement() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBraintree.id", null).     // parameter type is java.math.BigDecimal     headers.put("CamelBraintree.amount", null).     final com.braintreegateway.Result result = requestBodyAndHeaders("direct://SUBMITFORPARTIALSETTLEMENT", null, headers).     assertNotNull("submitForPartialSettlement result", result).     LOG.debug("submitForPartialSettlement: " + result). }
true;public;0;9;// TODO provide parameter values for voidTransaction ;// TODO provide parameter values for voidTransaction @Ignore @Test public void testVoidTransaction() throws Exception {     // using String message body for single parameter "id"     final com.braintreegateway.Result result = requestBody("direct://VOIDTRANSACTION", null).     assertNotNull("voidTransaction result", result).     LOG.debug("voidTransaction: " + result). }
false;public;0;47;;public void configure() {     // test route for cancelRelease     from("direct://CANCELRELEASE").to("braintree://" + PATH_PREFIX + "/cancelRelease?inBody=id").     // test route for cloneTransaction     from("direct://CLONETRANSACTION").to("braintree://" + PATH_PREFIX + "/cloneTransaction").     // test route for credit     from("direct://CREDIT").to("braintree://" + PATH_PREFIX + "/credit?inBody=request").     // test route for find     from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=id").     // test route for holdInEscrow     from("direct://HOLDINESCROW").to("braintree://" + PATH_PREFIX + "/holdInEscrow?inBody=id").     // test route for refund     from("direct://REFUND").to("braintree://" + PATH_PREFIX + "/refund").     // test route for refund     from("direct://REFUND_WITH_ID").to("braintree://" + PATH_PREFIX + "/refund?inBody=id").     // test route for releaseFromEscrow     from("direct://RELEASEFROMESCROW").to("braintree://" + PATH_PREFIX + "/releaseFromEscrow?inBody=id").     // test route for sale     from("direct://SALE").to("braintree://" + PATH_PREFIX + "/sale?inBody=request").     // test route for search     from("direct://SEARCH").to("braintree://" + PATH_PREFIX + "/search?inBody=query").     // test route for submitForPartialSettlement     from("direct://SUBMITFORPARTIALSETTLEMENT").to("braintree://" + PATH_PREFIX + "/submitForPartialSettlement").     // test route for submitForSettlement     from("direct://SUBMITFORSETTLEMENT_WITH_ID").to("braintree://" + PATH_PREFIX + "/submitForSettlement?inBody=id").     // test route for submitForSettlement     from("direct://SUBMITFORSETTLEMENT_WITH_ID_ADN_AMOUNT").to("braintree://" + PATH_PREFIX + "/submitForSettlement").     // test route for submitForSettlement     from("direct://SUBMITFORSETTLEMENT_WITH_REQUEST").to("braintree://" + PATH_PREFIX + "/submitForSettlement").     // test route for voidTransaction     from("direct://VOIDTRANSACTION").to("braintree://" + PATH_PREFIX + "/voidTransaction?inBody=id"). }
false;protected;0;52;;// ************************************************************************* // ROUTES // ************************************************************************* @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for cancelRelease             from("direct://CANCELRELEASE").to("braintree://" + PATH_PREFIX + "/cancelRelease?inBody=id").             // test route for cloneTransaction             from("direct://CLONETRANSACTION").to("braintree://" + PATH_PREFIX + "/cloneTransaction").             // test route for credit             from("direct://CREDIT").to("braintree://" + PATH_PREFIX + "/credit?inBody=request").             // test route for find             from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=id").             // test route for holdInEscrow             from("direct://HOLDINESCROW").to("braintree://" + PATH_PREFIX + "/holdInEscrow?inBody=id").             // test route for refund             from("direct://REFUND").to("braintree://" + PATH_PREFIX + "/refund").             // test route for refund             from("direct://REFUND_WITH_ID").to("braintree://" + PATH_PREFIX + "/refund?inBody=id").             // test route for releaseFromEscrow             from("direct://RELEASEFROMESCROW").to("braintree://" + PATH_PREFIX + "/releaseFromEscrow?inBody=id").             // test route for sale             from("direct://SALE").to("braintree://" + PATH_PREFIX + "/sale?inBody=request").             // test route for search             from("direct://SEARCH").to("braintree://" + PATH_PREFIX + "/search?inBody=query").             // test route for submitForPartialSettlement             from("direct://SUBMITFORPARTIALSETTLEMENT").to("braintree://" + PATH_PREFIX + "/submitForPartialSettlement").             // test route for submitForSettlement             from("direct://SUBMITFORSETTLEMENT_WITH_ID").to("braintree://" + PATH_PREFIX + "/submitForSettlement?inBody=id").             // test route for submitForSettlement             from("direct://SUBMITFORSETTLEMENT_WITH_ID_ADN_AMOUNT").to("braintree://" + PATH_PREFIX + "/submitForSettlement").             // test route for submitForSettlement             from("direct://SUBMITFORSETTLEMENT_WITH_REQUEST").to("braintree://" + PATH_PREFIX + "/submitForSettlement").             // test route for voidTransaction             from("direct://VOIDTRANSACTION").to("braintree://" + PATH_PREFIX + "/voidTransaction?inBody=id").         }     }. }
