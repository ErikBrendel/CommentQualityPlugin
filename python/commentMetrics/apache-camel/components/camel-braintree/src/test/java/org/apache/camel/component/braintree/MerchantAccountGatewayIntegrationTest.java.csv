commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Ignore @Test public void testCreate() throws Exception {     final String merchantId = UUID.randomUUID().toString().     final Result<MerchantAccount> result = requestBody("direct://CREATE", new MerchantAccountRequest().masterMerchantAccountId(System.getenv("CAMEL_BRAINTREE_MERCHANT_ACCOUNT_ID")).individual().firstName("merchant").lastName(merchantId).address().streetAddress("my street").done().done(), Result.class).     assertNotNull("create result", result).     assertTrue(result.isSuccess()). }
false;public;0;9;;@Ignore @Test public void testFind() throws Exception {     final Map<String, Object> headers = new HashMap<>().     headers.put(BraintreeConstants.PROPERTY_PREFIX + "id", System.getenv("CAMEL_BRAINTREE_MERCHANT_ACCOUNT_ID")).     final MerchantAccount result = requestBodyAndHeaders("direct://FIND", null, headers, MerchantAccount.class).     assertNotNull("find result", result). }
false;public;0;19;;@Ignore @Test public void testUpdate() throws Exception {     final Map<String, Object> headers = new HashMap<>().     headers.put(BraintreeConstants.PROPERTY_PREFIX + "id", System.getenv("CAMEL_BRAINTREE_MERCHANT_ACCOUNT_ID")).     final Result<MerchantAccount> result = requestBodyAndHeaders("direct://UPDATE", new MerchantAccountRequest().individual().address().streetAddress("my new street address").done().done(), headers, Result.class).     assertNotNull("update result", result).     assertTrue(result.isSuccess()). }
false;public;0;11;;public void configure() {     // test route for create     from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request").     // test route for find     from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find").     // test route for update     from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update?inBody=request"). }
false;protected;0;16;;// ************************************************************************* // Routes // ************************************************************************* @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for create             from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request").             // test route for find             from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find").             // test route for update             from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update?inBody=request").         }     }. }
