commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected void doPostSetup() throws Exception {     this.gateway = getGateway().     this.customer = gateway.customer().create(new CustomerRequest().firstName("user").lastName(UUID.randomUUID().toString())).getTarget().     if (customer != null) {         LOG.info("Customer created - id={}", this.customer.getId()).     } }
false;public;0;21;;@Override @After public void tearDown() throws Exception {     if (this.gateway != null) {         for (String token : this.paymentMethodsTokens) {             if (this.gateway.paymentMethod().delete(token).isSuccess()) {                 LOG.info("PaymentMethod deleted - token={}", token).             } else {                 LOG.warn("Unable to delete PaymentMethod - token={}", token).             }         }         this.paymentMethodsTokens.clear().         if (this.gateway.customer().delete(this.customer.getId()).isSuccess()) {             LOG.info("Customer deleted - id={}", this.customer.getId()).         } else {             LOG.warn("Unable to delete customer - id={}", this.customer.getId()).         }     } }
false;private;0;13;;private PaymentMethod createPaymentMethod() {     Result<? extends PaymentMethod> result = this.gateway.paymentMethod().create(new PaymentMethodRequest().customerId(this.customer.getId()).paymentMethodNonce("fake-valid-payroll-nonce")).     assertNotNull("create result", result).     assertTrue(result.isSuccess()).     LOG.info("PaymentMethod created - token={}", result.getTarget().getToken()).     return result.getTarget(). }
false;public;0;17;;// ************************************************************************* //  // ************************************************************************* @Test public void testCreate() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     assertNotNull("Customer can't be null", this.customer).     final Result<PaymentMethod> result = requestBody("direct://CREATE", new PaymentMethodRequest().customerId(this.customer.getId()).paymentMethodNonce("fake-valid-payroll-nonce"), Result.class).     assertNotNull("create result", result).     assertTrue(result.isSuccess()).     LOG.info("PaymentMethod created - token={}", result.getTarget().getToken()).     this.paymentMethodsTokens.add(result.getTarget().getToken()). }
false;public;0;14;;@Test public void testDelete() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     assertNotNull("Customer can't be null", this.customer).     final PaymentMethod paymentMethod = createPaymentMethod().     final Result<PaymentMethod> deleteResult = requestBody("direct://DELETE", paymentMethod.getToken(), Result.class).     assertNotNull("create result", deleteResult).     assertTrue(deleteResult.isSuccess()).     LOG.info("PaymentMethod deleted - token={}", paymentMethod.getToken()). }
false;public;0;15;;@Test public void testFind() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     assertNotNull("Customer can't be null", this.customer).     final PaymentMethod paymentMethod = createPaymentMethod().     this.paymentMethodsTokens.add(paymentMethod.getToken()).     final PaymentMethod method = requestBody("direct://FIND", paymentMethod.getToken(), PaymentMethod.class).     assertNotNull("find result", method).     LOG.info("PaymentMethod found - token={}", method.getToken()). }
false;public;0;25;;@Test public void testUpdate() throws Exception {     assertNotNull("BraintreeGateway can't be null", this.gateway).     assertNotNull("Customer can't be null", this.customer).     final PaymentMethod paymentMethod = createPaymentMethod().     this.paymentMethodsTokens.add(paymentMethod.getToken()).     final Result<PaymentMethod> result = requestBodyAndHeaders("direct://UPDATE", null, new BraintreeHeaderBuilder().add("token", paymentMethod.getToken()).add("request", new PaymentMethodRequest().billingAddress().company("Apache").streetAddress("100 Maple Lane").done()).build(), Result.class).     assertNotNull("update result", result).     assertTrue(result.isSuccess()).     LOG.info("PaymentMethod updated - token={}", result.getTarget().getToken()). }
false;public;0;14;;public void configure() {     // test route for create     from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request").     // test route for delete     from("direct://DELETE").to("braintree://" + PATH_PREFIX + "/delete?inBody=token").     // test route for find     from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=token").     // test route for update     from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update"). }
false;protected;0;19;;// ************************************************************************* // ROUTES // ************************************************************************* @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for create             from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request").             // test route for delete             from("direct://DELETE").to("braintree://" + PATH_PREFIX + "/delete?inBody=token").             // test route for find             from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=token").             // test route for update             from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update").         }     }. }
