commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;// TODO provide parameter values for cancel ;// TODO provide parameter values for cancel @Ignore @Test public void testCancel() throws Exception {     // using String message body for single parameter "id"     final com.braintreegateway.Result result = requestBody("direct://CANCEL", null).     assertNotNull("cancel result", result).     LOG.debug("cancel: " + result). }
true;public;0;9;// TODO provide parameter values for create ;// TODO provide parameter values for create @Ignore @Test public void testCreate() throws Exception {     // using com.braintreegateway.SubscriptionRequest message body for single parameter "request"     final com.braintreegateway.Result result = requestBody("direct://CREATE", null).     assertNotNull("create result", result).     LOG.debug("create: " + result). }
true;public;0;14;// TODO provide parameter values for delete ;// TODO provide parameter values for delete @Ignore @Test public void testDelete() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBraintree.customerId", null).     // parameter type is String     headers.put("CamelBraintree.id", null).     final com.braintreegateway.Result result = requestBodyAndHeaders("direct://DELETE", null, headers).     assertNotNull("delete result", result).     LOG.debug("delete: " + result). }
true;public;0;9;// TODO provide parameter values for find ;// TODO provide parameter values for find @Ignore @Test public void testFind() throws Exception {     // using String message body for single parameter "id"     final com.braintreegateway.Subscription result = requestBody("direct://FIND", null).     assertNotNull("find result", result).     LOG.debug("find: " + result). }
true;public;0;9;// TODO provide parameter values for retryCharge ;// TODO provide parameter values for retryCharge @Ignore @Test public void testRetryCharge() throws Exception {     // using String message body for single parameter "subscriptionId"     final com.braintreegateway.Result result = requestBody("direct://RETRYCHARGE", null).     assertNotNull("retryCharge result", result).     LOG.debug("retryCharge: " + result). }
true;public;0;14;// TODO provide parameter values for retryCharge ;// TODO provide parameter values for retryCharge @Ignore @Test public void testRetryChargeWithAmount() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBraintree.subscriptionId", null).     // parameter type is java.math.BigDecimal     headers.put("CamelBraintree.amount", null).     final com.braintreegateway.Result result = requestBodyAndHeaders("direct://RETRYCHARGE_1", null, headers).     assertNotNull("retryCharge result", result).     LOG.debug("retryCharge: " + result). }
true;public;0;9;// TODO provide parameter values for search ;// TODO provide parameter values for search @Ignore @Test public void testSearch() throws Exception {     // using com.braintreegateway.SubscriptionSearchRequest message body for single parameter "searchRequest"     final com.braintreegateway.ResourceCollection result = requestBody("direct://SEARCH", null).     assertNotNull("search result", result).     LOG.debug("search: " + result). }
true;public;0;14;// TODO provide parameter values for update ;// TODO provide parameter values for update @Ignore @Test public void testUpdate() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBraintree.id", null).     // parameter type is com.braintreegateway.SubscriptionRequest     headers.put("CamelBraintree.request", null).     final com.braintreegateway.Result result = requestBodyAndHeaders("direct://UPDATE", null, headers).     assertNotNull("update result", result).     LOG.debug("update: " + result). }
false;public;0;26;;public void configure() {     // test route for cancel     from("direct://CANCEL").to("braintree://" + PATH_PREFIX + "/cancel?inBody=id").     // test route for create     from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request").     // test route for delete     from("direct://DELETE").to("braintree://" + PATH_PREFIX + "/delete").     // test route for find     from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=id").     // test route for retryCharge     from("direct://RETRYCHARGE").to("braintree://" + PATH_PREFIX + "/retryCharge?inBody=subscriptionId").     // test route for retryCharge     from("direct://RETRYCHARGE_1").to("braintree://" + PATH_PREFIX + "/retryCharge").     // test route for search     from("direct://SEARCH").to("braintree://" + PATH_PREFIX + "/search?inBody=searchRequest").     // test route for update     from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for cancel             from("direct://CANCEL").to("braintree://" + PATH_PREFIX + "/cancel?inBody=id").             // test route for create             from("direct://CREATE").to("braintree://" + PATH_PREFIX + "/create?inBody=request").             // test route for delete             from("direct://DELETE").to("braintree://" + PATH_PREFIX + "/delete").             // test route for find             from("direct://FIND").to("braintree://" + PATH_PREFIX + "/find?inBody=id").             // test route for retryCharge             from("direct://RETRYCHARGE").to("braintree://" + PATH_PREFIX + "/retryCharge?inBody=subscriptionId").             // test route for retryCharge             from("direct://RETRYCHARGE_1").to("braintree://" + PATH_PREFIX + "/retryCharge").             // test route for search             from("direct://SEARCH").to("braintree://" + PATH_PREFIX + "/search?inBody=searchRequest").             // test route for update             from("direct://UPDATE").to("braintree://" + PATH_PREFIX + "/update").         }     }. }
