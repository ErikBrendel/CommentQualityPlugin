commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;// TODO provide parameter values for generate ;// TODO provide parameter values for generate @Ignore @Test public void testGenerate() throws Exception {     // using java.util.Calendar message body for single parameter "settlementDate"     final com.braintreegateway.Result result = requestBody("direct://GENERATE", null).     assertNotNull("generate result", result).     LOG.debug("generate: " + result). }
true;public;0;14;// TODO provide parameter values for generate ;// TODO provide parameter values for generate @Ignore @Test public void testGenerateWithCustomFields() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is java.util.Calendar     headers.put("CamelBraintree.settlementDate", null).     // parameter type is String     headers.put("CamelBraintree.groupByCustomField", null).     final com.braintreegateway.Result result = requestBodyAndHeaders("direct://GENERATE_1", null, headers).     assertNotNull("generate result", result).     LOG.debug("generate: " + result). }
false;public;0;8;;public void configure() {     // test route for generate     from("direct://GENERATE").to("braintree://" + PATH_PREFIX + "/generate?inBody=settlementDate").     // test route for generate     from("direct://GENERATE_1").to("braintree://" + PATH_PREFIX + "/generate"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for generate             from("direct://GENERATE").to("braintree://" + PATH_PREFIX + "/generate?inBody=settlementDate").             // test route for generate             from("direct://GENERATE_1").to("braintree://" + PATH_PREFIX + "/generate").         }     }. }
