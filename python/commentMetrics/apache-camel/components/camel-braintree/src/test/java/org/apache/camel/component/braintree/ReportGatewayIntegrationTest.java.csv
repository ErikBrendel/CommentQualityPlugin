commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testTransactionLevelFees() throws Exception {     String merchantAccountId = System.getenv("CAMEL_BRAINTREE_MERCHANT_ACCOUNT_ID").     String reportDateString = System.getenv("CAMEL_BRAINTREE_REPORT_DATE").     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd").     Calendar reportDate = Calendar.getInstance().     reportDate.setTime(sdf.parse(reportDateString)).     TransactionLevelFeeReportRequest request = new TransactionLevelFeeReportRequest().date(reportDate).merchantAccountId(merchantAccountId).     final com.braintreegateway.Result<TransactionLevelFeeReport> result = requestBody("direct://TRANSACTIONLEVELFEES", request).     assertNotNull("transactionLevelFees result", result).     assertTrue("transactionLevelFees success", result.isSuccess()).     List<TransactionLevelFeeReportRow> rows = result.getTarget().getRows().     assertTrue("transactionLevelFeeRows found", rows.size() > 0).     LOG.debug("transactionLevelFees: " + result). }
false;public;0;6;;public void configure() {     // test route for transactionLevelFees     from("direct://TRANSACTIONLEVELFEES").to("braintree://" + PATH_PREFIX + "/transactionLevelFees?inBody=request"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for transactionLevelFees             from("direct://TRANSACTIONLEVELFEES").to("braintree://" + PATH_PREFIX + "/transactionLevelFees?inBody=request").         }     }. }
