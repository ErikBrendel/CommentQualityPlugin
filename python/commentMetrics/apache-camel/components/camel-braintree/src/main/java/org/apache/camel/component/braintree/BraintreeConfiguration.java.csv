commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public BraintreeApiName getApiName() {     return apiName. }
true;public;1;3;/**  * What kind of operation to perform  */ ;/**  * What kind of operation to perform  */ public void setApiName(BraintreeApiName apiName) {     this.apiName = apiName. }
false;public;0;3;;public String getMethodName() {     return methodName. }
true;public;1;3;/**  * What sub operation to use for the selected operation  */ ;/**  * What sub operation to use for the selected operation  */ public void setMethodName(String methodName) {     this.methodName = methodName. }
false;public;0;3;;public String getEnvironment() {     return environment. }
true;public;1;3;/**  * The environment Either SANDBOX or PRODUCTION  */ ;/**  * The environment Either SANDBOX or PRODUCTION  */ public void setEnvironment(String environment) {     this.environment = environment. }
false;public;0;3;;public String getMerchantId() {     return merchantId. }
true;public;1;3;/**  * The merchant id provided by Braintree.  */ ;/**  * The merchant id provided by Braintree.  */ public void setMerchantId(String merchantId) {     this.merchantId = merchantId. }
false;public;0;3;;public String getPublicKey() {     return publicKey. }
true;public;1;3;/**  * The public key provided by Braintree.  */ ;/**  * The public key provided by Braintree.  */ public void setPublicKey(String publicKey) {     this.publicKey = publicKey. }
false;public;0;3;;public String getPrivateKey() {     return privateKey. }
true;public;1;3;/**  * The private key provided by Braintree.  */ ;/**  * The private key provided by Braintree.  */ public void setPrivateKey(String privateKey) {     this.privateKey = privateKey. }
false;public;0;3;;public String getAccessToken() {     return accessToken. }
true;public;1;3;/**  * The access token granted by a merchant to another in order to process transactions on their behalf.  * Used in place of environment, merchant id, public key and private key fields.  */ ;/**  * The access token granted by a merchant to another in order to process transactions on their behalf.  * Used in place of environment, merchant id, public key and private key fields.  */ public void setAccessToken(String accessToken) {     this.accessToken = accessToken. }
false;public;0;3;;public String getProxyHost() {     return proxyHost. }
true;public;1;3;/**  * The proxy host  */ ;/**  * The proxy host  */ public void setProxyHost(String proxyHost) {     this.proxyHost = proxyHost. }
false;public;0;3;;public Integer getProxyPort() {     return proxyPort. }
true;public;1;3;/**  * The proxy port  */ ;/**  * The proxy port  */ public void setProxyPort(Integer proxyPort) {     this.proxyPort = proxyPort. }
false;public;0;3;;public Level getHttpLogLevel() {     return httpLogLevel. }
true;public;1;3;/**  * Set logging level for http calls, @see java.util.logging.Level  */ ;/**  * Set logging level for http calls, @see java.util.logging.Level  */ public void setHttpLogLevel(String httpLogLevel) {     this.httpLogLevel = Level.parse(httpLogLevel). }
true;public;1;3;/**  * Set logging level for http calls, @see java.util.logging.Level  */ ;/**  * Set logging level for http calls, @see java.util.logging.Level  */ public void setHttpLogLevel(Level httpLogLevel) {     this.httpLogLevel = httpLogLevel. }
false;public;0;3;;public String getHttpLogName() {     return httpLogName. }
true;public;1;3;/**  * Set log category to use to log http calls, default "Braintree"  */ ;/**  * Set log category to use to log http calls, default "Braintree"  */ public void setHttpLogName(String httpLogName) {     this.httpLogName = httpLogName. }
false;public;0;3;;public Integer getHttpReadTimeout() {     return httpReadTimeout. }
true;public;1;3;/**  * Set read timeout for http calls.  */ ;/**  * Set read timeout for http calls.  */ public void setHttpReadTimeout(Integer httpReadTimeout) {     this.httpReadTimeout = httpReadTimeout. }
true;private;0;15;/**  * Helper method to get and Environment object from its name  */ ;/**  * Helper method to get and Environment object from its name  */ private Environment getBraintreeEnvironment() {     String name = getEnvironment().     if (ObjectHelper.equal(Environment.DEVELOPMENT.getEnvironmentName(), name, true)) {         return Environment.DEVELOPMENT.     }     if (ObjectHelper.equal(Environment.SANDBOX.getEnvironmentName(), name, true)) {         return Environment.SANDBOX.     }     if (ObjectHelper.equal(Environment.PRODUCTION.getEnvironmentName(), name, true)) {         return Environment.PRODUCTION.     }     throw new IllegalArgumentException(String.format("Environment should be development, sandbox or production, got %s", name)). }
true;synchronized;0;46;/**  * Construct a BraintreeGateway from configuration  */ ;/**  * Construct a BraintreeGateway from configuration  */ synchronized BraintreeGateway newBraintreeGateway() {     final BraintreeGateway gateway.     if (accessToken != null) {         gateway = new BraintreeGateway(accessToken).         setEnvironment(gateway.getConfiguration().getEnvironment().getEnvironmentName()).     } else {         gateway = new BraintreeGateway(getBraintreeEnvironment(), getMerchantId(), getPublicKey(), getPrivateKey()).     }     if (ObjectHelper.isNotEmpty(proxyHost) && ObjectHelper.isNotEmpty(proxyPort)) {         gateway.setProxy(proxyHost, proxyPort).     }     if (httpReadTimeout != null) {         gateway.getConfiguration().setTimeout(httpReadTimeout).     }     // If custom log name is defined, a new logger wil be requested otherwise     // the one supplied by Braintree' SDK will be used     final Logger logger = ObjectHelper.isNotEmpty(httpLogName) ? Logger.getLogger(httpLogName) : gateway.getConfiguration().getLogger().     // Cleanup handlers as by default braintree install a ConsoleHandler     for (Handler handler : logger.getHandlers()) {         logger.removeHandler(handler).     }     logger.addHandler(new BraintreeLogHandler()).     if (httpLogLevel != null) {         logger.setLevel(httpLogLevel).     }     gateway.getConfiguration().setLogger(logger).     return gateway. }
