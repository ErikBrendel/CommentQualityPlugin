commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void flush() { // no-op }
false;public;0;4;;@Override public void close() throws SecurityException { // no-op }
false;public;1;20;;@Override public void publish(LogRecord record) {     if (record != null) {         final Logger logger = getLogger(record).         final String message = formatMessage(record).         int level = record.getLevel().intValue().         if (level <= TRACE_LEVEL_THRESHOLD) {             logger.trace(message, record.getThrown()).         } else if (level <= DEBUG_LEVEL_THRESHOLD) {             logger.debug(message, record.getThrown()).         } else if (level <= INFO_LEVEL_THRESHOLD) {             logger.info(message, record.getThrown()).         } else if (level <= WARN_LEVEL_THRESHOLD) {             logger.warn(message, record.getThrown()).         } else {             logger.error(message, record.getThrown()).         }     } }
false;private;1;7;;private Logger getLogger(LogRecord record) {     String name = record.getLoggerName().     if (name == null) {         name = DEFAULT_LOGGER_NAME.     }     return LoggerFactory.getLogger(name). }
false;private;1;29;;private String formatMessage(LogRecord record) {     String message = record.getMessage().     if (message != null) {         ResourceBundle bundle = record.getResourceBundle().         if (bundle != null) {             try {                 message = bundle.getString(message).             } catch (MissingResourceException e) {             }         }         Object[] params = record.getParameters().         // http://jira.qos.ch/browse/SLF4J-203         if (params != null && params.length > 0) {             try {                 message = MessageFormat.format(message, params).             } catch (IllegalArgumentException e) {                 // see also http://jira.qos.ch/browse/SLF4J-337                 return message.             }         }     } else {         message = "".     }     return message. }
