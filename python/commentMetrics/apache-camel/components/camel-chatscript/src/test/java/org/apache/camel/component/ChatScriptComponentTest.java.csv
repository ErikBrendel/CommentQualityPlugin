commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testChatScript() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     Thread.sleep(100).     assertMockEndpointsSatisfied(). }
false;public;0;27;;public void configure() throws JsonProcessingException {     String g = "CS" + Math.random().     ChatScriptMessage rqMsg = new ChatScriptMessage(g, "", "").     ChatScriptMessage rq2Msg = new ChatScriptMessage(g, "", "Hello").     ChatScriptMessage rq3Msg = new ChatScriptMessage(g, "", "No").     String rq = "".     String rq2 = "".     String rq3 = "".     try {         rq = new ObjectMapper().writeValueAsString(rqMsg).         rq2 = new ObjectMapper().writeValueAsString(rq2Msg).         rq3 = new ObjectMapper().writeValueAsString(rq3Msg).     } catch (JsonProcessingException e) {         e.printStackTrace().     }     from("timer://foo?repeatCount=1").setBody(new SimpleExpression(rq)).to("chatscript://localhost:1024/Harry?resetchat=true").log("Response 2 = ${body}").setBody(new SimpleExpression(rq2)).to("chatscript://localhost:1024/Harry").log("Response 3 = ${body}").setBody(new SimpleExpression(rq3)).to("chatscript://localhost:1024/Harry").log("Response 4 = ${body}").to("mock:result"). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws JsonProcessingException {             String g = "CS" + Math.random().             ChatScriptMessage rqMsg = new ChatScriptMessage(g, "", "").             ChatScriptMessage rq2Msg = new ChatScriptMessage(g, "", "Hello").             ChatScriptMessage rq3Msg = new ChatScriptMessage(g, "", "No").             String rq = "".             String rq2 = "".             String rq3 = "".             try {                 rq = new ObjectMapper().writeValueAsString(rqMsg).                 rq2 = new ObjectMapper().writeValueAsString(rq2Msg).                 rq3 = new ObjectMapper().writeValueAsString(rq3Msg).             } catch (JsonProcessingException e) {                 e.printStackTrace().             }             from("timer://foo?repeatCount=1").setBody(new SimpleExpression(rq)).to("chatscript://localhost:1024/Harry?resetchat=true").log("Response 2 = ${body}").setBody(new SimpleExpression(rq2)).to("chatscript://localhost:1024/Harry").log("Response 3 = ${body}").setBody(new SimpleExpression(rq3)).to("chatscript://localhost:1024/Harry").log("Response 4 = ${body}").to("mock:result").         }     }. }
