commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     token = System.getProperty("SLACK_TOKEN").     hook = System.getProperty("SLACK_HOOK", "https://hooks.slack.com/services/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").     assumeCredentials().     super.setUp(). }
false;public;0;11;;@Test public void testConsumePrefixedMessages() throws Exception {     final String message = "Hi camel".     sendMessage(message).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body(SlackMessage.class).method("getText").isEqualTo(message).     assertMockEndpointsSatisfied(). }
false;private;0;4;;private void assumeCredentials() {     Assume.assumeThat("You should specified access token", token, CoreMatchers.notNullValue()).     Assume.assumeThat("You should specified slack application hook", hook, CoreMatchers.notNullValue()). }
false;private;1;8;;private void sendMessage(String message) throws IOException {     HttpClient client = HttpClients.createDefault().     HttpPost post = new HttpPost(hook).     post.setHeader("Content-type", "application/json").     post.setEntity(new StringEntity(String.format("{ 'text': '%s'}", message))).     HttpResponse response = client.execute(post).     Assert.assertEquals(response.getStatusLine().getStatusCode(), HttpStatus.SC_OK). }
false;public;0;5;;@Override public void configure() throws Exception {     from(String.format("slack://general?token=RAW(%s)&maxResults=1", token)).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(String.format("slack://general?token=RAW(%s)&maxResults=1", token)).to("mock:result").         }     }. }
