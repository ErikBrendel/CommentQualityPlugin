commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;// ************************************************* ;// ************************************************* // Tests (parameters) // ************************************************* @Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;13;;@Test public void testParametersWebhook() throws Exception {     Component component = context().getComponent("slack").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     Map<String, Object> parameters = new HashMap<>().     parameters.put("webhookUrl", "l").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;13;;@Test public void testParametersToken() throws Exception {     Component component = context().getComponent("slack").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     Map<String, Object> parameters = new HashMap<>().     parameters.put("token", "l").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;12;;@Test public void testParametersEmpty() throws Exception {     Component component = context().getComponent("slack").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     Map<String, Object> parameters = new HashMap<>().     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()). }
false;public;0;14;;@Test public void testParametersWebhookUrlTokenBoth() throws Exception {     Component component = context().getComponent("slack").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     Map<String, Object> parameters = new HashMap<>().     parameters.put("token", "l").     parameters.put("webhookUrl", "l").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()). }
false;public;0;12;;@Test public void testConnectivityWebhook() throws Exception {     Component component = context().getComponent("slack").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     Map<String, Object> parameters = new HashMap<>().     parameters.put("webhookUrl", "l").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()). }
false;public;0;12;;@Test public void testConnectivityToken() throws Exception {     Component component = context().getComponent("slack").     ComponentVerifierExtension verifier = component.getExtension(ComponentVerifierExtension.class).orElseThrow(IllegalStateException::new).     Map<String, Object> parameters = new HashMap<>().     parameters.put("token", "l").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.CONNECTIVITY, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()). }
