commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RestComponent getComponent() {     return (RestComponent) super.getComponent(). }
false;public;0;3;;public String getMethod() {     return method. }
true;public;1;3;/**  * HTTP method to use.  */ ;/**  * HTTP method to use.  */ public void setMethod(String method) {     this.method = method. }
false;public;0;3;;public String getPath() {     return path. }
true;public;1;3;/**  * The base path  */ ;/**  * The base path  */ public void setPath(String path) {     this.path = path. }
false;public;0;3;;public String getUriTemplate() {     return uriTemplate. }
true;public;1;3;/**  * The uri template  */ ;/**  * The uri template  */ public void setUriTemplate(String uriTemplate) {     this.uriTemplate = uriTemplate. }
false;public;0;3;;public String getConsumes() {     return consumes. }
true;public;1;3;/**  * Media type such as: 'text/xml', or 'application/json' this REST service accepts.  * By default we accept all kinds of types.  */ ;/**  * Media type such as: 'text/xml', or 'application/json' this REST service accepts.  * By default we accept all kinds of types.  */ public void setConsumes(String consumes) {     this.consumes = consumes. }
false;public;0;3;;public String getProduces() {     return produces. }
true;public;1;3;/**  * Media type such as: 'text/xml', or 'application/json' this REST service returns.  */ ;/**  * Media type such as: 'text/xml', or 'application/json' this REST service returns.  */ public void setProduces(String produces) {     this.produces = produces. }
false;public;0;3;;public String getComponentName() {     return componentName. }
true;public;1;3;/**  * The Camel Rest component to use for the REST transport, such as restlet, spark-rest.  * If no component has been explicit configured, then Camel will lookup if there is a Camel component  * that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry.  * If either one is found, then that is being used.  */ ;/**  * The Camel Rest component to use for the REST transport, such as restlet, spark-rest.  * If no component has been explicit configured, then Camel will lookup if there is a Camel component  * that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry.  * If either one is found, then that is being used.  */ public void setComponentName(String componentName) {     this.componentName = componentName. }
false;public;0;3;;public String getInType() {     return inType. }
true;public;1;3;/**  * To declare the incoming POJO binding type as a FQN class name  */ ;/**  * To declare the incoming POJO binding type as a FQN class name  */ public void setInType(String inType) {     this.inType = inType. }
false;public;0;3;;public String getOutType() {     return outType. }
true;public;1;3;/**  * To declare the outgoing POJO binding type as a FQN class name  */ ;/**  * To declare the outgoing POJO binding type as a FQN class name  */ public void setOutType(String outType) {     this.outType = outType. }
false;public;0;3;;public String getRouteId() {     return routeId. }
true;public;1;3;/**  * Name of the route this REST services creates  */ ;/**  * Name of the route this REST services creates  */ public void setRouteId(String routeId) {     this.routeId = routeId. }
false;public;0;3;;public String getDescription() {     return description. }
true;public;1;3;/**  * Human description to document this REST service  */ ;/**  * Human description to document this REST service  */ public void setDescription(String description) {     this.description = description. }
false;public;0;3;;public Map<String, Object> getParameters() {     return parameters. }
true;public;1;3;/**  * Additional parameters to configure the consumer of the REST transport for this REST service  */ ;/**  * Additional parameters to configure the consumer of the REST transport for this REST service  */ public void setParameters(Map<String, Object> parameters) {     this.parameters = parameters. }
false;public;0;3;;public String getApiDoc() {     return apiDoc. }
true;public;1;3;/**  * The swagger api doc resource to use.  * The resource is loaded from classpath by default and must be in JSon format.  */ ;/**  * The swagger api doc resource to use.  * The resource is loaded from classpath by default and must be in JSon format.  */ public void setApiDoc(String apiDoc) {     this.apiDoc = apiDoc. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * Host and port of HTTP service to use (override host in swagger schema)  */ ;/**  * Host and port of HTTP service to use (override host in swagger schema)  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public String getQueryParameters() {     return queryParameters. }
true;public;1;3;/**  * Query parameters for the HTTP service to call  */ ;/**  * Query parameters for the HTTP service to call  */ public void setQueryParameters(String queryParameters) {     this.queryParameters = queryParameters. }
false;public;0;3;;public RestConfiguration.RestBindingMode getBindingMode() {     return bindingMode. }
true;public;1;3;/**  * Configures the binding mode for the producer. If set to anything  * other than 'off' the producer will try to convert the body of  * the incoming message from inType to the json or xml, and the  * response from json or xml to outType.  */ ;/**  * Configures the binding mode for the producer. If set to anything  * other than 'off' the producer will try to convert the body of  * the incoming message from inType to the json or xml, and the  * response from json or xml to outType.  */ public void setBindingMode(RestConfiguration.RestBindingMode bindingMode) {     this.bindingMode = bindingMode. }
false;public;1;3;;public void setBindingMode(String bindingMode) {     this.bindingMode = RestConfiguration.RestBindingMode.valueOf(bindingMode.toLowerCase()). }
false;public;0;117;;@Override public Producer createProducer() throws Exception {     if (ObjectHelper.isEmpty(host)) {         // hostname must be provided         throw new IllegalArgumentException("Hostname must be configured on either restConfiguration" + " or in the rest endpoint uri as a query parameter with name host, eg rest:" + method + ":" + path + "?host=someserver").     }     RestProducerFactory apiDocFactory = null.     RestProducerFactory factory = null.     if (apiDoc != null) {         log.debug("Discovering camel-swagger-java on classpath for using api-doc: {}", apiDoc).         // lookup on classpath using factory finder to automatic find it (just add camel-swagger-java to classpath etc)         try {             FactoryFinder finder = getCamelContext().getFactoryFinder(RESOURCE_PATH).             Object instance = finder.newInstance(DEFAULT_API_COMPONENT_NAME).             if (instance instanceof RestProducerFactory) {                 // this factory from camel-swagger-java will facade the http component in use                 apiDocFactory = (RestProducerFactory) instance.             }             parameters.put("apiDoc", apiDoc).         } catch (NoFactoryAvailableException e) {             throw new IllegalStateException("Cannot find camel-swagger-java on classpath to use with api-doc: " + apiDoc).         }     }     String cname = getComponentName().     if (cname != null) {         Object comp = getCamelContext().getRegistry().lookupByName(getComponentName()).         if (comp instanceof RestProducerFactory) {             factory = (RestProducerFactory) comp.         } else {             comp = setupComponent(getComponentName(), getCamelContext(), (Map<String, Object>) parameters.get("component")).             if (comp instanceof RestProducerFactory) {                 factory = (RestProducerFactory) comp.             }         }         if (factory == null) {             if (comp != null) {                 throw new IllegalArgumentException("Component " + getComponentName() + " is not a RestProducerFactory").             } else {                 throw new NoSuchBeanException(getComponentName(), RestProducerFactory.class.getName()).             }         }         cname = getComponentName().     }     // try all components     if (factory == null) {         for (String name : getCamelContext().getComponentNames()) {             Component comp = setupComponent(name, getCamelContext(), (Map<String, Object>) parameters.get("component")).             if (comp instanceof RestProducerFactory) {                 factory = (RestProducerFactory) comp.                 cname = name.                 break.             }         }     }     parameters.put("componentName", cname).     // lookup in registry     if (factory == null) {         Set<RestProducerFactory> factories = getCamelContext().getRegistry().findByType(RestProducerFactory.class).         if (factories != null && factories.size() == 1) {             factory = factories.iterator().next().         }     }     // and there must only be exactly one so we safely can pick this one     if (factory == null) {         RestProducerFactory found = null.         String foundName = null.         for (String name : DEFAULT_REST_PRODUCER_COMPONENTS) {             Object comp = setupComponent(getComponentName(), getCamelContext(), (Map<String, Object>) parameters.get("component")).             if (comp instanceof RestProducerFactory) {                 if (found == null) {                     found = (RestProducerFactory) comp.                     foundName = name.                 } else {                     throw new IllegalArgumentException("Multiple RestProducerFactory found on classpath. Configure explicit which component to use").                 }             }         }         if (found != null) {             log.debug("Auto discovered {} as RestProducerFactory", foundName).             factory = found.         }     }     if (factory != null) {         log.debug("Using RestProducerFactory: {}", factory).         RestConfiguration config = getCamelContext().getRestConfiguration(cname, true).         Producer producer.         if (apiDocFactory != null) {             // wrap the factory using the api doc factory which will use the factory             parameters.put("restProducerFactory", factory).             producer = apiDocFactory.createProducer(getCamelContext(), host, method, path, uriTemplate, queryParameters, consumes, produces, config, parameters).         } else {             producer = factory.createProducer(getCamelContext(), host, method, path, uriTemplate, queryParameters, consumes, produces, config, parameters).         }         RestProducer answer = new RestProducer(this, producer, config).         answer.setOutType(outType).         answer.setType(inType).         answer.setBindingMode(bindingMode).         return answer.     } else {         throw new IllegalStateException("Cannot find RestProducerFactory in Registry or as a Component to use").     } }
false;public;1;140;;@Override public Consumer createConsumer(Processor processor) throws Exception {     RestConsumerFactory factory = null.     String cname = null.     if (getComponentName() != null) {         Object comp = getCamelContext().getRegistry().lookupByName(getComponentName()).         if (comp instanceof RestConsumerFactory) {             factory = (RestConsumerFactory) comp.         } else {             comp = getCamelContext().getComponent(getComponentName()).             if (comp instanceof RestConsumerFactory) {                 factory = (RestConsumerFactory) comp.             }         }         if (factory == null) {             if (comp != null) {                 throw new IllegalArgumentException("Component " + getComponentName() + " is not a RestConsumerFactory").             } else {                 throw new NoSuchBeanException(getComponentName(), RestConsumerFactory.class.getName()).             }         }         cname = getComponentName().     }     // try all components     if (factory == null) {         for (String name : getCamelContext().getComponentNames()) {             Component comp = getCamelContext().getComponent(name).             if (comp instanceof RestConsumerFactory) {                 factory = (RestConsumerFactory) comp.                 cname = name.                 break.             }         }     }     // lookup in registry     if (factory == null) {         Set<RestConsumerFactory> factories = getCamelContext().getRegistry().findByType(RestConsumerFactory.class).         if (factories != null && factories.size() == 1) {             factory = factories.iterator().next().         }     }     // and there must only be exactly one so we safely can pick this one     if (factory == null) {         RestConsumerFactory found = null.         String foundName = null.         for (String name : DEFAULT_REST_CONSUMER_COMPONENTS) {             Object comp = getCamelContext().getComponent(name, true).             if (comp instanceof RestConsumerFactory) {                 if (found == null) {                     found = (RestConsumerFactory) comp.                     foundName = name.                 } else {                     throw new IllegalArgumentException("Multiple RestConsumerFactory found on classpath. Configure explicit which component to use").                 }             }         }         if (found != null) {             log.debug("Auto discovered {} as RestConsumerFactory", foundName).             factory = found.         }     }     if (factory != null) {         // if no explicit port/host configured, then use port from rest configuration         String scheme = "http".         String host = "".         int port = 80.         RestConfiguration config = getCamelContext().getRestConfiguration(cname, true).         if (config.getScheme() != null) {             scheme = config.getScheme().         }         if (config.getHost() != null) {             host = config.getHost().         }         int num = config.getPort().         if (num > 0) {             port = num.         }         // if no explicit hostname set then resolve the hostname         if (ObjectHelper.isEmpty(host)) {             if (config.getHostNameResolver() == RestConfiguration.RestHostNameResolver.allLocalIp) {                 host = "0.0.0.0".             } else if (config.getHostNameResolver() == RestConfiguration.RestHostNameResolver.localHostName) {                 host = HostUtils.getLocalHostName().             } else if (config.getHostNameResolver() == RestConfiguration.RestHostNameResolver.localIp) {                 host = HostUtils.getLocalIp().             }         }         // calculate the url to the rest service         String path = getPath().         if (!path.startsWith("/")) {             path = "/" + path.         }         // there may be an optional context path configured to help Camel calculate the correct urls for the REST services         // this may be needed when using camel-servlet where we cannot get the actual context-path or port number of the servlet engine         // during init of the servlet         String contextPath = config.getContextPath().         if (contextPath != null) {             if (!contextPath.startsWith("/")) {                 path = "/" + contextPath + path.             } else {                 path = contextPath + path.             }         }         String baseUrl = scheme + "://" + host + (port != 80 ? ":" + port : "") + path.         String url = baseUrl.         if (uriTemplate != null) {             // make sure to avoid double slashes             if (uriTemplate.startsWith("/")) {                 url = url + uriTemplate.             } else {                 url = url + "/" + uriTemplate.             }         }         Consumer consumer = factory.createConsumer(getCamelContext(), processor, getMethod(), getPath(), getUriTemplate(), getConsumes(), getProduces(), config, getParameters()).         configureConsumer(consumer).         // add to rest registry so we can keep track of them, we will remove from the registry when the consumer is removed         // the rest registry will automatic keep track when the consumer is removed,         // and un-register the REST service from the registry         getCamelContext().getRestRegistry().addRestService(consumer, url, baseUrl, getPath(), getUriTemplate(), getMethod(), getConsumes(), getProduces(), getInType(), getOutType(), getRouteId(), getDescription()).         return consumer.     } else {         throw new IllegalStateException("Cannot find RestConsumerFactory in Registry or as a Component to use").     } }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public boolean isLenientProperties() {     return true. }
