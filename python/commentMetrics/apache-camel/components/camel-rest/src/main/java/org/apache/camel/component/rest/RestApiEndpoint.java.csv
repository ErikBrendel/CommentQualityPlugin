commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RestApiComponent getComponent() {     return (RestApiComponent) super.getComponent(). }
false;public;0;3;;public String getPath() {     return path. }
true;public;1;3;/**  * The base path  */ ;/**  * The base path  */ public void setPath(String path) {     this.path = path. }
false;public;0;3;;public String getContextIdPattern() {     return contextIdPattern. }
true;public;1;3;/**  * Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.  */ ;/**  * Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.  */ public void setContextIdPattern(String contextIdPattern) {     this.contextIdPattern = contextIdPattern. }
false;public;0;3;;public String getComponentName() {     return componentName. }
true;public;1;3;/**  * The Camel Rest component to use for the REST transport, such as restlet, spark-rest.  * If no component has been explicit configured, then Camel will lookup if there is a Camel component  * that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry.  * If either one is found, then that is being used.  */ ;/**  * The Camel Rest component to use for the REST transport, such as restlet, spark-rest.  * If no component has been explicit configured, then Camel will lookup if there is a Camel component  * that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry.  * If either one is found, then that is being used.  */ public void setComponentName(String componentName) {     this.componentName = componentName. }
false;public;0;3;;public String getApiComponentName() {     return apiComponentName. }
true;public;1;3;/**  * The Camel Rest API component to use for generating the API of the REST services, such as swagger.  */ ;/**  * The Camel Rest API component to use for generating the API of the REST services, such as swagger.  */ public void setApiComponentName(String apiComponentName) {     this.apiComponentName = apiComponentName. }
false;public;0;3;;public Map<String, Object> getParameters() {     return parameters. }
true;public;1;3;/**  * Additional parameters to configure the consumer of the REST transport for this REST service  */ ;/**  * Additional parameters to configure the consumer of the REST transport for this REST service  */ public void setParameters(Map<String, Object> parameters) {     this.parameters = parameters. }
false;public;0;76;;@Override public Producer createProducer() throws Exception {     RestApiProcessorFactory factory = null.     RestConfiguration config = getCamelContext().getRestConfiguration(componentName, true).     // lookup in registry     Set<RestApiProcessorFactory> factories = getCamelContext().getRegistry().findByType(RestApiProcessorFactory.class).     if (factories != null && factories.size() == 1) {         factory = factories.iterator().next().     }     // lookup on classpath using factory finder to automatic find it (just add camel-swagger-java to classpath etc)     if (factory == null) {         String name = apiComponentName != null ? apiComponentName : config.getApiComponent().         if (name == null) {             name = DEFAULT_API_COMPONENT_NAME.         }         try {             FactoryFinder finder = getCamelContext().getFactoryFinder(RESOURCE_PATH).             Object instance = finder.newInstance(name).             if (instance instanceof RestApiProcessorFactory) {                 factory = (RestApiProcessorFactory) instance.             }         } catch (NoFactoryAvailableException e) {         // ignore         }     }     if (factory != null) {         // if no explicit port/host configured, then use port from rest configuration         String host = "".         int port = 80.         if (config.getApiHost() != null) {             host = config.getApiHost().         } else if (config.getHost() != null) {             host = config.getHost().         }         int num = config.getPort().         if (num > 0) {             port = num.         }         // if no explicit hostname set then resolve the hostname         if (ObjectHelper.isEmpty(host)) {             if (config.getHostNameResolver() == RestConfiguration.RestHostNameResolver.allLocalIp) {                 host = "0.0.0.0".             } else if (config.getHostNameResolver() == RestConfiguration.RestHostNameResolver.localHostName) {                 host = HostUtils.getLocalHostName().             } else if (config.getHostNameResolver() == RestConfiguration.RestHostNameResolver.localIp) {                 host = HostUtils.getLocalIp().             }             // no host was configured so calculate a host to use             // there should be no schema in the host (but only port)             String targetHost = host + (port != 80 ? ":" + port : "").             getParameters().put("host", targetHost).         }         // the base path should start with a leading slash         String path = getPath().         if (path != null && !path.startsWith("/")) {             path = "/" + path.         }         // whether listing of the context id's is enabled or not         boolean contextIdListing = config.isApiContextListing().         Processor processor = factory.createApiProcessor(getCamelContext(), path, getContextIdPattern(), contextIdListing, config, getParameters()).         return new RestApiProducer(this, processor).     } else {         throw new IllegalStateException("Cannot find RestApiProcessorFactory in Registry or classpath (such as the camel-swagger-java component)").     } }
false;public;1;66;;@Override public Consumer createConsumer(Processor processor) throws Exception {     RestApiConsumerFactory factory = null.     String cname = null.     // the API then uses the api component (eg usually camel-swagger-java) to build the API     if (getComponentName() != null) {         Object comp = getCamelContext().getRegistry().lookupByName(getComponentName()).         if (comp instanceof RestApiConsumerFactory) {             factory = (RestApiConsumerFactory) comp.         } else {             comp = getCamelContext().getComponent(getComponentName()).             if (comp instanceof RestApiConsumerFactory) {                 factory = (RestApiConsumerFactory) comp.             }         }         if (factory == null) {             if (comp != null) {                 throw new IllegalArgumentException("Component " + getComponentName() + " is not a RestApiConsumerFactory").             } else {                 throw new NoSuchBeanException(getComponentName(), RestApiConsumerFactory.class.getName()).             }         }         cname = getComponentName().     }     // try all components     if (factory == null) {         for (String name : getCamelContext().getComponentNames()) {             Component comp = getCamelContext().getComponent(name).             if (comp instanceof RestApiConsumerFactory) {                 factory = (RestApiConsumerFactory) comp.                 cname = name.                 break.             }         }     }     // lookup in registry     if (factory == null) {         Set<RestApiConsumerFactory> factories = getCamelContext().getRegistry().findByType(RestApiConsumerFactory.class).         if (factories != null && factories.size() == 1) {             factory = factories.iterator().next().         }     }     if (factory != null) {         // calculate the url to the rest API service         RestConfiguration config = getCamelContext().getRestConfiguration(cname, true).         // calculate the url to the rest API service         String path = getPath().         if (path != null && !path.startsWith("/")) {             path = "/" + path.         }         Consumer consumer = factory.createApiConsumer(getCamelContext(), processor, path, config, getParameters()).         configureConsumer(consumer).         return consumer.     } else {         throw new IllegalStateException("Cannot find RestApiConsumerFactory in Registry or as a Component to use").     } }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public boolean isLenientProperties() {     return true. }
