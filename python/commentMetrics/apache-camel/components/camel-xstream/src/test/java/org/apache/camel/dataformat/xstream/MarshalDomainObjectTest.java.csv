commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testMarshalDomainObject() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     PurchaseOrder order = new PurchaseOrder().     order.setName("Tiger").     order.setAmount(1).     order.setPrice(99.95).     template.sendBody("direct:in", order).     mock.assertIsSatisfied(). }
false;public;0;19;;@Test public void testMarshalDomainObjectTwice() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     PurchaseOrder order = new PurchaseOrder().     order.setName("Tiger").     order.setAmount(1).     order.setPrice(99.95).     template.sendBody("direct:in", order).     template.sendBody("direct:in", order).     mock.assertIsSatisfied().     String body1 = mock.getExchanges().get(0).getIn().getBody(String.class).     String body2 = mock.getExchanges().get(1).getIn().getBody(String.class).     assertEquals("The body should marshalled to the same", body1, body2). }
false;public;0;19;;@Test public void testMarshalAndUnmarshal() throws Exception {     PurchaseOrder order = new PurchaseOrder().     order.setName("Tiger").     order.setAmount(1).     order.setPrice(99.95).     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(PurchaseOrder.class).     mock.message(0).body().isEqualTo(order).     // we get it back as byte array so type convert it to string     Object result = template.requestBody("direct:marshal", order).     String body = context.getTypeConverter().convertTo(String.class, result).     template.sendBody("direct:reverse", body).     mock.assertIsSatisfied(). }
false;public;0;8;;public void configure() throws Exception {     from("direct:in").marshal().xstream(PurchaseOrder.class).to("mock:result").     // just used for helping to marshal     from("direct:marshal").marshal().xstream("UTF-8", PurchaseOrder.class).     from("direct:reverse").unmarshal().xstream("UTF-8", PurchaseOrder.class).to("mock:reverse"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").marshal().xstream(PurchaseOrder.class).to("mock:result").             // just used for helping to marshal             from("direct:marshal").marshal().xstream("UTF-8", PurchaseOrder.class).             from("direct:reverse").unmarshal().xstream("UTF-8", PurchaseOrder.class).to("mock:reverse").         }     }. }
