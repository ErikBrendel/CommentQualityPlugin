commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     constructorInjected = false.     methodInjected = false. }
false;public;0;4;;public void testXStreamInjection() {     assertTrue(constructorInjected).     assertTrue(methodInjected). }
false;public;0;18;;@Test public void testCustomMarshalDomainObject() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     PurchaseOrder order = new PurchaseOrder().     order.setName("Tiger").     order.setAmount(1).     order.setPrice(99.95).     String ordereString = "<?xml version='1.0' encoding='UTF-8'?>" + "<purchase-order name=\"Tiger\" price=\"99.95\" amount=\"1.0\"/>".     mock.expectedBodiesReceived(new Object[] { ordereString, order }).     template.sendBody("direct:marshal", order).     template.sendBody("direct:unmarshal", ordereString).     mock.assertIsSatisfied(). }
false;public;0;20;;@Test public void testCustomMarshalDomainObjectWithImplicit() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     PurchaseHistory history = new PurchaseHistory().     List<Double> list = new ArrayList<>().     list.add(11.5).     list.add(97.5).     history.setHistory(list).     String ordereString = "<?xml version='1.0' encoding='UTF-8'?>" + "<org.apache.camel.dataformat.xstream.PurchaseHistory>" + "<double>11.5</double><double>97.5</double>" + "</org.apache.camel.dataformat.xstream.PurchaseHistory>".     mock.expectedBodiesReceived(new Object[] { ordereString, history }).     template.sendBody("direct:marshal", history).     template.sendBody("direct:unmarshal", ordereString).     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testCustomMarshalDomainObjectJson() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     PurchaseOrder order = new PurchaseOrder().     order.setName("Tiger").     order.setAmount(1).     order.setPrice(99.95).     String ordereString = "{\"purchase-order\":{\"@name\":\"Tiger\",\"@price\":99.95,\"@amount\":1}}".     mock.expectedBodiesReceived(new Object[] { ordereString, order }).     template.sendBody("direct:marshal-json", order).     template.sendBody("direct:unmarshal-json", ordereString).     mock.assertIsSatisfied(). }
false;public;0;16;;@Test public void testCustomXStreamDriverMarshal() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     PurchaseOrder order = new PurchaseOrder().     order.setName("Tiger").     order.setAmount(1).     order.setPrice(99.95).     template.sendBody("direct:myDriver", order).     mock.assertIsSatisfied().     String result = mock.getExchanges().get(0).getIn().getBody(String.class).     // make sure the result is start with "{"     assertTrue("Should get a json result", result.startsWith("{")). }
false;public;0;42;;@Override public void configure() throws Exception {     XStreamDataFormat xstreamDefinition = new XStreamDataFormat().     Map<String, String> aliases = new HashMap<>().     aliases.put("purchase-order", PurchaseOrder.class.getName()).     xstreamDefinition.setAliases(aliases).     xstreamDefinition.setPermissions(PurchaseOrder.class, PurchaseHistory.class).     List<String> converters = new ArrayList<>().     converters.add(PurchaseOrderConverter.class.getName()).     converters.add(CheckMethodInjection.class.getName()).     converters.add(CheckConstructorInjection.class.getName()).     xstreamDefinition.setConverters(converters).     Map<String, String[]> implicits = new HashMap<>().     implicits.put(PurchaseHistory.class.getName(), new String[] { "history" }).     xstreamDefinition.setImplicitCollections(implicits).     from("direct:marshal").marshal(xstreamDefinition).to("mock:result").     from("direct:unmarshal").unmarshal(xstreamDefinition).to("mock:result").     xstreamDefinition = new XStreamDataFormat().     xstreamDefinition.setDriver("json").     aliases = new HashMap<>().     aliases.put("purchase-order", PurchaseOrder.class.getName()).     xstreamDefinition.setAliases(aliases).     xstreamDefinition.setPermissions(PurchaseOrder.class, PurchaseHistory.class).     converters = new ArrayList<>().     converters.add(PurchaseOrderConverter.class.getName()).     xstreamDefinition.setConverters(converters).     from("direct:marshal-json").marshal(xstreamDefinition).to("mock:result").     from("direct:unmarshal-json").unmarshal(xstreamDefinition).to("mock:result").     org.apache.camel.dataformat.xstream.XStreamDataFormat xStreamDataFormat = new org.apache.camel.dataformat.xstream.XStreamDataFormat().     xStreamDataFormat.setXstreamDriver(new JsonHierarchicalStreamDriver()).     xStreamDataFormat.setPermissions("+6org.apache.camel.dataformat.xstream.*").     from("direct:myDriver").marshal(xStreamDataFormat).to("mock:result"). }
false;protected;0;47;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             XStreamDataFormat xstreamDefinition = new XStreamDataFormat().             Map<String, String> aliases = new HashMap<>().             aliases.put("purchase-order", PurchaseOrder.class.getName()).             xstreamDefinition.setAliases(aliases).             xstreamDefinition.setPermissions(PurchaseOrder.class, PurchaseHistory.class).             List<String> converters = new ArrayList<>().             converters.add(PurchaseOrderConverter.class.getName()).             converters.add(CheckMethodInjection.class.getName()).             converters.add(CheckConstructorInjection.class.getName()).             xstreamDefinition.setConverters(converters).             Map<String, String[]> implicits = new HashMap<>().             implicits.put(PurchaseHistory.class.getName(), new String[] { "history" }).             xstreamDefinition.setImplicitCollections(implicits).             from("direct:marshal").marshal(xstreamDefinition).to("mock:result").             from("direct:unmarshal").unmarshal(xstreamDefinition).to("mock:result").             xstreamDefinition = new XStreamDataFormat().             xstreamDefinition.setDriver("json").             aliases = new HashMap<>().             aliases.put("purchase-order", PurchaseOrder.class.getName()).             xstreamDefinition.setAliases(aliases).             xstreamDefinition.setPermissions(PurchaseOrder.class, PurchaseHistory.class).             converters = new ArrayList<>().             converters.add(PurchaseOrderConverter.class.getName()).             xstreamDefinition.setConverters(converters).             from("direct:marshal-json").marshal(xstreamDefinition).to("mock:result").             from("direct:unmarshal-json").unmarshal(xstreamDefinition).to("mock:result").             org.apache.camel.dataformat.xstream.XStreamDataFormat xStreamDataFormat = new org.apache.camel.dataformat.xstream.XStreamDataFormat().             xStreamDataFormat.setXstreamDriver(new JsonHierarchicalStreamDriver()).             xStreamDataFormat.setPermissions("+6org.apache.camel.dataformat.xstream.*").             from("direct:myDriver").marshal(xStreamDataFormat).to("mock:result").         }     }. }
false;public;1;4;;@SuppressWarnings("rawtypes") public boolean canConvert(Class type) {     return PurchaseOrder.class.isAssignableFrom(type). }
false;public;2;7;;public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {     PurchaseOrder order = new PurchaseOrder().     order.setName(reader.getAttribute("name")).     order.setPrice(Double.parseDouble(reader.getAttribute("price"))).     order.setAmount(Double.parseDouble(reader.getAttribute("amount"))).     return order. }
false;public;3;6;;public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {     writer.addAttribute("name", ((PurchaseOrder) object).getName()).     writer.addAttribute("price", Double.toString(((PurchaseOrder) object).getPrice())).     writer.addAttribute("amount", Double.toString(((PurchaseOrder) object).getAmount())). }
false;public;3;2;;public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { }
false;public;2;3;;public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {     return null. }
false;public;1;4;;@SuppressWarnings("rawtypes") public boolean canConvert(Class type) {     return false. }
false;public;1;7;;public void setXStream(XStream xstream) {     if (xstream != null) {         methodInjected = true.     } else {         throw new RuntimeException("XStream should not be null").     } }
false;public;3;2;;public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { }
false;public;2;3;;public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {     return null. }
false;public;1;4;;@SuppressWarnings("rawtypes") public boolean canConvert(Class type) {     return false. }
