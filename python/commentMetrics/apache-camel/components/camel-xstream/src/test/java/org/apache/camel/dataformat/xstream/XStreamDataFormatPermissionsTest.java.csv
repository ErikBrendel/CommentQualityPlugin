commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testNone() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     try {         xStream.fromXML(XML_PURCHASE_ORDER).         fail("should fail to unmarshall").     } catch (ForbiddenClassException e) {     // OK     } }
false;public;0;14;;@Test public void testDeny() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("-org.apache.camel.dataformat.xstream.PurchaseOrder").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     try {         xStream.fromXML(XML_PURCHASE_ORDER).         fail("should fail to unmarshall").     } catch (ForbiddenClassException e) {     // OK     } }
false;public;0;13;;@Test public void testAllow() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("org.apache.camel.dataformat.xstream.PurchaseOrder").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     Object po = xStream.fromXML(XML_PURCHASE_ORDER).     assertNotNull(po).     po = xStream.fromXML(XML_PURCHASE_ORDERS_LIST).     assertNotNull(po). }
false;public;0;14;;@Test public void testAllowAndDeny() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("org.apache.camel.dataformat.xstream.PurchaseOrder,-org.apache.camel.dataformat.xstream.*").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     try {         xStream.fromXML(XML_PURCHASE_ORDER).         fail("should fail to unmarshall").     } catch (ForbiddenClassException e) {     // OK     } }
false;public;0;13;;@Test public void testDenyAndAllowDeny() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("-org.apache.camel.dataformat.xstream.*,org.apache.camel.dataformat.xstream.PurchaseOrder").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     Object po = xStream.fromXML(XML_PURCHASE_ORDER).     assertNotNull(po).     po = xStream.fromXML(XML_PURCHASE_ORDERS_LIST).     assertNotNull(po). }
false;public;0;13;;@Test public void testAllowAny() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("*").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     Object po = xStream.fromXML(XML_PURCHASE_ORDER).     assertNotNull(po).     po = xStream.fromXML(XML_PURCHASE_ORDERS_LIST).     assertNotNull(po). }
false;public;0;14;;@Test public void testAllowAnyAndDeny() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("*,-org.apache.camel.dataformat.xstream.PurchaseOrder").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     try {         xStream.fromXML(XML_PURCHASE_ORDER).         fail("should fail to unmarshall").     } catch (ForbiddenClassException e) {     // OK     } }
false;public;0;14;;@Test public void testDenyAny() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("-*").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     try {         xStream.fromXML(XML_PURCHASE_ORDER).         fail("should fail to unmarshall").     } catch (ForbiddenClassException e) {     // OK     } }
false;public;0;17;;@Test public void testDenyAnyAndAllow() {     XStreamDataFormat xStreamDataFormat = new XStreamDataFormat().     xStreamDataFormat.setPermissions("-*,org.apache.camel.dataformat.xstream.PurchaseOrder").     XStream xStream = xStreamDataFormat.createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     Object po = xStream.fromXML(XML_PURCHASE_ORDER).     assertNotNull(po).     try {         xStream.fromXML(XML_PURCHASE_ORDERS_LIST).         fail("should fail to unmarshall").     } catch (ForbiddenClassException e) {     // OK     } }
