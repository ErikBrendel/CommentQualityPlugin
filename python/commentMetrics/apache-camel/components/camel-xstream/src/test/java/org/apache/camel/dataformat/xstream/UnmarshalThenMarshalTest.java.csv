commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testSendXmlAndUnmarshal() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     PurchaseOrder expectedBody = new PurchaseOrder().     expectedBody.setAmount(20.0).     expectedBody.setName("Wine").     expectedBody.setPrice(5.0).     template.sendBody("direct:start", expectedBody).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     Object actualBody = exchange.getIn().getBody().     log.debug("Received: " + actualBody).     assertEquals("Received body", expectedBody, actualBody). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     log.debug("marshalled: " + exchange.getIn().getBody(String.class)). }
false;public;0;11;;public void configure() {     from("direct:start").marshal().xstream(PurchaseOrder.class).process(new Processor() {          public void process(Exchange exchange) throws Exception {             log.debug("marshalled: " + exchange.getIn().getBody(String.class)).         }     }).unmarshal().xstream(PurchaseOrder.class).to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").marshal().xstream(PurchaseOrder.class).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     log.debug("marshalled: " + exchange.getIn().getBody(String.class)).                 }             }).unmarshal().xstream(PurchaseOrder.class).to("mock:result").         }     }. }
