commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testMarshalList() throws Exception {     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("<?xml version='1.0' encoding='ISO-8859-1'?>" + "<list><string>Hello World</string></list>").     List<String> body = new ArrayList<>().     body.add("Hello World").     template.sendBodyAndProperty("direct:in", body, Exchange.CHARSET_NAME, "ISO-8859-1").     mock.assertIsSatisfied(). }
false;public;0;16;;@Test public void testMarshalListWithMap() throws Exception {     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("<?xml version='1.0' encoding='UTF-8'?><list><map><entry><string>city</string>" + "<string>London\u0E08</string></entry></map></list>").     List<Map<Object, String>> body = new ArrayList<>().     Map<Object, String> row = new HashMap<>().     row.put("city", "London\u0E08").     body.add(row).     template.sendBodyAndProperty("direct:in", body, Exchange.CHARSET_NAME, "UTF-8").     mock.assertIsSatisfied(). }
false;public;0;16;;@Test public void testSetEncodingOnXstream() throws Exception {     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("<?xml version='1.0' encoding='UTF-8'?><list><map><entry><string>city</string>" + "<string>London\u0E08</string></entry></map></list>").     List<Map<Object, String>> body = new ArrayList<>().     Map<Object, String> row = new HashMap<>().     row.put("city", "London\u0E08").     body.add(row).     template.sendBody("direct:in-UTF-8", body).     mock.assertIsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     from("direct:in").marshal().xstream().to(mock).     from("direct:in-UTF-8").marshal().xstream("UTF-8").to(mock). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").marshal().xstream().to(mock).             from("direct:in-UTF-8").marshal().xstream("UTF-8").to(mock).         }     }. }
