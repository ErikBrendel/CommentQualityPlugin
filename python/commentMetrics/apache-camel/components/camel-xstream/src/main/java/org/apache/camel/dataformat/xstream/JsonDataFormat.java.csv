commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "json-xstream". }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;3;12;;@Override public void marshal(Exchange exchange, Object body, OutputStream stream) throws Exception {     super.marshal(exchange, body, stream).     if (isContentTypeHeader()) {         if (exchange.hasOut()) {             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/json").         } else {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json").         }     } }
false;protected;2;10;;@Override protected XStream createXStream(ClassResolver resolver, ClassLoader classLoader) {     XStream xs = super.createXStream(resolver, classLoader).     if (getMode() != null) {         xs.setMode(getModeFromString(getMode())).     } else {         xs.setMode(XStream.NO_REFERENCES).     }     return xs. }
false;protected;3;12;;protected HierarchicalStreamWriter createHierarchicalStreamWriter(Exchange exchange, Object body, OutputStream stream) throws XMLStreamException {     if (isPrettyPrint()) {         try {             // the json spec. expects UTF-8 as the default encoding             return new JsonWriter(new OutputStreamWriter(stream, "UTF-8")).         } catch (UnsupportedEncodingException uee) {             throw new XMLStreamException(uee).         }     }     return new StaxWriter(new QNameMap(), mof.createXMLStreamWriter(stream)). }
false;protected;2;3;;protected HierarchicalStreamReader createHierarchicalStreamReader(Exchange exchange, InputStream stream) throws XMLStreamException {     return new StaxReader(new QNameMap(), mif.createXMLStreamReader(stream)). }
