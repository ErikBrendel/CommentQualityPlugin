commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
true;public;1;6;/**  * Resolves the XStream instance to be used by this data format. If XStream is not explicitly set, new instance will  * be created and cached.  *  * @param resolver class resolver to be used during a configuration of the XStream instance.  * @return XStream instance used by this data format.  */ ;/**  * Resolves the XStream instance to be used by this data format. If XStream is not explicitly set, new instance will  * be created and cached.  *  * @param resolver class resolver to be used during a configuration of the XStream instance.  * @return XStream instance used by this data format.  */ public XStream getXStream(ClassResolver resolver) {     if (xstream == null) {         xstream = createXStream(resolver, null).     }     return xstream. }
true;public;1;6;/**  * Resolves the XStream instance to be used by this data format. If XStream is not explicitly set, new instance will  * be created and cached.  *  * @param context to be used during a configuration of the XStream instance  * @return XStream instance used by this data format.  */ ;/**  * Resolves the XStream instance to be used by this data format. If XStream is not explicitly set, new instance will  * be created and cached.  *  * @param context to be used during a configuration of the XStream instance  * @return XStream instance used by this data format.  */ public XStream getXStream(CamelContext context) {     if (xstream == null) {         xstream = createXStream(context.getClassResolver(), context.getApplicationContextClassLoader()).     }     return xstream. }
false;public;1;3;;public void setXStream(XStream xstream) {     this.xstream = xstream. }
false;protected;2;84;;protected XStream createXStream(ClassResolver resolver, ClassLoader classLoader) {     if (xstreamDriver != null) {         xstream = new XStream(xstreamDriver).     } else {         xstream = new XStream().     }     if (mode != null) {         xstream.setMode(getModeFromString(mode)).     }     ClassLoader xstreamLoader = xstream.getClassLoader().     if (classLoader != null && xstreamLoader instanceof CompositeClassLoader) {         ((CompositeClassLoader) xstreamLoader).add(classLoader).     }     try {         if (this.implicitCollections != null) {             for (Entry<String, String[]> entry : this.implicitCollections.entrySet()) {                 for (String name : entry.getValue()) {                     xstream.addImplicitCollection(resolver.resolveMandatoryClass(entry.getKey()), name).                 }             }         }         if (this.aliases != null) {             for (Entry<String, String> entry : this.aliases.entrySet()) {                 xstream.alias(entry.getKey(), resolver.resolveMandatoryClass(entry.getValue())).                 // It can turn the auto-detection mode off                 xstream.processAnnotations(resolver.resolveMandatoryClass(entry.getValue())).             }         }         if (this.omitFields != null) {             for (Entry<String, String[]> entry : this.omitFields.entrySet()) {                 for (String name : entry.getValue()) {                     xstream.omitField(resolver.resolveMandatoryClass(entry.getKey()), name).                 }             }         }         if (this.converters != null) {             for (String name : this.converters) {                 Class<Converter> converterClass = resolver.resolveMandatoryClass(name, Converter.class).                 Converter converter.                 Constructor<Converter> con = null.                 try {                     con = converterClass.getDeclaredConstructor(new Class[] { XStream.class }).                 } catch (Exception e) {                 // swallow as we null check in a moment.                 }                 if (con != null) {                     converter = con.newInstance(xstream).                 } else {                     converter = converterClass.newInstance().                     try {                         Method method = converterClass.getMethod("setXStream", new Class[] { XStream.class }).                         if (method != null) {                             ObjectHelper.invokeMethod(method, converter, xstream).                         }                     } catch (Throwable e) {                     // swallow, as it just means the user never add an XStream setter, which is optional                     }                 }                 xstream.registerConverter(converter).             }         }         addDefaultPermissions(xstream).         if (this.permissions != null) {             // permissions ::= pterm (',' pterm)*   # consits of one or more terms             // pterm       ::= aod? wterm           # each term preceded by an optional sign             // aod         ::= '+' | '-'            # indicates allow or deny where allow if omitted             // wterm       ::= a class name with optional wildcard characters             addPermissions(xstream, permissions).         }     } catch (Exception e) {         throw new RuntimeException("Unable to build XStream instance", e).     }     return xstream. }
false;private,static;2;33;;private static void addPermissions(XStream xstream, String permissions) {     for (String pterm : permissions.split(",")) {         boolean aod.         pterm = pterm.trim().         if (pterm.startsWith("-")) {             aod = false.             pterm = pterm.substring(1).         } else {             aod = true.             if (pterm.startsWith("+")) {                 pterm = pterm.substring(1).             }         }         TypePermission typePermission = null.         if ("*".equals(pterm)) {             // accept or deny any             typePermission = AnyTypePermission.ANY.         } else if (pterm.indexOf('*') < 0) {             // exact type             typePermission = new ExplicitTypePermission(new String[] { pterm }).         } else if (pterm.length() > 0) {             // wildcard type             typePermission = new WildcardTypePermission(new String[] { pterm }).         }         if (typePermission != null) {             if (aod) {                 xstream.addPermission(typePermission).             } else {                 xstream.denyPermission(typePermission).             }         }     } }
false;private,static;1;9;;private static void addDefaultPermissions(XStream xstream) {     XStream.setupDefaultSecurity(xstream).     String value = System.getProperty(PERMISSIONS_PROPERTY_KEY).     if (value != null) {         // using custom permissions         addPermissions(xstream, value).     } }
false;protected;1;19;;protected int getModeFromString(String modeString) {     int result.     if ("NO_REFERENCES".equalsIgnoreCase(modeString)) {         result = XStream.NO_REFERENCES.     } else if ("ID_REFERENCES".equalsIgnoreCase(modeString)) {         result = XStream.ID_REFERENCES.     } else if ("XPATH_RELATIVE_REFERENCES".equalsIgnoreCase(modeString)) {         result = XStream.XPATH_RELATIVE_REFERENCES.     } else if ("XPATH_ABSOLUTE_REFERENCES".equalsIgnoreCase(modeString)) {         result = XStream.XPATH_ABSOLUTE_REFERENCES.     } else if ("SINGLE_NODE_XPATH_RELATIVE_REFERENCES".equalsIgnoreCase(modeString)) {         result = XStream.SINGLE_NODE_XPATH_RELATIVE_REFERENCES.     } else if ("SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES".equalsIgnoreCase(modeString)) {         result = XStream.SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES.     } else {         throw new IllegalArgumentException("Unknown mode : " + modeString).     }     return result. }
false;public;0;6;;public StaxConverter getStaxConverter() {     if (staxConverter == null) {         staxConverter = new StaxConverter().     }     return staxConverter. }
false;public;1;3;;public void setStaxConverter(StaxConverter staxConverter) {     this.staxConverter = staxConverter. }
false;public;0;3;;public List<String> getConverters() {     return converters. }
false;public;1;3;;public void setConverters(List<String> converters) {     this.converters = converters. }
false;public;0;3;;public Map<String, String> getAliases() {     return aliases. }
false;public;1;3;;public void setAliases(Map<String, String> aliases) {     this.aliases = aliases. }
false;public;0;3;;public Map<String, String[]> getImplicitCollections() {     return implicitCollections. }
false;public;1;3;;public void setImplicitCollections(Map<String, String[]> implicitCollections) {     this.implicitCollections = implicitCollections. }
false;public;0;3;;public Map<String, String[]> getOmitFields() {     return omitFields. }
false;public;1;3;;public void setOmitFields(Map<String, String[]> omitFields) {     this.omitFields = omitFields. }
false;public;0;3;;public HierarchicalStreamDriver getXstreamDriver() {     return xstreamDriver. }
false;public;1;3;;public void setXstreamDriver(HierarchicalStreamDriver xstreamDriver) {     this.xstreamDriver = xstreamDriver. }
false;public;0;3;;public String getPermissions() {     return permissions. }
false;public;1;3;;public void setPermissions(String permissions) {     this.permissions = permissions. }
false;public;0;3;;public String getMode() {     return mode. }
false;public;1;3;;public void setMode(String mode) {     this.mode = mode. }
false;public;0;3;;public boolean isContentTypeHeader() {     return contentTypeHeader. }
true;public;1;3;/**  * If enabled then XStream will set the Content-Type header to <tt>application/json</tt> when marshalling to JSon  * and <tt>application/xml</tt> when marshalling to XML.  */ ;/**  * If enabled then XStream will set the Content-Type header to <tt>application/json</tt> when marshalling to JSon  * and <tt>application/xml</tt> when marshalling to XML.  */ public void setContentTypeHeader(boolean contentTypeHeader) {     this.contentTypeHeader = contentTypeHeader. }
false;public;0;3;;public XStream getXstream() {     return xstream. }
false;public;1;3;;public void setXstream(XStream xstream) {     this.xstream = xstream. }
false;public;3;8;;public void marshal(Exchange exchange, Object body, OutputStream stream) throws Exception {     HierarchicalStreamWriter writer = createHierarchicalStreamWriter(exchange, body, stream).     try {         getXStream(exchange.getContext()).marshal(body, writer).     } finally {         writer.close().     } }
false;public;2;8;;public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     HierarchicalStreamReader reader = createHierarchicalStreamReader(exchange, stream).     try {         return getXStream(exchange.getContext()).unmarshal(reader).     } finally {         reader.close().     } }
false;protected,abstract;3;2;;protected abstract HierarchicalStreamWriter createHierarchicalStreamWriter(Exchange exchange, Object body, OutputStream stream) throws XMLStreamException.
false;protected,abstract;2;2;;protected abstract HierarchicalStreamReader createHierarchicalStreamReader(Exchange exchange, InputStream stream) throws XMLStreamException.
false;protected;0;8;;@Override protected void doStart() throws Exception {     org.apache.camel.util.ObjectHelper.notNull(camelContext, "camelContext").     // initialize xstream     if (xstream == null) {         xstream = createXStream(camelContext.getClassResolver(), camelContext.getApplicationContextClassLoader()).     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
