commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void commitSync() {     commitOffset(offsetRepository, partition, recordOffset). }
false;protected;3;10;;protected void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long recordOffset) {     if (recordOffset != -1) {         if (offsetRepository != null) {             offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(recordOffset)).         } else {             LOG.debug("CommitSync {} from topic {} with offset: {}", threadId, topicName, recordOffset).             consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(recordOffset + 1))).         }     } }
false;protected;1;3;;protected String serializeOffsetKey(TopicPartition topicPartition) {     return topicPartition.topic() + '/' + topicPartition.partition(). }
false;protected;1;3;;protected String serializeOffsetValue(long offset) {     return String.valueOf(offset). }
false;public;0;3;;public KafkaConsumer getConsumer() {     return consumer. }
false;public;0;3;;public String getTopicName() {     return topicName. }
false;public;0;3;;public String getThreadId() {     return threadId. }
false;public;0;3;;public StateRepository<String, String> getOffsetRepository() {     return offsetRepository. }
false;public;0;3;;public TopicPartition getPartition() {     return partition. }
false;public;0;3;;public long getRecordOffset() {     return recordOffset. }
