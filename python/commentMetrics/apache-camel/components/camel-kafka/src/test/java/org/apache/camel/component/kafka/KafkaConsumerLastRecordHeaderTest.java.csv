# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaConsumerLastRecordHeaderTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1487693188;When consuming data with autoCommitEnable=false_Then the LAST_RECORD_BEFORE_COMMIT header must be always defined_And it should be true only for the last one;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(5)__        result.expectedBodiesReceived("message-0", "message-1", "message-2", "message-3", "message-4")___        for (int i = 0_ i < 5_ i++) {_            producer.send(new ProducerRecord<>(TOPIC, "1", "message-" + i))__        }__        result.assertIsSatisfied(3000)___        List<Exchange> exchanges = result.getExchanges()__        for (int i = 0_ i < exchanges.size()_ i++) {_            Boolean header = exchanges.get(i).getIn().getHeader(KafkaConstants.LAST_RECORD_BEFORE_COMMIT, Boolean.class)__            assertNotNull("Header not set for #" + i, header)__            assertEquals("Header invalid for #" + i, header, i == exchanges.size() - 1)__        }_    };when,consuming,data,with,auto,commit,enable,false,then,the,header,must,be,always,defined,and,it,should,be,true,only,for,the,last,one;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,5,result,expected,bodies,received,message,0,message,1,message,2,message,3,message,4,for,int,i,0,i,5,i,producer,send,new,producer,record,topic,1,message,i,result,assert,is,satisfied,3000,list,exchange,exchanges,result,get,exchanges,for,int,i,0,i,exchanges,size,i,boolean,header,exchanges,get,i,get,in,get,header,kafka,constants,boolean,class,assert,not,null,header,not,set,for,i,header,assert,equals,header,invalid,for,i,header,i,exchanges,size,1
KafkaConsumerLastRecordHeaderTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1488567788;When consuming data with autoCommitEnable=false_Then the LAST_RECORD_BEFORE_COMMIT header must be always defined_And it should be true only for the last one;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(5)__        result.expectedBodiesReceived("message-0", "message-1", "message-2", "message-3", "message-4")___        for (int i = 0_ i < 5_ i++) {_            producer.send(new ProducerRecord<>(TOPIC, "1", "message-" + i))__        }__        result.assertIsSatisfied(3000)___        List<Exchange> exchanges = result.getExchanges()__        for (int i = 0_ i < exchanges.size()_ i++) {_            Boolean header = exchanges.get(i).getIn().getHeader(KafkaConstants.LAST_RECORD_BEFORE_COMMIT, Boolean.class)__            assertNotNull("Header not set for #" + i, header)__            assertEquals("Header invalid for #" + i, header, i == exchanges.size() - 1)__        }_    };when,consuming,data,with,auto,commit,enable,false,then,the,header,must,be,always,defined,and,it,should,be,true,only,for,the,last,one;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,5,result,expected,bodies,received,message,0,message,1,message,2,message,3,message,4,for,int,i,0,i,5,i,producer,send,new,producer,record,topic,1,message,i,result,assert,is,satisfied,3000,list,exchange,exchanges,result,get,exchanges,for,int,i,0,i,exchanges,size,i,boolean,header,exchanges,get,i,get,in,get,header,kafka,constants,boolean,class,assert,not,null,header,not,set,for,i,header,assert,equals,header,invalid,for,i,header,i,exchanges,size,1
KafkaConsumerLastRecordHeaderTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1518028093;When consuming data with autoCommitEnable=false_Then the LAST_RECORD_BEFORE_COMMIT header must be always defined_And it should be true only for the last one;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(5)__        result.expectedBodiesReceived("message-0", "message-1", "message-2", "message-3", "message-4")___        for (int i = 0_ i < 5_ i++) {_            producer.send(new ProducerRecord<>(TOPIC, "1", "message-" + i))__        }__        result.assertIsSatisfied(3000)___        List<Exchange> exchanges = result.getExchanges()__        for (int i = 0_ i < exchanges.size()_ i++) {_            Boolean header = exchanges.get(i).getIn().getHeader(KafkaConstants.LAST_RECORD_BEFORE_COMMIT, Boolean.class)__            assertNotNull("Header not set for #" + i, header)__            assertEquals("Header invalid for #" + i, header, i == exchanges.size() - 1)__        }_    };when,consuming,data,with,auto,commit,enable,false,then,the,header,must,be,always,defined,and,it,should,be,true,only,for,the,last,one;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,5,result,expected,bodies,received,message,0,message,1,message,2,message,3,message,4,for,int,i,0,i,5,i,producer,send,new,producer,record,topic,1,message,i,result,assert,is,satisfied,3000,list,exchange,exchanges,result,get,exchanges,for,int,i,0,i,exchanges,size,i,boolean,header,exchanges,get,i,get,in,get,header,kafka,constants,boolean,class,assert,not,null,header,not,set,for,i,header,assert,equals,header,invalid,for,i,header,i,exchanges,size,1
