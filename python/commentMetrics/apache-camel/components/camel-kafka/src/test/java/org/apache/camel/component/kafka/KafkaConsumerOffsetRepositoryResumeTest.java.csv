# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaConsumerOffsetRepositoryResumeTest -> @Test     public void shouldResumeFromAnyParticularOffset() throws InterruptedException;1484213261;Given an offset repository with values_When consuming with this repository_Then we're consuming from the saved offsets;@Test_    public void shouldResumeFromAnyParticularOffset() throws InterruptedException {_        result.expectedMessageCount(3)__        result.expectedBodiesReceivedInAnyOrder("message-6", "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,offset,repository,with,values,when,consuming,with,this,repository,then,we,re,consuming,from,the,saved,offsets;test,public,void,should,resume,from,any,particular,offset,throws,interrupted,exception,result,expected,message,count,3,result,expected,bodies,received,in,any,order,message,6,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryResumeTest -> @Test     public void shouldResumeFromAnyParticularOffset() throws InterruptedException;1487152737;Given an offset repository with values_When consuming with this repository_Then we're consuming from the saved offsets;@Test_    public void shouldResumeFromAnyParticularOffset() throws InterruptedException {_        result.expectedMessageCount(3)__        result.expectedBodiesReceivedInAnyOrder("message-6", "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,offset,repository,with,values,when,consuming,with,this,repository,then,we,re,consuming,from,the,saved,offsets;test,public,void,should,resume,from,any,particular,offset,throws,interrupted,exception,result,expected,message,count,3,result,expected,bodies,received,in,any,order,message,6,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryResumeTest -> @Test     public void shouldResumeFromAnyParticularOffset() throws InterruptedException;1487153800;Given an offset repository with values_When consuming with this repository_Then we're consuming from the saved offsets;@Test_    public void shouldResumeFromAnyParticularOffset() throws InterruptedException {_        result.expectedMessageCount(3)__        result.expectedBodiesReceivedInAnyOrder("message-6", "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,offset,repository,with,values,when,consuming,with,this,repository,then,we,re,consuming,from,the,saved,offsets;test,public,void,should,resume,from,any,particular,offset,throws,interrupted,exception,result,expected,message,count,3,result,expected,bodies,received,in,any,order,message,6,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryResumeTest -> @Test     public void shouldResumeFromAnyParticularOffset() throws InterruptedException;1488567788;Given an offset repository with values_When consuming with this repository_Then we're consuming from the saved offsets;@Test_    public void shouldResumeFromAnyParticularOffset() throws InterruptedException {_        result.expectedMessageCount(3)__        result.expectedBodiesReceivedInAnyOrder("message-6", "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,offset,repository,with,values,when,consuming,with,this,repository,then,we,re,consuming,from,the,saved,offsets;test,public,void,should,resume,from,any,particular,offset,throws,interrupted,exception,result,expected,message,count,3,result,expected,bodies,received,in,any,order,message,6,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryResumeTest -> @Test     public void shouldResumeFromAnyParticularOffset() throws InterruptedException;1488567788;Given an offset repository with values_When consuming with this repository_Then we're consuming from the saved offsets;@Test_    public void shouldResumeFromAnyParticularOffset() throws InterruptedException {_        result.expectedMessageCount(3)__        result.expectedBodiesReceivedInAnyOrder("message-6", "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,offset,repository,with,values,when,consuming,with,this,repository,then,we,re,consuming,from,the,saved,offsets;test,public,void,should,resume,from,any,particular,offset,throws,interrupted,exception,result,expected,message,count,3,result,expected,bodies,received,in,any,order,message,6,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
