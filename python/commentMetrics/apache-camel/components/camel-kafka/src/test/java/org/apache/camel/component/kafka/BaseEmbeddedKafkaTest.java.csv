commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void beforeClass() {     LOG.info("### Embedded Zookeeper connection: " + zookeeper.getConnection()).     LOG.info("### Embedded Kafka cluster broker list: " + kafkaBroker.getBrokerList()). }
false;protected;0;10;;protected Properties getDefaultProperties() {     Properties props = new Properties().     LOG.info("Connecting to Kafka port {}", kafkaBroker.getPort()).     props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBroker.getBrokerList()).     props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_SERIALIZER).     props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_SERIALIZER).     props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_PARTITIONER).     props.put(ProducerConfig.ACKS_CONFIG, "1").     return props. }
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     Properties prop = new Properties().     prop.setProperty("zookeeperPort", "" + getZookeeperPort()).     prop.setProperty("kafkaPort", "" + getKafkaPort()).     jndi.bind("prop", prop).     return jndi. }
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("ref:prop")).     KafkaComponent kafka = new KafkaComponent(context).     kafka.setBrokers("localhost:" + getKafkaPort()).     context.addComponent("kafka", kafka).     return context. }
false;protected,static;0;3;;protected static int getZookeeperPort() {     return zookeeper.getPort(). }
false;protected,static;0;3;;protected static int getKafkaPort() {     return kafkaBroker.getPort(). }
