commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     kafkaIdempotentRepository = new KafkaIdempotentRepository("TEST_IDEM", kafkaBroker.getBrokerList()).     jndi.bind("kafkaIdempotentRepository", kafkaIdempotentRepository).     return jndi. }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:in").to("mock:before").idempotentConsumer(header("id")).messageIdRepositoryRef("kafkaIdempotentRepository").to("mock:out").end(). }
false;protected;0;13;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").to("mock:before").idempotentConsumer(header("id")).messageIdRepositoryRef("kafkaIdempotentRepository").to("mock:out").end().         }     }. }
false;public;0;11;;@Test public void testRemovesDuplicates() throws InterruptedException {     for (int i = 0. i < 10. i++) {         template.sendBodyAndHeader("direct:in", "Test message", "id", i % 5).     }     assertEquals(5, kafkaIdempotentRepository.getDuplicateCount()).     assertEquals(5, mockOut.getReceivedCounter()).     assertEquals(10, mockBefore.getReceivedCounter()). }
false;public;0;22;;@Test public void testRollsBackOnException() throws InterruptedException {     mockOut.whenAnyExchangeReceived(exchange -> {         int id = exchange.getIn().getHeader("id", Integer.class).         if (id == 0) {             throw new IllegalArgumentException("Boom!").         }     }).     for (int i = 0. i < 10. i++) {         try {             template.sendBodyAndHeader("direct:in", "Test message", "id", i % 5).         } catch (CamelExecutionException cex) {         // no-op. expected         }     }     // id{0} is not a duplicate     assertEquals(4, kafkaIdempotentRepository.getDuplicateCount()).     // id{0} goes through the idempotency check twice     assertEquals(6, mockOut.getReceivedCounter()).     assertEquals(10, mockBefore.getReceivedCounter()). }
