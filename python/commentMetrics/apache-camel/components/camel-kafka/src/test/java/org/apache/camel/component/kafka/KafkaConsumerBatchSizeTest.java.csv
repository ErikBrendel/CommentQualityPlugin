commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void before() {     Properties props = getDefaultProperties().     producer = new org.apache.kafka.clients.producer.KafkaProducer<>(props). }
false;public;0;6;;@After public void after() {     if (producer != null) {         producer.close().     } }
false;public;0;4;;@Override public void configure() throws Exception {     from(from).routeId("foo").to(to).setId("First"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(from).routeId("foo").to(to).setId("First").         }     }. }
false;public;0;29;;@Test public void kafkaMessagesIsConsumedByCamel() throws Exception {     // First 2 must not be committed since batch size is 3     to.expectedBodiesReceivedInAnyOrder("m1", "m2").     for (int k = 1. k <= 2. k++) {         String msg = "m" + k.         ProducerRecord<String, String> data = new ProducerRecord<>(TOPIC, "1", msg).         producer.send(data).     }     to.assertIsSatisfied().     to.reset().     to.expectedBodiesReceivedInAnyOrder("m3", "m4", "m5", "m6", "m7", "m8", "m9", "m10").     // Restart endpoint,     context.getRouteController().stopRoute("foo").     context.getRouteController().startRoute("foo").     // Second route must wake up and consume all from scratch and commit 9 consumed     for (int k = 3. k <= 10. k++) {         String msg = "m" + k.         ProducerRecord<String, String> data = new ProducerRecord<>(TOPIC, "1", msg).         producer.send(data).     }     to.assertIsSatisfied(). }
