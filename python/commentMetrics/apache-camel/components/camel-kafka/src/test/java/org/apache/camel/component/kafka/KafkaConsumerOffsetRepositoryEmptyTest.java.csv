# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaConsumerOffsetRepositoryEmptyTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1484213261;Given an empty offset repository_When consuming with this repository_Then we consume according to the {@code autoOffsetReset} setting;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(10)__        result.expectedBodiesReceivedInAnyOrder("message-0", "message-1", "message-2", "message-3", "message-4", "message-5", "message-6", "message-7",_                                                "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,empty,offset,repository,when,consuming,with,this,repository,then,we,consume,according,to,the,code,auto,offset,reset,setting;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,10,result,expected,bodies,received,in,any,order,message,0,message,1,message,2,message,3,message,4,message,5,message,6,message,7,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryEmptyTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1487152737;Given an empty offset repository_When consuming with this repository_Then we consume according to the {@code autoOffsetReset} setting;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(10)__        result.expectedBodiesReceivedInAnyOrder("message-0", "message-1", "message-2", "message-3", "message-4", "message-5", "message-6", "message-7",_                                                "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,empty,offset,repository,when,consuming,with,this,repository,then,we,consume,according,to,the,code,auto,offset,reset,setting;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,10,result,expected,bodies,received,in,any,order,message,0,message,1,message,2,message,3,message,4,message,5,message,6,message,7,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryEmptyTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1487153800;Given an empty offset repository_When consuming with this repository_Then we consume according to the {@code autoOffsetReset} setting;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(10)__        result.expectedBodiesReceivedInAnyOrder("message-0", "message-1", "message-2", "message-3", "message-4", "message-5", "message-6", "message-7",_                                                "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,empty,offset,repository,when,consuming,with,this,repository,then,we,consume,according,to,the,code,auto,offset,reset,setting;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,10,result,expected,bodies,received,in,any,order,message,0,message,1,message,2,message,3,message,4,message,5,message,6,message,7,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryEmptyTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1488567788;Given an empty offset repository_When consuming with this repository_Then we consume according to the {@code autoOffsetReset} setting;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(10)__        result.expectedBodiesReceivedInAnyOrder("message-0", "message-1", "message-2", "message-3", "message-4", "message-5", "message-6", "message-7",_                                                "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,empty,offset,repository,when,consuming,with,this,repository,then,we,consume,according,to,the,code,auto,offset,reset,setting;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,10,result,expected,bodies,received,in,any,order,message,0,message,1,message,2,message,3,message,4,message,5,message,6,message,7,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
KafkaConsumerOffsetRepositoryEmptyTest -> @Test     public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException;1488567788;Given an empty offset repository_When consuming with this repository_Then we consume according to the {@code autoOffsetReset} setting;@Test_    public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {_        result.expectedMessageCount(10)__        result.expectedBodiesReceivedInAnyOrder("message-0", "message-1", "message-2", "message-3", "message-4", "message-5", "message-6", "message-7",_                                                "message-8", "message-9")___        result.assertIsSatisfied(3000)___        assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0"))__        assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1"))__    };given,an,empty,offset,repository,when,consuming,with,this,repository,then,we,consume,according,to,the,code,auto,offset,reset,setting;test,public,void,should,start,from,beginning,with,empty,offset,repository,throws,interrupted,exception,result,expected,message,count,10,result,expected,bodies,received,in,any,order,message,0,message,1,message,2,message,3,message,4,message,5,message,6,message,7,message,8,message,9,result,assert,is,satisfied,3000,assert,equals,partition,0,4,state,repository,get,state,topic,0,assert,equals,partition,1,4,state,repository,get,state,topic,1
