commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;13;// FIXME lifecycle issue here ;// FIXME lifecycle issue here @Override protected void doPreSetup() throws Exception {     // Create the topic with 2 partitions + send 10 messages (5 in each partitions)     kafkaBroker.createTopic(TOPIC, 2).     Properties props = getDefaultProperties().     producer = new org.apache.kafka.clients.producer.KafkaProducer<>(props).     for (int i = 0. i < 10. i++) {         producer.send(new ProducerRecord<>(TOPIC, i % 2, "key", "message-" + i)).     }     stateRepository = new MemoryStateRepository(). }
false;public;0;7;;@After public void after() {     if (producer != null) {         producer.close().     }     stateRepository = null. }
true;public;0;11;/**  * Given an empty offset repository  * When consuming with this repository  * Then we consume according to the {@code autoOffsetReset} setting  */ ;/**  * Given an empty offset repository  * When consuming with this repository  * Then we consume according to the {@code autoOffsetReset} setting  */ @Test public void shouldStartFromBeginningWithEmptyOffsetRepository() throws InterruptedException {     result.expectedMessageCount(10).     result.expectedBodiesReceivedInAnyOrder("message-0", "message-1", "message-2", "message-3", "message-4", "message-5", "message-6", "message-7", "message-8", "message-9").     result.assertIsSatisfied(3000).     assertEquals("partition-0", "4", stateRepository.getState(TOPIC + "/0")).     assertEquals("partition-1", "4", stateRepository.getState(TOPIC + "/1")). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("offset", stateRepository).     return registry. }
false;public;0;9;;@Override public void configure() throws Exception {     from("kafka:" + TOPIC + "?groupId=A" + // Ask to start from the beginning if we have unknown offset     "&autoOffsetReset=earliest" + // We have 2 partitions, we want 1 consumer per partition     "&consumersCount=2" + // Keep the offset in our repository     "&offsetRepository=#offset").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("kafka:" + TOPIC + "?groupId=A" + // Ask to start from the beginning if we have unknown offset             "&autoOffsetReset=earliest" + // We have 2 partitions, we want 1 consumer per partition             "&consumersCount=2" + // Keep the offset in our repository             "&offsetRepository=#offset").to("mock:result").         }     }. }
