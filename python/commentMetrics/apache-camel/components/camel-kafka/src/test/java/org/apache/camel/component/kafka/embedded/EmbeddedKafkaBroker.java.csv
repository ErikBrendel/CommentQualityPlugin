commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ZkUtils getZkUtils() {     return zkUtils. }
false;public;2;3;;public void createTopic(String topic, int partitionCount) {     AdminUtils.createTopic(getZkUtils(), topic, partitionCount, 1, new Properties(), RackAwareMode.Enforced$.MODULE$). }
false;public;0;18;;public void before() {     logDir = constructTempDir(perTest("kafka-log")).     Properties properties = new Properties().     properties.putAll(baseProperties).     properties.setProperty("zookeeper.connect", zkConnection).     properties.setProperty("broker.id", brokerId.toString()).     properties.setProperty("host.name", "localhost").     properties.setProperty("port", Integer.toString(port)).     properties.setProperty("log.dir", logDir.getAbsolutePath()).     properties.setProperty("num.partitions", String.valueOf(1)).     properties.setProperty("auto.create.topics.enable", String.valueOf(Boolean.TRUE)).     log.info("log directory: " + logDir.getAbsolutePath()).     properties.setProperty("log.flush.interval.messages", String.valueOf(1)).     properties.setProperty("offsets.topic.replication.factor", String.valueOf(1)).     kafkaServer = startBroker(properties). }
false;private;1;12;;private KafkaServer startBroker(Properties props) {     zkUtils = ZkUtils.apply(zkConnection, 30000, 30000, false).     List<KafkaMetricsReporter> kmrList = new ArrayList<>().     Buffer<KafkaMetricsReporter> metricsList = scala.collection.JavaConversions.asScalaBuffer(kmrList).     KafkaServer server = new KafkaServer(new KafkaConfig(props), new SystemTime(), Option.<String>empty(), metricsList).     server.startup().     return server. }
false;public;0;3;;public String getBrokerList() {     return brokerList. }
false;public;0;3;;public Integer getPort() {     return port. }
false;public;0;8;;public void after() {     kafkaServer.shutdown().     try {         TestUtils.deleteFile(logDir).     } catch (FileNotFoundException e) {         log.info("Could not delete {} - not found", logDir.getAbsolutePath()).     } }
false;public;0;7;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("EmbeddedKafkaBroker{").     sb.append("brokerList='").append(brokerList).append('\'').     sb.append('}').     return sb.toString(). }
