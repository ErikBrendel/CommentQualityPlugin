commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public XChangeComponent getComponent() {     return (XChangeComponent) super.getComponent(). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException(). }
false;public;0;17;;@Override public Producer createProducer() throws Exception {     Producer producer = null.     XChangeService service = getConfiguration().getService().     if (XChangeService.account == service) {         producer = new XChangeAccountProducer(this).     } else if (XChangeService.marketdata == service) {         producer = new XChangeMarketDataProducer(this).     } else if (XChangeService.metadata == service) {         producer = new XChangeMetaDataProducer(this).     }     Assert.notNull(producer, "Unsupported service: " + service).     return producer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public XChangeConfiguration getConfiguration() {     return configuration. }
false;public;0;4;;public List<Currency> getCurrencies() {     ExchangeMetaData metaData = exchange.getExchangeMetaData().     return metaData.getCurrencies().keySet().stream().sorted().collect(Collectors.toList()). }
false;public;1;5;;public CurrencyMetaData getCurrencyMetaData(Currency curr) {     Assert.notNull(curr, "Null currency").     ExchangeMetaData metaData = exchange.getExchangeMetaData().     return metaData.getCurrencies().get(curr). }
false;public;0;4;;public List<CurrencyPair> getCurrencyPairs() {     ExchangeMetaData metaData = exchange.getExchangeMetaData().     return metaData.getCurrencyPairs().keySet().stream().sorted().collect(Collectors.toList()). }
false;public;1;5;;public CurrencyPairMetaData getCurrencyPairMetaData(CurrencyPair pair) {     Assert.notNull(pair, "Null currency").     ExchangeMetaData metaData = exchange.getExchangeMetaData().     return metaData.getCurrencyPairs().get(pair). }
false;public;2;3;;public int compare(Balance o1, Balance o2) {     return o1.getCurrency().compareTo(o2.getCurrency()). }
false;public;0;22;;public List<Balance> getBalances() throws IOException {     List<Balance> balances = new ArrayList<>().     getWallets().stream().forEach(w -> {         for (Balance aux : w.getBalances().values()) {             Currency curr = aux.getCurrency().             CurrencyMetaData metaData = getCurrencyMetaData(curr).             if (metaData != null) {                 int scale = metaData.getScale().                 double total = aux.getTotal().doubleValue().                 double scaledTotal = total * Math.pow(10, scale / 2).                 if (1 <= scaledTotal) {                     balances.add(aux).                 }             }         }     }).     return balances.stream().sorted(new Comparator<Balance>() {          public int compare(Balance o1, Balance o2) {             return o1.getCurrency().compareTo(o2.getCurrency()).         }     }).collect(Collectors.toList()). }
false;public;2;3;;public int compare(FundingRecord o1, FundingRecord o2) {     return o1.getDate().compareTo(o2.getDate()). }
false;public;0;9;;public List<FundingRecord> getFundingHistory() throws IOException {     AccountService accountService = exchange.getAccountService().     TradeHistoryParams fundingHistoryParams = accountService.createFundingHistoryParams().     return accountService.getFundingHistory(fundingHistoryParams).stream().sorted(new Comparator<FundingRecord>() {          public int compare(FundingRecord o1, FundingRecord o2) {             return o1.getDate().compareTo(o2.getDate()).         }     }).collect(Collectors.toList()). }
false;public;2;3;;public int compare(Wallet o1, Wallet o2) {     return o1.getName().compareTo(o2.getName()). }
false;public;0;9;;public List<Wallet> getWallets() throws IOException {     AccountService accountService = exchange.getAccountService().     AccountInfo accountInfo = accountService.getAccountInfo().     return accountInfo.getWallets().values().stream().sorted(new Comparator<Wallet>() {          public int compare(Wallet o1, Wallet o2) {             return o1.getName().compareTo(o2.getName()).         }     }).collect(Collectors.toList()). }
false;public;1;5;;public Ticker getTicker(CurrencyPair pair) throws IOException {     Assert.notNull(pair, "Null currency pair").     MarketDataService marketService = exchange.getMarketDataService().     return marketService.getTicker(pair). }
