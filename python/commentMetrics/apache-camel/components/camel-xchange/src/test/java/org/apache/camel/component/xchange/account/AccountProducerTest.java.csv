commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:balances").to("xchange:binance?service=account&method=balances").     from("direct:wallets").to("xchange:binance?service=account&method=wallets").     from("direct:fundingHistory").to("xchange:binance?service=account&method=fundingHistory"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:balances").to("xchange:binance?service=account&method=balances").             from("direct:wallets").to("xchange:binance?service=account&method=wallets").             from("direct:fundingHistory").to("xchange:binance?service=account&method=fundingHistory").         }     }. }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void testBalances() throws Exception {     Assume.assumeTrue(hasAPICredentials()).     List<Balance> balances = template.requestBody("direct:balances", null, List.class).     Assert.assertNotNull("Balances not null", balances). }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void testWallets() throws Exception {     Assume.assumeTrue(hasAPICredentials()).     List<Wallet> wallets = template.requestBody("direct:wallets", null, List.class).     Assert.assertNotNull("Wallets not null", wallets). }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void testFundingHistory() throws Exception {     Assume.assumeTrue(hasAPICredentials()).     List<FundingRecord> records = template.requestBody("direct:fundingHistory", null, List.class).     Assert.assertNotNull("Funding records not null", records). }
false;private;0;4;;private boolean hasAPICredentials() {     XChangeComponent component = context().getComponent("xchange", XChangeComponent.class).     return component.getXChange().getExchangeSpecification().getApiKey() != null. }
