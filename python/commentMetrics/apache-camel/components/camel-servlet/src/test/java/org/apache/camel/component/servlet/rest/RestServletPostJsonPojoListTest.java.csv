commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testPostJaxbPojo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(1).     String body = "[ {\"id\": 123, \"name\": \"Donald Duck\"}, {\"id\": 456, \"name\": \"John Doe\"} ]".     WebRequest req = new PostMethodWebRequest(CONTEXT_URL + "/services/users/new", new ByteArrayInputStream(body.getBytes()), "application/json").     ServletUnitClient client = newClient().     client.setExceptionsThrownOnErrorStatus(false).     WebResponse response = client.getResponse(req).     assertEquals(200, response.getResponseCode()).     assertEquals("application/json", response.getContentType()).     assertMockEndpointsSatisfied().     List list = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     assertNotNull(list).     assertEquals(2, list.size()).     UserPojo user = (UserPojo) list.get(0).     assertEquals(123, user.getId()).     assertEquals("Donald Duck", user.getName()).     user = (UserPojo) list.get(1).     assertEquals(456, user.getId()).     assertEquals("John Doe", user.getName()). }
false;public;0;9;;@Override public void configure() throws Exception {     restConfiguration().component("servlet").bindingMode(RestBindingMode.auto).     // use the rest DSL to define the rest services     rest("/users/").post("new").type(UserPojo[].class).to("mock:input"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("servlet").bindingMode(RestBindingMode.auto).             // use the rest DSL to define the rest services             rest("/users/").post("new").type(UserPojo[].class).to("mock:input").         }     }. }
