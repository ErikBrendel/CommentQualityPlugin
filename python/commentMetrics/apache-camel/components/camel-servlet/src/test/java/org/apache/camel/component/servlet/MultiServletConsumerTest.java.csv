commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getConfiguration() {     return "/org/apache/camel/component/servlet/multiServletWeb.xml". }
false;public;0;8;;@Test public void testMultiServletsConsumers() throws Exception {     String result = getService("/services1/hello?name=Camel").     assertEquals("Hello Camel", result).     result = getService("/services2/echo?name=Camel").     assertEquals("Camel Camel", result). }
false;public;0;16;;@Test public void testMultiServletsConsumersCannotAccessEachOther() throws Exception {     try {         getService("/services2/hello?name=Camel").         fail("Should have thrown an exception").     } catch (HttpNotFoundException e) {         assertEquals(404, e.getResponseCode()).     }     try {         getService("/services1/echo?name=Camel").         fail("Should have thrown an exception").     } catch (HttpNotFoundException e) {         assertEquals(404, e.getResponseCode()).     } }
false;public;1;7;;public String getService(String path) throws Exception {     WebRequest req = new GetMethodWebRequest(CONTEXT_URL + path).     ServletUnitClient client = newClient().     WebResponse response = client.getResponse(req).     return response.getText(). }
false;public;0;5;;public void configure() {     from("servlet:/hello?servletName=CamelServlet1").transform(simple("Hello ${header.name}")).     from("servlet:/echo?servletName=CamelServlet2").transform(simple("${header.name} ${header.name}")). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("servlet:/hello?servletName=CamelServlet1").transform(simple("Hello ${header.name}")).             from("servlet:/echo?servletName=CamelServlet2").transform(simple("${header.name} ${header.name}")).         }     }. }
