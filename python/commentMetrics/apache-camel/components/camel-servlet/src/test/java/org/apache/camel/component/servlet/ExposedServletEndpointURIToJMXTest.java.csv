commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;6;;@Test public void exposedEndpointURIShouldContainContextAndOptions() throws Exception {     checkServletEndpointURI("\"servlet:/test1\\?matchOnUriPrefix=true\"").     checkServletEndpointURI("\"servlet:/test2\\?servletName=test2\"").     checkServletEndpointURI("\"servlet:/test3\\?matchOnUriPrefix=true&servletName=test3\""). }
false;private;1;7;;private void checkServletEndpointURI(String servletEndpointURI) throws Exception {     MBeanServer mbeanServer = context.getManagementStrategy().getManagementAgent().getMBeanServer().     ObjectName name = new ObjectName("org.apache.camel:context=camel-1,type=endpoints,name=" + servletEndpointURI).     Set<ObjectName> objectNamesSet = mbeanServer.queryNames(name, null).     assertEquals("Expect one MBean for the servlet endpoint", 1, objectNamesSet.size()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("servlet:test1?matchOnUriPrefix=true").to("mock:jmx").     from("servlet:test2?servletName=test2").to("mock:jmx").     from("servlet:test3?matchOnUriPrefix=true&servletName=test3").to("mock:jmx"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("servlet:test1?matchOnUriPrefix=true").to("mock:jmx").             from("servlet:test2?servletName=test2").to("mock:jmx").             from("servlet:test3?matchOnUriPrefix=true&servletName=test3").to("mock:jmx").         }     }. }
