commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testBindingMode() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(UserJaxbPojo.class).     String body = "<user name=\"Donald Duck\" id=\"123\"></user>".     WebRequest req = new PostMethodWebRequest(CONTEXT_URL + "/services/users/new", new ByteArrayInputStream(body.getBytes()), "application/xml").     ServletUnitClient client = newClient().     client.setExceptionsThrownOnErrorStatus(false).     WebResponse response = client.getResponse(req).     assertEquals(200, response.getResponseCode()).     assertMockEndpointsSatisfied().     UserJaxbPojo user = mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class).     assertNotNull(user).     assertEquals(123, user.getId()).     assertEquals("Donald Duck", user.getName()). }
false;public;0;16;;@Test public void testBindingModeWrong() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(0).     // we bind to xml, but send in json, which is not possible     String body = "{\"id\": 123, \"name\": \"Donald Duck\"}".     WebRequest req = new PostMethodWebRequest(CONTEXT_URL + "/services/users/new", new ByteArrayInputStream(body.getBytes()), "application/json").     ServletUnitClient client = newClient().     client.setExceptionsThrownOnErrorStatus(false).     WebResponse response = client.getResponse(req).     assertEquals(500, response.getResponseCode()).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     restConfiguration().component("servlet").bindingMode(RestBindingMode.xml).     // use the rest DSL to define the rest services     rest("/users/").post("new").type(UserJaxbPojo.class).to("mock:input"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("servlet").bindingMode(RestBindingMode.xml).             // use the rest DSL to define the rest services             rest("/users/").post("new").type(UserJaxbPojo.class).to("mock:input").         }     }. }
