commented;modifiers;parameterAmount;loc;comment;code
false;public;1;40;;@Override public void init(ServletConfig config) throws ServletException {     super.init(config).     // use rest enabled resolver in case we use rest     this.setServletResolveConsumerStrategy(new HttpRestServletResolveConsumerStrategy()).     String ignore = config.getInitParameter("ignoreDuplicateServletName").     Boolean bool = ObjectConverter.toBoolean(ignore).     if (bool != null) {         ignoreDuplicateServletName = bool.     } else {         // always log so people can see it easier         String msg = "Invalid parameter value for init-parameter ignoreDuplicateServletName with value: " + ignore.         LOG.error(msg).         throw new ServletException(msg).     }     String name = config.getServletName().     String contextPath = config.getServletContext().getContextPath().     if (httpRegistry == null) {         httpRegistry = DefaultHttpRegistry.getHttpRegistry(name).         CamelServlet existing = httpRegistry.getCamelServlet(name).         if (existing != null) {             String msg = "Duplicate ServletName detected: " + name + ". Existing: " + existing + " This: " + this.toString() + ". Its advised to use unique ServletName per Camel application.".             // always log so people can see it easier             if (isIgnoreDuplicateServletName()) {                 LOG.warn(msg).             } else {                 LOG.error(msg).                 throw new ServletException(msg).             }         }         httpRegistry.register(this).     }     LOG.info("Initialized CamelHttpTransportServlet[name={}, contextPath={}]", getServletName(), contextPath). }
false;public;0;9;;@Override public void destroy() {     DefaultHttpRegistry.removeHttpRegistry(getServletName()).     if (httpRegistry != null) {         httpRegistry.unregister(this).         httpRegistry = null.     }     LOG.info("Destroyed CamelHttpTransportServlet[{}]", getServletName()). }
false;private;1;7;;private ServletEndpoint getServletEndpoint(HttpConsumer consumer) {     if (!(consumer.getEndpoint() instanceof ServletEndpoint)) {         throw new RuntimeException("Invalid consumer type. Must be ServletEndpoint but is " + consumer.getClass().getName()).     }     return (ServletEndpoint) consumer.getEndpoint(). }
false;public;1;7;;@Override public void connect(HttpConsumer consumer) {     ServletEndpoint endpoint = getServletEndpoint(consumer).     if (endpoint.getServletName() != null && endpoint.getServletName().equals(getServletName())) {         super.connect(consumer).     } }
false;public;0;3;;public boolean isIgnoreDuplicateServletName() {     return ignoreDuplicateServletName. }
false;public;0;9;;@Override public String toString() {     String name = getServletName().     if (name != null) {         return "CamelHttpTransportServlet[name=" + getServletName() + "]".     } else {         return "CamelHttpTransportServlet".     } }
