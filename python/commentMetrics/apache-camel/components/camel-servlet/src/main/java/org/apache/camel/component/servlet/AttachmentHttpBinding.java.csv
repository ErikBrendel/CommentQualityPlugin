commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;36;;@Override protected void populateAttachments(HttpServletRequest request, HttpMessage message) {     try {         Collection<Part> parts = request.getParts().         for (Part part : parts) {             String fileName = part.getName().             // is the file name accepted             boolean accepted = true.             if (getFileNameExtWhitelist() != null) {                 String ext = FileUtil.onlyExt(fileName).                 if (ext != null) {                     ext = ext.toLowerCase(Locale.US).                     String whiteList = getFileNameExtWhitelist().toLowerCase(Locale.US).                     if (!whiteList.equals("*") && !whiteList.contains(ext)) {                         accepted = false.                     }                 }             }             if (accepted) {                 DataSource ds = new PartDataSource(part).                 Attachment attachment = new DefaultAttachment(ds).                 for (String headerName : part.getHeaderNames()) {                     for (String headerValue : part.getHeaders(headerName)) {                         attachment.addHeader(headerName, headerValue).                     }                 }                 message.addAttachmentObject(part.getName(), attachment).             } else {                 LOG.debug("Cannot add file as attachment: {} because the file is not accepted according to fileNameExtWhitelist: {}", fileName, getFileNameExtWhitelist()).             }         }     } catch (Exception e) {         throw new RuntimeCamelException("Cannot populate attachments", e).     } }
false;public;0;3;;public String getSubmittedFileName() {     return part.getSubmittedFileName(). }
false;public;0;4;;@Override public OutputStream getOutputStream() throws IOException {     return null. }
false;public;0;4;;@Override public String getName() {     return part.getName(). }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return part.getInputStream(). }
false;public;0;4;;@Override public String getContentType() {     return part.getContentType(). }
