commented;modifiers;parameterAmount;loc;comment;code
true;public,static,synchronized;1;8;/**  * Lookup or create a new registry if none exists with the given name  */ ;/**  * Lookup or create a new registry if none exists with the given name  */ public static synchronized HttpRegistry getHttpRegistry(String name) {     HttpRegistry answer = registries.get(name).     if (answer == null) {         answer = new DefaultHttpRegistry().         registries.put(name, answer).     }     return answer. }
true;public,static,synchronized;1;3;/**  * Removes the http registry with the given name  */ ;/**  * Removes the http registry with the given name  */ public static synchronized void removeHttpRegistry(String name) {     registries.remove(name). }
false;public;1;10;;@Override public void register(HttpConsumer consumer) {     if (LOG.isDebugEnabled()) {         LOG.debug("Registering consumer for path {} providers present: {}", consumer.getPath(), providers.size()).     }     consumers.add(consumer).     for (CamelServlet provider : providers) {         provider.connect(consumer).     } }
false;public;1;10;;@Override public void unregister(HttpConsumer consumer) {     if (LOG.isDebugEnabled()) {         LOG.debug("Unregistering consumer for path {}", consumer.getPath()).     }     consumers.remove(consumer).     for (CamelServlet provider : providers) {         provider.disconnect(consumer).     } }
false;public;2;6;;@SuppressWarnings("rawtypes") public void register(CamelServlet provider, Map properties) {     CamelServlet camelServlet = provider.     camelServlet.setServletName((String) properties.get("servlet-name")).     register(camelServlet). }
false;public;2;3;;public void unregister(CamelServlet provider, Map<String, Object> properties) {     unregister(provider). }
false;public;1;10;;@Override public void register(CamelServlet provider) {     if (LOG.isDebugEnabled()) {         LOG.debug("Registering CamelServlet with name {} consumers present: {}", provider.getServletName(), consumers.size()).     }     providers.add(provider).     for (HttpConsumer consumer : consumers) {         provider.connect(consumer).     } }
false;public;1;7;;@Override public void unregister(CamelServlet provider) {     if (LOG.isDebugEnabled()) {         LOG.debug("Unregistering CamelServlet with name {}", provider.getServletName()).     }     providers.remove(provider). }
false;public;1;9;;@Override public CamelServlet getCamelServlet(String servletName) {     for (CamelServlet provider : providers) {         if (provider.getServletName().equals(servletName)) {             return provider.         }     }     return null. }
false;public;1;8;;public void setServlets(List<Servlet> servlets) {     providers.clear().     for (Servlet servlet : servlets) {         if (servlet instanceof CamelServlet) {             providers.add((CamelServlet) servlet).         }     } }
