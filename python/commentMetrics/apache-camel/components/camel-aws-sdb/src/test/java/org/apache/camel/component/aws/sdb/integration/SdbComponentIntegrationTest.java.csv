commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.BatchDeleteAttributes).     exchange.getIn().setHeader(SdbConstants.DELETABLE_ITEMS, deletableItems). }
false;public;0;13;;@Test public void batchDeleteAttributes() {     final List<DeletableItem> deletableItems = Arrays.asList(new DeletableItem[] { new DeletableItem("ITEM1", null), new DeletableItem("ITEM2", null) }).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.BatchDeleteAttributes).             exchange.getIn().setHeader(SdbConstants.DELETABLE_ITEMS, deletableItems).         }     }). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.BatchPutAttributes).     exchange.getIn().setHeader(SdbConstants.REPLACEABLE_ITEMS, replaceableItems). }
false;public;0;12;;@Test public void batchPutAttributes() {     final List<ReplaceableItem> replaceableItems = Arrays.asList(new ReplaceableItem[] { new ReplaceableItem("ITEM1") }).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.BatchPutAttributes).             exchange.getIn().setHeader(SdbConstants.REPLACEABLE_ITEMS, replaceableItems).         }     }). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.DeleteAttributes).     exchange.getIn().setHeader(SdbConstants.ATTRIBUTES, attributes).     exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").     exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, condition). }
false;public;0;15;;@Test public void deleteAttributes() {     final List<Attribute> attributes = Arrays.asList(new Attribute[] { new Attribute("NAME1", "VALUE1") }).     final UpdateCondition condition = new UpdateCondition("Key1", "Value1", true).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.DeleteAttributes).             exchange.getIn().setHeader(SdbConstants.ATTRIBUTES, attributes).             exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").             exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, condition).         }     }). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.DeleteDomain). }
false;public;0;8;;@Test public void deleteDomain() {     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.DeleteDomain).         }     }). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.DomainMetadata). }
false;public;0;16;;@Test public void domainMetadata() {     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.DomainMetadata).         }     }).     assertNotNull(exchange.getIn().getHeader(SdbConstants.TIMESTAMP)).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ITEM_COUNT)).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ATTRIBUTE_NAME_COUNT)).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ATTRIBUTE_VALUE_COUNT)).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ATTRIBUTE_NAME_SIZE)).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ATTRIBUTE_VALUE_SIZE)).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ITEM_NAME_SIZE)). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.GetAttributes).     exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").     exchange.getIn().setHeader(SdbConstants.CONSISTENT_READ, Boolean.TRUE).     exchange.getIn().setHeader(SdbConstants.ATTRIBUTE_NAMES, attributeNames). }
false;public;0;15;;@Test public void getAttributes() {     final List<String> attributeNames = Arrays.asList(new String[] { "ATTRIBUTE1" }).     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.GetAttributes).             exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").             exchange.getIn().setHeader(SdbConstants.CONSISTENT_READ, Boolean.TRUE).             exchange.getIn().setHeader(SdbConstants.ATTRIBUTE_NAMES, attributeNames).         }     }).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ATTRIBUTES, List.class)). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.ListDomains).     exchange.getIn().setHeader(SdbConstants.MAX_NUMBER_OF_DOMAINS, new Integer(5)).     exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN, "TOKEN1"). }
false;public;0;12;;@Test public void listDomains() {     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.ListDomains).             exchange.getIn().setHeader(SdbConstants.MAX_NUMBER_OF_DOMAINS, new Integer(5)).             exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN, "TOKEN1").         }     }).     assertNotNull(exchange.getIn().getHeader(SdbConstants.DOMAIN_NAMES, List.class)). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.PutAttributes).     exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").     exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, updateCondition).     exchange.getIn().setHeader(SdbConstants.REPLACEABLE_ATTRIBUTES, replaceableAttributes). }
false;public;0;15;;@Test public void putAttributes() {     final List<ReplaceableAttribute> replaceableAttributes = Arrays.asList(new ReplaceableAttribute[] { new ReplaceableAttribute("NAME1", "VALUE1", true) }).     final UpdateCondition updateCondition = new UpdateCondition("NAME1", "VALUE1", true).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.PutAttributes).             exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").             exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, updateCondition).             exchange.getIn().setHeader(SdbConstants.REPLACEABLE_ATTRIBUTES, replaceableAttributes).         }     }). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.Select).     exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN, "TOKEN1").     exchange.getIn().setHeader(SdbConstants.CONSISTENT_READ, Boolean.TRUE).     exchange.getIn().setHeader(SdbConstants.SELECT_EXPRESSION, "SELECT NAME1 FROM DOMAIN1 WHERE NAME1 LIKE 'VALUE1'"). }
false;public;0;13;;@Test public void select() {     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SdbConstants.OPERATION, SdbOperations.Select).             exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN, "TOKEN1").             exchange.getIn().setHeader(SdbConstants.CONSISTENT_READ, Boolean.TRUE).             exchange.getIn().setHeader(SdbConstants.SELECT_EXPRESSION, "SELECT NAME1 FROM DOMAIN1 WHERE NAME1 LIKE 'VALUE1'").         }     }).     assertNotNull(exchange.getIn().getHeader(SdbConstants.ITEMS, List.class)). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("aws-sdb://TestDomain?accessKey=xxx&secretKey=yyy&operation=GetAttributes"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("aws-sdb://TestDomain?accessKey=xxx&secretKey=yyy&operation=GetAttributes").         }     }. }
