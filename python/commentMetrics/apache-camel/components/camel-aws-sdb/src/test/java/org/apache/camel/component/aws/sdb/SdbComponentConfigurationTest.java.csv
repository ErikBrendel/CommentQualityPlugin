commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void createEndpointWithMinimalConfiguration() throws Exception {     AmazonSDBClientMock mock = new AmazonSDBClientMock().     context.getRegistry().bind("amazonSDBClient", mock).     SdbComponent component = new SdbComponent(context).     SdbEndpoint endpoint = (SdbEndpoint) component.createEndpoint("aws-sdb://TestDomain?amazonSDBClient=#amazonSDBClient&accessKey=xxx&secretKey=yyy").     assertEquals("TestDomain", endpoint.getConfiguration().getDomainName()).     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNotNull(endpoint.getConfiguration().getAmazonSDBClient()).     assertEquals(SdbOperations.PutAttributes, endpoint.getConfiguration().getOperation()).     assertFalse(endpoint.getConfiguration().isConsistentRead()).     assertNull(endpoint.getConfiguration().getMaxNumberOfDomains()). }
false;public;0;14;;@Test public void createEndpointWithOnlyAccessKeyAndSecretKey() throws Exception {     SdbComponent component = new SdbComponent(context).     SdbEndpoint endpoint = (SdbEndpoint) component.createEndpoint("aws-sdb://TestDomain?accessKey=xxx&secretKey=yyy").     assertEquals("TestDomain", endpoint.getConfiguration().getDomainName()).     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNull(endpoint.getConfiguration().getAmazonSDBClient()).     assertEquals(SdbOperations.PutAttributes, endpoint.getConfiguration().getOperation()).     assertFalse(endpoint.getConfiguration().isConsistentRead()).     assertNull(endpoint.getConfiguration().getMaxNumberOfDomains()). }
false;public;0;18;;@Test public void createEndpointWithMinimalConfigurationAndProvidedClient() throws Exception {     AmazonSDBClientMock mock = new AmazonSDBClientMock().     context.getRegistry().bind("amazonSDBClient", mock).     SdbComponent component = new SdbComponent(context).     SdbEndpoint endpoint = (SdbEndpoint) component.createEndpoint("aws-sdb://TestDomain?" + "amazonSDBClient=#amazonSDBClient").     assertEquals("TestDomain", endpoint.getConfiguration().getDomainName()).     assertNull(endpoint.getConfiguration().getAccessKey()).     assertNull(endpoint.getConfiguration().getSecretKey()).     assertSame(mock, endpoint.getConfiguration().getAmazonSDBClient()).     assertEquals(SdbOperations.PutAttributes, endpoint.getConfiguration().getOperation()).     assertFalse(endpoint.getConfiguration().isConsistentRead()).     assertNull(endpoint.getConfiguration().getMaxNumberOfDomains()). }
false;public;0;19;;@Test public void createEndpointWithMaximalConfiguration() throws Exception {     AmazonSDBClientMock mock = new AmazonSDBClientMock().     context.getRegistry().bind("amazonSDBClient", mock).     SdbComponent component = new SdbComponent(context).     SdbEndpoint endpoint = (SdbEndpoint) component.createEndpoint("aws-sdb://TestDomain?amazonSDBClient=#amazonSDBClient&accessKey=xxx&secretKey=yyy&operation=DeleteAttributes&consistentRead=true" + "&maxNumberOfDomains=5").     assertEquals("TestDomain", endpoint.getConfiguration().getDomainName()).     assertEquals("xxx", endpoint.getConfiguration().getAccessKey()).     assertEquals("yyy", endpoint.getConfiguration().getSecretKey()).     assertNotNull(endpoint.getConfiguration().getAmazonSDBClient()).     assertEquals(SdbOperations.DeleteAttributes, endpoint.getConfiguration().getOperation()).     assertTrue(endpoint.getConfiguration().isConsistentRead()).     assertEquals(new Integer(5), endpoint.getConfiguration().getMaxNumberOfDomains()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutDomainName() throws Exception {     SdbComponent component = new SdbComponent(context).     component.createEndpoint("aws-sdb:// "). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAmazonSDBClientConfiguration() throws Exception {     SdbComponent component = new SdbComponent(context).     component.createEndpoint("aws-sdb://TestDomain"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutAccessKeyConfiguration() throws Exception {     SdbComponent component = new SdbComponent(context).     component.createEndpoint("aws-sdb://TestDomain?secretKey=yyy"). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithoutSecretKeyConfiguration() throws Exception {     SdbComponent component = new SdbComponent(context).     component.createEndpoint("aws-sdb://TestDomain?accessKey=xxx"). }
false;public;0;9;;@Test public void createEndpointWithoutSecretKeyAndAccessKeyConfiguration() throws Exception {     AmazonSDBClientMock mock = new AmazonSDBClientMock().     context.getRegistry().bind("amazonSDBClient", mock).     SdbComponent component = new SdbComponent(context).     component.createEndpoint("aws-sdb://TestDomain?amazonSDBClient=#amazonSDBClient"). }
