commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void execute() { // noop }
false;public;0;15;;@Before public void setUp() {     sdbClient = new AmazonSDBClientMock().     configuration = new SdbConfiguration().     configuration.setDomainName("DOMAIN1").     configuration.setConsistentRead(Boolean.TRUE).     exchange = new DefaultExchange(new DefaultCamelContext()).     this.command = new AbstractSdbCommand(sdbClient, configuration, exchange) {          @Override         public void execute() {         // noop         }     }. }
false;public;0;8;;@Test public void determineDomainName() {     assertEquals("DOMAIN1", this.command.determineDomainName()).     exchange.getIn().setHeader(SdbConstants.DOMAIN_NAME, "DOMAIN2").     assertEquals("DOMAIN2", this.command.determineDomainName()). }
false;public;0;13;;@Test public void determineItemName() {     try {         this.command.determineItemName().         fail("IllegalArgumentException expected").     } catch (IllegalArgumentException e) {         assertEquals("AWS SDB Item Name header is missing.", e.getMessage()).     }     exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").     assertEquals("ITEM1", this.command.determineItemName()). }
false;public;0;8;;@Test public void determineConsistentRead() {     assertEquals(Boolean.TRUE, this.command.determineConsistentRead()).     exchange.getIn().setHeader(SdbConstants.CONSISTENT_READ, Boolean.FALSE).     assertEquals(Boolean.FALSE, this.command.determineConsistentRead()). }
false;public;0;9;;@Test public void determineUpdateCondition() {     assertNull(this.command.determineUpdateCondition()).     UpdateCondition condition = new UpdateCondition("Key1", "Value1", true).     exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, condition).     assertSame(condition, this.command.determineUpdateCondition()). }
false;public;0;8;;@Test public void determineNextToken() {     assertNull(this.command.determineNextToken()).     exchange.getIn().setHeader(SdbConstants.NEXT_TOKEN, "Token1").     assertEquals("Token1", this.command.determineNextToken()). }
