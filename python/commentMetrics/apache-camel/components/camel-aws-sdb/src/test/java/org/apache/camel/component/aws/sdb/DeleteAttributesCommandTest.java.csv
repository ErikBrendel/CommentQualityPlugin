commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() {     sdbClient = new AmazonSDBClientMock().     configuration = new SdbConfiguration().     configuration.setDomainName("DOMAIN1").     exchange = new DefaultExchange(new DefaultCamelContext()).     command = new DeleteAttributesCommand(sdbClient, configuration, exchange). }
false;public;0;16;;@Test public void execute() {     List<Attribute> attributes = new ArrayList<>().     attributes.add(new Attribute("NAME1", "VALUE1")).     exchange.getIn().setHeader(SdbConstants.ATTRIBUTES, attributes).     exchange.getIn().setHeader(SdbConstants.ITEM_NAME, "ITEM1").     UpdateCondition condition = new UpdateCondition("Key1", "Value1", true).     exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, condition).     command.execute().     assertEquals("DOMAIN1", sdbClient.deleteAttributesRequest.getDomainName()).     assertEquals("ITEM1", sdbClient.deleteAttributesRequest.getItemName()).     assertEquals(condition, sdbClient.deleteAttributesRequest.getExpected()).     assertEquals(attributes, sdbClient.deleteAttributesRequest.getAttributes()). }
false;public;0;10;;@Test(expected = IllegalArgumentException.class) public void executeWithoutItemName() {     List<Attribute> attributes = new ArrayList<>().     attributes.add(new Attribute("NAME1", "VALUE1")).     exchange.getIn().setHeader(SdbConstants.ATTRIBUTES, attributes).     UpdateCondition condition = new UpdateCondition("Key1", "Value1", true).     exchange.getIn().setHeader(SdbConstants.UPDATE_CONDITION, condition).     command.execute(). }
false;public;0;10;;@Test public void determineAttributes() {     assertNull(this.command.determineAttributes()).     List<Attribute> attributes = new ArrayList<>().     attributes.add(new Attribute("NAME1", "VALUE1")).     exchange.getIn().setHeader(SdbConstants.ATTRIBUTES, attributes).     assertEquals(attributes, this.command.determineAttributes()). }
