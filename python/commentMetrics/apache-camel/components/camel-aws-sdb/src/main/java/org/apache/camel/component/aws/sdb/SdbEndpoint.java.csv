commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot receive messages from this endpoint"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new SdbProducer(this). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;20;;@Override public void doStart() throws Exception {     super.doStart().     sdbClient = configuration.getAmazonSDBClient() != null ? configuration.getAmazonSDBClient() : createSdbClient().     String domainName = getConfiguration().getDomainName().     LOG.trace("Querying whether domain [{}] already exists...", domainName).     try {         sdbClient.domainMetadata(new DomainMetadataRequest(domainName)).         LOG.trace("Domain [{}] already exists", domainName).         return.     } catch (NoSuchDomainException ase) {         LOG.trace("Domain [{}] doesn't exist yet", domainName).         LOG.trace("Creating domain [{}]...", domainName).         sdbClient.createDomain(new CreateDomainRequest(domainName)).         LOG.trace("Domain [{}] created", domainName).     } }
false;public;0;3;;public SdbConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public AmazonSimpleDB getSdbClient() {     return sdbClient. }
false;;0;32;;AmazonSimpleDB createSdbClient() {     AmazonSimpleDB client = null.     AmazonSimpleDBClientBuilder clientBuilder = null.     ClientConfiguration clientConfiguration = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonSimpleDBClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonSimpleDBClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonSimpleDBClientBuilder.standard().         } else {             clientBuilder = AmazonSimpleDBClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).     }     client = clientBuilder.build().     return client. }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
