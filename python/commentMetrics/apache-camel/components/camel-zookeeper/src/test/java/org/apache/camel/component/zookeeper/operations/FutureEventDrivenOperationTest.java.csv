commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;@Override protected void installWatch() { }
false;public;0;4;;@Override public OperationResult<String> getResult() {     return new OperationResult<>(data, statistics). }
false;public;0;20;;@Test public void shouldWaitForEvents() throws Exception {     final FutureEventDrivenOperation<String> future = new FutureEventDrivenOperation<String>(null, "somepath", EventType.NodeCreated) {          @Override         protected void installWatch() {         }          @Override         public OperationResult<String> getResult() {             return new OperationResult<>(data, statistics).         }     }.     WatchedEvent event = new WatchedEvent(EventType.NodeCreated, null, "somepath").     fireEventIn(future, event, 100).     assertEquals(data, future.get().getResult()).     assertEquals(statistics, future.get().getStatistics()).     assertEquals(event, future.getWatchedEvent()). }
false;public;0;7;;public void run() {     try {         Thread.sleep(millisecondsTillFire).         future.process(event).     } catch (InterruptedException e) {     } }
false;private;3;12;;private void fireEventIn(final FutureEventDrivenOperation<String> future, final WatchedEvent event, final int millisecondsTillFire) {     new Thread(new Runnable() {          public void run() {             try {                 Thread.sleep(millisecondsTillFire).                 future.process(event).             } catch (InterruptedException e) {             }         }     }).start(). }
