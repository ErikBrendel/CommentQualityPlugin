commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;protected CamelContext createCamelContext() throws Exception {     disableJMX().     // set up the parent nodes used to control the election     client.createPersistent("/someapp", "App node to contain policy election nodes...").     client.createPersistent("/someapp/somepolicy", "Node used by route policy to control active routes...").     return super.createCamelContext(). }
false;public;0;16;;@Test public void masterSlaveScenarioContolledByPolicy() throws Exception {     ZookeeperPolicyEnforcedContext tetrisisMasterOfBlocks = createEnforcedContext("master").     ZookeeperPolicyEnforcedContext slave = createEnforcedContext("slave").     // http://bit.ly/9gTlGe .). Send messages to the master and the slave.     // The route is enabled in the master and gets through, but that sent to     // the slave context is rejected.     tetrisisMasterOfBlocks.sendMessageToEnforcedRoute("LIIIIIIIIIINNNNNNNNNEEEEEEE PEEEEEEICCCE", 1).     slave.sendMessageToEnforcedRoute("But lord there is no place for a square!??!", 0).     // trigger failover by killing the master... then assert that the slave     // can now receive messages.     tetrisisMasterOfBlocks.shutdown().     slave.sendMessageToEnforcedRoute("What a cruel and angry god...", 1). }
false;public;2;13;;public void sendMessageToEnforcedRoute(String message, int expected) throws InterruptedException {     mock.expectedMessageCount(expected).     try {         template.sendBody("vm:" + routename, ExchangePattern.InOut, message).     } catch (Exception e) {         if (expected > 0) {             LOG.error(e.getMessage(), e).             fail("Expected messages...").         }     }     mock.await(2, TimeUnit.SECONDS).     mock.assertIsSatisfied(1000). }
false;public;0;5;;public void shutdown() throws Exception {     LoggerFactory.getLogger(getClass()).debug("stopping").     controlledContext.stop().     LoggerFactory.getLogger(getClass()).debug("stopped"). }
false;private;1;5;;private ZookeeperPolicyEnforcedContext createEnforcedContext(String name) throws Exception, InterruptedException {     ZookeeperPolicyEnforcedContext context = new ZookeeperPolicyEnforcedContext(name).     delay(1000).     return context. }
false;public;0;4;;public void configure() throws Exception {     ZooKeeperRoutePolicy policy = new ZooKeeperRoutePolicy("zookeeper:localhost:" + getServerPort() + "/someapp/somepolicy", 1).     from("vm:" + routename).routePolicy(policy).id(routename).to("mock:controlled"). }
