commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public void configure(CamelContext context) {     try {         ZooKeeperClusterService service = new ZooKeeperClusterService().         service.setId("node-" + nodeId).         service.setNodes(address).         service.setBasePath("/camel/master").         context.setNameStrategy(new ExplicitCamelContextNameStrategy("camel-" + nodeId)).         context.addService(service).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;0;9;;@Override public void configure() throws Exception {     final int delay = 1 + ThreadLocalRandom.current().nextInt(10).     final int period = 1 + ThreadLocalRandom.current().nextInt(5).     fromF("master:zk:timer:master?delay=%ds&period=%ds", delay, period).routeId("route-" + nodeId).log("Node " + nodeId + " timer"). }
false;public,static;1;36;;public static void main(String[] args) throws Exception {     final String nodeId = UUID.randomUUID().toString().     final String address = args[0].     Main main = new Main().     main.addMainListener(new MainListenerSupport() {          @Override         public void configure(CamelContext context) {             try {                 ZooKeeperClusterService service = new ZooKeeperClusterService().                 service.setId("node-" + nodeId).                 service.setNodes(address).                 service.setBasePath("/camel/master").                 context.setNameStrategy(new ExplicitCamelContextNameStrategy("camel-" + nodeId)).                 context.addService(service).             } catch (Exception e) {                 throw new RuntimeException(e).             }         }     }).     main.addRouteBuilder(new RouteBuilder() {          @Override         public void configure() throws Exception {             final int delay = 1 + ThreadLocalRandom.current().nextInt(10).             final int period = 1 + ThreadLocalRandom.current().nextInt(5).             fromF("master:zk:timer:master?delay=%ds&period=%ds", delay, period).routeId("route-" + nodeId).log("Node " + nodeId + " timer").         }     }).     main.run(). }
