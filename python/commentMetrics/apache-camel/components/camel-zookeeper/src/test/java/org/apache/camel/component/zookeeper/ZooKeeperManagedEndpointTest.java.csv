commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     ZooKeeperTestSupport.setupTestServer().     super.setUp(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     ZooKeeperTestSupport.shutdownServer(). }
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;4;;protected CamelContext createCamelContext() throws Exception {     CamelContext context = new DefaultCamelContext().     return context. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;17;;@Test public void testEnpointConfigurationCanBeSetViaJMX() throws Exception {     Set s = getMBeanServer().queryNames(new ObjectName("org.apache.camel:type=endpoints,name=\"zookeeper:*\",*"), null).     assertEquals("Could not find zookeper endpoint: " + s, 1, s.size()).     ObjectName zepName = new ArrayList<ObjectName>(s).get(0).     verifyManagedAttribute(zepName, "Path", "/node").     verifyManagedAttribute(zepName, "Create", false).     verifyManagedAttribute(zepName, "Repeat", false).     verifyManagedAttribute(zepName, "ListChildren", false).     verifyManagedAttribute(zepName, "Timeout", 1000).     verifyManagedAttribute(zepName, "Backoff", 2000L).     getMBeanServer().invoke(zepName, "clearServers", null, JmxUtils.getMethodSignature(ZooKeeperEndpoint.class.getMethod("clearServers", null))).     getMBeanServer().invoke(zepName, "addServer", new Object[] { "someserver:12345" }, JmxUtils.getMethodSignature(ZooKeeperEndpoint.class.getMethod("addServer", new Class[] { String.class }))). }
false;private;3;3;;private void verifyManagedAttribute(ObjectName zepName, String attributeName, String attributeValue) throws Exception {     assertEquals(attributeValue, getMBeanServer().getAttribute(zepName, attributeName)). }
false;private;3;3;;private void verifyManagedAttribute(ObjectName zepName, String attributeName, Integer attributeValue) throws Exception {     assertEquals(attributeValue, getMBeanServer().getAttribute(zepName, attributeName)). }
false;private;3;3;;private void verifyManagedAttribute(ObjectName zepName, String attributeName, Boolean attributeValue) throws Exception {     assertEquals(attributeValue, getMBeanServer().getAttribute(zepName, attributeName)). }
false;private;3;3;;private void verifyManagedAttribute(ObjectName zepName, String attributeName, Long attributeValue) throws Exception {     assertEquals(attributeValue, getMBeanServer().getAttribute(zepName, attributeName)). }
false;public;0;3;;public void configure() {     from("zookeeper://localhost:" + ZooKeeperTestSupport.getServerPort() + "/node?timeout=1000&backoff=2000").to("mock:test"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("zookeeper://localhost:" + ZooKeeperTestSupport.getServerPort() + "/node?timeout=1000&backoff=2000").to("mock:test").         }     }. }
