commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@BeforeClass public static void setupTestServer() throws Exception {     port = AvailablePortFinder.getNextAvailable(39913).     LOG.info("Starting Zookeeper Test Infrastructure").     server = new TestZookeeperServer(getServerPort(), clearServerData()).     waitForServerUp("localhost:" + getServerPort(), 1000).     client = new TestZookeeperClient(getServerPort(), getTestClientSessionTimeout()).     LOG.info("Started Zookeeper Test Infrastructure on port " + getServerPort()). }
false;public;0;3;;public ZooKeeper getConnection() {     return client.getConnection(). }
false;public,static;0;8;;@AfterClass public static void shutdownServer() throws Exception {     LOG.info("Stopping Zookeeper Test Infrastructure").     client.shutdown().     server.shutdown().     waitForServerDown("localhost:" + getServerPort(), 1000).     LOG.info("Stopped Zookeeper Test Infrastructure"). }
false;protected,static;0;3;;protected static int getServerPort() {     return port. }
false;protected,static;0;3;;protected static int getTestClientSessionTimeout() {     return 100000. }
false;protected,static;0;3;;protected static boolean clearServerData() {     return true. }
false;private;0;4;;private void cleanZookeeperDir() throws Exception {     File working = zookeeperBaseDir.     deleteDir(working). }
false;public;0;10;;public void shutdown() throws Exception {     connectionFactory.shutdown().     connectionFactory.join().     zkServer.shutdown().     while (zkServer.isRunning()) {         zkServer.shutdown().         Thread.sleep(100).     }     cleanZookeeperDir(). }
false;public;0;3;;public ZooKeeper getConnection() {     return zk. }
false;public;0;3;;public void shutdown() throws Exception {     zk.close(). }
false;public;1;4;;public byte[] waitForNodeChange(String node) throws Exception {     Stat stat = new Stat().     return zk.getData(node, this, stat). }
false;public;2;4;;public void create(String node, String data) throws Exception {     log.debug(String.format("Creating node '%s' with data '%s' ", node, data)).     create(node, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL). }
false;public;2;4;;public void createPersistent(String node, String data) throws Exception {     log.debug(String.format("Creating node '%s' with data '%s' ", node, data)).     create(node, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT). }
false;public;4;7;;public void create(String znode, String data, List<ACL> access, CreateMode mode) throws Exception {     delay(200).     String created = zk.create(znode, data != null ? data.getBytes() : null, access, mode).     if (log.isInfoEnabled()) {         log.info(String.format("Created znode named '%s'", created)).     } }
false;public;3;4;;public Stat setData(String node, String data, int version) throws Exception {     log.debug(String.format("TestClient Updating data of node %s to %s", node, data)).     return zk.setData(node, data.getBytes(), version). }
false;public;1;3;;public byte[] getData(String znode) throws Exception {     return zk.getData(znode, false, new Stat()). }
false;public;1;10;;public void process(WatchedEvent event) {     if (event.getState() == KeeperState.SyncConnected) {         log.info("TestClient connected").         connected.countDown().     } else {         if (event.getState() == KeeperState.Disconnected) {             log.info("TestClient connected ?" + zk.getState()).         }     } }
false;public;1;8;;public void deleteAll(String node) throws Exception {     delay(200).     log.debug("Deleting {} and it's immediate children", node).     for (String child : zk.getChildren(node, false)) {         delete(node + "/" + child).     }     delete(node). }
false;public;1;5;;public void delete(String node) throws Exception {     delay(200).     log.debug("Deleting node " + node).     zk.delete(node, -1). }
true;public,static;2;25;// would be nice! Another good reason the keeper folks should move to maven. ;// Wait methods are taken directly from the Zookeeper tests. A tests jar // would be nice! Another good reason the keeper folks should move to maven. public static boolean waitForServerUp(String hp, long timeout) {     long start = System.currentTimeMillis().     while (true) {         try {             // if there are multiple hostports, just take the first one             hp = hp.split(",")[0].             String result = send4LetterWord(hp, "stat").             if (result.startsWith("Zookeeper version:")) {                 return true.             }         } catch (IOException e) {             LOG.info("server {} not up {}", hp, e).         }         if (System.currentTimeMillis() > start + timeout) {             break.         }         try {             Thread.sleep(250).         } catch (InterruptedException e) {         // ignore         }     }     return false. }
false;private,static;2;31;;private static String send4LetterWord(String hp, String cmd) throws IOException {     String[] split = hp.split(":").     String host = split[0].     int port.     try {         port = Integer.parseInt(split[1]).     } catch (RuntimeException e) {         throw new RuntimeException("Problem parsing " + hp + e.toString()).     }     Socket sock = new Socket(host, port).     BufferedReader reader = null.     try {         OutputStream outstream = sock.getOutputStream().         outstream.write(cmd.getBytes()).         outstream.flush().         reader = IOHelper.buffered(new InputStreamReader(sock.getInputStream())).         StringBuilder sb = new StringBuilder().         String line.         while ((line = reader.readLine()) != null) {             sb.append(line + "\n").         }         return sb.toString().     } finally {         sock.close().         if (reader != null) {             reader.close().         }     } }
false;private,static;2;20;;private static boolean waitForServerDown(String hp, long timeout) {     long start = System.currentTimeMillis().     while (true) {         try {             send4LetterWord(hp, "stat").         } catch (IOException e) {             return true.         }         if (System.currentTimeMillis() > start + timeout) {             break.         }         try {             Thread.sleep(250).         } catch (InterruptedException e) {         // ignore         }     }     return false. }
false;public,static;1;5;;public static void deleteDir(File f) {     LinkedList<File> deleteStack = new LinkedList<>().     deleteStack.addLast(f).     deleteDir(deleteStack). }
false;private,static;1;15;;private static void deleteDir(Deque<File> deleteStack) {     File f = deleteStack.pollLast().     if (f != null) {         if (f.isDirectory()) {             File[] files = f.listFiles().             if (files != null) {                 for (File child : files) {                     deleteStack.addLast(child).                 }             }         }         deleteDir(deleteStack).         FileUtil.deleteFile(f).     } }
false;public,static;1;3;;public static void delay(int wait) throws InterruptedException {     Thread.sleep(wait). }
false;protected;1;3;;protected List<String> createChildListing(String... children) {     return Arrays.asList(children). }
false;protected;1;10;;protected void validateExchangesReceivedInOrderWithIncreasingVersion(MockEndpoint mock) {     int lastVersion = -1.     List<Exchange> received = mock.getReceivedExchanges().     for (int x = 0. x < received.size(). x++) {         Message zkm = mock.getReceivedExchanges().get(x).getIn().         int version = ZooKeeperMessage.getStatistics(zkm).getVersion().         assertTrue("Version did not increase", lastVersion < version).         lastVersion = version.     } }
false;protected;2;3;;protected void verifyAccessControlList(String node, List<ACL> expected) throws Exception {     getConnection().getACL(node, new Stat()). }
false;protected;2;7;;protected void verifyNodeContainsData(String node, byte[] expected) throws Exception {     if (expected == null) {         assertNull(client.getData(node)).     } else {         assertEquals(new String(expected), new String(client.getData(node))).     } }
