commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void configure() throws Exception {     from("zookeeper://localhost:" + getServerPort() + "/camel?repeat=true").to("mock:zookeeper-data"). }
false;protected;0;8;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     return new RouteBuilder[] { new RouteBuilder() {          public void configure() throws Exception {             from("zookeeper://localhost:" + getServerPort() + "/camel?repeat=true").to("mock:zookeeper-data").         }     } }. }
false;public;0;39;;@Test public void shouldAwaitCreationAndGetDataNotification() throws Exception {     EventType[] expectedEventTypes = new EventType[] { EventType.NodeCreated, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDataChanged, EventType.NodeDeleted }.     MockEndpoint mock = getMockEndpoint("mock:zookeeper-data").     mock.expectedMessageCount(expectedEventTypes.length).     createCamelNode().     updateNode(10).     delay(500).     client.delete("/camel").     MockEndpoint.assertIsSatisfied(30, TimeUnit.SECONDS).     int lastVersion = -1.     for (int i = 0. i < mock.getExchanges().size(). i++) {         assertEquals(expectedEventTypes[i], mock.getExchanges().get(i).getIn().getHeader(ZooKeeperMessage.ZOOKEEPER_EVENT_TYPE)).         if (!EventType.NodeDeleted.equals(expectedEventTypes[i])) {             // As a delete event does not carry statistics, ignore it in the version check.             int version = ZooKeeperMessage.getStatistics(mock.getExchanges().get(i).getIn()).getVersion().             assertTrue("Version did not increase", lastVersion < version).             lastVersion = version.         }     } }
false;public;0;19;;@Test public void deletionOfAwaitedNodeCausesNoFailure() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:zookeeper-data").     mock.expectedMinimumMessageCount(11).     createCamelNode().     delay(500).     // by now we are back waiting for a change so delete the node     client.delete("/camel").     // recreate and update a number of times.     createCamelNode().     updateNode(10).     MockEndpoint.assertIsSatisfied(30, TimeUnit.SECONDS).     client.delete("/camel"). }
false;private;1;6;;private void updateNode(int times) throws Exception {     for (int x = 1. x < times. x++) {         delay(500).         client.setData("/camel", testPayload + "_" + x, -1).     } }
false;private;0;7;;private void createCamelNode() throws Exception {     try {         delay(1000).         client.create("/camel", testPayload + "_0").     } catch (NodeExistsException e) {     } }
