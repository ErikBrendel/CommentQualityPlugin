commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;21;;// *********************** // Lifecycle // *********************** @Override protected void doPreSetup() throws Exception {     super.doPreSetup().     server = new ZooKeeperTestSupport.TestZookeeperServer(SERVER_PORT, true).     ZooKeeperTestSupport.waitForServerUp("127.0.0.1:" + SERVER_PORT, 1000).     curator = CuratorFrameworkFactory.builder().connectString("127.0.0.1:" + SERVER_PORT).retryPolicy(new ExponentialBackoffRetry(1000, 3)).build().     discovery = ServiceDiscoveryBuilder.builder(ZooKeeperServiceRegistry.MetaData.class).client(curator).basePath(SERVICE_PATH).serializer(new JsonInstanceSerializer<>(ZooKeeperServiceRegistry.MetaData.class)).build().     curator.start().     discovery.start(). }
false;public;0;10;;@Override @After public void tearDown() throws Exception {     super.tearDown().     CloseableUtils.closeQuietly(discovery).     CloseableUtils.closeQuietly(curator).     server.shutdown(). }
false;protected;0;3;;protected Map<String, String> getMetadata() {     return Collections.emptyMap(). }
false;protected;0;16;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     ZooKeeperServiceRegistry registry = new ZooKeeperServiceRegistry().     registry.setId(context.getUuidGenerator().generateUuid()).     registry.setCamelContext(context()).     registry.setNodes("localhost:" + SERVER_PORT).     registry.setBasePath(SERVICE_PATH).     registry.setServiceHost(SERVICE_HOST).     registry.setOverrideServiceHost(true).     context.addService(registry, true, false).     return context. }
false;public;0;31;;@Test public void testRegistrationFromRoute() throws Exception {     // the service should not be registered as the route is not running     assertTrue(discovery.queryForInstances(SERVICE_NAME).isEmpty()).     // let start the route     context().getRouteController().startRoute(SERVICE_ID).     // check that service has been registered     Collection<ServiceInstance<ZooKeeperServiceRegistry.MetaData>> services = discovery.queryForInstances(SERVICE_NAME).     assertEquals(1, services.size()).     ServiceInstance<ZooKeeperServiceRegistry.MetaData> instance = services.iterator().next().     assertEquals(SERVICE_PORT, (int) instance.getPort()).     assertEquals("localhost", instance.getAddress()).     assertEquals("http", instance.getPayload().get(ServiceDefinition.SERVICE_META_PROTOCOL)).     assertEquals("/service/endpoint", instance.getPayload().get(ServiceDefinition.SERVICE_META_PATH)).     getMetadata().forEach((k, v) -> {         assertEquals(v, instance.getPayload().get(k)).     }).     // let stop the route     context().getRouteController().stopRoute(SERVICE_ID).     // the service should be removed once the route is stopped     assertTrue(discovery.queryForInstances(SERVICE_NAME).isEmpty()). }
