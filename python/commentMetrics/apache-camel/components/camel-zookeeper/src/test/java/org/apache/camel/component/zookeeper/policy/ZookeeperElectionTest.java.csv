commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void before() throws Exception {     // set up the parent used to control the election     client.createPersistent(NODE_BASE_KEY, "App node to contain policy election nodes...").     client.createPersistent(NODE_PARTICULAR_KEY, "Policy node used by route policy to control routes..."). }
false;public;0;12;;@After public void after() throws Exception {     client.deleteAll(NODE_PARTICULAR_KEY).     client.delete(NODE_BASE_KEY).     if (candidateOneContext != null) {         candidateOneContext.stop().     }     if (candidateTwoContext != null) {         candidateTwoContext.stop().     } }
false;private;0;3;;private String getElectionUri() {     return "zookeeper:localhost:" + getServerPort() + "/someapp/somepolicy". }
false;public;0;5;;@Test public void masterCanBeElected() throws Exception {     ZooKeeperElection candidate = new ZooKeeperElection(template, context, getElectionUri(), 1).     assertTrue("The only election candidate was not elected as master.", candidate.isMaster()). }
false;public;0;10;;@Test public void masterAndSlave() throws Exception {     candidateOneContext = createNewContext().     candidateTwoContext = createNewContext().     ZooKeeperElection electionCandidate1 = createElectionCandidate(candidateOneContext, 1).     assertTrue("The first candidate was not elected.", electionCandidate1.isMaster()).     ZooKeeperElection electionCandidate2 = createElectionCandidate(candidateTwoContext, 1).     assertFalse("The second candidate should not have been elected.", electionCandidate2.isMaster()). }
false;public;0;15;;@Test public void testMasterGoesAway() throws Exception {     candidateOneContext = createNewContext().     candidateTwoContext = createNewContext().     ZooKeeperElection electionCandidate1 = createElectionCandidate(candidateOneContext, 1).     assertTrue("The first candidate was not elected.", electionCandidate1.isMaster()).     ZooKeeperElection electionCandidate2 = createElectionCandidate(candidateTwoContext, 1).     assertFalse("The second candidate should not have been elected.", electionCandidate2.isMaster()).     LOG.debug("About to shutdown the first candidate.").     // the first candidate was killed.     candidateOneContext.stop().     assertIsMaster(electionCandidate2). }
false;public;0;11;;@Test public void testDualMaster() throws Exception {     candidateOneContext = createNewContext().     candidateTwoContext = createNewContext().     ZooKeeperElection electionCandidate1 = createElectionCandidate(candidateOneContext, 2).     assertTrue("The first candidate was not elected.", electionCandidate1.isMaster()).     ZooKeeperElection electionCandidate2 = createElectionCandidate(candidateTwoContext, 2).     assertIsMaster(electionCandidate2). }
false;public;0;3;;@Override public void electionResultChanged() {     notified.set(true). }
false;public;0;19;;@Test public void testWatchersAreNotified() throws Exception {     candidateOneContext = createNewContext().     candidateTwoContext = createNewContext().     final AtomicBoolean notified = new AtomicBoolean(false).     ElectionWatcher watcher = new ElectionWatcher() {          @Override         public void electionResultChanged() {             notified.set(true).         }     }.     ZooKeeperElection electionCandidate1 = createElectionCandidate(candidateOneContext, 2).     assertTrue("The first candidate was not elected.", electionCandidate1.isMaster()).     electionCandidate1.addElectionWatcher(watcher).     ZooKeeperElection electionCandidate2 = createElectionCandidate(candidateTwoContext, 2).     electionCandidate2.isMaster().     assertTrue("The first candidate should have had it's watcher notified", notified.get()). }
false;private;0;5;;private DefaultCamelContext createNewContext() throws Exception {     DefaultCamelContext controlledContext = new DefaultCamelContext().     controlledContext.start().     return controlledContext. }
false;private;2;3;;private ZooKeeperElection createElectionCandidate(final CamelContext context, int masterCount) {     return new ZooKeeperElection(context.createProducerTemplate(), context, getElectionUri(), masterCount). }
false;private;1;10;;private void assertIsMaster(ZooKeeperElection electionCandidate) throws InterruptedException {     // Need to wait for a while to be elected.     long timeout = System.currentTimeMillis() + 20000.     while (!electionCandidate.isMaster() && timeout > System.currentTimeMillis()) {         Thread.sleep(200).     }     assertTrue("The candidate should have been elected.", electionCandidate.isMaster()). }
