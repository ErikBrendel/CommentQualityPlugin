commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupConnection() {     connection = getConnection(). }
false;public;0;9;;@Test public void createBasic() throws Exception {     CreateOperation create = new CreateOperation(connection, "/one").     OperationResult<String> result = create.get().     assertEquals("/one", result.getResult()).     verifyNodeContainsData("/one", null). }
false;public;0;9;;@Test public void createBasicSubPath() throws Exception {     CreateOperation create = new CreateOperation(connection, "/sub/sub2").     OperationResult<String> result = create.get().     assertEquals("/sub/sub2", result.getResult()).     verifyNodeContainsData("/sub/sub2", null). }
false;public;0;10;;@Test public void createBasicSubPathWithData() throws Exception {     CreateOperation create = new CreateOperation(connection, "/sub/sub3").     create.setData(testPayload.getBytes()).     OperationResult<String> result = create.get().     assertEquals("/sub/sub3", result.getResult()).     verifyNodeContainsData("/sub/sub3", testPayloadBytes). }
false;public;0;10;;@Test public void createBasicWithData() throws Exception {     CreateOperation create = new CreateOperation(connection, "/two").     create.setData(testPayload.getBytes()).     OperationResult<String> result = create.get().     assertEquals("/two", result.getResult()).     verifyNodeContainsData("/two", testPayloadBytes). }
false;public;0;12;;@Test public void createSequencedNodeToTestCreateMode() throws Exception {     CreateOperation create = new CreateOperation(connection, "/three").     create.setData(testPayload.getBytes()).     create.setCreateMode(CreateMode.EPHEMERAL_SEQUENTIAL).     OperationResult<String> result = create.get().     String out = result.getResult().     assertTrue(out.startsWith("/three")).     verifyNodeContainsData(out, testPayloadBytes). }
false;public;0;12;;@Test public void createNodeWithSpecificAccess() throws Exception {     CreateOperation create = new CreateOperation(connection, "/four").     create.setData(testPayload.getBytes()).     List<ACL> perms = Collections.singletonList(new ACL(Perms.CREATE, Ids.ANYONE_ID_UNSAFE)).     create.setPermissions(perms).     OperationResult<String> result = create.get().     assertEquals("/four", result.getResult()).     verifyAccessControlList("/four", perms). }
