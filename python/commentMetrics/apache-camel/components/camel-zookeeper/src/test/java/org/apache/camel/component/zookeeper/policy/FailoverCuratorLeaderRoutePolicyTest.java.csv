commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected CamelContext createCamelContext() throws Exception {     disableJMX().     return super.createCamelContext(). }
false;public;0;17;;@Test public void masterSlaveScenarioContolledByPolicy() throws Exception {     ZookeeperPolicyEnforcedContext master = createEnforcedContext("master").     ZookeeperPolicyEnforcedContext slave = createEnforcedContext("slave").     Thread.sleep(5000).     // Send messages to the master and the slave.     // The route is enabled in the master and gets through, but that sent to     // the slave context is rejected.     master.sendMessageToEnforcedRoute("message for master", 1).     slave.sendMessageToEnforcedRoute("message for slave", 0).     // trigger failover by killing the master... then assert that the slave     // can now receive messages.     master.shutdown().     slave.sendMessageToEnforcedRoute("second message for slave", 1).     slave.shutdown(). }
false;public;0;5;;@Override public void configure() throws Exception {     CuratorLeaderRoutePolicy policy = new CuratorLeaderRoutePolicy("zookeeper:localhost:" + getServerPort() + BASE_ZNODE + ZNODE + 2).     from("timer://foo?fixedRate=true&period=5").routePolicy(policy).id("single_route").autoStartup(true).to("mock:controlled"). }
false;public;0;18;;@Test public void ensureRoutesDoNotStartBeforeElection() throws Exception {     DefaultCamelContext context = new DefaultCamelContext().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             CuratorLeaderRoutePolicy policy = new CuratorLeaderRoutePolicy("zookeeper:localhost:" + getServerPort() + BASE_ZNODE + ZNODE + 2).             from("timer://foo?fixedRate=true&period=5").routePolicy(policy).id("single_route").autoStartup(true).to("mock:controlled").         }     }).     context.start().     // this check verifies that a route marked as autostartable is not started automatically. It will be the policy responsibility to eventually start it.     assertThat(context.getRouteController().getRouteStatus("single_route").isStarted(), is(false)).     assertThat(context.getRouteController().getRouteStatus("single_route").isStarting(), is(false)).     context.shutdown(). }
false;public;2;13;;public void sendMessageToEnforcedRoute(String message, int expected) throws InterruptedException {     mock.expectedMessageCount(expected).     try {         template.sendBody("vm:" + routename, ExchangePattern.InOut, message).     } catch (Exception e) {         if (expected > 0) {             LOG.error(e.getMessage(), e).             fail("Expected messages...").         }     }     mock.await(2, TimeUnit.SECONDS).     mock.assertIsSatisfied(2000). }
false;public;0;5;;public void shutdown() throws Exception {     LoggerFactory.getLogger(getClass()).debug("stopping").     controlledContext.stop().     LoggerFactory.getLogger(getClass()).debug("stopped"). }
false;private;1;5;;private ZookeeperPolicyEnforcedContext createEnforcedContext(String name) throws Exception, InterruptedException {     ZookeeperPolicyEnforcedContext context = new ZookeeperPolicyEnforcedContext(name).     delay(1000).     return context. }
false;public;0;4;;public void configure() throws Exception {     CuratorLeaderRoutePolicy policy = new CuratorLeaderRoutePolicy("zookeeper:localhost:" + getServerPort() + BASE_ZNODE + ZNODE).     from("vm:" + routename).routePolicy(policy).id(routename).to("mock:controlled"). }
