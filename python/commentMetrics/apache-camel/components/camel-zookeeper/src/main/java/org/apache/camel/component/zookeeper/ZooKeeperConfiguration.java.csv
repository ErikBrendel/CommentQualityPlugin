commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public void addZookeeperServer(String server) {     if (servers == null) {         servers = new ArrayList<>().     }     servers.add(server). }
false;public;0;7;;public ZooKeeperConfiguration copy() {     try {         return (ZooKeeperConfiguration) clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;0;3;;public List<String> getServers() {     return servers. }
true;public;0;10;/**  * The zookeeper server hosts (multiple servers can be separated by comma)  */ ;/**  * The zookeeper server hosts (multiple servers can be separated by comma)  */ public String getServerUrls() {     if (servers != null) {         CollectionStringBuffer csb = new CollectionStringBuffer(",").         for (String server : servers) {             csb.append(server).         }         return csb.toString().     }     return null. }
true;public;1;3;/**  * The zookeeper server hosts  */ ;/**  * The zookeeper server hosts  */ public void setServers(List<String> servers) {     this.servers = servers. }
false;public;0;3;;public int getTimeout() {     return timeout. }
true;public;1;3;/**  * The time interval to wait on connection before timing out.  */ ;/**  * The time interval to wait on connection before timing out.  */ public void setTimeout(int timeout) {     this.timeout = timeout. }
false;public;0;3;;public boolean isListChildren() {     return listChildren. }
true;public;1;3;/**  * Whether the children of the node should be listed  */ ;/**  * Whether the children of the node should be listed  */ public void setListChildren(boolean listChildren) {     this.listChildren = listChildren. }
false;public;0;9;;public String getConnectString() {     StringBuilder b = new StringBuilder().     for (String server : servers) {         b.append(server).append(",").     }     b.setLength(b.length() - 1).     return b.toString(). }
true;public;1;3;/**  * The node in the ZooKeeper server (aka znode)  */ ;/**  * The node in the ZooKeeper server (aka znode)  */ public void setPath(String path) {     this.path = path. }
false;public;0;3;;public String getPath() {     return path. }
false;public;0;3;;public boolean isRepeat() {     return repeat. }
true;public;1;3;/**  * Should changes to the znode be 'watched' and repeatedly processed.  */ ;/**  * Should changes to the znode be 'watched' and repeatedly processed.  */ public void setRepeat(boolean repeat) {     this.repeat = repeat. }
true;public;0;4;/**  * @deprecated The usage of this option has no effect at all.  */ ;/**  * @deprecated The usage of this option has no effect at all.  */ @Deprecated public boolean shouldAwaitExistence() {     return awaitExistence. }
true;public;1;4;/**  * Not in use  * @deprecated The usage of this option has no effect at all.  */ ;/**  * Not in use  * @deprecated The usage of this option has no effect at all.  */ @Deprecated public void setAwaitExistence(boolean awaitExistence) {     this.awaitExistence = awaitExistence. }
false;public;0;3;;public long getBackoff() {     return backoff. }
true;public;1;3;/**  * The time interval to backoff for after an error before retrying.  */ ;/**  * The time interval to backoff for after an error before retrying.  */ public void setBackoff(long backoff) {     this.backoff = backoff. }
false;public;0;3;;public boolean isCreate() {     return create. }
true;public;1;3;/**  * Should the endpoint create the node if it does not currently exist.  */ ;/**  * Should the endpoint create the node if it does not currently exist.  */ public void setCreate(boolean shouldCreate) {     this.create = shouldCreate. }
false;public;0;3;;public String getCreateMode() {     return createMode. }
true;public;1;3;/**  * The create mode that should be used for the newly created node  */ ;/**  * The create mode that should be used for the newly created node  */ public void setCreateMode(String createMode) {     this.createMode = createMode. }
false;public;0;3;;public boolean isSendEmptyMessageOnDelete() {     return sendEmptyMessageOnDelete. }
true;public;1;3;/**  * Upon the delete of a znode, should an empty message be send to the consumer  */ ;/**  * Upon the delete of a znode, should an empty message be send to the consumer  */ public void setSendEmptyMessageOnDelete(boolean sendEmptyMessageOnDelete) {     this.sendEmptyMessageOnDelete = sendEmptyMessageOnDelete. }
