commented;modifiers;parameterAmount;loc;comment;code
false;public;2;17;;@Override public void onExchangeBegin(Route route, Exchange exchange) {     ensureElectionIsCreated(route).     if (election.isMaster()) {         if (shouldStopConsumer) {             startConsumer(route).         }     } else {         if (shouldStopConsumer) {             stopConsumer(route).         }         IllegalStateException e = new IllegalStateException("Zookeeper based route policy prohibits processing exchanges, stopping route and failing the exchange").         exchange.setException(e).     } }
false;private;1;13;;private void ensureElectionIsCreated(Route route) {     if (election == null) {         electionLock.lock().         try {             if (election == null) {                 // re-test                 election = new ZooKeeperElection(route.getRouteContext().getCamelContext(), uri, enabledCount).                 election.addElectionWatcher(this).             }         } finally {             electionLock.unlock().         }     } }
false;private;1;13;;private void startConsumer(Route route) {     try {         lock.lock().         if (suspendedRoutes.contains(route)) {             startConsumer(route.getConsumer()).             suspendedRoutes.remove(route).         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;private;1;14;;private void stopConsumer(Route route) {     try {         lock.lock().         // check that we should still suspend once the lock is acquired         if (!suspendedRoutes.contains(route) && !shouldProcessExchanges.get()) {             stopConsumer(route.getConsumer()).             suspendedRoutes.add(route).         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;public;0;6;;@Override public void electionResultChanged() {     if (election.isMaster()) {         startAllStoppedConsumers().     } }
false;private;0;19;;private void startAllStoppedConsumers() {     try {         lock.lock().         if (!suspendedRoutes.isEmpty()) {             if (log.isDebugEnabled()) {                 log.debug("{} have been stopped previously by policy, restarting.", suspendedRoutes.size()).             }             for (Route suspended : suspendedRoutes) {                 startConsumer(suspended.getConsumer()).             }             suspendedRoutes.clear().         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;public;0;3;;public boolean isShouldStopConsumer() {     return shouldStopConsumer. }
false;public;1;3;;public void setShouldStopConsumer(boolean shouldStopConsumer) {     this.shouldStopConsumer = shouldStopConsumer. }
