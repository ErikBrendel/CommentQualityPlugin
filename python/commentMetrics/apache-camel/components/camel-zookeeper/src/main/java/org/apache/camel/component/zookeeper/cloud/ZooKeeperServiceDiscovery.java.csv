commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;30;;// ********************************************* // Lifecycle // ********************************************* @Override protected void doStart() throws Exception {     if (curator == null) {         // Validation         ObjectHelper.notNull(getCamelContext(), "Camel Context").         ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path").         LOGGER.debug("Starting ZooKeeper Curator with namespace '{}',  nodes: '{}'", configuration.getNamespace(), String.join(",", configuration.getNodes())).         curator = ZooKeeperCuratorHelper.createCurator(configuration).         curator.start().     }     if (serviceDiscovery == null) {         // Validation         ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path").         LOGGER.debug("Starting ZooKeeper ServiceDiscoveryBuilder with base path '{}'", configuration.getBasePath()).         serviceDiscovery = ZooKeeperCuratorHelper.createServiceDiscovery(configuration, curator, MetaData.class).         serviceDiscovery.start().     }     super.doStart(). }
false;protected;0;16;;@Override protected void doStop() throws Exception {     super.doStop().     if (serviceDiscovery != null) {         try {             serviceDiscovery.close().         } catch (Exception e) {             LOGGER.warn("Error closing Curator ServiceDiscovery", e).         }     }     if (curator != null && managedInstance) {         curator.close().     } }
false;public;1;26;;// ********************************************* // Implementation // ********************************************* @Override public List<ServiceDefinition> getServices(String name) {     if (serviceDiscovery == null) {         return Collections.emptyList().     }     try {         return serviceDiscovery.queryForInstances(name).stream().map(si -> {             Map<String, String> meta = new HashMap<>().             ObjectHelper.ifNotEmpty(si.getPayload(), meta::putAll).             meta.putIfAbsent(ServiceDefinition.SERVICE_META_NAME, si.getName()).             meta.putIfAbsent(ServiceDefinition.SERVICE_META_ID, si.getId()).             return new DefaultServiceDefinition(si.getName(), si.getAddress(), si.getSslPort() != null ? si.getSslPort() : si.getPort(), meta).         }).collect(Collectors.toList()).     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
