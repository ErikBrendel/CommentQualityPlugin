commented;modifiers;parameterAmount;loc;comment;code
false;public;1;26;;public void process(WatchedEvent event) {     this.event = event.     EventType received = event.getType().     if (LOG.isDebugEnabled()) {         LOG.debug(format("Recieved event of type %s for node '%s'", received, event.getPath())).     }     for (EventType watched : awaitedTypes) {         if (watched.equals(received)) {             result = getResult().             waitForAnyWatchedType.countDown().         }     }     if (LOG.isTraceEnabled() && waitForAnyWatchedType.getCount() > 0) {         StringBuilder b = new StringBuilder().         for (EventType type : awaitedTypes) {             b.append(type).append(", ").         }         if (b.length() > 0) {             b.setLength(b.length() - 2).         }         LOG.trace(String.format("Recieved event of type %s did not match any watched types %s", received, Arrays.toString(awaitedTypes))).     } }
false;public;0;6;;public OperationResult<ResultType> get() throws InterruptedException, ExecutionException {     installWatch().     waitingThreads.add(Thread.currentThread()).     waitForAnyWatchedType.await().     return result. }
false;public;2;6;;public OperationResult<ResultType> get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {     installWatch().     waitingThreads.add(Thread.currentThread()).     waitForAnyWatchedType.await(timeout, unit).     return result. }
true;protected,abstract;0;1;/**  * Install the watcher to receive {@link WatchedEvent}s. It should use the  * appropriate asynchronous ZooKeeper call to do this so as not to block the  * route from starting. Once one of the watched for types of event is  * received a call is made to getResult, which can use the appropriate  * synchronous call to retrieve the actual data.  */ ;/**  * Install the watcher to receive {@link WatchedEvent}s. It should use the  * appropriate asynchronous ZooKeeper call to do this so as not to block the  * route from starting. Once one of the watched for types of event is  * received a call is made to getResult, which can use the appropriate  * synchronous call to retrieve the actual data.  */ protected abstract void installWatch().
false;public;0;4;;@Override public WatchedEvent getWatchedEvent() {     return event. }
false;public;0;3;;public EventType[] getWatchedForTypes() {     return awaitedTypes. }
