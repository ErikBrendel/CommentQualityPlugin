commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;// stolen from org/apache/camel/processor/CamelInternalProcessor ;// stolen from org/apache/camel/processor/CamelInternalProcessor public static boolean isCamelStopping(CamelContext context) {     if (context instanceof StatefulService) {         StatefulService ss = (StatefulService) context.         return ss.isStopping() || ss.isStopped().     }     return false. }
false;public;0;7;;public void shutdownClients() {     try {         leaderSelector.returnLease(lease).     } finally {         client.close().     } }
true;public;0;11;/*      * Blocking method      */ ;/*      * Blocking method      */ public void requestResource() {     LOG.info("Requested to become active from {}", candidateName).     try {         lease = leaderSelector.acquire().     } catch (Exception e) {         throw new RuntimeException("Unable to obtain access to become a leader node.").     }     LOG.info("{} is now active", candidateName).     activeNode.set(true).     notifyElectionWatchers(). }
false;public;0;3;;public boolean isMaster() {     return activeNode.get(). }
false;private;0;12;;private String createCandidateName() {     StringBuilder builder = new StringBuilder().     try {         /* UUID would be enough, also using hostname for human readability */         builder.append(InetAddress.getLocalHost().getCanonicalHostName()).     } catch (UnknownHostException ex) {         LOG.warn("Failed to get the local hostname.", ex).         builder.append("unknown-host").     }     builder.append("-").append(uuidGenerator.generateUuid()).     return builder.toString(). }
false;public;0;3;;public String getCandidateName() {     return candidateName. }
false;private;0;9;;private void notifyElectionWatchers() {     for (ElectionWatcher watcher : watchers) {         try {             watcher.electionResultChanged().         } catch (Exception e) {             LOG.warn("Election watcher " + watcher + " of type " + watcher.getClass() + " threw an exception.", e).         }     } }
false;public;1;3;;public boolean addElectionWatcher(ElectionWatcher e) {     return watchers.add(e). }
false;public;2;21;;@Override public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {     switch(connectionState) {         case SUSPENDED:         case LOST:             LOG.info("Received {} state from connection. Giving up lock.", connectionState).             try {                 leaderSelector.returnLease(lease).             } finally {                 this.activeNode.set(false).                 notifyElectionWatchers().             }             break.         default:             LOG.info("Connection state changed: {}", connectionState).             requestResource().     } }
