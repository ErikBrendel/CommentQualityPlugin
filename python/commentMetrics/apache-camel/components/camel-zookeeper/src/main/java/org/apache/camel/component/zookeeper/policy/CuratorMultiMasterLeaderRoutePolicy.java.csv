commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void onInit(Route route) {     ensureElectionIsCreated().     LOG.info("Route managed by {}. Setting route [{}] AutoStartup flag to false.", this.getClass(), route.getId()).     RouteDefinition definition = (RouteDefinition) route.getRouteContext().getRoute().     definition.setAutoStartup("false").     if (election.isMaster()) {         if (shouldStopRoute) {             startManagedRoute(route).         }     } else {         if (shouldStopRoute) {             stopManagedRoute(route).         }     } }
false;private;0;16;;private void ensureElectionIsCreated() {     if (election == null) {         electionLock.lock().         try {             if (election == null) {                 // re-test                 election = new CuratorMultiMasterLeaderElection(uri, enabledCount).                 election.addElectionWatcher(this).             }         } catch (Exception e) {             throw new RuntimeException(e).         } finally {             electionLock.unlock().         }     } }
false;private;1;13;;private void startManagedRoute(Route route) {     try {         lock.lock().         if (suspendedRoutes.contains(route)) {             startRoute(route).             suspendedRoutes.remove(route).         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;private;1;14;;private void stopManagedRoute(Route route) {     try {         lock.lock().         // check that we should still suspend once the lock is acquired         if (!suspendedRoutes.contains(route) && !shouldProcessExchanges.get()) {             stopRoute(route).             suspendedRoutes.add(route).         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;public;0;6;;@Override public void electionResultChanged() {     if (election.isMaster()) {         startAllStoppedRoutes().     } }
false;private;0;26;;private void startAllStoppedRoutes() {     try {         lock.lock().         if (!suspendedRoutes.isEmpty()) {             if (log.isDebugEnabled()) {                 log.info("{} route(s) have been stopped previously by policy, restarting.", suspendedRoutes.size()).             }             for (Route suspended : suspendedRoutes) {                 DefaultCamelContext ctx = (DefaultCamelContext) suspended.getRouteContext().getCamelContext().                 while (!ctx.isStarted()) {                     log.info("Context {} is not started yet. Sleeping for a bit.", ctx.getName()).                     Thread.sleep(5000).                 }                 log.info("Starting route [{}] defined in context [{}].", suspended.getId(), ctx.getName()).                 startRoute(suspended).             }             suspendedRoutes.clear().         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;protected;0;10;;@Override protected void doShutdown() throws Exception {     try {         electionLock.lock().         election.shutdownClients().         election = null.     } finally {         electionLock.unlock().     } }
false;public;0;3;;public CuratorMultiMasterLeaderElection getElection() {     return election. }
