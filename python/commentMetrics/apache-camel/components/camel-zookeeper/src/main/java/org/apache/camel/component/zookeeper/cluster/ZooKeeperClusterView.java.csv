commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return this.localMember. }
false;public;0;19;;@Override public Optional<CamelClusterMember> getLeader() {     if (leaderSelector == null || isStoppingOrStopped()) {         return Optional.empty().     }     try {         Participant participant = leaderSelector.getLeader().         return ObjectHelper.equal(participant.getId(), localMember.getId()) ? Optional.of(localMember) : Optional.of(new CuratorClusterMember(participant)).     } catch (KeeperException.NoNodeException e) {         LOGGER.debug("Failed to get get master because node '{}' does not yet exist (error: '{}')", configuration.getBasePath(), e.getMessage()).         return Optional.empty().     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;public;0;18;;@Override public List<CamelClusterMember> getMembers() {     if (leaderSelector == null) {         return Collections.emptyList().     }     try {         return leaderSelector.getParticipants().stream().map(CuratorClusterMember::new).collect(Collectors.toList()).     } catch (KeeperException.NoNodeException e) {         LOGGER.debug("Failed to get members because node '{}' does not yet exist (error: '{}')", configuration.getBasePath(), e.getMessage()).         return Collections.emptyList().     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;protected;0;10;;@Override protected void doStart() throws Exception {     if (leaderSelector == null) {         leaderSelector = new LeaderSelector(client, configuration.getBasePath(), new CamelLeaderElectionListener()).         leaderSelector.setId(getClusterService().getId()).         leaderSelector.start().     } else {         leaderSelector.requeue().     } }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (leaderSelector != null) {         leaderSelector.interruptLeadership().         fireLeadershipChangedEvent(getLeader()).     } }
false;protected;0;6;;@Override protected void doShutdown() throws Exception {     if (leaderSelector != null) {         leaderSelector.close().     } }
false;public;1;15;;@Override public void takeLeadership(CuratorFramework curatorFramework) throws Exception {     fireLeadershipChangedEvent(Optional.of(localMember)).     while (isRunAllowed()) {         try {             Thread.sleep(5000).         } catch (InterruptedException e) {             Thread.interrupted().             break.         }     }     fireLeadershipChangedEvent(getLeader()). }
false;public;0;4;;@Override public boolean isLeader() {     return leaderSelector != null ? leaderSelector.hasLeadership() : false. }
false;public;0;4;;@Override public boolean isLocal() {     return true. }
false;public;0;4;;@Override public String getId() {     return getClusterService().getId(). }
false;public;0;4;;@Override public String getId() {     return participant.getId(). }
false;public;0;6;;@Override public boolean isLocal() {     return (participant.getId() != null) ? ObjectHelper.equal(participant.getId(), localMember.getId()) : false. }
false;public;0;9;;@Override public boolean isLeader() {     try {         return leaderSelector.getLeader().equals(this.participant).     } catch (Exception e) {         LOGGER.debug("", e).         return false.     } }
