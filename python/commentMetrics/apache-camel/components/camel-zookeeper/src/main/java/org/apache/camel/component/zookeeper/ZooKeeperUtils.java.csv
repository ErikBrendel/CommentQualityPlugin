commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;14;/**  * Pulls a createMode flag from the header keyed by  * {@link ZooKeeperMessage#ZOOKEEPER_CREATE_MODE} in the given message and  * attempts to parse a {@link CreateMode} from it.  *  * @param message the message that may contain a ZOOKEEPER_CREATE_MODE  *            header.  * @return the parsed {@link CreateMode} or null if the header was null or  *         not a valid mode flag.  */ ;/**  * Pulls a createMode flag from the header keyed by  * {@link ZooKeeperMessage#ZOOKEEPER_CREATE_MODE} in the given message and  * attempts to parse a {@link CreateMode} from it.  *  * @param message the message that may contain a ZOOKEEPER_CREATE_MODE  *            header.  * @return the parsed {@link CreateMode} or null if the header was null or  *         not a valid mode flag.  */ public static CreateMode getCreateMode(Message message, CreateMode defaultMode) {     CreateMode mode = null.     try {         mode = message.getHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, CreateMode.class).     } catch (Exception e) {     }     if (mode == null) {         String modeHeader = message.getHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, String.class).         mode = getCreateModeFromString(modeHeader, defaultMode).     }     return mode == null ? defaultMode : mode. }
false;public,static;2;11;;public static CreateMode getCreateModeFromString(String modeHeader, CreateMode defaultMode) {     CreateMode mode = null.     if (modeHeader != null) {         try {             mode = CreateMode.valueOf(modeHeader).         } catch (Exception e) {         }     }     return mode == null ? defaultMode : mode. }
true;public,static;2;3;/**  * Pulls the target node from the header keyed by  * {@link ZooKeeperMessage#ZOOKEEPER_NODE}. This node is then typically used  * in place of the configured node extracted from the endpoint uri.  *  * @param message the message that may contain a ZOOKEEPER_NODE header.  * @return the node property or null if the header was null  */ ;/**  * Pulls the target node from the header keyed by  * {@link ZooKeeperMessage#ZOOKEEPER_NODE}. This node is then typically used  * in place of the configured node extracted from the endpoint uri.  *  * @param message the message that may contain a ZOOKEEPER_NODE header.  * @return the node property or null if the header was null  */ public static String getNodeFromMessage(Message message, String defaultNode) {     return getZookeeperProperty(message, ZooKeeperMessage.ZOOKEEPER_NODE, defaultNode, String.class). }
false;public,static;1;3;;public static Integer getVersionFromMessage(Message message) {     return getZookeeperProperty(message, ZooKeeperMessage.ZOOKEEPER_NODE_VERSION, -1, Integer.class). }
false;public,static;1;3;;public static byte[] getPayloadFromExchange(Exchange exchange) {     return ExchangeHelper.convertToType(exchange, byte[].class, exchange.getIn().getBody()). }
false;public,static;1;4;;@SuppressWarnings("unchecked") public static List<ACL> getAclListFromMessage(Message in) {     return getZookeeperProperty(in, ZooKeeperMessage.ZOOKEEPER_ACL, Ids.OPEN_ACL_UNSAFE, List.class). }
false;public,static;4;7;;public static <T> T getZookeeperProperty(Message m, String propertyName, T defaultValue, Class<? extends T> type) {     T value = m.getHeader(propertyName, type).     if (value == null) {         value = defaultValue.     }     return value. }
false;public,static;1;7;;public static WatchedEvent getWatchedEvent(ZooKeeperOperation<?> zooKeeperOperation) {     WatchedEvent watchedEvent = null.     if (zooKeeperOperation instanceof WatchedEventProvider) {         watchedEvent = ((WatchedEventProvider) zooKeeperOperation).getWatchedEvent().     }     return watchedEvent. }
false;public,static;1;3;;public static boolean hasWatchedEvent(ZooKeeperOperation<?> zooKeeperOperation) {     return getWatchedEvent(zooKeeperOperation) != null. }
