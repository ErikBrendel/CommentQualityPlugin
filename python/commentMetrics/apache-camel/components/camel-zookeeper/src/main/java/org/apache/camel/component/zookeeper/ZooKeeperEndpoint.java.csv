commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new ZooKeeperProducer(this). }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     ZooKeeperConsumer answer = new ZooKeeperConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;3;;public void setConfiguration(ZooKeeperConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public ZooKeeperConfiguration getConfiguration() {     return configuration. }
false;;0;3;;ZooKeeperConnectionManager getConnectionManager() {     return connectionManager. }
false;public;1;3;;public void setPath(String path) {     getConfiguration().setPath(path). }
false;public;0;4;;@ManagedAttribute public String getPath() {     return getConfiguration().getPath(). }
false;public;0;4;;@ManagedAttribute public int getTimeout() {     return getConfiguration().getTimeout(). }
false;public;1;3;;public void setTimeout(int timeout) {     getConfiguration().setTimeout(timeout). }
false;public;0;4;;@ManagedAttribute public boolean getRepeat() {     return getConfiguration().isRepeat(). }
false;public;1;3;;public void setRepeat(boolean shouldRepeat) {     getConfiguration().setRepeat(shouldRepeat). }
false;public;0;4;;@ManagedAttribute public List<String> getServers() {     return getConfiguration().getServers(). }
false;public;1;3;;public void setServers(List<String> servers) {     getConfiguration().setServers(servers). }
false;public;0;4;;@ManagedAttribute public boolean isListChildren() {     return getConfiguration().isListChildren(). }
false;public;1;3;;public void setListChildren(boolean listChildren) {     getConfiguration().setListChildren(listChildren). }
false;public;0;4;;@ManagedAttribute public boolean getCreate() {     return getConfiguration().isCreate(). }
false;public;1;3;;public void setCreate(boolean shouldCreate) {     getConfiguration().setCreate(shouldCreate). }
false;public;0;4;;@ManagedAttribute public long getBackoff() {     return getConfiguration().getBackoff(). }
false;public;1;3;;public void setBackoff(long backoff) {     getConfiguration().setBackoff(backoff). }
true;public;0;4;/**  * @deprecated The usage of this property has no effect at all.  */ ;/**  * @deprecated The usage of this property has no effect at all.  */ @Deprecated public boolean getAwaitExistence() {     return getConfiguration().shouldAwaitExistence(). }
true;public;1;4;/**  * @deprecated The usage of this property has no effect at all.  */ ;/**  * @deprecated The usage of this property has no effect at all.  */ @Deprecated public void setAwaitExistence(boolean awaitExistence) {     getConfiguration().setAwaitExistence(awaitExistence). }
false;public;1;4;;@ManagedOperation public void addServer(String server) {     getConfiguration().addZookeeperServer(server). }
false;public;0;4;;@ManagedOperation public void clearServers() {     getConfiguration().getServers().clear(). }
false;public;0;4;;@ManagedAttribute public boolean isSendEmptyMessageOnDelete() {     return getConfiguration().isSendEmptyMessageOnDelete(). }
false;public;1;3;;public void setSendEmptyMessageOnDelete(boolean sendEmptyMessageOnDelete) {     getConfiguration().setSendEmptyMessageOnDelete(sendEmptyMessageOnDelete). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (connectionManager != null) {         // It releases the zookeeper connection when calling the shutdown method         connectionManager.shutdown().     } }
