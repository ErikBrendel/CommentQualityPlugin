commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;14;;@Override protected void doStart() throws Exception {     super.doStart().     connection = zkm.getConnection().     if (log.isDebugEnabled()) {         log.debug(String.format("Connected to Zookeeper cluster %s", configuration.getConnectString())).     }     initializeConsumer().     executor = getEndpoint().getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, "Camel-Zookeeper OperationsExecutor", 1).     OperationsExecutor opsService = new OperationsExecutor().     executor.submit(opsService). }
false;protected;0;10;;@Override protected void doStop() throws Exception {     super.doStop().     shuttingDown = true.     if (log.isTraceEnabled()) {         log.trace(String.format("Shutting down zookeeper consumer of '%s'", configuration.getPath())).     }     getEndpoint().getCamelContext().getExecutorServiceManager().shutdown(executor).     zkm.shutdown(). }
false;private;0;8;;private void initializeConsumer() {     String node = configuration.getPath().     if (configuration.isListChildren()) {         initializeChildListingConsumer(node).     } else {         initializeDataConsumer(node).     } }
false;private;1;8;;private void initializeDataConsumer(String node) {     if (!shuttingDown) {         if (log.isDebugEnabled()) {             log.debug(String.format("Initializing consumption of data on node '%s'", node)).         }         addBasicDataConsumeSequence(node).     } }
false;private;1;8;;private void initializeChildListingConsumer(String node) {     if (!shuttingDown) {         if (log.isDebugEnabled()) {             log.debug(String.format("Initializing child listing of node '%s'", node)).         }         addBasicChildListingSequence(node).     } }
false;private;3;11;;private Exchange createExchange(String path, OperationResult result, WatchedEvent watchedEvent) {     Exchange exchange = getEndpoint().createExchange().     ZooKeeperMessage in = new ZooKeeperMessage(getEndpoint().getCamelContext(), path, result.getStatistics(), watchedEvent).     exchange.setIn(in).     if (result.isOk()) {         in.setBody(result.getResult()).     } else {         exchange.setException(result.getException()).     }     return exchange. }
false;public;0;34;;public void run() {     while (isRunAllowed()) {         try {             current = operations.take().             if (log.isTraceEnabled()) {                 log.trace(String.format("Processing '%s' operation", current.getClass().getSimpleName())).             }         } catch (InterruptedException e) {             continue.         }         String node = current.getNode().         try {             OperationResult result = current.get().             if (ZooKeeperUtils.hasWatchedEvent(current)) {                 watchedEvent = ZooKeeperUtils.getWatchedEvent(current).             }             if (result != null && current.shouldProduceExchange()) {                 getProcessor().process(createExchange(node, result, watchedEvent)).                 watchedEvent = null.             }         } catch (Exception e) {             handleException(e).             backoffAndThenRestart().         } finally {             if (configuration.isRepeat()) {                 try {                     operations.offer(current.createCopy()).                 } catch (Exception e) {                     backoffAndThenRestart().                 }             }         }     } }
false;private;0;10;;private void backoffAndThenRestart() {     try {         if (isRunAllowed()) {             Thread.sleep(configuration.getBackoff()).             initializeConsumer().         }     } catch (Exception e) {     // ignore     } }
false;private;1;6;;private void addBasicDataConsumeSequence(String node) {     operations.clear().     operations.add(new AnyOfOperations(node, new ExistsOperation(connection, node), new ExistenceChangedOperation(connection, node))).     operations.add(new GetDataOperation(connection, node)).     operations.add(new DataChangedOperation(connection, node, false, configuration.isSendEmptyMessageOnDelete())). }
false;private;1;6;;private void addBasicChildListingSequence(String node) {     operations.clear().     operations.add(new AnyOfOperations(node, new ExistsOperation(connection, node), new ExistenceChangedOperation(connection, node))).     operations.add(new GetChildrenOperation(connection, node)).     operations.add(new ChildrenChangedOperation(connection, node, false)). }
