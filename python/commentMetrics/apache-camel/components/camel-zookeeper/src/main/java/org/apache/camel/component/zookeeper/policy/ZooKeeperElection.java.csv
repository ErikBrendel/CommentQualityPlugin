commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public boolean isMaster() {     if (!isCandidateCreated) {         testAndCreateCandidateNode().         awaitElectionResults().     }     return masterNode.get(). }
false;private;0;12;;private String createCandidateName() {     StringBuilder builder = new StringBuilder().     try {         /* UUID would be enough, also using hostname for human readability */         builder.append(InetAddress.getLocalHost().getCanonicalHostName()).     } catch (UnknownHostException ex) {         LOG.warn("Failed to get the local hostname.", ex).         builder.append("unknown-host").     }     builder.append("-").append(uuidGenerator.generateUuid()).     return builder.toString(). }
false;private;0;13;;private void testAndCreateCandidateNode() {     try {         lock.lock().         if (!isCandidateCreated) {             createCandidateNode(camelContext).             isCandidateCreated = true.         }     } catch (Exception e) {         handleException(e).     } finally {         lock.unlock().     } }
false;private;0;10;;private void awaitElectionResults() {     while (electionComplete.getCount() > 0) {         try {             LOG.debug("Awaiting election results...").             electionComplete.await().         } catch (InterruptedException e1) {         // do nothing here         }     } }
false;private;1;24;;private ZooKeeperEndpoint createCandidateNode(CamelContext camelContext) {     LOG.info("Initializing ZookeeperElection with uri '{}'", uri).     ZooKeeperEndpoint zep = camelContext.getEndpoint(uri, ZooKeeperEndpoint.class).     zep.getConfiguration().setCreate(true).     String fullpath = createFullPathToCandidate(zep).     Exchange e = zep.createExchange().     e.setPattern(ExchangePattern.InOut).     e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_NODE, fullpath).     e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, CreateMode.EPHEMERAL_SEQUENTIAL).     producerTemplate.send(zep, e).     if (e.isFailed()) {         LOG.warn("Error setting up election node {}", fullpath, e.getException()).     } else {         LOG.info("Candidate node '{}' has been created", fullpath).         try {             camelContext.addRoutes(new ElectoralMonitorRoute(zep)).         } catch (Exception ex) {             LOG.warn("Error configuring ZookeeperElection", ex).         }     }     return zep. }
false;private;1;8;;private String createFullPathToCandidate(ZooKeeperEndpoint zep) {     String fullpath = zep.getConfiguration().getPath().     if (!fullpath.endsWith("/")) {         fullpath += "/".     }     fullpath += candidateName.     return fullpath. }
false;private;1;3;;private void handleException(Exception e) {     throw new RuntimeException(e.getMessage(), e). }
false;private;0;9;;private void notifyElectionWatchers() {     for (ElectionWatcher watcher : watchers) {         try {             watcher.electionResultChanged().         } catch (Exception e) {             LOG.warn("Election watcher " + watcher + " of type " + watcher.getClass() + " threw an exception.", e).         }     } }
false;public;1;3;;public boolean addElectionWatcher(ElectionWatcher e) {     return watchers.add(e). }
false;public;1;3;;public boolean removeElectionWatcher(ElectionWatcher o) {     return watchers.remove(o). }
false;public;1;21;;@Override public void process(Exchange e) throws Exception {     @SuppressWarnings("unchecked")     List<String> candidates = e.getIn().getMandatoryBody(List.class).     // we cannot use the binary search here and the candidates a not sorted in the normal way     /**      * check if the item at this location starts with this nodes      * candidate name      */     int location = findCandidateLocationInCandidatesList(candidates, candidateName).     if (location != -1) {         // set the nodes         masterNode.set(location <= enabledCount).         LOG.debug("This node is number '{}' on the candidate list, election is configured for the top '{}'. this node will be {}", new Object[] { location, enabledCount, masterNode.get() ? "enabled" : "disabled" }).     }     electionComplete.countDown().     notifyElectionWatchers(). }
false;private;2;9;;private int findCandidateLocationInCandidatesList(List<String> candidates, String candidateName) {     for (int location = 1. location <= candidates.size(). location++) {         if (candidates.get(location - 1).startsWith(candidateName)) {             return location.         }     }     return -1. }
false;public;0;49;;@Override public void configure() throws Exception {     /**      * TODO: this is cheap cheerful but suboptimal. it suffers from the      * 'herd effect' that on any change to the candidates list every      * policy instance will ask for the entire candidate list again.      * This is fine for small numbers of nodes (for scenarios like      * Master-Slave it is perfect) but could get noisy if large numbers      * of nodes were involved. <p> Better would be to find the position      * of this node in the list and watch the node in the position ahead      * node ahead of this and only request the candidate list when its      * status changes. This will require enhancing the consumer to allow      * custom operation lists.      */     from(zep).id("election-route-" + candidateName).sort(body(), comparator).process(new Processor() {          @Override         public void process(Exchange e) throws Exception {             @SuppressWarnings("unchecked")             List<String> candidates = e.getIn().getMandatoryBody(List.class).             // we cannot use the binary search here and the candidates a not sorted in the normal way             /**              * check if the item at this location starts with this nodes              * candidate name              */             int location = findCandidateLocationInCandidatesList(candidates, candidateName).             if (location != -1) {                 // set the nodes                 masterNode.set(location <= enabledCount).                 LOG.debug("This node is number '{}' on the candidate list, election is configured for the top '{}'. this node will be {}", new Object[] { location, enabledCount, masterNode.get() ? "enabled" : "disabled" }).             }             electionComplete.countDown().             notifyElectionWatchers().         }          private int findCandidateLocationInCandidatesList(List<String> candidates, String candidateName) {             for (int location = 1. location <= candidates.size(). location++) {                 if (candidates.get(location - 1).startsWith(candidateName)) {                     return location.                 }             }             return -1.         }     }). }
