commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// **************** // Properties // **************** public ZooKeeperServiceRegistryConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(ZooKeeperServiceRegistryConfiguration configuration) {     this.configuration = configuration.copy(). }
false;public;0;3;;public CuratorFramework getCuratorFramework() {     return configuration.getCuratorFramework(). }
false;public;1;3;;public void setCuratorFramework(CuratorFramework curatorFramework) {     configuration.setCuratorFramework(curatorFramework). }
false;public;0;3;;public List<String> getNodes() {     return configuration.getNodes(). }
false;public;1;3;;public void setNodes(String nodes) {     configuration.setNodes(nodes). }
false;public;1;3;;public void setNodes(List<String> nodes) {     configuration.setNodes(nodes). }
false;public;0;3;;public String getNamespace() {     return configuration.getNamespace(). }
false;public;1;3;;public void setNamespace(String namespace) {     configuration.setNamespace(namespace). }
false;public;0;3;;public long getReconnectBaseSleepTime() {     return configuration.getReconnectBaseSleepTime(). }
false;public;1;3;;public void setReconnectBaseSleepTime(long reconnectBaseSleepTime) {     configuration.setReconnectBaseSleepTime(reconnectBaseSleepTime). }
false;public;2;3;;public void setReconnectBaseSleepTime(long reconnectBaseSleepTime, TimeUnit reconnectBaseSleepTimeUnit) {     configuration.setReconnectBaseSleepTime(reconnectBaseSleepTime, reconnectBaseSleepTimeUnit). }
false;public;0;3;;public TimeUnit getReconnectBaseSleepTimeUnit() {     return configuration.getReconnectBaseSleepTimeUnit(). }
false;public;1;3;;public void setReconnectBaseSleepTimeUnit(TimeUnit reconnectBaseSleepTimeUnit) {     configuration.setReconnectBaseSleepTimeUnit(reconnectBaseSleepTimeUnit). }
false;public;0;3;;public long getReconnectMaxSleepTime() {     return configuration.getReconnectMaxSleepTime(). }
false;public;1;3;;public void setReconnectMaxSleepTime(long reconnectMaxSleepTime) {     configuration.setReconnectMaxSleepTime(reconnectMaxSleepTime). }
false;public;2;3;;public void setReconnectMaxSleepTime(long reconnectMaxSleepTime, TimeUnit reconnectBaseSleepTimeUnit) {     configuration.setReconnectMaxSleepTime(reconnectMaxSleepTime, reconnectBaseSleepTimeUnit). }
false;public;0;3;;public TimeUnit getReconnectMaxSleepTimeUnit() {     return configuration.getReconnectMaxSleepTimeUnit(). }
false;public;1;3;;public void setReconnectMaxSleepTimeUnit(TimeUnit reconnectMaxSleepTimeUnit) {     configuration.setReconnectMaxSleepTimeUnit(reconnectMaxSleepTimeUnit). }
false;public;0;3;;public int getReconnectMaxRetries() {     return configuration.getReconnectMaxRetries(). }
false;public;1;3;;public void setReconnectMaxRetries(int reconnectMaxRetries) {     configuration.setReconnectMaxRetries(reconnectMaxRetries). }
false;public;0;3;;public long getSessionTimeout() {     return configuration.getSessionTimeout(). }
false;public;1;3;;public void setSessionTimeout(long sessionTimeout) {     configuration.setSessionTimeout(sessionTimeout). }
false;public;2;3;;public void setSessionTimeout(long sessionTimeout, TimeUnit sessionTimeoutUnit) {     configuration.setSessionTimeout(sessionTimeout, sessionTimeoutUnit). }
false;public;0;3;;public TimeUnit getSessionTimeoutUnit() {     return configuration.getSessionTimeoutUnit(). }
false;public;1;3;;public void setSessionTimeoutUnit(TimeUnit sessionTimeoutUnit) {     configuration.setSessionTimeoutUnit(sessionTimeoutUnit). }
false;public;0;3;;public long getConnectionTimeout() {     return configuration.getConnectionTimeout(). }
false;public;1;3;;public void setConnectionTimeout(long connectionTimeout) {     configuration.setConnectionTimeout(connectionTimeout). }
false;public;2;3;;public void setConnectionTimeout(long connectionTimeout, TimeUnit connectionTimeotUnit) {     configuration.setConnectionTimeout(connectionTimeout, connectionTimeotUnit). }
false;public;0;3;;public TimeUnit getConnectionTimeoutUnit() {     return configuration.getConnectionTimeoutUnit(). }
false;public;1;3;;public void setConnectionTimeoutUnit(TimeUnit connectionTimeoutUnit) {     configuration.setConnectionTimeoutUnit(connectionTimeoutUnit). }
false;public;0;3;;public List<AuthInfo> getAuthInfoList() {     return configuration.getAuthInfoList(). }
false;public;1;3;;public void setAuthInfoList(List<AuthInfo> authInfoList) {     configuration.setAuthInfoList(authInfoList). }
false;public;0;3;;public long getMaxCloseWait() {     return configuration.getMaxCloseWait(). }
false;public;1;3;;public void setMaxCloseWait(long maxCloseWait) {     configuration.setMaxCloseWait(maxCloseWait). }
false;public;0;3;;public TimeUnit getMaxCloseWaitUnit() {     return configuration.getMaxCloseWaitUnit(). }
false;public;1;3;;public void setMaxCloseWaitUnit(TimeUnit maxCloseWaitUnit) {     configuration.setMaxCloseWaitUnit(maxCloseWaitUnit). }
false;public;0;3;;public RetryPolicy getRetryPolicy() {     return configuration.getRetryPolicy(). }
false;public;1;3;;public void setRetryPolicy(RetryPolicy retryPolicy) {     configuration.setRetryPolicy(retryPolicy). }
false;public;0;3;;public String getBasePath() {     return configuration.getBasePath(). }
false;public;1;3;;public void setBasePath(String basePath) {     configuration.setBasePath(basePath). }
false;public;0;3;;public boolean isDeregisterServicesOnStop() {     return configuration.isDeregisterServicesOnStop(). }
false;public;1;3;;public void setDeregisterServicesOnStop(boolean deregisterServicesOnStop) {     configuration.setDeregisterServicesOnStop(deregisterServicesOnStop). }
false;public;0;3;;public boolean isOverrideServiceHost() {     return configuration.isOverrideServiceHost(). }
false;public;1;3;;public void setOverrideServiceHost(boolean overrideServiceHost) {     configuration.setOverrideServiceHost(overrideServiceHost). }
false;public;0;3;;public String getServiceHost() {     return configuration.getServiceHost(). }
false;public;1;3;;public void setServiceHost(String serviceHost) {     configuration.setServiceHost(serviceHost). }
false;protected;0;28;;// **************** // Lifecycle // **************** @Override protected void doStart() throws Exception {     if (curator == null) {         // Validation         ObjectHelper.notNull(getCamelContext(), "Camel Context").         ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path").         LOGGER.debug("Starting ZooKeeper Curator with namespace '{}', nodes: '{}'", configuration.getNamespace(), String.join(",", configuration.getNodes())).         curator = ZooKeeperCuratorHelper.createCurator(configuration).         curator.start().     }     if (serviceDiscovery == null) {         // Validation         ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path").         LOGGER.debug("Starting ZooKeeper ServiceDiscoveryBuilder with base path '{}'", configuration.getBasePath()).         serviceDiscovery = ZooKeeperCuratorHelper.createServiceDiscovery(configuration, curator, MetaData.class).         serviceDiscovery.start().     } }
false;protected;0;27;;@Override protected void doStop() throws Exception {     if (serviceDiscovery != null) {         try {             if (configuration.isDeregisterServicesOnStop()) {                 for (String serviceName : serviceDiscovery.queryForNames()) {                     for (ServiceInstance<MetaData> serviceInstance : serviceDiscovery.queryForInstances(serviceName)) {                         if (serviceList.contains(serviceInstance.getId())) {                             serviceDiscovery.unregisterService(serviceInstance).                             // remove the serviceId to the list of known server                             serviceList.remove(serviceInstance.getId()).                         }                     }                 }             }             serviceDiscovery.close().         } catch (Exception e) {             LOGGER.warn("Error closing Curator ServiceDiscovery", e).         }     }     if (curator != null && managedInstance) {         curator.close().     } }
false;public;1;26;;// **************** // Registry // **************** @Override public void register(ServiceDefinition definition) {     if (definition.getId() == null) {         throw new IllegalArgumentException("Service ID must be defined (definition=" + definition + ")").     }     if (definition.getName() == null) {         throw new IllegalArgumentException("Service Name must be defined (definition=" + definition + ")").     }     try {         ServiceInstance<MetaData> instance = ServiceInstance.<MetaData>builder().address(computeServiceHost(definition)).port(definition.getPort()).name(definition.getName()).id(definition.getId()).payload(new MetaData(definition.getMetadata())).build().         serviceDiscovery.registerService(instance).         // add the serviceId to the list of known server         serviceList.add(definition.getId()).     } catch (Exception e) {         LOGGER.warn("", e).     } }
false;public;1;22;;@Override public void deregister(ServiceDefinition definition) {     if (definition.getId() == null) {         throw new IllegalArgumentException("Service ID must be defined (definition=" + definition + ")").     }     if (definition.getName() == null) {         throw new IllegalArgumentException("Service Name must be defined (definition=" + definition + ")").     }     try {         for (ServiceInstance<MetaData> serviceInstance : serviceDiscovery.queryForInstances(definition.getName())) {             if (Objects.equals(serviceInstance.getId(), definition.getId())) {                 serviceDiscovery.unregisterService(serviceInstance).                 // remove the serviceId to the list of known server                 serviceList.remove(serviceInstance.getId()).             }         }     } catch (Exception e) {         LOGGER.warn("", e).     } }
false;private;1;9;;// ********************************************* // Helpers // ********************************************* private String computeServiceHost(ServiceDefinition definition) {     String host = definition.getHost().     if (configuration.isOverrideServiceHost() && configuration.getServiceHost() != null) {         host = configuration.getServiceHost().     }     return ObjectHelper.notNull(host, "service host"). }
