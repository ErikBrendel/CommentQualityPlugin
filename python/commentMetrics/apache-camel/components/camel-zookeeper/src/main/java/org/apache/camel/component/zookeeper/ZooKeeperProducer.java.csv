commented;modifiers;parameterAmount;loc;comment;code
false;public;1;41;;public void process(Exchange exchange) throws Exception {     if (connection == null) {         connection = this.zkm.getConnection().     }     ProductionContext context = new ProductionContext(connection, exchange).     String operation = exchange.getIn().getHeader(ZooKeeperMessage.ZOOKEEPER_OPERATION, String.class).     boolean isDelete = ZK_OPERATION_DELETE.equals(operation).     if (ExchangeHelper.isOutCapable(exchange)) {         if (isDelete) {             if (log.isDebugEnabled()) {                 log.debug(format("Deleting znode '%s', waiting for confirmation", context.node)).             }             OperationResult result = synchronouslyDelete(context).             if (configuration.isListChildren()) {                 result = listChildren(context).             }             updateExchangeWithResult(context, result).         } else {             if (log.isDebugEnabled()) {                 log.debug(format("Storing data to znode '%s', waiting for confirmation", context.node)).             }             OperationResult result = synchronouslySetData(context).             if (configuration.isListChildren()) {                 result = listChildren(context).             }             updateExchangeWithResult(context, result).         }     } else {         if (isDelete) {             asynchronouslyDeleteNode(connection, context).         } else {             asynchronouslySetDataOnNode(connection, context).         }     } }
false;protected;0;7;;@Override protected void doStart() throws Exception {     connection = zkm.getConnection().     if (log.isTraceEnabled()) {         log.trace(String.format("Starting zookeeper producer of '%s'", configuration.getPath())).     } }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     if (log.isTraceEnabled()) {         log.trace(String.format("Shutting down zookeeper producer of '%s'", configuration.getPath())).     }     zkm.shutdown(). }
false;private;2;7;;private void asynchronouslyDeleteNode(ZooKeeper connection, ProductionContext context) {     if (log.isDebugEnabled()) {         log.debug(format("Deleting node '%s', not waiting for confirmation", context.node)).     }     connection.delete(context.node, context.version, new AsyncDeleteCallback(), context). }
false;private;2;6;;private void asynchronouslySetDataOnNode(ZooKeeper connection, ProductionContext context) {     if (log.isDebugEnabled()) {         log.debug(format("Storing data to node '%s', not waiting for confirmation", context.node)).     }     connection.setData(context.node, context.payload, context.version, new AsyncSetDataCallback(), context). }
false;private;2;10;;private void updateExchangeWithResult(ProductionContext context, OperationResult result) {     ZooKeeperMessage out = new ZooKeeperMessage(getEndpoint().getCamelContext(), context.node, result.getStatistics(), context.in.getHeaders()).     if (result.isOk()) {         out.setBody(result.getResult()).     } else {         context.exchange.setException(result.getException()).     }     context.exchange.setOut(out). }
false;private;1;3;;private OperationResult listChildren(ProductionContext context) throws Exception {     return new GetChildrenOperation(context.connection, configuration.getPath()).get(). }
false;public;4;20;;public void processResult(int rc, String node, Object ctx, Stat statistics) {     if (Code.NONODE.equals(Code.get(rc))) {         if (configuration.isCreate()) {             log.warn(format("Node '%s' did not exist, creating it...", node)).             ProductionContext context = (ProductionContext) ctx.             OperationResult<String> result = null.             try {                 result = createNode(context).             } catch (Exception e) {                 log.error(format("Error trying to create node '%s'", node), e).             }             if (result == null || !result.isOk()) {                 log.error(format("Error creating node '%s'", node), result.getException()).             }         }     } else {         logStoreComplete(node, statistics).     } }
false;public;3;10;;@Override public void processResult(int rc, String path, Object ctx) {     if (log.isDebugEnabled()) {         if (log.isTraceEnabled()) {             log.trace(format("Removed data node '%s'", path)).         } else {             log.debug(format("Removed data node '%s'", path)).         }     } }
false;private;1;17;;private OperationResult<String> createNode(ProductionContext ctx) throws Exception {     CreateOperation create = new CreateOperation(ctx.connection, ctx.node).     create.setPermissions(getAclListFromMessage(ctx.exchange.getIn())).     CreateMode mode = null.     String modeString = configuration.getCreateMode().     if (modeString != null) {         try {             mode = getCreateModeFromString(modeString, CreateMode.EPHEMERAL).         } catch (Exception e) {         }     } else {         mode = getCreateMode(ctx.exchange.getIn(), CreateMode.EPHEMERAL).     }     create.setCreateMode(mode == null ? CreateMode.EPHEMERAL : mode).     create.setData(ctx.payload).     return create.get(). }
true;private;1;13;/**  * Tries to set the data first and if a no node error is received then an  * attempt will be made to create it instead.  */ ;/**  * Tries to set the data first and if a no node error is received then an  * attempt will be made to create it instead.  */ private OperationResult synchronouslySetData(ProductionContext ctx) throws Exception {     SetDataOperation setData = new SetDataOperation(ctx.connection, ctx.node, ctx.payload).     setData.setVersion(ctx.version).     OperationResult result = setData.get().     if (!result.isOk() && configuration.isCreate() && result.failedDueTo(Code.NONODE)) {         log.warn(format("Node '%s' did not exist, creating it.", ctx.node)).         result = createNode(ctx).     }     return result. }
false;private;1;12;;private OperationResult synchronouslyDelete(ProductionContext ctx) throws Exception {     DeleteOperation setData = new DeleteOperation(ctx.connection, ctx.node).     setData.setVersion(ctx.version).     OperationResult result = setData.get().     if (!result.isOk() && configuration.isCreate() && result.failedDueTo(Code.NONODE)) {         log.warn(format("Node '%s' did not exist, creating it.", ctx.node)).         result = createNode(ctx).     }     return result. }
false;private;2;9;;private void logStoreComplete(String path, Stat statistics) {     if (log.isDebugEnabled()) {         if (log.isTraceEnabled()) {             log.trace(format("Stored data to node '%s', and receive statistics %s", path, statistics)).         } else {             log.debug(format("Stored data to node '%s'", path)).         }     } }
