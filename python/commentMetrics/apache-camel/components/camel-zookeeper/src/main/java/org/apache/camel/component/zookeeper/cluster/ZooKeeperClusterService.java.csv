commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ********************************************* // Properties // ********************************************* public ZooKeeperCuratorConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(ZooKeeperCuratorConfiguration configuration) {     this.configuration = configuration.copy(). }
false;public;0;3;;public CuratorFramework getCuratorFramework() {     return configuration.getCuratorFramework(). }
false;public;1;3;;public void setCuratorFramework(CuratorFramework curatorFramework) {     configuration.setCuratorFramework(curatorFramework). }
false;public;0;3;;public List<String> getNodes() {     return configuration.getNodes(). }
false;public;1;3;;public void setNodes(String nodes) {     configuration.setNodes(nodes). }
false;public;1;3;;public void setNodes(List<String> nodes) {     configuration.setNodes(nodes). }
false;public;0;3;;public String getNamespace() {     return configuration.getNamespace(). }
false;public;1;3;;public void setNamespace(String namespace) {     configuration.setNamespace(namespace). }
false;public;0;3;;public long getReconnectBaseSleepTime() {     return configuration.getReconnectBaseSleepTime(). }
false;public;1;3;;public void setReconnectBaseSleepTime(long reconnectBaseSleepTime) {     configuration.setReconnectBaseSleepTime(reconnectBaseSleepTime). }
false;public;2;3;;public void setReconnectBaseSleepTime(long reconnectBaseSleepTime, TimeUnit reconnectBaseSleepTimeUnit) {     configuration.setReconnectBaseSleepTime(reconnectBaseSleepTime, reconnectBaseSleepTimeUnit). }
false;public;0;3;;public TimeUnit getReconnectBaseSleepTimeUnit() {     return configuration.getReconnectBaseSleepTimeUnit(). }
false;public;1;3;;public void setReconnectBaseSleepTimeUnit(TimeUnit reconnectBaseSleepTimeUnit) {     configuration.setReconnectBaseSleepTimeUnit(reconnectBaseSleepTimeUnit). }
false;public;0;3;;public int getReconnectMaxRetries() {     return configuration.getReconnectMaxRetries(). }
false;public;1;3;;public void setReconnectMaxRetries(int reconnectMaxRetries) {     configuration.setReconnectMaxRetries(reconnectMaxRetries). }
false;public;0;3;;public long getSessionTimeout() {     return configuration.getSessionTimeout(). }
false;public;1;3;;public void setSessionTimeout(long sessionTimeout) {     configuration.setSessionTimeout(sessionTimeout). }
false;public;2;3;;public void setSessionTimeout(long sessionTimeout, TimeUnit sessionTimeoutUnit) {     configuration.setSessionTimeout(sessionTimeout, sessionTimeoutUnit). }
false;public;0;3;;public TimeUnit getSessionTimeoutUnit() {     return configuration.getSessionTimeoutUnit(). }
false;public;1;3;;public void setSessionTimeoutUnit(TimeUnit sessionTimeoutUnit) {     configuration.setSessionTimeoutUnit(sessionTimeoutUnit). }
false;public;0;3;;public long getConnectionTimeout() {     return configuration.getConnectionTimeout(). }
false;public;1;3;;public void setConnectionTimeout(long connectionTimeout) {     configuration.setConnectionTimeout(connectionTimeout). }
false;public;2;3;;public void setConnectionTimeout(long connectionTimeout, TimeUnit connectionTimeotUnit) {     configuration.setConnectionTimeout(connectionTimeout, connectionTimeotUnit). }
false;public;0;3;;public TimeUnit getConnectionTimeotUnit() {     return configuration.getConnectionTimeoutUnit(). }
false;public;1;3;;public void setConnectionTimeotUnit(TimeUnit connectionTimeotUnit) {     configuration.setConnectionTimeoutUnit(connectionTimeotUnit). }
false;public;0;3;;public List<AuthInfo> getAuthInfoList() {     return configuration.getAuthInfoList(). }
false;public;1;3;;public void setAuthInfoList(List<AuthInfo> authInfoList) {     configuration.setAuthInfoList(authInfoList). }
false;public;0;3;;public long getMaxCloseWait() {     return configuration.getMaxCloseWait(). }
false;public;1;3;;public void setMaxCloseWait(long maxCloseWait) {     configuration.setMaxCloseWait(maxCloseWait). }
false;public;0;3;;public TimeUnit getMaxCloseWaitUnit() {     return configuration.getMaxCloseWaitUnit(). }
false;public;1;3;;public void setMaxCloseWaitUnit(TimeUnit maxCloseWaitUnit) {     configuration.setMaxCloseWaitUnit(maxCloseWaitUnit). }
false;public;0;3;;public RetryPolicy getRetryPolicy() {     return configuration.getRetryPolicy(). }
false;public;1;3;;public void setRetryPolicy(RetryPolicy retryPolicy) {     configuration.setRetryPolicy(retryPolicy). }
false;public;0;3;;public String getBasePath() {     return configuration.getBasePath(). }
false;public;1;3;;public void setBasePath(String basePath) {     configuration.setBasePath(basePath). }
false;protected;1;9;;// ********************************************* //  // ********************************************* @Override protected ZooKeeperClusterView createView(String namespace) throws Exception {     // Validation     ObjectHelper.notNull(getCamelContext(), "Camel Context").     ObjectHelper.notNull(configuration.getBasePath(), "ZooKeeper base path").     return new ZooKeeperClusterView(this, configuration, getOrCreateCurator(), namespace). }
false;protected;0;7;;@Override protected void doStart() throws Exception {     // instantiate a new CuratorFramework     getOrCreateCurator().     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     if (curator != null && managedInstance) {         curator.close().     } }
false;private;0;21;;private CuratorFramework getOrCreateCurator() throws Exception {     if (curator == null) {         curator = configuration.getCuratorFramework().         if (curator == null) {             managedInstance = true.             LOGGER.debug("Starting ZooKeeper Curator with namespace '{}',  nodes: '{}'", configuration.getNamespace(), String.join(",", configuration.getNodes())).             curator = ZooKeeperCuratorHelper.createCurator(configuration).             curator.start().         } else {             managedInstance = false.         }     }     return curator. }
