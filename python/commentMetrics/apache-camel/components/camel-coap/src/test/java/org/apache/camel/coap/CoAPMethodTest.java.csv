commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testCoAPMethodDefaultGet() {     // No body means GET     String result = template.requestBody("coap://localhost:" + PORT + "/test/a", null, String.class).     assertEquals("GET: /test/a", result). }
false;public;0;6;;@Test public void testCoAPMethodDefaultPost() {     // Providing a body means POST     String result = template.requestBody("coap://localhost:" + PORT + "/test/b", "Camel", String.class).     assertEquals("Hello Camel", result). }
false;public;0;5;;@Test public void testCoAPMethodHeader() {     String result = template.requestBodyAndHeader("coap://localhost:" + PORT + "/test/c", null, CoAPConstants.COAP_METHOD, "DELETE", String.class).     assertEquals("DELETE: /test/c", result). }
false;public;0;11;;@Override public void configure() throws Exception {     fromF("coap://localhost:%d/test/a?coapMethodRestrict=GET", PORT).setBody(constant("GET: /test/a")).     fromF("coap://localhost:%d/test/b?coapMethodRestrict=POST", PORT).setBody(simple("Hello ${body}")).     fromF("coap://localhost:%d/test/c?coapMethodRestrict=DELETE", PORT).setBody(constant("DELETE: /test/c")). }
false;protected;0;16;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             fromF("coap://localhost:%d/test/a?coapMethodRestrict=GET", PORT).setBody(constant("GET: /test/a")).             fromF("coap://localhost:%d/test/b?coapMethodRestrict=POST", PORT).setBody(simple("Hello ${body}")).             fromF("coap://localhost:%d/test/c?coapMethodRestrict=DELETE", PORT).setBody(constant("DELETE: /test/c")).         }     }. }
