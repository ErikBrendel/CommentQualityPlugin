commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testCoAPComponent() throws Exception {     CoapClient client = createClient("/TestResource").     CoapResponse response = client.get().     assertEquals("Hello ", response.getResponseText()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("Hello Camel CoAP").     mock.expectedHeaderReceived(Exchange.CONTENT_TYPE, MediaTypeRegistry.toString(MediaTypeRegistry.APPLICATION_OCTET_STREAM)).     mock.expectedHeaderReceived(CoAPConstants.COAP_RESPONSE_CODE, CoAP.ResponseCode.CONTENT.toString()).     sender.sendBody("Camel CoAP").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     fromF("coap://localhost:%d/TestResource", PORT).convertBodyTo(String.class).transform(body().prepend("Hello ")).     from("direct:start").toF("coap://localhost:%d/TestResource", PORT).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             fromF("coap://localhost:%d/TestResource", PORT).convertBodyTo(String.class).transform(body().prepend("Hello ")).             from("direct:start").toF("coap://localhost:%d/TestResource", PORT).to("mock:result").         }     }. }
