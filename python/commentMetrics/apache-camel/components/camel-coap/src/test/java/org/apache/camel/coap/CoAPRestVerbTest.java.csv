commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testGetAll() throws Exception {     CoapClient client = createClient("/users").     CoapResponse response = client.get().     assertEquals("[{ \"id\":\"1\", \"name\":\"Scott\" },{ \"id\":\"2\", \"name\":\"Claus\" }]", response.getResponseText()). }
false;public;0;6;;@Test public void testGetOne() throws Exception {     CoapClient client = createClient("/users/1").     CoapResponse response = client.get().     assertEquals("{ \"id\":\"1\", \"name\":\"Scott\" }", response.getResponseText()). }
false;public;0;12;;@Test public void testPost() throws Exception {     final String body = "{ \"id\":\"1\", \"name\":\"Scott\" }".     MockEndpoint mock = getMockEndpoint("mock:create").     mock.expectedBodiesReceived(body).     CoapClient client = createClient("/users").     client.post(body, MediaTypeRegistry.APPLICATION_JSON).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testPut() throws Exception {     final String body = "{ \"id\":\"1\", \"name\":\"Scott\" }".     MockEndpoint mock = getMockEndpoint("mock:update").     mock.expectedBodiesReceived(body).     mock.expectedHeaderReceived("id", "1").     CoapClient client = createClient("/users/1").     client.put(body, MediaTypeRegistry.APPLICATION_JSON).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testDelete() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:delete").     mock.expectedHeaderReceived("id", "1").     CoapClient client = createClient("/users/1").     client.delete().     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     restConfiguration().component("coap").host("localhost").port(PORT).     rest().get("/users").route().transform().constant("[{ \"id\":\"1\", \"name\":\"Scott\" },{ \"id\":\"2\", \"name\":\"Claus\" }]").endRest().get("/users/{id}").route().transform().simple("{ \"id\":\"${header.id}\", \"name\":\"Scott\" }").endRest().post("/users").to("mock:create").put("/users/{id}").to("mock:update").delete("/users/{id}").to("mock:delete"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("coap").host("localhost").port(PORT).             rest().get("/users").route().transform().constant("[{ \"id\":\"1\", \"name\":\"Scott\" },{ \"id\":\"2\", \"name\":\"Claus\" }]").endRest().get("/users/{id}").route().transform().simple("{ \"id\":\"${header.id}\", \"name\":\"Scott\" }").endRest().post("/users").to("mock:create").put("/users/{id}").to("mock:update").delete("/users/{id}").to("mock:delete").         }     }. }
