commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testCoAP() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(true).     sender.sendBodyAndHeader("Hello", CoAPConstants.COAP_METHOD, CoAPConstants.METHOD_PING).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     fromF("coap://localhost:%d/TestResource", PORT).to("log:exch").transform(body().convertTo(Boolean.class)).to("log:exch").     from("direct:start").toF("coap://localhost:%d/TestResource", PORT).to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             fromF("coap://localhost:%d/TestResource", PORT).to("log:exch").transform(body().convertTo(Boolean.class)).to("log:exch").             from("direct:start").toF("coap://localhost:%d/TestResource", PORT).to("mock:result").         }     }. }
