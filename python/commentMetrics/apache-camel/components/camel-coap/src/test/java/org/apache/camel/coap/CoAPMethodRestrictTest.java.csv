commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testDefaultCoAPMethodRestrict() {     NetworkConfig.createStandardWithoutFile().     // All request methods should be valid on this endpoint     assertCoAPMethodRestrictResponse("/test", CoAPConstants.METHOD_RESTRICT_ALL, "GET: /test"). }
false;public;0;16;;@Test public void testSpecifiedCoAPMethodRestrict() {     NetworkConfig.createStandardWithoutFile().     // Only GET is valid for /test/a     assertCoAPMethodRestrictResponse("/test/a", "GET", "GET: /test/a").     // Only DELETE is valid for /test/a/b     assertCoAPMethodRestrictResponse("/test/a/b", "DELETE", "DELETE: /test/a/b").     // Only DELETE & GET are valid for /test/a/b/c     assertCoAPMethodRestrictResponse("/test/a/b/c", "DELETE,GET", "DELETE & GET: /test/a/b/c").     // Only GET is valid for /test/b     assertCoAPMethodRestrictResponse("/test/b", "GET", "GET: /test/b"). }
false;private;3;10;;private void assertCoAPMethodRestrictResponse(String path, String methodRestrict, String expectedResponse) {     for (String method : CoAPConstants.METHOD_RESTRICT_ALL.split(",")) {         String result = template.requestBodyAndHeader("coap://localhost:" + PORT + path, null, CoAPConstants.COAP_METHOD, method, String.class).         if (methodRestrict.contains(method)) {             assertEquals(expectedResponse, result).         } else {             assertEquals("", result).         }     } }
false;public;0;17;;@Override public void configure() throws Exception {     fromF("coap://localhost:%d/test", PORT).setBody(constant("GET: /test")).     fromF("coap://localhost:%d/test/a?coapMethodRestrict=GET", PORT).setBody(constant("GET: /test/a")).     fromF("coap://localhost:%d/test/a/b?coapMethodRestrict=DELETE", PORT).setBody(constant("DELETE: /test/a/b")).     fromF("coap://localhost:%d/test/a/b/c?coapMethodRestrict=DELETE,GET", PORT).setBody(constant("DELETE & GET: /test/a/b/c")).     fromF("coap://localhost:%d/test/b?coapMethodRestrict=GET", PORT).setBody(constant("GET: /test/b")). }
false;protected;0;22;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             fromF("coap://localhost:%d/test", PORT).setBody(constant("GET: /test")).             fromF("coap://localhost:%d/test/a?coapMethodRestrict=GET", PORT).setBody(constant("GET: /test/a")).             fromF("coap://localhost:%d/test/a/b?coapMethodRestrict=DELETE", PORT).setBody(constant("DELETE: /test/a/b")).             fromF("coap://localhost:%d/test/a/b/c?coapMethodRestrict=DELETE,GET", PORT).setBody(constant("DELETE & GET: /test/a/b/c")).             fromF("coap://localhost:%d/test/b?coapMethodRestrict=GET", PORT).setBody(constant("GET: /test/b")).         }     }. }
