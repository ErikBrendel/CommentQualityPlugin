commented;modifiers;parameterAmount;loc;comment;code
true;public;0;14;// TODO provide parameter values for getComment ;// TODO provide parameter values for getComment @Ignore @Test public void testGetComment() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.comment_id", null).     // parameter type is String     headers.put("CamelLinkedIn.fields", null).     final org.apache.camel.component.linkedin.api.model.Comment result = requestBodyAndHeaders("direct://GETCOMMENT", null, headers).     assertNotNull("getComment result", result).     LOG.debug("getComment: " + result). }
true;public;0;6;// TODO provide parameter values for removeComment ;// TODO provide parameter values for removeComment @Ignore @Test public void testRemoveComment() throws Exception {     // using String message body for single parameter "comment_id"     requestBody("direct://REMOVECOMMENT", null). }
false;public;0;10;;public void configure() {     // test route for getComment     from("direct://GETCOMMENT").to("linkedin://" + PATH_PREFIX + "/getComment").     // test route for removeComment     from("direct://REMOVECOMMENT").to("linkedin://" + PATH_PREFIX + "/removeComment?inBody=comment_id"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for getComment             from("direct://GETCOMMENT").to("linkedin://" + PATH_PREFIX + "/getComment").             // test route for removeComment             from("direct://REMOVECOMMENT").to("linkedin://" + PATH_PREFIX + "/removeComment?inBody=comment_id").         }     }. }
