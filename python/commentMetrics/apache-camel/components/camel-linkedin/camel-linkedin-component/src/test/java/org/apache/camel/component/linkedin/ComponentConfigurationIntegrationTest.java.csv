commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext camelContext = super.createCamelContext().     // replace client id with invalid value     camelContext.getComponent("linkedin", LinkedInComponent.class).getConfiguration().setClientId("bad_client_id").     return camelContext. }
false;public;0;21;;@Test public void testGetComment() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.comment_id", "123").     // parameter type is String     headers.put("CamelLinkedIn.fields", "").     try {         requestBodyAndHeaders("direct://GETCOMMENT", null, headers).         fail("Bad client Id must cause an exception on first message").     } catch (CamelExecutionException e) {         Throwable t = e.         while (t.getCause() != null && t.getCause() != t) {             t = t.getCause().         }         if (!(t instanceof IllegalArgumentException)) {             throw e.         }     } }
false;public;0;5;;public void configure() {     // dummy test route for getComment     from("direct://GETCOMMENT").to("linkedin://" + PATH_PREFIX + "/getComment"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // dummy test route for getComment             from("direct://GETCOMMENT").to("linkedin://" + PATH_PREFIX + "/getComment").         }     }. }
