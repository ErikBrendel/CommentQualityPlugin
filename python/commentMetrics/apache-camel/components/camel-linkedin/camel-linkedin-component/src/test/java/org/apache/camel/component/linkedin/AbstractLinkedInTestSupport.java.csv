commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;35;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     // read LinkedIn component configuration from TEST_OPTIONS_PROPERTIES     final Properties properties = new Properties().     try {         properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES)).     } catch (Exception e) {         throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e).     }     Map<String, Object> options = new HashMap<>().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         options.put(entry.getKey().toString(), entry.getValue()).     }     // set scopes     final String scope = properties.getProperty("scope").     if (scope != null) {         options.put("scopes", OAuthScope.fromValues(scope.split(","))).     }     // TODO save and load token from TEST_OPTIONS_PROPERTIES     final LinkedInConfiguration configuration = new LinkedInConfiguration().     IntrospectionSupport.setProperties(configuration, options).     // add LinkedInComponent to Camel context     final LinkedInComponent component = new LinkedInComponent(context).     component.setConfiguration(configuration).     context.addComponent("linkedin", component).     return context. }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // only create the context once for this class     return true. }
false;protected;3;5;;@SuppressWarnings("unchecked") protected <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws CamelExecutionException {     return (T) template().requestBodyAndHeaders(endpointUri, body, headers). }
false;protected;2;4;;@SuppressWarnings("unchecked") protected <T> T requestBody(String endpoint, Object body) throws CamelExecutionException {     return (T) template().requestBody(endpoint, body). }
