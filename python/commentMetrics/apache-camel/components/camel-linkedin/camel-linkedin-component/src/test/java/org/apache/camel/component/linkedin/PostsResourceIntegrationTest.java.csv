commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;// TODO provide parameter values for addComment ;// TODO provide parameter values for addComment @Ignore @Test public void testAddComment() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.post_id", null).     // parameter type is org.apache.camel.component.linkedin.api.model.Comment     headers.put("CamelLinkedIn.comment", null).     requestBodyAndHeaders("direct://ADDCOMMENT", null, headers). }
true;public;0;11;// TODO provide parameter values for flagCategory ;// TODO provide parameter values for flagCategory @Ignore @Test public void testFlagCategory() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.post_id", null).     // parameter type is org.apache.camel.component.linkedin.api.model.PostCategoryCode     headers.put("CamelLinkedIn.postcategorycode", null).     requestBodyAndHeaders("direct://FLAGCATEGORY", null, headers). }
true;public;0;11;// TODO provide parameter values for followPost ;// TODO provide parameter values for followPost @Ignore @Test public void testFollowPost() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.post_id", null).     // parameter type is org.apache.camel.component.linkedin.api.model.IsFollowing     headers.put("CamelLinkedIn.isfollowing", null).     requestBodyAndHeaders("direct://FOLLOWPOST", null, headers). }
true;public;0;18;// TODO provide parameter values for getPost ;// TODO provide parameter values for getPost @Ignore @Test public void testGetPost() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.post_id", null).     // parameter type is Long     headers.put("CamelLinkedIn.count", null).     // parameter type is Long     headers.put("CamelLinkedIn.start", null).     // parameter type is String     headers.put("CamelLinkedIn.fields", null).     final org.apache.camel.component.linkedin.api.model.Post result = requestBodyAndHeaders("direct://GETPOST", null, headers).     assertNotNull("getPost result", result).     LOG.debug("getPost: " + result). }
true;public;0;18;// TODO provide parameter values for getPostComments ;// TODO provide parameter values for getPostComments @Ignore @Test public void testGetPostComments() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.post_id", null).     // parameter type is Long     headers.put("CamelLinkedIn.count", null).     // parameter type is Long     headers.put("CamelLinkedIn.start", null).     // parameter type is String     headers.put("CamelLinkedIn.fields", null).     final org.apache.camel.component.linkedin.api.model.Comments result = requestBodyAndHeaders("direct://GETPOSTCOMMENTS", null, headers).     assertNotNull("getPostComments result", result).     LOG.debug("getPostComments: " + result). }
true;public;0;11;// TODO provide parameter values for likePost ;// TODO provide parameter values for likePost @Ignore @Test public void testLikePost() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelLinkedIn.post_id", null).     // parameter type is org.apache.camel.component.linkedin.api.model.IsLiked     headers.put("CamelLinkedIn.isliked", null).     requestBodyAndHeaders("direct://LIKEPOST", null, headers). }
true;public;0;6;// TODO provide parameter values for removePost ;// TODO provide parameter values for removePost @Ignore @Test public void testRemovePost() throws Exception {     // using String message body for single parameter "post_id"     requestBody("direct://REMOVEPOST", null). }
false;public;0;30;;public void configure() {     // test route for addComment     from("direct://ADDCOMMENT").to("linkedin://" + PATH_PREFIX + "/addComment").     // test route for flagCategory     from("direct://FLAGCATEGORY").to("linkedin://" + PATH_PREFIX + "/flagCategory").     // test route for followPost     from("direct://FOLLOWPOST").to("linkedin://" + PATH_PREFIX + "/followPost").     // test route for getPost     from("direct://GETPOST").to("linkedin://" + PATH_PREFIX + "/getPost").     // test route for getPostComments     from("direct://GETPOSTCOMMENTS").to("linkedin://" + PATH_PREFIX + "/getPostComments").     // test route for likePost     from("direct://LIKEPOST").to("linkedin://" + PATH_PREFIX + "/likePost").     // test route for removePost     from("direct://REMOVEPOST").to("linkedin://" + PATH_PREFIX + "/removePost?inBody=post_id"). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for addComment             from("direct://ADDCOMMENT").to("linkedin://" + PATH_PREFIX + "/addComment").             // test route for flagCategory             from("direct://FLAGCATEGORY").to("linkedin://" + PATH_PREFIX + "/flagCategory").             // test route for followPost             from("direct://FOLLOWPOST").to("linkedin://" + PATH_PREFIX + "/followPost").             // test route for getPost             from("direct://GETPOST").to("linkedin://" + PATH_PREFIX + "/getPost").             // test route for getPostComments             from("direct://GETPOSTCOMMENTS").to("linkedin://" + PATH_PREFIX + "/getPostComments").             // test route for likePost             from("direct://LIKEPOST").to("linkedin://" + PATH_PREFIX + "/likePost").             // test route for removePost             from("direct://REMOVEPOST").to("linkedin://" + PATH_PREFIX + "/removePost?inBody=post_id").         }     }. }
