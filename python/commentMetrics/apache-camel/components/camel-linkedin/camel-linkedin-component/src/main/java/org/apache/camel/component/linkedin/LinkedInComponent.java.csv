commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected LinkedInApiName getApiName(String apiNameStr) throws IllegalArgumentException {     return LinkedInApiName.fromValue(apiNameStr). }
true;public;1;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public void setConfiguration(LinkedInConfiguration configuration) {     super.setConfiguration(configuration). }
true;public;0;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public LinkedInConfiguration getConfiguration() {     return super.getConfiguration(). }
false;protected;4;7;;@Override protected Endpoint createEndpoint(String uri, String methodName, LinkedInApiName apiName, LinkedInConfiguration endpointConfiguration) {     endpointConfiguration.setApiName(apiName).     endpointConfiguration.setMethodName(methodName).     return new LinkedInEndpoint(uri, this, apiName, methodName, endpointConfiguration). }
false;public,synchronized;1;10;;public synchronized LinkedInOAuthRequestFilter getRequestFilter(LinkedInConfiguration endpointConfiguration) {     if (endpointConfiguration.equals(configuration)) {         if (requestFilter == null) {             requestFilter = createRequestFilter(this.configuration).         }         return requestFilter.     } else {         return createRequestFilter(endpointConfiguration).     } }
false;private;1;17;;private LinkedInOAuthRequestFilter createRequestFilter(LinkedInConfiguration configuration) {     // validate configuration     configuration.validate().     final String[] enabledProtocols.     try {         // use default SSP to create supported non-SSL protocols list         final SSLContext sslContext = new SSLContextParameters().createSSLContext(getCamelContext()).         enabledProtocols = sslContext.createSSLEngine().getEnabledProtocols().     } catch (GeneralSecurityException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } catch (IOException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     return new LinkedInOAuthRequestFilter(getOAuthParams(configuration), configuration.getHttpParams(), configuration.isLazyAuth(), enabledProtocols). }
false;private,static;1;9;;private static OAuthParams getOAuthParams(LinkedInConfiguration configuration) {     OAuthSecureStorage secureStorage = configuration.getSecureStorage().     if (secureStorage == null && !ObjectHelper.isEmpty(configuration.getAccessToken())) {         secureStorage = new DefaultOAuthSecureStorage(configuration.getAccessToken(), configuration.getExpiryTime()).     }     return new OAuthParams(configuration.getUserName(), configuration.getUserPassword(), new CachingOAuthSecureStorage(secureStorage), configuration.getClientId(), configuration.getClientSecret(), configuration.getRedirectUri(), configuration.getScopes()). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     if (requestFilter != null) {         closeLogException(requestFilter).     } }
false;protected;1;6;;protected void closeRequestFilter(LinkedInOAuthRequestFilter requestFilter) {     // only close if not a shared filter     if (this.requestFilter != requestFilter) {         closeLogException(requestFilter).     } }
false;private;1;7;;private void closeLogException(LinkedInOAuthRequestFilter requestFilter) {     try {         requestFilter.close().     } catch (Exception e) {         log.warn("Error closing OAuth2 request filter: {}", e.getMessage(), e).     } }
