commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public void interceptPropertyNames(Set<String> propertyNames) {     // do we need to add fields option     if (!propertyNames.contains(LinkedInEndpoint.FIELDS_OPTION)) {         final List<ApiMethod> candidates = endpoint.getCandidates().         for (ApiMethod method : candidates) {             if (!method.getArgNames().contains(LinkedInEndpoint.FIELDS_OPTION)) {                 return.             }         }         // all candidates use fields option, so there is no ambiguity         propertyNames.add(LinkedInEndpoint.FIELDS_OPTION).     } }
false;protected;1;19;;@Override protected Object doInvokeMethod(Map<String, Object> args) {     try {         return super.doInvokeMethod(args).     } catch (RuntimeCamelException e) {         if (e.getCause() instanceof WebApplicationException) {             WebApplicationException cause = (WebApplicationException) e.getCause().             final Response response = cause.getResponse().             if (response.hasEntity()) {                 // try and convert it to LinkedInException                 final org.apache.camel.component.linkedin.api.model.Error error = response.readEntity(Error.class).                 throw new RuntimeCamelException(String.format("Error invoking %s: %s", method.getName(), error.getMessage()), new LinkedInException(error, response)).             }         }         throw e.     } }
