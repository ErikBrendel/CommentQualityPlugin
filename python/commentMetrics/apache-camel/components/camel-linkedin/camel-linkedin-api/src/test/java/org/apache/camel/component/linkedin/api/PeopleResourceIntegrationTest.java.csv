commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void beforeClass() throws Exception {     AbstractResourceIntegrationTest.beforeClass().     final Class<PeopleResource> resourceClass = PeopleResource.class.     PeopleResourceIntegrationTest.peopleResource = getResource(resourceClass). }
false;public;0;7;;@Override public void run() {     final Person person = peopleResource.getPerson(":(id)", true).     assertNotNull(person).     assertNotNull(person.getId()).     LOG.debug("getPerson result: {}", person). }
false;public;0;12;;@Test public void testGetPerson() throws Exception {     execute(new Runnable() {          @Override         public void run() {             final Person person = peopleResource.getPerson(":(id)", true).             assertNotNull(person).             assertNotNull(person.getId()).             LOG.debug("getPerson result: {}", person).         }     }). }
false;public;0;13;;@Override public void run() {     final GroupMemberships groupMemberships = peopleResource.getGroupMemberships(MembershipStateCode.MEMBER, "", null, null).     assertNotNull(groupMemberships).     assertNotNull(groupMemberships.getGroupMembershipList()).     assertFalse(groupMemberships.getGroupMembershipList().isEmpty()).     final Posts posts = peopleResource.getPosts(Long.parseLong(groupMemberships.getGroupMembershipList().get(0).getGroup().getId()), null, null, Order.RECENCY, PostRole.FOLLOWER, PostCategoryCode.DISCUSSION, null, ":(id)").     assertNotNull(posts).     LOG.debug("getPosts result: {}", posts). }
false;public;0;18;;@Test public void testGetPosts() throws Exception {     execute(new Runnable() {          @Override         public void run() {             final GroupMemberships groupMemberships = peopleResource.getGroupMemberships(MembershipStateCode.MEMBER, "", null, null).             assertNotNull(groupMemberships).             assertNotNull(groupMemberships.getGroupMembershipList()).             assertFalse(groupMemberships.getGroupMembershipList().isEmpty()).             final Posts posts = peopleResource.getPosts(Long.parseLong(groupMemberships.getGroupMembershipList().get(0).getGroup().getId()), null, null, Order.RECENCY, PostRole.FOLLOWER, PostCategoryCode.DISCUSSION, null, ":(id)").             assertNotNull(posts).             LOG.debug("getPosts result: {}", posts).         }     }). }
false;public;0;4;;@Override public void run() {     peopleResource.getPerson("bad_fields_selector", true). }
false;public;0;9;;@Test(expected = LinkedInException.class) public void testLinkedInError() throws Exception {     execute(new Runnable() {          @Override         public void run() {             peopleResource.getPerson("bad_fields_selector", true).         }     }). }
false;public;0;11;;@Ignore("CXF swallows application exceptions from ClientResponseFilters") @Test(expected = LinkedInException.class) public void testLinkedInException() throws Exception {     try {         peopleResource.getPerson("bad_fields_selector", true).     } catch (LinkedInException e) {         assertNotNull(e.getError()).         LOG.debug("getPerson error: {}", e.getMessage()).         throw e.     } }
false;public;0;15;;@Test public void testOAuthTokenRefresh() throws Exception {     peopleResource.getPerson("", false).     // mark OAuth token as expired     final OAuthToken oAuthToken = requestFilter.getOAuthToken().     final long expiryTime = oAuthToken.getExpiryTime().     oAuthToken.setExpiryTime(new Date().getTime()).     try {         peopleResource.getPerson("", false).     } finally {         token.setExpiryTime(expiryTime).     } }
false;public;0;6;;@Override public void run() {     final JobSuggestions suggestedJobs = peopleResource.getSuggestedJobs(DEFAULT_FIELDS).     assertNotNull(suggestedJobs).     LOG.debug("Suggested Jobs {}", suggestedJobs.getJobs()). }
false;public;0;11;;@Test public void testGetSuggestedJobs() throws Exception {     execute(new Runnable() {          @Override         public void run() {             final JobSuggestions suggestedJobs = peopleResource.getSuggestedJobs(DEFAULT_FIELDS).             assertNotNull(suggestedJobs).             LOG.debug("Suggested Jobs {}", suggestedJobs.getJobs()).         }     }). }
