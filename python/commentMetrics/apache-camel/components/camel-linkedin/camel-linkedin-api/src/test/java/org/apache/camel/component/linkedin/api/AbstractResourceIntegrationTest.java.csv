commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void beforeClass() throws Exception {     properties = new Properties().     properties.load(AbstractResourceIntegrationTest.class.getResourceAsStream("/test-options.properties")).     requestFilter = createOAuthHelper(). }
false;public;0;4;;@Override public OAuthToken getOAuthToken() {     return token. }
false;public;1;4;;@Override public void saveOAuthToken(OAuthToken newToken) {     token = newToken. }
false;private,static;0;39;;private static LinkedInOAuthRequestFilter createOAuthHelper() throws IOException {     final String userName = properties.getProperty("userName").     final String userPassword = properties.getProperty("userPassword").     final String clientId = properties.getProperty("clientId").     final String clientSecret = properties.getProperty("clientSecret").     final String redirectUri = properties.getProperty("redirectUri").     final String accessToken = properties.getProperty("accessToken").     final String expiryTime = properties.getProperty("expiryTime").     final OAuthScope[] scopes.     final String scope = properties.getProperty("scope").     if (scope != null) {         scopes = OAuthScope.fromValues(scope.split(",")).     } else {         scopes = null.     }     // check if accessToken is set     if (accessToken != null) {         token = new OAuthToken(null, accessToken, (expiryTime != null) ? Long.parseLong(expiryTime) : DEFAULT_EXPIRY).     }     final OAuthSecureStorage secureStorage = new OAuthSecureStorage() {          @Override         public OAuthToken getOAuthToken() {             return token.         }          @Override         public void saveOAuthToken(OAuthToken newToken) {             token = newToken.         }     }.     final OAuthParams oAuthParams = new OAuthParams(userName, userPassword, secureStorage, clientId, clientSecret, redirectUri, scopes).     return new LinkedInOAuthRequestFilter(oAuthParams, null, false, null). }
false;public,static;0;14;;@AfterClass public static void afterClass() throws Exception {     // close all proxies     for (Object resource : resourceList) {         try {             WebClient.client(resource).close().         } catch (Exception ignore) {         }     }     if (requestFilter != null) {         requestFilter.close().     } // TODO save and load token from test-options.properties }
false;protected,static;1;13;;protected static <T> T getResource(Class<T> resourceClass) {     if (requestFilter == null) {         throw new IllegalStateException(AbstractResourceIntegrationTest.class.getName() + ".beforeClass must be invoked before getResource").     }     Bus bus = BusFactory.getThreadDefaultBus().     bus.setProperty("allow.empty.path.template.value", true).     final T resource = JAXRSClientFactory.create(LinkedInOAuthRequestFilter.BASE_ADDRESS, resourceClass, // Arrays.asList(new Object[] { requestFilter, new LinkedInExceptionResponseFilter() } )).     Arrays.asList(new Object[] { requestFilter, new EnumQueryParamConverterProvider() })).     resourceList.add(resource).     return resource. }
false;protected;1;10;;protected void execute(Runnable runnable) {     try {         runnable.run().     } catch (WebApplicationException e) {         final org.apache.camel.component.linkedin.api.model.Error error = e.getResponse().readEntity(Error.class).         assertNotNull(error).         LOG.error("Error: {}", error.getMessage()).         throw new LinkedInException(error, e.getResponse()).     } }
