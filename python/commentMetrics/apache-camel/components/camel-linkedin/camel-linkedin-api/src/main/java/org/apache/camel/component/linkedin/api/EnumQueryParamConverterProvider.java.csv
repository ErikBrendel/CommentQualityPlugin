commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public T fromString(String value) {     try {         return (T) fromValueMethod.invoke(null, value).     } catch (IllegalAccessException e) {         throw new IllegalArgumentException(e).     } catch (InvocationTargetException e) {         throw new IllegalArgumentException(e).     } }
false;public;1;10;;@Override public String toString(T value) {     try {         return (String) valueMethod.invoke(value).     } catch (IllegalAccessException e) {         throw new IllegalArgumentException(e).     } catch (InvocationTargetException e) {         throw new IllegalArgumentException(e).     } }
false;public;3;36;;@Override public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType, Annotation[] annotations) {     if (rawType.isEnum()) {         try {             final Method valueMethod = rawType.getMethod("value", null).             final Method fromValueMethod = rawType.getMethod("fromValue", String.class).             return new ParamConverter<T>() {                  @Override                 public T fromString(String value) {                     try {                         return (T) fromValueMethod.invoke(null, value).                     } catch (IllegalAccessException e) {                         throw new IllegalArgumentException(e).                     } catch (InvocationTargetException e) {                         throw new IllegalArgumentException(e).                     }                 }                  @Override                 public String toString(T value) {                     try {                         return (String) valueMethod.invoke(value).                     } catch (IllegalAccessException e) {                         throw new IllegalArgumentException(e).                     } catch (InvocationTargetException e) {                         throw new IllegalArgumentException(e).                     }                 }             }.         } catch (NoSuchMethodException e) {             LOG.debug("Enumeration {} does not follow JAXB convention for conversion", rawType.getName()).         }     }     return null. }
