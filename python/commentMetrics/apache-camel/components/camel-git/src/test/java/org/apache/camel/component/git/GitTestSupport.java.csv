commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void setUp() throws Exception {     super.setUp().     File localPath = File.createTempFile(gitLocalRepo, "").     localPath.delete().     File path = new File(gitLocalRepo).     path.deleteOnExit(). }
false;public;0;6;;@Override public void tearDown() throws Exception {     super.tearDown().     File path = new File(gitLocalRepo).     deleteDirectory(path). }
false;protected;0;13;;protected Repository getTestRepository() throws IOException, IllegalStateException, GitAPIException {     File gitRepo = new File(gitLocalRepo, ".git").     Git.init().setDirectory(new File(gitLocalRepo, "")).setBare(false).call().     // now open the resulting repository with a FileRepositoryBuilder     FileRepositoryBuilder builder = new FileRepositoryBuilder().     Repository repo = // scan     builder.setGitDir(gitRepo).readEnvironment().findGitDir().build().     return repo. }
false;protected;0;3;;protected Git getGitTestRepository() throws IOException, IllegalStateException, GitAPIException {     return new Git(getTestRepository()). }
false;protected;2;9;;protected void validateGitLogs(Git git, String... messages) throws GitAPIException {     Iterable<RevCommit> logs = git.log().call().     int count = 0.     for (RevCommit rev : logs) {         assertEquals(messages[count], rev.getShortMessage()).         count++.     }     assertEquals(messages.length, count). }
