commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() {     component = new MicrometerComponent().     inOrder = Mockito.inOrder(camelContext, camelRegistry, metricRegistry, typeConverter). }
false;public;0;23;;@Test public void testCreateEndpoint() throws Exception {     component.setCamelContext(camelContext).     when(camelContext.getRegistry()).thenReturn(camelRegistry).     when(camelContext.getTypeConverter()).thenReturn(typeConverter).     when(typeConverter.convertTo(String.class, "key=value")).thenReturn("key=value").     when(camelRegistry.lookupByNameAndType(MicrometerConstants.METRICS_REGISTRY_NAME, MeterRegistry.class)).thenReturn(metricRegistry).     Map<String, Object> params = new HashMap<>().     params.put("tags", "key=value").     Endpoint result = component.createEndpoint("micrometer:counter:counter", "counter:counter", params).     assertThat(result, is(notNullValue())).     assertThat(result, is(instanceOf(MicrometerEndpoint.class))).     MicrometerEndpoint me = (MicrometerEndpoint) result.     assertThat(me.getMetricsName(), is("counter")).     assertThat(me.getRegistry(), is(metricRegistry)).     inOrder.verify(camelContext, times(1)).getRegistry().     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType(MicrometerConstants.METRICS_REGISTRY_NAME, MeterRegistry.class).     inOrder.verify(camelContext, times(1)).getTypeConverter().     inOrder.verify(typeConverter, times(1)).convertTo(String.class, "key=value").     inOrder.verify(camelContext, times(1)).getTypeConverter().     inOrder.verifyNoMoreInteractions(). }
false;public;0;6;;@Test public void testCreateNewEndpointForCounter() {     Endpoint endpoint = new MicrometerEndpoint(null, null, metricRegistry, Meter.Type.COUNTER, "a name", Tags.empty()).     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MicrometerEndpoint.class))). }
false;public;0;6;;@Test public void testCreateNewEndpointForHistogram() {     Endpoint endpoint = new MicrometerEndpoint(null, null, metricRegistry, Meter.Type.DISTRIBUTION_SUMMARY, "a name", Tags.empty()).     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MicrometerEndpoint.class))). }
false;public;0;6;;@Test public void testCreateNewEndpointForTimer() {     Endpoint endpoint = new MicrometerEndpoint(null, null, metricRegistry, Meter.Type.TIMER, "a name", Tags.empty()).     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MicrometerEndpoint.class))). }
false;public;0;7;;@Test public void testGetMetricsType() {     Meter.Type[] supportedTypes = { Meter.Type.COUNTER, Meter.Type.DISTRIBUTION_SUMMARY, Meter.Type.TIMER }.     for (Meter.Type type : supportedTypes) {         assertThat(component.getMetricsType(MicrometerUtils.getName(type) + ":metrics-name"), is(type)).     } }
false;public;0;4;;@Test public void testGetMetricsTypeNotSet() {     assertThat(component.getMetricsType("no-metrics-type"), is(MicrometerComponent.DEFAULT_METER_TYPE)). }
false;public;0;4;;@Test(expected = RuntimeCamelException.class) public void testGetMetricsTypeNotFound() {     component.getMetricsType("unknown-metrics:metrics-name"). }
false;public;0;8;;@Test public void testGetOrCreateMetricRegistryFoundInCamelRegistry() {     when(camelRegistry.lookupByNameAndType("name", MeterRegistry.class)).thenReturn(metricRegistry).     MeterRegistry result = MicrometerUtils.getOrCreateMeterRegistry(camelRegistry, "name").     assertThat(result, is(metricRegistry)).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MeterRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testGetOrCreateMetricRegistryFoundInCamelRegistryByType() {     when(camelRegistry.lookupByNameAndType("name", MeterRegistry.class)).thenReturn(null).     when(camelRegistry.findByType(MeterRegistry.class)).thenReturn(Collections.singleton(metricRegistry)).     MeterRegistry result = MicrometerUtils.getOrCreateMeterRegistry(camelRegistry, "name").     assertThat(result, is(metricRegistry)).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MeterRegistry.class).     inOrder.verify(camelRegistry, times(1)).findByType(MeterRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;11;;@Test public void testGetOrCreateMetricRegistryNotFoundInCamelRegistry() {     when(camelRegistry.lookupByNameAndType("name", MeterRegistry.class)).thenReturn(null).     when(camelRegistry.findByType(MeterRegistry.class)).thenReturn(Collections.emptySet()).     MeterRegistry result = MicrometerUtils.getOrCreateMeterRegistry(camelRegistry, "name").     assertThat(result, is(notNullValue())).     assertThat(result, is(not(metricRegistry))).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MeterRegistry.class).     inOrder.verify(camelRegistry, times(1)).findByType(MeterRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;8;;@Test public void testGetMetricRegistryFromCamelRegistry() {     when(camelRegistry.lookupByNameAndType("name", MeterRegistry.class)).thenReturn(metricRegistry).     MeterRegistry result = MicrometerUtils.getMeterRegistryFromCamelRegistry(camelRegistry, "name").     assertThat(result, is(metricRegistry)).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MeterRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;5;;@Test public void testCreateMetricRegistry() {     MeterRegistry registry = MicrometerUtils.createMeterRegistry().     assertThat(registry, is(notNullValue())). }
