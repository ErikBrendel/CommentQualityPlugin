commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected AbstractMicrometerEventNotifier<?> getEventNotifier() {     MicrometerExchangeEventNotifier eventNotifier = new MicrometerExchangeEventNotifier().     eventNotifier.setNamingStrategy((exchange, endpoint) -> endpoint.getEndpointUri()).     return eventNotifier. }
false;public;1;10;;@Override public Object evaluate(Exchange exchange) {     try {         Thread.sleep(SLEEP).         return exchange.getIn().getBody().     } catch (InterruptedException e) {         throw new CamelExecutionException(e.getMessage(), exchange, e).     } }
false;public;0;25;;@Test public void testCamelRouteEvents() throws Exception {     int count = 10.     MockEndpoint mock = getMockEndpoint(MOCK_OUT).     mock.returnReplyBody(new ExpressionAdapter() {          @Override         public Object evaluate(Exchange exchange) {             try {                 Thread.sleep(SLEEP).                 return exchange.getIn().getBody().             } catch (InterruptedException e) {                 throw new CamelExecutionException(e.getMessage(), exchange, e).             }         }     }).     mock.expectedMessageCount(count).     for (int i = 0. i < count. i++) {         template.sendBody(DIRECT_IN, new Object()).     }     Timer timer = meterRegistry.find(MOCK_OUT).timer().     assertEquals(count, timer.count()).     assertTrue(timer.mean(TimeUnit.MILLISECONDS) > SLEEP.doubleValue()). }
false;public;0;4;;@Override public void configure() {     from(DIRECT_IN).routeId(ROUTE_ID).to(MOCK_OUT). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from(DIRECT_IN).routeId(ROUTE_ID).to(MOCK_OUT).         }     }. }
