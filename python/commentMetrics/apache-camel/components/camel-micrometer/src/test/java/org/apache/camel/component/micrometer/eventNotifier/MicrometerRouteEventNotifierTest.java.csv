commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractMicrometerEventNotifier<?> getEventNotifier() {     return new MicrometerRouteEventNotifier(). }
false;public;0;16;;@Test public void testCamelRouteEvents() throws Exception {     Gauge added = meterRegistry.find(DEFAULT_CAMEL_ROUTES_ADDED).gauge().     Gauge running = meterRegistry.find(DEFAULT_CAMEL_ROUTES_RUNNING).gauge().     assertEquals(0.0d, added.value(), 0.0001d).     assertEquals(0.0d, running.value(), 0.0001d).     context.addRoutes(new TestRoute()).     assertEquals(1.0d, added.value(), 0.0001d).     assertEquals(1.0d, running.value(), 0.0001d).     context.getRouteController().stopRoute(ROUTE_ID).     assertEquals(1.0d, added.value(), 0.0001d).     assertEquals(0.0d, running.value(), 0.0001d).     context.removeRoute(ROUTE_ID).     assertEquals(0.0d, added.value(), 0.0001d).     assertEquals(0.0d, running.value(), 0.0001d). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:in").routeId(ROUTE_ID).to("mock:out"). }
