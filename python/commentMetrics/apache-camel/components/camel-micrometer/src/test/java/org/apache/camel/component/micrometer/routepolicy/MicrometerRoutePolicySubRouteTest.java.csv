commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testMetricsRoutePolicy() throws Exception {     int count = 10.     getMockEndpoint("mock:foo").expectedMessageCount(count).     getMockEndpoint("mock:bar").expectedMessageCount(count).     for (int i = 0. i < count. i++) {         template.sendBody("direct:foo", "Hello World").     }     assertMockEndpointsSatisfied().     // there should be 2 names     List<Meter> meters = meterRegistry.getMeters().     assertEquals(2, meters.size()).     meters.forEach(meter -> assertTrue(meter instanceof Timer)). }
false;public;0;9;;@Override public void configure() {     from("direct:foo").routeId("foo").to("direct:bar").to("mock:foo").     from("direct:bar").routeId("bar").to("mock:bar"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:foo").routeId("foo").to("direct:bar").to("mock:foo").             from("direct:bar").routeId("bar").to("mock:bar").         }     }. }
