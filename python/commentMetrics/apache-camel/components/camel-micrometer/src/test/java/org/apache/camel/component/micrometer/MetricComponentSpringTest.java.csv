commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() {     from("direct:in").to("micrometer:counter:A?increment=512").to("mock:out"). }
false;public;0;13;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:in").to("micrometer:counter:A?increment=512").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = MicrometerConstants.METRICS_REGISTRY_NAME) public MeterRegistry getMetricRegistry() {     return Mockito.mock(MeterRegistry.class). }
false;public;0;13;;@Test public void testMetricsRegistryFromCamelRegistry() throws Exception {     MeterRegistry mockRegistry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(MicrometerConstants.METRICS_REGISTRY_NAME, MeterRegistry.class).     Counter mockCounter = Mockito.mock(Counter.class).     InOrder inOrder = Mockito.inOrder(mockRegistry, mockCounter).     when(mockRegistry.counter(eq("A"), anyIterable())).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     producer.sendBody(new Object()).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter(eq("A"), anyIterable()).     inOrder.verify(mockCounter, times(1)).increment(512D).     inOrder.verifyNoMoreInteractions(). }
