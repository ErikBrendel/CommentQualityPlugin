commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void configure() {     from("direct:in-1").to("micrometer:summary:A?value=332491").to("mock:out").     from("direct:in-2").to("micrometer:summary:${body}?value=${header.nextValue}").to("mock:out"). }
false;public;0;16;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:in-1").to("micrometer:summary:A?value=332491").to("mock:out").             from("direct:in-2").to("micrometer:summary:${body}?value=${header.nextValue}").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = METRICS_REGISTRY_NAME) public MeterRegistry getMetricRegistry() {     return new SimpleMeterRegistry(). }
false;public;0;4;;@Before public void setup() {     registry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRICS_REGISTRY_NAME, MeterRegistry.class). }
false;public;0;4;;@After public void tearDown() {     endpoint.reset(). }
false;public;0;7;;@Test public void testOverrideMetricsName() throws Exception {     endpoint.expectedMessageCount(1).     producer1.sendBodyAndHeader(new Object(), HEADER_METRIC_NAME, "B").     assertEquals(1L, registry.find("B").summary().count()).     endpoint.assertIsSatisfied(). }
false;public;0;10;;@Test public void testOverrideValue() throws Exception {     endpoint.expectedMessageCount(1).     producer1.sendBodyAndHeader(new Object(), HEADER_HISTOGRAM_VALUE, 181D).     DistributionSummary summary = registry.find("A").summary().     assertEquals(1L, summary.count()).     HistogramSnapshot snapshot = summary.takeSnapshot().     assertEquals(181.0D, snapshot.total(), 0.01D).     endpoint.assertIsSatisfied(). }
false;public;0;10;;@Test public void testScriptEvaluationValue() throws Exception {     endpoint.expectedMessageCount(1).     producer2.sendBodyAndHeader("C", "nextValue", "181.0").     DistributionSummary summary = registry.find("C").summary().     assertEquals(1L, summary.count()).     HistogramSnapshot snapshot = summary.takeSnapshot().     assertEquals(181.0D, snapshot.total(), 0.01D).     endpoint.assertIsSatisfied(). }
