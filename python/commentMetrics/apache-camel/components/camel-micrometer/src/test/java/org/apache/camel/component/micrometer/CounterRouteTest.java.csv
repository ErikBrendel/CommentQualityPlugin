commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Override public void configure() {     from("direct:in-1").to("micrometer:counter:A?increment=5").to("mock:out").     from("direct:in-2").to("micrometer:counter:B?decrement=9").to("mock:out").     from("direct:in-3").setHeader(HEADER_COUNTER_INCREMENT, constant(417L)).to("micrometer:counter:C").to("mock:out").     from("direct:in-4").to("micrometer:counter:D?increment=${body.length}&tags=a=${body.length}").to("mock:out"). }
false;public;0;26;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:in-1").to("micrometer:counter:A?increment=5").to("mock:out").             from("direct:in-2").to("micrometer:counter:B?decrement=9").to("mock:out").             from("direct:in-3").setHeader(HEADER_COUNTER_INCREMENT, constant(417L)).to("micrometer:counter:C").to("mock:out").             from("direct:in-4").to("micrometer:counter:D?increment=${body.length}&tags=a=${body.length}").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = METRICS_REGISTRY_NAME) public MeterRegistry getMetricRegistry() {     return new SimpleMeterRegistry(). }
false;public;0;4;;@Before public void setup() {     registry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRICS_REGISTRY_NAME, MeterRegistry.class). }
false;public;0;4;;@After public void tearDown() {     endpoint.reset(). }
false;public;0;7;;@Test public void testOverrideMetricsName() throws Exception {     endpoint.expectedMessageCount(1).     producer1.sendBodyAndHeader(new Object(), HEADER_METRIC_NAME, "A1").     assertEquals(5.0D, registry.find("A1").counter().count(), 0.01D).     endpoint.assertIsSatisfied(). }
false;public;0;7;;@Test public void testOverrideIncrement() throws Exception {     endpoint.expectedMessageCount(1).     producer1.sendBodyAndHeader(new Object(), HEADER_COUNTER_INCREMENT, 14.0D).     assertEquals(14.0D, registry.find("A").counter().count(), 0.01D).     endpoint.assertIsSatisfied(). }
false;public;0;7;;@Test public void testOverrideDecrement() throws Exception {     endpoint.expectedMessageCount(1).     producer2.sendBodyAndHeader(new Object(), HEADER_COUNTER_DECREMENT, 7.0D).     assertEquals(-7.0D, registry.find("B").counter().count(), 0.01D).     endpoint.assertIsSatisfied(). }
false;public;0;7;;@Test public void testOverrideUsingConstantValue() throws Exception {     endpoint.expectedMessageCount(1).     producer3.sendBody(new Object()).     assertEquals(417.0D, registry.find("C").counter().count(), 0.01D).     endpoint.assertIsSatisfied(). }
false;public;0;10;;@Test public void testUsingScriptEvaluation() throws Exception {     endpoint.expectedMessageCount(1).     String message = "Hello from Camel Metrics!".     producer4.sendBody(message).     Counter counter = registry.find("D").counter().     assertEquals(message.length(), counter.count(), 0.01D).     assertEquals(Integer.toString(message.length()), counter.getId().getTag("a")).     endpoint.assertIsSatisfied(). }
