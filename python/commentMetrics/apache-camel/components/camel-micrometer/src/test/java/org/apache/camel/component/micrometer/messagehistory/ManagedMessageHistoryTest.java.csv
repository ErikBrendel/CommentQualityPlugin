commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
true;protected;0;9;// Setup the common MetricsRegistry for MetricsComponent and MetricsMessageHistoryFactory to use ;// Setup the common MetricsRegistry for MetricsComponent and MetricsMessageHistoryFactory to use @Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     meterRegistry = new CompositeMeterRegistry().     meterRegistry.add(new SimpleMeterRegistry()).     meterRegistry.add(new JmxMeterRegistry(CamelJmxConfig.DEFAULT, Clock.SYSTEM, HierarchicalNameMapper.DEFAULT)).     registry.bind(MicrometerConstants.METRICS_REGISTRY_NAME, meterRegistry).     return registry. }
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     MicrometerMessageHistoryFactory factory = new MicrometerMessageHistoryFactory().     factory.setPrettyPrint(true).     factory.setMeterRegistry(meterRegistry).     context.setMessageHistoryFactory(factory).     return context. }
false;public;0;45;;@Test public void testMessageHistory() throws Exception {     int count = 10.     getMockEndpoint("mock:foo").expectedMessageCount(count / 2).     getMockEndpoint("mock:bar").expectedMessageCount(count / 2).     getMockEndpoint("mock:baz").expectedMessageCount(count / 2).     for (int i = 0. i < count. i++) {         if (i % 2 == 0) {             template.sendBody("seda:foo", "Hello " + i).         } else {             template.sendBody("seda:bar", "Hello " + i).         }     }     assertMockEndpointsSatisfied().     // there should be 3 names     assertEquals(3, meterRegistry.getMeters().size()).     // there should be 3 mbeans     Set<ObjectName> set = getMBeanServer().queryNames(new ObjectName("org.apache.camel.micrometer:name=CamelMessageHistory.*"), null).     assertEquals(3, set.size()).     ObjectName fooMBean = set.stream().filter(on -> on.getCanonicalName().contains("foo")).findFirst().orElseThrow(() -> new AssertionError("Expected MBean with node Id foo")).     Long testCount = (Long) getMBeanServer().getAttribute(fooMBean, "Count").     assertEquals(count / 2, testCount.longValue()).     // get the message history service using JMX     String name = String.format("org.apache.camel:context=%s,type=services,name=MicrometerMessageHistoryService", context.getManagementName()).     ObjectName on = ObjectName.getInstance(name).     String json = (String) getMBeanServer().invoke(on, "dumpStatisticsAsJson", null, null).     assertNotNull(json).     log.info(json).     assertTrue(json.contains("\"nodeId\" : \"foo\"")).     assertTrue(json.contains("\"nodeId\" : \"bar\"")).     assertTrue(json.contains("\"nodeId\" : \"baz\"")). }
false;public;0;9;;@Override public void configure() {     from("seda:foo").routeId("route1").to("mock:foo").id("foo").     from("seda:bar").routeId("route2").to("mock:bar").id("bar").to("mock:baz").id("baz"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from("seda:foo").routeId("route1").to("mock:foo").id("foo").             from("seda:bar").routeId("route2").to("mock:bar").id("bar").to("mock:baz").id("baz").         }     }. }
