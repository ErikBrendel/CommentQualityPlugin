commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Override public void configure() {     from("direct:in-1").setHeader(HEADER_METRIC_NAME, constant("B")).to("micrometer:timer:A?action=start").delay(DELAY).setHeader(HEADER_METRIC_NAME, constant("B")).to("micrometer:timer:A?action=stop").to("mock:out").     from("direct:in-2").setHeader(HEADER_TIMER_ACTION, constant(MicrometerTimerAction.start)).to("micrometer:timer:A").delay(DELAY).setHeader(HEADER_TIMER_ACTION, constant(MicrometerTimerAction.stop)).to("micrometer:timer:A").to("mock:out").     from("direct:in-3").to("micrometer:timer:C?action=start").delay(DELAY).to("micrometer:timer:C?action=stop&tags=a=${body}").to("mock:out"). }
false;public;0;31;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:in-1").setHeader(HEADER_METRIC_NAME, constant("B")).to("micrometer:timer:A?action=start").delay(DELAY).setHeader(HEADER_METRIC_NAME, constant("B")).to("micrometer:timer:A?action=stop").to("mock:out").             from("direct:in-2").setHeader(HEADER_TIMER_ACTION, constant(MicrometerTimerAction.start)).to("micrometer:timer:A").delay(DELAY).setHeader(HEADER_TIMER_ACTION, constant(MicrometerTimerAction.stop)).to("micrometer:timer:A").to("mock:out").             from("direct:in-3").to("micrometer:timer:C?action=start").delay(DELAY).to("micrometer:timer:C?action=stop&tags=a=${body}").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = METRICS_REGISTRY_NAME) public MeterRegistry getMetricRegistry() {     return new SimpleMeterRegistry(). }
false;public;0;4;;@Before public void setup() {     registry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRICS_REGISTRY_NAME, MeterRegistry.class). }
false;public;0;4;;@After public void tearDown() {     endpoint.reset(). }
false;public;0;10;;@Test public void testOverrideMetricsName() throws Exception {     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer1.sendBody(body).     Timer timer = registry.find("B").timer().     assertEquals(1L, timer.count()).     assertTrue(timer.max(TimeUnit.MILLISECONDS) > 0.0D).     endpoint.assertIsSatisfied(). }
false;public;0;10;;@Test public void testOverrideNoAction() throws Exception {     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer2.sendBody(body).     Timer timer = registry.find("A").timer().     assertEquals(1L, timer.count()).     assertTrue(timer.max(TimeUnit.MILLISECONDS) > 0.0D).     endpoint.assertIsSatisfied(). }
false;public;0;16;;@Test public void testNormal() throws Exception {     int count = 10.     String body = "Hello".     endpoint.expectedMessageCount(count).     for (int i = 0. i < count. i++) {         producer3.sendBody(body).     }     Timer timer = registry.find("C").timer().     assertEquals(count, timer.count()).     assertTrue(timer.max(TimeUnit.MILLISECONDS) > DELAY).     assertTrue(timer.mean(TimeUnit.MILLISECONDS) > DELAY).     assertTrue(timer.totalTime(TimeUnit.MILLISECONDS) > DELAY * count).     assertEquals(body, timer.getId().getTag("a")).     endpoint.assertIsSatisfied(). }
