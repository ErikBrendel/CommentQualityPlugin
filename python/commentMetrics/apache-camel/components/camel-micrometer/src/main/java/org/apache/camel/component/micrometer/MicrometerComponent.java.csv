commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;15;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     if (metricsRegistry == null) {         Registry camelRegistry = getCamelContext().getRegistry().         metricsRegistry = MicrometerUtils.getOrCreateMeterRegistry(camelRegistry, MicrometerConstants.METRICS_REGISTRY_NAME).     }     String metricsName = getMetricsName(remaining).     Meter.Type metricsType = getMetricsType(remaining).     Iterable<Tag> tags = getMetricsTag(parameters).     log.debug("Metrics type: {}. name: {}. tags: {}", metricsType, metricsName, tags).     Endpoint endpoint = new MicrometerEndpoint(uri, this, metricsRegistry, metricsType, metricsName, tags).     setProperties(endpoint, parameters).     return endpoint. }
false;;1;4;;String getMetricsName(String remaining) {     String name = StringHelper.after(remaining, ":").     return name == null ? remaining : name. }
false;;1;6;;Meter.Type getMetricsType(String remaining) {     String type = StringHelper.before(remaining, ":").     return type == null ? DEFAULT_METER_TYPE : MicrometerUtils.getByName(type). }
false;;1;10;;Iterable<Tag> getMetricsTag(Map<String, Object> parameters) {     String tagsString = getAndRemoveParameter(parameters, "tags", String.class, "").     if (tagsString != null && !tagsString.isEmpty()) {         String[] tagStrings = tagsString.split("\\s*,\\s*").         return Stream.of(tagStrings).map(s -> Tags.of(s.split("\\s*=\\s*"))).reduce(Tags.empty(), Tags::and).     }     return Tags.empty(). }
false;public;0;3;;public MeterRegistry getMetricsRegistry() {     return metricsRegistry. }
true;public;1;3;/**  * To use a custom configured MetricRegistry.  */ ;/**  * To use a custom configured MetricRegistry.  */ public void setMetricsRegistry(MeterRegistry metricsRegistry) {     this.metricsRegistry = metricsRegistry. }
