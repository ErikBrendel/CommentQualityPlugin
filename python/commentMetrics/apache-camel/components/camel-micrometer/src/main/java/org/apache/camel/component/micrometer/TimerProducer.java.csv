commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected Function<MeterRegistry, Timer> registrar(String name, Iterable<Tag> tags) {     return meterRegistry -> meterRegistry.timer(name, tags). }
false;protected;3;7;;@Override protected void doProcess(Exchange exchange, MicrometerEndpoint endpoint, Timer timer) {     String propertyName = getPropertyName(timer.getId().getName()).     Timer.Sample sample = getTimerSampleFromExchange(exchange, propertyName).     sample.stop(timer).     exchange.removeProperty(propertyName). }
false;protected;3;14;;@Override protected void doProcess(Exchange exchange, String metricsName, Iterable<Tag> tags) {     MeterRegistry registry = getEndpoint().getRegistry().     Message in = exchange.getIn().     MicrometerTimerAction action = simple(exchange, getEndpoint().getAction(), MicrometerTimerAction.class).     MicrometerTimerAction finalAction = in.getHeader(HEADER_TIMER_ACTION, action, MicrometerTimerAction.class).     if (finalAction == MicrometerTimerAction.start) {         handleStart(exchange, registry, metricsName).     } else if (finalAction == MicrometerTimerAction.stop) {         handleStop(exchange, metricsName, tags).     } else {         log.warn("No action provided for timer \"{}\"", metricsName).     } }
false;private;3;5;;private void handleStop(Exchange exchange, String metricsName, Iterable<Tag> tags) {     if (getTimerSampleFromExchange(exchange, getPropertyName(metricsName)) != null) {         doProcess(exchange, getEndpoint(), getOrRegisterMeter(metricsName, tags)).     } }
false;;3;10;;void handleStart(Exchange exchange, MeterRegistry registry, String metricsName) {     String propertyName = getPropertyName(metricsName).     Timer.Sample sample = getTimerSampleFromExchange(exchange, propertyName).     if (sample == null) {         sample = Timer.start(registry).         exchange.setProperty(propertyName, sample).     } else {         log.warn("Timer \"{}\" already running", metricsName).     } }
false;;1;3;;String getPropertyName(String metricsName) {     return "timer:" + metricsName. }
false;;2;3;;Timer.Sample getTimerSampleFromExchange(Exchange exchange, String propertyName) {     return exchange.getProperty(propertyName, Timer.Sample.class). }
