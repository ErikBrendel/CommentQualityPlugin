commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public MeterRegistry getMeterRegistry() {     return meterRegistry. }
true;public;1;3;/**  * To use a specific {@link MeterRegistry} instance.  * <p/>  * If no instance has been configured, then Camel will create a shared instance to be used.  */ ;/**  * To use a specific {@link MeterRegistry} instance.  * <p/>  * If no instance has been configured, then Camel will create a shared instance to be used.  */ public void setMeterRegistry(MeterRegistry meterRegistry) {     this.meterRegistry = meterRegistry. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
true;public;1;3;/**  * Whether to use pretty print when outputting JSon  */ ;/**  * Whether to use pretty print when outputting JSon  */ public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public TimeUnit getDurationUnit() {     return durationUnit. }
true;public;1;3;/**  * Sets the time unit to use for timing the duration of processing a message in the route  */ ;/**  * Sets the time unit to use for timing the duration of processing a message in the route  */ public void setDurationUnit(TimeUnit durationUnit) {     this.durationUnit = durationUnit. }
false;public;0;3;;public MicrometerMessageHistoryNamingStrategy getNamingStrategy() {     return namingStrategy. }
true;public;1;3;/**  * Sets the naming strategy for message history meter names  */ ;/**  * Sets the naming strategy for message history meter names  */ public void setNamingStrategy(MicrometerMessageHistoryNamingStrategy namingStrategy) {     this.namingStrategy = namingStrategy. }
false;public;3;4;;@Override public MessageHistory newMessageHistory(String routeId, NamedNode namedNode, long timestamp) {     return new MicrometerMessageHistory(getMeterRegistry(), camelContext.getRoute(routeId), namedNode, getNamingStrategy(), timestamp). }
false;protected;0;22;;@Override protected void doStart() throws Exception {     if (meterRegistry == null) {         meterRegistry = MicrometerUtils.getOrCreateMeterRegistry(camelContext.getRegistry(), METRICS_REGISTRY_NAME).     }     try {         MicrometerMessageHistoryService messageHistoryService = camelContext.hasService(MicrometerMessageHistoryService.class).         if (messageHistoryService == null) {             messageHistoryService = new MicrometerMessageHistoryService().             messageHistoryService.setMeterRegistry(getMeterRegistry()).             messageHistoryService.setPrettyPrint(isPrettyPrint()).             messageHistoryService.setDurationUnit(getDurationUnit()).             messageHistoryService.setMatchingTags(Tags.of(SERVICE_NAME, MicrometerMessageHistoryService.class.getSimpleName())).             camelContext.addService(messageHistoryService).         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;protected;0;4;;@Override protected void doStop() { // noop }
