commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public MicrometerRouteEventNotifierNamingStrategy getNamingStrategy() {     return namingStrategy. }
false;public;1;3;;public void setNamingStrategy(MicrometerRouteEventNotifierNamingStrategy namingStrategy) {     this.namingStrategy = namingStrategy. }
false;protected;0;12;;@Override protected void doStart() throws Exception {     super.doStart().     Gauge.builder(namingStrategy.getRouteAddedName(), routesAdded, value -> Long.valueOf(value.get()).doubleValue()).baseUnit("routes").tags(namingStrategy.getTags(getCamelContext())).register(getMeterRegistry()).     Gauge.builder(namingStrategy.getRouteRunningName(), routesRunning, value -> Long.valueOf(value.get()).doubleValue()).baseUnit("routes").tags(namingStrategy.getTags(getCamelContext())).register(getMeterRegistry()). }
false;public;1;12;;@Override public void notify(CamelEvent eventObject) {     if (eventObject instanceof RouteAddedEvent) {         routesAdded.incrementAndGet().     } else if (eventObject instanceof RouteRemovedEvent) {         routesAdded.decrementAndGet().     } else if (eventObject instanceof RouteStartedEvent) {         routesRunning.incrementAndGet().     } else if (eventObject instanceof RouteStoppedEvent) {         routesRunning.decrementAndGet().     } }
