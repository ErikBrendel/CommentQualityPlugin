commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public MicrometerEndpoint getEndpoint() {     return (MicrometerEndpoint) super.getEndpoint(). }
false;public;1;22;;@Override public void process(Exchange exchange) {     Message in = exchange.getIn().     String defaultMetricsName = simple(exchange, getEndpoint().getMetricsName(), String.class).     String finalMetricsName = getStringHeader(in, HEADER_METRIC_NAME, defaultMetricsName).     Iterable<Tag> defaultTags = getEndpoint().getTags().     Iterable<Tag> headerTags = getTagHeader(in, HEADER_METRIC_TAGS, Tags.empty()).     Iterable<Tag> finalTags = Tags.concat(defaultTags, headerTags).stream().map(tag -> Tag.of(simple(exchange, tag.getKey(), String.class), simple(exchange, tag.getValue(), String.class))).reduce(Tags.empty(), Tags::and, Tags::and).and(Tags.of(CAMEL_CONTEXT_TAG, getEndpoint().getCamelContext().getName())).     try {         doProcess(exchange, finalMetricsName, finalTags).     } catch (Exception e) {         exchange.setException(e).     } finally {         clearMetricsHeaders(in).     } }
false;protected,abstract;2;1;;protected abstract Function<MeterRegistry, T> registrar(String name, Iterable<Tag> tags).
false;protected;3;3;;protected void doProcess(Exchange exchange, String name, Iterable<Tag> tags) {     doProcess(exchange, getEndpoint(), getOrRegisterMeter(name, tags)). }
false;protected;2;4;;protected T getOrRegisterMeter(String name, Iterable<Tag> tags) {     MeterRegistry registry = getEndpoint().getRegistry().     return registrar(name, tags).apply(registry). }
false;protected,abstract;3;1;;protected abstract void doProcess(Exchange exchange, MicrometerEndpoint endpoint, T meter).
false;protected;3;10;;protected <C> C simple(Exchange exchange, String expression, Class<C> clazz) {     if (expression != null) {         Language language = exchange.getContext().resolveLanguage("simple").         Expression simple = language.createExpression(expression).         if (simple != null) {             return simple.evaluate(exchange, clazz).         }     }     return getEndpoint().getCamelContext().getTypeConverter().convertTo(clazz, expression). }
false;protected;3;4;;protected String getStringHeader(Message in, String header, String defaultValue) {     String headerValue = in.getHeader(header, String.class).     return ObjectHelper.isNotEmpty(headerValue) ? headerValue : defaultValue. }
false;protected;3;3;;protected Double getDoubleHeader(Message in, String header, Double defaultValue) {     return in.getHeader(header, defaultValue, Double.class). }
false;protected;3;4;;@SuppressWarnings("unchecked") protected Iterable<Tag> getTagHeader(Message in, String header, Iterable<Tag> defaultTags) {     return in.getHeader(header, defaultTags, Iterable.class). }
false;protected;1;3;;protected boolean clearMetricsHeaders(Message in) {     return in.removeHeaders(HEADER_PATTERN). }
