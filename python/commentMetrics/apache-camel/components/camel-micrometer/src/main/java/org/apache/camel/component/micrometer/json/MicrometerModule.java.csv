commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getModuleName() {     return "micrometer". }
false;public;0;4;;@Override public Version version() {     return VERSION. }
false;public;3;7;;@Override public void serialize(Meter.Id id, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeStartObject().     json.writeStringField("name", id.getName()).     json.writeObjectField("tags", id.getTags()).     json.writeEndObject(). }
false;public;3;6;;@Override public void serialize(Tag tag, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeStartObject().     json.writeStringField(tag.getKey(), tag.getValue()).     json.writeEndObject(). }
false;public,final;3;7;;@Override public final void serialize(T meter, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeStartObject().     json.writeObjectField("id", meter.getId()).     serializeStatistics(meter, json, provider).     json.writeEndObject(). }
false;protected,abstract;3;1;;protected abstract void serializeStatistics(T meter, JsonGenerator json, SerializerProvider provider) throws IOException.
false;protected,static;3;10;;protected static void serializeSnapshot(JsonGenerator json, HistogramSnapshot snapshot, TimeUnit timeUnit) throws IOException {     json.writeNumberField("count", snapshot.count()).     json.writeNumberField("max", snapshot.max(timeUnit)).     json.writeNumberField("mean", snapshot.mean(timeUnit)).     json.writeNumberField("total", snapshot.total(timeUnit)).     ValueAtPercentile[] percentiles = snapshot.percentileValues().     for (ValueAtPercentile percentile : percentiles) {         json.writeNumberField(String.format("p%0.3d", percentile.percentile()), percentile.value(timeUnit)).     } }
false;protected;3;4;;@Override protected void serializeStatistics(Gauge gauge, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeNumberField("value", gauge.value()). }
false;protected;3;4;;@Override protected void serializeStatistics(Counter counter, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeNumberField("count", counter.count()). }
false;protected;3;4;;@Override protected void serializeStatistics(FunctionCounter counter, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeNumberField("count", counter.count()). }
false;protected;3;4;;@Override protected void serializeStatistics(AbstractTimer timer, JsonGenerator json, SerializerProvider provider) throws IOException {     serializeSnapshot(json, timer.takeSnapshot(), timeUnit). }
false;protected;3;6;;@Override protected void serializeStatistics(FunctionTimer timer, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeNumberField("count", timer.count()).     json.writeNumberField("mean", timer.mean(timeUnit)).     json.writeNumberField("total", timer.totalTime(timeUnit)). }
false;protected;3;5;;@Override protected void serializeStatistics(LongTaskTimer timer, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeNumberField("activeTasks", timer.activeTasks()).     json.writeNumberField("duration", timer.duration(timeUnit)). }
false;protected;3;6;;@Override protected void serializeStatistics(AbstractDistributionSummary distributionSummary, JsonGenerator json, SerializerProvider provider) throws IOException {     serializeSnapshot(json, distributionSummary.takeSnapshot(), timeUnit). }
false;public;3;16;;@Override public void serialize(MeterRegistry registry, JsonGenerator json, SerializerProvider provider) throws IOException {     json.writeStartObject().     json.writeStringField("version", VERSION.toString()).     json.writeObjectField("gauges", meters(registry, Gauge.class, matchingNames, matchingTags)).     json.writeObjectField("counters", meters(registry, Counter.class, matchingNames, matchingTags)).     json.writeObjectField("functionCounters", meters(registry, FunctionCounter.class, matchingNames, matchingTags)).     json.writeObjectField("timers", meters(registry, Timer.class, matchingNames, matchingTags)).     json.writeObjectField("functionTimers", meters(registry, FunctionTimer.class, matchingNames, matchingTags)).     json.writeObjectField("longTaskTimers", meters(registry, LongTaskTimer.class, matchingNames, matchingTags)).     json.writeObjectField("distributionSummaries", meters(registry, DistributionSummary.class, matchingNames, matchingTags)).     json.writeEndObject(). }
false;private;4;12;;private Set<Meter> meters(MeterRegistry meterRegistry, Class<? extends Meter> clazz, Predicate<String> matchingNames, Iterable<Tag> matchingTags) {     if (meterRegistry instanceof CompositeMeterRegistry) {         return ((CompositeMeterRegistry) meterRegistry).getRegistries().stream().flatMap(reg -> meters(reg, clazz, matchingNames, matchingTags).stream()).sorted(Comparator.comparing(o -> o.getId().getName())).collect(Collectors.toSet()).     }     return Search.in(meterRegistry).name(matchingNames).tags(matchingTags).meters().stream().filter(clazz::isInstance).sorted(Comparator.comparing(o -> o.getId().getName())).collect(Collectors.toSet()). }
false;public;1;15;;@Override public void setupModule(SetupContext setupContext) {     setupContext.addSerializers(new SimpleSerializers(Arrays.asList(new IdSerializer(), new TagSerializer(), new GaugeSerializer(), new CounterSerializer(), new FunctionCounterSerializer(), new TimerSerializer(timeUnit), new FunctionTimerSerializer(timeUnit), new LongTaskTimerSerializer(timeUnit), new DistributionSummarySerializer(timeUnit), new MeterRegistrySerializer(matchingNames, matchingTags)))). }
