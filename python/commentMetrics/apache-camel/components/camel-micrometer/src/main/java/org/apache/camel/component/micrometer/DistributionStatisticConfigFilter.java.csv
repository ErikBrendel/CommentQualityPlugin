commented;modifiers;parameterAmount;loc;comment;code
false;public;2;17;;@Override public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) {     if (CAMEL_METERS.and(appliesTo).test(id)) {         return DistributionStatisticConfig.builder().percentilesHistogram(publishPercentileHistogram).percentiles(percentiles).percentilePrecision(percentilePrecision).maximumExpectedValue(maximumExpectedValue).minimumExpectedValue(minimumExpectedValue).sla(slas).bufferLength(bufferLength).expiry(expiry).build().merge(config).     }     return config. }
true;public;1;4;/**  * Restrict a condition under which this config applies to a Camel meter  *  * @param appliesTo predicate that must return true so that this config applies  */ ;/**  * Restrict a condition under which this config applies to a Camel meter  *  * @param appliesTo predicate that must return true so that this config applies  */ public DistributionStatisticConfigFilter andAppliesTo(Predicate<Meter.Id> appliesTo) {     this.appliesTo = this.appliesTo.and(appliesTo).     return this. }
true;public;1;4;/**  * Add a condition under which this config applies to a Camel meter  *  * @param appliesTo predicate that must return true so that this config applies  */ ;/**  * Add a condition under which this config applies to a Camel meter  *  * @param appliesTo predicate that must return true so that this config applies  */ public DistributionStatisticConfigFilter orAppliesTo(Predicate<Meter.Id> appliesTo) {     this.appliesTo = this.appliesTo.or(appliesTo).     return this. }
true;public;1;4;/**  * Sets the maximum expected value for a distribution summary value.  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param maximumExpectedValue the maximum expected value for a distribution summary value  */ ;/**  * Sets the maximum expected value for a distribution summary value.  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param maximumExpectedValue the maximum expected value for a distribution summary value  */ public DistributionStatisticConfigFilter setMaximumExpectedValue(Long maximumExpectedValue) {     this.maximumExpectedValue = maximumExpectedValue.     return this. }
true;public;1;4;/**  * Sets the minimum expected value for a distribution summary value.  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param minimumExpectedValue the minimum expected value for a distribution summary value  */ ;/**  * Sets the minimum expected value for a distribution summary value.  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param minimumExpectedValue the minimum expected value for a distribution summary value  */ public DistributionStatisticConfigFilter setMinimumExpectedValue(Long minimumExpectedValue) {     this.minimumExpectedValue = minimumExpectedValue.     return this. }
true;public;1;4;/**  * Sets the maximum expected duration for a timer value  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param maximumExpectedDuration the maximum expected duration for a timer value  */ ;/**  * Sets the maximum expected duration for a timer value  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param maximumExpectedDuration the maximum expected duration for a timer value  */ public DistributionStatisticConfigFilter setMaximumExpectedDuration(Duration maximumExpectedDuration) {     this.maximumExpectedValue = maximumExpectedDuration.toNanos().     return this. }
true;public;1;4;/**  * Sets the minimum expected duration for a timer value  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param minimumExpectedDuration the minimum expected duration for a timer value  */ ;/**  * Sets the minimum expected duration for a timer value  * Controls the number of buckets shipped by publishPercentileHistogram as well as controlling the  * accuracy and memory footprint of the underlying HdrHistogram structure.  *  * @param minimumExpectedDuration the minimum expected duration for a timer value  */ public DistributionStatisticConfigFilter setMinimumExpectedDuration(Duration minimumExpectedDuration) {     this.minimumExpectedValue = minimumExpectedDuration.toNanos().     return this. }
true;public;1;4;/**  * Whether to publish aggregatable percentile approximations for Prometheus or Atlas.  * Has no effect on systems that do not support aggregatable percentile approximations.  * This defaults to true.  *  * @param publishPercentileHistogram Whether to publish aggregatable percentile approximations.  */ ;/**  * Whether to publish aggregatable percentile approximations for Prometheus or Atlas.  * Has no effect on systems that do not support aggregatable percentile approximations.  * This defaults to true.  *  * @param publishPercentileHistogram Whether to publish aggregatable percentile approximations.  */ public DistributionStatisticConfigFilter setPublishPercentileHistogram(Boolean publishPercentileHistogram) {     this.publishPercentileHistogram = publishPercentileHistogram.     return this. }
false;public;1;4;;public DistributionStatisticConfigFilter setBufferLength(Integer bufferLength) {     this.bufferLength = bufferLength.     return this. }
false;public;1;4;;public DistributionStatisticConfigFilter setExpiry(Duration expiry) {     this.expiry = expiry.     return this. }
true;public;1;4;/**  * Calculate and publish percentile values. These values are non-aggregatable across dimensions.  *  * @param percentiles array of percentiles to be published  */ ;/**  * Calculate and publish percentile values. These values are non-aggregatable across dimensions.  *  * @param percentiles array of percentiles to be published  */ public DistributionStatisticConfigFilter setPercentiles(double[] percentiles) {     this.percentiles = percentiles.     return this. }
false;public;1;4;;public DistributionStatisticConfigFilter setPercentilePrecision(Integer percentilePrecision) {     this.percentilePrecision = percentilePrecision.     return this. }
true;public;1;4;/**  * Publish a cumulative histogram with buckets defined by your SLAs. Used together with publishPercentileHistogram  * on a monitoring system that supports aggregatable percentiles, this setting adds additional buckets to the published histogram.  * Used on a system that does not support aggregatable percentiles, this setting causes a histogram to be published with only these buckets.  *  * @param slas array of percentiles to be published  */ ;/**  * Publish a cumulative histogram with buckets defined by your SLAs. Used together with publishPercentileHistogram  * on a monitoring system that supports aggregatable percentiles, this setting adds additional buckets to the published histogram.  * Used on a system that does not support aggregatable percentiles, this setting causes a histogram to be published with only these buckets.  *  * @param slas array of percentiles to be published  */ public DistributionStatisticConfigFilter setSlas(long[] slas) {     this.slas = slas.     return this. }
