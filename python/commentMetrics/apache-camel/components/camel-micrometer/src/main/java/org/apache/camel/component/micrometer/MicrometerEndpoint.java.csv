commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) {     throw new RuntimeCamelException("Cannot consume from " + getClass().getSimpleName() + ": " + getEndpointUri()). }
false;public;0;12;;@Override public Producer createProducer() {     if (metricsType == Meter.Type.COUNTER) {         return new CounterProducer(this).     } else if (metricsType == Meter.Type.DISTRIBUTION_SUMMARY) {         return new DistributionSummaryProducer(this).     } else if (metricsType == Meter.Type.TIMER) {         return new TimerProducer(this).     } else {         throw new IllegalArgumentException("Metrics type " + metricsType + " is not supported").     } }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public MeterRegistry getRegistry() {     return registry. }
false;public;0;3;;public String getMetricsName() {     return metricsName. }
false;public;0;3;;public Iterable<Tag> getTags() {     return tags. }
false;public;0;3;;public Meter.Type getMetricsType() {     return metricsType. }
false;public;0;3;;public String getAction() {     return action. }
false;public;1;3;;public void setAction(String action) {     this.action = action. }
false;public;0;3;;public String getValue() {     return value. }
false;public;1;3;;public void setValue(String value) {     this.value = value. }
false;public;0;3;;public String getIncrement() {     return increment. }
false;public;1;3;;public void setIncrement(String increment) {     this.increment = increment. }
false;public;0;3;;public String getDecrement() {     return decrement. }
false;public;1;3;;public void setDecrement(String decrement) {     this.decrement = decrement. }
false;;1;3;;void setRegistry(MeterRegistry registry) {     this.registry = registry. }
