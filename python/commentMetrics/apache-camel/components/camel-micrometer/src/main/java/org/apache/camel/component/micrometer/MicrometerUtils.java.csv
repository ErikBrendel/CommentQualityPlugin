commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static Meter.Type getByName(String meterName) {     switch(meterName) {         case "summary":             return Meter.Type.DISTRIBUTION_SUMMARY.         case "counter":             return Meter.Type.COUNTER.         case "timer":             return Meter.Type.TIMER.         default:             throw new RuntimeCamelException("Unsupported meter type " + meterName).     } }
false;public,static;1;8;;public static String getName(Meter.Type type) {     switch(type) {         case DISTRIBUTION_SUMMARY:             return "summary".         case COUNTER:             return "counter".         case TIMER:             return "timer".         default:             throw new RuntimeCamelException("Unsupported meter type " + type).     } }
false;public,static;2;10;;public static MeterRegistry getOrCreateMeterRegistry(Registry camelRegistry, String registryName) {     LOG.debug("Looking up MeterRegistry from Camel Registry for name \"{}\"", registryName).     MeterRegistry result = getMeterRegistryFromCamelRegistry(camelRegistry, registryName).     if (result == null) {         LOG.debug("MeterRegistry not found from Camel Registry for name \"{}\"", registryName).         LOG.info("Creating new default MeterRegistry").         result = createMeterRegistry().     }     return result. }
false;public,static;2;12;;public static MeterRegistry getMeterRegistryFromCamelRegistry(Registry camelRegistry, String registryName) {     MeterRegistry registry = camelRegistry.lookupByNameAndType(registryName, MeterRegistry.class).     if (registry != null) {         return registry.     } else {         Set<MeterRegistry> registries = camelRegistry.findByType(MeterRegistry.class).         if (registries.size() == 1) {             return registries.iterator().next().         }     }     return null. }
false;public,static;0;3;;public static MeterRegistry createMeterRegistry() {     return new SimpleMeterRegistry(). }
