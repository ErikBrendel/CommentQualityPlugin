commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void onExchangeBegin(Exchange exchange) {     Timer.Sample sample = Timer.start(meterRegistry).     exchange.setProperty(propertyName(exchange), sample). }
false;public;1;10;;public void onExchangeDone(Exchange exchange) {     Timer.Sample sample = (Timer.Sample) exchange.removeProperty(propertyName(exchange)).     if (sample != null) {         Timer timer = Timer.builder(namingStrategy.getName(route)).tags(namingStrategy.getTags(route, exchange)).description(route.getDescription()).register(meterRegistry).         sample.stop(timer).     } }
false;private;1;3;;private String propertyName(Exchange exchange) {     return String.format("%s-%s-%s", DEFAULT_CAMEL_ROUTE_POLICY_METER_NAME, route.getId(), exchange.getExchangeId()). }
false;public;0;3;;public MeterRegistry getMeterRegistry() {     return meterRegistry. }
false;public;1;3;;public void setMeterRegistry(MeterRegistry meterRegistry) {     this.meterRegistry = meterRegistry. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public TimeUnit getDurationUnit() {     return durationUnit. }
false;public;1;3;;public void setDurationUnit(TimeUnit durationUnit) {     this.durationUnit = durationUnit. }
false;public;0;3;;public MicrometerRoutePolicyNamingStrategy getNamingStrategy() {     return namingStrategy. }
false;public;1;3;;public void setNamingStrategy(MicrometerRoutePolicyNamingStrategy namingStrategy) {     this.namingStrategy = namingStrategy. }
false;public;1;27;;@Override public void onInit(Route route) {     super.onInit(route).     if (getMeterRegistry() == null) {         setMeterRegistry(MicrometerUtils.getOrCreateMeterRegistry(route.getRouteContext().getCamelContext().getRegistry(), METRICS_REGISTRY_NAME)).     }     try {         MicrometerRoutePolicyService registryService = route.getRouteContext().getCamelContext().hasService(MicrometerRoutePolicyService.class).         if (registryService == null) {             registryService = new MicrometerRoutePolicyService().             registryService.setMeterRegistry(getMeterRegistry()).             registryService.setPrettyPrint(isPrettyPrint()).             registryService.setDurationUnit(getDurationUnit()).             registryService.setMatchingTags(Tags.of(SERVICE_NAME, MicrometerRoutePolicyService.class.getSimpleName())).             route.getRouteContext().getCamelContext().addService(registryService).             ServiceHelper.startService(registryService).         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     // create statistics holder     // for now we record only all the timings of a complete exchange (responses)     // we have in-flight / total statistics already from camel-core     statistics = new MetricsStatistics(getMeterRegistry(), route, getNamingStrategy()). }
false;public;2;6;;@Override public void onExchangeBegin(Route route, Exchange exchange) {     if (statistics != null) {         statistics.onExchangeBegin(exchange).     } }
false;public;2;6;;@Override public void onExchangeDone(Route route, Exchange exchange) {     if (statistics != null) {         statistics.onExchangeDone(exchange).     } }
