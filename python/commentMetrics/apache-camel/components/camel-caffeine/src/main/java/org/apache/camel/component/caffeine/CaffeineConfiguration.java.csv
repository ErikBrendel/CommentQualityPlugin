commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isCreateCacheIfNotExist() {     return createCacheIfNotExist. }
true;public;1;3;/**  * Configure if a cache need to be created if it does exist or can't be  * pre-configured.  */ ;/**  * Configure if a cache need to be created if it does exist or can't be  * pre-configured.  */ public void setCreateCacheIfNotExist(boolean createCacheIfNotExist) {     this.createCacheIfNotExist = createCacheIfNotExist. }
false;public;0;3;;public String getAction() {     return action. }
true;public;1;3;/**  * To configure the default cache action. If an action is set in the message  * header, then the operation from the header takes precedence.  */ ;/**  * To configure the default cache action. If an action is set in the message  * header, then the operation from the header takes precedence.  */ public void setAction(String action) {     this.action = action. }
false;public;0;3;;public Object getKey() {     return key. }
true;public;1;3;/**  * To configure the default action key. If a key is set in the message  * header, then the key from the header takes precedence.  */ ;/**  * To configure the default action key. If a key is set in the message  * header, then the key from the header takes precedence.  */ public void setKey(Object key) {     this.key = key. }
false;public;0;3;;public Class<?> getKeyType() {     return keyType. }
true;public;1;3;/**  * The cache key type, default "java.lang.Object"  */ ;/**  * The cache key type, default "java.lang.Object"  */ public void setKeyType(Class<?> keyType) {     this.keyType = keyType. }
false;public;0;3;;public Class<?> getValueType() {     return valueType. }
true;public;1;3;/**  * The cache value type, default "java.lang.Object"  */ ;/**  * The cache value type, default "java.lang.Object"  */ public void setValueType(Class<?> valueType) {     this.valueType = valueType. }
false;public;0;3;;public Cache getCache() {     return cache. }
true;public;1;3;/**  * To configure an already instantiated cache to be used  */ ;/**  * To configure an already instantiated cache to be used  */ public void setCache(Cache cache) {     this.cache = cache. }
false;public;0;3;;public CacheLoader getCacheLoader() {     return cacheLoader. }
true;public;1;3;/**  * To configure a CacheLoader in case of a LoadCache use  */ ;/**  * To configure a CacheLoader in case of a LoadCache use  */ public void setCacheLoader(CacheLoader cacheLoader) {     this.cacheLoader = cacheLoader. }
false;public;0;3;;public boolean isStatsEnabled() {     return statsEnabled. }
true;public;1;3;/**  * To enable stats on the cache  */ ;/**  * To enable stats on the cache  */ public void setStatsEnabled(boolean statsEnabled) {     this.statsEnabled = statsEnabled. }
false;public;0;3;;public int getInitialCapacity() {     return initialCapacity. }
true;public;1;3;/**  * Set the initial Capacity for the cache  */ ;/**  * Set the initial Capacity for the cache  */ public void setInitialCapacity(int initialCapacity) {     this.initialCapacity = initialCapacity. }
false;public;0;3;;public int getMaximumSize() {     return maximumSize. }
true;public;1;3;/**  * Set the maximum size for the cache  */ ;/**  * Set the maximum size for the cache  */ public void setMaximumSize(int maximumSize) {     this.maximumSize = maximumSize. }
false;public;0;3;;public EvictionType getEvictionType() {     return evictionType. }
true;public;1;3;/**  * Set the eviction Type for this cache  */ ;/**  * Set the eviction Type for this cache  */ public void setEvictionType(EvictionType evictionType) {     this.evictionType = evictionType. }
false;public;0;3;;public int getExpireAfterAccessTime() {     return expireAfterAccessTime. }
true;public;1;3;/**  * Set the expire After Access Time in case of time based Eviction (in  * seconds)  */ ;/**  * Set the expire After Access Time in case of time based Eviction (in  * seconds)  */ public void setExpireAfterAccessTime(int expireAfterAccessTime) {     this.expireAfterAccessTime = expireAfterAccessTime. }
false;public;0;3;;public int getExpireAfterWriteTime() {     return expireAfterWriteTime. }
true;public;1;3;/**  * Set the expire After Access Write in case of time based Eviction (in  * seconds)  */ ;/**  * Set the expire After Access Write in case of time based Eviction (in  * seconds)  */ public void setExpireAfterWriteTime(int expireAfterWriteTime) {     this.expireAfterWriteTime = expireAfterWriteTime. }
false;public;0;3;;public RemovalListener getRemovalListener() {     return removalListener. }
true;public;1;3;/**  * Set a specific removal Listener for the cache  */ ;/**  * Set a specific removal Listener for the cache  */ public void setRemovalListener(RemovalListener removalListener) {     this.removalListener = removalListener. }
false;public;0;3;;public StatsCounter getStatsCounter() {     return statsCounter. }
true;public;1;3;/**  * Set a specific Stats Counter for the cache stats  */ ;/**  * Set a specific Stats Counter for the cache stats  */ public void setStatsCounter(StatsCounter statsCounter) {     this.statsCounter = statsCounter. }
true;public;0;7;// **************************** ;// **************************** // Cloneable // **************************** public CaffeineConfiguration copy() {     try {         return (CaffeineConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
