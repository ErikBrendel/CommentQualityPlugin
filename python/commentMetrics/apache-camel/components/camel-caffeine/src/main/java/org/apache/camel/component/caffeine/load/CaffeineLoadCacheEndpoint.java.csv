commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new CaffeineLoadCacheProducer(this, this.cacheName, configuration, cache). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;0;27;;@Override protected void doStart() throws Exception {     if (ObjectHelper.isNotEmpty(configuration.getCache())) {         cache = (LoadingCache) configuration.getCache().     } else {         Caffeine<Object, Object> builder = Caffeine.newBuilder().         if (configuration.getEvictionType() == EvictionType.SIZE_BASED) {             builder.initialCapacity(configuration.getInitialCapacity()).             builder.maximumSize(configuration.getMaximumSize()).         } else if (configuration.getEvictionType() == EvictionType.TIME_BASED) {             builder.expireAfterAccess(configuration.getExpireAfterAccessTime(), TimeUnit.SECONDS).             builder.expireAfterWrite(configuration.getExpireAfterWriteTime(), TimeUnit.SECONDS).         }         if (configuration.isStatsEnabled()) {             if (ObjectHelper.isEmpty(configuration.getStatsCounter())) {                 builder.recordStats().             } else {                 builder.recordStats(() -> configuration.getStatsCounter()).             }         }         if (ObjectHelper.isNotEmpty(configuration.getRemovalListener())) {             builder.removalListener(configuration.getRemovalListener()).         }         cache = builder.build(configuration.getCacheLoader()).     }     super.doStart(). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     super.doStop(). }
false;;0;3;;CaffeineConfiguration getConfiguration() {     return configuration. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new IllegalArgumentException("The caffeine-loadcache component doesn't support consumer"). }
