commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("cache", cache).     registry.bind("cacheRl", cacheRl).     registry.bind("cacheSc", cacheSc).     return registry. }
false;protected;0;3;;protected Cache getTestCache() {     return cache. }
false;protected;0;3;;protected Cache getTestRemovalListenerCache() {     return cacheRl. }
false;protected;0;3;;protected Cache getTestStatsCounterCache() {     return cacheSc. }
false;protected;0;3;;protected MetricRegistry getMetricRegistry() {     return mRegistry. }
false;protected,static;3;8;;protected static int[] generateRandomArrayOfInt(int size, int lower, int upper) {     Random random = new Random().     int[] array = new int[size].     Arrays.setAll(array, i -> random.nextInt(upper - lower) + lower).     return array. }
false;protected,static;0;3;;protected static String generateRandomString() {     return UUID.randomUUID().toString(). }
false;protected,static;1;6;;protected static String[] generateRandomArrayOfStrings(int size) {     String[] array = new String[size].     Arrays.setAll(array, i -> generateRandomString()).     return array. }
false;protected,static;1;3;;protected static List<String> generateRandomListOfStrings(int size) {     return Arrays.asList(generateRandomArrayOfStrings(size)). }
false;protected,static;1;3;;protected static Map<String, String> generateRandomMapOfString(int size) {     return IntStream.range(0, size).boxed().collect(Collectors.toMap(i -> i + "-" + generateRandomString(), i -> i + "-" + generateRandomString())). }
false;public;3;4;;@Override public void onRemoval(Object key, Object value, RemovalCause cause) {     LOG.info("Key %s was removed (%s)%n", key, cause). }
