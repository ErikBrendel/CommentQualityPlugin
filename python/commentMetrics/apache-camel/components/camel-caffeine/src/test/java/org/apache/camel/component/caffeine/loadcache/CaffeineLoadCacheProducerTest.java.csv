commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;// **************************** // Clear // **************************** @Test public void testCacheClear() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived((Object) null).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_CLEANUP).to("direct://start").send().     assertMockEndpointsSatisfied(). }
false;public;0;16;;// **************************** // Put // **************************** @Test public void testCachePut() throws Exception {     final int key = 1.     final int val = 3.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(val).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_PUT).withHeader(CaffeineConstants.KEY, key).withBody(val).to("direct://start").send().     assertTrue(getTestCache().getIfPresent(key) != null).     assertEquals(val, getTestCache().getIfPresent(key)). }
false;public;0;23;;@Test public void testCachePutAll() throws Exception {     final Map<Integer, Integer> map = new HashMap<>().     map.put(1, 1).     map.put(2, 2).     map.put(3, 3).     final Set<Integer> keys = map.keySet().stream().limit(2).collect(Collectors.toSet()).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_PUT_ALL).withBody(map).to("direct://start").send().     MockEndpoint mock1 = getMockEndpoint("mock:result").     mock1.expectedMinimumMessageCount(1).     mock1.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false).     mock1.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     final Map<String, String> elements = getTestCache().getAllPresent(keys).     keys.forEach(k -> {         assertTrue(elements.containsKey(k)).         assertEquals(map.get(k), elements.get(k)).     }).     assertMockEndpointsSatisfied(). }
false;public;0;15;;// **************************** // Get // **************************** @Test public void testCacheGet() throws Exception {     final Integer key = 1.     final Integer val = 2.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived(val).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, true).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY, key).withBody(val).to("direct://start").send().     assertMockEndpointsSatisfied(). }
false;public;0;26;;@Test public void testCacheGetAll() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final Map<Integer, Integer> map = new HashMap<>().     map.put(1, 1).     map.put(2, 2).     map.put(3, 3).     final Set<Integer> keys = map.keySet().stream().limit(2).collect(Collectors.toSet()).     cache.putAll(map).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, true).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET_ALL).withHeader(CaffeineConstants.KEYS, keys).to("direct://start").send().     assertMockEndpointsSatisfied().     final Map<String, String> elements = mock.getExchanges().get(0).getIn().getBody(Map.class).     keys.forEach(k -> {         assertTrue(elements.containsKey(k)).         assertEquals(map.get(k), elements.get(k)).     }). }
false;public;0;19;;// **************************** // INVALIDATE // **************************** @Test public void testCacheInvalidate() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final Integer key = 1.     final Integer val = 1.     cache.put(key, val).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_INVALIDATE).withHeader(CaffeineConstants.KEY, key).to("direct://start").send().     assertMockEndpointsSatisfied().     assertFalse(cache.getIfPresent(key) != null). }
false;public;0;25;;@Test public void testCacheInvalidateAll() throws Exception {     final Cache<Object, Object> cache = getTestCache().     final Map<Integer, Integer> map = new HashMap<>().     map.put(1, 1).     map.put(2, 2).     map.put(3, 3).     final Set<Integer> keys = map.keySet().stream().limit(2).collect(Collectors.toSet()).     cache.putAll(map).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false).     mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true).     fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_INVALIDATE_ALL).withHeader(CaffeineConstants.KEYS, keys).to("direct://start").send().     assertMockEndpointsSatisfied().     final Map<String, String> elements = getTestCache().getAllPresent(keys).     keys.forEach(k -> {         assertFalse(elements.containsKey(k)).     }). }
false;public;0;4;;public void configure() {     from("direct://start").toF("caffeine-loadcache://%s?cache=#cache", "test").to("log:org.apache.camel.component.caffeine?level=INFO&showAll=true&multiline=true").to("mock:result"). }
false;protected;0;9;;// **************************** // Route // **************************** @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct://start").toF("caffeine-loadcache://%s?cache=#cache", "test").to("log:org.apache.camel.component.caffeine?level=INFO&showAll=true&multiline=true").to("mock:result").         }     }. }
