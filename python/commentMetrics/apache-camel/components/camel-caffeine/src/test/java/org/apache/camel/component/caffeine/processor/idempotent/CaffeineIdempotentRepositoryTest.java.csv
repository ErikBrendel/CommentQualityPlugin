commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected void doPreSetup() throws Exception {     super.doPreSetup().     repo = new CaffeineIdempotentRepository("test").     key01 = generateRandomString().     key02 = generateRandomString(). }
false;public;0;13;;@Test public void testAdd() throws Exception {     // add first key     assertTrue(repo.add(key01)).     assertTrue(repo.getCache().asMap().containsKey(key01)).     // try to add the same key again     assertFalse(repo.add(key01)).     // try to add an other one     assertTrue(repo.add(key02)).     assertTrue(repo.getCache().asMap().containsKey(key02)). }
false;public;0;9;;@Test public void testConfirm() throws Exception {     // add first key and confirm     assertTrue(repo.add(key01)).     assertTrue(repo.confirm(key01)).     // try to confirm a key that isn't there     assertFalse(repo.confirm(key02)). }
false;public;0;9;;@Test public void testContains() throws Exception {     assertFalse(repo.contains(key01)).     // add key and check again     assertTrue(repo.add(key01)).     assertTrue(repo.contains(key01)). }
false;public;0;13;;@Test public void testRemove() throws Exception {     // add key to remove     assertTrue(repo.add(key01)).     assertTrue(repo.add(key02)).     assertTrue(repo.getCache().asMap().containsKey(key01)).     assertTrue(repo.getCache().asMap().containsKey(key02)).     // clear repo     repo.clear().     assertFalse(repo.getCache().asMap().containsKey(key01)).     assertFalse(repo.getCache().asMap().containsKey(key02)). }
false;public;0;13;;@Test public void testClear() throws Exception {     // add key to remove     assertTrue(repo.add(key01)).     assertTrue(repo.confirm(key01)).     // remove key     assertTrue(repo.remove(key01)).     assertFalse(repo.confirm(key01)).     // try to remove a key that isn't there     repo.remove(key02). }
false;public;0;16;;@Test public void testRepositoryInRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:out").     mock.expectedBodiesReceived("a", "b").     // c is a duplicate     // should be started     assertEquals("Should be started", true, repo.getStatus().isStarted()).     // send 3 message with one duplicated key (key01)     template.sendBodyAndHeader("direct://in", "a", "messageId", key01).     template.sendBodyAndHeader("direct://in", "b", "messageId", key02).     template.sendBodyAndHeader("direct://in", "c", "messageId", key01).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct://in").idempotentConsumer(header("messageId"), repo).to("mock://out"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct://in").idempotentConsumer(header("messageId"), repo).to("mock://out").         }     }. }
false;protected,static;0;3;;protected static String generateRandomString() {     return UUID.randomUUID().toString(). }
