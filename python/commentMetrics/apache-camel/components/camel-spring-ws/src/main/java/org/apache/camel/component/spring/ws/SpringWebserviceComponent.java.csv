commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Deprecated protected String preProcessUri(String uri) {     String[] u = uri.split("\\?").     return u[0].replaceAll("%7B", "(").replaceAll("%7D", ")") + (u.length > 1 ? "?" + u[1] : ""). }
false;protected;3;14;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     SpringWebserviceConfiguration configuration = new SpringWebserviceConfiguration().     addConsumerConfiguration(remaining, parameters, configuration).     setProperties(configuration, parameters).     configureProducerConfiguration(remaining, configuration).     configureMessageFilter(configuration).     if (configuration.getSslContextParameters() == null) {         configuration.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return new SpringWebserviceEndpoint(this, uri, configuration). }
false;private;3;19;;private void addConsumerConfiguration(String remaining, Map<String, Object> parameters, SpringWebserviceConfiguration configuration) {     EndpointMappingType type = EndpointMappingType.getTypeFromUriPrefix(remaining).     if (type != null) {         log.debug("Building Spring Web Services consumer of type {}", type).         String lookupKey = getLookupKey(remaining, type).         if (EndpointMappingType.BEANNAME.equals(type)) {             addEndpointDispatcherToConfiguration(configuration, lookupKey).         } else {             addEndpointMappingToConfiguration(parameters, configuration).         }         XPathExpression xPathExpression = null.         if (type.equals(EndpointMappingType.XPATHRESULT)) {             String expression = getAndRemoveParameter(parameters, "expression", String.class).             configuration.setExpression(expression).             xPathExpression = createXPathExpression(expression).         }         configuration.setEndpointMappingKey(new EndpointMappingKey(type, lookupKey, xPathExpression)).     } }
false;private;2;27;;private void configureProducerConfiguration(String remaining, SpringWebserviceConfiguration configuration) throws URISyntaxException {     if (configuration.getEndpointMapping() == null && configuration.getEndpointDispatcher() == null) {         log.debug("Building Spring Web Services producer").         URI webServiceEndpointUri = new URI(UnsafeUriCharactersEncoder.encode(remaining)).         // Obtain a WebServiceTemplate from the registry when specified by         // an option on the component, else create a new template with         // Spring-WS defaults         WebServiceTemplate webServiceTemplate = configuration.getWebServiceTemplate().         if (webServiceTemplate == null) {             webServiceTemplate = new WebServiceTemplate().             configuration.setWebServiceTemplate(webServiceTemplate).         }         if (webServiceTemplate.getDefaultUri() == null) {             String uri = webServiceEndpointUri.toString().             webServiceTemplate.setDefaultUri(uri).             configuration.setWebServiceEndpointUri(uri).         }         if (configuration.getMessageSender() != null) {             webServiceTemplate.setMessageSender(configuration.getMessageSender()).         }         if (configuration.getMessageFactory() != null) {             webServiceTemplate.setMessageFactory(configuration.getMessageFactory()).         }     } }
false;private;2;5;;private String getLookupKey(String remaining, EndpointMappingType type) {     String lookupKey = remaining.substring(type.getPrefix().length()).     lookupKey = lookupKey.startsWith("//") ? lookupKey.substring(2) : lookupKey.     return SpringWebserviceConfiguration.decode(lookupKey). }
false;private;1;7;;private XPathExpression createXPathExpression(String xpathExpression) {     if (xpathExpression == null) {         throw new RuntimeCamelException("Expression parameter is required when using XPath endpoint mapping").     }     XPathExpression expression = XPathExpressionFactory.createXPathExpression(xpathExpression).     return expression. }
false;private;2;10;;private void addEndpointMappingToConfiguration(Map<String, Object> parameters, SpringWebserviceConfiguration configuration) {     // Obtain generic CamelSpringWSEndpointMapping from registry     CamelSpringWSEndpointMapping endpointMapping = resolveAndRemoveReferenceParameter(parameters, "endpointMapping", CamelSpringWSEndpointMapping.class, null).     if (endpointMapping == null && configuration.getEndpointDispatcher() == null) {         throw new IllegalArgumentException("No instance of CamelSpringWSEndpointMapping found in Spring ApplicationContext." + " This bean is required for Spring-WS consumer support (unless the 'spring-ws:beanname:' URI scheme is used)").     }     configuration.setEndpointMapping(endpointMapping). }
false;private;2;5;;private void addEndpointDispatcherToConfiguration(SpringWebserviceConfiguration configuration, String lookupKey) {     // Obtain CamelEndpointDispatcher with the given name from registry     CamelEndpointDispatcher endpoint = CamelContextHelper.mandatoryLookup(getCamelContext(), lookupKey, CamelEndpointDispatcher.class).     configuration.setEndpointDispatcher(endpoint). }
true;private;1;12;/**  * Configures the messageFilter's factory. The factory is looked up in the endpoint's URI and then in the Spring's context.  * The bean search mechanism looks for a bean with the name messageFilter.  * The endpoint's URI search mechanism looks for the URI's key parameter name messageFilter, for instance like this:  * spring-ws:http://yourdomain.com?messageFilter=<beanName>  */ ;/**  * Configures the messageFilter's factory. The factory is looked up in the endpoint's URI and then in the Spring's context.  * The bean search mechanism looks for a bean with the name messageFilter.  * The endpoint's URI search mechanism looks for the URI's key parameter name messageFilter, for instance like this:  * spring-ws:http://yourdomain.com?messageFilter=<beanName>  */ private void configureMessageFilter(SpringWebserviceConfiguration configuration) {     if (configuration.getMessageFilter() == null) {         // try to lookup a global filter to use         final MessageFilter globalMessageFilter = EndpointHelper.resolveReferenceParameter(getCamelContext(), "messageFilter", MessageFilter.class, false).         if (globalMessageFilter != null) {             configuration.setMessageFilter(globalMessageFilter).         } else {             // use basic as fallback             configuration.setMessageFilter(new BasicMessageFilter()).         }     } }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
