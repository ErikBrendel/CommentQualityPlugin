commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;1;38;;@Override protected Object getEndpointInternal(MessageContext messageContext) throws Exception {     for (EndpointMappingKey key : endpoints.keySet()) {         String messageKey.         switch(key.getType()) {             case ROOT_QNAME:                 messageKey = getRootQName(messageContext).                 break.             case SOAP_ACTION:                 messageKey = getSoapAction(messageContext).                 break.             case XPATHRESULT:                 messageKey = getXPathResult(messageContext, key.getExpression()).                 break.             case URI:                 messageKey = getUri().                 break.             case URI_PATH:                 messageKey = getUriPath().                 if (messageKey != null && key.getLookupKey().endsWith(URI_PATH_WILDCARD)) {                     String lookupKey = key.getLookupKey().substring(0, key.getLookupKey().length() - 1).                     if (messageKey.startsWith(lookupKey)) {                         return endpoints.get(key).                     }                 }                 break.             default:                 throw new RuntimeCamelException("Invalid mapping type specified. Supported types are: root QName, SOAP action, XPath expression and URI").         }         if (key.getLookupKey().equals(messageKey)) {             return endpoints.get(key).         }     }     return null. }
false;protected,final;3;12;;@Override protected final EndpointInvocationChain createEndpointInvocationChain(MessageContext messageContext, Object endpoint, EndpointInterceptor[] interceptors) {     for (EndpointMappingKey key : endpoints.keySet()) {         if (EndpointMappingType.SOAP_ACTION.equals(key.getType())) {             Object messageKey = getSoapAction(messageContext).             if (key.getLookupKey().equals(messageKey)) {                 return new SoapEndpointInvocationChain(endpoint, interceptors, actorsOrRoles, isUltimateReceiver).             }         }     }     return super.createEndpointInvocationChain(messageContext, endpoint, interceptors). }
false;private;1;11;;private String getSoapAction(MessageContext messageContext) {     if (messageContext.getRequest() instanceof SoapMessage) {         SoapMessage request = (SoapMessage) messageContext.getRequest().         String soapAction = request.getSoapAction().         if (StringUtils.hasLength(soapAction) && soapAction.startsWith(DOUBLE_QUOTE) && soapAction.endsWith(DOUBLE_QUOTE)) {             return soapAction.substring(1, soapAction.length() - 1).         }         return soapAction.     }     return null. }
false;private;0;7;;private String getUri() throws URISyntaxException {     WebServiceConnection webServiceConnection = getWeServiceConnection().     if (webServiceConnection != null) {         return webServiceConnection.getUri().toString().     }     return null. }
false;private;0;8;;private String getUriPath() throws URISyntaxException {     WebServiceConnection webServiceConnection = getWeServiceConnection().     if (webServiceConnection != null) {         return webServiceConnection.getUri().getPath().     }     return null. }
false;private;0;10;;private WebServiceConnection getWeServiceConnection() {     TransportContext transportContext = TransportContextHolder.getTransportContext().     if (transportContext != null) {         WebServiceConnection webServiceConnection = transportContext.getConnection().         if (webServiceConnection != null) {             return webServiceConnection.         }     }     return null. }
false;private;1;4;;private String getRootQName(MessageContext messageContext) throws TransformerException {     QName qName = PayloadRootUtils.getPayloadRootQName(messageContext.getRequest().getPayloadSource(), transformerFactory).     return qName != null ? qName.toString() : null. }
false;private;2;9;;private String getXPathResult(MessageContext messageContext, XPathExpression expression) {     if (expression != null) {         Node domNode = camelContext.getTypeConverter().convertTo(Node.class, messageContext.getRequest().getPayloadSource()).         if (domNode != null) {             return expression.evaluateAsString(domNode.getFirstChild()).         }     }     return null. }
true;public;2;3;/**  * Used by Camel Spring Web Services endpoint to register consumers  */ ;/**  * Used by Camel Spring Web Services endpoint to register consumers  */ public void addConsumer(EndpointMappingKey key, MessageEndpoint endpoint) {     endpoints.put(key, endpoint). }
true;public;1;3;/**  * Used by Camel Spring Web Services endpoint to unregister consumers  */ ;/**  * Used by Camel Spring Web Services endpoint to unregister consumers  */ public void removeConsumer(Object key) {     endpoints.remove(key). }
true;public;0;3;/**  * Gets the configured TransformerFactory  */ ;/**  * Gets the configured TransformerFactory  */ public TransformerFactory getTransformerFactory() {     return transformerFactory. }
true;public;1;3;/**  * Optional setter to override default TransformerFactory  */ ;/**  * Optional setter to override default TransformerFactory  */ public void setTransformerFactory(TransformerFactory transformerFactory) {     this.transformerFactory = transformerFactory. }
false;public;0;6;;public void afterPropertiesSet() throws Exception {     if (transformerFactory == null) {         transformerFactory = TransformerFactory.newInstance().         transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     } }
false;public,final;1;4;;public final void setActorOrRole(String actorOrRole) {     Assert.notNull(actorOrRole, "actorOrRole must not be null").     actorsOrRoles = new String[] { actorOrRole }. }
false;public,final;1;4;;public final void setActorsOrRoles(String[] actorsOrRoles) {     Assert.notEmpty(actorsOrRoles, "actorsOrRoles must not be empty").     this.actorsOrRoles = actorsOrRoles. }
false;public,final;1;3;;public final void setUltimateReceiver(boolean ultimateReceiver) {     this.isUltimateReceiver = ultimateReceiver. }
