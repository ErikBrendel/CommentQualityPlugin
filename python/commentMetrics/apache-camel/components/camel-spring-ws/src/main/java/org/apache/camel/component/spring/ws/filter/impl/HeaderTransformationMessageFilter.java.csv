commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public void filterProducer(Exchange exchange, WebServiceMessage webServiceMessage) {     if (exchange != null) {         processHeader(exchange.getContext(), exchange.getIn(), webServiceMessage).     } }
false;public;2;7;;@Override public void filterConsumer(Exchange exchange, WebServiceMessage webServiceMessage) {     if (exchange != null) {         Message responseMessage = exchange.hasOut() ? exchange.getOut() : exchange.getIn().         processHeader(exchange.getContext(), responseMessage, webServiceMessage).     } }
true;private;3;18;/**  * Transform the header  * @param context  * @param inOrOut  * @param webServiceMessage  */ ;/**  * Transform the header  * @param context  * @param inOrOut  * @param webServiceMessage  */ private void processHeader(CamelContext context, Message inOrOut, WebServiceMessage webServiceMessage) {     if (webServiceMessage instanceof SoapMessage) {         SoapMessage soapMessage = (SoapMessage) webServiceMessage.         try {             XsltUriResolver resolver = new XsltUriResolver(context, xslt).             Source stylesheetResource = resolver.resolve(xslt, null).             TransformerFactory transformerFactory = getTransformerFactory(context).             Transformer transformer = transformerFactory.newTransformer(stylesheetResource).             addParameters(inOrOut, transformer).             transformer.transform(soapMessage.getSoapHeader().getSource(), soapMessage.getSoapHeader().getResult()).         } catch (TransformerException e) {             throw new RuntimeException("Cannot transform the header of the soap message", e).         }     } }
true;private;2;11;/**  * Adding the headers of the message as parameter to the transformer  *  * @param inOrOut  * @param transformer  */ ;/**  * Adding the headers of the message as parameter to the transformer  *  * @param inOrOut  * @param transformer  */ private void addParameters(Message inOrOut, Transformer transformer) {     Map<String, Object> headers = inOrOut.getHeaders().     for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {         String key = headerEntry.getKey().         // Key's with '$' are not allowed in XSLT         if (key != null && !key.startsWith("$")) {             transformer.setParameter(key, String.valueOf(headerEntry.getValue())).         }     } }
false;public;1;4;;@Override public void warning(TransformerException exception) throws TransformerException {     LOG.warn(SOAP_HEADER_TRANSFORMATION_PROBLEM, exception). }
false;public;1;4;;@Override public void fatalError(TransformerException exception) throws TransformerException {     LOG.error(SOAP_HEADER_TRANSFORMATION_PROBLEM, exception). }
false;public;1;4;;@Override public void error(TransformerException exception) throws TransformerException {     LOG.error(SOAP_HEADER_TRANSFORMATION_PROBLEM, exception). }
true;private;1;38;/**  * Getting a {@link TransformerFactory} with logging  *  * @return {@link TransformerFactory}  */ ;/**  * Getting a {@link TransformerFactory} with logging  *  * @return {@link TransformerFactory}  */ private TransformerFactory getTransformerFactory(CamelContext context) {     TransformerFactory transformerFactory = null.     if (saxon) {         transformerFactory = getSaxonTransformerFactory(context).     } else {         transformerFactory = TransformerFactory.newInstance().     }     if (transformerFactory == null) {         throw new IllegalStateException("Cannot resolve a transformer factory").     }     try {         transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     } catch (TransformerConfigurationException ex) {     // ignore     }     transformerFactory.setErrorListener(new ErrorListener() {          @Override         public void warning(TransformerException exception) throws TransformerException {             LOG.warn(SOAP_HEADER_TRANSFORMATION_PROBLEM, exception).         }          @Override         public void fatalError(TransformerException exception) throws TransformerException {             LOG.error(SOAP_HEADER_TRANSFORMATION_PROBLEM, exception).         }          @Override         public void error(TransformerException exception) throws TransformerException {             LOG.error(SOAP_HEADER_TRANSFORMATION_PROBLEM, exception).         }     }).     return transformerFactory. }
true;private;1;17;/**  * Loading the saxon transformer class  *  * @param context  * @return  */ ;/**  * Loading the saxon transformer class  *  * @param context  * @return  */ private TransformerFactory getSaxonTransformerFactory(CamelContext context) {     final ClassResolver resolver = context.getClassResolver().     try {         Class<TransformerFactory> factoryClass = resolver.resolveMandatoryClass(XsltEndpoint.SAXON_TRANSFORMER_FACTORY_CLASS_NAME, TransformerFactory.class, XsltComponent.class.getClassLoader()).         if (factoryClass != null) {             return ObjectHelper.newInstance(factoryClass).         }     } catch (ClassNotFoundException e) {         throw new RuntimeException("Cannot load the saxon transformer class", e).     }     return null. }
false;public;0;3;;public String getXslt() {     return xslt. }
false;public;1;3;;public void setXslt(String xslt) {     this.xslt = xslt. }
false;public;0;3;;public boolean isSaxon() {     return saxon. }
false;public;1;3;;public void setSaxon(boolean saxon) {     this.saxon = saxon. }
