commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;51;;@Override protected Object getEndpointInternal(MessageAddressingProperties map) {     // search the endpoint with compositeKeyFirst     for (EndpointMappingKey key : endpoints.keySet()) {         String compositeOrSimpleKey = null.         switch(key.getType()) {             case ACTION:                 compositeOrSimpleKey = getActionCompositeLookupKey(map).                 break.             case TO:                 compositeOrSimpleKey = getToCompositeLookupKey(map).                 break.             default:                 throw new RuntimeCamelException("Invalid mapping type specified. Supported types are: spring-ws:action:<WS-Addressing Action>(optional:<WS-Addressing To>?<params...>\n)" + "spring-ws:to:<WS-Addressing To>(optional:<WS-Addressing Action>?<params...>)").         }         // lookup for specific endpoint         if (compositeOrSimpleKey != null && key.getLookupKey().equals(compositeOrSimpleKey)) {             LOG.debug("Found mapping for key {}", key).             return endpoints.get(key).         }     }     // look up for the simple key     for (EndpointMappingKey key : endpoints.keySet()) {         String simpleKey = null.         switch(key.getType()) {             case ACTION:                 if (map.getAction() != null) {                     simpleKey = map.getAction().toString().                 }                 break.             case TO:                 if (map.getTo() != null) {                     simpleKey = map.getTo().toString().                 }                 break.             default:                 throw new RuntimeCamelException("Invalid mapping type specified. Supported types are: spring-ws:action:<WS-Addressing Action>(optional:<WS-Addressing To>?<params...>\n)" + "spring-ws:to:<WS-Addressing To>(optional:<WS-Addressing Action>?<params...>)").         }         // look up for less specific endpoint         if (simpleKey != null && key.getLookupKey().equals(simpleKey)) {             LOG.debug("Found mapping for key {}", key).             return endpoints.get(key).         }     }     return null. }
true;protected;1;13;/**  * Generate a lookupKey for a given WS-Addressing message using action  * property. The possible combination are:  * <ul>  * <li>wsaAction</li>  * <li>wsaAction:wsaGetTo</li>  * </ul>  *  * @param map  * @return  */ ;/**  * Generate a lookupKey for a given WS-Addressing message using action  * property. The possible combination are:  * <ul>  * <li>wsaAction</li>  * <li>wsaAction:wsaGetTo</li>  * </ul>  *  * @param map  * @return  */ protected String getActionCompositeLookupKey(MessageAddressingProperties map) {     String key = "".     if (map.getAction() != null) {         key = map.getAction().toString().     }     if (map.getTo() != null) {         if (!key.isEmpty()) {             key += ":".         }         key += map.getTo().toString().     }     return key. }
true;protected;1;13;/**  * Generate a lookupKey for a given WS-Addressing message using getTo  * property. The possible combination are:  * <ul>  * <li>wsaGetTo</li>  * <li>wsaGetTo:wsaAction</li>  * </ul>  *  * @param map  * @return  */ ;/**  * Generate a lookupKey for a given WS-Addressing message using getTo  * property. The possible combination are:  * <ul>  * <li>wsaGetTo</li>  * <li>wsaGetTo:wsaAction</li>  * </ul>  *  * @param map  * @return  */ protected String getToCompositeLookupKey(MessageAddressingProperties map) {     String key = "".     if (map.getTo() != null) {         key = map.getTo().toString().     }     if (map.getAction() != null) {         if (!key.isEmpty()) {             key += ":".         }         key += map.getAction().toString().     }     return key. }
true;protected;2;10;/**  * Return output camel uri param or default action or null  */ ;/**  * Return output camel uri param or default action or null  */ @Override protected URI getResponseAction(Object endpoint, MessageAddressingProperties requestMap) {     SpringWebserviceEndpoint camelEndpoint = getSpringWebserviceEndpoint(endpoint).     URI actionUri = camelEndpoint.getConfiguration().getOutputAction().     if (actionUri == null) {         actionUri = getDefaultResponseAction(camelEndpoint, requestMap).     }     return actionUri. }
true;protected;1;10;/**  * Configure message sender for wsa:replyTo from a camel route definition.  * The route definition has priority over this endpoint.  */ ;/**  * Configure message sender for wsa:replyTo from a camel route definition.  * The route definition has priority over this endpoint.  */ @Override protected WebServiceMessageSender[] getMessageSenders(Object endpoint) {     SpringWebserviceEndpoint camelEndpoint = getSpringWebserviceEndpoint(endpoint).     if (camelEndpoint.getConfiguration().getMessageSender() != null) {         return new WebServiceMessageSender[] { camelEndpoint.getConfiguration().getMessageSender() }.     }     return super.getMessageSenders(endpoint). }
true;protected;1;10;/**  * Configure message id strategy for wsa:replyTo The route definition has  * priority over this endpoint.  */ ;/**  * Configure message id strategy for wsa:replyTo The route definition has  * priority over this endpoint.  */ @Override protected MessageIdStrategy getMessageIdStrategy(Object endpoint) {     SpringWebserviceEndpoint camelEndpoint = getSpringWebserviceEndpoint(endpoint).     if (camelEndpoint.getConfiguration().getMessageIdStrategy() != null) {         return camelEndpoint.getConfiguration().getMessageIdStrategy().     }     return super.getMessageIdStrategy(endpoint). }
true;protected;2;11;/**  * return fault came uri param or default fault action or null  */ ;/**  * return fault came uri param or default fault action or null  */ @Override protected URI getFaultAction(Object endpoint, MessageAddressingProperties requestMap) {     SpringWebserviceEndpoint camelEndpoint = getSpringWebserviceEndpoint(endpoint).     URI actionUri = camelEndpoint.getConfiguration().getFaultAction().     if (actionUri == null) {         actionUri = getDefaultFaultAction(camelEndpoint, requestMap).     }     return actionUri. }
false;private;1;6;;private SpringWebserviceEndpoint getSpringWebserviceEndpoint(Object endpoint) {     Assert.isInstanceOf(SpringWebserviceConsumer.class, endpoint, "Endpoint needs to be an instance of SpringWebserviceConsumer").     SpringWebserviceConsumer springWebserviceConsumer = (SpringWebserviceConsumer) endpoint.     return (SpringWebserviceEndpoint) springWebserviceConsumer.getEndpoint(). }
false;protected;2;8;;protected URI getDefaultResponseAction(Object endpoint, MessageAddressingProperties requestMap) {     URI requestAction = requestMap.getAction().     if (requestAction != null) {         return URI.create(requestAction.toString() + getOutputActionSuffix()).     } else {         return null.     } }
false;protected;2;8;;protected URI getDefaultFaultAction(Object endpoint, MessageAddressingProperties requestMap) {     URI requestAction = requestMap.getAction().     if (requestAction != null) {         return URI.create(requestAction.toString() + getFaultActionSuffix()).     } else {         return null.     } }
false;public;2;3;;public void addConsumer(EndpointMappingKey key, MessageEndpoint endpoint) {     endpoints.put(key, endpoint). }
false;public;1;3;;public void removeConsumer(Object key) {     endpoints.remove(key). }
true;public;0;3;/**  * Returns the suffix to add to request <code>Action</code>s for reply  * messages.  */ ;/**  * Returns the suffix to add to request <code>Action</code>s for reply  * messages.  */ public String getOutputActionSuffix() {     return outputActionSuffix. }
true;public;1;4;/**  * Sets the suffix to add to request <code>Action</code>s for reply  * messages.  *  * @see #DEFAULT_OUTPUT_ACTION_SUFFIX  */ ;/**  * Sets the suffix to add to request <code>Action</code>s for reply  * messages.  *  * @see #DEFAULT_OUTPUT_ACTION_SUFFIX  */ public void setOutputActionSuffix(String outputActionSuffix) {     Assert.hasText(outputActionSuffix, "'outputActionSuffix' must not be empty").     this.outputActionSuffix = outputActionSuffix. }
true;public;0;3;/**  * Returns the suffix to add to request <code>Action</code>s for reply fault  * messages.  */ ;/**  * Returns the suffix to add to request <code>Action</code>s for reply fault  * messages.  */ public String getFaultActionSuffix() {     return faultActionSuffix. }
true;public;1;4;/**  * Sets the suffix to add to request <code>Action</code>s for reply fault  * messages.  *  * @see #DEFAULT_FAULT_ACTION_SUFFIX  */ ;/**  * Sets the suffix to add to request <code>Action</code>s for reply fault  * messages.  *  * @see #DEFAULT_FAULT_ACTION_SUFFIX  */ public void setFaultActionSuffix(String faultActionSuffix) {     Assert.hasText(faultActionSuffix, "'faultActionSuffix' must not be empty").     this.faultActionSuffix = faultActionSuffix. }
