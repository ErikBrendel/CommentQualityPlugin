commented;modifiers;parameterAmount;loc;comment;code
true;public;1;22;/**  * Invoked by Spring-WS when a {@link WebServiceMessage} is received  */ ;/**  * Invoked by Spring-WS when a {@link WebServiceMessage} is received  */ public void invoke(MessageContext messageContext) throws Exception {     Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut).     populateExchangeFromMessageContext(messageContext, exchange).     // populate camel exchange with breadcrumb from transport header     populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange).     // start message processing     getProcessor().process(exchange).     if (exchange.getException() != null) {         throw exchange.getException().     } else if (exchange.getPattern().isOutCapable()) {         Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class).         if (responseMessage != null) {             Source responseBody = responseMessage.getBody(Source.class).             WebServiceMessage response = messageContext.getResponse().             configuration.getMessageFilter().filterConsumer(exchange, response).             toResult(responseBody, response.getPayloadResult()).         }     } }
false;private;2;8;;private void populateExchangeWithBreadcrumbFromMessageContext(MessageContext messageContext, Exchange exchange) {     if (messageContext.getRequest() instanceof SaajSoapMessage) {         SaajSoapMessage saajSoap = (SaajSoapMessage) messageContext.getRequest().         populateExchangeWithBreadcrumbFromSaajMessage(exchange, saajSoap).     } else {         populateExchangeWithBreadcrumbFromMessageContext(exchange, messageContext).     } }
false;private;2;19;;private void populateExchangeWithBreadcrumbFromSaajMessage(Exchange exchange, SaajSoapMessage saajSoap) {     SOAPMessage soapMessageRequest.     if (saajSoap != null) {         soapMessageRequest = saajSoap.getSaajMessage().         if (soapMessageRequest != null) {             MimeHeaders mimeHeaders = soapMessageRequest.getMimeHeaders().             if (mimeHeaders != null) {                 String[] breadcrumbIdHeaderValues = mimeHeaders.getHeader(Exchange.BREADCRUMB_ID).                 // may be required to implement                 if (breadcrumbIdHeaderValues != null && breadcrumbIdHeaderValues.length >= 1) {                     exchange.getIn().setHeader(Exchange.BREADCRUMB_ID, breadcrumbIdHeaderValues[0]).                 }             }         }     } }
false;private;2;7;;private void populateExchangeWithBreadcrumbFromMessageContext(Exchange exchange, MessageContext messageContext) {     if (messageContext != null) {         HttpServletRequest obj = (HttpServletRequest) messageContext.getProperty("transport.http.servletRequest").         String breadcrumbId = obj.getHeader(Exchange.BREADCRUMB_ID).         exchange.getIn().setHeader(Exchange.BREADCRUMB_ID, breadcrumbId).     } }
false;private;2;10;;private void populateExchangeFromMessageContext(MessageContext messageContext, Exchange exchange) {     populateExchangeWithPropertiesFromMessageContext(messageContext, exchange).     // create inbound message     WebServiceMessage request = messageContext.getRequest().     SpringWebserviceMessage inMessage = new SpringWebserviceMessage(exchange.getContext(), request).     extractSourceFromSoapHeader(inMessage.getHeaders(), request).     extractAttachmentsFromRequest(request, inMessage).     exchange.setIn(inMessage). }
false;private;2;11;;private void populateExchangeWithPropertiesFromMessageContext(MessageContext messageContext, Exchange exchange) {     // convert WebserviceMessage properties (added through interceptors) to     // Camel exchange properties     String[] propertyNames = messageContext.getPropertyNames().     if (propertyNames != null) {         for (String propertyName : propertyNames) {             exchange.setProperty(propertyName, messageContext.getProperty(propertyName)).         }     } }
true;private;2;27;/**  * Extracts the SOAP headers and set them as headers in the Exchange. Also sets  * it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER  * and a value of type Source.  *  * @param headers the Exchange Headers  * @param request the WebService Request  */ ;/**  * Extracts the SOAP headers and set them as headers in the Exchange. Also sets  * it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER  * and a value of type Source.  *  * @param headers the Exchange Headers  * @param request the WebService Request  */ private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {     if (request instanceof SoapMessage) {         SoapMessage soapMessage = (SoapMessage) request.         SoapHeader soapHeader = soapMessage.getSoapHeader().         if (soapHeader != null) {             // Set the raw soap header as a header in the exchange.             headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource()).             // Set header values for the soap header attributes             Iterator<QName> attIter = soapHeader.getAllAttributes().             while (attIter.hasNext()) {                 QName name = attIter.next().                 headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name)).             }             // Set header values for the soap header elements             Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements().             while (elementIter.hasNext()) {                 SoapHeaderElement element = elementIter.next().                 QName name = element.getName().                 headers.put(name.getLocalPart(), element).             }         }     } }
false;private;2;10;;private void extractAttachmentsFromRequest(final WebServiceMessage request, final SpringWebserviceMessage inMessage) {     if (request instanceof MimeMessage) {         Iterator<Attachment> attachmentsIterator = ((MimeMessage) request).getAttachments().         while (attachmentsIterator.hasNext()) {             Attachment attachment = attachmentsIterator.next().             inMessage.addAttachment(attachment.getContentId(), attachment.getDataHandler()).         }     } }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (configuration.getEndpointMapping() != null) {         configuration.getEndpointMapping().removeConsumer(configuration.getEndpointMappingKey()).     }     super.doStop(). }
false;protected;0;7;;@Override protected void doStart() throws Exception {     if (configuration.getEndpointMapping() != null) {         configuration.getEndpointMapping().addConsumer(configuration.getEndpointMappingKey(), this).     }     super.doStart(). }
