# id;timestamp;commentText;codeText;commentWords;codeWords
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1288854927;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = new DefaultExchange(endpoint.getCamelContext(), ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        _        if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()__                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,new,default,exchange,endpoint,get,camel,context,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1288936605;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = new DefaultExchange(endpoint.getCamelContext(), ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        _        if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()__                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,new,default,exchange,endpoint,get,camel,context,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1308349813;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = new DefaultExchange(endpoint.getCamelContext(), ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()__                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,new,default,exchange,endpoint,get,camel,context,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1351167431;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = new DefaultExchange(endpoint.getCamelContext(), ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()__                _                configuration.getMessageFilter().filterConsumer(exchange, response)__                _                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,new,default,exchange,endpoint,get,camel,context,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1367044606;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = new DefaultExchange(endpoint.getCamelContext(), ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,new,default,exchange,endpoint,get,camel,context,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1395076208;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = new DefaultExchange(endpoint.getCamelContext(), ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,new,default,exchange,endpoint,get,camel,context,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1445428152;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.getOut(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,get,out,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1488048565;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)__        Message responseMessage = null__        Source responseBody = null__        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            responseMessage = exchange.getOut(Message.class)__        } else {_            responseMessage = exchange.getIn(Message.class)__        }_        if (responseMessage != null) {_            responseBody = responseMessage.getBody(Source.class)__            WebServiceMessage response = messageContext.getResponse()___            configuration.getMessageFilter().filterConsumer(exchange, response)___            XmlConverter xmlConverter = configuration.getXmlConverter()__            xmlConverter.toResult(responseBody, response.getPayloadResult())__        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,message,response,message,null,source,response,body,null,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,response,message,exchange,get,out,message,class,else,response,message,exchange,get,in,message,class,if,response,message,null,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1488048565;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)__        Message responseMessage = null__        Source responseBody = null__        if (exchange.getException() != null) {_            throw exchange.getException()__        } else {_            responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__        }_        if (responseMessage != null) {_            responseBody = responseMessage.getBody(Source.class)__            WebServiceMessage response = messageContext.getResponse()___            configuration.getMessageFilter().filterConsumer(exchange, response)___            XmlConverter xmlConverter = configuration.getXmlConverter()__            xmlConverter.toResult(responseBody, response.getPayloadResult())__        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,message,response,message,null,source,response,body,null,if,exchange,get,exception,null,throw,exchange,get,exception,else,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1488048565;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1488048565;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)___        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1488790214;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1488790214;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1495703393;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1507815388;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1524063178;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1540108163;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()___                configuration.getMessageFilter().filterConsumer(exchange, response)___                XmlConverter xmlConverter = configuration.getXmlConverter()__                xmlConverter.toResult(responseBody, response.getPayloadResult())__            }_        }__    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,xml,converter,xml,converter,configuration,get,xml,converter,xml,converter,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> public void invoke(MessageContext messageContext) throws Exception;1548671910;Invoked by Spring-WS when a {@link WebServiceMessage} is received;public void invoke(MessageContext messageContext) throws Exception {_        Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOptionalOut)__        populateExchangeFromMessageContext(messageContext, exchange)__        _        _        populateExchangeWithBreadcrumbFromMessageContext(messageContext, exchange)__        _        _        getProcessor().process(exchange)___        if (exchange.getException() != null) {_            throw exchange.getException()__        } else if (exchange.getPattern().isOutCapable()) {_            Message responseMessage = exchange.hasOut() ? exchange.getOut(Message.class) : exchange.getIn(Message.class)__            if (responseMessage != null) {_                Source responseBody = responseMessage.getBody(Source.class)__                WebServiceMessage response = messageContext.getResponse()__                configuration.getMessageFilter().filterConsumer(exchange, response)__                toResult(responseBody, response.getPayloadResult())__            }_        }_    };invoked,by,spring,ws,when,a,link,web,service,message,is,received;public,void,invoke,message,context,message,context,throws,exception,exchange,exchange,get,endpoint,create,exchange,exchange,pattern,in,optional,out,populate,exchange,from,message,context,message,context,exchange,populate,exchange,with,breadcrumb,from,message,context,message,context,exchange,get,processor,process,exchange,if,exchange,get,exception,null,throw,exchange,get,exception,else,if,exchange,get,pattern,is,out,capable,message,response,message,exchange,has,out,exchange,get,out,message,class,exchange,get,in,message,class,if,response,message,null,source,response,body,response,message,get,body,source,class,web,service,message,response,message,context,get,response,configuration,get,message,filter,filter,consumer,exchange,response,to,result,response,body,response,get,payload,result
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1367044606;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers   the Exchange Headers_@param request   the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage) request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1395076208;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1445428152;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1488048565;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1488048565;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1488048565;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1488048565;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1488790214;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1488790214;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1495703393;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1507815388;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1524063178;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1540108163;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
SpringWebserviceConsumer -> private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request);1548671910;Extracts the SOAP headers and set them as headers in the Exchange. Also sets_it as a header with the key SpringWebserviceConstants.SPRING_WS_SOAP_HEADER_and a value of type Source.__@param headers the Exchange Headers_@param request the WebService Request;private void extractSourceFromSoapHeader(Map<String, Object> headers, WebServiceMessage request) {_        if (request instanceof SoapMessage) {_            SoapMessage soapMessage = (SoapMessage)request__            SoapHeader soapHeader = soapMessage.getSoapHeader()___            if (soapHeader != null) {_                _                headers.put(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER, soapHeader.getSource())___                _                Iterator<QName> attIter = soapHeader.getAllAttributes()__                while (attIter.hasNext()) {_                    QName name = attIter.next()__                    headers.put(name.getLocalPart(), soapHeader.getAttributeValue(name))__                }__                _                Iterator<SoapHeaderElement> elementIter = soapHeader.examineAllHeaderElements()__                while (elementIter.hasNext()) {_                    SoapHeaderElement element = elementIter.next()__                    QName name = element.getName()__                    headers.put(name.getLocalPart(), element)___                }_            }_        }_    };extracts,the,soap,headers,and,set,them,as,headers,in,the,exchange,also,sets,it,as,a,header,with,the,key,spring,webservice,constants,and,a,value,of,type,source,param,headers,the,exchange,headers,param,request,the,web,service,request;private,void,extract,source,from,soap,header,map,string,object,headers,web,service,message,request,if,request,instanceof,soap,message,soap,message,soap,message,soap,message,request,soap,header,soap,header,soap,message,get,soap,header,if,soap,header,null,headers,put,spring,webservice,constants,soap,header,get,source,iterator,qname,att,iter,soap,header,get,all,attributes,while,att,iter,has,next,qname,name,att,iter,next,headers,put,name,get,local,part,soap,header,get,attribute,value,name,iterator,soap,header,element,element,iter,soap,header,examine,all,header,elements,while,element,iter,has,next,soap,header,element,element,element,iter,next,qname,name,element,get,name,headers,put,name,get,local,part,element
