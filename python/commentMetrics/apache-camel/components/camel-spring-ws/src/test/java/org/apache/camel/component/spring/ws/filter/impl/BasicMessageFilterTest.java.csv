commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void before() {     filter = new BasicMessageFilter().     SaajSoapMessageFactory saajSoapMessageFactory = new SaajSoapMessageFactory().     saajSoapMessageFactory.afterPropertiesSet().     message = saajSoapMessageFactory.createWebServiceMessage(). }
false;public;0;5;;@Test public void testNulls() throws Exception {     filter.filterConsumer(null, null).     filter.filterProducer(null, null). }
false;public;0;5;;@Test public void testNullsWithExchange() throws Exception {     filter.filterConsumer(exchange, null).     filter.filterProducer(exchange, null). }
false;public;0;7;;@Test public void nonSoapMessageShouldBeSkipped() throws Exception {     DomPoxMessage domPoxMessage = new DomPoxMessageFactory().createWebServiceMessage().     filter.filterConsumer(exchange, domPoxMessage).     filter.filterProducer(exchange, domPoxMessage). }
false;public;0;16;;@Test public void withoutHeader() throws Exception {     exchange.getIn().getHeaders().clear().     exchange.getOut().getHeaders().clear().     exchange.getIn().getAttachments().clear().     exchange.getOut().getAttachments().clear().     filter.filterProducer(exchange, message).     filter.filterConsumer(exchange, message).     Assertions.assertThat(message.getAttachments()).isEmpty().     Assertions.assertThat(message.getSoapHeader().examineAllHeaderElements()).isEmpty().     Assertions.assertThat(message.getSoapHeader().getAllAttributes()).isEmpty(). }
false;public;0;19;;@Test public void removeCamelInternalHeaderAttributes() throws Exception {     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_SOAP_ACTION, "mustBeRemoved").     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_ADDRESSING_ACTION, "mustBeRemoved").     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_ADDRESSING_PRODUCER_FAULT_TO, "mustBeRemoved").     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_ADDRESSING_PRODUCER_REPLY_TO, "mustBeRemoved").     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_ADDRESSING_CONSUMER_FAULT_ACTION, "mustBeRemoved").     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_ADDRESSING_CONSUMER_OUTPUT_ACTION, "mustBeRemoved").     exchange.getOut().getHeaders().put(SpringWebserviceConstants.SPRING_WS_ENDPOINT_URI, "mustBeRemoved").     exchange.getOut().getHeaders().put("breadcrumbId", "mustBeRemoved").     filter.filterConsumer(exchange, message).     Assertions.assertThat(message.getAttachments()).isEmpty().     Assertions.assertThat(message.getSoapHeader().examineAllHeaderElements()).isEmpty().     Assertions.assertThat(message.getSoapHeader().getAllAttributes()).isEmpty(). }
false;public;0;13;;@Test public void consumerWithHeader() throws Exception {     exchange.getOut().getHeaders().put("headerAttributeKey", "testAttributeValue").     exchange.getOut().getHeaders().put("headerAttributeElement", new QName("http://shouldBeInHeader", "<myElement />")).     filter.filterConsumer(exchange, message).     Assertions.assertThat(message.getAttachments()).isEmpty().     Assertions.assertThat(message.getSoapHeader().examineAllHeaderElements()).isNotEmpty().hasSize(1).     Assertions.assertThat(message.getSoapHeader().getAllAttributes()).isNotEmpty().hasSize(1). }
false;public;0;15;;@Test public void producerWithHeader() throws Exception {     // foo is already in the header.in from the parent ExchangeTestSupport     exchange.getIn().getHeaders().put("headerAttributeKey", "testAttributeValue").     exchange.getIn().getHeaders().put("headerAttributeElement", new QName("http://shouldBeInHeader", "<myElement />")).     filter.filterProducer(exchange, message).     Assertions.assertThat(message.getAttachments()).isEmpty().     Assertions.assertThat(message.getSoapHeader().examineAllHeaderElements()).isNotEmpty().hasSize(1).     Assertions.assertThat(message.getSoapHeader().getAllAttributes()).isNotEmpty().hasSize(2). }
false;public;0;7;;@Test public void withoutAttachment() throws Exception {     filter.filterConsumer(exchange, message).     filter.filterProducer(exchange, message).     Assertions.assertThat(message.getAttachments()).isEmpty(). }
false;public;0;9;;@Test public void producerWithAttachment() throws Exception {     exchange.getIn().addAttachment("testAttachment", new DataHandler(this.getClass().getResource("/sampleAttachment.txt"))).     filter.filterProducer(exchange, message).     Assertions.assertThat(message.getAttachments()).isNotNull().isNotEmpty().     Assertions.assertThat(message.getAttachment("testAttachment")).isNotNull(). }
false;public;0;9;;@Test public void consumerWithAttachment() throws Exception {     exchange.getOut().addAttachment("testAttachment", new DataHandler(this.getClass().getResource("/sampleAttachment.txt"))).     filter.filterConsumer(exchange, message).     Assertions.assertThat(message.getAttachments()).isNotNull().isNotEmpty().     Assertions.assertThat(message.getAttachment("testAttachment")).isNotNull(). }
