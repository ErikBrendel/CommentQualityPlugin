commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     super.setUp().     // initialize beans for catching results     customChannel = getMandatoryBean(OutputChannelReceiver.class, "customReceiver").     customChannel.clear(). }
false;private;0;11;;/**  * Only response is allow using a brand custom channel  *  * @return  */ private MessageAddressingProperties customChannelParams() {     assertNotNull(customChannel).     assertNotNull(customChannel.getMessageContext()).     SoapMessage request = (SoapMessage) customChannel.getMessageContext().getRequest().     assertNotNull(request).     MessageAddressingProperties wsaProperties = TestUtil.getWSAProperties(request).     assertNotNull(wsaProperties).     assertNotNull(wsaProperties.getTo()).     return wsaProperties. }
false;public;1;5;;@Override public ActionCallback channelIn(String actionUri) throws URISyntaxException {     // new channel     return toAndReplyTo(actionUri, "mailto:andrej@chocolatejar.eu"). }
false;public;0;4;;@Override public MessageAddressingProperties channelOut() {     return newChannelParams(). }
false;public;0;9;;@Test public void endpointSender() throws Exception {     ActionCallback requestCallback = channelIn("http://sender-default.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getTo()).isEqualTo(new URI("mailto:andrej@chocolatejar.eu")).     Assertions.assertThat(endpointCamelDirect.getReceivedCounter()).isZero(). }
false;public;0;9;;@Test public void customSender() throws Exception {     ActionCallback requestCallback = channelIn("http://sender-custom.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(customChannelParams().getTo()).isEqualTo(new URI("mailto:andrej@chocolatejar.eu")).     Assertions.assertThat(endpointCamelDirect.getReceivedCounter()).isZero(). }
false;public;0;7;;@Test public void camelInvalid() throws Exception {     ActionCallback requestCallback = toAndReplyTo("http://sender-camel.com", "mailto:not-mappped-address@chocolatejar.eu").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(endpointCamelDirect.getReceivedCounter()).isZero(). }
false;public;0;8;;@Test public void camelReceivedReplyTo() throws Exception {     ActionCallback requestCallback = channelIn("http://sender-camel.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     endpointCamelDirect.assertExchangeReceived(0).     endpointCamelDirect.assertIsSatisfied(). }
false;public;0;8;;@Test public void customMessageIdGenerator() throws Exception {     ActionCallback requestCallback = channelIn("http://messageIdStrategy-custom.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getMessageId()).isEqualTo(new URI("staticTestId")). }
false;public;0;8;;@Test public void defaultMessageIdGenerator() throws Exception {     ActionCallback requestCallback = channelIn("http://messageIdStrategy-default.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getMessageId()).isNotEqualTo(new URI("staticTestId")). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext(new String[] { "org/apache/camel/component/spring/ws/addresing/CamelDirectSenderTest-context.xml" }). }
