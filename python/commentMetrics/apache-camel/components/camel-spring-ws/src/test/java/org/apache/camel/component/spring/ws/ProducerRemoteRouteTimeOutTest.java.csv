commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void callStockQuoteWebserviceCosmmonsHttpWith3MillSecondsTimeout() throws Exception {     try {         template.requestBody("direct:stockQuoteWebserviceCommonsHttpWith3MillSecondsTimeout", xmlRequestForGoogleStockQuote).         fail("Miss the expected exception in chain").     } catch (CamelExecutionException cee) {         assertTrue(hasThrowableInChain(cee, SocketTimeoutException.class)).     } }
false;public;0;9;;@Test public void callStockQuoteWebserviceCommonsHttpWith5000MillSecondsTimeout() throws Exception {     Object result = template.requestBody("direct:stockQuoteWebserviceCommonsHttpWith5000MillSecondsTimeout", xmlRequestForGoogleStockQuote).     assertNotNull(result).     assertTrue(result instanceof String).     String resultMessage = (String) result.     assertTrue(resultMessage.contains("Google Inc.")). }
false;public;0;9;;@Test public void callStockQuoteWebserviceJDKWith3MillSecondsTimeout() throws Exception {     try {         template.requestBody("direct:stockQuoteWebserviceJDKWith3MillSecondsTimeout", xmlRequestForGoogleStockQuote).         fail("Miss the expected exception in chain").     } catch (CamelExecutionException cee) {         assertTrue(hasThrowableInChain(cee, SocketTimeoutException.class)).     } }
false;public;0;9;;@Test public void callStockQuoteWebserviceJDKWith5000MillSecondsTimeout() throws Exception {     Object result = template.requestBody("direct:stockQuoteWebserviceJDKWith5000MillSecondsTimeout", xmlRequestForGoogleStockQuote).     assertNotNull(result).     assertTrue(result instanceof String).     String resultMessage = (String) result.     assertTrue(resultMessage.contains("Google Inc.")). }
false;private,static;2;9;;private static boolean hasThrowableInChain(Throwable throwable, Class<? extends Throwable> clazz) {     if (throwable == null) {         return false.     } else if (clazz.isAssignableFrom(throwable.getClass())) {         return true.     }     return hasThrowableInChain(throwable.getCause(), clazz). }
