commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void setUp() throws Exception {     super.setUp().     // initialize beans for catching results     webServiceTemplate = applicationContext.getBean("webServiceTemplate", WebServiceTemplate.class).     newReply = getMandatoryBean(OutputChannelReceiver.class, "replyReceiver").     response = getMandatoryBean(OutputChannelReceiver.class, "responseReceiver").     // sample data     source = new StreamSource(new StringReader(xmlBody)).     result = new StreamResult(new StringWriter()).     // reset from previous test     response.clear().     newReply.clear().     requestInputAction = null. }
false;public;0;4;;@After public void after() throws Exception {     assertNotNull(result). }
true;protected,final;2;8;/**  * Creates WS-Addressing Action and ReplyTo param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ ;/**  * Creates WS-Addressing Action and ReplyTo param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ protected final ActionCallback actionAndReplyTo(String action, String replyTo) throws URISyntaxException {     requestInputAction = action.     ActionCallback requestCallback = new ActionCallback(action).     if (replyTo != null) {         requestCallback.setReplyTo(new EndpointReference(new URI(replyTo))).     }     return requestCallback. }
true;protected,final;1;3;/**  * Creates WS-Addressing Action param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ ;/**  * Creates WS-Addressing Action param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ protected final ActionCallback action(String action) throws URISyntaxException {     return actionAndReplyTo(action, null). }
true;protected,final;2;8;/**  * Creates WS-Addressing To and ReplyTo param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ ;/**  * Creates WS-Addressing To and ReplyTo param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ protected final ActionCallback toAndReplyTo(String to, String replyTo) throws URISyntaxException {     requestInputAction = "http://doesn-not-matter.com".     ActionCallback requestCallback = new ActionCallback(new URI(requestInputAction), new Addressing10(), new URI(to)).     if (replyTo != null) {         requestCallback.setReplyTo(new EndpointReference(new URI(replyTo))).     }     return requestCallback. }
true;protected,final;1;3;/**  * Creates WS-Addressing To param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ ;/**  * Creates WS-Addressing To param for request  *  * @param action  * @param replyTo  * @return  * @throws URISyntaxException  */ protected final ActionCallback to(String to) throws URISyntaxException {     return toAndReplyTo(to, null). }
true;protected;0;3;/**  * Construct a default action for the response message from the input  * message using the default response action suffix.  *  * @return  * @throws URISyntaxException  */ ;/**  * Construct a default action for the response message from the input  * message using the default response action suffix.  *  * @return  * @throws URISyntaxException  */ protected URI getDefaultResponseAction() throws URISyntaxException {     return new URI(requestInputAction + "Response"). }
false;protected,final;0;11;;/**  * Only response is allow using a brand new channel  *  * @return  */ protected final MessageAddressingProperties newChannelParams() {     assertNotNull(newReply).     assertNotNull(newReply.getMessageContext()).     SoapMessage request = (SoapMessage) newReply.getMessageContext().getRequest().     assertNotNull(request).     MessageAddressingProperties wsaProperties = TestUtil.getWSAProperties(request).     assertNotNull(wsaProperties).     assertNotNull(wsaProperties.getTo()).     return wsaProperties. }
true;protected,final;0;14;/**  * Only response is allow using same channel  *  * @return  */ ;/**  * Only response is allow using same channel  *  * @return  */ protected final MessageAddressingProperties sameChannelParams() {     // we expect the same channel reply     assertNull(newReply.getMessageContext()).     assertNotNull(response).     assertNotNull(response.getMessageContext()).     SoapMessage soapResponse = (SoapMessage) response.getMessageContext().getResponse().     assertNotNull(soapResponse).     MessageAddressingProperties wsaProperties = TestUtil.getWSAProperties(soapResponse).     assertNotNull(wsaProperties).     return wsaProperties. }
true;abstract;1;1;/**  * Provides such an ActionCallback that sets the WS-Addressing param replyTo  * or doesn't set WS-Addressing param replyTo. In other words it cause  * response to be return using new or same channel as the request.  *  * @param action  * @return  * @throws URISyntaxException  */ ;/**  * Provides such an ActionCallback that sets the WS-Addressing param replyTo  * or doesn't set WS-Addressing param replyTo. In other words it cause  * response to be return using new or same channel as the request.  *  * @param action  * @return  * @throws URISyntaxException  */ abstract ActionCallback channelIn(String action) throws URISyntaxException.
true;abstract;0;1;/**  * Provide corresponding results based on channel input. These two abstract  * methods (channelIn and channelOut)are bind together tighly.  *  * @return  */ ;/**  * Provide corresponding results based on channel input. These two abstract  * methods (channelIn and channelOut)are bind together tighly.  *  * @return  */ abstract MessageAddressingProperties channelOut().
