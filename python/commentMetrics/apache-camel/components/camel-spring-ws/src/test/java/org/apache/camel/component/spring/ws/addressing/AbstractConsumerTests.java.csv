commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void defaultAction4ouput() throws Exception {     ActionCallback requestCallback = channelIn("http://default-ok.com/").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction()). }
false;public;0;10;;@Test public void defaultAction4fault() throws Exception {     ActionCallback requestCallback = channelIn("http://default-fault.com/").     try {         webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     } catch (SoapFaultClientException e) {     // ok - cause fault response     }     Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction()). }
false;public;0;8;;@Test public void customAction4output() throws Exception {     ActionCallback requestCallback = channelIn("http://uri-ok.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIOutputAction")). }
false;public;0;10;;@Test public void customAction4fault() throws Exception {     ActionCallback requestCallback = channelIn("http://uri-fault.com").     try {         webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     } catch (SoapFaultClientException e) {     // ok - cause fault response     }     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIFaultAction")). }
false;public;0;9;;@Test @Ignore(value = "Not implemented yet") public void overrideHeaderAction4output() throws Exception {     ActionCallback requestCallback = channelIn("http://override-ok.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://outputHeader.com")). }
false;public;0;11;;@Test @Ignore(value = "Not implemented yet") public void overrideHeaderAction4fault() throws Exception {     ActionCallback requestCallback = channelIn("http://override-fault.com").     try {         webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     } catch (SoapFaultClientException e) {     // ok - cause fault response     }     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://faultHeader.com")). }
false;public;0;9;;@Test @Ignore(value = "Not implemented yet") public void headerAction4output() throws Exception {     ActionCallback requestCallback = channelIn("http://headerOnly-ok.com").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://outputHeader.com")). }
false;public;0;11;;@Test @Ignore(value = "Not implemented yet") public void headerAction4fault() throws Exception {     ActionCallback requestCallback = channelIn("http://headerOnly-fault.com").     try {         webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     } catch (SoapFaultClientException e) {     // ok - cause fault response     }     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://faultHeader.com")). }
false;public;0;8;;@Test public void onlyCustomOutputSpecified4output() throws Exception {     ActionCallback requestCallback = channelIn("http://uriOutputOnly-ok.com/").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIOutputAction")). }
false;public;0;10;;@Test public void onlyCustomOutputSpecified4fault() throws Exception {     ActionCallback requestCallback = channelIn("http://uriOutputOnly-fault.com/").     try {         webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     } catch (SoapFaultClientException e) {     // ok - cause fault response     }     Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction()). }
false;public;0;8;;@Test public void onlyCustomFaultSpecified4output() throws Exception {     ActionCallback requestCallback = channelIn("http://uriFaultOnly-ok.com/").     webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     Assertions.assertThat(channelOut().getAction()).isEqualTo(getDefaultResponseAction()). }
false;public;0;10;;@Test public void onlyCustomFaultSpecified4fault() throws Exception {     ActionCallback requestCallback = channelIn("http://uriFaultOnly-fault.com/").     try {         webServiceTemplate.sendSourceAndReceiveToResult(source, requestCallback, result).     } catch (SoapFaultClientException e) {     // ok - cause fault response     }     Assertions.assertThat(channelOut().getAction()).isEqualTo(new URI("http://customURIFaultAction")). }
