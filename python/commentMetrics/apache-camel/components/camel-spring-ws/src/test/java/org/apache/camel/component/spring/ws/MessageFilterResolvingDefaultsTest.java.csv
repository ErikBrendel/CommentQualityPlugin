commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void isUsedDefaultFilter() {     expect(soapHeader(new QName("http://newHeaderSupport/", "testHeaderValue1"))).andExpect(doesntContains(soapHeader(new QName("http://virtualCheck/", "localFilter")))).andExpect(doesntContains(soapHeader(new QName("http://virtualCheck/", "globalFilter")))).     template.sendBodyAndHeader("direct:sendDefault", body, "headerKey", new QName("http://newHeaderSupport/", "testHeaderValue1")). }
false;public;2;10;;public void match(URI uri, WebServiceMessage request) throws IOException, AssertionError {     try {         soapHeader.match(uri, request).     } catch (AssertionError e) {         // ok         return.     }     throw new AssertionError("Should failed!"). }
false;private;1;14;;private RequestMatcher doesntContains(final RequestMatcher soapHeader) {     return new RequestMatcher() {          public void match(URI uri, WebServiceMessage request) throws IOException, AssertionError {             try {                 soapHeader.match(uri, request).             } catch (AssertionError e) {                 // ok                 return.             }             throw new AssertionError("Should failed!").         }     }. }
false;public;1;4;;@Autowired public void setApplicationContext(ApplicationContext applicationContext) {     createServer(applicationContext). }
false;public;0;4;;@After public void verify() {     super.verify(). }
