commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     super.setUp().     webServiceTemplate = applicationContext.getBean("webServiceTemplate", WebServiceTemplate.class). }
false;public;0;8;;@Test public void testWSAddressingAction() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback("http://www.stockquotes.edu/myUniqueAction"), TestUtil.NOOP_SOURCE_EXTRACTOR).     // here is localhost as to by default     resultEndpointAction.expectedMinimumMessageCount(1).     resultEndpointAction.assertIsSatisfied(). }
false;public;0;9;;@Test public void testWSAddressingTo() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback(new URI("http://www.stockquotes.edu/does-not-matter"), new Addressing10(), new URI("http://myUniqueToUrl")), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultEndpointTo.expectedMinimumMessageCount(1).     resultEndpointTo.assertIsSatisfied(). }
false;public;0;8;;@Test public void testWSAddressingActionAndTo() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback(new URI("http://actionAndTo"), new Addressing10(), new URI("http://url4.to")), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultEndpointActionAndTo.expectedMinimumMessageCount(1).     resultEndpointActionAndTo.assertIsSatisfied(). }
false;public;0;9;;@Test public void testWSAddressingToAndAction() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback(new URI("http://toAndAction"), new Addressing10(), new URI("http://url3.to")), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultEndpointToAndAction.expectedMinimumMessageCount(1).     resultEndpointToAndAction.assertIsSatisfied(). }
false;public;0;12;;@Test public void testWSAddressingResolveToMoreSpecif() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback(new URI("http://action1"), new Addressing10(), new URI("http://url1.to")), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultEndpointToMoreSpecific.expectedMinimumMessageCount(1).     resultEndpointToMoreSpecific.assertIsSatisfied().     resultEndpointActionMoreSpecific.expectedMinimumMessageCount(0).     resultEndpointActionMoreSpecific.assertIsSatisfied(). }
false;public;0;12;;@Test public void testWSAddressingResolveActionMoreSpecif() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback(new URI("http://action2"), new Addressing10(), new URI("http://url2.to")), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultEndpointToMoreSpecific.expectedMinimumMessageCount(0).     resultEndpointToMoreSpecific.assertIsSatisfied().     resultEndpointActionMoreSpecific.expectedMinimumMessageCount(1).     resultEndpointActionMoreSpecific.assertIsSatisfied(). }
false;public;0;7;;@Test public void testWSAddressingActionResponseActions() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback("http://www.stockquotes.edu/WSAddresingActionReply"), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultOutputAndFault.expectedMinimumMessageCount(1).     resultOutputAndFault.assertIsSatisfied(). }
false;public;0;8;;@Test public void testWSAddressingToResponseActions() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback(new URI("http://doesn-not-matter.com"), new Addressing10(), new URI("http://urlOutputAndFault2.to")), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultOutputAndFault2.expectedMinimumMessageCount(1).     resultOutputAndFault2.assertIsSatisfied(). }
false;public;0;6;;@Test(expected = WebServiceIOException.class) public void testWrongWSAddressingAction() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new ActionCallback("http://this-is-a-wrong-ws-addressing-action"), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultEndpointAction.assertIsSatisfied(). }
false;public;0;8;;@Test public void testClassicalSoapHttpHeaderInterference() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlBody)).     webServiceTemplate.sendSourceAndReceive(source, new SoapActionCallback("http://www.stockquotes.edu/soapHttpHeaderAction"), TestUtil.NOOP_SOURCE_EXTRACTOR).     resultSoapAction.expectedMinimumMessageCount(1).     resultSoapAction.assertIsSatisfied(). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext(new String[] { "org/apache/camel/component/spring/ws/addresing/ConsumerWSAEndpointMappingRouteTest-context.xml" }). }
