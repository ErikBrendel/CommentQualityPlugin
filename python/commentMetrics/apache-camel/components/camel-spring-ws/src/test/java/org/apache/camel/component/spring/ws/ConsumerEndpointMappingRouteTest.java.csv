commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Object extractData(Source source) throws IOException, TransformerException {     return null. }
false;public;0;5;;@Before public void setUp() throws Exception {     super.setUp().     webServiceTemplate = applicationContext.getBean("webServiceTemplate", WebServiceTemplate.class). }
false;public;0;7;;@Test public void testRootQName() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlRequestForGoogleStockQuote)).     webServiceTemplate.sendSourceAndReceive(source, NOOP_SOURCE_EXTRACTOR).     resultEndpointRootQName.expectedMinimumMessageCount(1).     resultEndpointRootQName.assertIsSatisfied(). }
false;public;0;6;;@Test public void testSoapAction() throws Exception {     webServiceTemplate.sendSourceAndReceive(getDefaultXmlRequestSource(), new SoapActionCallback("http://www.stockquotes.edu/GetQuote"), NOOP_SOURCE_EXTRACTOR).     resultEndpointSoapAction.expectedMinimumMessageCount(1).     resultEndpointSoapAction.assertIsSatisfied(). }
false;public;0;5;;@Test(expected = WebServiceIOException.class) public void testWrongSoapAction() throws Exception {     webServiceTemplate.sendSourceAndReceive(getDefaultXmlRequestSource(), new SoapActionCallback("http://this-is-a-wrong-soap-action"), NOOP_SOURCE_EXTRACTOR).     resultEndpointSoapAction.assertIsNotSatisfied(). }
false;public;0;7;;@Test public void testXPath() throws Exception {     StreamSource source = new StreamSource(new StringReader(xmlRequestForGoogleStockQuoteNoNamespaceDifferentBody)).     webServiceTemplate.sendSourceAndReceive(source, NOOP_SOURCE_EXTRACTOR).     resultEndpointXPath.expectedMinimumMessageCount(1).     resultEndpointXPath.assertIsSatisfied(). }
false;public;0;6;;@Test public void testUri() throws Exception {     webServiceTemplate.sendSourceAndReceive("http://localhost/stockquote2", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     resultEndpointUri.expectedMinimumMessageCount(1).     resultEndpointUri.assertIsSatisfied(). }
false;public;0;7;;@Test public void testUriPath() throws Exception {     webServiceTemplate.sendSourceAndReceive("http://localhost/stockquote3/service", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     webServiceTemplate.sendSourceAndReceive("http://localhost:8080/stockquote3/service", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     resultEndpointUriPath.expectedMessageCount(2).     resultEndpointUriPath.assertIsSatisfied(). }
false;public;0;11;;@Test public void testUriPathWildcard() throws Exception {     webServiceTemplate.sendSourceAndReceive("http://localhost/stockquote4/service", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     webServiceTemplate.sendSourceAndReceive("http://localhost:8080/stockquote4/service", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     webServiceTemplate.sendSourceAndReceive("http://localhost/stockquote4/service/", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     webServiceTemplate.sendSourceAndReceive("http://localhost:8080/stockquote4/service/", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     webServiceTemplate.sendSourceAndReceive("http://localhost/stockquote4/service/test", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     webServiceTemplate.sendSourceAndReceive("http://0.0.0.0:11234/stockquote4/service/test", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     resultEndpointUriPath.expectedMessageCount(6).     resultEndpointUriPath.assertIsSatisfied(). }
false;public;0;5;;@Test(expected = WebServiceIOException.class) public void testWrongUri() throws Exception {     webServiceTemplate.sendSourceAndReceive("http://localhost/wrong", getDefaultXmlRequestSource(), NOOP_SOURCE_EXTRACTOR).     resultEndpointUri.assertIsNotSatisfied(). }
false;protected;0;5;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext(new String[] { "org/apache/camel/component/spring/ws/ConsumerEndpointMappingRouteTest-context.xml" }). }
false;private;0;3;;private Source getDefaultXmlRequestSource() {     return new StreamSource(new StringReader(xmlRequestForGoogleStockQuoteNoNamespace)). }
