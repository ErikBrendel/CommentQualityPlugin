commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Object extractData(Source source) throws IOException, TransformerException {     return null. }
true;public,static;2;4;/**  * Compare the to string ignoring new lines symbol. Handy if you need to  * compare some text coming from 2 different OS.  */ ;/**  * Compare the to string ignoring new lines symbol. Handy if you need to  * compare some text coming from 2 different OS.  */ public static void assertEqualsIgnoreNewLinesSymbol(String expected, String actual) {     Assert.assertEquals(StringUtils.deleteAny(expected, "\n\r"), StringUtils.deleteAny(actual, "\n\r")). }
true;public,static;1;11;/**  * Retrieve a WS-Addressing properties from the soapMessage  *  * @param messageContext  * @return  */ ;/**  * Retrieve a WS-Addressing properties from the soapMessage  *  * @param messageContext  * @return  */ public static MessageAddressingProperties getWSAProperties(SoapMessage soapMessage) {     AddressingVersion[] versions = new AddressingVersion[] { new Addressing200408(), new Addressing10() }.     for (AddressingVersion version : versions) {         if (supports(version, soapMessage)) {             MessageAddressingProperties requestMap = version.getMessageAddressingProperties(soapMessage).             return requestMap.         }     }     return null. }
false;private,static;2;12;;private static boolean supports(AddressingVersion version, SoapMessage request) {     SoapHeader header = request.getSoapHeader().     if (header != null) {         for (Iterator<SoapHeaderElement> iterator = header.examineAllHeaderElements(). iterator.hasNext(). ) {             SoapHeaderElement headerElement = iterator.next().             if (version.understands(headerElement)) {                 return true.             }         }     }     return false. }
