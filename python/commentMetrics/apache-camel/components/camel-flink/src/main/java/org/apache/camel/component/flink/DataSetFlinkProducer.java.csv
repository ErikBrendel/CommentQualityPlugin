commented;modifiers;parameterAmount;loc;comment;code
false;public;1;24;;@Override public void process(Exchange exchange) throws Exception {     DataSet ds = resolveDataSet(exchange).     DataSetCallback dataSetCallback = resolveDataSetCallback(exchange).     Object body = exchange.getIn().getBody().     Object result.     ClassLoader tccl = Thread.currentThread().getContextClassLoader().     try {         Thread.currentThread().setContextClassLoader(DataSet.class.getClassLoader()).         if (body instanceof List) {             List list = (List) body.             Object[] array = list.toArray(new Object[list.size()]).             result = dataSetCallback.onDataSet(ds, array).         } else {             result = dataSetCallback.onDataSet(ds, body).         }     } finally {         Thread.currentThread().setContextClassLoader(tccl).     }     collectResults(exchange, result). }
false;public;0;4;;@Override public FlinkEndpoint getEndpoint() {     return (FlinkEndpoint) super.getEndpoint(). }
false;protected;2;13;;protected void collectResults(Exchange exchange, Object result) throws Exception {     if (result instanceof DataSet) {         DataSet dsResults = (DataSet) result.         if (getEndpoint().isCollect()) {             exchange.getIn().setBody(dsResults.collect()).         } else {             exchange.getIn().setBody(result).             exchange.getIn().setHeader(FlinkConstants.FLINK_DATASET_HEADER, result).         }     } else {         exchange.getIn().setBody(result).     } }
false;protected;1;9;;protected DataSet resolveDataSet(Exchange exchange) {     if (exchange.getIn().getHeader(FlinkConstants.FLINK_DATASET_HEADER) != null) {         return (DataSet) exchange.getIn().getHeader(FlinkConstants.FLINK_DATASET_HEADER).     } else if (getEndpoint().getDataSet() != null) {         return getEndpoint().getDataSet().     } else {         throw new IllegalStateException("No DataSet defined").     } }
false;protected;1;9;;protected DataSetCallback resolveDataSetCallback(Exchange exchange) {     if (exchange.getIn().getHeader(FlinkConstants.FLINK_DATASET_CALLBACK_HEADER) != null) {         return (DataSetCallback) exchange.getIn().getHeader(FlinkConstants.FLINK_DATASET_CALLBACK_HEADER).     } else if (getEndpoint().getDataSetCallback() != null) {         return getEndpoint().getDataSetCallback().     } else {         throw new IllegalStateException("Cannot resolve DataSet callback.").     } }
