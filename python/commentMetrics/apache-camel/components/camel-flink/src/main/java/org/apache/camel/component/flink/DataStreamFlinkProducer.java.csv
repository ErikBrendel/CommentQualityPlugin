commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     DataStream ds = resolveDataStream(exchange).     DataStreamCallback dataStreamCallback = resolveDataStreamCallback(exchange).     Object body = exchange.getIn().getBody().     Object result = body instanceof List ? dataStreamCallback.onDataStream(ds, ((List) body).toArray(new Object[0])) : dataStreamCallback.onDataStream(ds, body).     collectResults(exchange, result). }
false;public;0;4;;@Override public FlinkEndpoint getEndpoint() {     return (FlinkEndpoint) super.getEndpoint(). }
false;protected;2;12;;protected void collectResults(Exchange exchange, Object result) {     if (result instanceof DataStream) {         if (getEndpoint().isCollect()) {             throw new IllegalArgumentException("collect mode not supported for Flink DataStreams.").         } else {             exchange.getIn().setBody(result).             exchange.getIn().setHeader(FlinkConstants.FLINK_DATASTREAM_HEADER, result).         }     } else {         exchange.getIn().setBody(result).     } }
false;protected;1;9;;protected DataStream resolveDataStream(Exchange exchange) {     if (exchange.getIn().getHeader(FlinkConstants.FLINK_DATASTREAM_HEADER) != null) {         return (DataStream) exchange.getIn().getHeader(FlinkConstants.FLINK_DATASTREAM_HEADER).     } else if (getEndpoint().getDataStream() != null) {         return getEndpoint().getDataStream().     } else {         throw new IllegalArgumentException("No DataStream defined").     } }
false;protected;1;9;;protected DataStreamCallback resolveDataStreamCallback(Exchange exchange) {     if (exchange.getIn().getHeader(FlinkConstants.FLINK_DATASTREAM_CALLBACK_HEADER) != null) {         return (DataStreamCallback) exchange.getIn().getHeader(FlinkConstants.FLINK_DATASTREAM_CALLBACK_HEADER).     } else if (getEndpoint().getDataStreamCallback() != null) {         return getEndpoint().getDataStreamCallback().     } else {         throw new IllegalArgumentException("Cannot resolve DataStream callback.").     } }
