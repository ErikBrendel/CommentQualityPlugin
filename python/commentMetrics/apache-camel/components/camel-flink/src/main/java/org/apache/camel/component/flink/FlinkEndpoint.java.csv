commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected void doStart() throws Exception {     super.doStart().     if (dataSet == null) {         dataSet = getComponent().getDataSet().     }     if (dataSetCallback == null) {         dataSetCallback = getComponent().getDataSetCallback().     } }
false;public;0;10;;@Override public Producer createProducer() throws Exception {     if (endpointType == EndpointType.dataset) {         return new DataSetFlinkProducer(this).     } else if (endpointType == EndpointType.datastream) {         return new DataStreamFlinkProducer(this).     } else {         return null.     } }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Flink Component supports producer endpoints only."). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public FlinkComponent getComponent() {     return (FlinkComponent) super.getComponent(). }
true;public;1;3;/**  * Type of the endpoint (dataset, datastream).  */ ;/**  * Type of the endpoint (dataset, datastream).  */ public void setEndpointType(EndpointType endpointType) {     this.endpointType = endpointType. }
false;public;0;3;;public DataSet getDataSet() {     return dataSet. }
false;public;0;3;;public DataStream getDataStream() {     return dataStream. }
true;public;1;3;/**  * DataSet to compute against.  */ ;/**  * DataSet to compute against.  */ public void setDataSet(DataSet ds) {     this.dataSet = ds. }
true;public;1;3;/**  * DataStream to compute against.  */ ;/**  * DataStream to compute against.  */ public void setDataStream(DataStream ds) {     this.dataStream = ds. }
false;public;0;3;;public DataSetCallback getDataSetCallback() {     return dataSetCallback. }
false;public;0;3;;public DataStreamCallback getDataStreamCallback() {     return dataStreamCallback. }
true;public;1;3;/**  * Function performing action against a DataSet.  */ ;/**  * Function performing action against a DataSet.  */ public void setDataSetCallback(DataSetCallback dataSetCallback) {     this.dataSetCallback = dataSetCallback. }
true;public;1;3;/**  * Function performing action against a DataStream.  */ ;/**  * Function performing action against a DataStream.  */ public void setDataStreamCallback(DataStreamCallback dataStreamCallback) {     this.dataStreamCallback = dataStreamCallback. }
false;public;0;3;;public boolean isCollect() {     return collect. }
true;public;1;3;/**  * Indicates if results should be collected or counted.  */ ;/**  * Indicates if results should be collected or counted.  */ public void setCollect(boolean collect) {     this.collect = collect. }
