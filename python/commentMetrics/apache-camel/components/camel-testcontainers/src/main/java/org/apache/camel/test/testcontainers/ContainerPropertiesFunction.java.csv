commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "container". }
false;public;1;38;;@Override public String apply(String remainder) {     final String type = StringHelper.before(remainder, ":").     final String query = StringHelper.after(remainder, ":").     if (ObjectHelper.isEmpty(type)) {         throw new IllegalArgumentException("container function syntax is container:type:query").     }     if ("host".equalsIgnoreCase(type)) {         String name = StringHelper.after(remainder, ":").         if (ObjectHelper.isEmpty(name)) {             throw new IllegalArgumentException("unable to determine container name").         }         return Containers.lookup(containers, StringHelper.after(remainder, ":")).getContainerIpAddress().     }     if ("port".equalsIgnoreCase(type)) {         String port = StringHelper.before(query, "@").         String name = StringHelper.after(query, "@").         if (ObjectHelper.isEmpty(port)) {             throw new IllegalArgumentException("unable to determine original port").         }         if (ObjectHelper.isEmpty(name)) {             throw new IllegalArgumentException("unable to determine container name").         }         return Integer.toString(Containers.lookup(containers, name).getMappedPort(Integer.parseInt(port))).     }     throw new IllegalArgumentException("Unsupported type: " + type). }
