commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected void waitUntilReady() {     final DockerClient client = DockerClientFactory.instance().client().     final WaitingConsumer waitingConsumer = new WaitingConsumer().     LogUtils.followOutput(client, waitStrategyTarget.getContainerId(), waitingConsumer).     try {         waitingConsumer.waitUntil(predicate, startupTimeout.getSeconds(), TimeUnit.SECONDS, times).     } catch (TimeoutException e) {         throw new ContainerLaunchException("Timed out").     } }
true;public,static;2;22;/**  * Convenience method to return a WaitStrategy for log messages using a predicate.  *  * @param predicate the predicate to apply to log messages  * @param times the number of times the pattern is expected  * @return WaitStrategy  */ ;/**  * Convenience method to return a WaitStrategy for log messages using a predicate.  *  * @param predicate the predicate to apply to log messages  * @param times the number of times the pattern is expected  * @return WaitStrategy  */ public static WaitStrategy forLogPredicate(Predicate<OutputFrame> predicate, int times) {     return new AbstractWaitStrategy() {          @Override         protected void waitUntilReady() {             final DockerClient client = DockerClientFactory.instance().client().             final WaitingConsumer waitingConsumer = new WaitingConsumer().             LogUtils.followOutput(client, waitStrategyTarget.getContainerId(), waitingConsumer).             try {                 waitingConsumer.waitUntil(predicate, startupTimeout.getSeconds(), TimeUnit.SECONDS, times).             } catch (TimeoutException e) {                 throw new ContainerLaunchException("Timed out").             }         }     }. }
true;public,static;2;3;/**  * Convenience method to return a WaitStrategy for log messages.  *  * @param text the text to find  * @param times the number of times the pattern is expected  * @return WaitStrategy  */ ;/**  * Convenience method to return a WaitStrategy for log messages.  *  * @param text the text to find  * @param times the number of times the pattern is expected  * @return WaitStrategy  */ public static WaitStrategy forLogMessageContaining(String text, int times) {     return forLogPredicate(u -> u.getUtf8String().contains(text), times). }
