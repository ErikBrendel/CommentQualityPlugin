commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;7;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "camelContext").     ObjectHelper.notNull(loadBalancerClient, "loadBalancerClient").     LOGGER.info("ServiceCall is using cloud load balancer of type: {}", loadBalancerClient.getClass()). }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
false;public;2;4;;@Override public <T> T process(String serviceName, ServiceLoadBalancerFunction<T> function) throws Exception {     return loadBalancer.process(serviceName, function). }
false;;1;1;;ServiceLoadBalancer adapt(LoadBalancerClient client).
