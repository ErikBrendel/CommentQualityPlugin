commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;// ************************************* // Test Auto Configuration // ************************************* @Test public void testAutoConfiguration() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class, CamelCloudAutoConfiguration.class, CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off", "ribbon.eureka.enabled=false", "ribbon.enabled=false").run(context -> {         // spring cloud registry         assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).         assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class).         // camel registry         assertThat(context).hasSingleBean(org.apache.camel.cloud.ServiceRegistry.class).         assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).isInstanceOf(CamelSpringCloudServiceRegistry.class).         assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).hasFieldOrPropertyWithValue("nativeServiceRegistry", context.getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class)).     }). }
false;public;0;27;;@Test public void testDisabledCamelCloud() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class, CamelCloudAutoConfiguration.class, CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off", "ribbon.eureka.enabled=false", "ribbon.enabled=false", "camel.cloud.enabled=false").run(context -> {         // spring cloud registry         assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).         assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class).         // camel registry         assertThat(context).doesNotHaveBean(org.apache.camel.cloud.ServiceRegistry.class).     }). }
false;public;0;28;;@Test public void testDisabledCamelServiceRegistry() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class, CamelCloudAutoConfiguration.class, CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off", "ribbon.eureka.enabled=false", "ribbon.enabled=false", "camel.cloud.enabled=true", "camel.cloud.service-registry.enabled=false").run(context -> {         // spring cloud registry         assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).         assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class).         // camel registry         assertThat(context).doesNotHaveBean(org.apache.camel.cloud.ServiceRegistry.class).     }). }
false;public;0;34;;@Test public void testEnabledCamelServiceRegistry() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class, CamelCloudAutoConfiguration.class, CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off", "ribbon.eureka.enabled=false", "ribbon.enabled=false", "camel.cloud.enabled=false", "camel.cloud.service-registry.enabled=true").run(context -> {         // spring cloud registry         assertThat(context).hasSingleBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).         assertThat(context).getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class).isInstanceOf(MyServiceRegistry.class).         // camel registry         assertThat(context).hasSingleBean(org.apache.camel.cloud.ServiceRegistry.class).         assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).isInstanceOf(CamelSpringCloudServiceRegistry.class).         assertThat(context).getBean(org.apache.camel.cloud.ServiceRegistry.class).hasFieldOrPropertyWithValue("nativeServiceRegistry", context.getBean(org.springframework.cloud.client.serviceregistry.ServiceRegistry.class)).     }). }
false;public;0;42;;// ************************************* // Test Registry // ************************************* @Test public void testServiceRegistry() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(CamelAutoConfiguration.class, CamelCloudAutoConfiguration.class, CamelSpringCloudServiceRegistryAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.main.banner-mode=off", "ribbon.eureka.enabled=false", "ribbon.enabled=false").run(context -> {         CamelSpringCloudServiceRegistry camelRgistry = context.getBean(CamelSpringCloudServiceRegistry.class).         final String serviceName = "my-.service".         final String serviceId = UUID.randomUUID().toString().         final int port = ThreadLocalRandom.current().nextInt().         camelRgistry.register(DefaultServiceDefinition.builder().withHost("localhost").withPort(port).withName(serviceName).withId(serviceId).build()).         MyServiceRegistry cloudRegistry = camelRgistry.getNativeServiceRegistry(MyServiceRegistry.class).         assertThat(cloudRegistry.registrations).hasSize(1).         assertThat(cloudRegistry.registrations.get(0)).hasFieldOrPropertyWithValue("serviceId", serviceName).         assertThat(cloudRegistry.registrations.get(0)).hasFieldOrPropertyWithValue("host", "localhost").         assertThat(cloudRegistry.registrations.get(0)).hasFieldOrPropertyWithValue("port", port).     }). }
false;public;0;4;;@Bean public org.springframework.cloud.client.serviceregistry.ServiceRegistry<MyServiceRegistration> myServiceRegistry() {     return new MyServiceRegistry(). }
false;public;1;8;;@Override public MyServiceRegistration convert(ServiceDefinition source) {     return new MyServiceRegistration(source.getName(), source.getHost(), source.getPort()). }
false;public;0;13;;@Bean public Converter<ServiceDefinition, MyServiceRegistration> definitionToRegistration() {     return new Converter<ServiceDefinition, MyServiceRegistration>() {          @Override         public MyServiceRegistration convert(ServiceDefinition source) {             return new MyServiceRegistration(source.getName(), source.getHost(), source.getPort()).         }     }. }
false;public;1;4;;@Override public void register(MyServiceRegistration registration) {     this.registrations.add(registration). }
false;public;1;4;;@Override public void deregister(MyServiceRegistration registration) {     this.registrations.remove(registration). }
false;public;0;4;;@Override public void close() {     this.registrations.clear(). }
false;public;2;4;;@Override public void setStatus(MyServiceRegistration registration, String status) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object getStatus(MyServiceRegistration registration) {     throw new UnsupportedOperationException(). }
