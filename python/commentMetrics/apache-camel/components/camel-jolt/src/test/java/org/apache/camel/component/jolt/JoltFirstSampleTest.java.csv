commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testFirstSampleJolt() throws Exception {     getMockEndpoint("mock:result").expectedMinimumMessageCount(1).     getMockEndpoint("mock:result").expectedBodiesReceived(IOHelper.loadText(ResourceHelper.resolveMandatoryResourceAsInputStream(context, "org/apache/camel/component/jolt/firstSample/output.json")).trim()).     sendBody("direct://start", ResourceHelper.resolveMandatoryResourceAsInputStream(context, "org/apache/camel/component/jolt/firstSample/input.json")).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) {     Map<String, String> contextMap = new HashMap<>().     contextMap.put("contextB", "bb").     exchange.getIn().setHeader(JoltConstants.JOLT_CONTEXT, contextMap). }
false;public;0;6;;public void configure() {     from("direct://start").process(processor).to("jolt:org/apache/camel/component/jolt/firstSample/spec.json?inputType=JsonString&outputType=JsonString").to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     final Processor processor = new Processor() {          public void process(Exchange exchange) {             Map<String, String> contextMap = new HashMap<>().             contextMap.put("contextB", "bb").             exchange.getIn().setHeader(JoltConstants.JOLT_CONTEXT, contextMap).         }     }.     return new RouteBuilder() {          public void configure() {             from("direct://start").process(processor).to("jolt:org/apache/camel/component/jolt/firstSample/spec.json?inputType=JsonString&outputType=JsonString").to("mock:result").         }     }. }
