commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public ExchangePattern getExchangePattern() {     return ExchangePattern.InOut. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "jolt:" + getResourceUri(). }
false;private,synchronized;0;33;;private synchronized JoltTransform getTransform() throws Exception {     if (transform == null) {         if (log.isDebugEnabled()) {             String path = getResourceUri().             log.debug("Jolt content read from resource {} with resourceUri: {} for endpoint {}", getResourceUri(), path, getEndpointUri()).         }         // Sortr does not require a spec         if (this.transformDsl == JoltTransformType.Sortr) {             this.transform = new Sortr().         } else {             // getResourceAsInputStream also considers the content cache             Object spec = JsonUtils.jsonToObject(getResourceAsInputStream()).             switch(this.transformDsl) {                 case Shiftr:                     this.transform = new Shiftr(spec).                     break.                 case Defaultr:                     this.transform = new Defaultr(spec).                     break.                 case Removr:                     this.transform = new Removr(spec).                     break.                 case Chainr:                 default:                     this.transform = Chainr.fromSpec(spec).                     break.             }         }     }     return transform. }
true;public;1;3;/**  * Sets the Transform to use. If not set a Transform specified by the transformDsl will be created  */ ;/**  * Sets the Transform to use. If not set a Transform specified by the transformDsl will be created  */ public void setTransform(JoltTransform transform) {     this.transform = transform. }
false;public;0;3;;public JoltInputOutputType getOutputType() {     return outputType. }
true;public;1;3;/**  * Specifies if the output should be hydrated JSON or a JSON String.  */ ;/**  * Specifies if the output should be hydrated JSON or a JSON String.  */ public void setOutputType(JoltInputOutputType outputType) {     this.outputType = outputType. }
false;public;0;3;;public JoltInputOutputType getInputType() {     return inputType. }
true;public;1;3;/**  * Specifies if the input is hydrated JSON or a JSON String.  */ ;/**  * Specifies if the input is hydrated JSON or a JSON String.  */ public void setInputType(JoltInputOutputType inputType) {     this.inputType = inputType. }
false;public;0;3;;public JoltTransformType getTransformDsl() {     return transformDsl. }
true;public;1;3;/**  * Specifies the Transform DSL of the endpoint resource. If none is specified <code>Chainr</code> will be used.  */ ;/**  * Specifies the Transform DSL of the endpoint resource. If none is specified <code>Chainr</code> will be used.  */ public void setTransformDsl(JoltTransformType transformType) {     this.transformDsl = transformType. }
false;public;2;5;;public JoltEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {     String newUri = uri.replace(getResourceUri(), newResourceUri).     log.debug("Getting endpoint with URI: {}", newUri).     return getCamelContext().getEndpoint(newUri, JoltEndpoint.class). }
false;protected;1;42;;@Override protected void onExchange(Exchange exchange) throws Exception {     String path = getResourceUri().     ObjectHelper.notNull(path, "resourceUri").     String newResourceUri = exchange.getIn().getHeader(JoltConstants.JOLT_RESOURCE_URI, String.class).     if (newResourceUri != null) {         exchange.getIn().removeHeader(JoltConstants.JOLT_RESOURCE_URI).         log.debug("{} set to {} creating new endpoint to handle exchange", JoltConstants.JOLT_RESOURCE_URI, newResourceUri).         JoltEndpoint newEndpoint = findOrCreateEndpoint(getEndpointUri(), newResourceUri).         newEndpoint.onExchange(exchange).         return.     }     Object input.     if (getInputType() == JoltInputOutputType.JsonString) {         input = JsonUtils.jsonToObject(exchange.getIn().getBody(InputStream.class)).     } else {         input = exchange.getIn().getBody().     }     Object output.     @SuppressWarnings("unchecked")     Map<String, Object> inputContextMap = exchange.getIn().getHeader(JoltConstants.JOLT_CONTEXT, Map.class).     if (inputContextMap != null) {         output = ((ContextualTransform) getTransform()).transform(input, inputContextMap).     } else {         output = ((Transform) getTransform()).transform(input).     }     // now lets output the results to the exchange     Message out = exchange.getOut().     if (getOutputType() == JoltInputOutputType.JsonString) {         out.setBody(JsonUtils.toJsonString(output)).     } else {         out.setBody(output).     }     out.setHeaders(exchange.getIn().getHeaders()).     out.setAttachments(exchange.getIn().getAttachments()). }
