commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setDescriptors(parameter). }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setDescriptors(parameter). }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setConfigAdminPid(parameter). }
false;protected;3;3;;protected void doProcess(String arg, String parameter, LinkedList<String> remainingArgs) {     setConfigAdminFileName(parameter). }
false;public,static;1;4;;public static void main(String... args) throws Exception {     Main main = new Main().     main.run(args). }
true;public,static;0;3;/**  * Returns the currently executing main  *  * @return the current running instance  */ ;/**  * Returns the currently executing main  *  * @return the current running instance  */ public static Main getInstance() {     return instance. }
false;protected;0;4;;@Override protected CamelContext createCamelContext() {     return CamelBlueprintHelper.getOsgiService(bundleContext, CamelContext.class). }
false;protected;0;25;;@Override protected void doStart() throws Exception {     if (bundleContext == null) {         String descriptors = getDescriptors().         if (descriptors == null) {             throw new IllegalArgumentException("Descriptors must be provided, with the name of the blueprint XML file").         }         LOG.debug("Starting Blueprint XML file: " + descriptors).         if (configAdminPid != null && configAdminFileName != null) {             // pid/file is used to set INITIAL content of ConfigAdmin to be used when blueprint container is started             bundleContext = createBundleContext(bundleName, new String[] { configAdminFileName, configAdminPid }).         } else {             bundleContext = createBundleContext(bundleName).         }     }     try {         super.doStart().         initCamelContext().     } finally {         // if we were veto started then mark as completed         if (getCamelContext() != null && getCamelContext().isVetoStarted()) {             completed().         }     } }
false;protected;0;12;;@Override protected void doStop() throws Exception {     // stop camel context     if (getCamelContext() != null) {         getCamelContext().stop().     }     // and then stop blueprint     LOG.debug("Stopping Blueprint XML file: {}", descriptors).     CamelBlueprintHelper.disposeBundleContext(bundleContext).     // call completed to properly stop as we count down the waiting latch     completed(). }
false;protected;0;8;;@Override protected ProducerTemplate findOrCreateCamelTemplate() {     if (getCamelContext() != null) {         return getCamelContext().createProducerTemplate().     } else {         return null.     } }
false;protected;0;3;;protected BundleContext createBundleContext() throws Exception {     return createBundleContext(getClass().getSimpleName()). }
false;protected;2;3;;protected BundleContext createBundleContext(String name, String[]... configAdminPidFiles) throws Exception {     return createBundleContext(name, loader, configAdminPidFiles). }
false;protected;3;5;;protected BundleContext createBundleContext(String name, ClassLoader loader, String[]... configAdminPidFiles) throws Exception {     return CamelBlueprintHelper.createBundleContext(name, descriptors, isIncludeSelfAsBundle(), CamelBlueprintHelper.BUNDLE_FILTER, CamelBlueprintHelper.BUNDLE_VERSION, null, loader, configAdminPidFiles). }
false;public;0;3;;public String getDescriptors() {     return descriptors. }
false;public;1;3;;public void setDescriptors(String descriptors) {     this.descriptors = descriptors. }
false;public;0;3;;public String getBundleName() {     return bundleName. }
false;public;1;3;;public void setBundleName(String bundleName) {     this.bundleName = bundleName. }
false;public;0;3;;public boolean isIncludeSelfAsBundle() {     return includeSelfAsBundle. }
false;public;1;3;;public void setIncludeSelfAsBundle(boolean includeSelfAsBundle) {     this.includeSelfAsBundle = includeSelfAsBundle. }
false;public;0;3;;public String getConfigAdminPid() {     return configAdminPid. }
false;public;1;3;;public void setConfigAdminPid(String pid) {     this.configAdminPid = pid. }
false;public;0;3;;public String getConfigAdminFileName() {     return configAdminFileName. }
false;public;1;3;;public void setConfigAdminFileName(String fileName) {     this.configAdminFileName = fileName. }
false;public;1;3;;public void setLoader(ClassLoader loader) {     this.loader = loader. }
