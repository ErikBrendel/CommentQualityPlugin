# id;timestamp;commentText;codeText;commentWords;codeWords
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1442412776;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1449942375;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1449947902;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1451411559;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1456320648;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1479485095;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        if (descriptors != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptors)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,if,descriptors,null,iterator,object,it,object,helper,create,iterator,descriptors,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1479488726;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        if (descriptors != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptors)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,if,descriptors,null,iterator,object,it,object,helper,create,iterator,descriptors,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1494089501;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        if (descriptors != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptors)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,if,descriptors,null,iterator,object,it,object,helper,create,iterator,descriptors,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1524063209;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<>()__        if (descriptors != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptors)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,if,descriptors,null,iterator,object,it,object,helper,create,iterator,descriptors,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1540108163;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<>()__        if (descriptors != null) {_            _            Iterator<?> it = ObjectHelper.createIterator(descriptors)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = org.apache.camel.util.ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = org.apache.camel.util.ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,if,descriptors,null,iterator,it,object,helper,create,iterator,descriptors,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,org,apache,camel,util,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,org,apache,camel,util,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1548933593;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;protected static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<>()__        if (descriptors != null) {_            _            Iterator<?> it = ObjectHelper.createIterator(descriptors)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = org.apache.camel.util.ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = org.apache.camel.util.ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;protected,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,if,descriptors,null,iterator,it,object,helper,create,iterator,descriptors,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,org,apache,camel,util,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,org,apache,camel,util,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1335525423;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1335540090;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1335625139;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1336439476;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1337953843;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1340111803;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1345218798;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1345470544;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1345471244;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1347388466;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1349099486;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1352556719;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1365234322;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1368004799;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1373129971;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1373190484;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1373223799;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1376549254;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1421087348;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1421130660;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1433501396;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1437396697;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1437396697;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1437396697;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1437396697;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1437396698;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1437396698;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1442412776;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1449942375;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1449947902;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1451411559;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1456320648;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1479485095;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1479488726;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1494089501;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1524063209;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1540108163;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1548933593;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references  == null ? new ArrayList<>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references);1334235350;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references) {_        return references  == null ? new ArrayList<ServiceReference<?>>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references);1334243189;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references) {_        return references  == null ? new ArrayList<ServiceReference<?>>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references);1334664842;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references) {_        return references  == null ? new ArrayList<ServiceReference<?>>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references);1334671144;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references) {_        return references  == null ? new ArrayList<ServiceReference<?>>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references);1335962951;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references) {_        return references  == null ? new ArrayList<ServiceReference<?>>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references);1336211001;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference<?>> asCollection(ServiceReference<?>[] references) {_        return references  == null ? new ArrayList<ServiceReference<?>>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1334664842;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1334671144;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1335525423;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1335540090;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1335625139;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1335962951;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1336211001;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1336439476;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1337953843;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1340111803;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1345218798;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1345470544;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1345471244;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1347388466;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1349099486;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1352556719;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1365234322;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1368004799;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1373129971;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1373190484;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1373223799;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1376549254;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1421087348;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1421130660;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1433501396;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1437396697;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1437396697;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1437396697;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1437396697;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1437396698;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException;1437396698;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException, MalformedURLException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                LOG.trace("Resource descriptor: {}", s)___                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        LOG.debug("Resolving resource: {}", name)__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    LOG.debug("Resolving resource: {}", s)__                    URL url = ResourceHelper.resolveMandatoryResourceAsUrl(RESOLVER, s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,malformed,urlexception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,log,trace,resource,descriptor,s,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,log,debug,resolving,resource,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,log,debug,resolving,resource,s,url,url,resource,helper,resolve,mandatory,resource,as,url,resolver,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1437396698;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1442412776;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1449942375;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1449947902;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1451411559;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1456320648;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1479485095;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        boolean found = latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (!found) {_            throw new RuntimeException("Gave up waiting for BlueprintContainer from bundle \"" + symbolicName + "\"")__        }__        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,boolean,found,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,found,throw,new,runtime,exception,gave,up,waiting,for,blueprint,container,from,bundle,symbolic,name,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1479488726;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        boolean found = latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (!found) {_            throw new RuntimeException("Gave up waiting for BlueprintContainer from bundle \"" + symbolicName + "\"")__        }__        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,boolean,found,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,found,throw,new,runtime,exception,gave,up,waiting,for,blueprint,container,from,bundle,symbolic,name,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1494089501;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        boolean found = latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (!found) {_            throw new RuntimeException("Gave up waiting for BlueprintContainer from bundle \"" + symbolicName + "\"")__        }__        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,boolean,found,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,found,throw,new,runtime,exception,gave,up,waiting,for,blueprint,container,from,bundle,symbolic,name,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1524063209;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        boolean found = latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (!found) {_            throw new RuntimeException("Gave up waiting for BlueprintContainer from bundle \"" + symbolicName + "\"")__        }__        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,boolean,found,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,found,throw,new,runtime,exception,gave,up,waiting,for,blueprint,container,from,bundle,symbolic,name,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1540108163;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        boolean found = latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (!found) {_            throw new RuntimeException("Gave up waiting for BlueprintContainer from bundle \"" + symbolicName + "\"")__        }__        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,boolean,found,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,found,throw,new,runtime,exception,gave,up,waiting,for,blueprint,container,from,bundle,symbolic,name,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,                                                  final String symbolicName, final int bpEvent, final Runnable runAndWait)         throws InterruptedException;1548933593;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context,_                                                 final String symbolicName, final int bpEvent, final Runnable runAndWait)_        throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        final Throwable[] pThrowable = new Throwable[] {null}__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getBundle().getSymbolicName().equals(symbolicName)) {_                    if (event.getType() == bpEvent) {_                        _                        _                        if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                            latch.countDown()__                        }_                    } else if (event.getType() == BlueprintEvent.FAILURE) {_                        _                        pThrowable[0] = event.getCause()__                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        boolean found = latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()___        if (!found) {_            throw new RuntimeException("Gave up waiting for BlueprintContainer from bundle \"" + symbolicName + "\"")__        }__        if (pThrowable[0] != null) {_            throw new RuntimeException(pThrowable[0].getMessage(), pThrowable[0])__        }_    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,final,throwable,p,throwable,new,throwable,null,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,get,type,bp,event,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,else,if,event,get,type,blueprint,event,failure,p,throwable,0,event,get,cause,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,boolean,found,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister,if,found,throw,new,runtime,exception,gave,up,waiting,for,blueprint,container,from,bundle,symbolic,name,if,p,throwable,0,null,throw,new,runtime,exception,p,throwable,0,get,message,p,throwable,0
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception;1479485095;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter, loader)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,class,loader,loader,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter,loader
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception;1479488726;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter, loader)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,class,loader,loader,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter,loader
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception;1494089501;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter, loader)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,class,loader,loader,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter,loader
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception;1524063209;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter, loader)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,class,loader,loader,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter,loader
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception;1540108163;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter, loader)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,class,loader,loader,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter,loader
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception;1548933593;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter, ClassLoader loader) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter, loader)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,class,loader,loader,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter,loader
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1334235350;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1334243189;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1334664842;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1334671144;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1335525423;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1335540090;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1335625139;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1335962951;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1336211001;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1336439476;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1337953843;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1340111803;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1345218798;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1345470544;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1345471244;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuffer result = new StringBuffer()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,buffer,result,new,string,buffer,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1347388466;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1349099486;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1352556719;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1365234322;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1368004799;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1373129971;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1373190484;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1373223799;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1376549254;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1421087348;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1421130660;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1433501396;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1437396697;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1437396697;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1437396697;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1437396697;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1437396698;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1437396698;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1442412776;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1449942375;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1449947902;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1451411559;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1456320648;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1479485095;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1479488726;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1494089501;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1524063209;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1540108163;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static String explode(Dictionary<?, ?> dictionary);1548933593;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1335540090;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1335625139;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1335962951;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1336211001;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1336439476;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1337953843;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1340111803;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1345218798;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1345470544;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1345471244;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1347388466;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1349099486;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1352556719;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1365234322;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1368004799;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1373129971;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1373190484;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1373223799;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1376549254;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1421087348;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1421130660;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1433501396;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1437396697;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1437396697;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1437396697;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1437396697;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1437396698;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1437396698;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1442412776;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1449942375;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1449947902;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1451411559;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception;1456320648;Gets list of bundle descriptors._@param bundleFilter Filter expression for OSGI bundles.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {_        return new ClasspathScanner().scanForBundles(bundleFilter)__    };gets,list,of,bundle,descriptors,param,bundle,filter,filter,expression,for,osgi,bundles,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,final,string,bundle,filter,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,filter
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors() throws Exception;1334235350;Gets list of bundle descriptors.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors() throws Exception {_        return new ClasspathScanner().scanForBundles("(Bundle-SymbolicName=*)")__    };gets,list,of,bundle,descriptors,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,symbolic,name
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors() throws Exception;1334243189;Gets list of bundle descriptors.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors() throws Exception {_        return new ClasspathScanner().scanForBundles("(Bundle-SymbolicName=*)")__    };gets,list,of,bundle,descriptors,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,symbolic,name
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors() throws Exception;1334664842;Gets list of bundle descriptors.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors() throws Exception {_        return new ClasspathScanner().scanForBundles("(Bundle-SymbolicName=*)")__    };gets,list,of,bundle,descriptors,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,symbolic,name
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors() throws Exception;1334671144;Gets list of bundle descriptors.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors() throws Exception {_        return new ClasspathScanner().scanForBundles("(Bundle-SymbolicName=*)")__    };gets,list,of,bundle,descriptors,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,symbolic,name
CamelBlueprintHelper -> private static List<BundleDescriptor> getBundleDescriptors() throws Exception;1335525423;Gets list of bundle descriptors.__@return List pointers to OSGi bundles._@throws Exception If looking up the bundles fails.;private static List<BundleDescriptor> getBundleDescriptors() throws Exception {_        return new ClasspathScanner().scanForBundles("(Bundle-SymbolicName=*)")__    };gets,list,of,bundle,descriptors,return,list,pointers,to,osgi,bundles,throws,exception,if,looking,up,the,bundles,fails;private,static,list,bundle,descriptor,get,bundle,descriptors,throws,exception,return,new,classpath,scanner,scan,for,bundles,bundle,symbolic,name
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context, final String symbolicName, final int bpEvent, final Runnable runAndWait) throws InterruptedException;1437396697;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context, final String symbolicName, final int bpEvent, final Runnable runAndWait) throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context, final String symbolicName, final int bpEvent, final Runnable runAndWait) throws InterruptedException;1437396697;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context, final String symbolicName, final int bpEvent, final Runnable runAndWait) throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context, final String symbolicName, final int bpEvent, final Runnable runAndWait) throws InterruptedException;1437396698;Synchronization method to wait for particular state of BlueprintContainer under test.;public static void waitForBlueprintContainer(final Set<Long> eventHistory, BundleContext context, final String symbolicName, final int bpEvent, final Runnable runAndWait) throws InterruptedException {_        final CountDownLatch latch = new CountDownLatch(1)__        ServiceRegistration<BlueprintListener> registration = context.registerService(BlueprintListener.class, new BlueprintListener() {_            @Override_            public void blueprintEvent(BlueprintEvent event) {_                if (event.getType() == bpEvent && event.getBundle().getSymbolicName().equals(symbolicName)) {_                    _                    _                    if (eventHistory == null || eventHistory.add(event.getTimestamp())) {_                        latch.countDown()__                    }_                }_            }_        }, null)__        if (runAndWait != null) {_            runAndWait.run()__        }_        latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)__        registration.unregister()__    };synchronization,method,to,wait,for,particular,state,of,blueprint,container,under,test;public,static,void,wait,for,blueprint,container,final,set,long,event,history,bundle,context,context,final,string,symbolic,name,final,int,bp,event,final,runnable,run,and,wait,throws,interrupted,exception,final,count,down,latch,latch,new,count,down,latch,1,service,registration,blueprint,listener,registration,context,register,service,blueprint,listener,class,new,blueprint,listener,override,public,void,blueprint,event,blueprint,event,event,if,event,get,type,bp,event,event,get,bundle,get,symbolic,name,equals,symbolic,name,if,event,history,null,event,history,add,event,get,timestamp,latch,count,down,null,if,run,and,wait,null,run,and,wait,run,latch,await,camel,blueprint,helper,time,unit,milliseconds,registration,unregister
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException;1334235350;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    URL url = ObjectHelper.loadResourceAsURL(s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found in classpath")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,url,url,object,helper,load,resource,as,url,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,in,classpath,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
CamelBlueprintHelper -> private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException;1334243189;Gets the bundle descriptors as {@link URL} resources.__@param descriptors the bundle descriptors, can be separated by comma_@return the bundle descriptors._@throws FileNotFoundException is thrown if a bundle descriptor cannot be found;private static Collection<URL> getBlueprintDescriptors(String descriptors) throws FileNotFoundException {_        List<URL> answer = new ArrayList<URL>()__        String descriptor = descriptors__        if (descriptor != null) {_            _            Iterator<Object> it = ObjectHelper.createIterator(descriptor)__            while (it.hasNext()) {_                String s = (String) it.next()__                _                s = FileUtil.stripLeadingSeparator(s)___                _                if (s.endsWith("*.xml")) {_                    String packageName = s.substring(0, s.length() - 5)__                    _                    Enumeration<URL> urls = ObjectHelper.loadResourcesAsURL(packageName)__                    while (urls.hasMoreElements()) {_                        URL url = urls.nextElement()__                        File dir = new File(url.getFile())__                        if (dir.isDirectory()) {_                            File[] files = dir.listFiles()__                            if (files != null) {_                                for (File file : files) {_                                    if (file.isFile() && file.exists() && file.getName().endsWith(".xml")) {_                                        String name = packageName + file.getName()__                                        URL xmlUrl = ObjectHelper.loadResourceAsURL(name)__                                        if (xmlUrl != null) {_                                            answer.add(xmlUrl)__                                        }_                                    }_                                }_                            }_                        }_                    }_                } else {_                    URL url = ObjectHelper.loadResourceAsURL(s)__                    if (url == null) {_                        throw new FileNotFoundException("Resource " + s + " not found in classpath")__                    }_                    answer.add(url)__                }_            }_        } else {_            throw new IllegalArgumentException("No bundle descriptor configured. Override getBlueprintDescriptor() or getBlueprintDescriptors() method")__        }__        if (answer.isEmpty()) {_            throw new IllegalArgumentException("Cannot find any resources in classpath from descriptor " + descriptors)__        }_        return answer__    };gets,the,bundle,descriptors,as,link,url,resources,param,descriptors,the,bundle,descriptors,can,be,separated,by,comma,return,the,bundle,descriptors,throws,file,not,found,exception,is,thrown,if,a,bundle,descriptor,cannot,be,found;private,static,collection,url,get,blueprint,descriptors,string,descriptors,throws,file,not,found,exception,list,url,answer,new,array,list,url,string,descriptor,descriptors,if,descriptor,null,iterator,object,it,object,helper,create,iterator,descriptor,while,it,has,next,string,s,string,it,next,s,file,util,strip,leading,separator,s,if,s,ends,with,xml,string,package,name,s,substring,0,s,length,5,enumeration,url,urls,object,helper,load,resources,as,url,package,name,while,urls,has,more,elements,url,url,urls,next,element,file,dir,new,file,url,get,file,if,dir,is,directory,file,files,dir,list,files,if,files,null,for,file,file,files,if,file,is,file,file,exists,file,get,name,ends,with,xml,string,name,package,name,file,get,name,url,xml,url,object,helper,load,resource,as,url,name,if,xml,url,null,answer,add,xml,url,else,url,url,object,helper,load,resource,as,url,s,if,url,null,throw,new,file,not,found,exception,resource,s,not,found,in,classpath,answer,add,url,else,throw,new,illegal,argument,exception,no,bundle,descriptor,configured,override,get,blueprint,descriptor,or,get,blueprint,descriptors,method,if,answer,is,empty,throw,new,illegal,argument,exception,cannot,find,any,resources,in,classpath,from,descriptor,descriptors,return,answer
