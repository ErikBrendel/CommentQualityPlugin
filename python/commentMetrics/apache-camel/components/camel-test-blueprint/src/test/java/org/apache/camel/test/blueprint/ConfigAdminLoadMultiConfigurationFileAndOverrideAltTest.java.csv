commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String getBlueprintDescriptor() {     // which blueprint XML file to use for this test     return "org/apache/camel/test/blueprint/configadmin-loadmultifileoverride.xml". }
false;protected;0;5;;@Override protected String[] loadConfigAdminConfigurationFile() {     // which .cfg files to use, and their corresponding persistence-ids     return new String[] { "src/test/resources/etc/stuff.cfg", "stuff", "src/test/resources/etc/otherstuff.cfg", "otherstuff" }. }
false;protected;1;8;;@Override protected String useOverridePropertiesWithConfigAdmin(Dictionary props) throws Exception {     // override / add extra properties     props.put("destination", "mock:extra").     // return the persistence-id to use     return "stuff". }
false;public;0;13;;@Test public void testConfigAdmin() throws Exception {     // mock:original comes from <cm:default-properties>/<cm:property name="destination" value="mock:original" />     getMockEndpoint("mock:original").setExpectedMessageCount(0).     // mock:result comes from loadConfigAdminConfigurationFile()     getMockEndpoint("mock:result").setExpectedMessageCount(0).     // mock:extra comes from useOverridePropertiesWithConfigAdmin()     getMockEndpoint("mock:extra").expectedBodiesReceived("Bye World", "Yay Bye WorldYay Bye World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
