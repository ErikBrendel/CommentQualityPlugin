commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getBlueprintDescriptor() {     return "org/apache/camel/test/blueprint/configadmin.xml". }
false;public;0;8;;@Override public void run() {     try {         camelCore.start().     } catch (BundleException e) {         throw new RuntimeException(e.getMessage(), e).     } }
false;public;0;31;;@Test public void testProperties() throws Exception {     Bundle camelCore = getBundleBySymbolicName("org.apache.camel.camel-core").     Bundle test = getBundleBySymbolicName(getClass().getSimpleName()).     camelCore.stop().     test.stop().     Thread.sleep(500).     test.start().     try {         getOsgiService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + getClass().getSimpleName() + ")", 500).         fail("Expected a timeout").     } catch (RuntimeException e) {     // Expected timeout     }     CamelBlueprintHelper.waitForBlueprintContainer(null, test.getBundleContext(), getClass().getSimpleName(), BlueprintEvent.CREATED, new Runnable() {          @Override         public void run() {             try {                 camelCore.start().             } catch (BundleException e) {                 throw new RuntimeException(e.getMessage(), e).             }         }     }).     getOsgiService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + getClass().getSimpleName() + ")", 500). }
false;private;1;8;;private Bundle getBundleBySymbolicName(String name) {     for (Bundle bundle : getBundleContext().getBundles()) {         if (bundle.getSymbolicName().equals(name)) {             return bundle.         }     }     return null. }
