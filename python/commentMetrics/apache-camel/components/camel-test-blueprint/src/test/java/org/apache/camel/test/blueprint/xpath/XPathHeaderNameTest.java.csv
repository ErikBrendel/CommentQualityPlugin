commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getBlueprintDescriptor() {     return "org/apache/camel/test/blueprint/xpath/XPathHeaderNameTest.xml". }
false;public;0;11;;@Test public void testChoiceWithHeaderNamePremium() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:premium").     mock.expectedBodiesReceived("<response>OK</response>").     mock.expectedHeaderReceived("invoiceDetails", "<invoice orderType='premium'><person><name>Alan</name></person></invoice>").     template.sendBodyAndHeader("direct:in", "<response>OK</response>", "invoiceDetails", "<invoice orderType='premium'><person><name>Alan</name></person></invoice>").     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void testChoiceWithHeaderNameStandard() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:standard").     mock.expectedBodiesReceived("<response>OK</response>").     mock.expectedHeaderReceived("invoiceDetails", "<invoice orderType='standard'><person><name>Alan</name></person></invoice>").     template.sendBodyAndHeader("direct:in", "<response>OK</response>", "invoiceDetails", "<invoice orderType='standard'><person><name>Alan</name></person></invoice>").     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void testChoiceWithHeaderNameUnknown() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:unknown").     mock.expectedBodiesReceived("<response>OK</response>").     mock.expectedHeaderReceived("invoiceDetails", "<invoice />").     template.sendBodyAndHeader("direct:in", "<response>OK</response>", "invoiceDetails", "<invoice />").     mock.assertIsSatisfied(). }
