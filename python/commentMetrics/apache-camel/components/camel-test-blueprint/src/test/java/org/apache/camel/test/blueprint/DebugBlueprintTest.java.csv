commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;// override this method, and return the location of our Blueprint XML file to be used for testing ;// override this method, and return the location of our Blueprint XML file to be used for testing @Override protected String getBlueprintDescriptor() {     return "org/apache/camel/test/blueprint/camelContext.xml". }
true;public;0;16;// here we have regular JUnit @Test method ;// here we have regular JUnit @Test method @Test public void testRoute() throws Exception {     // set mock expectations     getMockEndpoint("mock:a").expectedMessageCount(1).     // send a message     template.sendBody("direct:start", "World").     // assert mocks     assertMockEndpointsSatisfied().     // assert on the debugBefore/debugAfter methods below being called as we've enabled the debugger     assertTrue(debugBeforeMethodCalled).     assertTrue(debugAfterMethodCalled). }
false;public;0;5;;@Override public boolean isUseDebugger() {     // must enable debugger     return true. }
false;protected;5;5;;@Override protected void debugBefore(Exchange exchange, org.apache.camel.Processor processor, ProcessorDefinition<?> definition, String id, String label) {     log.info("Before " + definition + " with body " + exchange.getIn().getBody()).     debugBeforeMethodCalled = true. }
false;protected;6;5;;@Override protected void debugAfter(Exchange exchange, org.apache.camel.Processor processor, ProcessorDefinition<?> definition, String id, String label, long timeTaken) {     log.info("After " + definition + " with body " + exchange.getIn().getBody()).     debugAfterMethodCalled = true. }
