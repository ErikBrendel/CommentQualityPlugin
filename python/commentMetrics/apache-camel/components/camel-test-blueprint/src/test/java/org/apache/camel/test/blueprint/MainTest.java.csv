commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testMyMain() throws Exception {     Main main = new Main().     main.setBundleName("MyMainBundle").     // as we run this test without packing ourselves as bundle, then include ourselves     main.setIncludeSelfAsBundle(true).     // setup the blueprint file here     main.setDescriptors("org/apache/camel/test/blueprint/main-loadfile.xml").     // set the configAdmin persistent id     main.setConfigAdminPid("stuff").     // set the configAdmin persistent file name     main.setConfigAdminFileName("src/test/resources/etc/stuff.cfg").     main.start().     ProducerTemplate template = main.getCamelTemplate().     assertNotNull("We should get the template here", template).     String result = template.requestBody("direct:start", "hello", String.class).     assertEquals("Get a wrong response", "Bye hello", result).     main.stop(). }
false;public;0;38;;@Test public void testMainWithoutIncludingTestBundle() throws Exception {     TinyBundle bundle = TinyBundles.newBundle().     bundle.add("OSGI-INF/blueprint/camel.xml", getClass().getResourceAsStream("main-loadfile.xml")).     bundle.set("Manifest-Version", "2").set("Bundle-ManifestVersion", "2").set("Bundle-SymbolicName", SYMBOLIC_NAME).set("Bundle-Version", "1.0.0").     File tb = File.createTempFile(SYMBOLIC_NAME + "-", ".jar", new File("target")).     FileOutputStream out = new FileOutputStream(tb).     IOUtils.copy(bundle.build(), out).     out.close().     // simulate `camel:run` which is run after packaging the artifact, so a "bundle" (location with     // META-INF/MANIFEST.MF) is detected in target/classes     URLClassLoader loader = new URLClassLoader(new URL[] { tb.toURI().toURL() }, getClass().getClassLoader()).     Main main = new Main().     main.setLoader(loader).     // bundle name will be used as filter for blueprint container filter     main.setBundleName(SYMBOLIC_NAME).     // don't include test bundle (which is what `mvn camel:run` actually does)     main.setIncludeSelfAsBundle(false).     // don't setup the blueprint file here - it'll be picked up from a bundle on classpath     // main.setDescriptors("none!").     // set the configAdmin persistent id     main.setConfigAdminPid("stuff").     // set the configAdmin persistent file name     main.setConfigAdminFileName("src/test/resources/etc/stuff.cfg").     main.doStart().     ProducerTemplate template = main.getCamelTemplate().     assertNotNull("We should get the template here", template).     String result = template.requestBody("direct:start", "hello", String.class).     assertEquals("Get a wrong response", "Bye hello", result).     main.stop(). }
