commented;modifiers;parameterAmount;loc;comment;code
true;public;0;10;/**  * Test without Resource URI header defined  */ ;/**  * Test without Resource URI header defined  */ @Test public void testChunk() throws Exception {     // Prepare     endSimpleMock.expectedMessageCount(1).     endSimpleMock.expectedBodiesReceived("Earth to Andrew. Come in, Andrew.\n").     // Act     startSimpleProducerTemplate.sendBodyAndHeader("The Body", "name", "Andrew").     // Verify     assertMockEndpointsSatisfied(). }
true;public;0;13;/**  * Test using Resource URI header  */ ;/**  * Test using Resource URI header  */ @Test public void testChunkWithResourceUriHeader() throws Exception {     // Prepare     Exchange exchange = createExchangeWithBody("The Body").     exchange.getIn().setHeader("name", "Andrew").     exchange.getIn().setHeader(ChunkConstants.CHUNK_RESOURCE_URI, "hello").     endSimpleMock.expectedMessageCount(1).     endSimpleMock.expectedBodiesReceived("Earth to Andrew. Come in, Andrew.\n").     // Act     startSimpleProducerTemplate.send(exchange).     // Verify     assertMockEndpointsSatisfied(). }
true;public;0;12;/**  * Performance test  */ ;/**  * Performance test  */ @Test public void testChunkPerformance() throws Exception {     int messageCount = 10000.     endSimpleMock.expectedMessageCount(messageCount).     StopWatch stopwatch = new StopWatch(true).     for (int i = 0. i < messageCount. i++) {         startSimpleProducerTemplate.sendBodyAndHeader("The Body", "name", "Andrew").     }     assertMockEndpointsSatisfied().     LoggerFactory.getLogger(getClass()).info("Chunk performance: " + stopwatch.taken() + "ms for " + messageCount + " messages"). }
false;public;0;6;;@Override public void configure() {     from("direct:startSimple").to("chunk://file").to("mock:endSimple"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:startSimple").to("chunk://file").to("mock:endSimple").         }     }. }
