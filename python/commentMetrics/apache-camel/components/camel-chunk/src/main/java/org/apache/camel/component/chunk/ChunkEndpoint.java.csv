commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public ExchangePattern getExchangePattern() {     return ExchangePattern.InOut. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return CHUNK_ENDPOINT_URI_PREFIX + getResourceUri(). }
false;public;0;5;;@Override public void clearContentCache() {     this.chunk = null.     super.clearContentCache(). }
false;protected;1;34;;@Override protected void onExchange(Exchange exchange) throws Exception {     boolean fromTemplate.     String newResourceUri = exchange.getIn().getHeader(CHUNK_RESOURCE_URI, String.class).     if (newResourceUri == null) {         String newTemplate = exchange.getIn().getHeader(CHUNK_TEMPLATE, String.class).         Chunk newChunk.         if (newTemplate == null) {             fromTemplate = false.             newChunk = getOrCreateChunk(theme, fromTemplate).         } else {             fromTemplate = true.             newChunk = createChunk(new StringReader(newTemplate), theme, fromTemplate).             exchange.getIn().removeHeader(CHUNK_TEMPLATE).         }         // Execute Chunk         Map<String, Object> variableMap = ExchangeHelper.createVariableMap(exchange).         StringWriter writer = new StringWriter().         newChunk.putAll(variableMap).         newChunk.render(writer).         writer.flush().         // Fill out message         Message out = exchange.getOut().         out.setBody(newChunk.toString()).         out.setHeaders(exchange.getIn().getHeaders()).         out.setAttachments(exchange.getIn().getAttachments()).     } else {         exchange.getIn().removeHeader(ChunkConstants.CHUNK_RESOURCE_URI).         ChunkEndpoint newEndpoint = getCamelContext().getEndpoint(CHUNK_ENDPOINT_URI_PREFIX + newResourceUri, ChunkEndpoint.class).         newEndpoint.onExchange(exchange).     } }
true;private;3;24;/**  * Create a Chunk template  *  * @param resourceReader Reader used to get template  * @param theme The theme  * @return Chunk  */ ;/**  * Create a Chunk template  *  * @param resourceReader Reader used to get template  * @param theme The theme  * @return Chunk  */ private Chunk createChunk(Reader resourceReader, Theme theme, boolean fromTemplate) throws IOException {     ClassLoader oldcl = Thread.currentThread().getContextClassLoader().     try {         ClassLoader apcl = getCamelContext().getApplicationContextClassLoader().         if (apcl != null) {             Thread.currentThread().setContextClassLoader(apcl).         }         Chunk newChunk.         if (fromTemplate) {             newChunk = theme.makeChunk().             String targetString = IOUtils.toString(resourceReader).             newChunk.append(targetString).         } else {             String targetString = IOUtils.toString(resourceReader).             newChunk = theme.makeChunk(targetString).         }         return newChunk.     } finally {         resourceReader.close().         if (oldcl != null) {             Thread.currentThread().setContextClassLoader(oldcl).         }     } }
false;private;2;6;;private Chunk getOrCreateChunk(Theme theme, boolean fromTemplate) throws IOException {     if (chunk == null) {         chunk = createChunk(new StringReader(getResourceUriExtended()), theme, fromTemplate).     }     return chunk. }
false;private;0;22;;private Theme getOrCreateTheme() throws IOException {     if (theme == null) {         if (themeFolder == null && themeSubfolder == null) {             theme = new Theme().         } else if (themeFolder != null && themeSubfolder == null) {             URL url = getCamelContext().getClassResolver().loadResourceAsURL(themeFolder).             theme = new Theme(url.getPath(), "").         } else {             URL url = getCamelContext().getClassResolver().loadResourceAsURL(themeFolder).             theme = new Theme(url.getPath(), themeSubfolder).         }         if (encoding != null) {             theme.setEncoding(encoding).         }         ClassLoader apcl = getCamelContext().getApplicationContextClassLoader().         if (apcl != null) {             theme.setJarContext(apcl).         }     }     return theme. }
false;public;0;9;;@Override public String getResourceUri() {     String uri = super.getResourceUri().     if (uri != null && (uri.startsWith("/") || uri.startsWith("\\"))) {         return uri.substring(1).     } else {         return uri.     } }
false;private;0;5;;private String getResourceUriExtended() throws IOException {     return themeLayer == null ? getResourceUri() : getResourceUri() + CHUNK_LAYER_SEPARATOR + themeLayer. }
false;public;0;3;;public String getEncoding() {     return encoding. }
false;public;1;3;;public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public String getThemeFolder() {     return themeFolder. }
false;public;1;3;;public void setThemeFolder(String themeFolder) {     this.themeFolder = themeFolder. }
false;public;0;3;;public String getThemeSubfolder() {     return themeSubfolder. }
false;public;1;3;;public void setThemeSubfolder(String themeSubfolder) {     this.themeSubfolder = themeSubfolder. }
false;public;0;3;;public String getThemeLayer() {     return themeLayer. }
false;public;1;3;;public void setThemeLayer(String themeLayer) {     this.themeLayer = themeLayer. }
false;public;0;3;;public String getExtension() {     return extension. }
false;public;1;3;;public void setExtension(String extension) {     this.extension = extension. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     if (theme == null) {         theme = getOrCreateTheme().     } }
false;protected;0;6;;@Override protected void doStop() throws Exception {     super.doStop(). // noop }
