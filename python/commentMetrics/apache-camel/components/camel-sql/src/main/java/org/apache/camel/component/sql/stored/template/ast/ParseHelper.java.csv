commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;30;;public static int parseSqlType(Token sqlTypeToken, ClassResolver classResolver) {     String sqlType = sqlTypeToken.toString().     // if number then use it(probably Vendor spesific SQL-type)     if (sqlTypeToken.kind == SSPTParserConstants.NUMBER) {         return Integer.valueOf(sqlType).     }     // if contains .     if (sqlType.contains(".")) {         String className.         String fieldName.         try {             className = sqlType.substring(0, sqlType.lastIndexOf(".")).             fieldName = sqlType.substring(sqlType.lastIndexOf(".") + 1).         } catch (Exception ex) {             throw new ParseRuntimeException("Failed to parse class.field:" + sqlType).         }         try {             Class clazz = classResolver.resolveMandatoryClass(className).             return getFieldInt(clazz, fieldName).         } catch (ClassNotFoundException e) {             throw new ParseRuntimeException("Class for " + className + " not found", e).         }     }     // Loop-up from "Standard" types     return getFieldInt(Types.class, sqlType). }
false;public,static;1;8;;public static Integer parseScale(Token token) {     try {         String str = token.toString().         return Integer.valueOf(str.substring(1, str.length() - 1)).     } catch (Exception ex) {         throw new ParseRuntimeException("Failed to parse scale from token:" + token.toString(), ex).     } }
false;private,static;2;11;;private static int getFieldInt(Class clazz, String sqlType) {     Field field = ReflectionUtils.findField(clazz, sqlType).     if (field == null) {         throw new ParseRuntimeException("Field " + sqlType + " not found from " + clazz.getName()).     }     try {         return field.getInt(Types.class).     } catch (IllegalAccessException e) {         throw new ParseRuntimeException(e).     } }
false;public,static;1;7;;public static String removeQuotes(String token) {     try {         return StringHelper.removeLeadingAndEndingQuotes(token).     } catch (Exception ex) {         throw new ParseRuntimeException("Failed to remove quotes from token:" + token, ex).     } }
