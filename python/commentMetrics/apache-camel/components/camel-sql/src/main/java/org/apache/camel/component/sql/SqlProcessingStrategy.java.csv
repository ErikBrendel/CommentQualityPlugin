commented;modifiers;parameterAmount;loc;comment;code
true;;5;1;/**  * Commit callback if there are a query to be run after processing.  *  * @param endpoint     the endpoint  * @param exchange     The exchange after it has been processed  * @param data         The original data delivered to the route  * @param jdbcTemplate The JDBC template  * @param query        The SQL query to execute  * @return the update count if the query returned an update count  * @throws Exception can be thrown in case of error  */ ;/**  * Commit callback if there are a query to be run after processing.  *  * @param endpoint     the endpoint  * @param exchange     The exchange after it has been processed  * @param data         The original data delivered to the route  * @param jdbcTemplate The JDBC template  * @param query        The SQL query to execute  * @return the update count if the query returned an update count  * @throws Exception can be thrown in case of error  */ int commit(DefaultSqlEndpoint endpoint, Exchange exchange, Object data, JdbcTemplate jdbcTemplate, String query) throws Exception.
true;;3;1;/**  * Commit callback when the batch is complete. This allows you to do one extra query after all rows has been processed in the batch.  *  * @param endpoint     the endpoint  * @param jdbcTemplate The JDBC template  * @param query        The SQL query to execute  * @return the update count if the query returned an update count  * @throws Exception can be thrown in case of error  */ ;/**  * Commit callback when the batch is complete. This allows you to do one extra query after all rows has been processed in the batch.  *  * @param endpoint     the endpoint  * @param jdbcTemplate The JDBC template  * @param query        The SQL query to execute  * @return the update count if the query returned an update count  * @throws Exception can be thrown in case of error  */ int commitBatchComplete(DefaultSqlEndpoint endpoint, JdbcTemplate jdbcTemplate, String query) throws Exception.
