commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;75;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     DataSource target = null.     // endpoint options overrule component configured datasource     DataSource ds = resolveAndRemoveReferenceParameter(parameters, "dataSource", DataSource.class).     if (ds != null) {         target = ds.     }     String dataSourceRef = getAndRemoveParameter(parameters, "dataSourceRef", String.class).     if (target == null && dataSourceRef != null) {         target = CamelContextHelper.mandatoryLookup(getCamelContext(), dataSourceRef, DataSource.class).     }     if (target == null) {         // fallback and use component         target = dataSource.     }     if (target == null) {         // check if the registry contains a single instance of DataSource         Set<DataSource> dataSources = getCamelContext().getRegistry().findByType(DataSource.class).         if (dataSources.size() > 1) {             throw new IllegalArgumentException("Multiple DataSources found in the registry and no explicit configuration provided").         } else if (dataSources.size() == 1) {             target = dataSources.stream().findFirst().orElse(null).         }     }     if (target == null) {         throw new IllegalArgumentException("DataSource must be configured").     }     log.debug("Using default DataSource discovered from registry: {}", target).     String parameterPlaceholderSubstitute = getAndRemoveParameter(parameters, "placeholder", String.class, "#").     JdbcTemplate jdbcTemplate = new JdbcTemplate(target).     Map<String, Object> templateOptions = IntrospectionSupport.extractProperties(parameters, "template.").     IntrospectionSupport.setProperties(jdbcTemplate, templateOptions).     String query = remaining.     if (usePlaceholder) {         query = query.replaceAll(parameterPlaceholderSubstitute, "?").     }     String onConsume = getAndRemoveParameter(parameters, "consumer.onConsume", String.class).     if (onConsume == null) {         onConsume = getAndRemoveParameter(parameters, "onConsume", String.class).     }     if (onConsume != null && usePlaceholder) {         onConsume = onConsume.replaceAll(parameterPlaceholderSubstitute, "?").     }     String onConsumeFailed = getAndRemoveParameter(parameters, "consumer.onConsumeFailed", String.class).     if (onConsumeFailed == null) {         onConsumeFailed = getAndRemoveParameter(parameters, "onConsumeFailed", String.class).     }     if (onConsumeFailed != null && usePlaceholder) {         onConsumeFailed = onConsumeFailed.replaceAll(parameterPlaceholderSubstitute, "?").     }     String onConsumeBatchComplete = getAndRemoveParameter(parameters, "consumer.onConsumeBatchComplete", String.class).     if (onConsumeBatchComplete == null) {         onConsumeBatchComplete = getAndRemoveParameter(parameters, "onConsumeBatchComplete", String.class).     }     if (onConsumeBatchComplete != null && usePlaceholder) {         onConsumeBatchComplete = onConsumeBatchComplete.replaceAll(parameterPlaceholderSubstitute, "?").     }     SqlEndpoint endpoint = new SqlEndpoint(uri, this, jdbcTemplate, query).     endpoint.setPlaceholder(parameterPlaceholderSubstitute).     endpoint.setUsePlaceholder(isUsePlaceholder()).     endpoint.setOnConsume(onConsume).     endpoint.setOnConsumeFailed(onConsumeFailed).     endpoint.setOnConsumeBatchComplete(onConsumeBatchComplete).     endpoint.setDataSource(ds).     endpoint.setDataSourceRef(dataSourceRef).     endpoint.setTemplateOptions(templateOptions).     return endpoint. }
true;public;1;3;/**  * Sets the DataSource to use to communicate with the database.  */ ;/**  * Sets the DataSource to use to communicate with the database.  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
false;public;0;3;;public DataSource getDataSource() {     return dataSource. }
true;public;1;3;/**  * Sets whether to use placeholder and replace all placeholder characters with ? sign in the SQL queries.  * <p/>  * This option is default <tt>true</tt>  */ ;/**  * Sets whether to use placeholder and replace all placeholder characters with ? sign in the SQL queries.  * <p/>  * This option is default <tt>true</tt>  */ public void setUsePlaceholder(boolean usePlaceholder) {     this.usePlaceholder = usePlaceholder. }
false;public;0;3;;public boolean isUsePlaceholder() {     return usePlaceholder. }
