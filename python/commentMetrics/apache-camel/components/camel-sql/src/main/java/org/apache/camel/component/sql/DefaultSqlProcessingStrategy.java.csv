commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {     int expected = ps.getParameterMetaData().getParameterCount().     Iterator<?> iterator = sqlPrepareStatementStrategy.createPopulateIterator(query, preparedQuery, expected, exchange, data).     if (iterator != null) {         sqlPrepareStatementStrategy.populateStatement(ps, iterator, expected).         LOG.trace("Execute query {}", query).         ps.execute().         int updateCount = ps.getUpdateCount().         if (LOG.isTraceEnabled()) {             LOG.trace("Update count {}", updateCount).         }         return updateCount.     }     return 0. }
false;public;5;26;;@Override public int commit(final DefaultSqlEndpoint endpoint, final Exchange exchange, final Object data, final JdbcTemplate jdbcTemplate, final String query) throws Exception {     final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(query, endpoint.isAllowNamedParameters(), exchange).     return jdbcTemplate.execute(preparedQuery, new PreparedStatementCallback<Integer>() {          public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {             int expected = ps.getParameterMetaData().getParameterCount().             Iterator<?> iterator = sqlPrepareStatementStrategy.createPopulateIterator(query, preparedQuery, expected, exchange, data).             if (iterator != null) {                 sqlPrepareStatementStrategy.populateStatement(ps, iterator, expected).                 LOG.trace("Execute query {}", query).                 ps.execute().                 int updateCount = ps.getUpdateCount().                 if (LOG.isTraceEnabled()) {                     LOG.trace("Update count {}", updateCount).                 }                 return updateCount.             }             return 0.         }     }). }
false;public;1;15;;public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {     int expected = ps.getParameterMetaData().getParameterCount().     if (expected != 0) {         throw new IllegalArgumentException("Query onConsumeBatchComplete " + query + " cannot have parameters, was " + expected).     }     LOG.trace("Execute query {}", query).     ps.execute().     int updateCount = ps.getUpdateCount().     if (LOG.isTraceEnabled()) {         LOG.trace("Update count {}", updateCount).     }     return updateCount. }
false;public;3;22;;@Override public int commitBatchComplete(final DefaultSqlEndpoint endpoint, final JdbcTemplate jdbcTemplate, final String query) throws Exception {     final String preparedQuery = sqlPrepareStatementStrategy.prepareQuery(query, endpoint.isAllowNamedParameters(), null).     return jdbcTemplate.execute(preparedQuery, new PreparedStatementCallback<Integer>() {          public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException {             int expected = ps.getParameterMetaData().getParameterCount().             if (expected != 0) {                 throw new IllegalArgumentException("Query onConsumeBatchComplete " + query + " cannot have parameters, was " + expected).             }             LOG.trace("Execute query {}", query).             ps.execute().             int updateCount = ps.getUpdateCount().             if (LOG.isTraceEnabled()) {                 LOG.trace("Update count {}", updateCount).             }             return updateCount.         }     }). }
