commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;1;1;/**  * Operation that returns the number of rows, if any, for the specified key  *  * @param key  the key  * @return int number of rows  */ ;/**  * Operation that returns the number of rows, if any, for the specified key  *  * @param key  the key  * @return int number of rows  */ protected abstract int queryForInt(String key).
true;protected,abstract;1;1;/**  * Operation that inserts the key if it does not already exist  *  * @param key  the key  * @return int number of rows inserted  */ ;/**  * Operation that inserts the key if it does not already exist  *  * @param key  the key  * @return int number of rows inserted  */ protected abstract int insert(String key).
true;protected,abstract;1;1;/**  * Operations that deletes the key if it exists  *  * @param key  the key  * @return int number of rows deleted  */ ;/**  * Operations that deletes the key if it exists  *  * @param key  the key  * @return int number of rows deleted  */ protected abstract int delete(String key).
true;protected,abstract;0;1;/**  * Operations that deletes all the rows  *  * @return int number of rows deleted  */ ;/**  * Operations that deletes all the rows  *  * @return int number of rows deleted  */ protected abstract int delete().
true;protected,static;1;6;/**  * Creates the transaction template  */ ;/**  * Creates the transaction template  */ protected static TransactionTemplate createTransactionTemplate(DataSource dataSource) {     TransactionTemplate transactionTemplate = new TransactionTemplate().     transactionTemplate.setTransactionManager(new DataSourceTransactionManager(dataSource)).     transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED).     return transactionTemplate. }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
false;public;1;9;;public Boolean doInTransaction(TransactionStatus status) {     int count = queryForInt(key).     if (count == 0) {         insert(key).         return Boolean.TRUE.     } else {         return Boolean.FALSE.     } }
false;public;1;17;;@ManagedOperation(description = "Adds the key to the store") @Override public boolean add(final String key) {     // Run this in single transaction.     Boolean rc = transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             int count = queryForInt(key).             if (count == 0) {                 insert(key).                 return Boolean.TRUE.             } else {                 return Boolean.FALSE.             }         }     }).     return rc.booleanValue(). }
false;public;1;8;;public Boolean doInTransaction(TransactionStatus status) {     int count = queryForInt(key).     if (count == 0) {         return Boolean.FALSE.     } else {         return Boolean.TRUE.     } }
false;public;1;17;;@ManagedOperation(description = "Does the store contain the given key") @Override public boolean contains(final String key) {     // Run this in single transaction.     Boolean rc = transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             int count = queryForInt(key).             if (count == 0) {                 return Boolean.FALSE.             } else {                 return Boolean.TRUE.             }         }     }).     return rc.booleanValue(). }
false;public;1;8;;public Boolean doInTransaction(TransactionStatus status) {     int updateCount = delete(key).     if (updateCount == 0) {         return Boolean.FALSE.     } else {         return Boolean.TRUE.     } }
false;public;1;15;;@ManagedOperation(description = "Remove the key from the store") @Override public boolean remove(final String key) {     Boolean rc = transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             int updateCount = delete(key).             if (updateCount == 0) {                 return Boolean.FALSE.             } else {                 return Boolean.TRUE.             }         }     }).     return rc.booleanValue(). }
false;public;1;4;;public Boolean doInTransaction(TransactionStatus status) {     delete().     return Boolean.TRUE. }
false;public;0;10;;@ManagedOperation(description = "Clear the store") @Override public void clear() {     transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             delete().             return Boolean.TRUE.         }     }). }
false;public;1;4;;@Override public boolean confirm(final String key) {     return true. }
false;public;0;3;;public JdbcTemplate getJdbcTemplate() {     return jdbcTemplate. }
false;public;1;3;;public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {     this.jdbcTemplate = jdbcTemplate. }
false;public;0;3;;public String getProcessorName() {     return processorName. }
false;public;1;3;;public void setProcessorName(String processorName) {     this.processorName = processorName. }
false;public;0;3;;public TransactionTemplate getTransactionTemplate() {     return transactionTemplate. }
false;public;1;3;;public void setTransactionTemplate(TransactionTemplate transactionTemplate) {     this.transactionTemplate = transactionTemplate. }
false;public;0;3;;public DataSource getDataSource() {     return dataSource. }
false;public;1;3;;public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
