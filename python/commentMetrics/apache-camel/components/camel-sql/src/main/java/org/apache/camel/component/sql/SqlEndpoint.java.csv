# id;timestamp;commentText;codeText;commentWords;codeWords
SqlEndpoint -> public void setParametersCount(int parametersCount);1415363121;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1415625101;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1416561667;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1418046467;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1418711620;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1423557047;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1425148387;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1425581084;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1427402378;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1430295991;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1436689817;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1442848969;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1444035293;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setParametersCount(int parametersCount);1444035293;If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API._This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.;public void setParametersCount(int parametersCount) {_        this.parametersCount = parametersCount__    };if,set,greater,than,zero,then,camel,will,use,this,count,value,of,parameters,to,replace,instead,of,querying,via,jdbc,metadata,api,this,is,useful,if,the,jdbc,vendor,could,not,return,correct,parameters,count,then,user,may,override,instead;public,void,set,parameters,count,int,parameters,count,this,parameters,count,parameters,count
SqlEndpoint -> public void setDataSource(DataSource dataSource);1423557047;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1425148387;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1425581084;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1427402378;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1430295991;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1436689817;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1442848969;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1444035293;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setDataSource(DataSource dataSource);1444035293;Sets the DataSource to use to communicate with the database.;public void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource__    };sets,the,data,source,to,use,to,communicate,with,the,database;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1415363121;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1415625101;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1416561667;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1418046467;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1418711620;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1423557047;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1425148387;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1425581084;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1427402378;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1430295991;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1436689817;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1442848969;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1444035293;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setOnConsumeBatchComplete(String onConsumeBatchComplete);1444035293;After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.;public void setOnConsumeBatchComplete(String onConsumeBatchComplete) {_        this.onConsumeBatchComplete = onConsumeBatchComplete__    };after,processing,the,entire,batch,this,query,can,be,executed,to,bulk,update,rows,etc,the,query,cannot,have,parameters;public,void,set,on,consume,batch,complete,string,on,consume,batch,complete,this,on,consume,batch,complete,on,consume,batch,complete
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1366703540;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1368004799;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1370267280;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1375867003;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1377011702;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1377538211;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1415363121;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1415625101;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1416561667;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1418046467;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1418711620;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1423557047;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1425148387;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1425581084;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1427402378;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1430295991;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1436689817;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1442848969;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1444035293;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1444035293;Sets the maximum number of messages to poll;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };sets,the,maximum,number,of,messages,to,poll;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
SqlEndpoint -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1442848969;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
SqlEndpoint -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1444035293;Sets whether empty resultset should be allowed to be sent to the next hop._defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
SqlEndpoint -> public void setRouteEmptyResultSet(boolean routeEmptyResultSet);1444035293;Sets whether empty resultset should be allowed to be sent to the next hop._Defaults to false. So the empty resultset will be filtered out.;public void setRouteEmptyResultSet(boolean routeEmptyResultSet) {_        this.routeEmptyResultSet = routeEmptyResultSet__    };sets,whether,empty,resultset,should,be,allowed,to,be,sent,to,the,next,hop,defaults,to,false,so,the,empty,resultset,will,be,filtered,out;public,void,set,route,empty,result,set,boolean,route,empty,result,set,this,route,empty,result,set,route,empty,result,set
SqlEndpoint -> public void setExpectedUpdateCount(int expectedUpdateCount);1442848969;Sets an expected update count to validate when using onConsume.;public void setExpectedUpdateCount(int expectedUpdateCount) {_        this.expectedUpdateCount = expectedUpdateCount__    };sets,an,expected,update,count,to,validate,when,using,on,consume;public,void,set,expected,update,count,int,expected,update,count,this,expected,update,count,expected,update,count
SqlEndpoint -> public void setExpectedUpdateCount(int expectedUpdateCount);1444035293;Sets an expected update count to validate when using onConsume.;public void setExpectedUpdateCount(int expectedUpdateCount) {_        this.expectedUpdateCount = expectedUpdateCount__    };sets,an,expected,update,count,to,validate,when,using,on,consume;public,void,set,expected,update,count,int,expected,update,count,this,expected,update,count,expected,update,count
SqlEndpoint -> public void setExpectedUpdateCount(int expectedUpdateCount);1444035293;Sets an expected update count to validate when using onConsume.;public void setExpectedUpdateCount(int expectedUpdateCount) {_        this.expectedUpdateCount = expectedUpdateCount__    };sets,an,expected,update,count,to,validate,when,using,on,consume;public,void,set,expected,update,count,int,expected,update,count,this,expected,update,count,expected,update,count
SqlEndpoint -> public void setOutputClass(String outputClass);1415363121;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1415625101;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1416561667;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1418046467;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1418711620;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1423557047;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1425148387;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1425581084;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1427402378;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1430295991;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1436689817;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1442848969;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1444035293;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setOutputClass(String outputClass);1444035293;Specify the full package and class name to use as conversion when outputType=SelectOne.;public void setOutputClass(String outputClass) {_        this.outputClass = outputClass__    };specify,the,full,package,and,class,name,to,use,as,conversion,when,output,type,select,one;public,void,set,output,class,string,output,class,this,output,class,output,class
SqlEndpoint -> public void setBatch(boolean batch);1366703540;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1368004799;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1370267280;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1375867003;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1377011702;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1377538211;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1415363121;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1415625101;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1416561667;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1418046467;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1418711620;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1423557047;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1425148387;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1425581084;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1427402378;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1430295991;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1436689817;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1442848969;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1444035293;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setBatch(boolean batch);1444035293;Enables or disables batch mode;public void setBatch(boolean batch) {_        this.batch = batch__    };enables,or,disables,batch,mode;public,void,set,batch,boolean,batch,this,batch,batch
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1415363121;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1415625101;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1416561667;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1418046467;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1418711620;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1423557047;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1425148387;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1425581084;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1427402378;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1430295991;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1436689817;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1442848969;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1444035293;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy);1444035293;Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.;public void setPrepareStatementStrategy(SqlPrepareStatementStrategy prepareStatementStrategy) {_        this.prepareStatementStrategy = prepareStatementStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,prepare,statement,strategy,to,control,preparation,of,the,query,and,prepared,statement;public,void,set,prepare,statement,strategy,sql,prepare,statement,strategy,prepare,statement,strategy,this,prepare,statement,strategy,prepare,statement,strategy
SqlEndpoint -> public void setOutputHeader(String outputHeader);1418711620;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1423557047;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1425148387;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1425581084;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1427402378;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1430295991;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1436689817;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1442848969;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1444035293;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setOutputHeader(String outputHeader);1444035293;Store the query result in a header instead of the message body._By default, outputHeader == null and the query result is stored in the message body,_any existing content in the message body is discarded._If outputHeader is set, the value is used as the name of the header to store the_query result and the original message body is preserved.;public void setOutputHeader(String outputHeader) {_        this.outputHeader = outputHeader__    };store,the,query,result,in,a,header,instead,of,the,message,body,by,default,output,header,null,and,the,query,result,is,stored,in,the,message,body,any,existing,content,in,the,message,body,is,discarded,if,output,header,is,set,the,value,is,used,as,the,name,of,the,header,to,store,the,query,result,and,the,original,message,body,is,preserved;public,void,set,output,header,string,output,header,this,output,header,output,header
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1415363121;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1415625101;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1416561667;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1418046467;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1418711620;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1423557047;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1425148387;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1425581084;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1427402378;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1430295991;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1436689817;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1442848969;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1444035293;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setProcessingStrategy(SqlProcessingStrategy processingStrategy);1444035293;Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.;public void setProcessingStrategy(SqlProcessingStrategy processingStrategy) {_        this.processingStrategy = processingStrategy__    };allows,to,plugin,to,use,a,custom,org,apache,camel,component,sql,sql,processing,strategy,to,execute,queries,when,the,consumer,has,processed,the,rows,batch;public,void,set,processing,strategy,sql,processing,strategy,processing,strategy,this,processing,strategy,processing,strategy
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1415363121;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1415625101;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1416561667;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1418046467;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1418711620;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1423557047;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1425148387;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1425581084;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1427402378;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1430295991;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1436689817;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1442848969;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1444035293;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement);1444035293;If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked,_also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there_is 1 or more expected parameters to be set_ for example this avoids reading the message body/headers for SQL queries with no parameters.;public void setAlwaysPopulateStatement(boolean alwaysPopulateStatement) {_        this.alwaysPopulateStatement = alwaysPopulateStatement__    };if,enabled,then,the,populate,statement,method,from,org,apache,camel,component,sql,sql,prepare,statement,strategy,is,always,invoked,also,if,there,is,no,expected,parameters,to,be,prepared,when,this,is,false,then,the,populate,statement,is,only,invoked,if,there,is,1,or,more,expected,parameters,to,be,set,for,example,this,avoids,reading,the,message,body,headers,for,sql,queries,with,no,parameters;public,void,set,always,populate,statement,boolean,always,populate,statement,this,always,populate,statement,always,populate,statement
SqlEndpoint -> public void setBreakBatchOnConsumeFail(boolean breakBatchOnConsumeFail);1442848969;Sets whether to break batch if onConsume failed.;public void setBreakBatchOnConsumeFail(boolean breakBatchOnConsumeFail) {_        this.breakBatchOnConsumeFail = breakBatchOnConsumeFail__    };sets,whether,to,break,batch,if,on,consume,failed;public,void,set,break,batch,on,consume,fail,boolean,break,batch,on,consume,fail,this,break,batch,on,consume,fail,break,batch,on,consume,fail
SqlEndpoint -> public void setBreakBatchOnConsumeFail(boolean breakBatchOnConsumeFail);1444035293;Sets whether to break batch if onConsume failed.;public void setBreakBatchOnConsumeFail(boolean breakBatchOnConsumeFail) {_        this.breakBatchOnConsumeFail = breakBatchOnConsumeFail__    };sets,whether,to,break,batch,if,on,consume,failed;public,void,set,break,batch,on,consume,fail,boolean,break,batch,on,consume,fail,this,break,batch,on,consume,fail,break,batch,on,consume,fail
SqlEndpoint -> public void setBreakBatchOnConsumeFail(boolean breakBatchOnConsumeFail);1444035293;Sets whether to break batch if onConsume failed.;public void setBreakBatchOnConsumeFail(boolean breakBatchOnConsumeFail) {_        this.breakBatchOnConsumeFail = breakBatchOnConsumeFail__    };sets,whether,to,break,batch,if,on,consume,failed;public,void,set,break,batch,on,consume,fail,boolean,break,batch,on,consume,fail,this,break,batch,on,consume,fail,break,batch,on,consume,fail
SqlEndpoint -> public void setUseIterator(boolean useIterator);1442848969;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
SqlEndpoint -> public void setUseIterator(boolean useIterator);1444035293;Sets how resultset should be delivered to route._Indicates delivery as either a list or individual object._defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
SqlEndpoint -> public void setUseIterator(boolean useIterator);1444035293;Sets how resultset should be delivered to route. Indicates delivery as either a list or individual object. defaults to true.;public void setUseIterator(boolean useIterator) {_        this.useIterator = useIterator__    };sets,how,resultset,should,be,delivered,to,route,indicates,delivery,as,either,a,list,or,individual,object,defaults,to,true;public,void,set,use,iterator,boolean,use,iterator,this,use,iterator,use,iterator
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1415363121;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1415625101;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1416561667;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1418046467;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1418711620;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1423557047;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1425148387;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1425581084;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1427402378;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1430295991;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1436689817;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1442848969;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1444035293;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setOnConsumeFailed(String onConsumeFailed);1444035293;After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.;public void setOnConsumeFailed(String onConsumeFailed) {_        this.onConsumeFailed = onConsumeFailed__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,failed,for,example,to,mark,the,row,as,failed,the,query,can,have,parameter;public,void,set,on,consume,failed,string,on,consume,failed,this,on,consume,failed,on,consume,failed
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1415363121;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1415625101;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1416561667;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1418046467;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1418711620;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1423557047;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1425148387;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1425581084;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1427402378;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1430295991;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1436689817;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1442848969;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1444035293;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setAllowNamedParameters(boolean allowNamedParameters);1444035293;Whether to allow using named parameters in the queries.;public void setAllowNamedParameters(boolean allowNamedParameters) {_        this.allowNamedParameters = allowNamedParameters__    };whether,to,allow,using,named,parameters,in,the,queries;public,void,set,allow,named,parameters,boolean,allow,named,parameters,this,allow,named,parameters,allow,named,parameters
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1415363121;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names. It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1415625101;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1416561667;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1418046467;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1418711620;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1423557047;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1425148387;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1425581084;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1427402378;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1430295991;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1436689817;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1442848969;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1444035293;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setOutputType(SqlOutputType outputType);1444035293;Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way:_a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( * ) FROM PROJECT will return a Long object._b) If the query has more than one column, then it will return a Map of that result._c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names._It will assume your class has a default constructor to create instance with._d) If the query resulted in more than one rows, it throws an non-unique result exception.;public void setOutputType(SqlOutputType outputType) {_        this.outputType = outputType__    };make,the,output,of,consumer,or,producer,to,select,list,as,list,of,map,or,select,one,as,single,java,object,in,the,following,way,a,if,the,query,has,only,single,column,then,that,jdbc,column,object,is,returned,such,as,select,count,from,project,will,return,a,long,object,b,if,the,query,has,more,than,one,column,then,it,will,return,a,map,of,that,result,c,if,the,output,class,is,set,then,it,will,convert,the,query,result,into,an,java,bean,object,by,calling,all,the,setters,that,match,the,column,names,it,will,assume,your,class,has,a,default,constructor,to,create,instance,with,d,if,the,query,resulted,in,more,than,one,rows,it,throws,an,non,unique,result,exception;public,void,set,output,type,sql,output,type,output,type,this,output,type,output,type
SqlEndpoint -> public void setUseMessageBodyForSql(boolean useMessageBodyForSql);1436689817;Whether to use the message body as the SQL and then headers for parameters._<p/>_If this option is enabled then the SQL in the uri is not used.;public void setUseMessageBodyForSql(boolean useMessageBodyForSql) {_        this.useMessageBodyForSql = useMessageBodyForSql__    };whether,to,use,the,message,body,as,the,sql,and,then,headers,for,parameters,p,if,this,option,is,enabled,then,the,sql,in,the,uri,is,not,used;public,void,set,use,message,body,for,sql,boolean,use,message,body,for,sql,this,use,message,body,for,sql,use,message,body,for,sql
SqlEndpoint -> public void setUseMessageBodyForSql(boolean useMessageBodyForSql);1442848969;Whether to use the message body as the SQL and then headers for parameters._<p/>_If this option is enabled then the SQL in the uri is not used.;public void setUseMessageBodyForSql(boolean useMessageBodyForSql) {_        this.useMessageBodyForSql = useMessageBodyForSql__    };whether,to,use,the,message,body,as,the,sql,and,then,headers,for,parameters,p,if,this,option,is,enabled,then,the,sql,in,the,uri,is,not,used;public,void,set,use,message,body,for,sql,boolean,use,message,body,for,sql,this,use,message,body,for,sql,use,message,body,for,sql
SqlEndpoint -> public void setUseMessageBodyForSql(boolean useMessageBodyForSql);1444035293;Whether to use the message body as the SQL and then headers for parameters._<p/>_If this option is enabled then the SQL in the uri is not used.;public void setUseMessageBodyForSql(boolean useMessageBodyForSql) {_        this.useMessageBodyForSql = useMessageBodyForSql__    };whether,to,use,the,message,body,as,the,sql,and,then,headers,for,parameters,p,if,this,option,is,enabled,then,the,sql,in,the,uri,is,not,used;public,void,set,use,message,body,for,sql,boolean,use,message,body,for,sql,this,use,message,body,for,sql,use,message,body,for,sql
SqlEndpoint -> public void setUseMessageBodyForSql(boolean useMessageBodyForSql);1444035293;Whether to use the message body as the SQL and then headers for parameters._<p/>_If this option is enabled then the SQL in the uri is not used.;public void setUseMessageBodyForSql(boolean useMessageBodyForSql) {_        this.useMessageBodyForSql = useMessageBodyForSql__    };whether,to,use,the,message,body,as,the,sql,and,then,headers,for,parameters,p,if,this,option,is,enabled,then,the,sql,in,the,uri,is,not,used;public,void,set,use,message,body,for,sql,boolean,use,message,body,for,sql,this,use,message,body,for,sql,use,message,body,for,sql
SqlEndpoint -> public void setNoop(boolean noop);1415363121;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1415625101;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1416561667;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1418046467;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1418711620;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1423557047;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1425148387;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1425581084;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1427402378;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1430295991;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1436689817;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1442848969;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1444035293;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setNoop(boolean noop);1444035293;If set, will ignore the results of the SQL query and use the existing IN message as the OUT message for the continuation of processing;public void setNoop(boolean noop) {_        this.noop = noop__    };if,set,will,ignore,the,results,of,the,sql,query,and,use,the,existing,in,message,as,the,out,message,for,the,continuation,of,processing;public,void,set,noop,boolean,noop,this,noop,noop
SqlEndpoint -> public void setOnConsume(String onConsume);1415363121;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1415625101;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1416561667;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1418046467;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1418711620;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1423557047;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1425148387;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1425581084;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1427402378;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1430295991;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1436689817;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1442848969;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1444035293;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setOnConsume(String onConsume);1444035293;After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.;public void setOnConsume(String onConsume) {_        this.onConsume = onConsume__    };after,processing,each,row,then,this,query,can,be,executed,if,the,exchange,was,processed,successfully,for,example,to,mark,the,row,as,processed,the,query,can,have,parameter;public,void,set,on,consume,string,on,consume,this,on,consume,on,consume
SqlEndpoint -> public void setQuery(String query);1366703540;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1368004799;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1370267280;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1375867003;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1377011702;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1377538211;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1415363121;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1415625101;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1416561667;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1418046467;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1418711620;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1423557047;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1425148387;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1425581084;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1427402378;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1430295991;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1436689817;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1442848969;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1444035293;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1444035293;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1444035294;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1451237129;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1452333585;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1452333586;Sets the SQL query to perform;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1455881258;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1476262266;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1478942311;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1486028039;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1534345543;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1547240981;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setQuery(String query);1547480087;Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.;public void setQuery(String query) {_        this.query = query__    };sets,the,sql,query,to,perform,you,can,externalize,the,query,by,using,file,or,classpath,as,prefix,and,specify,the,location,of,the,file;public,void,set,query,string,query,this,query,query
SqlEndpoint -> public void setSeparator(char separator);1415363121;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1415625101;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1416561667;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1418046467;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1418711620;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1423557047;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1425148387;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1425581084;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1427402378;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1430295991;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1436689817;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1442848969;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1444035293;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setSeparator(char separator);1444035293;The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders._Notice if you use named parameters, then a Map type is used instead._<p/>_The default value is ,;public void setSeparator(char separator) {_        this.separator = separator__    };the,separator,to,use,when,parameter,values,is,taken,from,message,body,if,the,body,is,a,string,type,to,be,inserted,at,placeholders,notice,if,you,use,named,parameters,then,a,map,type,is,used,instead,p,the,default,value,is;public,void,set,separator,char,separator,this,separator,separator
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1423557047;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1425148387;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1425581084;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1427402378;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1430295991;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1436689817;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1442848969;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1444035293;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
SqlEndpoint -> public void setDataSourceRef(String dataSourceRef);1444035293;Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.;public void setDataSourceRef(String dataSourceRef) {_        this.dataSourceRef = dataSourceRef__    };sets,the,reference,to,a,data,source,to,lookup,from,the,registry,to,use,for,communicating,with,the,database;public,void,set,data,source,ref,string,data,source,ref,this,data,source,ref,data,source,ref
