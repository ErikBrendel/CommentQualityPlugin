commented;modifiers;parameterAmount;loc;comment;code
false;public;1;25;;@Override public boolean isOptimisticLocking(Exception cause) {     Iterator<Throwable> it = ObjectHelper.createExceptionIterator(cause).     while (it.hasNext()) {         Throwable throwable = it.next().         // if its a SQL exception         if (throwable instanceof SQLException) {             SQLException se = (SQLException) throwable.             if (isConstraintViolation(se)) {                 return true.             }         }         if (throwable instanceof DataIntegrityViolationException) {             return true.         }         // fallback to names         String name = throwable.getClass().getName().         if (name.contains("ConstraintViolation") || hasClassName(name)) {             return true.         }     }     return false. }
false;public,static;1;3;;public static boolean isConstraintViolation(SQLException e) {     return e.getSQLState().startsWith("23"). }
false;private;1;8;;private boolean hasClassName(String name) {     for (String className : classNames) {         if (className.equals(name)) {             return true.         }     }     return false. }
false;public;1;3;;public void addClassName(String name) {     classNames.add(name). }
false;public;1;4;;public void setClassNames(Set<String> names) {     classNames.clear().     classNames.addAll(names). }
