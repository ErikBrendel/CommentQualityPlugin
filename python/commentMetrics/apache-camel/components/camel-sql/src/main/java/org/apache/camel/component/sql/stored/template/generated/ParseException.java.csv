# id;timestamp;commentText;codeText;commentWords;codeWords
ParseException -> static String add_escapes(String str);1452335256;Used to convert raw characters to their escaped version_when these raw version cannot be used as part of an ASCII_string literal.;static String add_escapes(String str) {_      StringBuffer retval = new StringBuffer()__      char ch__      for (int i = 0_ i < str.length()_ i++) {_        switch (str.charAt(i))_        {_           case 0 :_              continue__           case '\b':_              retval.append("\\b")__              continue__           case '\t':_              retval.append("\\t")__              continue__           case '\n':_              retval.append("\\n")__              continue__           case '\f':_              retval.append("\\f")__              continue__           case '\r':_              retval.append("\\r")__              continue__           case '\"':_              retval.append("\\\"")__              continue__           case '\'':_              retval.append("\\\'")__              continue__           case '\\':_              retval.append("\\\\")__              continue__           default:_              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                 String s = "0000" + Integer.toString(ch, 16)__                 retval.append("\\u" + s.substring(s.length() - 4, s.length()))__              } else {_                 retval.append(ch)__              }_              continue__        }_      }_      return retval.toString()__   };used,to,convert,raw,characters,to,their,escaped,version,when,these,raw,version,cannot,be,used,as,part,of,an,ascii,string,literal;static,string,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
ParseException -> static String add_escapes(String str);1452789249;Used to convert raw characters to their escaped version_when these raw version cannot be used as part of an ASCII_string literal.;static String add_escapes(String str) {_        StringBuffer retval = new StringBuffer()__        char ch__        for (int i = 0_ i < str.length()_ i++) {_            switch (str.charAt(i)) {_                case 0:_                    continue__                case '\b':_                    retval.append("\\b")__                    continue__                case '\t':_                    retval.append("\\t")__                    continue__                case '\n':_                    retval.append("\\n")__                    continue__                case '\f':_                    retval.append("\\f")__                    continue__                case '\r':_                    retval.append("\\r")__                    continue__                case '\"':_                    retval.append("\\\"")__                    continue__                case '\'':_                    retval.append("\\\'")__                    continue__                case '\\':_                    retval.append("\\\\")__                    continue__                default:_                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                        String s = "0000" + Integer.toString(ch, 16)__                        retval.append("\\u" + s.substring(s.length() - 4, s.length()))__                    } else {_                        retval.append(ch)__                    }_                    continue__            }_        }_        return retval.toString()__    };used,to,convert,raw,characters,to,their,escaped,version,when,these,raw,version,cannot,be,used,as,part,of,an,ascii,string,literal;static,string,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
ParseException -> static String add_escapes(String str);1482077787;Used to convert raw characters to their escaped version_when these raw version cannot be used as part of an ASCII_string literal.;static String add_escapes(String str) {_        StringBuffer retval = new StringBuffer()__        char ch__        for (int i = 0_ i < str.length()_ i++) {_            switch (str.charAt(i)) {_                case 0:_                    continue__                case '\b':_                    retval.append("\\b")__                    continue__                case '\t':_                    retval.append("\\t")__                    continue__                case '\n':_                    retval.append("\\n")__                    continue__                case '\f':_                    retval.append("\\f")__                    continue__                case '\r':_                    retval.append("\\r")__                    continue__                case '\"':_                    retval.append("\\\"")__                    continue__                case '\'':_                    retval.append("\\\'")__                    continue__                case '\\':_                    retval.append("\\\\")__                    continue__                default:_                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                        String s = "0000" + Integer.toString(ch, 16)__                        retval.append("\\u" + s.substring(s.length() - 4, s.length()))__                    } else {_                        retval.append(ch)__                    }_                    continue__            }_        }_        return retval.toString()__    };used,to,convert,raw,characters,to,their,escaped,version,when,these,raw,version,cannot,be,used,as,part,of,an,ascii,string,literal;static,string,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
ParseException -> static String add_escapes(String str);1507796188;Used to convert raw characters to their escaped version_when these raw version cannot be used as part of an ASCII_string literal.;static String add_escapes(String str) {_        StringBuffer retval = new StringBuffer()__        char ch__        for (int i = 0_ i < str.length()_ i++) {_            switch (str.charAt(i)) {_                case 0:_                    continue__                case '\b':_                    retval.append("\\b")__                    continue__                case '\t':_                    retval.append("\\t")__                    continue__                case '\n':_                    retval.append("\\n")__                    continue__                case '\f':_                    retval.append("\\f")__                    continue__                case '\r':_                    retval.append("\\r")__                    continue__                case '\"':_                    retval.append("\\\"")__                    continue__                case '\'':_                    retval.append("\\\'")__                    continue__                case '\\':_                    retval.append("\\\\")__                    continue__                default:_                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                        String s = "0000" + Integer.toString(ch, 16)__                        retval.append("\\u" + s.substring(s.length() - 4, s.length()))__                    } else {_                        retval.append(ch)__                    }_                    continue__            }_        }_        return retval.toString()__    };used,to,convert,raw,characters,to,their,escaped,version,when,these,raw,version,cannot,be,used,as,part,of,an,ascii,string,literal;static,string,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
ParseException -> static String add_escapes(String str);1518162420;Used to convert raw characters to their escaped version_when these raw version cannot be used as part of an ASCII_string literal.;static String add_escapes(String str) {_      StringBuffer retval = new StringBuffer()__      char ch__      for (int i = 0_ i < str.length()_ i++) {_        switch (str.charAt(i))_        {_           case 0 :_              continue__           case '\b':_              retval.append("\\b")__              continue__           case '\t':_              retval.append("\\t")__              continue__           case '\n':_              retval.append("\\n")__              continue__           case '\f':_              retval.append("\\f")__              continue__           case '\r':_              retval.append("\\r")__              continue__           case '\"':_              retval.append("\\\"")__              continue__           case '\'':_              retval.append("\\\'")__              continue__           case '\\':_              retval.append("\\\\")__              continue__           default:_              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                 String s = "0000" + Integer.toString(ch, 16)__                 retval.append("\\u" + s.substring(s.length() - 4, s.length()))__              } else {_                 retval.append(ch)__              }_              continue__        }_      }_      return retval.toString()__   };used,to,convert,raw,characters,to,their,escaped,version,when,these,raw,version,cannot,be,used,as,part,of,an,ascii,string,literal;static,string,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
ParseException -> static String add_escapes(String str);1524168259;Used to convert raw characters to their escaped version_when these raw version cannot be used as part of an ASCII_string literal.;static String add_escapes(String str) {_      StringBuffer retval = new StringBuffer()__      char ch__      for (int i = 0_ i < str.length()_ i++) {_        switch (str.charAt(i))_        {_           case 0 :_              continue__           case '\b':_              retval.append("\\b")__              continue__           case '\t':_              retval.append("\\t")__              continue__           case '\n':_              retval.append("\\n")__              continue__           case '\f':_              retval.append("\\f")__              continue__           case '\r':_              retval.append("\\r")__              continue__           case '\"':_              retval.append("\\\"")__              continue__           case '\'':_              retval.append("\\\'")__              continue__           case '\\':_              retval.append("\\\\")__              continue__           default:_              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                 String s = "0000" + Integer.toString(ch, 16)__                 retval.append("\\u" + s.substring(s.length() - 4, s.length()))__              } else {_                 retval.append(ch)__              }_              continue__        }_      }_      return retval.toString()__   };used,to,convert,raw,characters,to,their,escaped,version,when,these,raw,version,cannot,be,used,as,part,of,an,ascii,string,literal;static,string,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
ParseException -> public ParseException(Token currentTokenVal,                           int[][] expectedTokenSequencesVal,                           String[] tokenImageVal     );1452789249;This constructor is used by the method "generateParseException"_in the generated parser.  Calling this constructor generates_a new object of this type with the fields "currentToken",_"expectedTokenSequences", and "tokenImage" set.;public ParseException(Token currentTokenVal,_                          int[][] expectedTokenSequencesVal,_                          String[] tokenImageVal_    ) {_        super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))__        currentToken = currentTokenVal__        expectedTokenSequences = expectedTokenSequencesVal__        tokenImage = tokenImageVal__    };this,constructor,is,used,by,the,method,generate,parse,exception,in,the,generated,parser,calling,this,constructor,generates,a,new,object,of,this,type,with,the,fields,current,token,expected,token,sequences,and,token,image,set;public,parse,exception,token,current,token,val,int,expected,token,sequences,val,string,token,image,val,super,initialise,current,token,val,expected,token,sequences,val,token,image,val,current,token,current,token,val,expected,token,sequences,expected,token,sequences,val,token,image,token,image,val
ParseException -> public ParseException(Token currentTokenVal,                           int[][] expectedTokenSequencesVal,                           String[] tokenImageVal     );1482077787;This constructor is used by the method "generateParseException"_in the generated parser.  Calling this constructor generates_a new object of this type with the fields "currentToken",_"expectedTokenSequences", and "tokenImage" set.;public ParseException(Token currentTokenVal,_                          int[][] expectedTokenSequencesVal,_                          String[] tokenImageVal_    ) {_        super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))__        currentToken = currentTokenVal__        expectedTokenSequences = expectedTokenSequencesVal__        tokenImage = tokenImageVal__    };this,constructor,is,used,by,the,method,generate,parse,exception,in,the,generated,parser,calling,this,constructor,generates,a,new,object,of,this,type,with,the,fields,current,token,expected,token,sequences,and,token,image,set;public,parse,exception,token,current,token,val,int,expected,token,sequences,val,string,token,image,val,super,initialise,current,token,val,expected,token,sequences,val,token,image,val,current,token,current,token,val,expected,token,sequences,expected,token,sequences,val,token,image,token,image,val
ParseException -> public ParseException(Token currentTokenVal,                           int[][] expectedTokenSequencesVal,                           String[] tokenImageVal     );1507796188;This constructor is used by the method "generateParseException"_in the generated parser.  Calling this constructor generates_a new object of this type with the fields "currentToken",_"expectedTokenSequences", and "tokenImage" set.;public ParseException(Token currentTokenVal,_                          int[][] expectedTokenSequencesVal,_                          String[] tokenImageVal_    ) {_        super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))__        currentToken = currentTokenVal__        expectedTokenSequences = expectedTokenSequencesVal__        tokenImage = tokenImageVal__    };this,constructor,is,used,by,the,method,generate,parse,exception,in,the,generated,parser,calling,this,constructor,generates,a,new,object,of,this,type,with,the,fields,current,token,expected,token,sequences,and,token,image,set;public,parse,exception,token,current,token,val,int,expected,token,sequences,val,string,token,image,val,super,initialise,current,token,val,expected,token,sequences,val,token,image,val,current,token,current,token,val,expected,token,sequences,expected,token,sequences,val,token,image,token,image,val
ParseException -> public ParseException(Token currentTokenVal,                         int[][] expectedTokenSequencesVal,                         String[] tokenImageVal                        );1452335256;This constructor is used by the method "generateParseException"_in the generated parser.  Calling this constructor generates_a new object of this type with the fields "currentToken",_"expectedTokenSequences", and "tokenImage" set.;public ParseException(Token currentTokenVal,_                        int[][] expectedTokenSequencesVal,_                        String[] tokenImageVal_                       )_  {_    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))__    currentToken = currentTokenVal__    expectedTokenSequences = expectedTokenSequencesVal__    tokenImage = tokenImageVal__  };this,constructor,is,used,by,the,method,generate,parse,exception,in,the,generated,parser,calling,this,constructor,generates,a,new,object,of,this,type,with,the,fields,current,token,expected,token,sequences,and,token,image,set;public,parse,exception,token,current,token,val,int,expected,token,sequences,val,string,token,image,val,super,initialise,current,token,val,expected,token,sequences,val,token,image,val,current,token,current,token,val,expected,token,sequences,expected,token,sequences,val,token,image,token,image,val
ParseException -> public ParseException(Token currentTokenVal,                         int[][] expectedTokenSequencesVal,                         String[] tokenImageVal                        );1518162420;This constructor is used by the method "generateParseException"_in the generated parser.  Calling this constructor generates_a new object of this type with the fields "currentToken",_"expectedTokenSequences", and "tokenImage" set.;public ParseException(Token currentTokenVal,_                        int[][] expectedTokenSequencesVal,_                        String[] tokenImageVal_                       )_  {_    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))__    currentToken = currentTokenVal__    expectedTokenSequences = expectedTokenSequencesVal__    tokenImage = tokenImageVal__  };this,constructor,is,used,by,the,method,generate,parse,exception,in,the,generated,parser,calling,this,constructor,generates,a,new,object,of,this,type,with,the,fields,current,token,expected,token,sequences,and,token,image,set;public,parse,exception,token,current,token,val,int,expected,token,sequences,val,string,token,image,val,super,initialise,current,token,val,expected,token,sequences,val,token,image,val,current,token,current,token,val,expected,token,sequences,expected,token,sequences,val,token,image,token,image,val
ParseException -> public ParseException(Token currentTokenVal,                         int[][] expectedTokenSequencesVal,                         String[] tokenImageVal                        );1524168259;This constructor is used by the method "generateParseException"_in the generated parser.  Calling this constructor generates_a new object of this type with the fields "currentToken",_"expectedTokenSequences", and "tokenImage" set.;public ParseException(Token currentTokenVal,_                        int[][] expectedTokenSequencesVal,_                        String[] tokenImageVal_                       )_  {_    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))__    currentToken = currentTokenVal__    expectedTokenSequences = expectedTokenSequencesVal__    tokenImage = tokenImageVal__  };this,constructor,is,used,by,the,method,generate,parse,exception,in,the,generated,parser,calling,this,constructor,generates,a,new,object,of,this,type,with,the,fields,current,token,expected,token,sequences,and,token,image,set;public,parse,exception,token,current,token,val,int,expected,token,sequences,val,string,token,image,val,super,initialise,current,token,val,expected,token,sequences,val,token,image,val,current,token,current,token,val,expected,token,sequences,expected,token,sequences,val,token,image,token,image,val
ParseException -> public ParseException(String message);1452335256;Constructor with message.;public ParseException(String message) {_    super(message)__  };constructor,with,message;public,parse,exception,string,message,super,message
ParseException -> public ParseException(String message);1452789249;Constructor with message.;public ParseException(String message) {_        super(message)__    };constructor,with,message;public,parse,exception,string,message,super,message
ParseException -> public ParseException(String message);1482077787;Constructor with message.;public ParseException(String message) {_        super(message)__    };constructor,with,message;public,parse,exception,string,message,super,message
ParseException -> public ParseException(String message);1507796188;Constructor with message.;public ParseException(String message) {_        super(message)__    };constructor,with,message;public,parse,exception,string,message,super,message
ParseException -> public ParseException(String message);1518162420;Constructor with message.;public ParseException(String message) {_    super(message)__  };constructor,with,message;public,parse,exception,string,message,super,message
ParseException -> public ParseException(String message);1524168259;Constructor with message.;public ParseException(String message) {_    super(message)__  };constructor,with,message;public,parse,exception,string,message,super,message
ParseException -> public ParseException();1452335256;The following constructors are for use by you for whatever_purpose you can think of.  Constructing the exception in this_manner makes the exception behave in the normal way - i.e., as_documented in the class "Throwable".  The fields "errorToken",_"expectedTokenSequences", and "tokenImage" do not contain_relevant information.  The JavaCC generated code does not use_these constructors.;public ParseException() {_    super()__  };the,following,constructors,are,for,use,by,you,for,whatever,purpose,you,can,think,of,constructing,the,exception,in,this,manner,makes,the,exception,behave,in,the,normal,way,i,e,as,documented,in,the,class,throwable,the,fields,error,token,expected,token,sequences,and,token,image,do,not,contain,relevant,information,the,java,cc,generated,code,does,not,use,these,constructors;public,parse,exception,super
ParseException -> public ParseException();1452789249;The following constructors are for use by you for whatever_purpose you can think of.  Constructing the exception in this_manner makes the exception behave in the normal way - i.e., as_documented in the class "Throwable".  The fields "errorToken",_"expectedTokenSequences", and "tokenImage" do not contain_relevant information.  The JavaCC generated code does not use_these constructors.;public ParseException() {_        super()__    };the,following,constructors,are,for,use,by,you,for,whatever,purpose,you,can,think,of,constructing,the,exception,in,this,manner,makes,the,exception,behave,in,the,normal,way,i,e,as,documented,in,the,class,throwable,the,fields,error,token,expected,token,sequences,and,token,image,do,not,contain,relevant,information,the,java,cc,generated,code,does,not,use,these,constructors;public,parse,exception,super
ParseException -> public ParseException();1482077787;The following constructors are for use by you for whatever_purpose you can think of.  Constructing the exception in this_manner makes the exception behave in the normal way - i.e., as_documented in the class "Throwable".  The fields "errorToken",_"expectedTokenSequences", and "tokenImage" do not contain_relevant information.  The JavaCC generated code does not use_these constructors.;public ParseException() {_        super()__    };the,following,constructors,are,for,use,by,you,for,whatever,purpose,you,can,think,of,constructing,the,exception,in,this,manner,makes,the,exception,behave,in,the,normal,way,i,e,as,documented,in,the,class,throwable,the,fields,error,token,expected,token,sequences,and,token,image,do,not,contain,relevant,information,the,java,cc,generated,code,does,not,use,these,constructors;public,parse,exception,super
ParseException -> public ParseException();1507796188;The following constructors are for use by you for whatever_purpose you can think of.  Constructing the exception in this_manner makes the exception behave in the normal way - i.e., as_documented in the class "Throwable".  The fields "errorToken",_"expectedTokenSequences", and "tokenImage" do not contain_relevant information.  The JavaCC generated code does not use_these constructors.;public ParseException() {_        super()__    };the,following,constructors,are,for,use,by,you,for,whatever,purpose,you,can,think,of,constructing,the,exception,in,this,manner,makes,the,exception,behave,in,the,normal,way,i,e,as,documented,in,the,class,throwable,the,fields,error,token,expected,token,sequences,and,token,image,do,not,contain,relevant,information,the,java,cc,generated,code,does,not,use,these,constructors;public,parse,exception,super
ParseException -> public ParseException();1518162420;The following constructors are for use by you for whatever_purpose you can think of.  Constructing the exception in this_manner makes the exception behave in the normal way - i.e., as_documented in the class "Throwable".  The fields "errorToken",_"expectedTokenSequences", and "tokenImage" do not contain_relevant information.  The JavaCC generated code does not use_these constructors.;public ParseException() {_    super()__  };the,following,constructors,are,for,use,by,you,for,whatever,purpose,you,can,think,of,constructing,the,exception,in,this,manner,makes,the,exception,behave,in,the,normal,way,i,e,as,documented,in,the,class,throwable,the,fields,error,token,expected,token,sequences,and,token,image,do,not,contain,relevant,information,the,java,cc,generated,code,does,not,use,these,constructors;public,parse,exception,super
ParseException -> public ParseException();1524168259;The following constructors are for use by you for whatever_purpose you can think of.  Constructing the exception in this_manner makes the exception behave in the normal way - i.e., as_documented in the class "Throwable".  The fields "errorToken",_"expectedTokenSequences", and "tokenImage" do not contain_relevant information.  The JavaCC generated code does not use_these constructors.;public ParseException() {_    super()__  };the,following,constructors,are,for,use,by,you,for,whatever,purpose,you,can,think,of,constructing,the,exception,in,this,manner,makes,the,exception,behave,in,the,normal,way,i,e,as,documented,in,the,class,throwable,the,fields,error,token,expected,token,sequences,and,token,image,do,not,contain,relevant,information,the,java,cc,generated,code,does,not,use,these,constructors;public,parse,exception,super
ParseException -> private static String initialise(Token currentToken,                            int[][] expectedTokenSequences,                            String[] tokenImage);1452335256;It uses "currentToken" and "expectedTokenSequences" to generate a parse_error message and returns it.  If this object has been created_due to a parse error, and you do not catch it (it gets thrown_from the parser) the correct error message_gets displayed.;private static String initialise(Token currentToken,_                           int[][] expectedTokenSequences,_                           String[] tokenImage) {_    String eol = System.getProperty("line.separator", "\n")__    StringBuffer expected = new StringBuffer()__    int maxSize = 0__    for (int i = 0_ i < expectedTokenSequences.length_ i++) {_      if (maxSize < expectedTokenSequences[i].length) {_        maxSize = expectedTokenSequences[i].length__      }_      for (int j = 0_ j < expectedTokenSequences[i].length_ j++) {_        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ')__      }_      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {_        expected.append("...")__      }_      expected.append(eol).append("    ")__    }_    String retval = "Encountered \""__    Token tok = currentToken.next__    for (int i = 0_ i < maxSize_ i++) {_      if (i != 0) retval += " "__      if (tok.kind == 0) {_        retval += tokenImage[0]__        break__      }_      retval += " " + tokenImage[tok.kind]__      retval += " \""__      retval += add_escapes(tok.image)__      retval += " \""__      tok = tok.next__    }_    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn__    retval += "." + eol__    if (expectedTokenSequences.length == 1) {_      retval += "Was expecting:" + eol + "    "__    } else {_      retval += "Was expecting one of:" + eol + "    "__    }_    retval += expected.toString()__    return retval__  };it,uses,current,token,and,expected,token,sequences,to,generate,a,parse,error,message,and,returns,it,if,this,object,has,been,created,due,to,a,parse,error,and,you,do,not,catch,it,it,gets,thrown,from,the,parser,the,correct,error,message,gets,displayed;private,static,string,initialise,token,current,token,int,expected,token,sequences,string,token,image,string,eol,system,get,property,line,separator,n,string,buffer,expected,new,string,buffer,int,max,size,0,for,int,i,0,i,expected,token,sequences,length,i,if,max,size,expected,token,sequences,i,length,max,size,expected,token,sequences,i,length,for,int,j,0,j,expected,token,sequences,i,length,j,expected,append,token,image,expected,token,sequences,i,j,append,if,expected,token,sequences,i,expected,token,sequences,i,length,1,0,expected,append,expected,append,eol,append,string,retval,encountered,token,tok,current,token,next,for,int,i,0,i,max,size,i,if,i,0,retval,if,tok,kind,0,retval,token,image,0,break,retval,token,image,tok,kind,retval,retval,tok,image,retval,tok,tok,next,retval,at,line,current,token,next,begin,line,column,current,token,next,begin,column,retval,eol,if,expected,token,sequences,length,1,retval,was,expecting,eol,else,retval,was,expecting,one,of,eol,retval,expected,to,string,return,retval
ParseException -> private static String initialise(Token currentToken,                            int[][] expectedTokenSequences,                            String[] tokenImage);1518162420;It uses "currentToken" and "expectedTokenSequences" to generate a parse_error message and returns it.  If this object has been created_due to a parse error, and you do not catch it (it gets thrown_from the parser) the correct error message_gets displayed.;private static String initialise(Token currentToken,_                           int[][] expectedTokenSequences,_                           String[] tokenImage) {_    String eol = System.getProperty("line.separator", "\n")__    StringBuffer expected = new StringBuffer()__    int maxSize = 0__    for (int i = 0_ i < expectedTokenSequences.length_ i++) {_      if (maxSize < expectedTokenSequences[i].length) {_        maxSize = expectedTokenSequences[i].length__      }_      for (int j = 0_ j < expectedTokenSequences[i].length_ j++) {_        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ')__      }_      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {_        expected.append("...")__      }_      expected.append(eol).append("    ")__    }_    String retval = "Encountered \""__    Token tok = currentToken.next__    for (int i = 0_ i < maxSize_ i++) {_      if (i != 0) retval += " "__      if (tok.kind == 0) {_        retval += tokenImage[0]__        break__      }_      retval += " " + tokenImage[tok.kind]__      retval += " \""__      retval += add_escapes(tok.image)__      retval += " \""__      tok = tok.next__    }_    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn__    retval += "." + eol__    if (expectedTokenSequences.length == 1) {_      retval += "Was expecting:" + eol + "    "__    } else {_      retval += "Was expecting one of:" + eol + "    "__    }_    retval += expected.toString()__    return retval__  };it,uses,current,token,and,expected,token,sequences,to,generate,a,parse,error,message,and,returns,it,if,this,object,has,been,created,due,to,a,parse,error,and,you,do,not,catch,it,it,gets,thrown,from,the,parser,the,correct,error,message,gets,displayed;private,static,string,initialise,token,current,token,int,expected,token,sequences,string,token,image,string,eol,system,get,property,line,separator,n,string,buffer,expected,new,string,buffer,int,max,size,0,for,int,i,0,i,expected,token,sequences,length,i,if,max,size,expected,token,sequences,i,length,max,size,expected,token,sequences,i,length,for,int,j,0,j,expected,token,sequences,i,length,j,expected,append,token,image,expected,token,sequences,i,j,append,if,expected,token,sequences,i,expected,token,sequences,i,length,1,0,expected,append,expected,append,eol,append,string,retval,encountered,token,tok,current,token,next,for,int,i,0,i,max,size,i,if,i,0,retval,if,tok,kind,0,retval,token,image,0,break,retval,token,image,tok,kind,retval,retval,tok,image,retval,tok,tok,next,retval,at,line,current,token,next,begin,line,column,current,token,next,begin,column,retval,eol,if,expected,token,sequences,length,1,retval,was,expecting,eol,else,retval,was,expecting,one,of,eol,retval,expected,to,string,return,retval
ParseException -> private static String initialise(Token currentToken,                            int[][] expectedTokenSequences,                            String[] tokenImage);1524168259;It uses "currentToken" and "expectedTokenSequences" to generate a parse_error message and returns it.  If this object has been created_due to a parse error, and you do not catch it (it gets thrown_from the parser) the correct error message_gets displayed.;private static String initialise(Token currentToken,_                           int[][] expectedTokenSequences,_                           String[] tokenImage) {_    String eol = System.getProperty("line.separator", "\n")__    StringBuffer expected = new StringBuffer()__    int maxSize = 0__    for (int[] expectedTokenSequence : expectedTokenSequences) {_      if (maxSize < expectedTokenSequence.length) {_        maxSize = expectedTokenSequence.length__      }_      for (int j = 0_ j < expectedTokenSequence.length_ j++) {_        expected.append(tokenImage[expectedTokenSequence[j]]).append(' ')__      }_      if (expectedTokenSequence[expectedTokenSequence.length - 1] != 0) {_        expected.append("...")__      }_      expected.append(eol).append("    ")__    }_    String retval = "Encountered \""__    Token tok = currentToken.next__    for (int i = 0_ i < maxSize_ i++) {_      if (i != 0) retval += " "__      if (tok.kind == 0) {_        retval += tokenImage[0]__        break__      }_      retval += " " + tokenImage[tok.kind]__      retval += " \""__      retval += add_escapes(tok.image)__      retval += " \""__      tok = tok.next__    }_    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn__    retval += "." + eol__    if (expectedTokenSequences.length == 1) {_      retval += "Was expecting:" + eol + "    "__    } else {_      retval += "Was expecting one of:" + eol + "    "__    }_    retval += expected.toString()__    return retval__  };it,uses,current,token,and,expected,token,sequences,to,generate,a,parse,error,message,and,returns,it,if,this,object,has,been,created,due,to,a,parse,error,and,you,do,not,catch,it,it,gets,thrown,from,the,parser,the,correct,error,message,gets,displayed;private,static,string,initialise,token,current,token,int,expected,token,sequences,string,token,image,string,eol,system,get,property,line,separator,n,string,buffer,expected,new,string,buffer,int,max,size,0,for,int,expected,token,sequence,expected,token,sequences,if,max,size,expected,token,sequence,length,max,size,expected,token,sequence,length,for,int,j,0,j,expected,token,sequence,length,j,expected,append,token,image,expected,token,sequence,j,append,if,expected,token,sequence,expected,token,sequence,length,1,0,expected,append,expected,append,eol,append,string,retval,encountered,token,tok,current,token,next,for,int,i,0,i,max,size,i,if,i,0,retval,if,tok,kind,0,retval,token,image,0,break,retval,token,image,tok,kind,retval,retval,tok,image,retval,tok,tok,next,retval,at,line,current,token,next,begin,line,column,current,token,next,begin,column,retval,eol,if,expected,token,sequences,length,1,retval,was,expecting,eol,else,retval,was,expecting,one,of,eol,retval,expected,to,string,return,retval
ParseException -> private static String initialise(Token currentToken,                                      int[][] expectedTokenSequences,                                      String[] tokenImage);1452789249;It uses "currentToken" and "expectedTokenSequences" to generate a parse_error message and returns it.  If this object has been created_due to a parse error, and you do not catch it (it gets thrown_from the parser) the correct error message_gets displayed.;private static String initialise(Token currentToken,_                                     int[][] expectedTokenSequences,_                                     String[] tokenImage) {_        String eol = System.getProperty("line.separator", "\n")__        StringBuffer expected = new StringBuffer()__        int maxSize = 0__        for (int i = 0_ i < expectedTokenSequences.length_ i++) {_            if (maxSize < expectedTokenSequences[i].length) {_                maxSize = expectedTokenSequences[i].length__            }_            for (int j = 0_ j < expectedTokenSequences[i].length_ j++) {_                expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ')__            }_            if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {_                expected.append("...")__            }_            expected.append(eol).append("    ")__        }_        String retval = "Encountered \""__        Token tok = currentToken.next__        for (int i = 0_ i < maxSize_ i++) {_            if (i != 0) retval += " "__            if (tok.kind == 0) {_                retval += tokenImage[0]__                break__            }_            retval += " " + tokenImage[tok.kind]__            retval += " \""__            retval += add_escapes(tok.image)__            retval += " \""__            tok = tok.next__        }_        retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn__        retval += "." + eol__        if (expectedTokenSequences.length == 1) {_            retval += "Was expecting:" + eol + "    "__        } else {_            retval += "Was expecting one of:" + eol + "    "__        }_        retval += expected.toString()__        return retval__    };it,uses,current,token,and,expected,token,sequences,to,generate,a,parse,error,message,and,returns,it,if,this,object,has,been,created,due,to,a,parse,error,and,you,do,not,catch,it,it,gets,thrown,from,the,parser,the,correct,error,message,gets,displayed;private,static,string,initialise,token,current,token,int,expected,token,sequences,string,token,image,string,eol,system,get,property,line,separator,n,string,buffer,expected,new,string,buffer,int,max,size,0,for,int,i,0,i,expected,token,sequences,length,i,if,max,size,expected,token,sequences,i,length,max,size,expected,token,sequences,i,length,for,int,j,0,j,expected,token,sequences,i,length,j,expected,append,token,image,expected,token,sequences,i,j,append,if,expected,token,sequences,i,expected,token,sequences,i,length,1,0,expected,append,expected,append,eol,append,string,retval,encountered,token,tok,current,token,next,for,int,i,0,i,max,size,i,if,i,0,retval,if,tok,kind,0,retval,token,image,0,break,retval,token,image,tok,kind,retval,retval,tok,image,retval,tok,tok,next,retval,at,line,current,token,next,begin,line,column,current,token,next,begin,column,retval,eol,if,expected,token,sequences,length,1,retval,was,expecting,eol,else,retval,was,expecting,one,of,eol,retval,expected,to,string,return,retval
ParseException -> private static String initialise(Token currentToken,                                      int[][] expectedTokenSequences,                                      String[] tokenImage);1482077787;It uses "currentToken" and "expectedTokenSequences" to generate a parse_error message and returns it.  If this object has been created_due to a parse error, and you do not catch it (it gets thrown_from the parser) the correct error message_gets displayed.;private static String initialise(Token currentToken,_                                     int[][] expectedTokenSequences,_                                     String[] tokenImage) {_        String eol = System.getProperty("line.separator", "\n")__        StringBuffer expected = new StringBuffer()__        int maxSize = 0__        for (int[] expectedTokenSequence : expectedTokenSequences) {_            if (maxSize < expectedTokenSequence.length) {_                maxSize = expectedTokenSequence.length__            }_            for (int j = 0_ j < expectedTokenSequence.length_ j++) {_                expected.append(tokenImage[expectedTokenSequence[j]]).append(' ')__            }_            if (expectedTokenSequence[expectedTokenSequence.length - 1] != 0) {_                expected.append("...")__            }_            expected.append(eol).append("    ")__        }_        String retval = "Encountered \""__        Token tok = currentToken.next__        for (int i = 0_ i < maxSize_ i++) {_            if (i != 0) retval += " "__            if (tok.kind == 0) {_                retval += tokenImage[0]__                break__            }_            retval += " " + tokenImage[tok.kind]__            retval += " \""__            retval += add_escapes(tok.image)__            retval += " \""__            tok = tok.next__        }_        retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn__        retval += "." + eol__        if (expectedTokenSequences.length == 1) {_            retval += "Was expecting:" + eol + "    "__        } else {_            retval += "Was expecting one of:" + eol + "    "__        }_        retval += expected.toString()__        return retval__    };it,uses,current,token,and,expected,token,sequences,to,generate,a,parse,error,message,and,returns,it,if,this,object,has,been,created,due,to,a,parse,error,and,you,do,not,catch,it,it,gets,thrown,from,the,parser,the,correct,error,message,gets,displayed;private,static,string,initialise,token,current,token,int,expected,token,sequences,string,token,image,string,eol,system,get,property,line,separator,n,string,buffer,expected,new,string,buffer,int,max,size,0,for,int,expected,token,sequence,expected,token,sequences,if,max,size,expected,token,sequence,length,max,size,expected,token,sequence,length,for,int,j,0,j,expected,token,sequence,length,j,expected,append,token,image,expected,token,sequence,j,append,if,expected,token,sequence,expected,token,sequence,length,1,0,expected,append,expected,append,eol,append,string,retval,encountered,token,tok,current,token,next,for,int,i,0,i,max,size,i,if,i,0,retval,if,tok,kind,0,retval,token,image,0,break,retval,token,image,tok,kind,retval,retval,tok,image,retval,tok,tok,next,retval,at,line,current,token,next,begin,line,column,current,token,next,begin,column,retval,eol,if,expected,token,sequences,length,1,retval,was,expecting,eol,else,retval,was,expecting,one,of,eol,retval,expected,to,string,return,retval
ParseException -> private static String initialise(Token currentToken,                                      int[][] expectedTokenSequences,                                      String[] tokenImage);1507796188;It uses "currentToken" and "expectedTokenSequences" to generate a parse_error message and returns it.  If this object has been created_due to a parse error, and you do not catch it (it gets thrown_from the parser) the correct error message_gets displayed.;private static String initialise(Token currentToken,_                                     int[][] expectedTokenSequences,_                                     String[] tokenImage) {_        String eol = System.getProperty("line.separator", "\n")__        StringBuffer expected = new StringBuffer()__        int maxSize = 0__        for (int[] expectedTokenSequence : expectedTokenSequences) {_            if (maxSize < expectedTokenSequence.length) {_                maxSize = expectedTokenSequence.length__            }_            for (int j = 0_ j < expectedTokenSequence.length_ j++) {_                expected.append(tokenImage[expectedTokenSequence[j]]).append(' ')__            }_            if (expectedTokenSequence[expectedTokenSequence.length - 1] != 0) {_                expected.append("...")__            }_            expected.append(eol).append("    ")__        }_        StringBuilder retval = new StringBuilder("Encountered \"")__        Token tok = currentToken.next__        for (int i = 0_ i < maxSize_ i++) {_            if (i != 0) retval.append(" ")__            if (tok.kind == 0) {_                retval.append(tokenImage[0])__                break__            }_            retval.append(" ").append(tokenImage[tok.kind])__            retval.append(" \"")__            retval.append(add_escapes(tok.image))__            retval.append(" \"")__            tok = tok.next__        }_        retval.append("\" at line ").append(currentToken.next.beginLine).append(", column ").append(currentToken.next.beginColumn)__        retval.append(".").append(eol)__        if (expectedTokenSequences.length == 1) {_            retval.append("Was expecting:").append(eol).append("    ")__        } else {_            retval.append("Was expecting one of:").append(eol).append("    ")__        }_        retval.append(expected.toString())__        return retval.toString()__    };it,uses,current,token,and,expected,token,sequences,to,generate,a,parse,error,message,and,returns,it,if,this,object,has,been,created,due,to,a,parse,error,and,you,do,not,catch,it,it,gets,thrown,from,the,parser,the,correct,error,message,gets,displayed;private,static,string,initialise,token,current,token,int,expected,token,sequences,string,token,image,string,eol,system,get,property,line,separator,n,string,buffer,expected,new,string,buffer,int,max,size,0,for,int,expected,token,sequence,expected,token,sequences,if,max,size,expected,token,sequence,length,max,size,expected,token,sequence,length,for,int,j,0,j,expected,token,sequence,length,j,expected,append,token,image,expected,token,sequence,j,append,if,expected,token,sequence,expected,token,sequence,length,1,0,expected,append,expected,append,eol,append,string,builder,retval,new,string,builder,encountered,token,tok,current,token,next,for,int,i,0,i,max,size,i,if,i,0,retval,append,if,tok,kind,0,retval,append,token,image,0,break,retval,append,append,token,image,tok,kind,retval,append,retval,append,tok,image,retval,append,tok,tok,next,retval,append,at,line,append,current,token,next,begin,line,append,column,append,current,token,next,begin,column,retval,append,append,eol,if,expected,token,sequences,length,1,retval,append,was,expecting,append,eol,append,else,retval,append,was,expecting,one,of,append,eol,append,retval,append,expected,to,string,return,retval,to,string
