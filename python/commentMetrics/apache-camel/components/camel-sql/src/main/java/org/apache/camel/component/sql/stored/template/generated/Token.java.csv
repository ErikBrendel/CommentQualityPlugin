commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * An optional attribute value of the Token.  * Tokens which are not used as syntactic sugar will often contain  * meaningful values that will be used later on by the compiler or  * interpreter. This attribute value is often different from the image.  * Any subclass of Token that actually wants to return a non-null value can  * override this method as appropriate.  */ ;/**  * An optional attribute value of the Token.  * Tokens which are not used as syntactic sugar will often contain  * meaningful values that will be used later on by the compiler or  * interpreter. This attribute value is often different from the image.  * Any subclass of Token that actually wants to return a non-null value can  * override this method as appropriate.  */ public Object getValue() {     return null. }
true;public;0;4;/**  * Returns the image.  */ ;/**  * Returns the image.  */ public String toString() {     return image. }
true;public,static;2;7;/**  * Returns a new Token object, by default. However, if you want, you  * can create and return subclass objects based on the value of ofKind.  * Simply add the cases to the switch for all those special cases.  * For example, if you have a subclass of Token called IDToken that  * you want to create if ofKind is ID, simply add something like :  *  *    case MyParserConstants.ID : return new IDToken(ofKind, image).  *  * to the following switch statement. Then you can cast matchedToken  * variable to the appropriate type and use sit in your lexical actions.  */ ;/**  * Returns a new Token object, by default. However, if you want, you  * can create and return subclass objects based on the value of ofKind.  * Simply add the cases to the switch for all those special cases.  * For example, if you have a subclass of Token called IDToken that  * you want to create if ofKind is ID, simply add something like :  *  *    case MyParserConstants.ID : return new IDToken(ofKind, image).  *  * to the following switch statement. Then you can cast matchedToken  * variable to the appropriate type and use sit in your lexical actions.  */ public static Token newToken(int ofKind, String image) {     switch(ofKind) {         default:             return new Token(ofKind, image).     } }
false;public,static;1;4;;public static Token newToken(int ofKind) {     return newToken(ofKind, null). }
