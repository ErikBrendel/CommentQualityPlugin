# id;timestamp;commentText;codeText;commentWords;codeWords
Token -> public Object getValue();1452335256;An optional attribute value of the Token._Tokens which are not used as syntactic sugar will often contain_meaningful values that will be used later on by the compiler or_interpreter. This attribute value is often different from the image._Any subclass of Token that actually wants to return a non-null value can_override this method as appropriate.;public Object getValue() {_    return null__  };an,optional,attribute,value,of,the,token,tokens,which,are,not,used,as,syntactic,sugar,will,often,contain,meaningful,values,that,will,be,used,later,on,by,the,compiler,or,interpreter,this,attribute,value,is,often,different,from,the,image,any,subclass,of,token,that,actually,wants,to,return,a,non,null,value,can,override,this,method,as,appropriate;public,object,get,value,return,null
Token -> public Object getValue();1452789249;An optional attribute value of the Token._Tokens which are not used as syntactic sugar will often contain_meaningful values that will be used later on by the compiler or_interpreter. This attribute value is often different from the image._Any subclass of Token that actually wants to return a non-null value can_override this method as appropriate.;public Object getValue() {_        return null__    };an,optional,attribute,value,of,the,token,tokens,which,are,not,used,as,syntactic,sugar,will,often,contain,meaningful,values,that,will,be,used,later,on,by,the,compiler,or,interpreter,this,attribute,value,is,often,different,from,the,image,any,subclass,of,token,that,actually,wants,to,return,a,non,null,value,can,override,this,method,as,appropriate;public,object,get,value,return,null
Token -> public Object getValue();1518162420;An optional attribute value of the Token._Tokens which are not used as syntactic sugar will often contain_meaningful values that will be used later on by the compiler or_interpreter. This attribute value is often different from the image._Any subclass of Token that actually wants to return a non-null value can_override this method as appropriate.;public Object getValue() {_    return null__  };an,optional,attribute,value,of,the,token,tokens,which,are,not,used,as,syntactic,sugar,will,often,contain,meaningful,values,that,will,be,used,later,on,by,the,compiler,or,interpreter,this,attribute,value,is,often,different,from,the,image,any,subclass,of,token,that,actually,wants,to,return,a,non,null,value,can,override,this,method,as,appropriate;public,object,get,value,return,null
Token -> public Token(int kind);1452335256;Constructs a new token for the specified Image.;public Token(int kind)_  {_    this(kind, null)__  };constructs,a,new,token,for,the,specified,image;public,token,int,kind,this,kind,null
Token -> public Token(int kind);1452789249;Constructs a new token for the specified Image.;public Token(int kind) {_        this(kind, null)__    };constructs,a,new,token,for,the,specified,image;public,token,int,kind,this,kind,null
Token -> public Token(int kind);1518162420;Constructs a new token for the specified Image.;public Token(int kind)_  {_    this(kind, null)__  };constructs,a,new,token,for,the,specified,image;public,token,int,kind,this,kind,null
Token -> public Token(int kind, String image);1452335256;Constructs a new token for the specified Image and Kind.;public Token(int kind, String image)_  {_    this.kind = kind__    this.image = image__  };constructs,a,new,token,for,the,specified,image,and,kind;public,token,int,kind,string,image,this,kind,kind,this,image,image
Token -> public Token(int kind, String image);1452789249;Constructs a new token for the specified Image and Kind.;public Token(int kind, String image) {_        this.kind = kind__        this.image = image__    };constructs,a,new,token,for,the,specified,image,and,kind;public,token,int,kind,string,image,this,kind,kind,this,image,image
Token -> public Token(int kind, String image);1518162420;Constructs a new token for the specified Image and Kind.;public Token(int kind, String image)_  {_    this.kind = kind__    this.image = image__  };constructs,a,new,token,for,the,specified,image,and,kind;public,token,int,kind,string,image,this,kind,kind,this,image,image
Token -> public String toString();1452335256;Returns the image.;public String toString()_  {_    return image__  };returns,the,image;public,string,to,string,return,image
Token -> public String toString();1452789249;Returns the image.;public String toString() {_        return image__    };returns,the,image;public,string,to,string,return,image
Token -> public String toString();1518162420;Returns the image.;public String toString()_  {_    return image__  };returns,the,image;public,string,to,string,return,image
Token -> public static Token newToken(int ofKind, String image);1452335256;Returns a new Token object, by default. However, if you want, you_can create and return subclass objects based on the value of ofKind._Simply add the cases to the switch for all those special cases._For example, if you have a subclass of Token called IDToken that_you want to create if ofKind is ID, simply add something like :__case MyParserConstants.ID : return new IDToken(ofKind, image)___to the following switch statement. Then you can cast matchedToken_variable to the appropriate type and use sit in your lexical actions.;public static Token newToken(int ofKind, String image)_  {_    switch(ofKind)_    {_      default : return new Token(ofKind, image)__    }_  };returns,a,new,token,object,by,default,however,if,you,want,you,can,create,and,return,subclass,objects,based,on,the,value,of,of,kind,simply,add,the,cases,to,the,switch,for,all,those,special,cases,for,example,if,you,have,a,subclass,of,token,called,idtoken,that,you,want,to,create,if,of,kind,is,id,simply,add,something,like,case,my,parser,constants,id,return,new,idtoken,of,kind,image,to,the,following,switch,statement,then,you,can,cast,matched,token,variable,to,the,appropriate,type,and,use,sit,in,your,lexical,actions;public,static,token,new,token,int,of,kind,string,image,switch,of,kind,default,return,new,token,of,kind,image
Token -> public static Token newToken(int ofKind, String image);1452789249;Returns a new Token object, by default. However, if you want, you_can create and return subclass objects based on the value of ofKind._Simply add the cases to the switch for all those special cases._For example, if you have a subclass of Token called IDToken that_you want to create if ofKind is ID, simply add something like :__case MyParserConstants.ID : return new IDToken(ofKind, image)___to the following switch statement. Then you can cast matchedToken_variable to the appropriate type and use sit in your lexical actions.;public static Token newToken(int ofKind, String image) {_        switch (ofKind) {_            default:_                return new Token(ofKind, image)__        }_    };returns,a,new,token,object,by,default,however,if,you,want,you,can,create,and,return,subclass,objects,based,on,the,value,of,of,kind,simply,add,the,cases,to,the,switch,for,all,those,special,cases,for,example,if,you,have,a,subclass,of,token,called,idtoken,that,you,want,to,create,if,of,kind,is,id,simply,add,something,like,case,my,parser,constants,id,return,new,idtoken,of,kind,image,to,the,following,switch,statement,then,you,can,cast,matched,token,variable,to,the,appropriate,type,and,use,sit,in,your,lexical,actions;public,static,token,new,token,int,of,kind,string,image,switch,of,kind,default,return,new,token,of,kind,image
Token -> public static Token newToken(int ofKind, String image);1518162420;Returns a new Token object, by default. However, if you want, you_can create and return subclass objects based on the value of ofKind._Simply add the cases to the switch for all those special cases._For example, if you have a subclass of Token called IDToken that_you want to create if ofKind is ID, simply add something like :__case MyParserConstants.ID : return new IDToken(ofKind, image)___to the following switch statement. Then you can cast matchedToken_variable to the appropriate type and use sit in your lexical actions.;public static Token newToken(int ofKind, String image)_  {_    switch(ofKind)_    {_      default : return new Token(ofKind, image)__    }_  };returns,a,new,token,object,by,default,however,if,you,want,you,can,create,and,return,subclass,objects,based,on,the,value,of,of,kind,simply,add,the,cases,to,the,switch,for,all,those,special,cases,for,example,if,you,have,a,subclass,of,token,called,idtoken,that,you,want,to,create,if,of,kind,is,id,simply,add,something,like,case,my,parser,constants,id,return,new,idtoken,of,kind,image,to,the,following,switch,statement,then,you,can,cast,matched,token,variable,to,the,appropriate,type,and,use,sit,in,your,lexical,actions;public,static,token,new,token,int,of,kind,string,image,switch,of,kind,default,return,new,token,of,kind,image
Token -> public Token();1452335256;No-argument constructor;public Token() {};no,argument,constructor;public,token
Token -> public Token();1452789249;No-argument constructor;public Token() {_    };no,argument,constructor;public,token
Token -> public Token();1518162420;No-argument constructor;public Token() {};no,argument,constructor;public,token
