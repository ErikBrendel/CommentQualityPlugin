commented;modifiers;parameterAmount;loc;comment;code
false;public;1;24;;public Boolean doInTransaction(TransactionStatus status) {     try {         // we will receive an exception if the table doesn't exists or we cannot access it         jdbcTemplate.execute(getTableExistsString()).         log.debug("Expected table for JdbcMessageIdRepository exist").     } catch (DataAccessException e) {         if (createTableIfNotExists) {             try {                 log.debug("creating table for JdbcMessageIdRepository because it doesn't exist...").                 jdbcTemplate.execute(getCreateString()).                 log.info("table created with query '{}'", getCreateString()).             } catch (DataAccessException dae) {                 // we will fail if we cannot create it                 log.error("Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.", getCreateString(), e.getMessage()).                 throw dae.             }         } else {             throw e.         }     }     return Boolean.TRUE. }
false;protected;0;31;;@Override protected void doStart() throws Exception {     super.doStart().     transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             try {                 // we will receive an exception if the table doesn't exists or we cannot access it                 jdbcTemplate.execute(getTableExistsString()).                 log.debug("Expected table for JdbcMessageIdRepository exist").             } catch (DataAccessException e) {                 if (createTableIfNotExists) {                     try {                         log.debug("creating table for JdbcMessageIdRepository because it doesn't exist...").                         jdbcTemplate.execute(getCreateString()).                         log.info("table created with query '{}'", getCreateString()).                     } catch (DataAccessException dae) {                         // we will fail if we cannot create it                         log.error("Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.", getCreateString(), e.getMessage()).                         throw dae.                     }                 } else {                     throw e.                 }             }             return Boolean.TRUE.         }     }). }
false;protected;1;4;;@Override protected int queryForInt(String key) {     return jdbcTemplate.queryForObject(getQueryString(), Integer.class, processorName, key). }
false;protected;1;4;;@Override protected int insert(String key) {     return jdbcTemplate.update(getInsertString(), processorName, key, new Timestamp(System.currentTimeMillis())). }
false;protected;1;4;;@Override protected int delete(String key) {     return jdbcTemplate.update(getDeleteString(), processorName, key). }
false;protected;0;4;;@Override protected int delete() {     return jdbcTemplate.update(getClearString(), processorName). }
false;public;0;3;;public boolean isCreateTableIfNotExists() {     return createTableIfNotExists. }
false;public;1;3;;public void setCreateTableIfNotExists(boolean createTableIfNotExists) {     this.createTableIfNotExists = createTableIfNotExists. }
false;public;0;3;;public String getTableExistsString() {     return tableExistsString. }
false;public;1;3;;public void setTableExistsString(String tableExistsString) {     this.tableExistsString = tableExistsString. }
false;public;0;3;;public String getCreateString() {     return createString. }
false;public;1;3;;public void setCreateString(String createString) {     this.createString = createString. }
false;public;0;3;;public String getQueryString() {     return queryString. }
false;public;1;3;;public void setQueryString(String queryString) {     this.queryString = queryString. }
false;public;0;3;;public String getInsertString() {     return insertString. }
false;public;1;3;;public void setInsertString(String insertString) {     this.insertString = insertString. }
false;public;0;3;;public String getDeleteString() {     return deleteString. }
false;public;1;3;;public void setDeleteString(String deleteString) {     this.deleteString = deleteString. }
false;public;0;3;;public String getClearString() {     return clearString. }
false;public;1;3;;public void setClearString(String clearString) {     this.clearString = clearString. }
