commented;modifiers;parameterAmount;loc;comment;code
false;public;3;5;;public byte[] marshallExchange(CamelContext camelContext, Exchange exchange, boolean allowSerializedHeaders) throws IOException {     ByteArrayOutputStream bytesOut = new ByteArrayOutputStream().     marshallExchange(camelContext, exchange, allowSerializedHeaders, bytesOut).     return bytesOut.toByteArray(). }
false;public;4;19;;public void marshallExchange(CamelContext camelContext, Exchange exchange, boolean allowSerializedHeaders, OutputStream outputStream) throws IOException {     // use DefaultExchangeHolder to marshal to a serialized object     DefaultExchangeHolder pe = DefaultExchangeHolder.marshal(exchange, false, allowSerializedHeaders).     // add the aggregated size and timeout property as the only properties we want to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_SIZE, exchange.getProperty(Exchange.AGGREGATED_SIZE, Integer.class)).     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_TIMEOUT, exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, Long.class)).     // add the aggregated completed by property to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_COMPLETED_BY, exchange.getProperty(Exchange.AGGREGATED_COMPLETED_BY, String.class)).     // add the aggregated correlation key property to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_CORRELATION_KEY, exchange.getProperty(Exchange.AGGREGATED_CORRELATION_KEY, String.class)).     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_CORRELATION_KEY, exchange.getProperty(Exchange.AGGREGATED_CORRELATION_KEY, String.class)).     // and a guard property if using the flexible toolbox aggregator     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_COLLECTION_GUARD, exchange.getProperty(Exchange.AGGREGATED_COLLECTION_GUARD, String.class)).     // persist the from endpoint as well     if (exchange.getFromEndpoint() != null) {         DefaultExchangeHolder.addProperty(pe, "CamelAggregatedFromEndpoint", exchange.getFromEndpoint().getEndpointUri()).     }     encode(pe, outputStream). }
false;public;2;3;;public Exchange unmarshallExchange(CamelContext camelContext, byte[] buffer) throws IOException, ClassNotFoundException {     return unmarshallExchange(camelContext, new ByteArrayInputStream(buffer)). }
false;public;2;14;;public Exchange unmarshallExchange(CamelContext camelContext, InputStream inputStream) throws IOException, ClassNotFoundException {     DefaultExchangeHolder pe = decode(camelContext, inputStream).     Exchange answer = new DefaultExchange(camelContext).     DefaultExchangeHolder.unmarshal(answer, pe).     // restore the from endpoint     String fromEndpointUri = (String) answer.removeProperty("CamelAggregatedFromEndpoint").     if (fromEndpointUri != null) {         Endpoint fromEndpoint = camelContext.hasEndpoint(fromEndpointUri).         if (fromEndpoint != null) {             answer.setFromEndpoint(fromEndpoint).         }     }     return answer. }
false;private;2;5;;private void encode(Object object, OutputStream bytesOut) throws IOException {     try (ObjectOutputStream objectOut = new ObjectOutputStream(bytesOut)) {         objectOut.writeObject(object).     } }
false;private;2;12;;private DefaultExchangeHolder decode(CamelContext camelContext, InputStream bytesIn) throws IOException, ClassNotFoundException {     ObjectInputStream objectIn = null.     Object obj = null.     try {         objectIn = new ClassLoadingAwareObjectInputStream(camelContext, bytesIn).         obj = objectIn.readObject().     } finally {         IOHelper.close(objectIn).     }     return (DefaultExchangeHolder) obj. }
