commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;32;;@Override protected Endpoint createEndpoint(String uri, String template, Map<String, Object> parameters) throws Exception {     DataSource target = null.     // endpoint options overrule component configured datasource     DataSource ds = resolveAndRemoveReferenceParameter(parameters, "dataSource", DataSource.class).     if (ds != null) {         target = ds.     }     if (target == null) {         // fallback and use component         target = dataSource.     }     if (target == null) {         // check if the registry contains a single instance of DataSource         Set<DataSource> dataSources = getCamelContext().getRegistry().findByType(DataSource.class).         if (dataSources.size() > 1) {             throw new IllegalArgumentException("Multiple DataSources found in the registry and no explicit configuration provided").         } else if (dataSources.size() == 1) {             target = dataSources.stream().findFirst().orElse(null).         }     }     if (target == null) {         throw new IllegalArgumentException("DataSource must be configured").     }     JdbcTemplate jdbcTemplate = new JdbcTemplate(target).     SqlStoredEndpoint endpoint = new SqlStoredEndpoint(uri, this, jdbcTemplate).     endpoint.setTemplate(template).     return endpoint. }
false;public;0;3;;public DataSource getDataSource() {     return dataSource. }
true;public;1;3;/**  * Sets the DataSource to use to communicate with the database.  */ ;/**  * Sets the DataSource to use to communicate with the database.  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
