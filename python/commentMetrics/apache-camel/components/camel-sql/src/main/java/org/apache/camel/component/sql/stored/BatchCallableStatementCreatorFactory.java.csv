commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;public void addParameter(CallableStatement callableStatement, Map batchRow) throws SQLException {     int i = 1.     for (SqlParameter parameter : getSqlParameterList()) {         StatementCreatorUtils.setParameterValue(callableStatement, i, parameter, batchRow.get(parameter.getName())).         i++.     } }
false;private;0;4;;private String formatSql() {     return "{call " + this.template.getProcedureName() + "(" + repeatParameter(this.template.getParameterList().size()) + ")}". }
false;private;1;10;;private String repeatParameter(int size) {     StringBuilder ret = new StringBuilder().     for (int i = 0. i < size. i++) {         ret.append('?').         if (i + 1 < size) {             ret.append(',').         }     }     return ret.toString(). }
false;private;0;26;;private List<SqlParameter> createParams() {     List<SqlParameter> params = new ArrayList<>().     for (Object parameter : template.getParameterList()) {         if (parameter instanceof InParameter) {             InParameter inputParameter = (InParameter) parameter.             SqlParameter sqlParameter.             if (inputParameter.getScale() != null) {                 sqlParameter = new SqlParameter(inputParameter.getName(), inputParameter.getSqlType(), inputParameter.getScale()).             } else if (inputParameter.getTypeName() != null) {                 sqlParameter = new SqlParameter(inputParameter.getName(), inputParameter.getSqlType(), inputParameter.getTypeName()).             } else {                 sqlParameter = new SqlParameter(inputParameter.getName(), inputParameter.getSqlType()).             }             params.add(sqlParameter).         } else {             throw new UnsupportedOperationException("Only IN parameters supported by batch!").         }     }     return params. }
false;public;1;3;;public CallableStatementCreator newCallableStatementCreator(Map<String, ?> params) {     return this.callableStatementCreatorFactory.newCallableStatementCreator(params). }
false;public;0;3;;public List<SqlParameter> getSqlParameterList() {     return sqlParameterList. }
false;public;0;3;;public Template getTemplate() {     return template. }
