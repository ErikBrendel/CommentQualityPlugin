# id;timestamp;commentText;codeText;commentWords;codeWords
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1358434169;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1373129971;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1374666033;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1376549254;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1382864099;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1455781764;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1493019886;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1524063178;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1536687142;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1540108163;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception;1548175645;Updates the current exchange details in the given repository table__@param camelContext   the current CamelContext_@param key            the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void update(final CamelContext camelContext, final String key, final Exchange exchange, String repositoryName) throws Exception {_        StringBuilder queryBuilder = new StringBuilder()_                .append("UPDATE ").append(repositoryName)_                .append(" SET ")_                .append(EXCHANGE).append(" = ?")__        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY).append(" = ?")__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName).append(" = ?")__            }_        }__        queryBuilder.append(" WHERE ").append(ID).append(" = ?")___        String sql = queryBuilder.toString()__        insertAndUpdateHelper(camelContext, key, exchange, sql, false)__    };updates,the,current,exchange,details,in,the,given,repository,table,param,camel,context,the,current,camel,context,param,key,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,update,final,camel,context,camel,context,final,string,key,final,exchange,exchange,string,repository,name,throws,exception,string,builder,query,builder,new,string,builder,append,update,append,repository,name,append,set,append,exchange,append,if,store,body,as,text,query,builder,append,append,body,append,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,append,query,builder,append,where,append,id,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,key,exchange,sql,false
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1358434169;Inserts a new record into the given repository table__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1373129971;Inserts a new record into the given repository table__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1374666033;Inserts a new record into the given repository table__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1376549254;Inserts a new record into the given repository table__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1382864099;Inserts a new record into the given repository table__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1455781764;Inserts a new record into the given repository table__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange_@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1493019886;Inserts a new record into the given repository table._note : the exchange properties are NOT persisted.__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange to insert. The headers will be persisted but not the properties._@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,note,the,exchange,properties,are,not,persisted,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,to,insert,the,headers,will,be,persisted,but,not,the,properties,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1524063178;Inserts a new record into the given repository table._note : the exchange properties are NOT persisted.__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange to insert. The headers will be persisted but not the properties._@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,note,the,exchange,properties,are,not,persisted,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,to,insert,the,headers,will,be,persisted,but,not,the,properties,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1536687142;Inserts a new record into the given repository table._note : the exchange properties are NOT persisted.__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange to insert. The headers will be persisted but not the properties._@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,note,the,exchange,properties,are,not,persisted,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,to,insert,the,headers,will,be,persisted,but,not,the,properties,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1540108163;Inserts a new record into the given repository table._note : the exchange properties are NOT persisted.__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange to insert. The headers will be persisted but not the properties._@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,note,the,exchange,properties,are,not,persisted,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,to,insert,the,headers,will,be,persisted,but,not,the,properties,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception;1548175645;Inserts a new record into the given repository table._note : the exchange properties are NOT persisted.__@param camelContext   the current CamelContext_@param correlationId  the correlation key_@param exchange       the aggregated exchange to insert. The headers will be persisted but not the properties._@param repositoryName The name of the table_@throws Exception;protected void insert(final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName) throws Exception {_        _        int totalParameterIndex = 2__        StringBuilder queryBuilder = new StringBuilder()_                .append("INSERT INTO ").append(repositoryName)_                .append('(')_                .append(EXCHANGE).append(", ")_                .append(ID)___        if (storeBodyAsText) {_            queryBuilder.append(", ").append(BODY)__            totalParameterIndex++__        }__        if (hasHeadersToStoreAsText()) {_            for (String headerName : headersToStoreAsText) {_                queryBuilder.append(", ").append(headerName)__                totalParameterIndex++__            }_        }__        queryBuilder.append(") VALUES (")___        for (int i = 0_ i < totalParameterIndex - 1_ i++) {_            queryBuilder.append("?, ")__        }_        queryBuilder.append("?)")___        String sql = queryBuilder.toString()___        insertAndUpdateHelper(camelContext, correlationId, exchange, sql, true)__    };inserts,a,new,record,into,the,given,repository,table,note,the,exchange,properties,are,not,persisted,param,camel,context,the,current,camel,context,param,correlation,id,the,correlation,key,param,exchange,the,aggregated,exchange,to,insert,the,headers,will,be,persisted,but,not,the,properties,param,repository,name,the,name,of,the,table,throws,exception;protected,void,insert,final,camel,context,camel,context,final,string,correlation,id,final,exchange,exchange,string,repository,name,throws,exception,int,total,parameter,index,2,string,builder,query,builder,new,string,builder,append,insert,into,append,repository,name,append,append,exchange,append,append,id,if,store,body,as,text,query,builder,append,append,body,total,parameter,index,if,has,headers,to,store,as,text,for,string,header,name,headers,to,store,as,text,query,builder,append,append,header,name,total,parameter,index,query,builder,append,values,for,int,i,0,i,total,parameter,index,1,i,query,builder,append,query,builder,append,string,sql,query,builder,to,string,insert,and,update,helper,camel,context,correlation,id,exchange,sql,true
JdbcAggregationRepository -> public void setReturnOldExchange(boolean returnOldExchange);1493019886;@param returnOldExchange Whether the get operation should return the old existing Exchange if any existed._By default this option is false to optimize as we do not need the old exchange when_aggregating;public void setReturnOldExchange(boolean returnOldExchange) {_        this.returnOldExchange = returnOldExchange__    };param,return,old,exchange,whether,the,get,operation,should,return,the,old,existing,exchange,if,any,existed,by,default,this,option,is,false,to,optimize,as,we,do,not,need,the,old,exchange,when,aggregating;public,void,set,return,old,exchange,boolean,return,old,exchange,this,return,old,exchange,return,old,exchange
JdbcAggregationRepository -> public void setReturnOldExchange(boolean returnOldExchange);1524063178;@param returnOldExchange Whether the get operation should return the old existing Exchange if any existed._By default this option is false to optimize as we do not need the old exchange when_aggregating;public void setReturnOldExchange(boolean returnOldExchange) {_        this.returnOldExchange = returnOldExchange__    };param,return,old,exchange,whether,the,get,operation,should,return,the,old,existing,exchange,if,any,existed,by,default,this,option,is,false,to,optimize,as,we,do,not,need,the,old,exchange,when,aggregating;public,void,set,return,old,exchange,boolean,return,old,exchange,this,return,old,exchange,return,old,exchange
JdbcAggregationRepository -> public void setReturnOldExchange(boolean returnOldExchange);1536687142;@param returnOldExchange Whether the get operation should return the old existing Exchange if any existed._By default this option is false to optimize as we do not need the old exchange when_aggregating;public void setReturnOldExchange(boolean returnOldExchange) {_        this.returnOldExchange = returnOldExchange__    };param,return,old,exchange,whether,the,get,operation,should,return,the,old,existing,exchange,if,any,existed,by,default,this,option,is,false,to,optimize,as,we,do,not,need,the,old,exchange,when,aggregating;public,void,set,return,old,exchange,boolean,return,old,exchange,this,return,old,exchange,return,old,exchange
JdbcAggregationRepository -> public void setReturnOldExchange(boolean returnOldExchange);1540108163;@param returnOldExchange Whether the get operation should return the old existing Exchange if any existed._By default this option is false to optimize as we do not need the old exchange when_aggregating;public void setReturnOldExchange(boolean returnOldExchange) {_        this.returnOldExchange = returnOldExchange__    };param,return,old,exchange,whether,the,get,operation,should,return,the,old,existing,exchange,if,any,existed,by,default,this,option,is,false,to,optimize,as,we,do,not,need,the,old,exchange,when,aggregating;public,void,set,return,old,exchange,boolean,return,old,exchange,this,return,old,exchange,return,old,exchange
JdbcAggregationRepository -> public void setReturnOldExchange(boolean returnOldExchange);1548175645;@param returnOldExchange Whether the get operation should return the old existing Exchange if any existed._By default this option is false to optimize as we do not need the old exchange when_aggregating;public void setReturnOldExchange(boolean returnOldExchange) {_        this.returnOldExchange = returnOldExchange__    };param,return,old,exchange,whether,the,get,operation,should,return,the,old,existing,exchange,if,any,existed,by,default,this,option,is,false,to,optimize,as,we,do,not,need,the,old,exchange,when,aggregating;public,void,set,return,old,exchange,boolean,return,old,exchange,this,return,old,exchange,return,old,exchange
JdbcAggregationRepository -> public void setHeadersToStoreAsText(List<String> headersToStoreAsText);1493019886;Allows to store headers as String which is human readable. By default this option is disabled,_storing the headers in binary format._@param headersToStoreAsText the list of headers to store as String;public void setHeadersToStoreAsText(List<String> headersToStoreAsText) {_        this.headersToStoreAsText = headersToStoreAsText__    };allows,to,store,headers,as,string,which,is,human,readable,by,default,this,option,is,disabled,storing,the,headers,in,binary,format,param,headers,to,store,as,text,the,list,of,headers,to,store,as,string;public,void,set,headers,to,store,as,text,list,string,headers,to,store,as,text,this,headers,to,store,as,text,headers,to,store,as,text
JdbcAggregationRepository -> public void setHeadersToStoreAsText(List<String> headersToStoreAsText);1524063178;Allows to store headers as String which is human readable. By default this option is disabled,_storing the headers in binary format._@param headersToStoreAsText the list of headers to store as String;public void setHeadersToStoreAsText(List<String> headersToStoreAsText) {_        this.headersToStoreAsText = headersToStoreAsText__    };allows,to,store,headers,as,string,which,is,human,readable,by,default,this,option,is,disabled,storing,the,headers,in,binary,format,param,headers,to,store,as,text,the,list,of,headers,to,store,as,string;public,void,set,headers,to,store,as,text,list,string,headers,to,store,as,text,this,headers,to,store,as,text,headers,to,store,as,text
JdbcAggregationRepository -> public void setHeadersToStoreAsText(List<String> headersToStoreAsText);1536687142;Allows to store headers as String which is human readable. By default this option is disabled,_storing the headers in binary format._@param headersToStoreAsText the list of headers to store as String;public void setHeadersToStoreAsText(List<String> headersToStoreAsText) {_        this.headersToStoreAsText = headersToStoreAsText__    };allows,to,store,headers,as,string,which,is,human,readable,by,default,this,option,is,disabled,storing,the,headers,in,binary,format,param,headers,to,store,as,text,the,list,of,headers,to,store,as,string;public,void,set,headers,to,store,as,text,list,string,headers,to,store,as,text,this,headers,to,store,as,text,headers,to,store,as,text
JdbcAggregationRepository -> public void setHeadersToStoreAsText(List<String> headersToStoreAsText);1540108163;Allows to store headers as String which is human readable. By default this option is disabled,_storing the headers in binary format._@param headersToStoreAsText the list of headers to store as String;public void setHeadersToStoreAsText(List<String> headersToStoreAsText) {_        this.headersToStoreAsText = headersToStoreAsText__    };allows,to,store,headers,as,string,which,is,human,readable,by,default,this,option,is,disabled,storing,the,headers,in,binary,format,param,headers,to,store,as,text,the,list,of,headers,to,store,as,string;public,void,set,headers,to,store,as,text,list,string,headers,to,store,as,text,this,headers,to,store,as,text,headers,to,store,as,text
JdbcAggregationRepository -> public void setHeadersToStoreAsText(List<String> headersToStoreAsText);1548175645;Allows to store headers as String which is human readable. By default this option is disabled,_storing the headers in binary format._@param headersToStoreAsText the list of headers to store as String;public void setHeadersToStoreAsText(List<String> headersToStoreAsText) {_        this.headersToStoreAsText = headersToStoreAsText__    };allows,to,store,headers,as,string,which,is,human,readable,by,default,this,option,is,disabled,storing,the,headers,in,binary,format,param,headers,to,store,as,text,the,list,of,headers,to,store,as,string;public,void,set,headers,to,store,as,text,list,string,headers,to,store,as,text,this,headers,to,store,as,text,headers,to,store,as,text
JdbcAggregationRepository -> public void setRecoveryInterval(long interval, TimeUnit timeUnit);1493019886;If recovery is enabled then a background task is run every x'th time to scan for failed exchanges to recover_and resubmit. By default this interval is 5000 millis._@param interval  the interval_@param timeUnit  the time unit;public void setRecoveryInterval(long interval, TimeUnit timeUnit) {_        this.recoveryInterval = timeUnit.toMillis(interval)__    };if,recovery,is,enabled,then,a,background,task,is,run,every,x,th,time,to,scan,for,failed,exchanges,to,recover,and,resubmit,by,default,this,interval,is,5000,millis,param,interval,the,interval,param,time,unit,the,time,unit;public,void,set,recovery,interval,long,interval,time,unit,time,unit,this,recovery,interval,time,unit,to,millis,interval
JdbcAggregationRepository -> public void setRecoveryInterval(long interval, TimeUnit timeUnit);1524063178;If recovery is enabled then a background task is run every x'th time to scan for failed exchanges to recover_and resubmit. By default this interval is 5000 millis._@param interval  the interval_@param timeUnit  the time unit;public void setRecoveryInterval(long interval, TimeUnit timeUnit) {_        this.recoveryInterval = timeUnit.toMillis(interval)__    };if,recovery,is,enabled,then,a,background,task,is,run,every,x,th,time,to,scan,for,failed,exchanges,to,recover,and,resubmit,by,default,this,interval,is,5000,millis,param,interval,the,interval,param,time,unit,the,time,unit;public,void,set,recovery,interval,long,interval,time,unit,time,unit,this,recovery,interval,time,unit,to,millis,interval
JdbcAggregationRepository -> public void setRecoveryInterval(long interval, TimeUnit timeUnit);1536687142;If recovery is enabled then a background task is run every x'th time to scan for failed exchanges to recover_and resubmit. By default this interval is 5000 millis._@param interval  the interval_@param timeUnit  the time unit;public void setRecoveryInterval(long interval, TimeUnit timeUnit) {_        this.recoveryInterval = timeUnit.toMillis(interval)__    };if,recovery,is,enabled,then,a,background,task,is,run,every,x,th,time,to,scan,for,failed,exchanges,to,recover,and,resubmit,by,default,this,interval,is,5000,millis,param,interval,the,interval,param,time,unit,the,time,unit;public,void,set,recovery,interval,long,interval,time,unit,time,unit,this,recovery,interval,time,unit,to,millis,interval
JdbcAggregationRepository -> public void setRecoveryInterval(long interval, TimeUnit timeUnit);1540108163;If recovery is enabled then a background task is run every x'th time to scan for failed exchanges to recover_and resubmit. By default this interval is 5000 millis._@param interval  the interval_@param timeUnit  the time unit;public void setRecoveryInterval(long interval, TimeUnit timeUnit) {_        this.recoveryInterval = timeUnit.toMillis(interval)__    };if,recovery,is,enabled,then,a,background,task,is,run,every,x,th,time,to,scan,for,failed,exchanges,to,recover,and,resubmit,by,default,this,interval,is,5000,millis,param,interval,the,interval,param,time,unit,the,time,unit;public,void,set,recovery,interval,long,interval,time,unit,time,unit,this,recovery,interval,time,unit,to,millis,interval
JdbcAggregationRepository -> public void setRecoveryInterval(long interval, TimeUnit timeUnit);1548175645;If recovery is enabled then a background task is run every x'th time to scan for failed exchanges to recover_and resubmit. By default this interval is 5000 millis._@param interval  the interval_@param timeUnit  the time unit;public void setRecoveryInterval(long interval, TimeUnit timeUnit) {_        this.recoveryInterval = timeUnit.toMillis(interval)__    };if,recovery,is,enabled,then,a,background,task,is,run,every,x,th,time,to,scan,for,failed,exchanges,to,recover,and,resubmit,by,default,this,interval,is,5000,millis,param,interval,the,interval,param,time,unit,the,time,unit;public,void,set,recovery,interval,long,interval,time,unit,time,unit,this,recovery,interval,time,unit,to,millis,interval
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1298330858;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1301257798;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1304453778;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1307685726;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1314171397;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1315032962;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1358434169;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1373129971;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1374666033;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1376549254;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1382864099;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1455781764;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1493019886;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1524063178;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1536687142;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1540108163;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public final void setRepositoryName(String repositoryName);1548175645;@param repositoryName the repositoryName to set;public final void setRepositoryName(String repositoryName) {_        this.repositoryName = repositoryName__    };param,repository,name,the,repository,name,to,set;public,final,void,set,repository,name,string,repository,name,this,repository,name,repository,name
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1298330858;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1301257798;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1304453778;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1307685726;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1314171397;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1315032962;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1358434169;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1373129971;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1374666033;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1376549254;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1382864099;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1455781764;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1493019886;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1524063178;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1536687142;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1540108163;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource);1548175645;Creates an aggregation repository with the three mandatory parameters;public JdbcAggregationRepository(PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource) {_        this.setRepositoryName(repositoryName)__        this.setTransactionManager(transactionManager)__        this.setDataSource(dataSource)__    };creates,an,aggregation,repository,with,the,three,mandatory,parameters;public,jdbc,aggregation,repository,platform,transaction,manager,transaction,manager,string,repository,name,data,source,data,source,this,set,repository,name,repository,name,this,set,transaction,manager,transaction,manager,this,set,data,source,data,source
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1358434169;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1373129971;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1374666033;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1376549254;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1382864099;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1455781764;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1493019886;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<String>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,string,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1524063178;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1536687142;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1540108163;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,keys
JdbcAggregationRepository -> protected Set<String> getKeys(final String repositoryName);1548175645;Returns the keys in the given repository__@param repositoryName The name of the table_@return Set of keys in the given repository name;protected Set<String> getKeys(final String repositoryName) {_        return transactionTemplateReadOnly.execute(new TransactionCallback<LinkedHashSet<String>>() {_            public LinkedHashSet<String> doInTransaction(TransactionStatus status) {_                List<String> keys = jdbcTemplate.query("SELECT " + ID + " FROM " + repositoryName,_                        new RowMapper<String>() {_                            public String mapRow(ResultSet rs, int rowNum) throws SQLException {_                                String id = rs.getString(ID)__                                LOG.trace("getKey [{}]", id)__                                return id__                            }_                        })__                return new LinkedHashSet<>(keys)__            }_        })__    };returns,the,keys,in,the,given,repository,param,repository,name,the,name,of,the,table,return,set,of,keys,in,the,given,repository,name;protected,set,string,get,keys,final,string,repository,name,return,transaction,template,read,only,execute,new,transaction,callback,linked,hash,set,string,public,linked,hash,set,string,do,in,transaction,transaction,status,status,list,string,keys,jdbc,template,query,select,id,from,repository,name,new,row,mapper,string,public,string,map,row,result,set,rs,int,row,num,throws,sqlexception,string,id,rs,get,string,id,log,trace,get,key,id,return,id,return,new,linked,hash,set,keys
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1298330858;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1301257798;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1304453778;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1307685726;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1314171397;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1315032962;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1358434169;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1373129971;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1374666033;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1376549254;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1382864099;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1455781764;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1493019886;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1524063178;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1536687142;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1540108163;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setLobHandler(LobHandler lobHandler);1548175645;@param lobHandler the lobHandler to set;public void setLobHandler(LobHandler lobHandler) {_        this.lobHandler = lobHandler__    };param,lob,handler,the,lob,handler,to,set;public,void,set,lob,handler,lob,handler,lob,handler,this,lob,handler,lob,handler
JdbcAggregationRepository -> public void setUseRecovery(boolean useRecovery);1493019886;@param useRecovery Whether or not recovery is enabled. This option is by default true. When enabled the Camel_Aggregator automatic recover failed aggregated exchange and have them resubmittedd;public void setUseRecovery(boolean useRecovery) {_        this.useRecovery = useRecovery__    };param,use,recovery,whether,or,not,recovery,is,enabled,this,option,is,by,default,true,when,enabled,the,camel,aggregator,automatic,recover,failed,aggregated,exchange,and,have,them,resubmittedd;public,void,set,use,recovery,boolean,use,recovery,this,use,recovery,use,recovery
JdbcAggregationRepository -> public void setUseRecovery(boolean useRecovery);1524063178;@param useRecovery Whether or not recovery is enabled. This option is by default true. When enabled the Camel_Aggregator automatic recover failed aggregated exchange and have them resubmittedd;public void setUseRecovery(boolean useRecovery) {_        this.useRecovery = useRecovery__    };param,use,recovery,whether,or,not,recovery,is,enabled,this,option,is,by,default,true,when,enabled,the,camel,aggregator,automatic,recover,failed,aggregated,exchange,and,have,them,resubmittedd;public,void,set,use,recovery,boolean,use,recovery,this,use,recovery,use,recovery
JdbcAggregationRepository -> public void setUseRecovery(boolean useRecovery);1536687142;@param useRecovery Whether or not recovery is enabled. This option is by default true. When enabled the Camel_Aggregator automatic recover failed aggregated exchange and have them resubmittedd;public void setUseRecovery(boolean useRecovery) {_        this.useRecovery = useRecovery__    };param,use,recovery,whether,or,not,recovery,is,enabled,this,option,is,by,default,true,when,enabled,the,camel,aggregator,automatic,recover,failed,aggregated,exchange,and,have,them,resubmittedd;public,void,set,use,recovery,boolean,use,recovery,this,use,recovery,use,recovery
JdbcAggregationRepository -> public void setUseRecovery(boolean useRecovery);1540108163;@param useRecovery Whether or not recovery is enabled. This option is by default true. When enabled the Camel_Aggregator automatic recover failed aggregated exchange and have them resubmittedd;public void setUseRecovery(boolean useRecovery) {_        this.useRecovery = useRecovery__    };param,use,recovery,whether,or,not,recovery,is,enabled,this,option,is,by,default,true,when,enabled,the,camel,aggregator,automatic,recover,failed,aggregated,exchange,and,have,them,resubmittedd;public,void,set,use,recovery,boolean,use,recovery,this,use,recovery,use,recovery
JdbcAggregationRepository -> public void setUseRecovery(boolean useRecovery);1548175645;@param useRecovery Whether or not recovery is enabled. This option is by default true. When enabled the Camel_Aggregator automatic recover failed aggregated exchange and have them resubmittedd;public void setUseRecovery(boolean useRecovery) {_        this.useRecovery = useRecovery__    };param,use,recovery,whether,or,not,recovery,is,enabled,this,option,is,by,default,true,when,enabled,the,camel,aggregator,automatic,recover,failed,aggregated,exchange,and,have,them,resubmittedd;public,void,set,use,recovery,boolean,use,recovery,this,use,recovery,use,recovery
JdbcAggregationRepository -> public void setStoreBodyAsText(boolean storeBodyAsText);1493019886;@param storeBodyAsText Whether to store the message body as String which is human readable._By default this option is false storing the body in binary format.;public void setStoreBodyAsText(boolean storeBodyAsText) {_        this.storeBodyAsText = storeBodyAsText__    };param,store,body,as,text,whether,to,store,the,message,body,as,string,which,is,human,readable,by,default,this,option,is,false,storing,the,body,in,binary,format;public,void,set,store,body,as,text,boolean,store,body,as,text,this,store,body,as,text,store,body,as,text
JdbcAggregationRepository -> public void setStoreBodyAsText(boolean storeBodyAsText);1524063178;@param storeBodyAsText Whether to store the message body as String which is human readable._By default this option is false storing the body in binary format.;public void setStoreBodyAsText(boolean storeBodyAsText) {_        this.storeBodyAsText = storeBodyAsText__    };param,store,body,as,text,whether,to,store,the,message,body,as,string,which,is,human,readable,by,default,this,option,is,false,storing,the,body,in,binary,format;public,void,set,store,body,as,text,boolean,store,body,as,text,this,store,body,as,text,store,body,as,text
JdbcAggregationRepository -> public void setStoreBodyAsText(boolean storeBodyAsText);1536687142;@param storeBodyAsText Whether to store the message body as String which is human readable._By default this option is false storing the body in binary format.;public void setStoreBodyAsText(boolean storeBodyAsText) {_        this.storeBodyAsText = storeBodyAsText__    };param,store,body,as,text,whether,to,store,the,message,body,as,string,which,is,human,readable,by,default,this,option,is,false,storing,the,body,in,binary,format;public,void,set,store,body,as,text,boolean,store,body,as,text,this,store,body,as,text,store,body,as,text
JdbcAggregationRepository -> public void setStoreBodyAsText(boolean storeBodyAsText);1540108163;@param storeBodyAsText Whether to store the message body as String which is human readable._By default this option is false storing the body in binary format.;public void setStoreBodyAsText(boolean storeBodyAsText) {_        this.storeBodyAsText = storeBodyAsText__    };param,store,body,as,text,whether,to,store,the,message,body,as,string,which,is,human,readable,by,default,this,option,is,false,storing,the,body,in,binary,format;public,void,set,store,body,as,text,boolean,store,body,as,text,this,store,body,as,text,store,body,as,text
JdbcAggregationRepository -> public void setStoreBodyAsText(boolean storeBodyAsText);1548175645;@param storeBodyAsText Whether to store the message body as String which is human readable._By default this option is false storing the body in binary format.;public void setStoreBodyAsText(boolean storeBodyAsText) {_        this.storeBodyAsText = storeBodyAsText__    };param,store,body,as,text,whether,to,store,the,message,body,as,string,which,is,human,readable,by,default,this,option,is,false,storing,the,body,in,binary,format;public,void,set,store,body,as,text,boolean,store,body,as,text,this,store,body,as,text,store,body,as,text
JdbcAggregationRepository -> public LobHandler getLobHandler();1298330858;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1301257798;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1304453778;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1307685726;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1314171397;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1315032962;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1358434169;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1373129971;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1374666033;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1376549254;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1382864099;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1455781764;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1493019886;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1524063178;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1536687142;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1540108163;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public LobHandler getLobHandler();1548175645;@return the lobHandler;public LobHandler getLobHandler() {_        return lobHandler__    };return,the,lob,handler;public,lob,handler,get,lob,handler,return,lob,handler
JdbcAggregationRepository -> public JdbcAggregationRepository();1298330858;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1301257798;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1304453778;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1307685726;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1314171397;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1315032962;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1358434169;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1373129971;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1374666033;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1376549254;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1382864099;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1455781764;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1493019886;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1524063178;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1536687142;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1540108163;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public JdbcAggregationRepository();1548175645;Creates an aggregation repository;public JdbcAggregationRepository() {_    };creates,an,aggregation,repository;public,jdbc,aggregation,repository
JdbcAggregationRepository -> public void setDeadLetterUri(String deadLetterUri);1493019886;@param deadLetterUri  An endpoint uri for a Dead Letter Channel where exhausted recovered Exchanges will be_moved. If this option is used then the maximumRedeliveries option must also be provided._Important note : if the deadletter route throws an exception, it will be send again to DLQ_until it succeed !;public void setDeadLetterUri(String deadLetterUri) {_        this.deadLetterUri = deadLetterUri__    };param,dead,letter,uri,an,endpoint,uri,for,a,dead,letter,channel,where,exhausted,recovered,exchanges,will,be,moved,if,this,option,is,used,then,the,maximum,redeliveries,option,must,also,be,provided,important,note,if,the,deadletter,route,throws,an,exception,it,will,be,send,again,to,dlq,until,it,succeed;public,void,set,dead,letter,uri,string,dead,letter,uri,this,dead,letter,uri,dead,letter,uri
JdbcAggregationRepository -> public void setDeadLetterUri(String deadLetterUri);1524063178;@param deadLetterUri  An endpoint uri for a Dead Letter Channel where exhausted recovered Exchanges will be_moved. If this option is used then the maximumRedeliveries option must also be provided._Important note : if the deadletter route throws an exception, it will be send again to DLQ_until it succeed !;public void setDeadLetterUri(String deadLetterUri) {_        this.deadLetterUri = deadLetterUri__    };param,dead,letter,uri,an,endpoint,uri,for,a,dead,letter,channel,where,exhausted,recovered,exchanges,will,be,moved,if,this,option,is,used,then,the,maximum,redeliveries,option,must,also,be,provided,important,note,if,the,deadletter,route,throws,an,exception,it,will,be,send,again,to,dlq,until,it,succeed;public,void,set,dead,letter,uri,string,dead,letter,uri,this,dead,letter,uri,dead,letter,uri
JdbcAggregationRepository -> public void setDeadLetterUri(String deadLetterUri);1536687142;@param deadLetterUri  An endpoint uri for a Dead Letter Channel where exhausted recovered Exchanges will be_moved. If this option is used then the maximumRedeliveries option must also be provided._Important note : if the deadletter route throws an exception, it will be send again to DLQ_until it succeed !;public void setDeadLetterUri(String deadLetterUri) {_        this.deadLetterUri = deadLetterUri__    };param,dead,letter,uri,an,endpoint,uri,for,a,dead,letter,channel,where,exhausted,recovered,exchanges,will,be,moved,if,this,option,is,used,then,the,maximum,redeliveries,option,must,also,be,provided,important,note,if,the,deadletter,route,throws,an,exception,it,will,be,send,again,to,dlq,until,it,succeed;public,void,set,dead,letter,uri,string,dead,letter,uri,this,dead,letter,uri,dead,letter,uri
JdbcAggregationRepository -> public void setDeadLetterUri(String deadLetterUri);1540108163;@param deadLetterUri  An endpoint uri for a Dead Letter Channel where exhausted recovered Exchanges will be_moved. If this option is used then the maximumRedeliveries option must also be provided._Important note : if the deadletter route throws an exception, it will be send again to DLQ_until it succeed !;public void setDeadLetterUri(String deadLetterUri) {_        this.deadLetterUri = deadLetterUri__    };param,dead,letter,uri,an,endpoint,uri,for,a,dead,letter,channel,where,exhausted,recovered,exchanges,will,be,moved,if,this,option,is,used,then,the,maximum,redeliveries,option,must,also,be,provided,important,note,if,the,deadletter,route,throws,an,exception,it,will,be,send,again,to,dlq,until,it,succeed;public,void,set,dead,letter,uri,string,dead,letter,uri,this,dead,letter,uri,dead,letter,uri
JdbcAggregationRepository -> public void setDeadLetterUri(String deadLetterUri);1548175645;@param deadLetterUri  An endpoint uri for a Dead Letter Channel where exhausted recovered Exchanges will be_moved. If this option is used then the maximumRedeliveries option must also be provided._Important note : if the deadletter route throws an exception, it will be send again to DLQ_until it succeed !;public void setDeadLetterUri(String deadLetterUri) {_        this.deadLetterUri = deadLetterUri__    };param,dead,letter,uri,an,endpoint,uri,for,a,dead,letter,channel,where,exhausted,recovered,exchanges,will,be,moved,if,this,option,is,used,then,the,maximum,redeliveries,option,must,also,be,provided,important,note,if,the,deadletter,route,throws,an,exception,it,will,be,send,again,to,dlq,until,it,succeed;public,void,set,dead,letter,uri,string,dead,letter,uri,this,dead,letter,uri,dead,letter,uri
JdbcAggregationRepository -> public final void setDataSource(DataSource dataSource);1493019886;@param dataSource The DataSource to use for accessing the database;public final void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource___        jdbcTemplate = new JdbcTemplate(dataSource)__    };param,data,source,the,data,source,to,use,for,accessing,the,database;public,final,void,set,data,source,data,source,data,source,this,data,source,data,source,jdbc,template,new,jdbc,template,data,source
JdbcAggregationRepository -> public final void setDataSource(DataSource dataSource);1524063178;@param dataSource The DataSource to use for accessing the database;public final void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource___        jdbcTemplate = new JdbcTemplate(dataSource)__    };param,data,source,the,data,source,to,use,for,accessing,the,database;public,final,void,set,data,source,data,source,data,source,this,data,source,data,source,jdbc,template,new,jdbc,template,data,source
JdbcAggregationRepository -> public final void setDataSource(DataSource dataSource);1536687142;@param dataSource The DataSource to use for accessing the database;public final void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource___        jdbcTemplate = new JdbcTemplate(dataSource)__    };param,data,source,the,data,source,to,use,for,accessing,the,database;public,final,void,set,data,source,data,source,data,source,this,data,source,data,source,jdbc,template,new,jdbc,template,data,source
JdbcAggregationRepository -> public final void setDataSource(DataSource dataSource);1540108163;@param dataSource The DataSource to use for accessing the database;public final void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource___        jdbcTemplate = new JdbcTemplate(dataSource)__    };param,data,source,the,data,source,to,use,for,accessing,the,database;public,final,void,set,data,source,data,source,data,source,this,data,source,data,source,jdbc,template,new,jdbc,template,data,source
JdbcAggregationRepository -> public final void setDataSource(DataSource dataSource);1548175645;@param dataSource The DataSource to use for accessing the database;public final void setDataSource(DataSource dataSource) {_        this.dataSource = dataSource___        jdbcTemplate = new JdbcTemplate(dataSource)__    };param,data,source,the,data,source,to,use,for,accessing,the,database;public,final,void,set,data,source,data,source,data,source,this,data,source,data,source,jdbc,template,new,jdbc,template,data,source
