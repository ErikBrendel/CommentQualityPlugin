# id;timestamp;commentText;codeText;commentWords;codeWords
TokenMgrError -> public TokenMgrError(String message, int reason);1452335256;Constructor with message and reason.;public TokenMgrError(String message, int reason) {_    super(message)__    errorCode = reason__  };constructor,with,message,and,reason;public,token,mgr,error,string,message,int,reason,super,message,error,code,reason
TokenMgrError -> public TokenMgrError(String message, int reason);1452789249;Constructor with message and reason.;public TokenMgrError(String message, int reason) {_        super(message)__        errorCode = reason__    };constructor,with,message,and,reason;public,token,mgr,error,string,message,int,reason,super,message,error,code,reason
TokenMgrError -> public TokenMgrError(String message, int reason);1518162420;Constructor with message and reason.;public TokenMgrError(String message, int reason) {_    super(message)__    errorCode = reason__  };constructor,with,message,and,reason;public,token,mgr,error,string,message,int,reason,super,message,error,code,reason
TokenMgrError -> protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar);1452335256;Returns a detailed message for the Error when it is thrown by the_token manager to indicate a lexical error._Parameters :_EOFSeen     : indicates if EOF caused the lexical error_curLexState : lexical state in which this error occurred_errorLine   : line number when the error occurred_errorColumn : column number when the error occurred_errorAfter  : prefix that was seen before this error occurred_curchar     : the offending character_Note: You can customize the lexical error message by modifying this method.;protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {_    return("Lexical error at line " +_          errorLine + ", column " +_          errorColumn + ".  Encountered: " +_          (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +_          "after : \"" + addEscapes(errorAfter) + "\"")__  };returns,a,detailed,message,for,the,error,when,it,is,thrown,by,the,token,manager,to,indicate,a,lexical,error,parameters,eofseen,indicates,if,eof,caused,the,lexical,error,cur,lex,state,lexical,state,in,which,this,error,occurred,error,line,line,number,when,the,error,occurred,error,column,column,number,when,the,error,occurred,error,after,prefix,that,was,seen,before,this,error,occurred,curchar,the,offending,character,note,you,can,customize,the,lexical,error,message,by,modifying,this,method;protected,static,string,lexical,error,boolean,eofseen,int,lex,state,int,error,line,int,error,column,string,error,after,char,cur,char,return,lexical,error,at,line,error,line,column,error,column,encountered,eofseen,eof,add,escapes,string,value,of,cur,char,int,cur,char,after,add,escapes,error,after
TokenMgrError -> protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar);1452789249;Returns a detailed message for the Error when it is thrown by the_token manager to indicate a lexical error._Parameters :_EOFSeen     : indicates if EOF caused the lexical error_curLexState : lexical state in which this error occurred_errorLine   : line number when the error occurred_errorColumn : column number when the error occurred_errorAfter  : prefix that was seen before this error occurred_curchar     : the offending character_Note: You can customize the lexical error message by modifying this method.;protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {_        return ("Lexical error at line " +_                errorLine + ", column " +_                errorColumn + ".  Encountered: " +_                (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int) curChar + "), ") +_                "after : \"" + addEscapes(errorAfter) + "\"")__    };returns,a,detailed,message,for,the,error,when,it,is,thrown,by,the,token,manager,to,indicate,a,lexical,error,parameters,eofseen,indicates,if,eof,caused,the,lexical,error,cur,lex,state,lexical,state,in,which,this,error,occurred,error,line,line,number,when,the,error,occurred,error,column,column,number,when,the,error,occurred,error,after,prefix,that,was,seen,before,this,error,occurred,curchar,the,offending,character,note,you,can,customize,the,lexical,error,message,by,modifying,this,method;protected,static,string,lexical,error,boolean,eofseen,int,lex,state,int,error,line,int,error,column,string,error,after,char,cur,char,return,lexical,error,at,line,error,line,column,error,column,encountered,eofseen,eof,add,escapes,string,value,of,cur,char,int,cur,char,after,add,escapes,error,after
TokenMgrError -> protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar);1518162420;Returns a detailed message for the Error when it is thrown by the_token manager to indicate a lexical error._Parameters :_EOFSeen     : indicates if EOF caused the lexical error_curLexState : lexical state in which this error occurred_errorLine   : line number when the error occurred_errorColumn : column number when the error occurred_errorAfter  : prefix that was seen before this error occurred_curchar     : the offending character_Note: You can customize the lexical error message by modifying this method.;protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {_    return("Lexical error at line " +_          errorLine + ", column " +_          errorColumn + ".  Encountered: " +_          (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +_          "after : \"" + addEscapes(errorAfter) + "\"")__  };returns,a,detailed,message,for,the,error,when,it,is,thrown,by,the,token,manager,to,indicate,a,lexical,error,parameters,eofseen,indicates,if,eof,caused,the,lexical,error,cur,lex,state,lexical,state,in,which,this,error,occurred,error,line,line,number,when,the,error,occurred,error,column,column,number,when,the,error,occurred,error,after,prefix,that,was,seen,before,this,error,occurred,curchar,the,offending,character,note,you,can,customize,the,lexical,error,message,by,modifying,this,method;protected,static,string,lexical,error,boolean,eofseen,int,lex,state,int,error,line,int,error,column,string,error,after,char,cur,char,return,lexical,error,at,line,error,line,column,error,column,encountered,eofseen,eof,add,escapes,string,value,of,cur,char,int,cur,char,after,add,escapes,error,after
TokenMgrError -> public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason);1452335256;Full Constructor.;public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {_    this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason)__  };full,constructor;public,token,mgr,error,boolean,eofseen,int,lex,state,int,error,line,int,error,column,string,error,after,char,cur,char,int,reason,this,lexical,error,eofseen,lex,state,error,line,error,column,error,after,cur,char,reason
TokenMgrError -> public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason);1452789249;Full Constructor.;public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {_        this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason)__    };full,constructor;public,token,mgr,error,boolean,eofseen,int,lex,state,int,error,line,int,error,column,string,error,after,char,cur,char,int,reason,this,lexical,error,eofseen,lex,state,error,line,error,column,error,after,cur,char,reason
TokenMgrError -> public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason);1518162420;Full Constructor.;public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {_    this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason)__  };full,constructor;public,token,mgr,error,boolean,eofseen,int,lex,state,int,error,line,int,error,column,string,error,after,char,cur,char,int,reason,this,lexical,error,eofseen,lex,state,error,line,error,column,error,after,cur,char,reason
TokenMgrError -> public TokenMgrError();1452335256;No arg constructor.;public TokenMgrError() {_  };no,arg,constructor;public,token,mgr,error
TokenMgrError -> public TokenMgrError();1452789249;No arg constructor.;public TokenMgrError() {_    };no,arg,constructor;public,token,mgr,error
TokenMgrError -> public TokenMgrError();1518162420;No arg constructor.;public TokenMgrError() {_  };no,arg,constructor;public,token,mgr,error
TokenMgrError -> protected static final String addEscapes(String str);1452335256;Replaces unprintable characters by their escaped (or unicode escaped)_equivalents in the given string;protected static final String addEscapes(String str) {_    StringBuffer retval = new StringBuffer()__    char ch__    for (int i = 0_ i < str.length()_ i++) {_      switch (str.charAt(i))_      {_        case 0 :_          continue__        case '\b':_          retval.append("\\b")__          continue__        case '\t':_          retval.append("\\t")__          continue__        case '\n':_          retval.append("\\n")__          continue__        case '\f':_          retval.append("\\f")__          continue__        case '\r':_          retval.append("\\r")__          continue__        case '\"':_          retval.append("\\\"")__          continue__        case '\'':_          retval.append("\\\'")__          continue__        case '\\':_          retval.append("\\\\")__          continue__        default:_          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_            String s = "0000" + Integer.toString(ch, 16)__            retval.append("\\u" + s.substring(s.length() - 4, s.length()))__          } else {_            retval.append(ch)__          }_          continue__      }_    }_    return retval.toString()__  };replaces,unprintable,characters,by,their,escaped,or,unicode,escaped,equivalents,in,the,given,string;protected,static,final,string,add,escapes,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
TokenMgrError -> protected static final String addEscapes(String str);1452789249;Replaces unprintable characters by their escaped (or unicode escaped)_equivalents in the given string;protected static final String addEscapes(String str) {_        StringBuffer retval = new StringBuffer()__        char ch__        for (int i = 0_ i < str.length()_ i++) {_            switch (str.charAt(i)) {_                case 0:_                    continue__                case '\b':_                    retval.append("\\b")__                    continue__                case '\t':_                    retval.append("\\t")__                    continue__                case '\n':_                    retval.append("\\n")__                    continue__                case '\f':_                    retval.append("\\f")__                    continue__                case '\r':_                    retval.append("\\r")__                    continue__                case '\"':_                    retval.append("\\\"")__                    continue__                case '\'':_                    retval.append("\\\'")__                    continue__                case '\\':_                    retval.append("\\\\")__                    continue__                default:_                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_                        String s = "0000" + Integer.toString(ch, 16)__                        retval.append("\\u" + s.substring(s.length() - 4, s.length()))__                    } else {_                        retval.append(ch)__                    }_                    continue__            }_        }_        return retval.toString()__    };replaces,unprintable,characters,by,their,escaped,or,unicode,escaped,equivalents,in,the,given,string;protected,static,final,string,add,escapes,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
TokenMgrError -> protected static final String addEscapes(String str);1518162420;Replaces unprintable characters by their escaped (or unicode escaped)_equivalents in the given string;protected static final String addEscapes(String str) {_    StringBuffer retval = new StringBuffer()__    char ch__    for (int i = 0_ i < str.length()_ i++) {_      switch (str.charAt(i))_      {_        case 0 :_          continue__        case '\b':_          retval.append("\\b")__          continue__        case '\t':_          retval.append("\\t")__          continue__        case '\n':_          retval.append("\\n")__          continue__        case '\f':_          retval.append("\\f")__          continue__        case '\r':_          retval.append("\\r")__          continue__        case '\"':_          retval.append("\\\"")__          continue__        case '\'':_          retval.append("\\\'")__          continue__        case '\\':_          retval.append("\\\\")__          continue__        default:_          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {_            String s = "0000" + Integer.toString(ch, 16)__            retval.append("\\u" + s.substring(s.length() - 4, s.length()))__          } else {_            retval.append(ch)__          }_          continue__      }_    }_    return retval.toString()__  };replaces,unprintable,characters,by,their,escaped,or,unicode,escaped,equivalents,in,the,given,string;protected,static,final,string,add,escapes,string,str,string,buffer,retval,new,string,buffer,char,ch,for,int,i,0,i,str,length,i,switch,str,char,at,i,case,0,continue,case,b,retval,append,b,continue,case,t,retval,append,t,continue,case,n,retval,append,n,continue,case,f,retval,append,f,continue,case,r,retval,append,r,continue,case,retval,append,continue,case,retval,append,continue,case,retval,append,continue,default,if,ch,str,char,at,i,0x20,ch,0x7e,string,s,0000,integer,to,string,ch,16,retval,append,u,s,substring,s,length,4,s,length,else,retval,append,ch,continue,return,retval,to,string
TokenMgrError -> public String getMessage();1452335256;You can also modify the body of this method to customize your error messages._For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not_of end-users concern, so you can return something like :__"Internal Error : Please file a bug report .... "__from this method for such cases in the release version of your parser.;public String getMessage() {_    return super.getMessage()__  };you,can,also,modify,the,body,of,this,method,to,customize,your,error,messages,for,example,cases,like,and,are,not,of,end,users,concern,so,you,can,return,something,like,internal,error,please,file,a,bug,report,from,this,method,for,such,cases,in,the,release,version,of,your,parser;public,string,get,message,return,super,get,message
TokenMgrError -> public String getMessage();1452789249;You can also modify the body of this method to customize your error messages._For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not_of end-users concern, so you can return something like :__"Internal Error : Please file a bug report .... "__from this method for such cases in the release version of your parser.;public String getMessage() {_        return super.getMessage()__    };you,can,also,modify,the,body,of,this,method,to,customize,your,error,messages,for,example,cases,like,and,are,not,of,end,users,concern,so,you,can,return,something,like,internal,error,please,file,a,bug,report,from,this,method,for,such,cases,in,the,release,version,of,your,parser;public,string,get,message,return,super,get,message
TokenMgrError -> public String getMessage();1518162420;You can also modify the body of this method to customize your error messages._For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not_of end-users concern, so you can return something like :__"Internal Error : Please file a bug report .... "__from this method for such cases in the release version of your parser.;public String getMessage() {_    return super.getMessage()__  };you,can,also,modify,the,body,of,this,method,to,customize,your,error,messages,for,example,cases,like,and,are,not,of,end,users,concern,so,you,can,return,something,like,internal,error,please,file,a,bug,report,from,this,method,for,such,cases,in,the,release,version,of,your,parser;public,string,get,message,return,super,get,message
