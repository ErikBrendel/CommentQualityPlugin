commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {     ClassLoader cl = Thread.currentThread().getContextClassLoader().     return load(classDesc.getName(), cl, inLoader). }
false;protected;1;24;;protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {     ClassLoader cl = Thread.currentThread().getContextClassLoader().     Class[] cinterfaces = new Class[interfaces.length].     for (int i = 0. i < interfaces.length. i++) {         cinterfaces[i] = load(interfaces[i], cl).     }     try {         return Proxy.getProxyClass(cl, cinterfaces).     } catch (IllegalArgumentException e) {         try {             return Proxy.getProxyClass(inLoader, cinterfaces).         } catch (IllegalArgumentException e1) {         // ignore         }         try {             return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces).         } catch (IllegalArgumentException e2) {         // ignore         }         throw new ClassNotFoundException(null, e).     } }
false;private;2;16;;private Class<?> load(String className, ClassLoader... cl) throws ClassNotFoundException {     for (ClassLoader loader : cl) {         try {             return Class.forName(className, false, loader).         } catch (ClassNotFoundException e) {         // ignore         }     }     // fallback     final Class<?> clazz = PRIM_CLASSES.get(className).     if (clazz != null) {         return clazz.     } else {         return Class.forName(className, false, FALLBACK_CLASS_LOADER).     } }
