commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/storedProcedureTest.sql").build().     super.setUp(). }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;17;;@Test public void shouldExecuteStoredProcedure() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:query").     mock.expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("num1", 1).     headers.put("num2", 2).     template.requestBodyAndHeaders("direct:query", null, headers).     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertEquals(Integer.valueOf(-1), exchange.getIn().getBody(Map.class).get("resultofsub")).     assertNotNull(exchange.getIn().getHeader(SqlStoredConstants.SQL_STORED_UPDATE_COUNT)). }
false;public;0;8;;@Override public void configure() throws Exception {     // required for the sql component     getContext().getComponent("sql-stored", SqlStoredComponent.class).setDataSource(db).     from("direct:query").to("sql-stored:SUBNUMBERS(INTEGER ${headers.num1},INTEGER ${headers" + ".num2},OUT INTEGER resultofsub)").to("mock:query"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // required for the sql component             getContext().getComponent("sql-stored", SqlStoredComponent.class).setDataSource(db).             from("direct:query").to("sql-stored:SUBNUMBERS(INTEGER ${headers.num1},INTEGER ${headers" + ".num2},OUT INTEGER resultofsub)").to("mock:query").         }     }. }
