commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;20;;@Test public void testNamedParameterFromBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Map<String, Object> map = new HashMap<>().     map.put("lic", "ASF").     template.sendBody("direct:start", map).     mock.assertIsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(2, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Camel", row.get("PROJECT")).     row = assertIsInstanceOf(Map.class, received.get(1)).     assertEquals("AMQ", row.get("PROJECT")). }
false;public;0;17;;@Test public void testNamedParameterFromHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "This is a dummy body", "lic", "ASF").     mock.assertIsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(2, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Camel", row.get("PROJECT")).     row = assertIsInstanceOf(Map.class, received.get(1)).     assertEquals("AMQ", row.get("PROJECT")). }
false;public;0;7;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:start").to("sql:select * from projects where license = :#lic order by id").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:start").to("sql:select * from projects where license = :#lic order by id").to("mock:result").         }     }. }
