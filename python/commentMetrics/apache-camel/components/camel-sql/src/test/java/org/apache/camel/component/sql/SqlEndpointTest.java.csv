commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSQLEndpoint() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;12;;public void configure() throws Exception {     SqlEndpoint sql = new SqlEndpoint().     sql.setCamelContext(context).     sql.setJdbcTemplate(new JdbcTemplate(db)).     sql.setQuery("select * from projects").     context.addEndpoint("mysql", sql).     from("direct:start").to("mysql").to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             SqlEndpoint sql = new SqlEndpoint().             sql.setCamelContext(context).             sql.setJdbcTemplate(new JdbcTemplate(db)).             sql.setQuery("select * from projects").             context.addEndpoint("mysql", sql).             from("direct:start").to("mysql").to("mock:result").         }     }. }
