commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;14;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // START SNIPPET: e2     // this is the database we create with some initial data for our unit test     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     // END SNIPPET: e2     jndi.bind("jdbc/myDataSource", db).     return jndi. }
false;public;0;24;;@Test public void testSimpleBody() throws Exception {     // START SNIPPET: e3     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // send the query to direct that will route it to the sql where we will execute the query     // and bind the parameters with the data from the body. The body only contains one value     // in this case (XXX) but if we should use multi values then the body will be iterated     // so we could supply a List<String> instead containing each binding value.     template.sendBody("direct:simple", "XXX").     mock.assertIsSatisfied().     // the result is a List     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     // and each row in the list is a Map     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     // and we should be able the get the project from the map that should be Linux     assertEquals("Linux", row.get("PROJECT")). // END SNIPPET: e3 }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;7;;public void configure() {     // START SNIPPET: e1     from("direct:simple").to("sql:select * from projects where license = # order by id?dataSource=#jdbc/myDataSource").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:simple").to("sql:select * from projects where license = # order by id?dataSource=#jdbc/myDataSource").to("mock:result").         // END SNIPPET: e1         }     }. }
