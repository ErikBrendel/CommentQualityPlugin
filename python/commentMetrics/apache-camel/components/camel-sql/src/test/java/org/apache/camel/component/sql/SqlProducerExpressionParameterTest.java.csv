commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;15;;@Test public void testNamedParameterFromExpression() throws Exception {     result.expectedMessageCount(1).     template.sendBodyAndProperty("direct:start", "This is a dummy body", "license", "ASF").     result.assertIsSatisfied().     List<?> received = assertIsInstanceOf(List.class, result.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(2, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Camel", row.get("PROJECT")).     row = assertIsInstanceOf(Map.class, received.get(1)).     assertEquals("AMQ", row.get("PROJECT")). }
false;public;0;13;;@Test public void testNamedParameterFromSimpleExpression() throws Exception {     resultSimple.expectedMessageCount(1).     template.sendBodyAndProperty("direct:start-simple", "This is a dummy body", "license", "XXX").     resultSimple.assertIsSatisfied().     List<?> received = assertIsInstanceOf(List.class, resultSimple.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(1, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Linux", row.get("PROJECT")). }
false;public;0;7;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:start").to("sql:select * from projects where license = :#${exchangeProperty.license} order by id").to("mock:result").     from("direct:start-simple").to("sql:select * from projects where license = :#$simple{exchangeProperty.license} order by id").to("mock:result-simple"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:start").to("sql:select * from projects where license = :#${exchangeProperty.license} order by id").to("mock:result").             from("direct:start-simple").to("sql:select * from projects where license = :#$simple{exchangeProperty.license} order by id").to("mock:result-simple").         }     }. }
