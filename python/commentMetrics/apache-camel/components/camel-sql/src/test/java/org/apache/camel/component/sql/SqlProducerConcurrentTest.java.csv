commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;4;;public List<?> call() throws Exception {     int id = (index % 3) + 1.     return template.requestBody("direct:simple", "" + id, List.class). }
false;private;2;34;;private void doSendMessages(int files, int poolSize) throws Exception {     mockEndpoint.expectedMessageCount(files).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     // we access the responses Map below only inside the main thread,     // so no need for a thread-safe Map implementation     Map<Integer, Future<List<?>>> responses = new HashMap<>().     for (int i = 0. i < files. i++) {         final int index = i.         Future<List<?>> out = executor.submit(new Callable<List<?>>() {              public List<?> call() throws Exception {                 int id = (index % 3) + 1.                 return template.requestBody("direct:simple", "" + id, List.class).             }         }).         responses.put(index, out).     }     assertMockEndpointsSatisfied().     assertEquals(files, responses.size()).     for (int i = 0. i < files. i++) {         List<?> rows = responses.get(i).get().         Map<?, ?> columns = assertIsInstanceOf(Map.class, rows.get(0)).         if (i % 3 == 0) {             assertEquals("Camel", columns.get("PROJECT")).         } else if (i % 3 == 1) {             assertEquals("AMQ", columns.get("PROJECT")).         } else {             assertEquals("Linux", columns.get("PROJECT")).         }     }     executor.shutdownNow(). }
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;5;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:simple").to("sql:select * from projects where id = # order by id").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:simple").to("sql:select * from projects where id = # order by id").to("mock:result").         }     }. }
