commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     dataSource = context.getRegistry().lookupByNameAndType("dataSource", DataSource.class).     jdbcTemplate = new JdbcTemplate(dataSource).     jdbcTemplate.afterPropertiesSet(). }
false;public;0;22;;@Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     resultEndpoint.expectedBodiesReceived("one", "two", "three").     errorEndpoint.expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "one", "messageId", "1").     template.sendBodyAndHeader("direct:start", "two", "messageId", "2").     template.sendBodyAndHeader("direct:start", "one", "messageId", "1").     template.sendBodyAndHeader("direct:start", "two", "messageId", "2").     template.sendBodyAndHeader("direct:start", "one", "messageId", "1").     template.sendBodyAndHeader("direct:start", "three", "messageId", "3").     assertMockEndpointsSatisfied().     // all 3 messages should be in jdbc repo     List<String> receivedMessageIds = jdbcTemplate.queryForList(SELECT_ALL_STRING, String.class, PROCESSOR_NAME).     assertEquals(3, receivedMessageIds.size()).     assertTrue(receivedMessageIds.contains("1")).     assertTrue(receivedMessageIds.contains("2")).     assertTrue(receivedMessageIds.contains("3")). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/processor/idempotent/jdbc/customized-spring.xml"). }
