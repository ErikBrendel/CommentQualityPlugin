commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testAggregateDiscardOnTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     // wait 2 seconds     Thread.sleep(2000).     mock.assertIsSatisfied().     // now send 3 which does not timeout     mock.reset().     mock.expectedBodiesReceived("C+D+E").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     // should complete before timeout     mock.await(1500, TimeUnit.MILLISECONDS). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(3).aggregationRepository(repo).completionTimeout(1000).discardOnCompletionTimeout().to("mock:aggregated"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(3).aggregationRepository(repo).completionTimeout(1000).discardOnCompletionTimeout().to("mock:aggregated").         }     }. }
