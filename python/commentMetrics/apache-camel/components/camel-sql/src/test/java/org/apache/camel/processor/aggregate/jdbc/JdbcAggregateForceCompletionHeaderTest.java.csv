commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testForceCompletionTrueExclusive() throws Exception {     getMockEndpoint("mock:aggregated").expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "test1", "id", "1").     template.sendBodyAndHeader("direct:start", "test2", "id", "2").     template.sendBodyAndHeader("direct:start", "test3", "id", "1").     template.sendBodyAndHeader("direct:start", "test4", "id", "2").     assertMockEndpointsSatisfied().     getMockEndpoint("mock:aggregated").expectedMessageCount(2).     getMockEndpoint("mock:aggregated").expectedBodiesReceivedInAnyOrder("test1test3", "test2test4").     getMockEndpoint("mock:aggregated").expectedPropertyReceived(Exchange.AGGREGATED_COMPLETED_BY, "force").     // now send the signal message to trigger completion of all groups, message should NOT be aggregated     template.sendBodyAndHeader("direct:start", "test5", Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, true).     assertMockEndpointsSatisfied(). }
false;public;0;24;;@Test public void testForceCompletionTrueInclusive() throws Exception {     getMockEndpoint("mock:aggregated").expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "test1", "id", "1").     template.sendBodyAndHeader("direct:start", "test2", "id", "2").     template.sendBodyAndHeader("direct:start", "test3", "id", "1").     template.sendBodyAndHeader("direct:start", "test4", "id", "2").     assertMockEndpointsSatisfied().     getMockEndpoint("mock:aggregated").expectedMessageCount(3).     getMockEndpoint("mock:aggregated").expectedBodiesReceivedInAnyOrder("test1test3", "test2test4", "test5").     getMockEndpoint("mock:aggregated").expectedPropertyReceived(Exchange.AGGREGATED_COMPLETED_BY, "force").     // now send a message to trigger completion of all groups, message should be aggregated     Map<String, Object> headers = new HashMap<>().     headers.put("id", "3").     headers.put(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE, true).     template.sendBodyAndHeaders("direct:start", "test5", headers).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // here is the Camel route where we aggregate     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(10).aggregationRepository(repo).to("mock:aggregated"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // here is the Camel route where we aggregate             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(10).aggregationRepository(repo).to("mock:aggregated").         }     }. }
