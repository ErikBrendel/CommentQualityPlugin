commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void deserialize() throws IOException, ClassNotFoundException {     CamelContext context = new DefaultCamelContext().     final DefaultExchange exchange = new DefaultExchange(context).     final List<MyObject> objects = new ArrayList<>().     final MyObject o = new MyObject("leb", "hello".getBytes()).     objects.add(o).     exchange.getIn().setBody(objects).     final DefaultExchangeHolder deh = DefaultExchangeHolder.marshal(exchange).     final ByteArrayOutputStream baos = new ByteArrayOutputStream().     final ObjectOutputStream oos = new ObjectOutputStream(baos).     oos.writeObject(deh).     oos.flush().     final byte[] serialized = baos.toByteArray().     final ObjectInputStream bis = new ClassLoadingAwareObjectInputStream(context, new ByteArrayInputStream(serialized)).     final DefaultExchangeHolder deserialized = (DefaultExchangeHolder) bis.readObject().     final DefaultExchange exchange2 = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange2, deserialized).     List<MyObject> receivedObjects = exchange2.getIn().getBody(List.class).     assertEquals(1, receivedObjects.size()).     assertEquals(o, receivedObjects.get(0)). }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     MyObject myObject = (MyObject) o.     if (name != null ? !name.equals(myObject.name) : myObject.name != null) {         return false.     }     return Arrays.equals(content, myObject.content). }
false;public;0;6;;@Override public int hashCode() {     int result = name != null ? name.hashCode() : 0.     result = 31 * result + Arrays.hashCode(content).     return result. }
