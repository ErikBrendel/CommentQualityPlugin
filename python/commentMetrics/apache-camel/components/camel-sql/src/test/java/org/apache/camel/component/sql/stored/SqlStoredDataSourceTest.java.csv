commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;14;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     // START SNIPPET: e2     // this is the database we create with some initial data for our unit test     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/storedProcedureTest.sql").build().     // END SNIPPET: e2     jndi.bind("jdbc/myDataSource", db).     return jndi. }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;12;;@Test public void shouldExecuteStoredProcedure() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:query").     mock.expectedMessageCount(1).     template.requestBody("direct:query", "").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertNotNull(exchange.getIn().getHeader(SqlStoredConstants.SQL_STORED_UPDATE_COUNT)). }
false;public;0;6;;@Override public void configure() throws Exception {     // required for the sql component     from("direct:query").to("sql-stored:NILADIC()?dataSource=#jdbc/myDataSource").to("mock:query"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // required for the sql component             from("direct:query").to("sql-stored:NILADIC()?dataSource=#jdbc/myDataSource").to("mock:query").         }     }. }
