commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase2.sql").build().     jdbcTemplate = new JdbcTemplate(db).     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;13;;@Test public void testJSON() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     String json = context.getTypeConverter().convertTo(String.class, new File("src/test/resources/servlet.json")).     template.sendBody("direct:start", json).     mock.assertIsSatisfied().     assertEquals(new Integer(4), jdbcTemplate.queryForObject("select count(*) from projects", Integer.class)). }
false;public;0;7;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:start").to("sql:insert into projects (id, project, license, description) values (4, 'Food, Inc', 'ASF', #)").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:start").to("sql:insert into projects (id, project, license, description) values (4, 'Food, Inc', 'ASF', #)").to("mock:result").         }     }. }
