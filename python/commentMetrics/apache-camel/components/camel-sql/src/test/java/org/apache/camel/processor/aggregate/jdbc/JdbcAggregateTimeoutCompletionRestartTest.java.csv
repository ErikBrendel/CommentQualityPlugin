commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testJdbcAggregateTimeoutCompletionRestart() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     // stop Camel     context.stop().     assertEquals(0, mock.getReceivedCounter()).     // start Camel again, and the timeout should trigger a completion     context.start().     mock = getMockEndpoint("mock:aggregated").     mock.expectedBodiesReceived("ABC").     assertMockEndpointsSatisfied().     assertEquals(1, mock.getReceivedCounter()). }
false;public;0;9;;@Override public void configure() throws Exception {     // here is the Camel route where we aggregate     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionTimeout(3000).aggregationRepository(repo).to("mock:aggregated"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // here is the Camel route where we aggregate             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionTimeout(3000).aggregationRepository(repo).to("mock:aggregated").         }     }. }
