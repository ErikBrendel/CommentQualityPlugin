commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     super.setUp().     jdbc = new JdbcTemplate(db).     jdbc.execute("CREATE TABLE CUSTOMER (ID VARCHAR(15) NOT NULL PRIMARY KEY, NAME VARCHAR(100))"). }
false;protected;0;19;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).build().     reg.bind("testdb", db).     DataSourceTransactionManager txMgr = new DataSourceTransactionManager().     txMgr.setDataSource(db).     reg.bind("txManager", txMgr).     SpringTransactionPolicy txPolicy = new SpringTransactionPolicy().     txPolicy.setTransactionManager(txMgr).     txPolicy.setPropagationBehaviorName("PROPAGATION_REQUIRED").     reg.bind("required", txPolicy).     return reg. }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust2','muellerc')"). }
false;public;0;11;;public void configure() throws Exception {     from("direct:start").routeId("commit").transacted("required").to(sqlEndpoint).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust2','muellerc')").         }     }).to(sqlEndpoint). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','cmueller')"). }
false;public;0;38;;@Test public void testCommit() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").routeId("commit").transacted("required").to(sqlEndpoint).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust2','muellerc')").                 }             }).to(sqlEndpoint).         }     }).     Exchange exchange = template.send(startEndpoint, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','cmueller')").         }     }).     assertFalse(exchange.isFailed()).     long count = jdbc.queryForObject("select count(*) from customer", Long.class).     assertEquals(2, count).     Map<String, Object> map = jdbc.queryForMap("select * from customer where id = 'cust1'").     assertEquals(2, map.size()).     assertEquals("cust1", map.get("ID")).     assertEquals("cmueller", map.get("NAME")).     map = jdbc.queryForMap("select * from customer where id = 'cust2'").     assertEquals(2, map.size()).     assertEquals("cust2", map.get("ID")).     assertEquals("muellerc", map.get("NAME")). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // primary key violation     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','muellerc')"). }
false;public;0;12;;public void configure() throws Exception {     from("direct:start").routeId("rollback").transacted("required").to(sqlEndpoint).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // primary key violation             exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','muellerc')").         }     }).to(sqlEndpoint). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','cmueller')"). }
false;public;0;29;;@Test public void testRollbackAfterExceptionInSecondStatement() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").routeId("rollback").transacted("required").to(sqlEndpoint).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // primary key violation                     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','muellerc')").                 }             }).to(sqlEndpoint).         }     }).     Exchange exchange = template.send(startEndpoint, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','cmueller')").         }     }).     assertTrue(exchange.isFailed()).     long count = jdbc.queryForObject("select count(*) from customer", Long.class).     assertEquals(0, count). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new Exception("forced Exception"). }
false;public;0;11;;public void configure() throws Exception {     from("direct:start").routeId("rollback2").transacted("required").to(sqlEndpoint).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new Exception("forced Exception").         }     }). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','cmueller')"). }
false;public;0;28;;@Test public void testRollbackAfterAnException() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").routeId("rollback2").transacted("required").to(sqlEndpoint).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new Exception("forced Exception").                 }             }).         }     }).     Exchange exchange = template.send(startEndpoint, new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(SqlConstants.SQL_QUERY, "insert into customer values('cust1','cmueller')").         }     }).     assertTrue(exchange.isFailed()).     long count = jdbc.queryForObject("select count(*) from customer", Long.class).     assertEquals(0, count). }
