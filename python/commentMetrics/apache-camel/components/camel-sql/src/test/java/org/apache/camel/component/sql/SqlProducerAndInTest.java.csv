commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;16;;@Test public void testQueryInArray() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:query").     mock.expectedMessageCount(1).     template.requestBodyAndHeader("direct:query", "ASF", "names", new String[] { "Camel", "AMQ" }).     assertMockEndpointsSatisfied().     List list = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     assertEquals(2, list.size()).     Map row = (Map) list.get(0).     assertEquals("Camel", row.get("PROJECT")).     row = (Map) list.get(1).     assertEquals("AMQ", row.get("PROJECT")). }
false;public;0;20;;@Test public void testQueryInList() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:query").     mock.expectedMessageCount(1).     List<String> names = new ArrayList<>().     names.add("Camel").     names.add("AMQ").     template.requestBodyAndHeader("direct:query", "ASF", "names", names).     assertMockEndpointsSatisfied().     List list = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     assertEquals(2, list.size()).     Map row = (Map) list.get(0).     assertEquals("Camel", row.get("PROJECT")).     row = (Map) list.get(1).     assertEquals("AMQ", row.get("PROJECT")). }
false;public;0;16;;@Test public void testQueryInString() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:query").     mock.expectedMessageCount(1).     template.requestBodyAndHeader("direct:query", "ASF", "names", "Camel,AMQ").     assertMockEndpointsSatisfied().     List list = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     assertEquals(2, list.size()).     Map row = (Map) list.get(0).     assertEquals("Camel", row.get("PROJECT")).     row = (Map) list.get(1).     assertEquals("AMQ", row.get("PROJECT")). }
false;public;0;10;;@Override public void configure() throws Exception {     // required for the sql component     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:query").to("sql:classpath:sql/selectProjectsAndIn.sql").to("log:query").to("mock:query"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // required for the sql component             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:query").to("sql:classpath:sql/selectProjectsAndIn.sql").to("log:query").to("mock:query").         }     }. }
