commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testPreserveHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("foo", "bar").     template.sendBody("direct:start", "").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;10;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     errorHandler(noErrorHandler()).     from("direct:start").setHeader("foo", constant("bar")).to("sql:select * from projects").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             errorHandler(noErrorHandler()).             from("direct:start").setHeader("foo", constant("bar")).to("sql:select * from projects").to("mock:result").         }     }. }
