commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testJdbcAggregate() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedBodiesReceived("ABCDE").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS).     // from endpoint should be preserved     assertEquals("direct://start", mock.getReceivedExchanges().get(0).getFromEndpoint().getEndpointUri()). }
false;public;0;9;;@Override public void configure() throws Exception {     // here is the Camel route where we aggregate     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).to("mock:aggregated"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // here is the Camel route where we aggregate             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).to("mock:aggregated").         }     }. }
