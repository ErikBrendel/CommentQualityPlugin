commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     jdbcTemplate = new JdbcTemplate(db).     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;18;;@Test public void testConsume() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("The project is Camel", "The project is AMQ", "The project is Linux").     assertMockEndpointsSatisfied().     // some servers may be a bit slow for this     for (int i = 0. i < 5. i++) {         // give it a little time to delete         Thread.sleep(200).         int rows = jdbcTemplate.queryForObject("select count(*) from projects", Integer.class).         if (rows == 0) {             break.         }     }     assertEquals("Should have deleted all 3 rows", new Integer(0), jdbcTemplate.queryForObject("select count(*) from projects", Integer.class)). }
false;public;0;10;;@Override public void configure() throws Exception {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     // even if we transform the exchange we can still do onConsume as we have the original data at     // the point when onConsume is executed     from("sql:select * from projects order by id?consumer.initialDelay=0&consumer.delay=50&consumer.onConsume=delete from projects where id = :#id").transform().simple("The project is ${body[project]}").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             // even if we transform the exchange we can still do onConsume as we have the original data at             // the point when onConsume is executed             from("sql:select * from projects order by id?consumer.initialDelay=0&consumer.delay=50&consumer.onConsume=delete from projects where id = :#id").transform().simple("The project is ${body[project]}").to("mock:result").         }     }. }
