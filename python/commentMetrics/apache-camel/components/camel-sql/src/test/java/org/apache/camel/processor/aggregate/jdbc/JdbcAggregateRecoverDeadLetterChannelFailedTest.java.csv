commented;modifiers;parameterAmount;loc;comment;code
false;;0;10;;void configureJdbcAggregationRepository() {     // enable recovery     repo.setUseRecovery(true).     // exhaust after at most 3 attempts     repo.setMaximumRedeliveries(3).     // and move to this dead letter channel     repo.setDeadLetterUri("direct:dead").     // check faster     repo.setRecoveryInterval(1000, TimeUnit.MILLISECONDS). }
false;public;0;17;;@Test public void testJdbcAggregateRecoverDeadLetterChannelFailed() throws Exception {     // should fail all times     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:aggregated").expectedMessageCount(4).     // it should keep sending to DLC if it failed, so test for min 3 attempts     getMockEndpoint("mock:dead").expectedMinimumMessageCount(3).     getMockEndpoint("mock:dead").allMessages().header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end().     from("direct:dead").to("mock:dead").throwException(new IllegalArgumentException("We are dead")). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end().             from("direct:dead").to("mock:dead").throwException(new IllegalArgumentException("We are dead")).         }     }. }
