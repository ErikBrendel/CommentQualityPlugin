commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;10;;@Test public void testPreserveHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("testHeader", "testValue").     template.sendBodyAndHeader("direct:start", "testmsg", "testHeader", "testValue").     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void testReturnAnIterator() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "testmsg").     mock.assertIsSatisfied().     assertThat(resultBodyAt(mock, 0), instanceOf(Iterator.class)). }
false;public;0;12;;@Test public void testSplit() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     template.sendBody("direct:withSplit", "testmsg").     mock.assertIsSatisfied().     assertThat(resultBodyAt(mock, 0), instanceOf(Map.class)).     assertThat(resultBodyAt(mock, 1), instanceOf(Map.class)).     assertThat(resultBodyAt(mock, 2), instanceOf(Map.class)). }
false;public;0;12;;@Test public void testSplitWithModel() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     template.sendBody("direct:withSplitModel", "testmsg").     mock.assertIsSatisfied().     assertThat(resultBodyAt(mock, 0), instanceOf(ProjectModel.class)).     assertThat(resultBodyAt(mock, 1), instanceOf(ProjectModel.class)).     assertThat(resultBodyAt(mock, 2), instanceOf(ProjectModel.class)). }
false;private;2;3;;private Object resultBodyAt(MockEndpoint result, int index) {     return result.assertExchangeReceived(index).getIn().getBody(). }
false;public;0;24;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:start").to("sql:select * from projects order by id?outputType=StreamList").to("log:stream").to("mock:result").     from("direct:withSplit").to("sql:select * from projects order by id?outputType=StreamList").to("log:stream").split(body()).streaming().to("log:row").to("mock:result").end().     from("direct:withSplitModel").to("sql:select * from projects order by id?outputType=StreamList&outputClass=org.apache.camel.component.sql.ProjectModel").to("log:stream").split(body()).streaming().to("log:row").to("mock:result").end(). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:start").to("sql:select * from projects order by id?outputType=StreamList").to("log:stream").to("mock:result").             from("direct:withSplit").to("sql:select * from projects order by id?outputType=StreamList").to("log:stream").split(body()).streaming().to("log:row").to("mock:result").end().             from("direct:withSplitModel").to("sql:select * from projects order by id?outputType=StreamList&outputClass=org.apache.camel.component.sql.ProjectModel").to("log:stream").split(body()).streaming().to("log:row").to("mock:result").end().         }     }. }
