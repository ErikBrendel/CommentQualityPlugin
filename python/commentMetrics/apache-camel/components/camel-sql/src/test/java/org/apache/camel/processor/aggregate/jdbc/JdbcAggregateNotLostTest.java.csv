commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testJdbcAggregateNotLost() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("ABCDE").     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS).     String exchangeId = getMockEndpoint("mock:aggregated").getReceivedExchanges().get(0).getExchangeId().     // the exchange should be in the completed repo where we should be able to find it     Exchange completed = repo.recover(context, exchangeId).     // assert the exchange was not lost and we got all the information still     assertNotNull(completed).     // should retain the exchange id     assertEquals(exchangeId, completed.getExchangeId()).     assertEquals("ABCDE", completed.getIn().getBody()).     assertEquals(123, completed.getIn().getHeader("id")).     assertEquals("size", completed.getProperty(Exchange.AGGREGATED_COMPLETED_BY)).     assertEquals(5, completed.getProperty(Exchange.AGGREGATED_SIZE)).     // will store correlation keys as String     assertEquals("123", completed.getProperty(Exchange.AGGREGATED_CORRELATION_KEY)). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end(). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end().         }     }. }
