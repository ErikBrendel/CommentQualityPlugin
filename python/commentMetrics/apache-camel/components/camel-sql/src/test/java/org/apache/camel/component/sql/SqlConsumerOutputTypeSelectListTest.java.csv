commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     super.setUp(). }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;23;;@Test public void testOutputType() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(3).     assertMockEndpointsSatisfied().     List<Exchange> exchanges = mock.getReceivedExchanges().     assertTrue(exchanges.size() >= 3).     Map<String, Object> row = assertIsInstanceOf(Map.class, exchanges.get(0).getIn().getBody()).     assertEquals(1, row.get("ID")).     assertEquals("Camel", row.get("PROJECT")).     assertEquals("ASF", row.get("LICENSE")).     row = assertIsInstanceOf(Map.class, exchanges.get(1).getIn().getBody()).     assertEquals(2, row.get("ID")).     assertEquals("AMQ", row.get("PROJECT")).     assertEquals("ASF", row.get("LICENSE")).     row = assertIsInstanceOf(Map.class, exchanges.get(2).getIn().getBody()).     assertEquals(3, row.get("ID")).     assertEquals("Linux", row.get("PROJECT")).     assertEquals("XXX", row.get("LICENSE")). }
false;public;0;7;;@Override public void configure() throws Exception {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("sql:select * from projects order by id?outputType=SelectList&consumer.initialDelay=0&consumer.delay=50").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("sql:select * from projects order by id?outputType=SelectList&consumer.initialDelay=0&consumer.delay=50").to("mock:result").         }     }. }
