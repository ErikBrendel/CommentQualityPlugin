commented;modifiers;parameterAmount;loc;comment;code
false;public;3;5;;@Override public void populateStatement(PreparedStatement ps, Iterator<?> iterator, int expectedParams) throws SQLException {     invoked = true.     super.populateStatement(ps, iterator, expectedParams). }
false;public;0;15;;@Before public void setUp() throws Exception {     db = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.DERBY).addScript("sql/createAndPopulateDatabase.sql").build().     strategy = new DefaultSqlPrepareStatementStrategy() {          @Override         public void populateStatement(PreparedStatement ps, Iterator<?> iterator, int expectedParams) throws SQLException {             invoked = true.             super.populateStatement(ps, iterator, expectedParams).         }     }.     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myStrategy", strategy).     return jndi. }
false;public;0;6;;@After public void tearDown() throws Exception {     super.tearDown().     db.shutdown(). }
false;public;0;19;;@Test public void testAlwaysPopulateFalse() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", null).     mock.assertIsSatisfied().     List<?> received = assertIsInstanceOf(List.class, mock.getReceivedExchanges().get(0).getIn().getBody()).     assertEquals(2, received.size()).     Map<?, ?> row = assertIsInstanceOf(Map.class, received.get(0)).     assertEquals("Camel", row.get("PROJECT")).     row = assertIsInstanceOf(Map.class, received.get(1)).     assertEquals("AMQ", row.get("PROJECT")).     assertFalse("Should not populate", invoked). }
false;public;0;7;;public void configure() {     getContext().getComponent("sql", SqlComponent.class).setDataSource(db).     from("direct:start").to("sql:select * from projects where license = 'ASF' order by id?alwaysPopulateStatement=false&prepareStatementStrategy=#myStrategy&consumer.initialDelay=0&consumer.delay=50").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().getComponent("sql", SqlComponent.class).setDataSource(db).             from("direct:start").to("sql:select * from projects where license = 'ASF' order by id?alwaysPopulateStatement=false&prepareStatementStrategy=#myStrategy&consumer.initialDelay=0&consumer.delay=50").to("mock:result").         }     }. }
