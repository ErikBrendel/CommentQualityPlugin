commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testAuthorizationPassed() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedBodiesReceived("hello world").     sendMessageWithAuthentication("jim", "jimspassword").     end.assertIsSatisfied(). }
false;public;0;13;;@Test public void testAuthenticationFailed() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(0).     try {         sendMessageWithAuthentication("jim", "jimspassword2").         fail("we should get the access deny exception here").     } catch (Exception exception) {         // the exception should be caused by CamelAuthorizationException         assertTrue("Expect CamelAuthorizationException here", exception.getCause() instanceof CamelAuthorizationException).     }     end.assertIsSatisfied(). }
false;public;0;13;;@Test public void testAuthorizationFailed() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(0).     try {         sendMessageWithAuthentication("bob", "bobspassword").         fail("we should get the access deny exception here").     } catch (Exception exception) {         // the exception should be caused by CamelAuthorizationException         assertTrue("Expect CamelAuthorizationException here", exception.getCause() instanceof CamelAuthorizationException).     }     end.assertIsSatisfied(). }
false;public;0;11;;@Test public void testGetAuthorizationTokenFromSecurityContextHolder() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedBodiesReceived("hello world").     Authentication authToken = new UsernamePasswordAuthenticationToken("jim", "jimspassword").     SecurityContextHolder.getContext().setAuthentication(authToken).     template.sendBody("direct:start", "hello world").     end.assertIsSatisfied().     SecurityContextHolder.getContext().setAuthentication(null). }
false;public;0;20;;@Test public void testAuthorizationFailedWithWrongExplicitRole() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(0).     try {         List<GrantedAuthority> authorities = Collections.singletonList(new SimpleGrantedAuthority("ROLE_BAD")).         Authentication authToken = new UsernamePasswordAuthenticationToken("jim", "jimspassword", authorities).         Subject subject = new Subject().         subject.getPrincipals().add(authToken).         template.sendBodyAndHeader("direct:start", "hello world", Exchange.AUTHENTICATION, subject).         fail("we should get the access deny exception here").     } catch (Exception exception) {         // the exception should be caused by CamelAuthorizationException         assertTrue("Expect CamelAuthorizationException here", exception.getCause() instanceof CamelAuthorizationException).     }     end.assertIsSatisfied(). }
false;private;2;10;;private void sendMessageWithAuthentication(String username, String password) {     Authentication authToken = new UsernamePasswordAuthenticationToken(username, password).     Subject subject = new Subject().     subject.getPrincipals().add(authToken).     template.sendBodyAndHeader("direct:start", "hello world", Exchange.AUTHENTICATION, subject). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/component/spring/security/SpringSecurityCamelContext.xml"). }
