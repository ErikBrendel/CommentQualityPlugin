commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testMarshalAndUnmarshalMap() throws Exception {     Map<String, Object> in = new HashMap<>().     in.put("name", "Camel").     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Map.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:in", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("{\"name\":\"Camel\"}", marshalledAsString).     template.sendBody("direct:back", marshalled).     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testMarshalAndUnmarshalPojo() throws Exception {     TestPojo in = new TestPojo().     in.setName("Camel").     MockEndpoint mock = getMockEndpoint("mock:reversePojo").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TestPojo.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:inPojo", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("{\"name\":\"Camel\"}", marshalledAsString).     template.sendBody("direct:backPojo", marshalled).     mock.assertIsSatisfied(). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/johnzon/SpringJohnzonJsonDataFormatTest.xml"). }
