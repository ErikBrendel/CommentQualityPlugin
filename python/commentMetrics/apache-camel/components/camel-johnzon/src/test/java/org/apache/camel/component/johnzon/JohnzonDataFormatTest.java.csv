commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testString() throws Exception {     testJson("\"A string\"", "A string", String.class, null). }
false;public;0;4;;@Test public void testMap() throws Exception {     testJson("{\"value\":123}", Collections.singletonMap("value", 123), Map.class, null). }
false;public;0;6;;@Test public void testList() throws Exception {     JohnzonParameterizedType type = new JohnzonParameterizedType(List.class, Map.class).     testJson("[{\"value\":123}]", new ArrayList<>(Collections.singletonList(Collections.singletonMap("value", 123))), null, type). }
false;public;0;4;;@Test public void testArray() throws Exception {     testJson("{}", new ArrayList<>(), ArrayList.class, null). }
false;public;0;6;;@Test public void testSkipEmptyArray() throws Exception {     JohnzonParameterizedType type = new JohnzonParameterizedType(ArrayList.class, ArrayList.class).     testJson("[{\"value\":123}]", new ArrayList<>(Collections.singletonList(Collections.emptyList())), null, type). }
false;private;4;16;;private void testJson(String json, Object expected, Class<?> unmarshalType, JohnzonParameterizedType parameterizedType) throws Exception {     Object unmarshalled.     JohnzonDataFormat johnzonDataFormat.     if (unmarshalType != null) {         johnzonDataFormat = new JohnzonDataFormat(unmarshalType).     } else {         johnzonDataFormat = new JohnzonDataFormat(parameterizedType).     }     johnzonDataFormat.setSkipEmptyArray(true).     johnzonDataFormat.doStart().     try (InputStream in = new ByteArrayInputStream(json.getBytes())) {         unmarshalled = johnzonDataFormat.unmarshal(new DefaultExchange(new DefaultCamelContext()), in).     }     assertEquals(expected, unmarshalled). }
