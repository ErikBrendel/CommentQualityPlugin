commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setNettyServerBootstrapConfiguration(NettySharedHttpServerBootstrapConfiguration configuration) {     this.configuration = configuration. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public int getPort() {     return configuration != null ? configuration.getPort() : -1. }
false;public;0;3;;public HttpServerConsumerChannelFactory getConsumerChannelFactory() {     return channelFactory. }
false;public;0;3;;public NettyServerBootstrapFactory getServerBootstrapFactory() {     return bootstrapFactory. }
false;public;0;7;;public int getConsumersSize() {     if (channelFactory != null) {         return channelFactory.consumers().     } else {         return -1.     } }
false;public;1;3;;public void setStartServer(boolean startServer) {     this.startServer = startServer. }
false;public;1;3;;public void setThreadNamePattern(String pattern) {     this.threadPattern = pattern. }
false;protected;0;39;;protected void doStart() throws Exception {     ObjectHelper.notNull(configuration, "setNettyServerBootstrapConfiguration() must be called with a NettyServerBootstrapConfiguration instance", this).     // port must be set     if (configuration.getPort() <= 0) {         throw new IllegalArgumentException("Port must be configured on NettySharedHttpServerBootstrapConfiguration " + configuration).     }     // hostname must be set     if (ObjectHelper.isEmpty(configuration.getHost())) {         throw new IllegalArgumentException("Host must be configured on NettySharedHttpServerBootstrapConfiguration " + configuration).     }     LOG.debug("NettySharedHttpServer using configuration: {}", configuration).     // force using tcp as the underlying transport     configuration.setProtocol("tcp").     channelFactory = new HttpServerMultiplexChannelHandler().     channelFactory.init(configuration.getPort()).     ChannelInitializer<Channel> pipelineFactory = new HttpServerSharedInitializerFactory(configuration, channelFactory, camelContext).     // thread factory and pattern     String port = Matcher.quoteReplacement("" + configuration.getPort()).     String pattern = threadPattern.     pattern = pattern.replaceFirst("#port#", port).     ThreadFactory tf = new CamelThreadFactory(pattern, "NettySharedHttpServer", true).     // create bootstrap factory and disable compatible check as its shared among the consumers     bootstrapFactory = new HttpServerBootstrapFactory(channelFactory, false).     bootstrapFactory.init(tf, configuration, pipelineFactory).     ServiceHelper.startService(channelFactory).     if (startServer) {         LOG.info("Starting NettySharedHttpServer on {}:{}", configuration.getHost(), configuration.getPort()).         ServiceHelper.startService(bootstrapFactory).     } }
false;protected;0;5;;@Override protected void doStop() throws Exception {     LOG.info("Stopping NettySharedHttpServer on {}:{}", configuration.getHost(), configuration.getPort()).     ServiceHelper.stopService(bootstrapFactory, channelFactory). }
