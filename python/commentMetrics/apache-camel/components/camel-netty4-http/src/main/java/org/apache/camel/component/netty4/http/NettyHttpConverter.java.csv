commented;modifiers;parameterAmount;loc;comment;code
true;public,static;4;24;/**  * A fallback converter that allows us to easily call Java beans and use the raw Netty {@link HttpRequest} as parameter types.  */ ;/**  * A fallback converter that allows us to easily call Java beans and use the raw Netty {@link HttpRequest} as parameter types.  */ @FallbackConverter public static Object convertToHttpRequest(Class<?> type, Exchange exchange, Object value, TypeConverterRegistry registry) {     // if we want to covert to HttpRequest     if (value != null && HttpRequest.class.isAssignableFrom(type)) {         // okay we may need to cheat a bit when we want to grab the HttpRequest as its stored on the NettyHttpMessage         // so if the message instance is a NettyHttpMessage and its body is the value, then we can grab the         // HttpRequest from the NettyHttpMessage         NettyHttpMessage msg.         if (exchange.hasOut()) {             msg = exchange.getOut(NettyHttpMessage.class).         } else {             msg = exchange.getIn(NettyHttpMessage.class).         }         if (msg != null && msg.getBody() == value) {             // ensure the http request content is reset so we can read all the content out-of-the-box             FullHttpRequest request = msg.getHttpRequest().             request.content().resetReaderIndex().             return request.         }     }     return null. }
true;public,static;4;21;/**  * A fallback converter that allows us to easily call Java beans and use the raw Netty {@link HttpRequest} as parameter types.  */ ;/**  * A fallback converter that allows us to easily call Java beans and use the raw Netty {@link HttpRequest} as parameter types.  */ @FallbackConverter public static Object convertToHttpResponse(Class<?> type, Exchange exchange, Object value, TypeConverterRegistry registry) {     // if we want to covert to convertToHttpResponse     if (value != null && HttpResponse.class.isAssignableFrom(type)) {         // okay we may need to cheat a bit when we want to grab the HttpRequest as its stored on the NettyHttpMessage         // so if the message instance is a NettyHttpMessage and its body is the value, then we can grab the         // HttpRequest from the NettyHttpMessage         NettyHttpMessage msg.         if (exchange.hasOut()) {             msg = exchange.getOut(NettyHttpMessage.class).         } else {             msg = exchange.getIn(NettyHttpMessage.class).         }         if (msg != null && msg.getBody() == value) {             return msg.getHttpResponse().         }     }     return null. }
false;public,static;2;13;;@Converter public static String toString(FullHttpResponse response, Exchange exchange) {     String contentType = response.headers().get(Exchange.CONTENT_TYPE).     String charset = NettyHttpHelper.getCharsetFromContentType(contentType).     if (charset == null && exchange != null) {         charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class).     }     if (charset != null) {         return response.content().toString(Charset.forName(charset)).     } else {         return response.content().toString(Charset.defaultCharset()).     } }
false;public,static;2;4;;@Converter public static byte[] toBytes(FullHttpResponse response, Exchange exchange) {     return NettyConverter.toByteArray(response.content(), exchange). }
false;public,static;2;4;;@Converter public static InputStream toInputStream(FullHttpResponse response, Exchange exchange) {     return NettyConverter.toInputStream(response.content(), exchange). }
