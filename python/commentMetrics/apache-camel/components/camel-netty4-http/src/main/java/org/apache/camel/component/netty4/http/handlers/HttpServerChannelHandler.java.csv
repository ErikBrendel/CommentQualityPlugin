# id;timestamp;commentText;codeText;commentWords;codeWords
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1415211488;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1416582218;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1424954028;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1425895592;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1425895779;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1429178570;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1437124160;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1440226908;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1447836001;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1462363676;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1465979012;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1479916234;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1495461751;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1535378902;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1535969486;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1537204343;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1540108163;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal);1540108164;Authenticates the http basic auth subject.__@param authenticator      the authenticator_@param principal          the principal_@return <tt>true</tt> if username and password is valid, <tt>false</tt> if not;protected Subject authenticate(SecurityAuthenticator authenticator, LoggingLevel deniedLoggingLevel, HttpPrincipal principal) {_        try {_            return authenticator.login(principal)__        } catch (LoginException e) {_            CamelLogger logger = new CamelLogger(LOG, deniedLoggingLevel)__            logger.log("Cannot login " + principal.getName() + " due " + e.getMessage(), e)__        }_        return null__    };authenticates,the,http,basic,auth,subject,param,authenticator,the,authenticator,param,principal,the,principal,return,tt,true,tt,if,username,and,password,is,valid,tt,false,tt,if,not;protected,subject,authenticate,security,authenticator,authenticator,logging,level,denied,logging,level,http,principal,principal,try,return,authenticator,login,principal,catch,login,exception,e,camel,logger,logger,new,camel,logger,log,denied,logging,level,logger,log,cannot,login,principal,get,name,due,e,get,message,e,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1415211488;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1416582218;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1424954028;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1425895592;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1425895779;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1429178570;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1437124160;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1440226908;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1447836001;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    String userAndPw = out.toString(Charset.defaultCharset())__                    String username = ObjectHelper.before(userAndPw, ":")__                    String password = ObjectHelper.after(userAndPw, ":")__                    HttpPrincipal principal = new HttpPrincipal(username, password)___                    LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                    return principal__                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1462363676;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = ObjectHelper.before(userAndPw, ":")__                        String password = ObjectHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1465979012;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = ObjectHelper.before(userAndPw, ":")__                        String password = ObjectHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1479916234;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = ObjectHelper.before(userAndPw, ":")__                        String password = ObjectHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1495461751;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = ObjectHelper.before(userAndPw, ":")__                        String password = ObjectHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1535378902;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = ObjectHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = ObjectHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = ObjectHelper.before(userAndPw, ":")__                        String password = ObjectHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,object,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,object,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,object,helper,before,user,and,pw,string,password,object,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1535969486;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = StringHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = StringHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = StringHelper.before(userAndPw, ":")__                        String password = StringHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,string,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,string,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,string,helper,before,user,and,pw,string,password,string,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1537204343;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = StringHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = StringHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = StringHelper.before(userAndPw, ":")__                        String password = StringHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,string,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,string,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,string,helper,before,user,and,pw,string,password,string,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1540108163;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = StringHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = StringHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = StringHelper.before(userAndPw, ":")__                        String password = StringHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,string,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,string,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,string,helper,before,user,and,pw,string,password,string,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
HttpServerChannelHandler -> protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request);1540108164;Extracts the username and password details from the HTTP basic header Authorization._<p/>_This requires that the <tt>Authorization</tt> HTTP header is provided, and its using Basic._Currently Digest is <b>not</b> supported.__@return {@link HttpPrincipal} with username and password details, or <tt>null</tt> if not possible to extract;protected static HttpPrincipal extractBasicAuthSubject(HttpRequest request) {_        String auth = request.headers().get("Authorization")__        if (auth != null) {_            String constraint = StringHelper.before(auth, " ")__            if (constraint != null) {_                if ("Basic".equalsIgnoreCase(constraint.trim())) {_                    String decoded = StringHelper.after(auth, " ")__                    _                    ByteBuf buf = NettyConverter.toByteBuffer(decoded.getBytes())__                    ByteBuf out = Base64.decode(buf)__                    try {_                        String userAndPw = out.toString(Charset.defaultCharset())__                        String username = StringHelper.before(userAndPw, ":")__                        String password = StringHelper.after(userAndPw, ":")__                        HttpPrincipal principal = new HttpPrincipal(username, password)__                        LOG.debug("Extracted Basic Auth principal from HTTP header: {}", principal)__                        return principal__                    } finally {_                        buf.release()__                        out.release()__                    }_                }_            }_        }_        return null__    };extracts,the,username,and,password,details,from,the,http,basic,header,authorization,p,this,requires,that,the,tt,authorization,tt,http,header,is,provided,and,its,using,basic,currently,digest,is,b,not,b,supported,return,link,http,principal,with,username,and,password,details,or,tt,null,tt,if,not,possible,to,extract;protected,static,http,principal,extract,basic,auth,subject,http,request,request,string,auth,request,headers,get,authorization,if,auth,null,string,constraint,string,helper,before,auth,if,constraint,null,if,basic,equals,ignore,case,constraint,trim,string,decoded,string,helper,after,auth,byte,buf,buf,netty,converter,to,byte,buffer,decoded,get,bytes,byte,buf,out,base64,decode,buf,try,string,user,and,pw,out,to,string,charset,default,charset,string,username,string,helper,before,user,and,pw,string,password,string,helper,after,user,and,pw,http,principal,principal,new,http,principal,username,password,log,debug,extracted,basic,auth,principal,from,http,header,principal,return,principal,finally,buf,release,out,release,return,null
