commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public ServerInitializerFactory createPipelineFactory(NettyConsumer nettyConsumer) {     throw new UnsupportedOperationException("Should not call this operation"). }
false;protected;1;22;;@Override protected void initChannel(Channel ch) throws Exception {     // create a new pipeline     ChannelPipeline pipeline = ch.pipeline().     SslHandler sslHandler = configureServerSSLOnDemand().     if (sslHandler != null) {         LOG.debug("Server SSL handler configured and added as an interceptor against the ChannelPipeline: {}", sslHandler).         pipeline.addLast("ssl", sslHandler).     }     pipeline.addLast("decoder", new HttpRequestDecoder(4096, configuration.getMaxHeaderSize(), 8192)).     pipeline.addLast("encoder", new HttpResponseEncoder()).     if (configuration.isChunked()) {         pipeline.addLast("aggregator", new HttpObjectAggregator(configuration.getChunkedMaxContentLength())).     }     if (configuration.isCompression()) {         pipeline.addLast("deflater", new HttpContentCompressor()).     }     pipeline.addLast("handler", channelFactory.getChannelHandler()). }
false;private;0;43;;private SSLContext createSSLContext() throws Exception {     if (!configuration.isSsl()) {         return null.     }     SSLContext answer.     // create ssl context once     if (configuration.getSslContextParameters() != null) {         answer = configuration.getSslContextParameters().createSSLContext(null).     } else {         if (configuration.getKeyStoreFile() == null && configuration.getKeyStoreResource() == null) {             LOG.debug("keystorefile is null").         }         if (configuration.getTrustStoreFile() == null && configuration.getTrustStoreResource() == null) {             LOG.debug("truststorefile is null").         }         if (configuration.getPassphrase().toCharArray() == null) {             LOG.debug("passphrase is null").         }         SSLEngineFactory sslEngineFactory.         if (configuration.getKeyStoreFile() != null || configuration.getTrustStoreFile() != null) {             sslEngineFactory = new SSLEngineFactory().             answer = sslEngineFactory.createSSLContext(camelContext, configuration.getKeyStoreFormat(), configuration.getSecurityProvider(), "file:" + configuration.getKeyStoreFile().getPath(), "file:" + configuration.getTrustStoreFile().getPath(), configuration.getPassphrase().toCharArray()).         } else {             sslEngineFactory = new SSLEngineFactory().             answer = sslEngineFactory.createSSLContext(camelContext, configuration.getKeyStoreFormat(), configuration.getSecurityProvider(), configuration.getKeyStoreResource(), configuration.getTrustStoreResource(), configuration.getPassphrase().toCharArray()).         }     }     return answer. }
false;private;0;20;;private SslHandler configureServerSSLOnDemand() throws Exception {     if (!configuration.isSsl()) {         return null.     }     if (configuration.getSslHandler() != null) {         return configuration.getSslHandler().     } else if (sslContext != null) {         SSLEngine engine = sslContext.createSSLEngine().         engine.setUseClientMode(false).         engine.setNeedClientAuth(configuration.isNeedClientAuth()).         if (configuration.getSslContextParameters() == null) {             // just set the enabledProtocols if the SslContextParameter doesn't set             engine.setEnabledProtocols(configuration.getEnabledProtocols().split(",")).         }         return new SslHandler(engine).     }     return null. }
