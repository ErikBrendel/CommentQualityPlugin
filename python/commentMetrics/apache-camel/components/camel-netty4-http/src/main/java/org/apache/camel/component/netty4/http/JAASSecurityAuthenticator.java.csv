commented;modifiers;parameterAmount;loc;comment;code
false;public;1;20;;@Override public Subject login(HttpPrincipal principal) throws LoginException {     if (ObjectHelper.isEmpty(getName())) {         throw new IllegalArgumentException("Realm has not been configured on this SecurityAuthenticator: " + this).     }     LOG.trace("Login username: {} using realm: {}", principal.getName(), getName()).     LoginContext context = new LoginContext(getName(), new HttpPrincipalCallbackHandler(principal)).     context.login().     Subject subject = context.getSubject().     LOG.debug("Login username: {} successful returning Subject: {}", principal.getName(), subject).     if (LOG.isTraceEnabled()) {         for (Principal p : subject.getPrincipals()) {             LOG.trace("Principal on subject {} -> {}", p.getClass().getName(), p.getName()).         }     }     return subject. }
false;public;1;15;;@Override public void logout(Subject subject) throws LoginException {     if (ObjectHelper.isEmpty(getName())) {         throw new LoginException("Realm has not been configured on this SecurityAuthenticator: " + this).     }     String username = "".     if (!subject.getPrincipals().isEmpty()) {         username = subject.getPrincipals().iterator().next().getName().     }     LOG.trace("Logging out username: {} using realm: {}", username, getName()).     LoginContext context = new LoginContext(getName(), subject).     context.logout().     LOG.debug("Logout username: {} successful", username). }
