commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setRoleClassNames(String roleClassNames) {     this.roleClassNames = roleClassNames. }
true;protected;1;14;/**  * Is the given principal a role class?  *  * @param principal the principal  * @return <tt>true</tt> if role class, <tt>false</tt> if not  */ ;/**  * Is the given principal a role class?  *  * @param principal the principal  * @return <tt>true</tt> if role class, <tt>false</tt> if not  */ protected boolean isRoleClass(Principal principal) {     if (roleClassNames == null) {         // by default assume its a role when the classname has role in its name         return principal.getClass().getName().toLowerCase(Locale.US).contains("role").     }     // check each role class name if they match the principal class name     for (String name : ObjectHelper.createIterable(roleClassNames)) {         if (principal.getClass().getName().equals(name)) {             return true.         }     }     return false. }
false;public;1;17;;@Override public String getUserRoles(Subject subject) {     StringBuilder sb = new StringBuilder().     for (Principal p : subject.getPrincipals()) {         if (isRoleClass(p)) {             if (sb.length() > 0) {                 sb.append(",").             }             sb.append(p.getName()).         }     }     if (sb.length() > 0) {         return sb.toString().     } else {         return null.     } }
false;public;1;15;;@Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {     for (Callback callback : callbacks) {         LOG.trace("Callback {}", callback).         if (callback instanceof PasswordCallback) {             PasswordCallback pc = (PasswordCallback) callback.             LOG.trace("Setting password on callback {}", pc).             pc.setPassword(principal.getPassword().toCharArray()).         } else if (callback instanceof NameCallback) {             NameCallback nc = (NameCallback) callback.             LOG.trace("Setting username on callback {}", nc).             nc.setName(principal.getName()).         }     } }
