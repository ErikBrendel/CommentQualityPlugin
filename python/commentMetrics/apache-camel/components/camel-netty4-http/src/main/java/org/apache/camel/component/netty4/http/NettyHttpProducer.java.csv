commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public NettyHttpEndpoint getEndpoint() {     return (NettyHttpEndpoint) super.getEndpoint(). }
false;public;0;4;;@Override public NettyHttpConfiguration getConfiguration() {     return (NettyHttpConfiguration) super.getConfiguration(). }
false;public;2;4;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     return super.process(exchange, new NettyHttpProducerCallback(exchange, callback, getConfiguration())). }
false;protected;1;31;;@Override protected Object getRequestBody(Exchange exchange) throws Exception {     // creating the url to use takes 2-steps     String uri = NettyHttpHelper.createURL(exchange, getEndpoint()).     URI u = NettyHttpHelper.createURI(exchange, uri, getEndpoint()).     final HttpRequest request = getEndpoint().getNettyHttpBinding().toNettyRequest(exchange.getIn(), u.toString(), getConfiguration()).     String actualUri = request.uri().     exchange.getIn().setHeader(Exchange.HTTP_URL, actualUri).     // Need to check if we need to close the connection or not     if (!HttpUtil.isKeepAlive(request)) {         // just want to make sure we close the channel if the keepAlive is not true         exchange.setProperty(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE, true).     }     if (getConfiguration().isBridgeEndpoint()) {         // Need to remove the Host key as it should be not used when bridging/proxying         exchange.getIn().removeHeader("host").     }     if (getEndpoint().getCookieHandler() != null) {         Map<String, List<String>> cookieHeaders = getEndpoint().getCookieHandler().loadCookies(exchange, new URI(actualUri)).         for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {             String key = entry.getKey().             if (entry.getValue().size() > 0) {                 request.headers().add(key, entry.getValue()).             }         }     }     return request. }
false;public;1;7;;@Override public void onDone(Exchange exchange) {     if (response.refCnt() > 0) {         log.debug("Releasing Netty HttpResonse ByteBuf").         ReferenceCountUtil.release(response).     } }
false;public;1;43;;@Override public void done(boolean doneSync) {     try {         // only handle when we are done asynchronous as then the netty producer is done sending, and we have a response         if (!doneSync) {             NettyHttpMessage nettyMessage = exchange.hasOut() ? exchange.getOut(NettyHttpMessage.class) : exchange.getIn(NettyHttpMessage.class).             if (nettyMessage != null) {                 final FullHttpResponse response = nettyMessage.getHttpResponse().                 // Need to retain the ByteBuffer for producer to consumer                 if (response != null) {                     response.content().retain().                     // need to release the response when we are done                     exchange.addOnCompletion(new SynchronizationAdapter() {                          @Override                         public void onDone(Exchange exchange) {                             if (response.refCnt() > 0) {                                 log.debug("Releasing Netty HttpResonse ByteBuf").                                 ReferenceCountUtil.release(response).                             }                         }                     }).                     // the actual url is stored on the IN message in the getRequestBody method as its accessed on-demand                     String actualUrl = exchange.getIn().getHeader(Exchange.HTTP_URL, String.class).                     int code = response.status() != null ? response.status().code() : -1.                     log.debug("Http responseCode: {}", code).                     // if there was a http error code then check if we should throw an exception                     boolean ok = NettyHttpHelper.isStatusCodeOk(code, configuration.getOkStatusCodeRange()).                     if (!ok && getConfiguration().isThrowExceptionOnFailure()) {                         // operation failed so populate exception to throw                         Exception cause = NettyHttpHelper.populateNettyHttpOperationFailedException(exchange, actualUrl, response, code, getConfiguration().isTransferException()).                         exchange.setException(cause).                     }                 }             }         }     } finally {         // ensure we call the delegated callback         callback.done(doneSync).     } }
