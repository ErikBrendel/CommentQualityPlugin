commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public NettyHttpConfiguration copy() {     try {         // clone as NettyHttpConfiguration         NettyHttpConfiguration answer = (NettyHttpConfiguration) clone().         // make sure the lists is copied in its own instance         List<ChannelHandler> encodersCopy = new ArrayList<>(getEncoders()).         answer.setEncoders(encodersCopy).         List<ChannelHandler> decodersCopy = new ArrayList<>(getDecoders()).         answer.setDecoders(decodersCopy).         return answer.     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;0;3;;public String getProtocol() {     return protocol. }
true;public;1;3;/**  * The protocol to use which is either http or https  */ ;/**  * The protocol to use which is either http or https  */ public void setProtocol(String protocol) {     this.protocol = protocol. }
false;public;0;5;;@Override public String getHost() {     // override to setup better documentation for netty-http     return super.getHost(). }
true;public;1;5;/**  * The local hostname such as localhost, or 0.0.0.0 when being a consumer.  * The remote HTTP server hostname when using producer.  */ ;/**  * The local hostname such as localhost, or 0.0.0.0 when being a consumer.  * The remote HTTP server hostname when using producer.  */ @Override public void setHost(String host) {     // override to setup better documentation for netty-http     super.setHost(host). }
false;public;0;5;;@Override public int getPort() {     // override to setup better documentation for netty-http     return super.getPort(). }
true;public;1;5;/**  * The port number. Is default 80 for http and 443 for https.  */ ;/**  * The port number. Is default 80 for http and 443 for https.  */ @Override public void setPort(int port) {     // override to setup better documentation for netty-http     super.setPort(port). }
false;public;0;3;;public boolean isCompression() {     return compression. }
true;public;1;3;/**  * Allow using gzip/deflate for compression on the Netty HTTP server if the client supports it from the HTTP headers.  */ ;/**  * Allow using gzip/deflate for compression on the Netty HTTP server if the client supports it from the HTTP headers.  */ public void setCompression(boolean compression) {     this.compression = compression. }
false;public;0;3;;public boolean isThrowExceptionOnFailure() {     return throwExceptionOnFailure. }
true;public;1;3;/**  * Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server.  * This allows you to get all responses regardless of the HTTP status code.  */ ;/**  * Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server.  * This allows you to get all responses regardless of the HTTP status code.  */ public void setThrowExceptionOnFailure(boolean throwExceptionOnFailure) {     this.throwExceptionOnFailure = throwExceptionOnFailure. }
false;public;0;3;;public boolean isTransferException() {     return transferException. }
true;public;1;3;/**  * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized  * in the response as a application/x-java-serialized-object content type.  * On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException.  * The caused exception is required to be serialized.  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized  * in the response as a application/x-java-serialized-object content type.  * On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException.  * The caused exception is required to be serialized.  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ public void setTransferException(boolean transferException) {     this.transferException = transferException. }
false;public;0;3;;public boolean isUrlDecodeHeaders() {     return urlDecodeHeaders. }
true;public;1;3;/**  * If this option is enabled, then during binding from Netty to Camel Message then the header values will be URL decoded  * (eg %20 will be a space character. Notice this option is used by the default org.apache.camel.component.netty.http.NettyHttpBinding  * and therefore if you implement a custom org.apache.camel.component.netty4.http.NettyHttpBinding then you would  * need to decode the headers accordingly to this option.  */ ;/**  * If this option is enabled, then during binding from Netty to Camel Message then the header values will be URL decoded  * (eg %20 will be a space character. Notice this option is used by the default org.apache.camel.component.netty.http.NettyHttpBinding  * and therefore if you implement a custom org.apache.camel.component.netty4.http.NettyHttpBinding then you would  * need to decode the headers accordingly to this option.  */ public void setUrlDecodeHeaders(boolean urlDecodeHeaders) {     this.urlDecodeHeaders = urlDecodeHeaders. }
false;public;0;3;;public boolean isMapHeaders() {     return mapHeaders. }
true;public;1;3;/**  * If this option is enabled, then during binding from Netty to Camel Message then the headers will be mapped as well  * (eg added as header to the Camel Message as well). You can turn off this option to disable this.  * The headers can still be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage message with  * the method getHttpRequest() that returns the Netty HTTP request io.netty.handler.codec.http.HttpRequest instance.  */ ;/**  * If this option is enabled, then during binding from Netty to Camel Message then the headers will be mapped as well  * (eg added as header to the Camel Message as well). You can turn off this option to disable this.  * The headers can still be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage message with  * the method getHttpRequest() that returns the Netty HTTP request io.netty.handler.codec.http.HttpRequest instance.  */ public void setMapHeaders(boolean mapHeaders) {     this.mapHeaders = mapHeaders. }
false;public;0;3;;public boolean isMatchOnUriPrefix() {     return matchOnUriPrefix. }
true;public;1;3;/**  * Whether or not Camel should try to find a target consumer by matching the URI prefix if no exact match is found.  */ ;/**  * Whether or not Camel should try to find a target consumer by matching the URI prefix if no exact match is found.  */ public void setMatchOnUriPrefix(boolean matchOnUriPrefix) {     this.matchOnUriPrefix = matchOnUriPrefix. }
false;public;0;3;;public boolean isBridgeEndpoint() {     return bridgeEndpoint. }
true;public;1;3;/**  * If the option is true, the producer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request.  * You may also set the throwExceptionOnFailure to be false to let the producer send all the fault response back.  * The consumer working in the bridge mode will skip the gzip compression and WWW URL form encoding (by adding the Exchange.SKIP_GZIP_ENCODING  * and Exchange.SKIP_WWW_FORM_URLENCODED headers to the consumed exchange).  */ ;/**  * If the option is true, the producer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request.  * You may also set the throwExceptionOnFailure to be false to let the producer send all the fault response back.  * The consumer working in the bridge mode will skip the gzip compression and WWW URL form encoding (by adding the Exchange.SKIP_GZIP_ENCODING  * and Exchange.SKIP_WWW_FORM_URLENCODED headers to the consumed exchange).  */ public void setBridgeEndpoint(boolean bridgeEndpoint) {     this.bridgeEndpoint = bridgeEndpoint. }
false;public;0;3;;public String getPath() {     return path. }
true;public;1;3;/**  * Resource path  */ ;/**  * Resource path  */ public void setPath(String path) {     this.path = path. }
false;public;0;3;;public boolean isDisableStreamCache() {     return disableStreamCache. }
true;public;1;3;/**  * Determines whether or not the raw input stream from Netty HttpRequest#getContent() or HttpResponset#getContent()  * is cached or not (Camel will read the stream into a in light-weight memory based Stream caching) cache.  * By default Camel will cache the Netty input stream to support reading it multiple times to ensure it Camel  * can retrieve all data from the stream. However you can set this option to true when you for example need to  * access the raw stream, such as streaming it directly to a file or other persistent store. Mind that  * if you enable this option, then you cannot read the Netty stream multiple times out of the box, and you would  * need manually to reset the reader index on the Netty raw stream. Also Netty will auto-close the Netty stream  * when the Netty HTTP server/HTTP client is done processing, which means that if the asynchronous routing engine is in  * use then any asynchronous thread that may continue routing the {@link org.apache.camel.Exchange} may not  * be able to read the Netty stream, because Netty has closed it.  */ ;/**  * Determines whether or not the raw input stream from Netty HttpRequest#getContent() or HttpResponset#getContent()  * is cached or not (Camel will read the stream into a in light-weight memory based Stream caching) cache.  * By default Camel will cache the Netty input stream to support reading it multiple times to ensure it Camel  * can retrieve all data from the stream. However you can set this option to true when you for example need to  * access the raw stream, such as streaming it directly to a file or other persistent store. Mind that  * if you enable this option, then you cannot read the Netty stream multiple times out of the box, and you would  * need manually to reset the reader index on the Netty raw stream. Also Netty will auto-close the Netty stream  * when the Netty HTTP server/HTTP client is done processing, which means that if the asynchronous routing engine is in  * use then any asynchronous thread that may continue routing the {@link org.apache.camel.Exchange} may not  * be able to read the Netty stream, because Netty has closed it.  */ public void setDisableStreamCache(boolean disableStreamCache) {     this.disableStreamCache = disableStreamCache. }
false;public;0;3;;public boolean isSend503whenSuspended() {     return send503whenSuspended. }
true;public;1;3;/**  * Whether to send back HTTP status code 503 when the consumer has been suspended.  * If the option is false then the Netty Acceptor is unbound when the consumer is suspended, so clients cannot connect anymore.  */ ;/**  * Whether to send back HTTP status code 503 when the consumer has been suspended.  * If the option is false then the Netty Acceptor is unbound when the consumer is suspended, so clients cannot connect anymore.  */ public void setSend503whenSuspended(boolean send503whenSuspended) {     this.send503whenSuspended = send503whenSuspended. }
false;public;0;3;;public int getChunkedMaxContentLength() {     return chunkedMaxContentLength. }
true;public;1;3;/**  * Value in bytes the max content length per chunked frame received on the Netty HTTP server.  */ ;/**  * Value in bytes the max content length per chunked frame received on the Netty HTTP server.  */ public void setChunkedMaxContentLength(int chunkedMaxContentLength) {     this.chunkedMaxContentLength = chunkedMaxContentLength. }
false;public;0;3;;public int getMaxHeaderSize() {     return maxHeaderSize. }
true;public;1;3;/**  * The maximum length of all headers.  * If the sum of the length of each header exceeds this value, a {@link io.netty.handler.codec.TooLongFrameException} will be raised.  */ ;/**  * The maximum length of all headers.  * If the sum of the length of each header exceeds this value, a {@link io.netty.handler.codec.TooLongFrameException} will be raised.  */ public void setMaxHeaderSize(int maxHeaderSize) {     this.maxHeaderSize = maxHeaderSize. }
true;public;0;3;// Don't support allowDefaultCodec ;// Don't support allowDefaultCodec public boolean isAllowDefaultCodec() {     return false. }
false;public;1;3;;public void setAllowDefaultCodec(boolean allowDefaultCodec) {     throw new UnsupportedOperationException("You cannot setAllowDefaultCodec here."). }
false;public;0;3;;public String getOkStatusCodeRange() {     return okStatusCodeRange. }
true;public;1;3;/**  * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be  * defined, separated by comma, e.g. <tt>200-204,209,301-304</tt>. Each range must be a single number or from-to with the  * dash included.  * <p/>  * The default range is <tt>200-299</tt>  */ ;/**  * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be  * defined, separated by comma, e.g. <tt>200-204,209,301-304</tt>. Each range must be a single number or from-to with the  * dash included.  * <p/>  * The default range is <tt>200-299</tt>  */ public void setOkStatusCodeRange(String okStatusCodeRange) {     this.okStatusCodeRange = okStatusCodeRange. }
true;public;1;3;/**  * Sets whether to use a relative path in HTTP requests.  */ ;/**  * Sets whether to use a relative path in HTTP requests.  */ public void setUseRelativePath(boolean useRelativePath) {     this.useRelativePath = useRelativePath. }
false;public;0;3;;public boolean isUseRelativePath() {     return this.useRelativePath. }
