commented;modifiers;parameterAmount;loc;comment;code
false;public;3;8;;@Override public void init(CamelContext camelContext, NettyServerBootstrapConfiguration configuration, ChannelInitializer<Channel> pipelineFactory) {     super.init(camelContext, configuration, pipelineFactory).     this.port = configuration.getPort().     this.bootstrapConfiguration = configuration.     LOG.info("BootstrapFactory on port {} is using bootstrap configuration: [{}]", port, bootstrapConfiguration.toStringBootstrapConfiguration()). }
false;public;1;20;;public void addConsumer(NettyConsumer consumer) {     if (compatibleCheck) {         // first it may be the same instance, so only check for compatibility of different instance         if (bootstrapConfiguration != consumer.getConfiguration() && !bootstrapConfiguration.compatible(consumer.getConfiguration())) {             throw new IllegalArgumentException("Bootstrap configuration must be identical when adding additional consumer: " + consumer.getEndpoint() + " on same port: " + port + ".\n  Existing " + bootstrapConfiguration.toStringBootstrapConfiguration() + "\n       New " + consumer.getConfiguration().toStringBootstrapConfiguration()).         }     }     if (LOG.isDebugEnabled()) {         NettyHttpConsumer httpConsumer = (NettyHttpConsumer) consumer.         LOG.debug("BootstrapFactory on port {} is adding consumer with context-path {}", port, httpConsumer.getConfiguration().getPath()).     }     channelFactory.addConsumer((NettyHttpConsumer) consumer). }
false;public;1;8;;@Override public void removeConsumer(NettyConsumer consumer) {     if (LOG.isDebugEnabled()) {         NettyHttpConsumer httpConsumer = (NettyHttpConsumer) consumer.         LOG.debug("BootstrapFactory on port {} is removing consumer with context-path {}", port, httpConsumer.getConfiguration().getPath()).     }     channelFactory.removeConsumer((NettyHttpConsumer) consumer). }
false;protected;0;5;;@Override protected void doStart() throws Exception {     LOG.debug("BootstrapFactory on port {} is starting", port).     super.doStart(). }
false;public;0;11;;@Override public void stop() throws Exception {     // only stop if no more active consumers     int consumers = channelFactory.consumers().     if (consumers == 0) {         LOG.debug("BootstrapFactory on port {} is stopping", port).         super.stop().     } else {         LOG.debug("BootstrapFactory on port {} has {} registered consumers, so cannot stop yet.", port, consumers).     } }
