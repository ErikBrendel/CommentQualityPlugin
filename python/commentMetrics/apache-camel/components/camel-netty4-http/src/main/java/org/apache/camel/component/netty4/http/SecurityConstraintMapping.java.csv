commented;modifiers;parameterAmount;loc;comment;code
false;public;1;22;;@Override public String restricted(String url) {     // check excluded first     if (excludedUrl(url)) {         return null.     }     // is the url restricted?     String constraint = includedUrl(url).     if (constraint == null) {         return null.     }     // is there any roles for the restricted url?     String roles = inclusions != null ? inclusions.get(constraint) : null.     if (roles == null) {         // use wildcard to indicate any role is accepted         return "*".     } else {         return roles.     } }
false;private;1;20;;private String includedUrl(String url) {     String candidate = null.     if (inclusions != null && !inclusions.isEmpty()) {         for (String constraint : inclusions.keySet()) {             if (PatternHelper.matchPattern(url, constraint)) {                 if (candidate == null) {                     candidate = constraint.                 } else if (constraint.length() > candidate.length()) {                     // we want the constraint that has the longest context-path matching as its                     // the most explicit for the target url                     candidate = constraint.                 }             }         }         return candidate.     }     // by default if no included has been configured then everything is restricted     return "*". }
false;private;1;12;;private boolean excludedUrl(String url) {     if (exclusions != null && !exclusions.isEmpty()) {         for (String constraint : exclusions) {             if (PatternHelper.matchPattern(url, constraint)) {                 // force not matches if this was an exclusion                 return true.             }         }     }     return false. }
false;public;1;6;;public void addInclusion(String constraint) {     if (inclusions == null) {         inclusions = new java.util.LinkedHashMap<>().     }     inclusions.put(constraint, null). }
false;public;2;6;;public void addInclusion(String constraint, String roles) {     if (inclusions == null) {         inclusions = new java.util.LinkedHashMap<>().     }     inclusions.put(constraint, roles). }
false;public;1;6;;public void addExclusion(String constraint) {     if (exclusions == null) {         exclusions = new LinkedHashSet<>().     }     exclusions.add(constraint). }
false;public;1;3;;public void setInclusions(Map<String, String> inclusions) {     this.inclusions = inclusions. }
false;public;1;3;;public void setExclusions(Set<String> exclusions) {     this.exclusions = exclusions. }
