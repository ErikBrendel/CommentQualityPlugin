commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Binds from Netty {@link HttpRequest} to Camel {@link Message}.  * <p/>  * Will use the <tt>populateCamelHeaders</tt> method for populating the headers.  *  * @param request       the netty http request  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @return the message to store on the given exchange  * @throws Exception is thrown if error during binding  */ ;/**  * Binds from Netty {@link HttpRequest} to Camel {@link Message}.  * <p/>  * Will use the <tt>populateCamelHeaders</tt> method for populating the headers.  *  * @param request       the netty http request  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @return the message to store on the given exchange  * @throws Exception is thrown if error during binding  */ Message toCamelMessage(FullHttpRequest request, Exchange exchange, NettyHttpConfiguration configuration) throws Exception.
true;;4;1;/**  * Binds from Netty {@link HttpRequest} to Camel headers as a {@link Map}.  *  * @param request       the netty http request  * @param headers       the Camel headers that should be populated  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @throws Exception is thrown if error during binding  */ ;/**  * Binds from Netty {@link HttpRequest} to Camel headers as a {@link Map}.  *  * @param request       the netty http request  * @param headers       the Camel headers that should be populated  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @throws Exception is thrown if error during binding  */ void populateCamelHeaders(FullHttpRequest request, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration) throws Exception.
true;;3;1;/**  * Binds from Netty {@link HttpResponse} to Camel {@link Message}.  * <p/>  * Will use the <tt>populateCamelHeaders</tt> method for populating the headers.  *  * @param response      the netty http response  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @return the message to store on the given exchange  * @throws Exception is thrown if error during binding  */ ;/**  * Binds from Netty {@link HttpResponse} to Camel {@link Message}.  * <p/>  * Will use the <tt>populateCamelHeaders</tt> method for populating the headers.  *  * @param response      the netty http response  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @return the message to store on the given exchange  * @throws Exception is thrown if error during binding  */ Message toCamelMessage(FullHttpResponse response, Exchange exchange, NettyHttpConfiguration configuration) throws Exception.
true;;4;1;/**  * Binds from Netty {@link HttpResponse} to Camel headers as a {@link Map}.  *  * @param response      the netty http response  * @param headers       the Camel headers that should be populated  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @throws Exception is thrown if error during binding  */ ;/**  * Binds from Netty {@link HttpResponse} to Camel headers as a {@link Map}.  *  * @param response      the netty http response  * @param headers       the Camel headers that should be populated  * @param exchange      the exchange that should contain the returned message.  * @param configuration the endpoint configuration  * @throws Exception is thrown if error during binding  */ void populateCamelHeaders(FullHttpResponse response, Map<String, Object> headers, Exchange exchange, NettyHttpConfiguration configuration) throws Exception.
true;;2;1;/**  * Binds from Camel {@link Message} to Netty {@link HttpResponse}.  *  * @param message       the Camel message  * @param configuration the endpoint configuration  * @return the http response  * @throws Exception is thrown if error during binding  */ ;/**  * Binds from Camel {@link Message} to Netty {@link HttpResponse}.  *  * @param message       the Camel message  * @param configuration the endpoint configuration  * @return the http response  * @throws Exception is thrown if error during binding  */ HttpResponse toNettyResponse(Message message, NettyHttpConfiguration configuration) throws Exception.
true;;3;1;/**  * Binds from Camel {@link Message} to Netty {@link io.netty.handler.codec.http.HttpRequest}.  *  * @param message       the Camel message  * @param uri           the uri which is the intended uri to call, though the message may override the uri  * @param configuration the endpoint configuration  * @return the http request  * @throws Exception is thrown if error during binding  */ ;/**  * Binds from Camel {@link Message} to Netty {@link io.netty.handler.codec.http.HttpRequest}.  *  * @param message       the Camel message  * @param uri           the uri which is the intended uri to call, though the message may override the uri  * @param configuration the endpoint configuration  * @return the http request  * @throws Exception is thrown if error during binding  */ HttpRequest toNettyRequest(Message message, String uri, NettyHttpConfiguration configuration) throws Exception.
true;;0;1;/**  * Gets the header filter strategy  *  * @return the strategy  */ ;/**  * Gets the header filter strategy  *  * @return the strategy  */ HeaderFilterStrategy getHeaderFilterStrategy().
true;;1;1;/**  * Sets the header filter strategy to use.  *  * @param headerFilterStrategy the custom strategy  */ ;/**  * Sets the header filter strategy to use.  *  * @param headerFilterStrategy the custom strategy  */ void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy).
