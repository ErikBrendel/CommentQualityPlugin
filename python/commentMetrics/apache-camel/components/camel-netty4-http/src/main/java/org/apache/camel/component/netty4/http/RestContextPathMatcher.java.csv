commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public boolean matchesRest(String path, boolean wildcard) {     return matchRestPath(path, rawPath, wildcard). }
false;public;2;13;;@Override public boolean matchMethod(String method, String restrict) {     if (restrict == null) {         return true.     }     // always match OPTIONS as some REST clients uses that prior to calling the service     if ("OPTIONS".equals(method)) {         return true.     }     return restrict.toLowerCase(Locale.US).contains(method.toLowerCase(Locale.US)). }
true;public;3;46;/**  * Matches the given request path with the configured consumer path  *  * @param requestPath   the request path  * @param consumerPath  the consumer path which may use { } tokens  * @return <tt>true</tt> if matched, <tt>false</tt> otherwise  */ ;/**  * Matches the given request path with the configured consumer path  *  * @param requestPath   the request path  * @param consumerPath  the consumer path which may use { } tokens  * @return <tt>true</tt> if matched, <tt>false</tt> otherwise  */ public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard) {     // remove starting/ending slashes     if (requestPath.startsWith("/")) {         requestPath = requestPath.substring(1).     }     if (requestPath.endsWith("/")) {         requestPath = requestPath.substring(0, requestPath.length() - 1).     }     // remove starting/ending slashes     if (consumerPath.startsWith("/")) {         consumerPath = consumerPath.substring(1).     }     if (consumerPath.endsWith("/")) {         consumerPath = consumerPath.substring(0, consumerPath.length() - 1).     }     if (matchOnUriPrefix && (requestPath.startsWith(consumerPath) || consumerPath.isEmpty())) {         return true.     }     // split using single char / is optimized in the jdk     String[] requestPaths = requestPath.split("/").     String[] consumerPaths = consumerPath.split("/").     // must be same number of path's     if (requestPaths.length != consumerPaths.length) {         return false.     }     for (int i = 0. i < requestPaths.length. i++) {         String p1 = requestPaths[i].         String p2 = consumerPaths[i].         if (wildcard && p2.startsWith("{") && p2.endsWith("}")) {             // always matches             continue.         }         if (!p1.equals(p2)) {             return false.         }     }     // assume matching     return true. }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     RestContextPathMatcher that = (RestContextPathMatcher) o.     if (comparePath.equals(that.comparePath)) {         return super.equals(o).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return 31 * comparePath.hashCode() + (matchOnUriPrefix ? 1 : 0). }
