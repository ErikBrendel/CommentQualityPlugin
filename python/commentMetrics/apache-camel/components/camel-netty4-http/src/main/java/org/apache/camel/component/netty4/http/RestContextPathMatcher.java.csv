# id;timestamp;commentText;codeText;commentWords;codeWords
RestContextPathMatcher -> public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard);1415211488;Matches the given request path with the configured consumer path__@param requestPath   the request path_@param consumerPath  the consumer path which may use { } tokens_@return <tt>true</tt> if matched, <tt>false</tt> otherwise;public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard) {_        _        if (requestPath.startsWith("/")) {_            requestPath = requestPath.substring(1)__        }_        if (requestPath.endsWith("/")) {_            requestPath = requestPath.substring(0, requestPath.length() - 1)__        }_        _        if (consumerPath.startsWith("/")) {_            consumerPath = consumerPath.substring(1)__        }_        if (consumerPath.endsWith("/")) {_            consumerPath = consumerPath.substring(0, consumerPath.length() - 1)__        }__        _        String[] requestPaths = requestPath.split("/")__        String[] consumerPaths = consumerPath.split("/")___        _        if (requestPaths.length != consumerPaths.length) {_            return false__        }__        for (int i = 0_ i < requestPaths.length_ i++) {_            String p1 = requestPaths[i]__            String p2 = consumerPaths[i]___            if (wildcard && p2.startsWith("{") && p2.endsWith("}")) {_                _                continue__            }__            if (!p1.equals(p2)) {_                return false__            }_        }__        _        return true__    };matches,the,given,request,path,with,the,configured,consumer,path,param,request,path,the,request,path,param,consumer,path,the,consumer,path,which,may,use,tokens,return,tt,true,tt,if,matched,tt,false,tt,otherwise;public,boolean,match,rest,path,string,request,path,string,consumer,path,boolean,wildcard,if,request,path,starts,with,request,path,request,path,substring,1,if,request,path,ends,with,request,path,request,path,substring,0,request,path,length,1,if,consumer,path,starts,with,consumer,path,consumer,path,substring,1,if,consumer,path,ends,with,consumer,path,consumer,path,substring,0,consumer,path,length,1,string,request,paths,request,path,split,string,consumer,paths,consumer,path,split,if,request,paths,length,consumer,paths,length,return,false,for,int,i,0,i,request,paths,length,i,string,p1,request,paths,i,string,p2,consumer,paths,i,if,wildcard,p2,starts,with,p2,ends,with,continue,if,p1,equals,p2,return,false,return,true
RestContextPathMatcher -> public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard);1429703040;Matches the given request path with the configured consumer path__@param requestPath   the request path_@param consumerPath  the consumer path which may use { } tokens_@return <tt>true</tt> if matched, <tt>false</tt> otherwise;public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard) {_        _        if (requestPath.startsWith("/")) {_            requestPath = requestPath.substring(1)__        }_        if (requestPath.endsWith("/")) {_            requestPath = requestPath.substring(0, requestPath.length() - 1)__        }_        _        if (consumerPath.startsWith("/")) {_            consumerPath = consumerPath.substring(1)__        }_        if (consumerPath.endsWith("/")) {_            consumerPath = consumerPath.substring(0, consumerPath.length() - 1)__        }__        if (matchOnUriPrefix && (requestPath.startsWith(consumerPath) || consumerPath.isEmpty())) {_            return true__        }__        _        String[] requestPaths = requestPath.split("/")__        String[] consumerPaths = consumerPath.split("/")___        _        if (requestPaths.length != consumerPaths.length) {_            return false__        }__        for (int i = 0_ i < requestPaths.length_ i++) {_            String p1 = requestPaths[i]__            String p2 = consumerPaths[i]___            if (wildcard && p2.startsWith("{") && p2.endsWith("}")) {_                _                continue__            }__            if (!p1.equals(p2)) {_                return false__            }_        }__        _        return true__    };matches,the,given,request,path,with,the,configured,consumer,path,param,request,path,the,request,path,param,consumer,path,the,consumer,path,which,may,use,tokens,return,tt,true,tt,if,matched,tt,false,tt,otherwise;public,boolean,match,rest,path,string,request,path,string,consumer,path,boolean,wildcard,if,request,path,starts,with,request,path,request,path,substring,1,if,request,path,ends,with,request,path,request,path,substring,0,request,path,length,1,if,consumer,path,starts,with,consumer,path,consumer,path,substring,1,if,consumer,path,ends,with,consumer,path,consumer,path,substring,0,consumer,path,length,1,if,match,on,uri,prefix,request,path,starts,with,consumer,path,consumer,path,is,empty,return,true,string,request,paths,request,path,split,string,consumer,paths,consumer,path,split,if,request,paths,length,consumer,paths,length,return,false,for,int,i,0,i,request,paths,length,i,string,p1,request,paths,i,string,p2,consumer,paths,i,if,wildcard,p2,starts,with,p2,ends,with,continue,if,p1,equals,p2,return,false,return,true
RestContextPathMatcher -> public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard);1440143203;Matches the given request path with the configured consumer path__@param requestPath   the request path_@param consumerPath  the consumer path which may use { } tokens_@return <tt>true</tt> if matched, <tt>false</tt> otherwise;public boolean matchRestPath(String requestPath, String consumerPath, boolean wildcard) {_        _        if (requestPath.startsWith("/")) {_            requestPath = requestPath.substring(1)__        }_        if (requestPath.endsWith("/")) {_            requestPath = requestPath.substring(0, requestPath.length() - 1)__        }_        _        if (consumerPath.startsWith("/")) {_            consumerPath = consumerPath.substring(1)__        }_        if (consumerPath.endsWith("/")) {_            consumerPath = consumerPath.substring(0, consumerPath.length() - 1)__        }__        if (matchOnUriPrefix && (requestPath.startsWith(consumerPath) || consumerPath.isEmpty())) {_            return true__        }__        _        String[] requestPaths = requestPath.split("/")__        String[] consumerPaths = consumerPath.split("/")___        _        if (requestPaths.length != consumerPaths.length) {_            return false__        }__        for (int i = 0_ i < requestPaths.length_ i++) {_            String p1 = requestPaths[i]__            String p2 = consumerPaths[i]___            if (wildcard && p2.startsWith("{") && p2.endsWith("}")) {_                _                continue__            }__            if (!p1.equals(p2)) {_                return false__            }_        }__        _        return true__    };matches,the,given,request,path,with,the,configured,consumer,path,param,request,path,the,request,path,param,consumer,path,the,consumer,path,which,may,use,tokens,return,tt,true,tt,if,matched,tt,false,tt,otherwise;public,boolean,match,rest,path,string,request,path,string,consumer,path,boolean,wildcard,if,request,path,starts,with,request,path,request,path,substring,1,if,request,path,ends,with,request,path,request,path,substring,0,request,path,length,1,if,consumer,path,starts,with,consumer,path,consumer,path,substring,1,if,consumer,path,ends,with,consumer,path,consumer,path,substring,0,consumer,path,length,1,if,match,on,uri,prefix,request,path,starts,with,consumer,path,consumer,path,is,empty,return,true,string,request,paths,request,path,split,string,consumer,paths,consumer,path,split,if,request,paths,length,consumer,paths,length,return,false,for,int,i,0,i,request,paths,length,i,string,p1,request,paths,i,string,p2,consumer,paths,i,if,wildcard,p2,starts,with,p2,ends,with,continue,if,p1,equals,p2,return,false,return,true
