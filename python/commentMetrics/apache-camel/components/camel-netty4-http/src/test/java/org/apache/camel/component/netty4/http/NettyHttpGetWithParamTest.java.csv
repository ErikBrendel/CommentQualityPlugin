commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testHttpGetWithParamsViaURI() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.expectedHeaderReceived("one", "eins").     mock.expectedHeaderReceived("two", "zwei").     template.requestBody(serverUri + "?one=uno&two=dos", (Object) null).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test @Ignore("HTTP_QUERY not supported") public void testHttpGetWithParamsViaHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.expectedHeaderReceived("one", "eins").     mock.expectedHeaderReceived("two", "zwei").     template.requestBodyAndHeader(serverUri, null, Exchange.HTTP_QUERY, "one=uno&two=dos").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(serverUri).process(processor).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(serverUri).process(processor).to("mock:result").         }     }. }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     NettyHttpMessage message = exchange.getIn(NettyHttpMessage.class).     assertNotNull(message.getHttpRequest()).     String uri = message.getHttpRequest().uri().     assertTrue(uri.endsWith("one=uno&two=dos")).     exchange.getOut().setBody("Bye World").     exchange.getOut().setHeader("one", "eins").     exchange.getOut().setHeader("two", "zwei"). }
