commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBridge() throws Exception {     String response = template.requestBodyAndHeader("http://localhost:" + port2 + "/test/hello", new ByteArrayInputStream("This is a test".getBytes()), "Content-Type", "application/xml", String.class).     assertEquals("Get a wrong response", "/", response).     response = template.requestBody("http://localhost:" + port1 + "/hello/world", "hello", String.class).     assertEquals("Get a wrong response", "/hello/world", response).     try {         template.requestBody("http://localhost:" + port2 + "/hello/world", "hello", String.class).         fail("Expect exception here!").     } catch (Exception ex) {         assertTrue("We should get a RuntimeCamelException", ex instanceof RuntimeCamelException).     } }
false;public;0;5;;@Test public void testSendFormRequestMessage() throws Exception {     String out = template.requestBodyAndHeader("http://localhost:" + port2 + "/form", "username=abc&pass=password", Exchange.CONTENT_TYPE, "application/x-www-form-urlencoded", String.class).     assertEquals("Get a wrong response message", "username=abc&pass=password", out). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // get the request URL and copy it to the request body     String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).     exchange.getOut().setBody(uri). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     // just take out the message body and send it back     Message in = exchange.getIn().     String request = in.getBody(String.class).     exchange.getOut().setBody(request). }
false;public;0;31;;public void configure() {     port1 = getPort().     port2 = getNextPort().     errorHandler(noErrorHandler()).     Processor serviceProc = new Processor() {          public void process(Exchange exchange) throws Exception {             // get the request URL and copy it to the request body             String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).             exchange.getOut().setBody(uri).         }     }.     from("netty4-http:http://localhost:" + port2 + "/test/hello").to("http://localhost:" + port1 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").     from("netty4-http:http://localhost:" + port1 + "?matchOnUriPrefix=true").process(serviceProc).     // check the from request     from("netty4-http:http://localhost:" + port2 + "/form?bridgeEndpoint=true").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // just take out the message body and send it back             Message in = exchange.getIn().             String request = in.getBody(String.class).             exchange.getOut().setBody(request).         }     }). }
false;protected;0;35;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             port1 = getPort().             port2 = getNextPort().             errorHandler(noErrorHandler()).             Processor serviceProc = new Processor() {                  public void process(Exchange exchange) throws Exception {                     // get the request URL and copy it to the request body                     String uri = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).                     exchange.getOut().setBody(uri).                 }             }.             from("netty4-http:http://localhost:" + port2 + "/test/hello").to("http://localhost:" + port1 + "?throwExceptionOnFailure=false&bridgeEndpoint=true").             from("netty4-http:http://localhost:" + port1 + "?matchOnUriPrefix=true").process(serviceProc).             // check the from request             from("netty4-http:http://localhost:" + port2 + "/form?bridgeEndpoint=true").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // just take out the message body and send it back                     Message in = exchange.getIn().                     String request = in.getBody(String.class).                     exchange.getOut().setBody(request).                 }             }).         }     }. }
