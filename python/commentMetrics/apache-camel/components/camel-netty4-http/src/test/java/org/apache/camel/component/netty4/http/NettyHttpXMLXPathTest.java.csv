commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testHttpXML() throws Exception {     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "<person><name>Claus</name></person>", String.class).     assertEquals("<quote>Camel rocks</quote>", out).     out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "<person><name>James</name></person>", String.class).     assertEquals("<quote>Camel really rocks</quote>", out).     out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "<person><name>Jonathan</name></person>", String.class).     assertEquals("<quote>Try Camel now</quote>", out). }
false;public;0;11;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").choice().when().xpath("/person/name = 'Claus'").transform(constant("<quote>Camel rocks</quote>")).when().xpath("/person/name = 'James'").transform(constant("<quote>Camel really rocks</quote>")).otherwise().transform(constant("<quote>Try Camel now</quote>")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").choice().when().xpath("/person/name = 'Claus'").transform(constant("<quote>Camel rocks</quote>")).when().xpath("/person/name = 'James'").transform(constant("<quote>Camel really rocks</quote>")).otherwise().transform(constant("<quote>Try Camel now</quote>")).         }     }. }
