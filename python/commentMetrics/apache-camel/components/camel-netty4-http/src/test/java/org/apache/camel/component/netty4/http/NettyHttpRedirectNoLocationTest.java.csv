commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testHttpRedirectNoLocation() throws Exception {     try {         template.requestBody("netty4-http:http://localhost:" + nextPort + "/test", "Hello World", String.class).         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         NettyHttpOperationFailedException cause = assertIsInstanceOf(NettyHttpOperationFailedException.class, e.getCause()).         assertEquals(302, cause.getStatusCode()).         assertEquals(true, cause.isRedirectError()).         assertEquals(false, cause.hasRedirectLocation()).         assertEquals(null, cause.getRedirectLocation()).     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 302). }
false;public;0;11;;@Override public void configure() throws Exception {     nextPort = getNextPort().     from("netty4-http:http://localhost:" + nextPort + "/test").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 302).         }     }). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             nextPort = getNextPort().             from("netty4-http:http://localhost:" + nextPort + "/test").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 302).                 }             }).         }     }. }
