commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAccessHttpRequest() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("World").     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().method(NettyHttpAccessHttpRequestBeanTest.class, "myTransformer"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().method(NettyHttpAccessHttpRequestBeanTest.class, "myTransformer").         }     }. }
false;public,static;1;6;;public static String myTransformer(FullHttpRequest request) {     String in = request.content().toString(Charset.forName("UTF-8")).     // release as no longer in use     request.content().release().     return "Bye " + in. }
