commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testHttpExpect100Continue() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("request body").     String body = "request body".     DefaultExchange exchange = new DefaultExchange(context).     exchange.getIn().setHeader("Expect", "100-continue").     exchange.getIn().setBody(body).     Exchange result = template.send("netty4-http:http://localhost:{{port}}/foo", exchange).     assertFalse(result.isFailed()).     assertEquals("Bye World", result.getIn().getBody(String.class)).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().constant("Bye World"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().constant("Bye World").         }     }. }
