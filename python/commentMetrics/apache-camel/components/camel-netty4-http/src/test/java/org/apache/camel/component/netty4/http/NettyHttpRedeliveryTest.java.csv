commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testHttpRedelivery() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     assertTrue(latch.await(5, TimeUnit.SECONDS)).     context.getRouteController().startRoute("bar").     assertMockEndpointsSatisfied().     context.getRouteController().stopRoute("foo").     assertEquals(0, context.getInflightRepository().size()). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     // signal to start the route (after 5 attempts)     latch.countDown().     // and there is only 1 inflight     assertEquals(1, context.getInflightRepository().size()). }
false;public;0;21;;@Override public void configure() throws Exception {     onException(Exception.class).maximumRedeliveries(50).redeliveryDelay(100).onExceptionOccurred(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // signal to start the route (after 5 attempts)             latch.countDown().             // and there is only 1 inflight             assertEquals(1, context.getInflightRepository().size()).         }     }).     from("timer:foo").routeId("foo").to("netty4-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true").to("mock:result").     from("netty4-http:http://0.0.0.0:{{port}}/bar").routeId("bar").autoStartup(false).setBody().constant("Bye World"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).maximumRedeliveries(50).redeliveryDelay(100).onExceptionOccurred(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // signal to start the route (after 5 attempts)                     latch.countDown().                     // and there is only 1 inflight                     assertEquals(1, context.getInflightRepository().size()).                 }             }).             from("timer:foo").routeId("foo").to("netty4-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true").to("mock:result").             from("netty4-http:http://0.0.0.0:{{port}}/bar").routeId("bar").autoStartup(false).setBody().constant("Bye World").         }     }. }
