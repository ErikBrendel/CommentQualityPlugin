commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testNettyProducerGet() throws Exception {     String out = fluentTemplate.withHeader("id", "123").to("direct:start").request(String.class).     assertNotNull(out).     assertEquals("123.Donald Duck", out). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;20;;@Override public void configure() throws Exception {     // configure to use netty on localhost with the given port     restConfiguration().component("netty4-http").host("localhost").port(getPort()).     from("direct:start").to("rest:get:users/basic/?id={id}").     // use the rest DSL to define the rest services     rest("/users/").get("basic/?id={id}").route().to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use netty on localhost with the given port             restConfiguration().component("netty4-http").host("localhost").port(getPort()).             from("direct:start").to("rest:get:users/basic/?id={id}").             // use the rest DSL to define the rest services             rest("/users/").get("basic/?id={id}").route().to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).         }     }. }
