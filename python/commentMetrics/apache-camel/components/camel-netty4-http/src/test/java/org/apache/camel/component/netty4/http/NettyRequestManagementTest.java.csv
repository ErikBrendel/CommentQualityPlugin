commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testBufferManagement() {     Exchange exchange = template.send("direct:start", e -> e.getIn().setBody("World")).     Assert.assertEquals("Bye World", exchange.getIn().getBody(String.class)).     exchange.getProperty("buffer", ByteBuf.class).release(). }
false;private,static;1;3;;private static void requestBuffer(Exchange exchange) {     exchange.setProperty("buffer", PooledByteBufAllocator.DEFAULT.directBuffer()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").transform(body().prepend("Bye ")).     from("direct:start").to("netty4-http:http://localhost:{{port}}/foo?synchronous=true").process(NettyRequestManagementTest::requestBuffer). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").transform(body().prepend("Bye ")).             from("direct:start").to("netty4-http:http://localhost:{{port}}/foo?synchronous=true").process(NettyRequestManagementTest::requestBuffer).         }     }. }
