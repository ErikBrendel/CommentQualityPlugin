commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myAuthenticator", new MyAuthenticator()).     return jndi. }
false;public;0;22;;@Test public void testBasicAuth() throws Exception {     try {         template.requestBody("netty4-http:http://localhost:{{port}}/foo", "Hello World", String.class).         fail("Should send back 401").     } catch (CamelExecutionException e) {         NettyHttpOperationFailedException cause = assertIsInstanceOf(NettyHttpOperationFailedException.class, e.getCause()).         assertEquals(401, cause.getStatusCode()).     }     // wait a little bit before next as the connection was closed when denied     Thread.sleep(500).     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     // username:password is scott:secret     String auth = "Basic c2NvdHQ6c2VjcmV0".     String out = template.requestBodyAndHeader("netty4-http:http://localhost:{{port}}/foo", "Hello World", "Authorization", auth, String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo?securityConfiguration.realm=foo&securityConfiguration.securityAuthenticator=#myAuthenticator").to("mock:input").transform().constant("Bye World"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo?securityConfiguration.realm=foo&securityConfiguration.securityAuthenticator=#myAuthenticator").to("mock:input").transform().constant("Bye World").         }     }. }
false;public;1;3;;public void setName(String name) { // noop }
false;public;0;3;;public String getName() {     return null. }
false;public;1;4;;@Override public void setRoleClassNames(String names) { // noop }
false;public;1;8;;@Override public Subject login(HttpPrincipal principal) throws LoginException {     if (!principal.getPassword().equalsIgnoreCase("secret")) {         throw new LoginException("Login denied").     }     // login success so return a subject     return new Subject(). }
false;public;1;4;;@Override public void logout(Subject subject) throws LoginException { // noop }
false;public;1;4;;@Override public String getUserRoles(Subject subject) {     return null. }
