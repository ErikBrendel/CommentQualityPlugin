commented;modifiers;parameterAmount;loc;comment;code
false;public;4;5;;@Override public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) {     this.subject = subject.     this.callbackHandler = callbackHandler. }
false;public;0;43;;@Override public boolean login() throws LoginException {     // get username and password     Callback[] callbacks = new Callback[2].     callbacks[0] = new NameCallback("username").     callbacks[1] = new PasswordCallback("password", false).     try {         callbackHandler.handle(callbacks).         String username = ((NameCallback) callbacks[0]).getName().         char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword().         String password = new String(tmpPassword).         ((PasswordCallback) callbacks[1]).clearPassword().         // as this is just for testing purpose         if (!"secret".equals(password)) {             throw new LoginException("Login denied").         }         // add roles         if ("scott".equals(username)) {             subject.getPrincipals().add(new MyRolePrincipal("admin")).             subject.getPrincipals().add(new MyRolePrincipal("guest")).         } else if ("guest".equals(username)) {             subject.getPrincipals().add(new MyRolePrincipal("guest")).         }     } catch (IOException ioe) {         LoginException le = new LoginException(ioe.toString()).         le.initCause(ioe).         throw le.     } catch (UnsupportedCallbackException uce) {         LoginException le = new LoginException("Error: " + uce.getCallback().toString() + " not available to gather authentication information from the user").         le.initCause(uce).         throw le.     }     return true. }
false;public;0;4;;@Override public boolean commit() throws LoginException {     return true. }
false;public;0;4;;@Override public boolean abort() throws LoginException {     return true. }
false;public;0;6;;@Override public boolean logout() throws LoginException {     subject = null.     callbackHandler = null.     return true. }
