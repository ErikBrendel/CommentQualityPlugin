commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getProducerUrl() {     return "netty4-http:http://localhost:{{port}}/myserver?user=Camel". }
false;public;0;10;;@Test public void testSimulate404() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Page not found").     mock.expectedHeaderReceived(Exchange.HTTP_RESPONSE_CODE, 404).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;2;6;;public Exchange aggregate(Exchange original, Exchange resource) {     // get the response code     Integer code = resource.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class).     assertEquals(404, code.intValue()).     return resource. }
false;public;1;7;;public void process(Exchange exchange) {     // copy the caused exception values to the exchange as we want the response in the regular exchange     // instead as an exception that will get thrown and thus the route breaks     NettyHttpOperationFailedException cause = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, NettyHttpOperationFailedException.class).     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, cause.getStatusCode()).     exchange.getOut().setBody(cause.getContentAsString()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Page not found").     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404). }
false;public;0;41;;@Override public void configure() throws Exception {     // disable error handling     errorHandler(noErrorHandler()).     from("direct:start").enrich("direct:tohttp", new AggregationStrategy() {          public Exchange aggregate(Exchange original, Exchange resource) {             // get the response code             Integer code = resource.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class).             assertEquals(404, code.intValue()).             return resource.         }     }).to("mock:result").     // use this sub route as indirection to handle the HttpOperationFailedException     // and set the data back as data on the exchange to not cause the exception to be thrown     from("direct:tohttp").doTry().to(getProducerUrl()).doCatch(NettyHttpOperationFailedException.class).process(new Processor() {          public void process(Exchange exchange) {             // copy the caused exception values to the exchange as we want the response in the regular exchange             // instead as an exception that will get thrown and thus the route breaks             NettyHttpOperationFailedException cause = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, NettyHttpOperationFailedException.class).             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, cause.getStatusCode()).             exchange.getOut().setBody(cause.getContentAsString()).         }     }).end().     // this is our jetty server where we simulate the 404     from("netty4-http:http://localhost:{{port}}/myserver").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Page not found").             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).         }     }). }
false;protected;0;46;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // disable error handling             errorHandler(noErrorHandler()).             from("direct:start").enrich("direct:tohttp", new AggregationStrategy() {                  public Exchange aggregate(Exchange original, Exchange resource) {                     // get the response code                     Integer code = resource.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class).                     assertEquals(404, code.intValue()).                     return resource.                 }             }).to("mock:result").             // use this sub route as indirection to handle the HttpOperationFailedException             // and set the data back as data on the exchange to not cause the exception to be thrown             from("direct:tohttp").doTry().to(getProducerUrl()).doCatch(NettyHttpOperationFailedException.class).process(new Processor() {                  public void process(Exchange exchange) {                     // copy the caused exception values to the exchange as we want the response in the regular exchange                     // instead as an exception that will get thrown and thus the route breaks                     NettyHttpOperationFailedException cause = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, NettyHttpOperationFailedException.class).                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, cause.getStatusCode()).                     exchange.getOut().setBody(cause.getContentAsString()).                 }             }).end().             // this is our jetty server where we simulate the 404             from("netty4-http:http://localhost:{{port}}/myserver").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Page not found").                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).                 }             }).         }     }. }
