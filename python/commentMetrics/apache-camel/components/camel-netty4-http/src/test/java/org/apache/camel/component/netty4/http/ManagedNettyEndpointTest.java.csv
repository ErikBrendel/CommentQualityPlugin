commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;4;;protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     return context. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;24;;@Test public void testManagement() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     // should not add 10 endpoints     getMockEndpoint("mock:foo").expectedMessageCount(10).     for (int i = 0. i < 10. i++) {         String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo?param" + i + "=value" + i, "Hello World", String.class).         assertEquals("param" + i + "=value" + i, out).     }     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"").     mbeanServer.isRegistered(on).     // should only be 2 endpoints in JMX     Set<ObjectName> set = getMBeanServer().queryNames(new ObjectName("*:context=camel-1,type=endpoints,*"), null).     assertEquals(2, set.size()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:foo").transform().header(Exchange.HTTP_QUERY). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:foo").transform().header(Exchange.HTTP_QUERY).         }     }. }
