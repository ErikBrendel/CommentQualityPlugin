commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testTraceDisabled() throws Exception {     HttpClient httpclient = new HttpClient().     TraceMethod trace = new TraceMethod("http://localhost:" + portTraceOff + "/myservice").     httpclient.executeMethod(trace).     // TRACE shouldn't be allowed by default     assertTrue(trace.getStatusCode() == 405).     trace.releaseConnection(). }
false;public;0;10;;@Test public void testTraceEnabled() throws Exception {     HttpClient httpclient = new HttpClient().     TraceMethod trace = new TraceMethod("http://localhost:" + portTraceOn + "/myservice").     httpclient.executeMethod(trace).     // TRACE is now allowed     assertTrue(trace.getStatusCode() == 200).     trace.releaseConnection(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("netty4-http:http://localhost:" + portTraceOff + "/myservice").to("log:foo").     from("netty4-http:http://localhost:" + portTraceOn + "/myservice?traceEnabled=true").to("log:bar"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://localhost:" + portTraceOff + "/myservice").to("log:foo").             from("netty4-http:http://localhost:" + portTraceOn + "/myservice?traceEnabled=true").to("log:bar").         }     }. }
