commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testQueryParameters() throws Exception {     Exchange exchange = template.request(url + "&quote=Camel%20rocks", null).     assertNotNull(exchange).     String body = exchange.getOut().getBody(String.class).     Map<?, ?> headers = exchange.getOut().getHeaders().     assertEquals("Bye World", body).     assertEquals("Carlsberg", headers.get("beer")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_QUERY, "quote=Camel rocks"). }
false;public;0;15;;@Test public void testQueryParametersWithHeader() throws Exception {     Exchange exchange = template.request(url, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_QUERY, "quote=Camel rocks").         }     }).     assertNotNull(exchange).     String body = exchange.getOut().getBody(String.class).     Map<?, ?> headers = exchange.getOut().getHeaders().     assertEquals("Bye World", body).     assertEquals("Carlsberg", headers.get("beer")). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_PATH, "/cheese").     exchange.getIn().setHeader(Exchange.HTTP_QUERY, "quote=Camel rocks"). }
false;public;0;17;;@Test public void testQueryParametersWithDynamicPath() throws Exception {     // remove "/cheese" from the endpoint URL and place it in the Exchange.HTTP_PATH header     Exchange exchange = template.request(url.replace("/cheese", ""), new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_PATH, "/cheese").             exchange.getIn().setHeader(Exchange.HTTP_QUERY, "quote=Camel rocks").         }     }).     assertNotNull(exchange).     String body = exchange.getOut().getBody(String.class).     Map<?, ?> headers = exchange.getOut().getHeaders().     assertEquals("Bye World", body).     assertEquals("Carlsberg", headers.get("beer")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_PATH, "/cheese"). }
false;public;0;16;;@Test public void testQueryParametersInUriWithDynamicPath() throws Exception {     // remove "/cheese" from the endpoint URL and place it in the Exchange.HTTP_PATH header     Exchange exchange = template.request((url + "&quote=Camel%20rocks").replace("/cheese", ""), new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_PATH, "/cheese").         }     }).     assertNotNull(exchange).     String body = exchange.getOut().getBody(String.class).     Map<?, ?> headers = exchange.getOut().getHeaders().     assertEquals("Bye World", body).     assertEquals("Carlsberg", headers.get("beer")). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String quote = exchange.getIn().getHeader("quote", String.class).     assertEquals("Camel rocks", quote).     exchange.getOut().setBody("Bye World").     exchange.getOut().setHeader("beer", "Carlsberg"). }
false;public;0;12;;@Override public void configure() throws Exception {     from(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String quote = exchange.getIn().getHeader("quote", String.class).             assertEquals("Camel rocks", quote).             exchange.getOut().setBody("Bye World").             exchange.getOut().setHeader("beer", "Carlsberg").         }     }). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String quote = exchange.getIn().getHeader("quote", String.class).                     assertEquals("Camel rocks", quote).                     exchange.getOut().setBody("Bye World").                     exchange.getOut().setHeader("beer", "Carlsberg").                 }             }).         }     }. }
