commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testRequestTimeout() throws Exception {     try {         template.requestBody("netty4-http:http://localhost:{{port}}/timeout?requestTimeout=1000", "Hello Camel", String.class).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         ReadTimeoutException cause = assertIsInstanceOf(ReadTimeoutException.class, e.getCause()).         assertNotNull(cause).     } }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body.contains("Camel")) {         Thread.sleep(3000).     } }
false;public;0;16;;@Override public void configure() throws Exception {     from("netty4-http:http://localhost:{{port}}/timeout").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if (body.contains("Camel")) {                 Thread.sleep(3000).             }         }     }).transform().constant("Bye World"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://localhost:{{port}}/timeout").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if (body.contains("Camel")) {                         Thread.sleep(3000).                     }                 }             }).transform().constant("Bye World").         }     }. }
