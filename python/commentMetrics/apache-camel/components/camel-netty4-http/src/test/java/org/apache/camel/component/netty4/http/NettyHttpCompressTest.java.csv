commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;8;// setup the decompress decoder here ;// setup the decompress decoder here @Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     List<ChannelHandler> decoders = new ArrayList<>().     decoders.add(new HttpContentDecompressor()).     registry.bind("myDecoders", decoders).     return registry. }
false;public;0;15;;@Test public void testContentType() throws Exception {     byte[] data = "Hello World".getBytes(Charset.forName("UTF-8")).     Map<String, Object> headers = new HashMap<>().     headers.put("content-type", "text/plain. charset=\"UTF-8\"").     headers.put("Accept-Encoding", "compress, gzip").     String out = template.requestBodyAndHeaders("netty4-http:http://localhost:{{port}}/foo?decoders=#myDecoders", data, headers, String.class).     // The decoded out has some space to clean up.     assertEquals("Bye World", out.trim()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo?compression=true").transform().constant("Bye World").setHeader("content-type").constant("text/plain. charset=\"UTF-8\""). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo?compression=true").transform().constant("Bye World").setHeader("content-type").constant("text/plain. charset=\"UTF-8\"").         }     }. }
