commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testEndpointUriWithCustomHeaderStrategy() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:outbound").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("Date", "31-03-2014").     Exchange out = template.request("direct:request", null).     assertMockEndpointsSatisfied().     String date = out.getOut().getHeader("sub-date", String.class).     assertNull(date). }
false;protected;0;5;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("customHeaderFilterStrategy", new CustomHeaderFilterStrategy()).     return registry. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:request").setHeader("Date", constant("31-03-2014")).to("netty4-http:http://localhost:{{port}}/myapp/mytest?headerFilterStrategy=#customHeaderFilterStrategy").     from("netty4-http:http://localhost:{{port}}/myapp/mytest").to("mock:outbound").setHeader("sub-date", constant("31-05-2014")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:request").setHeader("Date", constant("31-03-2014")).to("netty4-http:http://localhost:{{port}}/myapp/mytest?headerFilterStrategy=#customHeaderFilterStrategy").             from("netty4-http:http://localhost:{{port}}/myapp/mytest").to("mock:outbound").setHeader("sub-date", constant("31-05-2014")).         }     }. }
