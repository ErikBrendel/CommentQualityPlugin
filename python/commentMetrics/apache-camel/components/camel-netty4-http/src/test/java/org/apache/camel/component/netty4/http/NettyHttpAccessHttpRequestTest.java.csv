commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAccessHttpRequest() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     // we can get the original http request     HttpRequest request = exchange.getIn(NettyHttpMessage.class).getHttpRequest().     assertNotNull(request). }
false;public;0;14;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // we can get the original http request             HttpRequest request = exchange.getIn(NettyHttpMessage.class).getHttpRequest().             assertNotNull(request).         }     }).transform().constant("Bye World"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // we can get the original http request                     HttpRequest request = exchange.getIn(NettyHttpMessage.class).getHttpRequest().                     assertNotNull(request).                 }             }).transform().constant("Bye World").         }     }. }
