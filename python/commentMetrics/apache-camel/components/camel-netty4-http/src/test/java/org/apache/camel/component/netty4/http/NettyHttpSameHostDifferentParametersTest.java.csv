commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testTwoRoutes() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(2).     getMockEndpoint("mock:foo").message(0).header("param1").isEqualTo("value1").     getMockEndpoint("mock:foo").message(1).header("param2").isEqualTo("value2").     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo?param1=value1", "Hello World", String.class).     assertEquals("param1=value1", out).     out = template.requestBody("netty4-http:http://localhost:{{port}}/foo?param2=value2", "Hello Camel", String.class).     assertEquals("param2=value2", out).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:foo").transform().header(Exchange.HTTP_QUERY). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:foo").transform().header(Exchange.HTTP_QUERY).         }     }. }
