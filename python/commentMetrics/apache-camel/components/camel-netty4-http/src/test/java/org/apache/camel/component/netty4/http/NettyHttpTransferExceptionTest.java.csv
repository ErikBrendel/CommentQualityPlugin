commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testHttpTransferException() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     try {         template.requestBody("netty4-http:http://localhost:{{port}}/foo?transferException=true", "Hello World", String.class).         fail("Should have failed").     } catch (CamelExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Camel cannot do this", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo?transferException=true").to("mock:input").throwException(new IllegalArgumentException("Camel cannot do this")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo?transferException=true").to("mock:input").throwException(new IllegalArgumentException("Camel cannot do this")).         }     }. }
