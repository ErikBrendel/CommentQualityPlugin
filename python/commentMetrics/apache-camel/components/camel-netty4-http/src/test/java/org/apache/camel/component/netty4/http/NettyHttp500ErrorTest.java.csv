commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testHttp500Error() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     try {         template.requestBody("netty4-http:http://localhost:{{port}}/foo", "Hello World", String.class).         fail("Should have failed").     } catch (CamelExecutionException e) {         NettyHttpOperationFailedException cause = assertIsInstanceOf(NettyHttpOperationFailedException.class, e.getCause()).         assertEquals(500, cause.getStatusCode()).         assertEquals("Camel cannot do this", cause.getContentAsString()).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testHttp500ErrorDisabled() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     String body = template.requestBody("netty4-http:http://localhost:{{port}}/foo?throwExceptionOnFailure=false", "Hello World", String.class).     assertEquals("Camel cannot do this", body).     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;17;;@Test public void testHttp500ErrorDisabledStatusCode() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     Exchange out = template.request("netty4-http:http://localhost:{{port}}/foo?throwExceptionOnFailure=false", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertNotNull(out).     assertEquals(500, out.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("Internal Server Error", out.getOut().getHeader(Exchange.HTTP_RESPONSE_TEXT)).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(500)).setBody().constant("Camel cannot do this"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(500)).setBody().constant("Camel cannot do this").         }     }. }
