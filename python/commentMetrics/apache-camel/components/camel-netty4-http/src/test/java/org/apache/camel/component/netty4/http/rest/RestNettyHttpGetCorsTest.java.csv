commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS"). }
false;public;0;29;;@Test public void testCors() throws Exception {     // send OPTIONS first which should not be routed     getMockEndpoint("mock:input").expectedMessageCount(0).     Exchange out = template.request("http://localhost:" + getPort() + "/users/123/basic", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS").         }     }).     assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_ORIGIN, out.getOut().getHeader("Access-Control-Allow-Origin")).     assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_METHODS, out.getOut().getHeader("Access-Control-Allow-Methods")).     assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_HEADERS, out.getOut().getHeader("Access-Control-Allow-Headers")).     assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_MAX_AGE, out.getOut().getHeader("Access-Control-Max-Age")).     assertMockEndpointsSatisfied().     resetMocks().     getMockEndpoint("mock:input").expectedMessageCount(1).     // send GET request which should be routed     String out2 = template.requestBody("http://localhost:" + getPort() + "/users/123/basic", null, String.class).     assertEquals("123.Donald Duck", out2).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;17;;@Override public void configure() throws Exception {     // configure to use netty4-http on localhost with the given port     restConfiguration().component("netty4-http").host("localhost").port(getPort()).enableCORS(true).     // use the rest DSL to define the rest services     rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use netty4-http on localhost with the given port             restConfiguration().component("netty4-http").host("localhost").port(getPort()).enableCORS(true).             // use the rest DSL to define the rest services             rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).         }     }. }
