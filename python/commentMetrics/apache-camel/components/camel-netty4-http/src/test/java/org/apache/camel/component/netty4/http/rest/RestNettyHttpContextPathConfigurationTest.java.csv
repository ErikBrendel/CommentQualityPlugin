commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testProducerGet() throws Exception {     String out = template.requestBody("netty4-http:http://localhost:{{port}}/rest/users/123", null, String.class).     assertEquals("123.Donald Duck", out).     out = template.requestBody("netty4-http:http://localhost:{{port}}/rest/users/list", null, String.class).     assertEquals("123.Donald Duck\n456.John Doe", out). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("123.Donald Duck\n456.John Doe"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;26;;@Override public void configure() throws Exception {     // configure to use netty4-http on localhost with the given port     restConfiguration().component("netty4-http").contextPath("/rest").host("localhost").port(getPort()).     // use the rest DSL to define the rest services     rest("/users/").get("{id}").route().to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }).endRest().get("list").route().to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("123.Donald Duck\n456.John Doe").         }     }). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use netty4-http on localhost with the given port             restConfiguration().component("netty4-http").contextPath("/rest").host("localhost").port(getPort()).             // use the rest DSL to define the rest services             rest("/users/").get("{id}").route().to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).endRest().get("list").route().to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("123.Donald Duck\n456.John Doe").                 }             }).         }     }. }
