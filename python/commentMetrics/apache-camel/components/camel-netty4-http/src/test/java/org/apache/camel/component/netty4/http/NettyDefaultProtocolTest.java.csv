commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDefaultProtocol() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:input").expectedHeaderReceived("beer", "yes").     getMockEndpoint("mock:input").expectedHeaderReceived("host", "localhost:" + getPort()).     getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_METHOD, "POST").     getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_URL, "http://localhost:" + getPort() + "/foo").     getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_URI, "/foo").     getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_QUERY, "beer=yes").     getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_PATH, "").     String out = template.requestBody("netty4-http:localhost:{{port}}/foo?beer=yes", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http:0.0.0.0:{{port}}/foo").to("mock:input").transform().constant("Bye World"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http:0.0.0.0:{{port}}/foo").to("mock:input").transform().constant("Bye World").         }     }. }
