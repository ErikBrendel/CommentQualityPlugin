commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     // ensure jsse clients can validate the self signed dummy localhost cert,     // use the server keystore as the trust store for these tests     URL trustStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     setSystemProp("javax.net.ssl.trustStore", trustStoreUrl.toURI().getPath()).     super.setUp(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     restoreSystemProperties().     super.tearDown(). }
false;protected;2;4;;protected void setSystemProp(String key, String value) {     String originalValue = System.setProperty(key, value).     originalValues.put(key, originalValue != null ? originalValue : NULL_VALUE_MARKER). }
false;protected;0;10;;protected void restoreSystemProperties() {     for (Object key : originalValues.keySet()) {         Object value = originalValues.get(key).         if (NULL_VALUE_MARKER.equals(value)) {             System.clearProperty((String) key).         } else {             System.setProperty((String) key, (String) value).         }     } }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     SSLSession session = exchange.getIn().getHeader(NettyConstants.NETTY_SSL_SESSION, SSLSession.class).     if (session != null) {         exchange.getOut().setBody("Bye World").     } else {         exchange.getOut().setBody("Cannot start conversion without SSLSession").     } }
false;public;0;14;;public void configure() {     from("netty4-http:https://localhost:{{port}}?ssl=true&passphrase=changeit&keyStoreResource=jsse/localhost.ks&trustStoreResource=jsse/localhost.ks").to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             SSLSession session = exchange.getIn().getHeader(NettyConstants.NETTY_SSL_SESSION, SSLSession.class).             if (session != null) {                 exchange.getOut().setBody("Bye World").             } else {                 exchange.getOut().setBody("Cannot start conversion without SSLSession").             }         }     }). }
false;public;0;31;;@Test public void testSSLInOutWithNettyConsumer() throws Exception {     // ibm jdks dont have sun security algorithms     if (isJavaVendor("ibm")) {         return.     }     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     context.addRoutes(new RouteBuilder() {          public void configure() {             from("netty4-http:https://localhost:{{port}}?ssl=true&passphrase=changeit&keyStoreResource=jsse/localhost.ks&trustStoreResource=jsse/localhost.ks").to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     SSLSession session = exchange.getIn().getHeader(NettyConstants.NETTY_SSL_SESSION, SSLSession.class).                     if (session != null) {                         exchange.getOut().setBody("Bye World").                     } else {                         exchange.getOut().setBody("Cannot start conversion without SSLSession").                     }                 }             }).         }     }).     context.start().     String out = template.requestBody("https://localhost:{{port}}", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
