commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     System.setProperty("java.security.auth.login.config", "src/test/resources/myjaas.config").     super.setUp(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     System.clearProperty("java.security.auth.login.config").     super.tearDown(). }
false;protected;0;19;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     NettyHttpSecurityConfiguration security = new NettyHttpSecurityConfiguration().     security.setRealm("karaf").     SecurityAuthenticator auth = new JAASSecurityAuthenticator().     auth.setName("karaf").     security.setSecurityAuthenticator(auth).     SecurityConstraintMapping matcher = new SecurityConstraintMapping().     matcher.addInclusion("/*").     matcher.addExclusion("/public/*").     security.setSecurityConstraint(matcher).     jndi.bind("mySecurityConfig", security).     return jndi. }
false;public;0;26;;@Test public void testBasicAuth() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello Public", "Hello World").     // we dont need auth for the public page     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo/public/hello.txt", "Hello Public", String.class).     assertEquals("Bye World", out).     try {         template.requestBody("netty4-http:http://localhost:{{port}}/foo", "Hello World", String.class).         fail("Should send back 401").     } catch (CamelExecutionException e) {         NettyHttpOperationFailedException cause = assertIsInstanceOf(NettyHttpOperationFailedException.class, e.getCause()).         assertEquals(401, cause.getStatusCode()).     }     // wait a little bit before next as the connection was closed when denied     Thread.sleep(500).     // username:password is scott:secret     String auth = "Basic c2NvdHQ6c2VjcmV0".     out = template.requestBodyAndHeader("netty4-http:http://localhost:{{port}}/foo", "Hello World", "Authorization", auth, String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo?matchOnUriPrefix=true&securityConfiguration=#mySecurityConfig").to("mock:input").transform().constant("Bye World"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo?matchOnUriPrefix=true&securityConfiguration=#mySecurityConfig").to("mock:input").transform().constant("Bye World").         }     }. }
