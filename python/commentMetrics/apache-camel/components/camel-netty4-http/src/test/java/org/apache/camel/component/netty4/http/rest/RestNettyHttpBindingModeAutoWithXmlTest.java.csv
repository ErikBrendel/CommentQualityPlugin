commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBindingMode() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(UserJaxbPojo.class).     String body = "<user name=\"Donald Duck\" id=\"123\"></user>".     template.sendBody("netty4-http:http://localhost:" + getPort() + "/users/new", body).     assertMockEndpointsSatisfied().     UserJaxbPojo user = mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class).     assertNotNull(user).     assertEquals(123, user.getId()).     assertEquals("Donald Duck", user.getName()). }
false;public;0;9;;@Override public void configure() throws Exception {     restConfiguration().component("netty4-http").host("localhost").port(getPort()).bindingMode(RestBindingMode.auto).     // use the rest DSL to define the rest services     rest("/users/").post("new").consumes("application/xml").type(UserJaxbPojo.class).to("mock:input"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("netty4-http").host("localhost").port(getPort()).bindingMode(RestBindingMode.auto).             // use the rest DSL to define the rest services             rest("/users/").post("new").consumes("application/xml").type(UserJaxbPojo.class).to("mock:input").         }     }. }
