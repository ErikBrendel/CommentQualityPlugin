commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testRawHttpRequestAndResponseInBean() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("World", "Camel").     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "World", String.class).     assertEquals("Bye World", out).     String out2 = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "Camel", String.class).     assertEquals("Bye Camel", out2).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().method(NettyHttpAccessHttpRequestAndResponseBeanTest.class, "myTransformer"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().method(NettyHttpAccessHttpRequestAndResponseBeanTest.class, "myTransformer").         }     }. }
true;public,static;1;13;/**  * We can use both a netty http request and response type for transformation  */ ;/**  * We can use both a netty http request and response type for transformation  */ public static HttpResponse myTransformer(FullHttpRequest request) {     String in = request.content().toString(Charset.forName("UTF-8")).     String reply = "Bye " + in.     request.content().release().     HttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, NettyConverter.toByteBuffer(reply.getBytes())).     response.headers().set(HttpHeaderNames.CONTENT_LENGTH.toString(), reply.length()).     return response. }
