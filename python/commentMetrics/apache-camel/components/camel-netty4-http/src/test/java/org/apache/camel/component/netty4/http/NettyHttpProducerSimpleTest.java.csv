commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testHttpSimple() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     String out = template.requestBody("netty4-http:http://localhost:{{port}}/foo", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;24;;@Test public void testHttpSimpleExchange() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("Hello World").     Exchange out = template.request("netty4-http:http://localhost:{{port}}/foo", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertNotNull(out).     assertTrue(out.hasOut()).     NettyHttpMessage response = out.getOut(NettyHttpMessage.class).     assertNotNull(response).     assertEquals(200, response.getHttpResponse().status().code()).     // we can also get the response as body     HttpResponse body = out.getOut().getBody(HttpResponse.class).     assertNotNull(body).     assertEquals(200, body.status().code()).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().constant("Bye World"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("netty4-http:http://0.0.0.0:{{port}}/foo").to("mock:input").transform().constant("Bye World").         }     }. }
