commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;@BeforeClass public static void initPort() throws Exception {     File file = new File("target/nettyport.txt").     if (!file.exists()) {         // start from somewhere in the 26xxx range         port = AvailablePortFinder.getNextAvailable(26000).     } else {         // read port number from file         String s = IOConverter.toString(file, null).         port = Integer.parseInt(s).         // use next free port         port = AvailablePortFinder.getNextAvailable(port + 1).     } }
false;public,static;0;12;;@AfterClass public static void savePort() throws Exception {     File file = new File("target/nettyport.txt").     // save to file, do not append     FileOutputStream fos = new FileOutputStream(file, false).     try {         fos.write(String.valueOf(port).getBytes()).     } finally {         fos.close().     } }
false;public,static;0;6;;@BeforeClass public static void startLeakDetection() {     System.setProperty("io.netty.leakDetection.maxRecords", "100").     System.setProperty("io.netty.leakDetection.acquireAndReleaseOnly", "true").     ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.PARANOID). }
false;public,static;0;17;;@AfterClass public static void verifyNoLeaks() throws Exception {     // Force GC to bring up leaks     System.gc().     // Kick leak detection logging     ByteBufAllocator.DEFAULT.buffer(1).release().     Collection<LogEvent> events = LogCaptureAppender.getEvents().     if (!events.isEmpty()) {         String message = "Leaks detected while running tests: " + events.         // Just write the message into log to help debug         for (LogEvent event : events) {             LOG.info(event.getMessage().getFormattedMessage()).         }         LogCaptureAppender.reset().         throw new AssertionError(message).     } }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("ref:prop")).     return context. }
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     Properties prop = new Properties().     prop.setProperty("port", "" + getPort()).     jndi.bind("prop", prop).     return jndi. }
false;protected;0;4;;protected int getNextPort() {     port = AvailablePortFinder.getNextAvailable(port + 1).     return port. }
false;protected;0;3;;protected int getPort() {     return port. }
