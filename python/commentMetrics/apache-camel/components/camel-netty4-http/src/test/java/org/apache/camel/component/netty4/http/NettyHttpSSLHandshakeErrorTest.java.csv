commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;public void configure() {     from("netty4-http:https://localhost:{{port}}?ssl=true&needClientAuth=true&keyStoreFormat=JKS" + "&passphrase=storepassword&keyStoreResource=jsse/server-keystore.jks&trustStoreResource=jsse/server-truststore.jks").to("mock:target"). }
false;public;0;31;;@Test public void testHttpsHandshakeError() throws Exception {     // ibm jdks dont have sun security algorithms     if (isJavaVendor("ibm")) {         return.     }     getMockEndpoint("mock:target").expectedMessageCount(0).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("netty4-http:https://localhost:{{port}}?ssl=true&needClientAuth=true&keyStoreFormat=JKS" + "&passphrase=storepassword&keyStoreResource=jsse/server-keystore.jks&trustStoreResource=jsse/server-truststore.jks").to("mock:target").         }     }).     context.start().     DefaultExchange exchange = new DefaultExchange(context).     Exchange response = template.send("netty4-http:https://localhost:{{port}}?requestTimeout=10000&throwExceptionOnFailure=false" + "&ssl=true&keyStoreFormat=JKS&passphrase=storepassword&keyStoreResource=jsse/client-keystore.jks&trustStoreResource=jsse/server-truststore.jks", exchange).     Exception ex = response.getException().     assertTrue("should have failed", response.isFailed()).     assertNotNull(ex.getCause()).     assertEquals("exception expected", javax.net.ssl.SSLHandshakeException.class, ex.getCause().getClass()).     assertMockEndpointsSatisfied(). }
