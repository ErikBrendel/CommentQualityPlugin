commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testUnbind() throws Exception {     String dnToUnbind = "some dn to unbind".     initializeTest(dnToUnbind).     producer.sendBody("spring-ldap:" + SpringLdapTestConfiguration.LDAP_MOCK_NAME + "?operation=unbind", body).     verify(ldapTemplate).unbind(dnCaptor.capture()).     assertEquals(dnToUnbind, dnCaptor.getValue()). }
false;public;0;19;;@Test public void testBind() throws Exception {     String dnToBind = "some dn to bind".     initializeTest(dnToBind).     Attributes attributes = new BasicAttributes().     attributes.put("some attribute name", "some attribute value").     body.put(SpringLdapProducer.ATTRIBUTES, attributes).     producer.sendBody("spring-ldap:" + SpringLdapTestConfiguration.LDAP_MOCK_NAME + "?operation=bind", body).     verify(ldapTemplate).bind(dnCaptor.capture(), objectToBindCaptor.capture(), attributesCaptor.capture()).     assertEquals(dnToBind, dnCaptor.getValue()).     assertNull(objectToBindCaptor.getValue()).     assertEquals(attributes, attributesCaptor.getValue()). }
false;public;0;24;;@Test public void testSearch() throws Exception {     String dnToSearch = "some dn to bind".     initializeTest(dnToSearch).     String filter = "some ldap filter".     body.put(SpringLdapProducer.FILTER, filter).     List<String> searchResult = Collections.singletonList("some search result").     when(ldapTemplate.search(any(String.class), any(String.class), any(Integer.class), ArgumentMatchers.<AttributesMapper<String>>any())).thenReturn(searchResult).     MockEndpoint resultEndpoint = (MockEndpoint) context.getEndpoint("mock:result").     resultEndpoint.expectedBodiesReceived(Collections.singletonList(searchResult)).     producer.sendBody("direct:start", body).     verify(ldapTemplate).search(dnCaptor.capture(), filterCaptor.capture(), scopeCaptor.capture(), mapperCaptor.capture()).     assertEquals(dnToSearch, dnCaptor.getValue()).     assertEquals((Integer) SearchControls.ONELEVEL_SCOPE, scopeCaptor.getValue()).     assertEquals(filter, filterCaptor.getValue()).     resultEndpoint.assertIsSatisfied(). }
false;protected;0;7;;@Override protected AbstractApplicationContext createApplicationContext() {     AnnotationConfigApplicationContext springContext = new AnnotationConfigApplicationContext().     springContext.register(SpringLdapTestConfiguration.class).     springContext.refresh().     return springContext. }
false;public;0;3;;public void configure() {     from("direct:start").to(ldapUriForSearchTest).to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          private String ldapUriForSearchTest = "spring-ldap:" + SpringLdapTestConfiguration.LDAP_MOCK_NAME + "?operation=search&scope=onelevel".          public void configure() {             from("direct:start").to(ldapUriForSearchTest).to("mock:result").         }     }. }
false;private;1;8;;private void initializeTest(String dn) {     ldapTemplate = context.getRegistry().lookupByNameAndType(SpringLdapTestConfiguration.LDAP_MOCK_NAME, LdapTemplate.class).     producer = context.createProducerTemplate().     body = new HashMap<>().     body.put(SpringLdapProducer.DN, dn). }
