# id;timestamp;commentText;codeText;commentWords;codeWords
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1361264210;Performs the LDAP operation defined in SpringLdapEndpoint that created this producer._The in-message in the exchange must be a map, containing the following entries:_<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._</pre>_The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)__        String dn = (String) body.get(DN)___        if (null == dn || dn.length() == 0) {_            throw new UnsupportedOperationException(_                    "DN must not be empty, but you provided an empty DN")__        }__        LdapOperation operation = endpoint.getOperation()__        LdapTemplate ldapTemplate = endpoint.getLdapTemplate()___        if (null == operation) {_            throw new UnsupportedOperationException(_                    "LDAP operation must not be empty, but you provided an empty operation")__        }__        switch (operation) {_        case SEARCH:_            String filter = (String) body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.getScope(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes) body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        default:_            throw new UnsupportedOperationException(_                    "Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '"_                            + operation + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,string,dn,string,body,get,dn,if,null,dn,dn,length,0,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,ldap,operation,operation,endpoint,get,operation,ldap,template,ldap,template,endpoint,get,ldap,template,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,get,scope,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1430199001;Performs the LDAP operation defined in SpringLdapEndpoint that created this producer._The in-message in the exchange must be a map, containing the following entries:_<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._</pre>_The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)__        String dn = (String) body.get(DN)___        if (null == dn || dn.length() == 0) {_            throw new UnsupportedOperationException(_                    "DN must not be empty, but you provided an empty DN")__        }__        LdapOperation operation = endpoint.getOperation()__        LdapTemplate ldapTemplate = endpoint.getLdapTemplate()___        if (null == operation) {_            throw new UnsupportedOperationException(_                    "LDAP operation must not be empty, but you provided an empty operation")__        }__        switch (operation) {_        case SEARCH:_            String filter = (String) body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes) body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        default:_            throw new UnsupportedOperationException(_                    "Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '"_                            + operation + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,string,dn,string,body,get,dn,if,null,dn,dn,length,0,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,ldap,operation,operation,endpoint,get,operation,ldap,template,ldap,template,endpoint,get,ldap,template,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1479455606;Performs the LDAP operation defined in SpringLdapEndpoint that created_this producer. The in-message in the exchange must be a map, containing_the following entries:__<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._key: "password" - necessary for the authentication operation only__key: "modificationItems" - necessary for the modify_attributes operation only__key: "function" - necessary for the function_driven operation only_ provides a flexible hook into the {@link LdapTemplate} to call any method_key: "request" - necessary for the function_driven operation only_ passed into the "function" to enable the client to bind parameters that need to be passed into the {@link LdapTemplate}_</pre>__The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)___        LdapOperation operation = endpoint.getOperation()__        if (null == operation) {_            throw new UnsupportedOperationException("LDAP operation must not be empty, but you provided an empty operation")__        }_        _        String dn = (String)body.get(DN)__        if (operation != FUNCTION_DRIVEN && (StringUtils.isBlank(dn))) {_            throw new UnsupportedOperationException("DN must not be empty, but you provided an empty DN")__        }__        LdapOperations ldapTemplate = endpoint.getLdapTemplate()__        switch (operation) {_        case SEARCH:_            String filter = (String)body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes)body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        case AUTHENTICATE:_            ldapTemplate.authenticate(LdapQueryBuilder.query().base(dn).filter((String)body.get(FILTER)), (String)body.get(PASSWORD))__            break__        case MODIFY_ATTRIBUTES:_            ModificationItem[] modificationItems = (ModificationItem[])body.get(MODIFICATION_ITEMS)__            ldapTemplate.modifyAttributes(dn, modificationItems)__            break__        case FUNCTION_DRIVEN:_            LdapOperationsFunction<Object, ?> ldapOperationFunction = (LdapOperationsFunction<Object, ?>)body.get(FUNCTION)__            Object ldapOperationRequest = body.get(REQUEST)__            exchange.getIn().setBody(ldapOperationFunction.apply(ldapTemplate, ldapOperationRequest))__            break__        default:_			throw new UnsupportedOperationException(_					"Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '" + operation + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,key,password,necessary,for,the,authentication,operation,only,key,modification,items,necessary,for,the,operation,only,key,function,necessary,for,the,operation,only,provides,a,flexible,hook,into,the,link,ldap,template,to,call,any,method,key,request,necessary,for,the,operation,only,passed,into,the,function,to,enable,the,client,to,bind,parameters,that,need,to,be,passed,into,the,link,ldap,template,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,ldap,operation,operation,endpoint,get,operation,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,string,dn,string,body,get,dn,if,operation,string,utils,is,blank,dn,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,ldap,operations,ldap,template,endpoint,get,ldap,template,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,case,authenticate,ldap,template,authenticate,ldap,query,builder,query,base,dn,filter,string,body,get,filter,string,body,get,password,break,case,modification,item,modification,items,modification,item,body,get,ldap,template,modify,attributes,dn,modification,items,break,case,ldap,operations,function,object,ldap,operation,function,ldap,operations,function,object,body,get,function,object,ldap,operation,request,body,get,request,exchange,get,in,set,body,ldap,operation,function,apply,ldap,template,ldap,operation,request,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1479455606;Performs the LDAP operation defined in SpringLdapEndpoint that created_this producer. The in-message in the exchange must be a map, containing_the following entries:__<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._key: "password" - necessary for the authentication operation only__key: "modificationItems" - necessary for the modify_attributes operation only__key: "function" - necessary for the function_driven operation only_ provides a flexible hook into the {@link LdapTemplate} to call any method_key: "request" - necessary for the function_driven operation only_ passed into the "function" to enable the client to bind parameters that need to be passed into the {@link LdapTemplate}_</pre>__The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)___        LdapOperation operation = endpoint.getOperation()__        if (null == operation) {_            throw new UnsupportedOperationException("LDAP operation must not be empty, but you provided an empty operation")__        }__        String dn = (String)body.get(DN)__        if (operation != LdapOperation.FUNCTION_DRIVEN && (StringUtils.isBlank(dn))) {_            throw new UnsupportedOperationException("DN must not be empty, but you provided an empty DN")__        }__        LdapOperations ldapTemplate = endpoint.getLdapTemplate()__        switch (operation) {_        case SEARCH:_            String filter = (String)body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes)body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        case AUTHENTICATE:_            ldapTemplate.authenticate(LdapQueryBuilder.query().base(dn).filter((String)body.get(FILTER)), (String)body.get(PASSWORD))__            break__        case MODIFY_ATTRIBUTES:_            ModificationItem[] modificationItems = (ModificationItem[])body.get(MODIFICATION_ITEMS)__            ldapTemplate.modifyAttributes(dn, modificationItems)__            break__        case FUNCTION_DRIVEN:_            LdapOperationsFunction<Object, ?> ldapOperationFunction = (LdapOperationsFunction<Object, ?>)body.get(FUNCTION)__            Object ldapOperationRequest = body.get(REQUEST)__            exchange.getIn().setBody(ldapOperationFunction.apply(ldapTemplate, ldapOperationRequest))__            break__        default:_            throw new UnsupportedOperationException("Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '" + operation_                                                    + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,key,password,necessary,for,the,authentication,operation,only,key,modification,items,necessary,for,the,operation,only,key,function,necessary,for,the,operation,only,provides,a,flexible,hook,into,the,link,ldap,template,to,call,any,method,key,request,necessary,for,the,operation,only,passed,into,the,function,to,enable,the,client,to,bind,parameters,that,need,to,be,passed,into,the,link,ldap,template,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,ldap,operation,operation,endpoint,get,operation,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,string,dn,string,body,get,dn,if,operation,ldap,operation,string,utils,is,blank,dn,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,ldap,operations,ldap,template,endpoint,get,ldap,template,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,case,authenticate,ldap,template,authenticate,ldap,query,builder,query,base,dn,filter,string,body,get,filter,string,body,get,password,break,case,modification,item,modification,items,modification,item,body,get,ldap,template,modify,attributes,dn,modification,items,break,case,ldap,operations,function,object,ldap,operation,function,ldap,operations,function,object,body,get,function,object,ldap,operation,request,body,get,request,exchange,get,in,set,body,ldap,operation,function,apply,ldap,template,ldap,operation,request,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1480586011;Performs the LDAP operation defined in SpringLdapEndpoint that created_this producer. The in-message in the exchange must be a map, containing_the following entries:__<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._key: "password" - necessary for the authentication operation only__key: "modificationItems" - necessary for the modify_attributes operation only__key: "function" - necessary for the function_driven operation only_ provides a flexible hook into the {@link LdapTemplate} to call any method_key: "request" - necessary for the function_driven operation only_ passed into the "function" to enable the client to bind parameters that need to be passed into the {@link LdapTemplate}_</pre>__The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)___        LdapOperation operation = endpoint.getOperation()__        if (null == operation) {_            throw new UnsupportedOperationException("LDAP operation must not be empty, but you provided an empty operation")__        }__        String dn = (String)body.get(DN)__        if (operation != LdapOperation.FUNCTION_DRIVEN && (StringUtils.isBlank(dn))) {_            throw new UnsupportedOperationException("DN must not be empty, but you provided an empty DN")__        }__        LdapOperations ldapTemplate = endpoint.getLdapTemplate()__        switch (operation) {_        case SEARCH:_            String filter = (String)body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes)body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        case AUTHENTICATE:_            ldapTemplate.authenticate(LdapQueryBuilder.query().base(dn).filter((String)body.get(FILTER)), (String)body.get(PASSWORD))__            break__        case MODIFY_ATTRIBUTES:_            ModificationItem[] modificationItems = (ModificationItem[])body.get(MODIFICATION_ITEMS)__            ldapTemplate.modifyAttributes(dn, modificationItems)__            break__        case FUNCTION_DRIVEN:_            BiFunction<LdapOperations, Object, ?> ldapOperationFunction = (BiFunction<LdapOperations, Object, ?>)body.get(FUNCTION)__            Object ldapOperationRequest = body.get(REQUEST)__            exchange.getIn().setBody(ldapOperationFunction.apply(ldapTemplate, ldapOperationRequest))__            break__        default:_            throw new UnsupportedOperationException("Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '" + operation_                                                    + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,key,password,necessary,for,the,authentication,operation,only,key,modification,items,necessary,for,the,operation,only,key,function,necessary,for,the,operation,only,provides,a,flexible,hook,into,the,link,ldap,template,to,call,any,method,key,request,necessary,for,the,operation,only,passed,into,the,function,to,enable,the,client,to,bind,parameters,that,need,to,be,passed,into,the,link,ldap,template,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,ldap,operation,operation,endpoint,get,operation,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,string,dn,string,body,get,dn,if,operation,ldap,operation,string,utils,is,blank,dn,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,ldap,operations,ldap,template,endpoint,get,ldap,template,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,case,authenticate,ldap,template,authenticate,ldap,query,builder,query,base,dn,filter,string,body,get,filter,string,body,get,password,break,case,modification,item,modification,items,modification,item,body,get,ldap,template,modify,attributes,dn,modification,items,break,case,bi,function,ldap,operations,object,ldap,operation,function,bi,function,ldap,operations,object,body,get,function,object,ldap,operation,request,body,get,request,exchange,get,in,set,body,ldap,operation,function,apply,ldap,template,ldap,operation,request,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1491985578;Performs the LDAP operation defined in SpringLdapEndpoint that created_this producer. The in-message in the exchange must be a map, containing_the following entries:__<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._key: "password" - necessary for the authentication operation only__key: "modificationItems" - necessary for the modify_attributes operation only__key: "function" - necessary for the function_driven operation only_ provides a flexible hook into the {@link LdapTemplate} to call any method_key: "request" - necessary for the function_driven operation only_ passed into the "function" to enable the client to bind parameters that need to be passed into the {@link LdapTemplate}_</pre>__The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)___        LdapOperation operation = endpoint.getOperation()__        if (null == operation) {_            throw new UnsupportedOperationException("LDAP operation must not be empty, but you provided an empty operation")__        }__        LdapTemplate ldapTemplate = endpoint.getLdapTemplate()___        String dn = (String)body.get(DN)__        if (StringUtils.isBlank(dn)) {_            ContextSource contextSource = ldapTemplate.getContextSource()__            if (contextSource instanceof BaseLdapPathContextSource) {_		dn = ((BaseLdapPathContextSource) contextSource).getBaseLdapPathAsString()__	    }_        }_        if (operation != LdapOperation.FUNCTION_DRIVEN && (StringUtils.isBlank(dn))) {_            throw new UnsupportedOperationException("DN must not be empty, but you provided an empty DN")__        }__        switch (operation) {_        case SEARCH:_            String filter = (String)body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes)body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        case AUTHENTICATE:_            ldapTemplate.authenticate(LdapQueryBuilder.query().base(dn).filter((String)body.get(FILTER)), (String)body.get(PASSWORD))__            break__        case MODIFY_ATTRIBUTES:_            ModificationItem[] modificationItems = (ModificationItem[])body.get(MODIFICATION_ITEMS)__            ldapTemplate.modifyAttributes(dn, modificationItems)__            break__        case FUNCTION_DRIVEN:_            BiFunction<LdapOperations, Object, ?> ldapOperationFunction = (BiFunction<LdapOperations, Object, ?>)body.get(FUNCTION)__            Object ldapOperationRequest = body.get(REQUEST)__            exchange.getIn().setBody(ldapOperationFunction.apply(ldapTemplate, ldapOperationRequest))__            break__        default:_            throw new UnsupportedOperationException("Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '" + operation_                                                    + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,key,password,necessary,for,the,authentication,operation,only,key,modification,items,necessary,for,the,operation,only,key,function,necessary,for,the,operation,only,provides,a,flexible,hook,into,the,link,ldap,template,to,call,any,method,key,request,necessary,for,the,operation,only,passed,into,the,function,to,enable,the,client,to,bind,parameters,that,need,to,be,passed,into,the,link,ldap,template,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,ldap,operation,operation,endpoint,get,operation,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,ldap,template,ldap,template,endpoint,get,ldap,template,string,dn,string,body,get,dn,if,string,utils,is,blank,dn,context,source,context,source,ldap,template,get,context,source,if,context,source,instanceof,base,ldap,path,context,source,dn,base,ldap,path,context,source,context,source,get,base,ldap,path,as,string,if,operation,ldap,operation,string,utils,is,blank,dn,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,case,authenticate,ldap,template,authenticate,ldap,query,builder,query,base,dn,filter,string,body,get,filter,string,body,get,password,break,case,modification,item,modification,items,modification,item,body,get,ldap,template,modify,attributes,dn,modification,items,break,case,bi,function,ldap,operations,object,ldap,operation,function,bi,function,ldap,operations,object,body,get,function,object,ldap,operation,request,body,get,request,exchange,get,in,set,body,ldap,operation,function,apply,ldap,template,ldap,operation,request,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1491985752;Performs the LDAP operation defined in SpringLdapEndpoint that created_this producer. The in-message in the exchange must be a map, containing_the following entries:__<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._key: "password" - necessary for the authentication operation only__key: "modificationItems" - necessary for the modify_attributes operation only__key: "function" - necessary for the function_driven operation only_ provides a flexible hook into the {@link LdapTemplate} to call any method_key: "request" - necessary for the function_driven operation only_ passed into the "function" to enable the client to bind parameters that need to be passed into the {@link LdapTemplate}_</pre>__The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)___        LdapOperation operation = endpoint.getOperation()__        if (null == operation) {_            throw new UnsupportedOperationException("LDAP operation must not be empty, but you provided an empty operation")__        }__        LdapTemplate ldapTemplate = endpoint.getLdapTemplate()___        String dn = (String)body.get(DN)__        if (StringUtils.isBlank(dn)) {_            ContextSource contextSource = ldapTemplate.getContextSource()__            if (contextSource instanceof BaseLdapPathContextSource) {_                dn = ((BaseLdapPathContextSource) contextSource).getBaseLdapPathAsString()__            }_        }_        if (operation != LdapOperation.FUNCTION_DRIVEN && (StringUtils.isBlank(dn))) {_            throw new UnsupportedOperationException("DN must not be empty, but you provided an empty DN")__        }__        switch (operation) {_        case SEARCH:_            String filter = (String)body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes)body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        case AUTHENTICATE:_            ldapTemplate.authenticate(LdapQueryBuilder.query().base(dn).filter((String)body.get(FILTER)), (String)body.get(PASSWORD))__            break__        case MODIFY_ATTRIBUTES:_            ModificationItem[] modificationItems = (ModificationItem[])body.get(MODIFICATION_ITEMS)__            ldapTemplate.modifyAttributes(dn, modificationItems)__            break__        case FUNCTION_DRIVEN:_            BiFunction<LdapOperations, Object, ?> ldapOperationFunction = (BiFunction<LdapOperations, Object, ?>)body.get(FUNCTION)__            Object ldapOperationRequest = body.get(REQUEST)__            exchange.getIn().setBody(ldapOperationFunction.apply(ldapTemplate, ldapOperationRequest))__            break__        default:_            throw new UnsupportedOperationException("Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '" + operation_                                                    + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,key,password,necessary,for,the,authentication,operation,only,key,modification,items,necessary,for,the,operation,only,key,function,necessary,for,the,operation,only,provides,a,flexible,hook,into,the,link,ldap,template,to,call,any,method,key,request,necessary,for,the,operation,only,passed,into,the,function,to,enable,the,client,to,bind,parameters,that,need,to,be,passed,into,the,link,ldap,template,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,ldap,operation,operation,endpoint,get,operation,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,ldap,template,ldap,template,endpoint,get,ldap,template,string,dn,string,body,get,dn,if,string,utils,is,blank,dn,context,source,context,source,ldap,template,get,context,source,if,context,source,instanceof,base,ldap,path,context,source,dn,base,ldap,path,context,source,context,source,get,base,ldap,path,as,string,if,operation,ldap,operation,string,utils,is,blank,dn,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,case,authenticate,ldap,template,authenticate,ldap,query,builder,query,base,dn,filter,string,body,get,filter,string,body,get,password,break,case,modification,item,modification,items,modification,item,body,get,ldap,template,modify,attributes,dn,modification,items,break,case,bi,function,ldap,operations,object,ldap,operation,function,bi,function,ldap,operations,object,body,get,function,object,ldap,operation,request,body,get,request,exchange,get,in,set,body,ldap,operation,function,apply,ldap,template,ldap,operation,request,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> @Override     public void process(Exchange exchange) throws Exception;1540108163;Performs the LDAP operation defined in SpringLdapEndpoint that created_this producer. The in-message in the exchange must be a map, containing_the following entries:__<pre>_key: "dn" - base DN for the LDAP operation_key: "filter" - necessary for the search operation only_ LDAP filter for the search operation,_see <a http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol>http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol</a>_key: "attributes" - necessary for the bind operation only_ an instance of javax.naming.directory.Attributes,_containing the information necessary to create an LDAP node._key: "password" - necessary for the authentication operation only__key: "modificationItems" - necessary for the modify_attributes operation only__key: "function" - necessary for the function_driven operation only_ provides a flexible hook into the {@link LdapTemplate} to call any method_key: "request" - necessary for the function_driven operation only_ passed into the "function" to enable the client to bind parameters that need to be passed into the {@link LdapTemplate}_</pre>__The keys are defined as final fields above.;@Override_    public void process(Exchange exchange) throws Exception {_        @SuppressWarnings("unchecked")_        Map<String, Object> body = exchange.getIn().getBody(Map.class)___        LdapOperation operation = endpoint.getOperation()__        if (null == operation) {_            throw new UnsupportedOperationException("LDAP operation must not be empty, but you provided an empty operation")__        }__        LdapTemplate ldapTemplate = endpoint.getLdapTemplate()___        String dn = (String)body.get(DN)__        if (StringUtils.isBlank(dn)) {_            ContextSource contextSource = ldapTemplate.getContextSource()__            if (contextSource instanceof BaseLdapPathContextSource) {_                dn = ((BaseLdapPathContextSource) contextSource).getBaseLdapPathAsString()__            }_        }_        if (operation != LdapOperation.FUNCTION_DRIVEN && (StringUtils.isBlank(dn))) {_            throw new UnsupportedOperationException("DN must not be empty, but you provided an empty DN")__        }__        switch (operation) {_        case SEARCH:_            String filter = (String)body.get(FILTER)__            exchange.getIn().setBody(ldapTemplate.search(dn, filter, endpoint.scopeValue(), mapper))__            break__        case BIND:_            Attributes attributes = (Attributes)body.get(ATTRIBUTES)__            ldapTemplate.bind(dn, null, attributes)__            break__        case UNBIND:_            ldapTemplate.unbind(dn)__            break__        case AUTHENTICATE:_            ldapTemplate.authenticate(LdapQueryBuilder.query().base(dn).filter((String)body.get(FILTER)), (String)body.get(PASSWORD))__            break__        case MODIFY_ATTRIBUTES:_            ModificationItem[] modificationItems = (ModificationItem[])body.get(MODIFICATION_ITEMS)__            ldapTemplate.modifyAttributes(dn, modificationItems)__            break__        case FUNCTION_DRIVEN:_            BiFunction<LdapOperations, Object, ?> ldapOperationFunction = (BiFunction<LdapOperations, Object, ?>)body.get(FUNCTION)__            Object ldapOperationRequest = body.get(REQUEST)__            exchange.getIn().setBody(ldapOperationFunction.apply(ldapTemplate, ldapOperationRequest))__            break__        default:_            throw new UnsupportedOperationException("Bug in the Spring-LDAP component. Despite of all assertions, you managed to call an unsupported operation '" + operation_                                                    + "'")__        }_    };performs,the,ldap,operation,defined,in,spring,ldap,endpoint,that,created,this,producer,the,in,message,in,the,exchange,must,be,a,map,containing,the,following,entries,pre,key,dn,base,dn,for,the,ldap,operation,key,filter,necessary,for,the,search,operation,only,ldap,filter,for,the,search,operation,see,a,http,en,wikipedia,org,wiki,http,en,wikipedia,org,wiki,a,key,attributes,necessary,for,the,bind,operation,only,an,instance,of,javax,naming,directory,attributes,containing,the,information,necessary,to,create,an,ldap,node,key,password,necessary,for,the,authentication,operation,only,key,modification,items,necessary,for,the,operation,only,key,function,necessary,for,the,operation,only,provides,a,flexible,hook,into,the,link,ldap,template,to,call,any,method,key,request,necessary,for,the,operation,only,passed,into,the,function,to,enable,the,client,to,bind,parameters,that,need,to,be,passed,into,the,link,ldap,template,pre,the,keys,are,defined,as,final,fields,above;override,public,void,process,exchange,exchange,throws,exception,suppress,warnings,unchecked,map,string,object,body,exchange,get,in,get,body,map,class,ldap,operation,operation,endpoint,get,operation,if,null,operation,throw,new,unsupported,operation,exception,ldap,operation,must,not,be,empty,but,you,provided,an,empty,operation,ldap,template,ldap,template,endpoint,get,ldap,template,string,dn,string,body,get,dn,if,string,utils,is,blank,dn,context,source,context,source,ldap,template,get,context,source,if,context,source,instanceof,base,ldap,path,context,source,dn,base,ldap,path,context,source,context,source,get,base,ldap,path,as,string,if,operation,ldap,operation,string,utils,is,blank,dn,throw,new,unsupported,operation,exception,dn,must,not,be,empty,but,you,provided,an,empty,dn,switch,operation,case,search,string,filter,string,body,get,filter,exchange,get,in,set,body,ldap,template,search,dn,filter,endpoint,scope,value,mapper,break,case,bind,attributes,attributes,attributes,body,get,attributes,ldap,template,bind,dn,null,attributes,break,case,unbind,ldap,template,unbind,dn,break,case,authenticate,ldap,template,authenticate,ldap,query,builder,query,base,dn,filter,string,body,get,filter,string,body,get,password,break,case,modification,item,modification,items,modification,item,body,get,ldap,template,modify,attributes,dn,modification,items,break,case,bi,function,ldap,operations,object,ldap,operation,function,bi,function,ldap,operations,object,body,get,function,object,ldap,operation,request,body,get,request,exchange,get,in,set,body,ldap,operation,function,apply,ldap,template,ldap,operation,request,break,default,throw,new,unsupported,operation,exception,bug,in,the,spring,ldap,component,despite,of,all,assertions,you,managed,to,call,an,unsupported,operation,operation
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1361264210;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1430199001;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1479455606;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1479455606;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1480586011;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1491985578;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1491985752;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
SpringLdapProducer -> public SpringLdapProducer(SpringLdapEndpoint endpoint);1540108163;Initializes the SpringLdapProducer with the given endpoint;public SpringLdapProducer(SpringLdapEndpoint endpoint) {_        super(endpoint)__        this.endpoint = endpoint__    };initializes,the,spring,ldap,producer,with,the,given,endpoint;public,spring,ldap,producer,spring,ldap,endpoint,endpoint,super,endpoint,this,endpoint,endpoint
