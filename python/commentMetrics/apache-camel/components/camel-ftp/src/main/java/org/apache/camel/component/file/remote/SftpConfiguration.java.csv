commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void setDefaultPort() {     setPort(DEFAULT_SFTP_PORT). }
false;public;0;3;;public String getKnownHostsFile() {     return knownHostsFile. }
true;public;1;3;/**  * Sets the known_hosts file, so that the SFTP endpoint can do host key verification.  */ ;/**  * Sets the known_hosts file, so that the SFTP endpoint can do host key verification.  */ public void setKnownHostsFile(String knownHostsFile) {     this.knownHostsFile = knownHostsFile. }
false;public;0;3;;public String getKnownHostsUri() {     return knownHostsUri. }
false;public;0;3;;public boolean isUseUserKnownHostsFile() {     return useUserKnownHostsFile. }
true;public;1;3;/**  * If knownHostFile has not been explicit configured then use the host file from System.getProperty(user.home)/.ssh/known_hosts  */ ;/**  * If knownHostFile has not been explicit configured then use the host file from System.getProperty(user.home)/.ssh/known_hosts  */ public void setUseUserKnownHostsFile(boolean useUserKnownHostsFile) {     this.useUserKnownHostsFile = useUserKnownHostsFile. }
true;public;1;3;/**  * Sets the known_hosts file (loaded from classpath by default), so that the SFTP endpoint can do host key verification.  */ ;/**  * Sets the known_hosts file (loaded from classpath by default), so that the SFTP endpoint can do host key verification.  */ public void setKnownHostsUri(String knownHostsUri) {     this.knownHostsUri = knownHostsUri. }
false;public;0;3;;public byte[] getKnownHosts() {     return knownHosts. }
true;public;1;3;/**  * Sets the known_hosts from the byte array, so that the SFTP endpoint can do host key verification.  */ ;/**  * Sets the known_hosts from the byte array, so that the SFTP endpoint can do host key verification.  */ public void setKnownHosts(byte[] knownHosts) {     this.knownHosts = knownHosts. }
false;public;0;3;;public String getPrivateKeyFile() {     return privateKeyFile. }
true;public;1;3;/**  * Set the private key file so that the SFTP endpoint can do private key verification.  */ ;/**  * Set the private key file so that the SFTP endpoint can do private key verification.  */ public void setPrivateKeyFile(String privateKeyFile) {     this.privateKeyFile = privateKeyFile. }
false;public;0;3;;public String getPrivateKeyUri() {     return privateKeyUri. }
true;public;1;3;/**  * Set the private key file (loaded from classpath by default) so that the SFTP endpoint can do private key verification.  */ ;/**  * Set the private key file (loaded from classpath by default) so that the SFTP endpoint can do private key verification.  */ public void setPrivateKeyUri(String privateKeyUri) {     this.privateKeyUri = privateKeyUri. }
false;public;0;3;;public byte[] getPrivateKey() {     return privateKey. }
true;public;1;3;/**  * Set the private key as byte[] so that the SFTP endpoint can do private key verification.  */ ;/**  * Set the private key as byte[] so that the SFTP endpoint can do private key verification.  */ public void setPrivateKey(byte[] privateKey) {     this.privateKey = privateKey. }
false;public;0;3;;public String getPrivateKeyPassphrase() {     return privateKeyPassphrase. }
true;public;1;3;/**  * Set the private key file passphrase so that the SFTP endpoint can do private key verification.  */ ;/**  * Set the private key file passphrase so that the SFTP endpoint can do private key verification.  */ public void setPrivateKeyPassphrase(String privateKeyFilePassphrase) {     this.privateKeyPassphrase = privateKeyFilePassphrase. }
false;public;0;4;;@Deprecated public String getPrivateKeyFilePassphrase() {     return privateKeyPassphrase. }
false;public;1;4;;@Deprecated public void setPrivateKeyFilePassphrase(String privateKeyFilePassphrase) {     this.privateKeyPassphrase = privateKeyFilePassphrase. }
false;public;0;3;;public KeyPair getKeyPair() {     return keyPair. }
true;public;1;3;/**  * Sets a key pair of the public and private key so to that the SFTP endpoint can do public/private key verification.  */ ;/**  * Sets a key pair of the public and private key so to that the SFTP endpoint can do public/private key verification.  */ public void setKeyPair(KeyPair keyPair) {     this.keyPair = keyPair. }
false;public;0;3;;public String getStrictHostKeyChecking() {     return strictHostKeyChecking. }
true;public;1;3;/**  * Sets whether to use strict host key checking.  */ ;/**  * Sets whether to use strict host key checking.  */ public void setStrictHostKeyChecking(String strictHostKeyChecking) {     this.strictHostKeyChecking = strictHostKeyChecking. }
true;public;1;3;/**  * Allows you to set the serverAliveInterval of the sftp session  */ ;/**  * Allows you to set the serverAliveInterval of the sftp session  */ public void setServerAliveInterval(int serverAliveInterval) {     this.serverAliveInterval = serverAliveInterval. }
false;public;0;3;;public int getServerAliveInterval() {     return serverAliveInterval. }
true;public;1;3;/**  * Allows you to set the serverAliveCountMax of the sftp session  */ ;/**  * Allows you to set the serverAliveCountMax of the sftp session  */ public void setServerAliveCountMax(int serverAliveCountMax) {     this.serverAliveCountMax = serverAliveCountMax. }
false;public;0;3;;public int getServerAliveCountMax() {     return serverAliveCountMax. }
true;public;1;3;/**  * Allows you to set chmod on the stored file. For example chmod=640.  */ ;/**  * Allows you to set chmod on the stored file. For example chmod=640.  */ public void setChmod(String chmod) {     this.chmod = chmod. }
false;public;0;3;;public String getChmod() {     return chmod. }
true;public;1;3;/**  * Set a comma separated list of ciphers that will be used in order of preference.  * Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc.  * If not specified the default list from JSCH will be used.  */ ;/**  * Set a comma separated list of ciphers that will be used in order of preference.  * Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc.  * If not specified the default list from JSCH will be used.  */ public void setCiphers(String ciphers) {     this.ciphers = ciphers. }
false;public;0;3;;public String getCiphers() {     return ciphers. }
false;public;0;3;;public int getCompression() {     return compression. }
true;public;1;3;/**  * To use compression. Specify a level from 1 to 10.  * Important: You must manually add the needed JSCH zlib JAR to the classpath for compression support.  */ ;/**  * To use compression. Specify a level from 1 to 10.  * Important: You must manually add the needed JSCH zlib JAR to the classpath for compression support.  */ public void setCompression(int compression) {     this.compression = compression. }
true;public;1;3;/**  * Set the preferred authentications which SFTP endpoint will used. Some example include:password,publickey.  * If not specified the default list from JSCH will be used.  */ ;/**  * Set the preferred authentications which SFTP endpoint will used. Some example include:password,publickey.  * If not specified the default list from JSCH will be used.  */ public void setPreferredAuthentications(String pAuthentications) {     this.preferredAuthentications = pAuthentications. }
false;public;0;3;;public String getPreferredAuthentications() {     return preferredAuthentications. }
false;public;0;3;;public LoggingLevel getJschLoggingLevel() {     return jschLoggingLevel. }
true;public;1;3;/**  * The logging level to use for JSCH activity logging.  * As JSCH is verbose at by default at INFO level the threshold is WARN by default.  */ ;/**  * The logging level to use for JSCH activity logging.  * As JSCH is verbose at by default at INFO level the threshold is WARN by default.  */ public void setJschLoggingLevel(LoggingLevel jschLoggingLevel) {     this.jschLoggingLevel = jschLoggingLevel. }
true;public;1;3;/**  * Specifies how many requests may be outstanding at any one time. Increasing this value may  * slightly improve file transfer speed but will increase memory usage.  */ ;/**  * Specifies how many requests may be outstanding at any one time. Increasing this value may  * slightly improve file transfer speed but will increase memory usage.  */ public void setBulkRequests(Integer bulkRequests) {     this.bulkRequests = bulkRequests. }
false;public;0;3;;public Integer getBulkRequests() {     return bulkRequests. }
true;public;1;3;/**  * Specifies the address of the local interface against which the connection should bind.  */ ;/**  * Specifies the address of the local interface against which the connection should bind.  */ public void setBindAddress(String bindAddress) {     this.bindAddress = bindAddress. }
false;public;0;3;;public String getBindAddress() {     return bindAddress. }
