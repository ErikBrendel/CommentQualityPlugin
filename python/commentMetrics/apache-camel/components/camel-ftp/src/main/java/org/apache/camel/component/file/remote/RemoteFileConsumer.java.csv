# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteFileConsumer -> protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;1230288790;Polls the given file__@param fileName  the file name_@param fileList  current list of files gathered;protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;polls,the,given,file,param,file,name,the,file,name,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,file,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;1230456710;Polls the given file__@param fileName  the file name_@param fileList  current list of files gathered;protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;polls,the,given,file,param,file,name,the,file,name,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,file,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;1230458809;Polls the given file__@param fileName  the file name_@param fileList  current list of files gathered;protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;polls,the,given,file,param,file,name,the,file,name,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,file,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;1230886280;Polls the given file__@param fileName  the file name_@param fileList  current list of files gathered;protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;polls,the,given,file,param,file,name,the,file,name,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,file,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;1230909431;Polls the given file__@param fileName  the file name_@param fileList  current list of files gathered;protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;polls,the,given,file,param,file,name,the,file,name,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,file,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;1232022463;Polls the given file__@param fileName  the file name_@param fileList  current list of files gathered;protected abstract void pollFile(String fileName, List<RemoteFile> fileList)_;polls,the,given,file,param,file,name,the,file,name,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,file,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected String remoteServer();1230288790;Returns human readable server information for logging purpose;protected String remoteServer() {_        return endpoint.remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1230456710;Returns human readable server information for logging purpose;protected String remoteServer() {_        return endpoint.remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1230458809;Returns human readable server information for logging purpose;protected String remoteServer() {_        return endpoint.remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1230886280;Returns human readable server information for logging purpose;protected String remoteServer() {_        return endpoint.remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1230909431;Returns human readable server information for logging purpose;protected String remoteServer() {_        return endpoint.remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1232022463;Returns human readable server information for logging purpose;protected String remoteServer() {_        return endpoint.remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1232970726;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1233064553;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1233127802;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1234098794;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1247809782;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1258390208;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1264145182;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1277111575;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1279810815;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1280051112;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1301257798;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1307685726;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1309182816;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1309263417;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1311686727;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1313689515;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1320579364;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1326623920;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1352800078;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1355733178;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1373942124;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1378378166;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1422160402;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1427090237;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1428476628;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1429281440;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1429758904;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1430301654;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1430302978;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1431022193;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1515406830;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1516182055;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1516182055;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1522322226;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1534005238;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1536687142;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> protected String remoteServer();1538548280;Returns human readable server information for logging purpose;protected String remoteServer() {_        return ((RemoteFileEndpoint<?>) endpoint).remoteServerInformation()__    };returns,human,readable,server,information,for,logging,purpose;protected,string,remote,server,return,remote,file,endpoint,endpoint,remote,server,information
RemoteFileConsumer -> public boolean isTimestamp();1221496231;@deprecated the timestamp feature will be removed in Camel 2.0;public boolean isTimestamp() {_        return timestamp__    };deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,boolean,is,timestamp,return,timestamp
RemoteFileConsumer -> public boolean isTimestamp();1222531060;@deprecated the timestamp feature will be removed in Camel 2.0;public boolean isTimestamp() {_        return timestamp__    };deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,boolean,is,timestamp,return,timestamp
RemoteFileConsumer -> public boolean isTimestamp();1223085822;@deprecated the timestamp feature will be removed in Camel 2.0;public boolean isTimestamp() {_        return timestamp__    };deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,boolean,is,timestamp,return,timestamp
RemoteFileConsumer -> public boolean isTimestamp();1226348945;@deprecated the timestamp feature will be removed in Camel 2.0;public boolean isTimestamp() {_        return timestamp__    };deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,boolean,is,timestamp,return,timestamp
RemoteFileConsumer -> protected void processExchange(final RemoteFileExchange exchange);1230288790;Processes the exchange__@param exchange  the exchange;protected void processExchange(final RemoteFileExchange exchange) {_        if (log.isTraceEnabled()) {_            log.trace("Processing remote file: " + exchange.getRemoteFile())__        }__        try {_            final RemoteFileProcessStrategy processStrategy = endpoint.getRemoteFileProcessStrategy()___            if (processStrategy.begin(operations, endpoint, exchange, exchange.getRemoteFile())) {__                _                final RemoteFile target = exchange.getRemoteFile()__                _                final String name = target.getAbsolutelFileName()___                _                if (log.isTraceEnabled()) {_                    log.trace("Retriving remote file: " + name + " from: " + remoteServer())__                }_                OutputStream os = new ByteArrayOutputStream()__                target.setBody(os)__                operations.retrieveFile(name, os)___                if (log.isTraceEnabled()) {_                    log.trace("Retrieved remote file: " + name + " from: " + remoteServer())__                }__                if (log.isDebugEnabled()) {_                    log.debug("About to process remote file: " + target + " using exchange: " + exchange)__                }_                _                _                getAsyncProcessor().process(exchange, new AsyncCallback() {_                    public void done(boolean sync) {_                        final RemoteFile file = exchange.getRemoteFile()__                        boolean failed = exchange.isFailed()__                        boolean handled = DeadLetterChannel.isFailureHandled(exchange)___                        if (log.isDebugEnabled()) {_                            log.debug("Done processing remote file: " + file.getAbsolutelFileName()_                                + ". Status is: " + (failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK"))__                        }__                        boolean committed = false__                        try {_                            if (!failed || handled) {_                                _                                processStrategyCommit(processStrategy, exchange, file, handled)__                                committed = true__                            } else {_                                _                                handleException(exchange.getException())__                            }_                        } finally {_                            if (!committed) {_                                processStrategyRollback(processStrategy, exchange, file)__                            }_                        }_                    }_                })__            } else {_                log.warn(endpoint + " cannot process remote file: " + exchange.getRemoteFile())__            }_        } catch (Exception e) {_            handleException(e)__        }__    };processes,the,exchange,param,exchange,the,exchange;protected,void,process,exchange,final,remote,file,exchange,exchange,if,log,is,trace,enabled,log,trace,processing,remote,file,exchange,get,remote,file,try,final,remote,file,process,strategy,process,strategy,endpoint,get,remote,file,process,strategy,if,process,strategy,begin,operations,endpoint,exchange,exchange,get,remote,file,final,remote,file,target,exchange,get,remote,file,final,string,name,target,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,retriving,remote,file,name,from,remote,server,output,stream,os,new,byte,array,output,stream,target,set,body,os,operations,retrieve,file,name,os,if,log,is,trace,enabled,log,trace,retrieved,remote,file,name,from,remote,server,if,log,is,debug,enabled,log,debug,about,to,process,remote,file,target,using,exchange,exchange,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,sync,final,remote,file,file,exchange,get,remote,file,boolean,failed,exchange,is,failed,boolean,handled,dead,letter,channel,is,failure,handled,exchange,if,log,is,debug,enabled,log,debug,done,processing,remote,file,file,get,absolutel,file,name,status,is,failed,failed,failed,handled,by,failure,processor,handled,processed,ok,boolean,committed,false,try,if,failed,handled,process,strategy,commit,process,strategy,exchange,file,handled,committed,true,else,handle,exception,exchange,get,exception,finally,if,committed,process,strategy,rollback,process,strategy,exchange,file,else,log,warn,endpoint,cannot,process,remote,file,exchange,get,remote,file,catch,exception,e,handle,exception,e
RemoteFileConsumer -> protected void processExchange(final RemoteFileExchange exchange);1230456710;Processes the exchange__@param exchange  the exchange;protected void processExchange(final RemoteFileExchange exchange) {_        if (log.isTraceEnabled()) {_            log.trace("Processing remote file: " + exchange.getRemoteFile())__        }__        try {_            final RemoteFileProcessStrategy processStrategy = endpoint.getRemoteFileProcessStrategy()___            if (processStrategy.begin(operations, endpoint, exchange, exchange.getRemoteFile())) {__                _                final RemoteFile target = exchange.getRemoteFile()__                _                final String name = target.getAbsolutelFileName()___                _                if (log.isTraceEnabled()) {_                    log.trace("Retriving remote file: " + name + " from: " + remoteServer())__                }_                OutputStream os = new ByteArrayOutputStream()__                target.setBody(os)__                operations.retrieveFile(name, os)___                if (log.isTraceEnabled()) {_                    log.trace("Retrieved remote file: " + name + " from: " + remoteServer())__                }__                if (log.isDebugEnabled()) {_                    log.debug("About to process remote file: " + target + " using exchange: " + exchange)__                }_                _                _                getAsyncProcessor().process(exchange, new AsyncCallback() {_                    public void done(boolean sync) {_                        final RemoteFile file = exchange.getRemoteFile()__                        boolean failed = exchange.isFailed()__                        boolean handled = DeadLetterChannel.isFailureHandled(exchange)___                        if (log.isDebugEnabled()) {_                            log.debug("Done processing remote file: " + file.getAbsolutelFileName()_                                + ". Status is: " + (failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK"))__                        }__                        boolean committed = false__                        try {_                            if (!failed || handled) {_                                _                                processStrategyCommit(processStrategy, exchange, file, handled)__                                committed = true__                            } else {_                                _                                handleException(exchange.getException())__                            }_                        } finally {_                            if (!committed) {_                                processStrategyRollback(processStrategy, exchange, file)__                            }_                        }_                    }_                })__            } else {_                log.warn(endpoint + " cannot process remote file: " + exchange.getRemoteFile())__            }_        } catch (Exception e) {_            handleException(e)__        }__    };processes,the,exchange,param,exchange,the,exchange;protected,void,process,exchange,final,remote,file,exchange,exchange,if,log,is,trace,enabled,log,trace,processing,remote,file,exchange,get,remote,file,try,final,remote,file,process,strategy,process,strategy,endpoint,get,remote,file,process,strategy,if,process,strategy,begin,operations,endpoint,exchange,exchange,get,remote,file,final,remote,file,target,exchange,get,remote,file,final,string,name,target,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,retriving,remote,file,name,from,remote,server,output,stream,os,new,byte,array,output,stream,target,set,body,os,operations,retrieve,file,name,os,if,log,is,trace,enabled,log,trace,retrieved,remote,file,name,from,remote,server,if,log,is,debug,enabled,log,debug,about,to,process,remote,file,target,using,exchange,exchange,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,sync,final,remote,file,file,exchange,get,remote,file,boolean,failed,exchange,is,failed,boolean,handled,dead,letter,channel,is,failure,handled,exchange,if,log,is,debug,enabled,log,debug,done,processing,remote,file,file,get,absolutel,file,name,status,is,failed,failed,failed,handled,by,failure,processor,handled,processed,ok,boolean,committed,false,try,if,failed,handled,process,strategy,commit,process,strategy,exchange,file,handled,committed,true,else,handle,exception,exchange,get,exception,finally,if,committed,process,strategy,rollback,process,strategy,exchange,file,else,log,warn,endpoint,cannot,process,remote,file,exchange,get,remote,file,catch,exception,e,handle,exception,e
RemoteFileConsumer -> protected void processExchange(final RemoteFileExchange exchange);1230458809;Processes the exchange__@param exchange  the exchange;protected void processExchange(final RemoteFileExchange exchange) {_        if (log.isTraceEnabled()) {_            log.trace("Processing remote file: " + exchange.getRemoteFile())__        }__        try {_            final RemoteFileProcessStrategy processStrategy = endpoint.getRemoteFileProcessStrategy()___            if (processStrategy.begin(operations, endpoint, exchange, exchange.getRemoteFile())) {__                _                final RemoteFile target = exchange.getRemoteFile()__                _                final String name = target.getAbsolutelFileName()___                _                if (log.isTraceEnabled()) {_                    log.trace("Retriving remote file: " + name + " from: " + remoteServer())__                }_                OutputStream os = new ByteArrayOutputStream()__                target.setBody(os)__                operations.retrieveFile(name, os)___                if (log.isTraceEnabled()) {_                    log.trace("Retrieved remote file: " + name + " from: " + remoteServer())__                }__                if (log.isDebugEnabled()) {_                    log.debug("About to process remote file: " + target + " using exchange: " + exchange)__                }_                _                _                getAsyncProcessor().process(exchange, new AsyncCallback() {_                    public void done(boolean sync) {_                        final RemoteFile file = exchange.getRemoteFile()__                        boolean failed = exchange.isFailed()__                        boolean handled = DeadLetterChannel.isFailureHandled(exchange)___                        if (log.isDebugEnabled()) {_                            log.debug("Done processing remote file: " + file.getAbsolutelFileName()_                                + ". Status is: " + (failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK"))__                        }__                        boolean committed = false__                        try {_                            if (!failed || handled) {_                                _                                processStrategyCommit(processStrategy, exchange, file, handled)__                                committed = true__                            } else {_                                _                                handleException(exchange.getException())__                            }_                        } finally {_                            if (!committed) {_                                processStrategyRollback(processStrategy, exchange, file)__                            }_                        }_                    }_                })__            } else {_                log.warn(endpoint + " cannot process remote file: " + exchange.getRemoteFile())__            }_        } catch (Exception e) {_            handleException(e)__        }__    };processes,the,exchange,param,exchange,the,exchange;protected,void,process,exchange,final,remote,file,exchange,exchange,if,log,is,trace,enabled,log,trace,processing,remote,file,exchange,get,remote,file,try,final,remote,file,process,strategy,process,strategy,endpoint,get,remote,file,process,strategy,if,process,strategy,begin,operations,endpoint,exchange,exchange,get,remote,file,final,remote,file,target,exchange,get,remote,file,final,string,name,target,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,retriving,remote,file,name,from,remote,server,output,stream,os,new,byte,array,output,stream,target,set,body,os,operations,retrieve,file,name,os,if,log,is,trace,enabled,log,trace,retrieved,remote,file,name,from,remote,server,if,log,is,debug,enabled,log,debug,about,to,process,remote,file,target,using,exchange,exchange,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,sync,final,remote,file,file,exchange,get,remote,file,boolean,failed,exchange,is,failed,boolean,handled,dead,letter,channel,is,failure,handled,exchange,if,log,is,debug,enabled,log,debug,done,processing,remote,file,file,get,absolutel,file,name,status,is,failed,failed,failed,handled,by,failure,processor,handled,processed,ok,boolean,committed,false,try,if,failed,handled,process,strategy,commit,process,strategy,exchange,file,handled,committed,true,else,handle,exception,exchange,get,exception,finally,if,committed,process,strategy,rollback,process,strategy,exchange,file,else,log,warn,endpoint,cannot,process,remote,file,exchange,get,remote,file,catch,exception,e,handle,exception,e
RemoteFileConsumer -> protected void processExchange(final RemoteFileExchange exchange);1230886280;Processes the exchange__@param exchange  the exchange;protected void processExchange(final RemoteFileExchange exchange) {_        if (log.isTraceEnabled()) {_            log.trace("Processing remote file: " + exchange.getRemoteFile())__        }__        try {_            final RemoteFileProcessStrategy processStrategy = endpoint.getRemoteFileProcessStrategy()___            if (processStrategy.begin(operations, endpoint, exchange, exchange.getRemoteFile())) {__                _                final RemoteFile target = exchange.getRemoteFile()__                _                final String name = target.getAbsolutelFileName()___                _                if (log.isTraceEnabled()) {_                    log.trace("Retriving remote file: " + name + " from: " + remoteServer())__                }_                OutputStream os = new ByteArrayOutputStream()__                target.setBody(os)__                operations.retrieveFile(name, os)___                if (log.isTraceEnabled()) {_                    log.trace("Retrieved remote file: " + name + " from: " + remoteServer())__                }__                if (log.isDebugEnabled()) {_                    log.debug("About to process remote file: " + target + " using exchange: " + exchange)__                }_                _                _                getAsyncProcessor().process(exchange, new AsyncCallback() {_                    public void done(boolean sync) {_                        final RemoteFile file = exchange.getRemoteFile()__                        boolean failed = exchange.isFailed()__                        boolean handled = DeadLetterChannel.isFailureHandled(exchange)___                        if (log.isDebugEnabled()) {_                            log.debug("Done processing remote file: " + file.getAbsolutelFileName()_                                + ". Status is: " + (failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK"))__                        }__                        boolean committed = false__                        try {_                            if (!failed || handled) {_                                _                                processStrategyCommit(processStrategy, exchange, file, handled)__                                committed = true__                            } else {_                                _                                handleException(exchange.getException())__                            }_                        } finally {_                            if (!committed) {_                                processStrategyRollback(processStrategy, exchange, file)__                            }_                        }_                    }_                })__            } else {_                log.warn(endpoint + " cannot process remote file: " + exchange.getRemoteFile())__            }_        } catch (Exception e) {_            handleException(e)__        }__    };processes,the,exchange,param,exchange,the,exchange;protected,void,process,exchange,final,remote,file,exchange,exchange,if,log,is,trace,enabled,log,trace,processing,remote,file,exchange,get,remote,file,try,final,remote,file,process,strategy,process,strategy,endpoint,get,remote,file,process,strategy,if,process,strategy,begin,operations,endpoint,exchange,exchange,get,remote,file,final,remote,file,target,exchange,get,remote,file,final,string,name,target,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,retriving,remote,file,name,from,remote,server,output,stream,os,new,byte,array,output,stream,target,set,body,os,operations,retrieve,file,name,os,if,log,is,trace,enabled,log,trace,retrieved,remote,file,name,from,remote,server,if,log,is,debug,enabled,log,debug,about,to,process,remote,file,target,using,exchange,exchange,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,sync,final,remote,file,file,exchange,get,remote,file,boolean,failed,exchange,is,failed,boolean,handled,dead,letter,channel,is,failure,handled,exchange,if,log,is,debug,enabled,log,debug,done,processing,remote,file,file,get,absolutel,file,name,status,is,failed,failed,failed,handled,by,failure,processor,handled,processed,ok,boolean,committed,false,try,if,failed,handled,process,strategy,commit,process,strategy,exchange,file,handled,committed,true,else,handle,exception,exchange,get,exception,finally,if,committed,process,strategy,rollback,process,strategy,exchange,file,else,log,warn,endpoint,cannot,process,remote,file,exchange,get,remote,file,catch,exception,e,handle,exception,e
RemoteFileConsumer -> protected void processExchange(final RemoteFileExchange exchange);1230909431;Processes the exchange__@param exchange  the exchange;protected void processExchange(final RemoteFileExchange exchange) {_        if (log.isTraceEnabled()) {_            log.trace("Processing remote file: " + exchange.getRemoteFile())__        }__        try {_            final RemoteFileProcessStrategy processStrategy = endpoint.getRemoteFileProcessStrategy()___            if (processStrategy.begin(operations, endpoint, exchange, exchange.getRemoteFile())) {__                _                final RemoteFile target = exchange.getRemoteFile()__                _                final String name = target.getAbsolutelFileName()___                _                if (log.isTraceEnabled()) {_                    log.trace("Retriving remote file: " + name + " from: " + remoteServer())__                }_                OutputStream os = new ByteArrayOutputStream()__                target.setBody(os)__                operations.retrieveFile(name, os)___                if (log.isTraceEnabled()) {_                    log.trace("Retrieved remote file: " + name + " from: " + remoteServer())__                }__                if (log.isDebugEnabled()) {_                    log.debug("About to process remote file: " + target + " using exchange: " + exchange)__                }_                _                _                getAsyncProcessor().process(exchange, new AsyncCallback() {_                    public void done(boolean sync) {_                        final RemoteFile file = exchange.getRemoteFile()__                        boolean failed = exchange.isFailed()__                        boolean handled = DeadLetterChannel.isFailureHandled(exchange)___                        if (log.isDebugEnabled()) {_                            log.debug("Done processing remote file: " + file.getAbsolutelFileName()_                                + ". Status is: " + (failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK"))__                        }__                        boolean committed = false__                        try {_                            if (!failed || handled) {_                                _                                processStrategyCommit(processStrategy, exchange, file, handled)__                                committed = true__                            } else {_                                _                                handleException(exchange.getException())__                            }_                        } finally {_                            if (!committed) {_                                processStrategyRollback(processStrategy, exchange, file)__                            }_                        }_                    }_                })__            } else {_                log.warn(endpoint + " cannot process remote file: " + exchange.getRemoteFile())__            }_        } catch (Exception e) {_            handleException(e)__        }__    };processes,the,exchange,param,exchange,the,exchange;protected,void,process,exchange,final,remote,file,exchange,exchange,if,log,is,trace,enabled,log,trace,processing,remote,file,exchange,get,remote,file,try,final,remote,file,process,strategy,process,strategy,endpoint,get,remote,file,process,strategy,if,process,strategy,begin,operations,endpoint,exchange,exchange,get,remote,file,final,remote,file,target,exchange,get,remote,file,final,string,name,target,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,retriving,remote,file,name,from,remote,server,output,stream,os,new,byte,array,output,stream,target,set,body,os,operations,retrieve,file,name,os,if,log,is,trace,enabled,log,trace,retrieved,remote,file,name,from,remote,server,if,log,is,debug,enabled,log,debug,about,to,process,remote,file,target,using,exchange,exchange,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,sync,final,remote,file,file,exchange,get,remote,file,boolean,failed,exchange,is,failed,boolean,handled,dead,letter,channel,is,failure,handled,exchange,if,log,is,debug,enabled,log,debug,done,processing,remote,file,file,get,absolutel,file,name,status,is,failed,failed,failed,handled,by,failure,processor,handled,processed,ok,boolean,committed,false,try,if,failed,handled,process,strategy,commit,process,strategy,exchange,file,handled,committed,true,else,handle,exception,exchange,get,exception,finally,if,committed,process,strategy,rollback,process,strategy,exchange,file,else,log,warn,endpoint,cannot,process,remote,file,exchange,get,remote,file,catch,exception,e,handle,exception,e
RemoteFileConsumer -> protected void processExchange(final RemoteFileExchange exchange);1232022463;Processes the exchange__@param exchange  the exchange;protected void processExchange(final RemoteFileExchange exchange) {_        if (log.isTraceEnabled()) {_            log.trace("Processing remote file: " + exchange.getRemoteFile())__        }__        try {_            final RemoteFileProcessStrategy processStrategy = endpoint.getRemoteFileProcessStrategy()___            if (processStrategy.begin(operations, endpoint, exchange, exchange.getRemoteFile())) {__                _                final RemoteFile target = exchange.getRemoteFile()__                _                final String name = target.getAbsolutelFileName()___                _                if (log.isTraceEnabled()) {_                    log.trace("Retriving remote file: " + name + " from: " + remoteServer())__                }_                OutputStream os = new ByteArrayOutputStream()__                target.setBody(os)__                operations.retrieveFile(name, os)___                if (log.isTraceEnabled()) {_                    log.trace("Retrieved remote file: " + name + " from: " + remoteServer())__                }__                if (log.isDebugEnabled()) {_                    log.debug("About to process remote file: " + target + " using exchange: " + exchange)__                }_                _                _                getAsyncProcessor().process(exchange, new AsyncCallback() {_                    public void done(boolean sync) {_                        final RemoteFile file = exchange.getRemoteFile()__                        boolean failed = exchange.isFailed()__                        boolean handled = DeadLetterChannel.isFailureHandled(exchange)___                        if (log.isDebugEnabled()) {_                            log.debug("Done processing remote file: " + file.getAbsolutelFileName()_                                + ". Status is: " + (failed ? "failed: " + failed + ", handled by failure processor: " + handled : "processed OK"))__                        }__                        boolean committed = false__                        try {_                            if (!failed || handled) {_                                _                                processStrategyCommit(processStrategy, exchange, file, handled)__                                committed = true__                            } else {_                                _                                handleException(exchange.getException())__                            }_                        } finally {_                            if (!committed) {_                                processStrategyRollback(processStrategy, exchange, file)__                            }_                        }_                    }_                })__            } else {_                log.warn(endpoint + " cannot process remote file: " + exchange.getRemoteFile())__            }_        } catch (Exception e) {_            handleException(e)__        }__    };processes,the,exchange,param,exchange,the,exchange;protected,void,process,exchange,final,remote,file,exchange,exchange,if,log,is,trace,enabled,log,trace,processing,remote,file,exchange,get,remote,file,try,final,remote,file,process,strategy,process,strategy,endpoint,get,remote,file,process,strategy,if,process,strategy,begin,operations,endpoint,exchange,exchange,get,remote,file,final,remote,file,target,exchange,get,remote,file,final,string,name,target,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,retriving,remote,file,name,from,remote,server,output,stream,os,new,byte,array,output,stream,target,set,body,os,operations,retrieve,file,name,os,if,log,is,trace,enabled,log,trace,retrieved,remote,file,name,from,remote,server,if,log,is,debug,enabled,log,debug,about,to,process,remote,file,target,using,exchange,exchange,get,async,processor,process,exchange,new,async,callback,public,void,done,boolean,sync,final,remote,file,file,exchange,get,remote,file,boolean,failed,exchange,is,failed,boolean,handled,dead,letter,channel,is,failure,handled,exchange,if,log,is,debug,enabled,log,debug,done,processing,remote,file,file,get,absolutel,file,name,status,is,failed,failed,failed,handled,by,failure,processor,handled,processed,ok,boolean,committed,false,try,if,failed,handled,process,strategy,commit,process,strategy,exchange,file,handled,committed,true,else,handle,exception,exchange,get,exception,finally,if,committed,process,strategy,rollback,process,strategy,exchange,file,else,log,warn,endpoint,cannot,process,remote,file,exchange,get,remote,file,catch,exception,e,handle,exception,e
RemoteFileConsumer -> protected boolean isMoveFile();1217225076;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1217397195;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1217527526;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1217557565;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1218047092;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1219205242;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1221496231;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null
RemoteFileConsumer -> protected boolean isMoveFile();1222531060;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null || endpoint.getConfiguration().getExpression() != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null,endpoint,get,configuration,get,expression,null
RemoteFileConsumer -> protected boolean isMoveFile();1223085822;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null || endpoint.getConfiguration().getExpression() != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null,endpoint,get,configuration,get,expression,null
RemoteFileConsumer -> protected boolean isMoveFile();1226348945;Should the file be moved after consuming?;protected boolean isMoveFile() {_        return moveNamePostfix != null || moveNamePrefix != null || endpoint.getConfiguration().getExpression() != null__    };should,the,file,be,moved,after,consuming;protected,boolean,is,move,file,return,move,name,postfix,null,move,name,prefix,null,endpoint,get,configuration,get,expression,null
RemoteFileConsumer -> protected String getMoveFileName(String name, Exchange exchange);1222531060;Gets the to filename for moving.__@param name the original filename_@param exchange the current exchange_@return the move filename;protected String getMoveFileName(String name, Exchange exchange) {_        _        if (endpoint.getConfiguration().getExpression()  != null) {_            Object result = endpoint.getConfiguration().getExpression() .evaluate(exchange)__            return exchange.getContext().getTypeConverter().convertTo(String.class, result)__        }__        _        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,param,exchange,the,current,exchange,return,the,move,filename;protected,string,get,move,file,name,string,name,exchange,exchange,if,endpoint,get,configuration,get,expression,null,object,result,endpoint,get,configuration,get,expression,evaluate,exchange,return,exchange,get,context,get,type,converter,convert,to,string,class,result,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name, Exchange exchange);1223085822;Gets the to filename for moving.__@param name the original filename_@param exchange the current exchange_@return the move filename;protected String getMoveFileName(String name, Exchange exchange) {_        _        if (endpoint.getConfiguration().getExpression()  != null) {_            Object result = endpoint.getConfiguration().getExpression() .evaluate(exchange)__            return exchange.getContext().getTypeConverter().convertTo(String.class, result)__        }__        _        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,param,exchange,the,current,exchange,return,the,move,filename;protected,string,get,move,file,name,string,name,exchange,exchange,if,endpoint,get,configuration,get,expression,null,object,result,endpoint,get,configuration,get,expression,evaluate,exchange,return,exchange,get,context,get,type,converter,convert,to,string,class,result,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name, Exchange exchange);1226348945;Gets the to filename for moving.__@param name the original filename_@param exchange the current exchange_@return the move filename;protected String getMoveFileName(String name, Exchange exchange) {_        _        if (endpoint.getConfiguration().getExpression()  != null) {_            Object result = endpoint.getConfiguration().getExpression() .evaluate(exchange)__            return exchange.getContext().getTypeConverter().convertTo(String.class, result)__        }__        _        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,param,exchange,the,current,exchange,return,the,move,filename;protected,string,get,move,file,name,string,name,exchange,exchange,if,endpoint,get,configuration,get,expression,null,object,result,endpoint,get,configuration,get,expression,evaluate,exchange,return,exchange,get,context,get,type,converter,convert,to,string,class,result,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                            RemoteFile file);1230458809;Strategy when the file was not processed and a rollback should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed;protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                           RemoteFile file) {_        if (log.isDebugEnabled()) {_            log.debug("Rolling back remote file strategy: " + processStrategy + " for file: " + file)__        }_        processStrategy.rollback(operations, endpoint, exchange, file)__    };strategy,when,the,file,was,not,processed,and,a,rollback,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed;protected,void,process,strategy,rollback,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,if,log,is,debug,enabled,log,debug,rolling,back,remote,file,strategy,process,strategy,for,file,file,process,strategy,rollback,operations,endpoint,exchange,file
RemoteFileConsumer -> protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                            RemoteFile file);1230886280;Strategy when the file was not processed and a rollback should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed;protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                           RemoteFile file) {_        if (log.isDebugEnabled()) {_            log.debug("Rolling back remote file strategy: " + processStrategy + " for file: " + file)__        }_        processStrategy.rollback(operations, endpoint, exchange, file)__    };strategy,when,the,file,was,not,processed,and,a,rollback,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed;protected,void,process,strategy,rollback,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,if,log,is,debug,enabled,log,debug,rolling,back,remote,file,strategy,process,strategy,for,file,file,process,strategy,rollback,operations,endpoint,exchange,file
RemoteFileConsumer -> protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                            RemoteFile file);1230909431;Strategy when the file was not processed and a rollback should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed;protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                           RemoteFile file) {_        if (log.isDebugEnabled()) {_            log.debug("Rolling back remote file strategy: " + processStrategy + " for file: " + file)__        }_        processStrategy.rollback(operations, endpoint, exchange, file)__    };strategy,when,the,file,was,not,processed,and,a,rollback,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed;protected,void,process,strategy,rollback,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,if,log,is,debug,enabled,log,debug,rolling,back,remote,file,strategy,process,strategy,for,file,file,process,strategy,rollback,operations,endpoint,exchange,file
RemoteFileConsumer -> protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                            RemoteFile file);1232022463;Strategy when the file was not processed and a rollback should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed;protected void processStrategyRollback(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                           RemoteFile file) {_        if (log.isDebugEnabled()) {_            log.debug("Rolling back remote file strategy: " + processStrategy + " for file: " + file)__        }_        processStrategy.rollback(operations, endpoint, exchange, file)__    };strategy,when,the,file,was,not,processed,and,a,rollback,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed;protected,void,process,strategy,rollback,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,if,log,is,debug,enabled,log,debug,rolling,back,remote,file,strategy,process,strategy,for,file,file,process,strategy,rollback,operations,endpoint,exchange,file
RemoteFileConsumer -> protected boolean isMatched(Object file);1217221566;Is the given file matched to be consumed (will consider regexp if provided as an option)._<p/>_Note: Returns true if no reg exp is used.;protected boolean isMatched(Object file) {_        String fileName = getFileName(file)___        boolean result = true__        if (regexPattern != null && regexPattern.length() > 0) {_            result = fileName.matches(regexPattern)__        }_        if (LOG.isTraceEnabled()) {_            LOG.trace("Matching file: " + fileName + " is " + result)__        }_        return result__    };is,the,given,file,matched,to,be,consumed,will,consider,regexp,if,provided,as,an,option,p,note,returns,true,if,no,reg,exp,is,used;protected,boolean,is,matched,object,file,string,file,name,get,file,name,file,boolean,result,true,if,regex,pattern,null,regex,pattern,length,0,result,file,name,matches,regex,pattern,if,log,is,trace,enabled,log,trace,matching,file,file,name,is,result,return,result
RemoteFileConsumer -> protected boolean isMatched(Object file);1217225076;Is the given file matched to be consumed (will consider regexp if provided as an option)._<p/>_Note: Returns true if no reg exp is used.;protected boolean isMatched(Object file) {_        String fileName = getFileName(file)___        boolean result = true__        if (regexPattern != null && regexPattern.length() > 0) {_            result = fileName.matches(regexPattern)__        }_        if (LOG.isTraceEnabled()) {_            LOG.trace("Matching file: " + fileName + " is " + result)__        }_        return result__    };is,the,given,file,matched,to,be,consumed,will,consider,regexp,if,provided,as,an,option,p,note,returns,true,if,no,reg,exp,is,used;protected,boolean,is,matched,object,file,string,file,name,get,file,name,file,boolean,result,true,if,regex,pattern,null,regex,pattern,length,0,result,file,name,matches,regex,pattern,if,log,is,trace,enabled,log,trace,matching,file,file,name,is,result,return,result
RemoteFileConsumer -> protected boolean isMatched(Object file);1217397195;Is the given file matched to be consumed (will consider regexp if provided as an option)._<p/>_Note: Returns true if no reg exp is used.;protected boolean isMatched(Object file) {_        String fileName = getFileName(file)___        boolean result = true__        if (regexPattern != null && regexPattern.length() > 0) {_            result = fileName.matches(regexPattern)__        }_        if (LOG.isTraceEnabled()) {_            LOG.trace("Matching file: " + fileName + " is " + result)__        }_        return result__    };is,the,given,file,matched,to,be,consumed,will,consider,regexp,if,provided,as,an,option,p,note,returns,true,if,no,reg,exp,is,used;protected,boolean,is,matched,object,file,string,file,name,get,file,name,file,boolean,result,true,if,regex,pattern,null,regex,pattern,length,0,result,file,name,matches,regex,pattern,if,log,is,trace,enabled,log,trace,matching,file,file,name,is,result,return,result
RemoteFileConsumer -> protected boolean isMatched(Object file);1217527526;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1217557565;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1218047092;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1219205242;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1221496231;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1222531060;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1223085822;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(Object file);1226348945;Is the given file matched to be consumed.;protected boolean isMatched(Object file) {_        String name = getFileName(file)___        _        if (name.startsWith(".")) {_            return false__        }__        if (regexPattern != null && regexPattern.length() > 0) {_            if (!name.matches(regexPattern)) {_                return false__            }_        }__        if (excludedNamePrefix != null) {_            if (name.startsWith(excludedNamePrefix)) {_                return false__            }_        }_        if (excludedNamePostfix != null) {_            if (name.endsWith(excludedNamePostfix)) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed;protected,boolean,is,matched,object,file,string,name,get,file,name,file,if,name,starts,with,return,false,if,regex,pattern,null,regex,pattern,length,0,if,name,matches,regex,pattern,return,false,if,excluded,name,prefix,null,if,name,starts,with,excluded,name,prefix,return,false,if,excluded,name,postfix,null,if,name,ends,with,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected void processStrategyRollback(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,                                            RemoteFile remoteFile);1230288790;Strategy when the file was not processed and a rollback should be executed.__@param remoteFileProcessStrategy the strategy to perform the commit_@param exchange                  the exchange_@param remoteFile                the file processed;protected void processStrategyRollback(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,_                                           RemoteFile remoteFile) {_        if (log.isDebugEnabled()) {_            log.debug("Rolling back remote file strategy: " + remoteFileProcessStrategy + " for file: " + remoteFile)__        }_        remoteFileProcessStrategy.rollback(operations, endpoint, exchange, remoteFile)__    };strategy,when,the,file,was,not,processed,and,a,rollback,should,be,executed,param,remote,file,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,remote,file,the,file,processed;protected,void,process,strategy,rollback,remote,file,process,strategy,remote,file,process,strategy,remote,file,exchange,exchange,remote,file,remote,file,if,log,is,debug,enabled,log,debug,rolling,back,remote,file,strategy,remote,file,process,strategy,for,file,remote,file,remote,file,process,strategy,rollback,operations,endpoint,exchange,remote,file
RemoteFileConsumer -> protected void processStrategyRollback(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,                                            RemoteFile remoteFile);1230456710;Strategy when the file was not processed and a rollback should be executed.__@param remoteFileProcessStrategy the strategy to perform the commit_@param exchange                  the exchange_@param remoteFile                the file processed;protected void processStrategyRollback(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,_                                           RemoteFile remoteFile) {_        if (log.isDebugEnabled()) {_            log.debug("Rolling back remote file strategy: " + remoteFileProcessStrategy + " for file: " + remoteFile)__        }_        remoteFileProcessStrategy.rollback(operations, endpoint, exchange, remoteFile)__    };strategy,when,the,file,was,not,processed,and,a,rollback,should,be,executed,param,remote,file,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,remote,file,the,file,processed;protected,void,process,strategy,rollback,remote,file,process,strategy,remote,file,process,strategy,remote,file,exchange,exchange,remote,file,remote,file,if,log,is,debug,enabled,log,debug,rolling,back,remote,file,strategy,remote,file,process,strategy,for,file,remote,file,remote,file,process,strategy,rollback,operations,endpoint,exchange,remote,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1217221566;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1217225076;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1217397195;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1217527526;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1217557565;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1218047092;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1219205242;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1221496231;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1222531060;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1223085822;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected abstract String getFileName(Object file)_;1226348945;Gets the filename.__@param file the file object for the given consumer implementation._@return the filename as String.;protected abstract String getFileName(Object file)_;gets,the,filename,param,file,the,file,object,for,the,given,consumer,implementation,return,the,filename,as,string;protected,abstract,string,get,file,name,object,file
RemoteFileConsumer -> protected String getMoveFileName(String name);1217225076;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name);1217397195;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name);1217527526;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name);1217557565;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name);1218047092;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name);1219205242;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected String getMoveFileName(String name);1221496231;Gets the to filename for moving.__@param name the original filename_@return the move filename;protected String getMoveFileName(String name) {_        StringBuffer buffer = new StringBuffer()__        if (moveNamePrefix != null) {_            buffer.append(moveNamePrefix)__        }_        buffer.append(name)__        if (moveNamePostfix != null) {_            buffer.append(moveNamePostfix)__        }_        return buffer.toString()__    };gets,the,to,filename,for,moving,param,name,the,original,filename,return,the,move,filename;protected,string,get,move,file,name,string,name,string,buffer,buffer,new,string,buffer,if,move,name,prefix,null,buffer,append,move,name,prefix,buffer,append,name,if,move,name,postfix,null,buffer,append,move,name,postfix,return,buffer,to,string
RemoteFileConsumer -> protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;1230288790;Polls the given directory for files to process.__@param fileName    current directory or file_@param processDir  recursive_@param fileList    current list of files gathered;protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;polls,the,given,directory,for,files,to,process,param,file,name,current,directory,or,file,param,process,dir,recursive,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,directory,string,file,name,boolean,process,dir,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;1230456710;Polls the given directory for files to process__@param fileName    current directory or file_@param processDir  recursive_@param fileList    current list of files gathered;protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;polls,the,given,directory,for,files,to,process,param,file,name,current,directory,or,file,param,process,dir,recursive,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,directory,string,file,name,boolean,process,dir,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;1230458809;Polls the given directory for files to process__@param fileName    current directory or file_@param processDir  recursive_@param fileList    current list of files gathered;protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;polls,the,given,directory,for,files,to,process,param,file,name,current,directory,or,file,param,process,dir,recursive,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,directory,string,file,name,boolean,process,dir,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;1230886280;Polls the given directory for files to process__@param fileName    current directory or file_@param processDir  recursive_@param fileList    current list of files gathered;protected abstract void pollDirectory(String fileName, boolean processDir, List<RemoteFile> fileList)_;polls,the,given,directory,for,files,to,process,param,file,name,current,directory,or,file,param,process,dir,recursive,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,directory,string,file,name,boolean,process,dir,list,remote,file,file,list
RemoteFileConsumer -> protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                          RemoteFile file, boolean failureHandled);1230458809;Strategy when the file was processed and a commit should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed_@param failureHandled   is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if_an exception occured during processing but it was handled by the failure processor (usually the_DeadLetterChannel).;protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                         RemoteFile file, boolean failureHandled) {_        if (endpoint.isIdempotent()) {_            _            _            endpoint.getIdempotentRepository().add(file.getAbsolutelFileName())__        }__        try {_            if (log.isDebugEnabled()) {_                log.debug("Committing remote file strategy: " + processStrategy + " for file: "_                        + file + (failureHandled ? " that was handled by the failure processor." : ""))__            }_            processStrategy.commit(operations, endpoint, exchange, file)__        } catch (Exception e) {_            log.warn("Error committing remote file strategy: " + processStrategy, e)__            handleException(e)__        }_    };strategy,when,the,file,was,processed,and,a,commit,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed,param,failure,handled,is,tt,false,tt,if,the,exchange,was,processed,succesfully,tt,true,tt,if,an,exception,occured,during,processing,but,it,was,handled,by,the,failure,processor,usually,the,dead,letter,channel;protected,void,process,strategy,commit,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,boolean,failure,handled,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,add,file,get,absolutel,file,name,try,if,log,is,debug,enabled,log,debug,committing,remote,file,strategy,process,strategy,for,file,file,failure,handled,that,was,handled,by,the,failure,processor,process,strategy,commit,operations,endpoint,exchange,file,catch,exception,e,log,warn,error,committing,remote,file,strategy,process,strategy,e,handle,exception,e
RemoteFileConsumer -> protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                          RemoteFile file, boolean failureHandled);1230886280;Strategy when the file was processed and a commit should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed_@param failureHandled   is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if_an exception occured during processing but it was handled by the failure processor (usually the_DeadLetterChannel).;protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                         RemoteFile file, boolean failureHandled) {_        if (endpoint.isIdempotent()) {_            _            _            endpoint.getIdempotentRepository().add(file.getAbsolutelFileName())__        }__        try {_            if (log.isDebugEnabled()) {_                log.debug("Committing remote file strategy: " + processStrategy + " for file: "_                        + file + (failureHandled ? " that was handled by the failure processor." : ""))__            }_            processStrategy.commit(operations, endpoint, exchange, file)__        } catch (Exception e) {_            log.warn("Error committing remote file strategy: " + processStrategy, e)__            handleException(e)__        }_    };strategy,when,the,file,was,processed,and,a,commit,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed,param,failure,handled,is,tt,false,tt,if,the,exchange,was,processed,succesfully,tt,true,tt,if,an,exception,occured,during,processing,but,it,was,handled,by,the,failure,processor,usually,the,dead,letter,channel;protected,void,process,strategy,commit,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,boolean,failure,handled,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,add,file,get,absolutel,file,name,try,if,log,is,debug,enabled,log,debug,committing,remote,file,strategy,process,strategy,for,file,file,failure,handled,that,was,handled,by,the,failure,processor,process,strategy,commit,operations,endpoint,exchange,file,catch,exception,e,log,warn,error,committing,remote,file,strategy,process,strategy,e,handle,exception,e
RemoteFileConsumer -> protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                          RemoteFile file, boolean failureHandled);1230909431;Strategy when the file was processed and a commit should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed_@param failureHandled   is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if_an exception occured during processing but it was handled by the failure processor (usually the_DeadLetterChannel).;protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                         RemoteFile file, boolean failureHandled) {_        if (endpoint.isIdempotent()) {_            _            _            endpoint.getIdempotentRepository().add(file.getAbsolutelFileName())__        }__        try {_            if (log.isDebugEnabled()) {_                log.debug("Committing remote file strategy: " + processStrategy + " for file: "_                        + file + (failureHandled ? " that was handled by the failure processor." : ""))__            }_            processStrategy.commit(operations, endpoint, exchange, file)__        } catch (Exception e) {_            log.warn("Error committing remote file strategy: " + processStrategy, e)__            handleException(e)__        }_    };strategy,when,the,file,was,processed,and,a,commit,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed,param,failure,handled,is,tt,false,tt,if,the,exchange,was,processed,succesfully,tt,true,tt,if,an,exception,occured,during,processing,but,it,was,handled,by,the,failure,processor,usually,the,dead,letter,channel;protected,void,process,strategy,commit,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,boolean,failure,handled,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,add,file,get,absolutel,file,name,try,if,log,is,debug,enabled,log,debug,committing,remote,file,strategy,process,strategy,for,file,file,failure,handled,that,was,handled,by,the,failure,processor,process,strategy,commit,operations,endpoint,exchange,file,catch,exception,e,log,warn,error,committing,remote,file,strategy,process,strategy,e,handle,exception,e
RemoteFileConsumer -> protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,                                          RemoteFile file, boolean failureHandled);1232022463;Strategy when the file was processed and a commit should be executed.__@param processStrategy  the strategy to perform the commit_@param exchange         the exchange_@param file             the file processed_@param failureHandled   is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if_an exception occured during processing but it was handled by the failure processor (usually the_DeadLetterChannel).;protected void processStrategyCommit(RemoteFileProcessStrategy processStrategy, RemoteFileExchange exchange,_                                         RemoteFile file, boolean failureHandled) {_        if (endpoint.isIdempotent()) {_            _            _            endpoint.getIdempotentRepository().add(file.getAbsolutelFileName())__        }__        try {_            if (log.isDebugEnabled()) {_                log.debug("Committing remote file strategy: " + processStrategy + " for file: "_                        + file + (failureHandled ? " that was handled by the failure processor." : ""))__            }_            processStrategy.commit(operations, endpoint, exchange, file)__        } catch (Exception e) {_            log.warn("Error committing remote file strategy: " + processStrategy, e)__            handleException(e)__        }_    };strategy,when,the,file,was,processed,and,a,commit,should,be,executed,param,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,file,the,file,processed,param,failure,handled,is,tt,false,tt,if,the,exchange,was,processed,succesfully,tt,true,tt,if,an,exception,occured,during,processing,but,it,was,handled,by,the,failure,processor,usually,the,dead,letter,channel;protected,void,process,strategy,commit,remote,file,process,strategy,process,strategy,remote,file,exchange,exchange,remote,file,file,boolean,failure,handled,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,add,file,get,absolutel,file,name,try,if,log,is,debug,enabled,log,debug,committing,remote,file,strategy,process,strategy,for,file,file,failure,handled,that,was,handled,by,the,failure,processor,process,strategy,commit,operations,endpoint,exchange,file,catch,exception,e,log,warn,error,committing,remote,file,strategy,process,strategy,e,handle,exception,e
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1422160402;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1427090237;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1428476628;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1429281440;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1429758904;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1430301654;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1430302978;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1431022193;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1515406830;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1516182055;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1516182055;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1522322226;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1534005238;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1536687142;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;1538548280;Poll directory given by dirName or absolutePath__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit;protected abstract boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth)_;poll,directory,given,by,dir,name,or,absolute,path,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit;protected,abstract,boolean,do,poll,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth
RemoteFileConsumer -> public void setTimestamp(boolean timestamp);1221496231;Sets wether polling should use last poll timestamp for filtering only new files._@deprecated the timestamp feature will be removed in Camel 2.0;public void setTimestamp(boolean timestamp) {_        this.timestamp = timestamp__    };sets,wether,polling,should,use,last,poll,timestamp,for,filtering,only,new,files,deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,void,set,timestamp,boolean,timestamp,this,timestamp,timestamp
RemoteFileConsumer -> public void setTimestamp(boolean timestamp);1222531060;Sets wether polling should use last poll timestamp for filtering only new files._@deprecated the timestamp feature will be removed in Camel 2.0;public void setTimestamp(boolean timestamp) {_        this.timestamp = timestamp__    };sets,wether,polling,should,use,last,poll,timestamp,for,filtering,only,new,files,deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,void,set,timestamp,boolean,timestamp,this,timestamp,timestamp
RemoteFileConsumer -> public void setTimestamp(boolean timestamp);1223085822;Sets wether polling should use last poll timestamp for filtering only new files._@deprecated the timestamp feature will be removed in Camel 2.0;public void setTimestamp(boolean timestamp) {_        this.timestamp = timestamp__    };sets,wether,polling,should,use,last,poll,timestamp,for,filtering,only,new,files,deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,void,set,timestamp,boolean,timestamp,this,timestamp,timestamp
RemoteFileConsumer -> public void setTimestamp(boolean timestamp);1226348945;Sets wether polling should use last poll timestamp for filtering only new files._@deprecated the timestamp feature will be removed in Camel 2.0;public void setTimestamp(boolean timestamp) {_        this.timestamp = timestamp__    };sets,wether,polling,should,use,last,poll,timestamp,for,filtering,only,new,files,deprecated,the,timestamp,feature,will,be,removed,in,camel,2,0;public,void,set,timestamp,boolean,timestamp,this,timestamp,timestamp
RemoteFileConsumer -> protected boolean isValidFile(RemoteFile file, boolean isDirectory);1230288790;Strategy for validating if the given remote file should be included or not__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tttrue</tt> to include the file, <tt>false</tt> to skip it;protected boolean isValidFile(RemoteFile file, boolean isDirectory) {_        if (!isMatched(file, isDirectory)) {_            if (log.isTraceEnabled()) {_                log.trace("File did not match. Will skip this file: " + file)__            }_            return false__        }__        _        return true__    };strategy,for,validating,if,the,given,remote,file,should,be,included,or,not,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tttrue,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,valid,file,remote,file,file,boolean,is,directory,if,is,matched,file,is,directory,if,log,is,trace,enabled,log,trace,file,did,not,match,will,skip,this,file,file,return,false,return,true
RemoteFileConsumer -> protected boolean isValidFile(RemoteFile file, boolean isDirectory);1230456710;Strategy for validating if the given remote file should be included or not__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> to include the file, <tt>false</tt> to skip it;protected boolean isValidFile(RemoteFile file, boolean isDirectory) {_        if (!isMatched(file, isDirectory)) {_            if (log.isTraceEnabled()) {_                log.trace("Remote file did not match. Will skip this remote file: " + file)__            }_            return false__        }__        _        return true__    };strategy,for,validating,if,the,given,remote,file,should,be,included,or,not,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,valid,file,remote,file,file,boolean,is,directory,if,is,matched,file,is,directory,if,log,is,trace,enabled,log,trace,remote,file,did,not,match,will,skip,this,remote,file,file,return,false,return,true
RemoteFileConsumer -> protected boolean isValidFile(RemoteFile file, boolean isDirectory);1230458809;Strategy for validating if the given remote file should be included or not__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> to include the file, <tt>false</tt> to skip it;protected boolean isValidFile(RemoteFile file, boolean isDirectory) {_        if (!isMatched(file, isDirectory)) {_            if (log.isTraceEnabled()) {_                log.trace("Remote file did not match. Will skip this remote file: " + file)__            }_            return false__        } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getAbsolutelFileName())) {_            _            log.warn("RemoteFileConsumer is idempotent and the file has been consumed before. Will skip this remote file: " + file)__            return false__        }__        _        return true__    };strategy,for,validating,if,the,given,remote,file,should,be,included,or,not,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,valid,file,remote,file,file,boolean,is,directory,if,is,matched,file,is,directory,if,log,is,trace,enabled,log,trace,remote,file,did,not,match,will,skip,this,remote,file,file,return,false,else,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,contains,file,get,absolutel,file,name,log,warn,remote,file,consumer,is,idempotent,and,the,file,has,been,consumed,before,will,skip,this,remote,file,file,return,false,return,true
RemoteFileConsumer -> protected boolean isValidFile(RemoteFile file, boolean isDirectory);1230886280;Strategy for validating if the given remote file should be included or not__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> to include the file, <tt>false</tt> to skip it;protected boolean isValidFile(RemoteFile file, boolean isDirectory) {_        if (!isMatched(file, isDirectory)) {_            if (log.isTraceEnabled()) {_                log.trace("Remote file did not match. Will skip this remote file: " + file)__            }_            return false__        } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getAbsolutelFileName())) {_            _            if (log.isTraceEnabled()) {_                log.trace("RemoteFileConsumer is idempotent and the file has been consumed before. Will skip this remote file: " + file)__            }_            return false__        }__        _        return true__    };strategy,for,validating,if,the,given,remote,file,should,be,included,or,not,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,valid,file,remote,file,file,boolean,is,directory,if,is,matched,file,is,directory,if,log,is,trace,enabled,log,trace,remote,file,did,not,match,will,skip,this,remote,file,file,return,false,else,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,contains,file,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,remote,file,consumer,is,idempotent,and,the,file,has,been,consumed,before,will,skip,this,remote,file,file,return,false,return,true
RemoteFileConsumer -> protected boolean isValidFile(RemoteFile file, boolean isDirectory);1230909431;Strategy for validating if the given remote file should be included or not__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> to include the file, <tt>false</tt> to skip it;protected boolean isValidFile(RemoteFile file, boolean isDirectory) {_        if (!isMatched(file, isDirectory)) {_            if (log.isTraceEnabled()) {_                log.trace("Remote file did not match. Will skip this remote file: " + file)__            }_            return false__        } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getAbsolutelFileName())) {_            _            if (log.isTraceEnabled()) {_                log.trace("RemoteFileConsumer is idempotent and the file has been consumed before. Will skip this remote file: " + file)__            }_            return false__        }__        _        return true__    };strategy,for,validating,if,the,given,remote,file,should,be,included,or,not,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,valid,file,remote,file,file,boolean,is,directory,if,is,matched,file,is,directory,if,log,is,trace,enabled,log,trace,remote,file,did,not,match,will,skip,this,remote,file,file,return,false,else,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,contains,file,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,remote,file,consumer,is,idempotent,and,the,file,has,been,consumed,before,will,skip,this,remote,file,file,return,false,return,true
RemoteFileConsumer -> protected boolean isValidFile(RemoteFile file, boolean isDirectory);1232022463;Strategy for validating if the given remote file should be included or not__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> to include the file, <tt>false</tt> to skip it;protected boolean isValidFile(RemoteFile file, boolean isDirectory) {_        if (!isMatched(file, isDirectory)) {_            if (log.isTraceEnabled()) {_                log.trace("Remote file did not match. Will skip this remote file: " + file)__            }_            return false__        } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getAbsolutelFileName())) {_            _            if (log.isTraceEnabled()) {_                log.trace("RemoteFileConsumer is idempotent and the file has been consumed before. Will skip this remote file: " + file)__            }_            return false__        }__        _        return true__    };strategy,for,validating,if,the,given,remote,file,should,be,included,or,not,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,valid,file,remote,file,file,boolean,is,directory,if,is,matched,file,is,directory,if,log,is,trace,enabled,log,trace,remote,file,did,not,match,will,skip,this,remote,file,file,return,false,else,if,endpoint,is,idempotent,endpoint,get,idempotent,repository,contains,file,get,absolutel,file,name,if,log,is,trace,enabled,log,trace,remote,file,consumer,is,idempotent,and,the,file,has,been,consumed,before,will,skip,this,remote,file,file,return,false,return,true
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1422160402;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1427090237;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1428476628;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1429281440;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1429758904;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1430301654;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1430302978;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1431022193;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1515406830;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile .__@param absolutePath The path of the directory to poll_@param dirName The name of the directory to poll_@param fileList current list of files gathered_@param depth the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception " + e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error " + e.getMessage() + " for " + absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error " + e.getMessage() + " for " + absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,e,get,message,for,absolute,path,return,true,else,log,trace,not,ignoring,file,error,e,get,message,for,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1516182055;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile.__@param absolutePath  the path of the directory to poll_@param dirName       the name of the directory to poll_@param fileList      current list of files gathered_@param depth         the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception {}", e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error {} for {}", e.getMessage(), absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error {} for {}", e.getMessage(), absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,for,e,get,message,absolute,path,return,true,else,log,trace,not,ignoring,file,error,for,e,get,message,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1516182055;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile.__@param absolutePath  the path of the directory to poll_@param dirName       the name of the directory to poll_@param fileList      current list of files gathered_@param depth         the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception {}", e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error {} for {}", e.getMessage(), absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error {} for {}", e.getMessage(), absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,for,e,get,message,absolute,path,return,true,else,log,trace,not,ignoring,file,error,for,e,get,message,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1522322226;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile.__@param absolutePath  the path of the directory to poll_@param dirName       the name of the directory to poll_@param fileList      current list of files gathered_@param depth         the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception {}", e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error {} for {}", e.getMessage(), absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error {} for {}", e.getMessage(), absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,for,e,get,message,absolute,path,return,true,else,log,trace,not,ignoring,file,error,for,e,get,message,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1534005238;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile.__@param absolutePath  the path of the directory to poll_@param dirName       the name of the directory to poll_@param fileList      current list of files gathered_@param depth         the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception {}", e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error {} for {}", e.getMessage(), absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error {} for {}", e.getMessage(), absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,for,e,get,message,absolute,path,return,true,else,log,trace,not,ignoring,file,error,for,e,get,message,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1536687142;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile.__@param absolutePath  the path of the directory to poll_@param dirName       the name of the directory to poll_@param fileList      current list of files gathered_@param depth         the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception {}", e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error {} for {}", e.getMessage(), absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error {} for {}", e.getMessage(), absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,for,e,get,message,absolute,path,return,true,else,log,trace,not,ignoring,file,error,for,e,get,message,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth);1538548280;Executes doPollDirectory and on exception checks if it can be ignored by calling ignoreCannotRetrieveFile.__@param absolutePath  the path of the directory to poll_@param dirName       the name of the directory to poll_@param fileList      current list of files gathered_@param depth         the current depth of the directory_@return whether or not to continue polling, <tt>false</tt> means the maxMessagesPerPoll limit has been hit_@throws GenericFileOperationFailedException if the exception during doPollDirectory can not be ignored;protected boolean doSafePollSubDirectory(String absolutePath, String dirName, List<GenericFile<T>> fileList, int depth) {_        try {_            log.trace("Polling sub directory: {} from: {}", absolutePath, endpoint)__            _            return doPollDirectory(absolutePath, dirName, fileList, depth)__        } catch (Exception e) {_            log.debug("Caught exception {}", e.getMessage())__            if (ignoreCannotRetrieveFile(absolutePath, null, e)) {_                log.trace("Ignoring file error {} for {}", e.getMessage(), absolutePath)__                _                return true__            } else {_                log.trace("Not ignoring file error {} for {}", e.getMessage(), absolutePath)__                if (e instanceof GenericFileOperationFailedException) {_                    throw (GenericFileOperationFailedException) e__                } else {_                    throw new GenericFileOperationFailedException("Cannot poll sub-directory: " + absolutePath + " from: " + endpoint, e)__                }_            }_        }_    };executes,do,poll,directory,and,on,exception,checks,if,it,can,be,ignored,by,calling,ignore,cannot,retrieve,file,param,absolute,path,the,path,of,the,directory,to,poll,param,dir,name,the,name,of,the,directory,to,poll,param,file,list,current,list,of,files,gathered,param,depth,the,current,depth,of,the,directory,return,whether,or,not,to,continue,polling,tt,false,tt,means,the,max,messages,per,poll,limit,has,been,hit,throws,generic,file,operation,failed,exception,if,the,exception,during,do,poll,directory,can,not,be,ignored;protected,boolean,do,safe,poll,sub,directory,string,absolute,path,string,dir,name,list,generic,file,t,file,list,int,depth,try,log,trace,polling,sub,directory,from,absolute,path,endpoint,return,do,poll,directory,absolute,path,dir,name,file,list,depth,catch,exception,e,log,debug,caught,exception,e,get,message,if,ignore,cannot,retrieve,file,absolute,path,null,e,log,trace,ignoring,file,error,for,e,get,message,absolute,path,return,true,else,log,trace,not,ignoring,file,error,for,e,get,message,absolute,path,if,e,instanceof,generic,file,operation,failed,exception,throw,generic,file,operation,failed,exception,e,else,throw,new,generic,file,operation,failed,exception,cannot,poll,sub,directory,absolute,path,from,endpoint,e
RemoteFileConsumer -> protected void processStrategyCommit(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,                                          RemoteFile remoteFile, boolean failureHandled);1230288790;Strategy when the file was processed and a commit should be executed.__@param remoteFileProcessStrategy the strategy to perform the commit_@param exchange                  the exchange_@param remoteFile                the file processed_@param failureHandled            is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if_an exception occured during processing but it was handled by the failure processor (usually the_DeadLetterChannel).;protected void processStrategyCommit(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,_                                         RemoteFile remoteFile, boolean failureHandled) {_        try {_            if (log.isDebugEnabled()) {_                log.debug("Committing remote file strategy: " + remoteFileProcessStrategy + " for file: "_                        + remoteFile + (failureHandled ? " that was handled by the failure processor." : ""))__            }_            remoteFileProcessStrategy.commit(operations, endpoint, exchange, remoteFile)__        } catch (Exception e) {_            log.warn("Error committing remote file strategy: " + remoteFileProcessStrategy, e)__            handleException(e)__        }_    };strategy,when,the,file,was,processed,and,a,commit,should,be,executed,param,remote,file,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,remote,file,the,file,processed,param,failure,handled,is,tt,false,tt,if,the,exchange,was,processed,succesfully,tt,true,tt,if,an,exception,occured,during,processing,but,it,was,handled,by,the,failure,processor,usually,the,dead,letter,channel;protected,void,process,strategy,commit,remote,file,process,strategy,remote,file,process,strategy,remote,file,exchange,exchange,remote,file,remote,file,boolean,failure,handled,try,if,log,is,debug,enabled,log,debug,committing,remote,file,strategy,remote,file,process,strategy,for,file,remote,file,failure,handled,that,was,handled,by,the,failure,processor,remote,file,process,strategy,commit,operations,endpoint,exchange,remote,file,catch,exception,e,log,warn,error,committing,remote,file,strategy,remote,file,process,strategy,e,handle,exception,e
RemoteFileConsumer -> protected void processStrategyCommit(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,                                          RemoteFile remoteFile, boolean failureHandled);1230456710;Strategy when the file was processed and a commit should be executed.__@param remoteFileProcessStrategy the strategy to perform the commit_@param exchange                  the exchange_@param remoteFile                the file processed_@param failureHandled            is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if_an exception occured during processing but it was handled by the failure processor (usually the_DeadLetterChannel).;protected void processStrategyCommit(RemoteFileProcessStrategy remoteFileProcessStrategy, RemoteFileExchange exchange,_                                         RemoteFile remoteFile, boolean failureHandled) {_        try {_            if (log.isDebugEnabled()) {_                log.debug("Committing remote file strategy: " + remoteFileProcessStrategy + " for file: "_                        + remoteFile + (failureHandled ? " that was handled by the failure processor." : ""))__            }_            remoteFileProcessStrategy.commit(operations, endpoint, exchange, remoteFile)__        } catch (Exception e) {_            log.warn("Error committing remote file strategy: " + remoteFileProcessStrategy, e)__            handleException(e)__        }_    };strategy,when,the,file,was,processed,and,a,commit,should,be,executed,param,remote,file,process,strategy,the,strategy,to,perform,the,commit,param,exchange,the,exchange,param,remote,file,the,file,processed,param,failure,handled,is,tt,false,tt,if,the,exchange,was,processed,succesfully,tt,true,tt,if,an,exception,occured,during,processing,but,it,was,handled,by,the,failure,processor,usually,the,dead,letter,channel;protected,void,process,strategy,commit,remote,file,process,strategy,remote,file,process,strategy,remote,file,exchange,exchange,remote,file,remote,file,boolean,failure,handled,try,if,log,is,debug,enabled,log,debug,committing,remote,file,strategy,remote,file,process,strategy,for,file,remote,file,failure,handled,that,was,handled,by,the,failure,processor,remote,file,process,strategy,commit,operations,endpoint,exchange,remote,file,catch,exception,e,log,warn,error,committing,remote,file,strategy,remote,file,process,strategy,e,handle,exception,e
RemoteFileConsumer -> protected boolean isMatched(RemoteFile file, boolean isDirectory);1230288790;Is the given file matched to be consumed.__@param file         the remote file_@param isDirectory  is the given file a directory or a file_@return <tt>true</tt> to include the file, <tt>false</tt> to skip it;protected boolean isMatched(RemoteFile file, boolean isDirectory) {_        String name = file.getFileName()___        _        if (name.startsWith(".")) {_            return false__        }__        _        if (name.endsWith(FileEndpoint.DEFAULT_LOCK_FILE_POSTFIX)) {_            return false__        }__        _        if (isDirectory) {_            return true__        }__        if (endpoint.getFilter() != null) {_            if (!endpoint.getFilter().accept(file)) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getRegexPattern())) {_            if (!name.matches(endpoint.getRegexPattern())) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePrefix())) {_            if (name.startsWith(endpoint.getExcludedNamePrefix())) {_                return false__            }_        }_        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePostfix())) {_            if (name.endsWith(endpoint.getExcludedNamePostfix())) {_                return false__            }_        }__        return true__    };is,the,given,file,matched,to,be,consumed,param,file,the,remote,file,param,is,directory,is,the,given,file,a,directory,or,a,file,return,tt,true,tt,to,include,the,file,tt,false,tt,to,skip,it;protected,boolean,is,matched,remote,file,file,boolean,is,directory,string,name,file,get,file,name,if,name,starts,with,return,false,if,name,ends,with,file,endpoint,return,false,if,is,directory,return,true,if,endpoint,get,filter,null,if,endpoint,get,filter,accept,file,return,false,if,object,helper,is,not,empty,endpoint,get,regex,pattern,if,name,matches,endpoint,get,regex,pattern,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,prefix,if,name,starts,with,endpoint,get,excluded,name,prefix,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,postfix,if,name,ends,with,endpoint,get,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(RemoteFile file, boolean isDirectory);1230456710;Strategy to perform file matching based on endpoint configuration._<p/>_Will always return <tt>false</tt> for certain files/folders:_<ul>_<li>Starting with a dot</li>_<li>lock files</li>_</ul>_And then <tt>true</tt> for directories.__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> if the remote file is matched, <tt>false</tt> if not;protected boolean isMatched(RemoteFile file, boolean isDirectory) {_        String name = file.getFileName()___        _        if (name.startsWith(".")) {_            return false__        }__        _        if (name.endsWith(FileEndpoint.DEFAULT_LOCK_FILE_POSTFIX)) {_            return false__        }__        _        if (isDirectory) {_            return true__        }__        if (endpoint.getFilter() != null) {_            if (!endpoint.getFilter().accept(file)) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getRegexPattern())) {_            if (!name.matches(endpoint.getRegexPattern())) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePrefix())) {_            if (name.startsWith(endpoint.getExcludedNamePrefix())) {_                return false__            }_        }_        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePostfix())) {_            if (name.endsWith(endpoint.getExcludedNamePostfix())) {_                return false__            }_        }__        return true__    };strategy,to,perform,file,matching,based,on,endpoint,configuration,p,will,always,return,tt,false,tt,for,certain,files,folders,ul,li,starting,with,a,dot,li,li,lock,files,li,ul,and,then,tt,true,tt,for,directories,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,if,the,remote,file,is,matched,tt,false,tt,if,not;protected,boolean,is,matched,remote,file,file,boolean,is,directory,string,name,file,get,file,name,if,name,starts,with,return,false,if,name,ends,with,file,endpoint,return,false,if,is,directory,return,true,if,endpoint,get,filter,null,if,endpoint,get,filter,accept,file,return,false,if,object,helper,is,not,empty,endpoint,get,regex,pattern,if,name,matches,endpoint,get,regex,pattern,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,prefix,if,name,starts,with,endpoint,get,excluded,name,prefix,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,postfix,if,name,ends,with,endpoint,get,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(RemoteFile file, boolean isDirectory);1230458809;Strategy to perform file matching based on endpoint configuration._<p/>_Will always return <tt>false</tt> for certain files/folders:_<ul>_<li>Starting with a dot</li>_<li>lock files</li>_</ul>_And then <tt>true</tt> for directories.__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> if the remote file is matched, <tt>false</tt> if not;protected boolean isMatched(RemoteFile file, boolean isDirectory) {_        String name = file.getFileName()___        _        if (name.startsWith(".")) {_            return false__        }__        _        if (name.endsWith(FileEndpoint.DEFAULT_LOCK_FILE_POSTFIX)) {_            return false__        }__        _        if (isDirectory) {_            return true__        }__        if (endpoint.getFilter() != null) {_            if (!endpoint.getFilter().accept(file)) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getRegexPattern())) {_            if (!name.matches(endpoint.getRegexPattern())) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePrefix())) {_            if (name.startsWith(endpoint.getExcludedNamePrefix())) {_                return false__            }_        }_        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePostfix())) {_            if (name.endsWith(endpoint.getExcludedNamePostfix())) {_                return false__            }_        }__        return true__    };strategy,to,perform,file,matching,based,on,endpoint,configuration,p,will,always,return,tt,false,tt,for,certain,files,folders,ul,li,starting,with,a,dot,li,li,lock,files,li,ul,and,then,tt,true,tt,for,directories,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,if,the,remote,file,is,matched,tt,false,tt,if,not;protected,boolean,is,matched,remote,file,file,boolean,is,directory,string,name,file,get,file,name,if,name,starts,with,return,false,if,name,ends,with,file,endpoint,return,false,if,is,directory,return,true,if,endpoint,get,filter,null,if,endpoint,get,filter,accept,file,return,false,if,object,helper,is,not,empty,endpoint,get,regex,pattern,if,name,matches,endpoint,get,regex,pattern,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,prefix,if,name,starts,with,endpoint,get,excluded,name,prefix,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,postfix,if,name,ends,with,endpoint,get,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(RemoteFile file, boolean isDirectory);1230886280;Strategy to perform file matching based on endpoint configuration._<p/>_Will always return <tt>false</tt> for certain files/folders:_<ul>_<li>Starting with a dot</li>_<li>lock files</li>_</ul>_And then <tt>true</tt> for directories.__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> if the remote file is matched, <tt>false</tt> if not;protected boolean isMatched(RemoteFile file, boolean isDirectory) {_        String name = file.getFileName()___        _        if (name.startsWith(".")) {_            return false__        }__        _        if (name.endsWith(FileEndpoint.DEFAULT_LOCK_FILE_POSTFIX)) {_            return false__        }__        _        if (isDirectory) {_            return true__        }__        if (endpoint.getFilter() != null) {_            if (!endpoint.getFilter().accept(file)) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getRegexPattern())) {_            if (!name.matches(endpoint.getRegexPattern())) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePrefix())) {_            if (name.startsWith(endpoint.getExcludedNamePrefix())) {_                return false__            }_        }_        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePostfix())) {_            if (name.endsWith(endpoint.getExcludedNamePostfix())) {_                return false__            }_        }__        return true__    };strategy,to,perform,file,matching,based,on,endpoint,configuration,p,will,always,return,tt,false,tt,for,certain,files,folders,ul,li,starting,with,a,dot,li,li,lock,files,li,ul,and,then,tt,true,tt,for,directories,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,if,the,remote,file,is,matched,tt,false,tt,if,not;protected,boolean,is,matched,remote,file,file,boolean,is,directory,string,name,file,get,file,name,if,name,starts,with,return,false,if,name,ends,with,file,endpoint,return,false,if,is,directory,return,true,if,endpoint,get,filter,null,if,endpoint,get,filter,accept,file,return,false,if,object,helper,is,not,empty,endpoint,get,regex,pattern,if,name,matches,endpoint,get,regex,pattern,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,prefix,if,name,starts,with,endpoint,get,excluded,name,prefix,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,postfix,if,name,ends,with,endpoint,get,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(RemoteFile file, boolean isDirectory);1230909431;Strategy to perform file matching based on endpoint configuration._<p/>_Will always return <tt>false</tt> for certain files/folders:_<ul>_<li>Starting with a dot</li>_<li>lock files</li>_</ul>_And then <tt>true</tt> for directories.__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> if the remote file is matched, <tt>false</tt> if not;protected boolean isMatched(RemoteFile file, boolean isDirectory) {_        String name = file.getFileName()___        _        if (name.startsWith(".")) {_            return false__        }__        _        if (name.endsWith(FileEndpoint.DEFAULT_LOCK_FILE_POSTFIX)) {_            return false__        }__        _        if (isDirectory) {_            return true__        }__        if (endpoint.getFilter() != null) {_            if (!endpoint.getFilter().accept(file)) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getRegexPattern())) {_            if (!name.matches(endpoint.getRegexPattern())) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePrefix())) {_            if (name.startsWith(endpoint.getExcludedNamePrefix())) {_                return false__            }_        }_        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePostfix())) {_            if (name.endsWith(endpoint.getExcludedNamePostfix())) {_                return false__            }_        }__        return true__    };strategy,to,perform,file,matching,based,on,endpoint,configuration,p,will,always,return,tt,false,tt,for,certain,files,folders,ul,li,starting,with,a,dot,li,li,lock,files,li,ul,and,then,tt,true,tt,for,directories,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,if,the,remote,file,is,matched,tt,false,tt,if,not;protected,boolean,is,matched,remote,file,file,boolean,is,directory,string,name,file,get,file,name,if,name,starts,with,return,false,if,name,ends,with,file,endpoint,return,false,if,is,directory,return,true,if,endpoint,get,filter,null,if,endpoint,get,filter,accept,file,return,false,if,object,helper,is,not,empty,endpoint,get,regex,pattern,if,name,matches,endpoint,get,regex,pattern,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,prefix,if,name,starts,with,endpoint,get,excluded,name,prefix,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,postfix,if,name,ends,with,endpoint,get,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected boolean isMatched(RemoteFile file, boolean isDirectory);1232022463;Strategy to perform file matching based on endpoint configuration._<p/>_Will always return <tt>false</tt> for certain files/folders:_<ul>_<li>Starting with a dot</li>_<li>lock files</li>_</ul>_And then <tt>true</tt> for directories.__@param file         the remote file_@param isDirectory  wether the file is a directory or a file_@return <tt>true</tt> if the remote file is matched, <tt>false</tt> if not;protected boolean isMatched(RemoteFile file, boolean isDirectory) {_        String name = file.getFileName()___        _        if (name.startsWith(".")) {_            return false__        }__        _        if (name.endsWith(FileEndpoint.DEFAULT_LOCK_FILE_POSTFIX)) {_            return false__        }__        _        if (isDirectory) {_            return true__        }__        if (endpoint.getFilter() != null) {_            if (!endpoint.getFilter().accept(file)) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getRegexPattern())) {_            if (!name.matches(endpoint.getRegexPattern())) {_                return false__            }_        }__        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePrefix())) {_            if (name.startsWith(endpoint.getExcludedNamePrefix())) {_                return false__            }_        }_        if (ObjectHelper.isNotEmpty(endpoint.getExcludedNamePostfix())) {_            if (name.endsWith(endpoint.getExcludedNamePostfix())) {_                return false__            }_        }__        return true__    };strategy,to,perform,file,matching,based,on,endpoint,configuration,p,will,always,return,tt,false,tt,for,certain,files,folders,ul,li,starting,with,a,dot,li,li,lock,files,li,ul,and,then,tt,true,tt,for,directories,param,file,the,remote,file,param,is,directory,wether,the,file,is,a,directory,or,a,file,return,tt,true,tt,if,the,remote,file,is,matched,tt,false,tt,if,not;protected,boolean,is,matched,remote,file,file,boolean,is,directory,string,name,file,get,file,name,if,name,starts,with,return,false,if,name,ends,with,file,endpoint,return,false,if,is,directory,return,true,if,endpoint,get,filter,null,if,endpoint,get,filter,accept,file,return,false,if,object,helper,is,not,empty,endpoint,get,regex,pattern,if,name,matches,endpoint,get,regex,pattern,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,prefix,if,name,starts,with,endpoint,get,excluded,name,prefix,return,false,if,object,helper,is,not,empty,endpoint,get,excluded,name,postfix,if,name,ends,with,endpoint,get,excluded,name,postfix,return,false,return,true
RemoteFileConsumer -> protected abstract void pollDirectory(String fileName, List<RemoteFile> fileList)_;1230909431;Polls the given directory for files to process__@param fileName    current directory or file_@param fileList    current list of files gathered;protected abstract void pollDirectory(String fileName, List<RemoteFile> fileList)_;polls,the,given,directory,for,files,to,process,param,file,name,current,directory,or,file,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,directory,string,file,name,list,remote,file,file,list
RemoteFileConsumer -> protected abstract void pollDirectory(String fileName, List<RemoteFile> fileList)_;1232022463;Polls the given directory for files to process__@param fileName    current directory or file_@param fileList    current list of files gathered;protected abstract void pollDirectory(String fileName, List<RemoteFile> fileList)_;polls,the,given,directory,for,files,to,process,param,file,name,current,directory,or,file,param,file,list,current,list,of,files,gathered;protected,abstract,void,poll,directory,string,file,name,list,remote,file,file,list
