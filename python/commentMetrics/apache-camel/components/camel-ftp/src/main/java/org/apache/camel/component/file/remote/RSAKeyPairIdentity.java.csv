commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean setPassphrase(byte[] passphrase) throws JSchException {     return true. }
false;public;0;32;;@Override public byte[] getPublicKeyBlob() {     RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic().     byte[] sshRsa = ALGORITHM_TYPE.getBytes().     byte[] eArray = publicKey.getPublicExponent().toByteArray().     byte[] nArray = publicKey.getModulus().toByteArray().     byte[] result = new byte[sshRsa.length + 4 + eArray.length + 4 + nArray.length + 4].     int index = 0.     byte[] intAsByteArray = ByteBuffer.allocate(4).putInt(sshRsa.length).array().     System.arraycopy(intAsByteArray, 0, result, index, 4).     index += 4.     System.arraycopy(sshRsa, 0, result, index, sshRsa.length).     index += sshRsa.length.     intAsByteArray = ByteBuffer.allocate(4).putInt(eArray.length).array().     System.arraycopy(intAsByteArray, 0, result, index, 4).     index += 4.     System.arraycopy(eArray, 0, result, index, eArray.length).     index += eArray.length.     intAsByteArray = ByteBuffer.allocate(4).putInt(nArray.length).array().     System.arraycopy(intAsByteArray, 0, result, index, 4).     index += 4.     System.arraycopy(nArray, 0, result, index, nArray.length).     return result. }
false;public;1;36;;@Override public byte[] getSignature(byte[] data) {     PrivateKey prvKey = keyPair.getPrivate().     Signature sig.     try {         sig = Signature.getInstance("SHA1withRSA").         sig.initSign(prvKey).         sig.update(data).         byte[] sshRsa = ALGORITHM_TYPE.getBytes().         byte[] signature = sig.sign().         byte[] result = new byte[sshRsa.length + 4 + signature.length + 4].         int index = 0.         byte[] intAsByteArray = ByteBuffer.allocate(4).putInt(sshRsa.length).array().         System.arraycopy(intAsByteArray, 0, result, index, 4).         index += 4.         System.arraycopy(sshRsa, 0, result, index, sshRsa.length).         index += sshRsa.length.         intAsByteArray = ByteBuffer.allocate(4).putInt(signature.length).array().         System.arraycopy(intAsByteArray, 0, result, index, 4).         index += 4.         System.arraycopy(signature, 0, result, index, signature.length).         return result.     } catch (NoSuchAlgorithmException e) {         log.error("Cannot sign", e).     } catch (InvalidKeyException e) {         log.error("Cannot sign", e).     } catch (SignatureException e) {         log.error("Cannot sign", e).     }     return null. }
false;public;0;4;;@Override public boolean decrypt() {     return true. }
false;public;0;4;;@Override public String getAlgName() {     return ALGORITHM_TYPE. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;0;4;;@Override public boolean isEncrypted() {     return false. }
false;public;0;3;;@Override public void clear() { }
