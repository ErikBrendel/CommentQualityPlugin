commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Populates the {@link GenericFileMessage} relevant headers  *  * @param message the message to populate with headers  */ ;/**  * Populates the {@link GenericFileMessage} relevant headers  *  * @param message the message to populate with headers  */ public void populateHeaders(GenericFileMessage<T> message) {     if (message != null) {         // because there is not probeContentType option         // in other file based components, false may be passed         // as the second argument.         super.populateHeaders(message, false).         message.setHeader("CamelFileHost", getHostname()).     } }
false;public;2;4;;@Override public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint) {     populateHeaders(message). }
false;public;0;3;;public String getHostname() {     return hostname. }
false;public;1;3;;public void setHostname(String hostname) {     this.hostname = hostname. }
false;public;0;5;;@Override public char getFileSeparator() {     // always use / as separator for FTP     return '/'. }
false;protected;1;7;;@Override protected boolean isAbsolute(String name) {     if (name.length() > 0) {         return name.charAt(0) == '/' || name.charAt(0) == '\\'.     }     return false. }
false;protected;1;4;;@Override protected String normalizePath(String name) {     return name. }
false;public;2;7;;@Override public void copyFromPopulateAdditional(GenericFile<T> source, GenericFile<T> result) {     RemoteFile<?> remoteSource = (RemoteFile<?>) source.     RemoteFile<?> remoteResult = (RemoteFile<?>) result.     remoteResult.setHostname(remoteSource.getHostname()). }
false;public;0;4;;@Override public String toString() {     return "RemoteFile[" + (isAbsolute() ? getAbsoluteFilePath() : getRelativeFilePath()) + "]". }
