commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SftpConfiguration getConfiguration() {     return this.configuration. }
false;public;1;9;;@Override public void setConfiguration(GenericFileConfiguration configuration) {     if (configuration == null) {         throw new IllegalArgumentException("SftpConfiguration expected").     }     // need to set on both     this.configuration = (SftpConfiguration) configuration.     super.setConfiguration(configuration). }
false;protected;1;4;;@Override protected RemoteFileConsumer<SftpRemoteFile> buildConsumer(Processor processor) {     return new SftpConsumer(this, processor, createRemoteFileOperations(), processStrategy != null ? processStrategy : createGenericFileStrategy()). }
false;protected;0;6;;protected GenericFileProducer<SftpRemoteFile> buildProducer() {     if (this.getMoveExistingFileStrategy() == null) {         this.setMoveExistingFileStrategy(createDefaultSftpMoveExistingFileStrategy()).     }     return new RemoteFileProducer<>(this, createRemoteFileOperations()). }
true;private;0;3;/**  * Default Existing File Move Strategy  * @return the default implementation for sftp component  */ ;/**  * Default Existing File Move Strategy  * @return the default implementation for sftp component  */ private FileMoveExistingStrategy createDefaultSftpMoveExistingFileStrategy() {     return new SftpDefaultMoveExistingFileStrategy(). }
false;public;0;5;;public RemoteFileOperations<SftpRemoteFile> createRemoteFileOperations() {     SftpOperations operations = new SftpOperations(proxy).     operations.setEndpoint(this).     return operations. }
false;public;0;3;;public Proxy getProxy() {     return proxy. }
true;public;1;3;/**  * To use a custom configured com.jcraft.jsch.Proxy.  * This proxy is used to consume/send messages from the target SFTP host.  */ ;/**  * To use a custom configured com.jcraft.jsch.Proxy.  * This proxy is used to consume/send messages from the target SFTP host.  */ public void setProxy(Proxy proxy) {     this.proxy = proxy. }
false;public;0;4;;@Override public String getScheme() {     return "sftp". }
