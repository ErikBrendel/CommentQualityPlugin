# id;timestamp;commentText;codeText;commentWords;codeWords
FtpUtils -> public static String compactPath(String path);1363362145;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash) {_            sb.append(File.separator)__        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,sb,append,file,separator,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1363795596;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1374578052;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1433756335;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1433924853;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1496140952;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Deque<String> stack = new ArrayDeque<>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,deque,string,stack,new,array,deque,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1496141585;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Deque<String> stack = new ArrayDeque<>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.descendingIterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,deque,string,stack,new,array,deque,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,descending,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1496160256;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.descendingIterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,descending,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1496160271;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Stack<String> stack = new Stack<String>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        for (Iterator<String> it = stack.iterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,stack,string,stack,new,stack,string,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1496228756;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Deque<String> stack = new ArrayDeque<>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        _        for (Iterator<String> it = stack.descendingIterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,deque,string,stack,new,array,deque,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,descending,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1506078811;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Deque<String> stack = new ArrayDeque<>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        _        for (Iterator<String> it = stack.descendingIterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,deque,string,stack,new,array,deque,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,descending,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static String compactPath(String path);1506283403;Compacts a path by stacking it and reducing <tt>..</tt>,_and uses OS specific file separators (eg {@link java.io.File#separator})._<p/>_<b>Important: </b> This implementation works for the camel-ftp component_for various FTP clients and FTP servers using different platforms and whatnot._This implementation has been working for many Camel releases, and is included here_to restore patch compatibility with the Camel releases.;public static String compactPath(String path) {_        if (path == null) {_            return null__        }__        _        if (path.indexOf(File.separator) == -1) {_            return path__        }__        _        boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\")___        _        boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\")___        Deque<String> stack = new ArrayDeque<>()___        String separatorRegex = File.separator__        if (FileUtil.isWindows()) {_            separatorRegex = "\\\\"__        }_        String[] parts = path.split(separatorRegex)__        for (String part : parts) {_            if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {_                _                stack.pop()__            } else if (part.equals(".") || part.isEmpty()) {_                _            } else {_                stack.push(part)__            }_        }__        _        StringBuilder sb = new StringBuilder()___        if (startsWithSlash) {_            sb.append(File.separator)__        }__        _        for (Iterator<String> it = stack.descendingIterator()_ it.hasNext()_) {_            sb.append(it.next())__            if (it.hasNext()) {_                sb.append(File.separator)__            }_        }__        if (endsWithSlash && stack.size() > 0) {_            sb.append(File.separator)__        }__        _        _        if (sb.length() >= 2) {_            boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'__            boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'__            if (firstSlash && secondSlash) {_                _                sb = sb.replace(1, 2, "")__            }_        }__        return sb.toString()__    };compacts,a,path,by,stacking,it,and,reducing,tt,tt,and,uses,os,specific,file,separators,eg,link,java,io,file,separator,p,b,important,b,this,implementation,works,for,the,camel,ftp,component,for,various,ftp,clients,and,ftp,servers,using,different,platforms,and,whatnot,this,implementation,has,been,working,for,many,camel,releases,and,is,included,here,to,restore,patch,compatibility,with,the,camel,releases;public,static,string,compact,path,string,path,if,path,null,return,null,if,path,index,of,file,separator,1,return,path,boolean,ends,with,slash,path,ends,with,path,ends,with,boolean,starts,with,slash,path,starts,with,path,starts,with,deque,string,stack,new,array,deque,string,separator,regex,file,separator,if,file,util,is,windows,separator,regex,string,parts,path,split,separator,regex,for,string,part,parts,if,part,equals,stack,is,empty,equals,stack,peek,stack,pop,else,if,part,equals,part,is,empty,else,stack,push,part,string,builder,sb,new,string,builder,if,starts,with,slash,sb,append,file,separator,for,iterator,string,it,stack,descending,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,file,separator,if,ends,with,slash,stack,size,0,sb,append,file,separator,if,sb,length,2,boolean,first,slash,sb,char,at,0,sb,char,at,0,boolean,second,slash,sb,char,at,1,sb,char,at,1,if,first,slash,second,slash,sb,sb,replace,1,2,return,sb,to,string
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1433756335;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". " +_                            "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1433924853;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1496140952;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1496141585;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1496160256;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1496160271;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1496228756;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1506078811;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
FtpUtils -> public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration);1506283403;Checks whether directory used in ftp/ftps/sftp endpoint URI is relative._Absolute path will be converted to relative path and a WARN will be printed._@see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>_@param ftpComponent_@param configuration;public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {_        if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {_            String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName())__            LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". "_                    + "After Camel 2.16, absolute paths will be invalid.",_                    ftpComponent.getClass().getSimpleName(),_                    configuration.getDirectoryName(),_                    relativePath))__            configuration.setDirectory(relativePath)__            configuration.setDirectoryName(relativePath)__        }_    };checks,whether,directory,used,in,ftp,ftps,sftp,endpoint,uri,is,relative,absolute,path,will,be,converted,to,relative,path,and,a,warn,will,be,printed,see,a,href,http,camel,apache,org,ftp2,html,ftp,sftp,ftps,component,a,param,ftp,component,param,configuration;public,static,void,ensure,relative,ftp,directory,component,ftp,component,remote,file,configuration,configuration,if,file,util,has,leading,separator,configuration,get,directory,name,string,relative,path,file,util,strip,leading,separator,configuration,get,directory,name,log,warn,string,format,s,doesn,t,support,absolute,paths,s,will,be,converted,to,s,after,camel,2,16,absolute,paths,will,be,invalid,ftp,component,get,class,get,simple,name,configuration,get,directory,name,relative,path,configuration,set,directory,relative,path,configuration,set,directory,name,relative,path
