commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static String extractDirNameFromAbsolutePath(String path) {     // otherwise force File.separator     if (path.endsWith("/") || path.endsWith("\\")) {         path = path.substring(0, path.length() - 1).     }     return FileUtil.stripPath(path). }
true;public,static;1;66;/**  * Compacts a path by stacking it and reducing <tt>..</tt>,  * and uses OS specific file separators (eg {@link java.io.File#separator}).  * <p/>  * <b>Important: </b> This implementation works for the camel-ftp component  * for various FTP clients and FTP servers using different platforms and whatnot.  * This implementation has been working for many Camel releases, and is included here  * to restore patch compatibility with the Camel releases.  */ ;/**  * Compacts a path by stacking it and reducing <tt>..</tt>,  * and uses OS specific file separators (eg {@link java.io.File#separator}).  * <p/>  * <b>Important: </b> This implementation works for the camel-ftp component  * for various FTP clients and FTP servers using different platforms and whatnot.  * This implementation has been working for many Camel releases, and is included here  * to restore patch compatibility with the Camel releases.  */ public static String compactPath(String path) {     if (path == null) {         return null.     }     // only normalize if contains a path separator     if (path.indexOf(File.separator) == -1) {         return path.     }     // preserve ending slash if given in input path     boolean endsWithSlash = path.endsWith("/") || path.endsWith("\\").     // preserve starting slash if given in input path     boolean startsWithSlash = path.startsWith("/") || path.startsWith("\\").     Deque<String> stack = new ArrayDeque<>().     String separatorRegex = File.separator.     if (FileUtil.isWindows()) {         separatorRegex = "\\\\".     }     String[] parts = path.split(separatorRegex).     for (String part : parts) {         if (part.equals("..") && !stack.isEmpty() && !"..".equals(stack.peek())) {             // only pop if there is a previous path, which is not a ".." path either             stack.pop().         } else if (part.equals(".") || part.isEmpty()) {         // do nothing because we don't want a path like foo/./bar or foo//bar         } else {             stack.push(part).         }     }     // build path based on stack     StringBuilder sb = new StringBuilder().     if (startsWithSlash) {         sb.append(File.separator).     }     // now we build back using FIFO so need to use descending     for (Iterator<String> it = stack.descendingIterator(). it.hasNext(). ) {         sb.append(it.next()).         if (it.hasNext()) {             sb.append(File.separator).         }     }     if (endsWithSlash && stack.size() > 0) {         sb.append(File.separator).     }     // so avoid this by removing any 2nd slash     if (sb.length() >= 2) {         boolean firstSlash = sb.charAt(0) == '/' || sb.charAt(0) == '\\'.         boolean secondSlash = sb.charAt(1) == '/' || sb.charAt(1) == '\\'.         if (firstSlash && secondSlash) {             // remove 2nd clash             sb = sb.replace(1, 2, "").         }     }     return sb.toString(). }
true;public,static;2;12;/**  * Checks whether directory used in ftp/ftps/sftp endpoint URI is relative.  * Absolute path will be converted to relative path and a WARN will be printed.  * @see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>  * @param ftpComponent  * @param configuration  */ ;/**  * Checks whether directory used in ftp/ftps/sftp endpoint URI is relative.  * Absolute path will be converted to relative path and a WARN will be printed.  * @see <a href="http://camel.apache.org/ftp2.html">FTP/SFTP/FTPS Component</a>  * @param ftpComponent  * @param configuration  */ public static void ensureRelativeFtpDirectory(Component ftpComponent, RemoteFileConfiguration configuration) {     if (FileUtil.hasLeadingSeparator(configuration.getDirectoryName())) {         String relativePath = FileUtil.stripLeadingSeparator(configuration.getDirectoryName()).         LOG.warn(String.format("%s doesn't support absolute paths, \"%s\" will be converted to \"%s\". " + "After Camel 2.16, absolute paths will be invalid.", ftpComponent.getClass().getSimpleName(), configuration.getDirectoryName(), relativePath)).         configuration.setDirectory(relativePath).         configuration.setDirectoryName(relativePath).     } }
