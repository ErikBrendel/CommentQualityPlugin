commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getScheme() {     return getFtpsConfiguration().getProtocol(). }
true;protected;0;74;/**  * Create the FTPS client.  */ ;/**  * Create the FTPS client.  */ protected FTPClient createFtpClient() throws Exception {     FTPSClient client.     if (sslContextParameters != null) {         SSLContext context = sslContextParameters.createSSLContext(getCamelContext()).         client = new FTPSClient(getFtpsConfiguration().isImplicit(), context).         // The FTPSClient tries to manage the following SSLSocket related configuration options         // on its own based on internal configuration options.  FTPSClient does not lend itself         // to subclassing for the purpose of overriding this behavior (private methods, fields, etc.).         // As such, we create a socket (preconfigured by SSLContextParameters) from the context         // we gave to FTPSClient and then setup FTPSClient to reuse the already configured configuration         // from the socket for all future sockets it creates.  Not sexy and a little brittle, but it works.         SSLSocket socket = (SSLSocket) context.getSocketFactory().createSocket().         client.setEnabledCipherSuites(socket.getEnabledCipherSuites()).         client.setEnabledProtocols(socket.getEnabledProtocols()).         client.setNeedClientAuth(socket.getNeedClientAuth()).         client.setWantClientAuth(socket.getWantClientAuth()).         client.setEnabledSessionCreation(socket.getEnableSessionCreation()).     } else {         client = new FTPSClient(getFtpsConfiguration().getSecurityProtocol(), getFtpsConfiguration().isImplicit()).         if (ftpClientKeyStoreParameters != null) {             String type = (ftpClientKeyStoreParameters.containsKey("type")) ? (String) ftpClientKeyStoreParameters.get("type") : KeyStore.getDefaultType().             String file = (String) ftpClientKeyStoreParameters.get("file").             String password = (String) ftpClientKeyStoreParameters.get("password").             String algorithm = (ftpClientKeyStoreParameters.containsKey("algorithm")) ? (String) ftpClientKeyStoreParameters.get("algorithm") : KeyManagerFactory.getDefaultAlgorithm().             String keyPassword = (String) ftpClientKeyStoreParameters.get("keyPassword").             KeyStore keyStore = KeyStore.getInstance(type).             FileInputStream keyStoreFileInputStream = new FileInputStream(new File(file)).             try {                 keyStore.load(keyStoreFileInputStream, password.toCharArray()).             } finally {                 IOHelper.close(keyStoreFileInputStream, "keyStore", log).             }             KeyManagerFactory keyMgrFactory = KeyManagerFactory.getInstance(algorithm).             keyMgrFactory.init(keyStore, keyPassword.toCharArray()).             client.setNeedClientAuth(true).             client.setKeyManager(keyMgrFactory.getKeyManagers()[0]).         }         if (ftpClientTrustStoreParameters != null) {             String type = (ftpClientTrustStoreParameters.containsKey("type")) ? (String) ftpClientTrustStoreParameters.get("type") : KeyStore.getDefaultType().             String file = (String) ftpClientTrustStoreParameters.get("file").             String password = (String) ftpClientTrustStoreParameters.get("password").             String algorithm = (ftpClientTrustStoreParameters.containsKey("algorithm")) ? (String) ftpClientTrustStoreParameters.get("algorithm") : TrustManagerFactory.getDefaultAlgorithm().             KeyStore trustStore = KeyStore.getInstance(type).             FileInputStream trustStoreFileInputStream = new FileInputStream(new File(file)).             try {                 trustStore.load(trustStoreFileInputStream, password.toCharArray()).             } finally {                 IOHelper.close(trustStoreFileInputStream, "trustStore", log).             }             TrustManagerFactory trustMgrFactory = TrustManagerFactory.getInstance(algorithm).             trustMgrFactory.init(trustStore).             client.setTrustManager(trustMgrFactory.getTrustManagers()[0]).         }     }     return client. }
false;public;0;62;;@Override public RemoteFileOperations<FTPFile> createRemoteFileOperations() throws Exception {     // configure ftp client     FTPSClient client = getFtpsClient().     if (client == null) {         // must use a new client if not explicit configured to use a custom client         client = (FTPSClient) createFtpClient().     }     // use configured buffer size which is larger and therefore faster (as the default is no buffer)     if (getConfiguration().getReceiveBufferSize() > 0) {         client.setBufferSize(getConfiguration().getReceiveBufferSize()).     }     // set any endpoint configured timeouts     if (getConfiguration().getConnectTimeout() > -1) {         client.setConnectTimeout(getConfiguration().getConnectTimeout()).     }     if (getConfiguration().getSoTimeout() > -1) {         soTimeout = getConfiguration().getSoTimeout().     }     dataTimeout = getConfiguration().getTimeout().     if (ftpClientParameters != null) {         Map<String, Object> localParameters = new HashMap<>(ftpClientParameters).         // setting soTimeout has to be done later on FTPClient (after it has connected)         Object timeout = localParameters.remove("soTimeout").         if (timeout != null) {             soTimeout = getCamelContext().getTypeConverter().convertTo(int.class, timeout).         }         // and we want to keep data timeout so we can log it later         timeout = localParameters.remove("dataTimeout").         if (timeout != null) {             dataTimeout = getCamelContext().getTypeConverter().convertTo(int.class, timeout).         }         setProperties(client, localParameters).     }     if (ftpClientConfigParameters != null) {         // client config is optional so create a new one if we have parameter for it         if (ftpClientConfig == null) {             ftpClientConfig = new FTPClientConfig().         }         Map<String, Object> localConfigParameters = new HashMap<>(ftpClientConfigParameters).         setProperties(ftpClientConfig, localConfigParameters).     }     if (dataTimeout > 0) {         client.setDataTimeout(dataTimeout).     }     if (log.isDebugEnabled()) {         log.debug("Created FTPSClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}" + ", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}", new Object[] { client.getConnectTimeout(), getSoTimeout(), dataTimeout, client.getBufferSize(), client.getReceiveDataSocketBufferSize(), client.getSendDataSocketBufferSize(), client }).     }     FtpsOperations operations = new FtpsOperations(client, getFtpClientConfig()).     operations.setEndpoint(this).     return operations. }
true;public;0;3;/**  * Returns the FTPSClient. This method exists only for convenient.  */ ;/**  * Returns the FTPSClient. This method exists only for convenient.  */ public FTPSClient getFtpsClient() {     return (FTPSClient) getFtpClient(). }
true;public;0;3;/**  * Returns the FtpsConfiguration. This method exists only for convenient.  */ ;/**  * Returns the FtpsConfiguration. This method exists only for convenient.  */ public FtpsConfiguration getFtpsConfiguration() {     return (FtpsConfiguration) getConfiguration(). }
true;public;1;3;/**  * Set the key store parameters  */ ;/**  * Set the key store parameters  */ public void setFtpClientKeyStoreParameters(Map<String, Object> param) {     this.ftpClientKeyStoreParameters = param. }
true;public;1;3;/**  * Set the trust store parameters  */ ;/**  * Set the trust store parameters  */ public void setFtpClientTrustStoreParameters(Map<String, Object> param) {     this.ftpClientTrustStoreParameters = param. }
true;public;0;3;/**  * Gets the JSSE configuration that overrides any settings in {@link FtpsEndpoint#ftpClientKeyStoreParameters},  * {@link #ftpClientTrustStoreParameters}, and {@link FtpsConfiguration#getSecurityProtocol()}.  */ ;/**  * Gets the JSSE configuration that overrides any settings in {@link FtpsEndpoint#ftpClientKeyStoreParameters},  * {@link #ftpClientTrustStoreParameters}, and {@link FtpsConfiguration#getSecurityProtocol()}.  */ public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * Gets the JSSE configuration that overrides any settings in {@link FtpsEndpoint#ftpClientKeyStoreParameters},  * {@link #ftpClientTrustStoreParameters}, and {@link FtpsConfiguration#getSecurityProtocol()}.  */ ;/**  * Gets the JSSE configuration that overrides any settings in {@link FtpsEndpoint#ftpClientKeyStoreParameters},  * {@link #ftpClientTrustStoreParameters}, and {@link FtpsConfiguration#getSecurityProtocol()}.  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
