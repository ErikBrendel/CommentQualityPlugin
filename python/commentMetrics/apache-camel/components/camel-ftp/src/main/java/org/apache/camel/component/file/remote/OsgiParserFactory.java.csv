commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * setClassResolver sets a class resolver which can be used instead of  * Class.forName for class resolution.  * @param ocr Class Resolver  */ ;/**  * setClassResolver sets a class resolver which can be used instead of  * Class.forName for class resolution.  * @param ocr Class Resolver  */ public void setClassResolver(ClassResolver ocr) {     this.ocr = ocr. }
false;public;1;7;;@Override public FTPFileEntryParser createFileEntryParser(String key) {     if (key == null) {         throw new ParserInitializationException("Parser key cannot be null").     }     return createFileEntryParser(key, null). }
false;public;1;6;;@Override public FTPFileEntryParser createFileEntryParser(FTPClientConfig config) throws ParserInitializationException {     String key = config.getServerSystemKey().     return createFileEntryParser(key, config). }
false;private;2;51;;private FTPFileEntryParser createFileEntryParser(String key, FTPClientConfig config) {     FTPFileEntryParser parser = null.     // Is the key a possible class name?     if (JAVA_QUALIFIED_NAME_PATTERN.matcher(key).matches()) {         Class<?> parserClass = ocr.resolveClass(key).         try {             parser = (FTPFileEntryParser) parserClass.newInstance().         } catch (ClassCastException e) {             throw new ParserInitializationException(parserClass.getName() + " does not implement the interface " + "org.apache.commons.net.ftp.FTPFileEntryParser.", e).         } catch (Exception | ExceptionInInitializerError e) {             throw new ParserInitializationException("Error initializing parser", e).         }     }     if (parser == null) {         String ukey = key.toUpperCase(Locale.ENGLISH).         if (ukey.contains("UNIX")) {             parser = new UnixFTPEntryParser(config).         } else if (ukey.contains("LINUX")) {             parser = new UnixFTPEntryParser(config).         } else if (ukey.contains("VMS")) {             parser = new VMSVersioningFTPEntryParser(config).         } else if (ukey.contains("WINDOWS")) {             parser = createNTFTPEntryParser(config).         } else if (ukey.contains("WIN32")) {             parser = createNTFTPEntryParser(config).         } else if (ukey.contains("OS/2")) {             parser = new OS2FTPEntryParser(config).         } else if ((ukey.contains("OS/400")) || (ukey.contains("AS/400"))) {             parser = createOS400FTPEntryParser(config).         } else if (ukey.contains("MVS")) {             parser = new MVSFTPEntryParser().         } else if (ukey.contains("NETWARE")) {             parser = new NetwareFTPEntryParser(config).         } else if (ukey.contains("MACOS PETER")) {             parser = new MacOsPeterFTPEntryParser(config).         } else if (ukey.contains("TYPE: L8")) {             parser = new UnixFTPEntryParser(config).         } else {             throw new ParserInitializationException("Unknown parser type: " + key).         }     }     if (parser instanceof Configurable) {         ((Configurable) parser).configure(config).     }     return parser. }
true;private;1;11;/**  * Creates an NT FTP parser: if the config exists, and the system key equals  * {@link FTPClientConfig#SYST_NT} then a plain {@link NTFTPEntryParser} is used,  * otherwise a composite of {@link NTFTPEntryParser} and {@link UnixFTPEntryParser} is used.  * @param config the config to use, may be {@code null}  * @return the parser  */ ;/**  * Creates an NT FTP parser: if the config exists, and the system key equals  * {@link FTPClientConfig#SYST_NT} then a plain {@link NTFTPEntryParser} is used,  * otherwise a composite of {@link NTFTPEntryParser} and {@link UnixFTPEntryParser} is used.  * @param config the config to use, may be {@code null}  * @return the parser  */ private FTPFileEntryParser createNTFTPEntryParser(FTPClientConfig config) {     if (config != null && FTPClientConfig.SYST_NT.equals(config.getServerSystemKey())) {         return new NTFTPEntryParser(config).     } else {         return new CompositeFileEntryParser(new FTPFileEntryParser[] { new NTFTPEntryParser(config), new UnixFTPEntryParser(config) }).     } }
true;private;1;11;/**  * Creates an OS400 FTP parser: if the config exists, and the system key equals  * {@link FTPClientConfig#SYST_OS400} then a plain {@link OS400FTPEntryParser} is used,  * otherwise a composite of {@link OS400FTPEntryParser} and {@link UnixFTPEntryParser} is used.  * @param config the config to use, may be {@code null}  * @return the parser  */ ;/**  * Creates an OS400 FTP parser: if the config exists, and the system key equals  * {@link FTPClientConfig#SYST_OS400} then a plain {@link OS400FTPEntryParser} is used,  * otherwise a composite of {@link OS400FTPEntryParser} and {@link UnixFTPEntryParser} is used.  * @param config the config to use, may be {@code null}  * @return the parser  */ private FTPFileEntryParser createOS400FTPEntryParser(FTPClientConfig config) {     if (config != null && FTPClientConfig.SYST_OS400.equals(config.getServerSystemKey())) {         return new OS400FTPEntryParser(config).     } else {         return new CompositeFileEntryParser(new FTPFileEntryParser[] { new OS400FTPEntryParser(config), new UnixFTPEntryParser(config) }).     } }
