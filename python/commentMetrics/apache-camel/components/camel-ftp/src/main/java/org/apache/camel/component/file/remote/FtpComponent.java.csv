commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;16;;@Override protected GenericFileEndpoint<FTPFile> buildFileEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String baseUri = getBaseUri(uri).     // lets make sure we create a new configuration as each endpoint can customize its own version     // must pass on baseUri to the configuration (see above)     FtpConfiguration config = new FtpConfiguration(new URI(baseUri)).     FtpUtils.ensureRelativeFtpDirectory(this, config).     FtpEndpoint<FTPFile> answer = new FtpEndpoint<>(uri, this, config).     extractAndSetFtpClientConfigParameters(parameters, answer).     extractAndSetFtpClientParameters(parameters, answer).     return answer. }
true;protected;1;7;/**  * Get the base uri part before the options as they can be non URI valid such as the expression using $ chars  * and the URI constructor will regard $ as an illegal character and we don't want to enforce end users to  * to escape the $ for the expression (file language)  */ ;/**  * Get the base uri part before the options as they can be non URI valid such as the expression using $ chars  * and the URI constructor will regard $ as an illegal character and we don't want to enforce end users to  * to escape the $ for the expression (file language)  */ protected String getBaseUri(String uri) {     String baseUri = uri.     if (uri.indexOf("?") != -1) {         baseUri = uri.substring(0, uri.indexOf("?")).     }     return baseUri. }
true;protected;2;6;/**  * Extract additional ftp client configuration options from the parameters map (parameters starting with  * 'ftpClientConfig.'). To remember these parameters, we set them in the endpoint and we can use them  * when creating a client.  */ ;/**  * Extract additional ftp client configuration options from the parameters map (parameters starting with  * 'ftpClientConfig.'). To remember these parameters, we set them in the endpoint and we can use them  * when creating a client.  */ protected void extractAndSetFtpClientConfigParameters(Map<String, Object> parameters, FtpEndpoint<FTPFile> answer) {     if (IntrospectionSupport.hasProperties(parameters, "ftpClientConfig.")) {         Map<String, Object> param = IntrospectionSupport.extractProperties(parameters, "ftpClientConfig.").         answer.setFtpClientConfigParameters(param).     } }
true;protected;2;6;/**  * Extract additional ftp client options from the parameters map (parameters starting with  * 'ftpClient.'). To remember these parameters, we set them in the endpoint and we can use them  * when creating a client.  */ ;/**  * Extract additional ftp client options from the parameters map (parameters starting with  * 'ftpClient.'). To remember these parameters, we set them in the endpoint and we can use them  * when creating a client.  */ protected void extractAndSetFtpClientParameters(Map<String, Object> parameters, FtpEndpoint<FTPFile> answer) {     if (IntrospectionSupport.hasProperties(parameters, "ftpClient.")) {         Map<String, Object> param = IntrospectionSupport.extractProperties(parameters, "ftpClient.").         answer.setFtpClientParameters(param).     } }
false;protected;1;3;;protected void afterPropertiesSet(GenericFileEndpoint<FTPFile> endpoint) throws Exception { // noop }
