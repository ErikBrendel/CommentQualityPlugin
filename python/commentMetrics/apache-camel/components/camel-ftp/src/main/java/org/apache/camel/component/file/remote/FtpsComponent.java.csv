commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;22;;@Override protected GenericFileEndpoint<FTPFile> buildFileEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String baseUri = getBaseUri(uri).     // lets make sure we create a new configuration as each endpoint can customize its own version     // must pass on baseUri to the configuration (see above)     FtpsConfiguration config = new FtpsConfiguration(new URI(baseUri)).     FtpUtils.ensureRelativeFtpDirectory(this, config).     FtpsEndpoint endpoint = new FtpsEndpoint(uri, this, config).     extractAndSetFtpClientKeyStoreParameters(parameters, endpoint).     extractAndSetFtpClientTrustStoreParameters(parameters, endpoint).     extractAndSetFtpClientConfigParameters(parameters, endpoint).     extractAndSetFtpClientParameters(parameters, endpoint).     if (endpoint.getSslContextParameters() == null) {         endpoint.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return endpoint. }
true;protected;2;6;/**  * Extract additional ftp client key store options from the parameters map (parameters starting with  * 'ftpClient.keyStore.'). To remember these parameters, we set them in the endpoint and we can use  * them when creating a client.  */ ;/**  * Extract additional ftp client key store options from the parameters map (parameters starting with  * 'ftpClient.keyStore.'). To remember these parameters, we set them in the endpoint and we can use  * them when creating a client.  */ protected void extractAndSetFtpClientKeyStoreParameters(Map<String, Object> parameters, FtpsEndpoint endpoint) {     if (IntrospectionSupport.hasProperties(parameters, "ftpClient.keyStore.")) {         Map<String, Object> param = IntrospectionSupport.extractProperties(parameters, "ftpClient.keyStore.").         endpoint.setFtpClientKeyStoreParameters(param).     } }
true;protected;2;6;/**  * Extract additional ftp client trust store options from the parameters map (parameters starting with  * 'ftpClient.trustStore.'). To remember these parameters, we set them in the endpoint and we can use  * them when creating a client.  */ ;/**  * Extract additional ftp client trust store options from the parameters map (parameters starting with  * 'ftpClient.trustStore.'). To remember these parameters, we set them in the endpoint and we can use  * them when creating a client.  */ protected void extractAndSetFtpClientTrustStoreParameters(Map<String, Object> parameters, FtpsEndpoint endpoint) {     if (IntrospectionSupport.hasProperties(parameters, "ftpClient.trustStore.")) {         Map<String, Object> param = IntrospectionSupport.extractProperties(parameters, "ftpClient.trustStore.").         endpoint.setFtpClientTrustStoreParameters(param).     } }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
