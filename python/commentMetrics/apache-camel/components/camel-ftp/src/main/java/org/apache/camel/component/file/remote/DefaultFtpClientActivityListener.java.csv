commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setDownload(boolean download) {     this.download = download. }
false;public;1;4;;@Override public void setRemoteFileName(String fileName) {     this.fileName = fileName. }
false;public;1;5;;@Override public void setRemoteFileSize(long fileSize) {     this.fileSize = fileSize.     this.fileSizeText = StringHelper.humanReadableBytes(fileSize). }
false;public;0;4;;@Override public String getLastLogActivity() {     return lastLogActivity. }
false;public;0;4;;@Override public long getLastLogActivityTimestamp() {     return lastLogActivityTimestamp. }
false;public;0;4;;@Override public String getLastVerboseLogActivity() {     return lastVerboseLogActivity. }
false;public;0;4;;@Override public long getLastVerboseLogActivityTimestamp() {     return lastVerboseLogActivityTimestamp. }
false;public;2;4;;@Override public void onGeneralError(String host, String errorMessage) {     doLogVerbose("General error when communicating with host: " + host + " error: " + errorMessage). }
false;public;1;4;;@Override public void onConnecting(String host) {     doLogVerbose("Connecting to host: " + host). }
false;public;1;4;;@Override public void onConnected(String host) {     doLogVerbose("Connected to host: " + host). }
false;public;1;4;;@Override public void onLogin(String host) {     doLogVerbose("Login on host: " + host). }
false;public;1;4;;@Override public void onLoginComplete(String host) {     doLogVerbose("Login on host: " + host + " complete"). }
false;public;2;4;;@Override public void onLoginFailed(int replyCode, String replyMessage) {     doLogVerbose("Login on host: " + host + " failed (code: " + replyCode + ", message: " + replyMessage + ")"). }
false;public;1;4;;@Override public void onDisconnecting(String host) {     doLogVerbose("Disconnecting from host: " + host). }
false;public;1;4;;@Override public void onDisconnected(String host) {     doLogVerbose("Disconnected from host: " + host). }
false;public;2;8;;@Override public void onScanningForFiles(String host, String directory) {     if (ObjectHelper.isEmpty(directory)) {         doLogVerbose("Scanning for new files to download from host: " + host).     } else {         doLogVerbose("Scanning for new files to download from host: " + host + " in directory: " + directory).     } }
false;public;2;13;;@Override public void onBeginDownloading(String host, String file) {     download = true.     resume = false.     resumeOffset = 0.     watch.restart().     interval.restart().     // add extra space to align with completed     String msg = "Downloading from host: " + host + " file: " + file + " starting ".     if (fileSize > 0) {         msg += " (size: " + fileSizeText + ")".     }     doLog(msg). }
false;public;3;15;;@Override public void onResumeDownloading(String host, String file, long position) {     download = true.     resume = true.     resumeOffset = position.     watch.restart().     interval.restart().     String msg = "Resume downloading from host: " + host + " file: " + file + " at position: " + position + " bytes/" + StringHelper.humanReadableBytes(position).     if (fileSize > 0) {         float percent = ((float) resumeOffset / (float) fileSize) * 100L.         String num = String.format("%.1f", percent).         msg += "/" + num + "% (size: " + fileSizeText + ")".     }     doLog(msg). }
false;public;5;28;;@Override public void onDownload(String host, String file, long chunkSize, long totalChunkSize, long fileSize) {     totalChunkSize = totalChunkSize + resumeOffset.     transferredBytes = totalChunkSize.     String prefix = resume ? "Resume downloading" : "Downloading".     String msg = prefix + " from host: " + host + " file: " + file + " chunk (" + chunkSize + "/" + totalChunkSize + " bytes)".     if (fileSize > 0) {         float percent = ((float) totalChunkSize / (float) fileSize) * 100L.         String num = String.format("%.1f", percent).         // avoid 100.0 as its only done when we get the onDownloadComplete         if (totalChunkSize < fileSize && "100.0".equals(num)) {             num = "99.9".         }         String size = StringHelper.humanReadableBytes(totalChunkSize).         msg += " (progress: " + size + "/" + num + "%)".     } else {         // okay we do not know the total size, but then make what we have download so-far human readable         String size = StringHelper.humanReadableBytes(totalChunkSize).         msg += " (downloaded: " + size + ")".     }     doLogVerbose(msg).     // however if the operation is slow then log once in a while     if (interval.taken() > endpoint.getTransferLoggingIntervalSeconds() * 1000) {         doLog(msg).         interval.restart().     } }
false;public;2;12;;@Override public void onDownloadComplete(String host, String file) {     String prefix = resume ? "Resume downloading" : "Downloading".     String msg = prefix + " from host: " + host + " file: " + file + " completed".     if (transferredBytes > 0) {         msg += " (size: " + StringHelper.humanReadableBytes(transferredBytes) + ")".     }     long taken = watch.taken().     String time = TimeUtils.printDuration(taken).     msg += " (took: " + time + ")".     doLog(msg). }
false;public;2;11;;@Override public void onBeginUploading(String host, String file) {     download = false.     watch.restart().     interval.restart().     String msg = "Uploading to host: " + host + " file: " + file + " starting".     if (fileSize > 0) {         msg += " (size: " + fileSizeText + ")".     }     doLog(msg). }
false;public;5;27;;@Override public void onUpload(String host, String file, long chunkSize, long totalChunkSize, long fileSize) {     transferredBytes = totalChunkSize.     String msg = "Uploading to host: " + host + " file: " + file + " chunk (" + chunkSize + "/" + totalChunkSize + " bytes)".     if (fileSize > 0) {         float percent = ((float) totalChunkSize / (float) fileSize) * 100L.         String num = String.format("%.1f", percent).         // avoid 100.0 as its only done when we get the onUploadComplete         if (totalChunkSize < fileSize && "100.0".equals(num)) {             num = "99.9".         }         String size = StringHelper.humanReadableBytes(totalChunkSize).         msg += " (progress: " + size + "/" + num + "%)".     } else {         // okay we do not know the total size, but then make what we have uploaded so-far human readable         String size = StringHelper.humanReadableBytes(totalChunkSize).         msg += " (uploaded: " + size + ")".     }     // each chunk is verbose     doLogVerbose(msg).     // however if the operation is slow then log once in a while     if (interval.taken() > endpoint.getTransferLoggingIntervalSeconds() * 1000) {         doLog(msg).         interval.restart().     } }
false;public;2;11;;@Override public void onUploadComplete(String host, String file) {     String msg = "Uploading to host: " + host + " file: " + file + " completed".     if (transferredBytes > 0) {         msg += " (size: " + StringHelper.humanReadableBytes(transferredBytes) + ")".     }     long taken = watch.taken().     String time = TimeUtils.printDuration(taken).     msg += " (took: " + time + ")".     doLog(msg). }
false;public;1;4;;@Override public void bytesTransferred(CopyStreamEvent event) { // not in use }
false;public;3;9;;@Override public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {     // stream size is always -1, so use pre-calculated fileSize instead     if (download) {         onDownload(host, fileName, bytesTransferred, totalBytesTransferred, fileSize).     } else {         onUpload(host, fileName, bytesTransferred, totalBytesTransferred, fileSize).     } }
false;protected;1;8;;protected void doLog(String message) {     lastLogActivity = message.     lastLogActivityTimestamp = System.currentTimeMillis().     // verbose implies regular log as well     lastVerboseLogActivity = lastLogActivity.     lastVerboseLogActivityTimestamp = lastLogActivityTimestamp.     logger.log(message, endpoint.getTransferLoggingLevel()). }
false;protected;1;7;;protected void doLogVerbose(String message) {     lastVerboseLogActivity = message.     lastVerboseLogActivityTimestamp = System.currentTimeMillis().     if (endpoint.isTransferLoggingVerbose()) {         logger.log(message, endpoint.getTransferLoggingLevel()).     } }
