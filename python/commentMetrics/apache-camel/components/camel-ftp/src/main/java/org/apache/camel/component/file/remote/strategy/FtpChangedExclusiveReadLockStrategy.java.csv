commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void prepareOnStartup(GenericFileOperations<FTPFile> tGenericFileOperations, GenericFileEndpoint<FTPFile> tGenericFileEndpoint) throws Exception { // noop }
false;public;3;90;;public boolean acquireExclusiveReadLock(GenericFileOperations<FTPFile> operations, GenericFile<FTPFile> file, Exchange exchange) throws Exception {     boolean exclusive = false.     LOG.trace("Waiting for exclusive read lock to file: {}", file).     long lastModified = Long.MIN_VALUE.     long length = Long.MIN_VALUE.     StopWatch watch = new StopWatch().     long startTime = new Date().getTime().     while (!exclusive) {         // timeout check         if (timeout > 0) {             long delta = watch.taken().             if (delta > timeout) {                 CamelLogger.log(LOG, readLockLoggingLevel, "Cannot acquire read lock within " + timeout + " millis. Will skip the file: " + file).                 // we could not get the lock within the timeout period, so return false                 return false.             }         }         long newLastModified = 0.         long newLength = 0.         List<FTPFile> files.         if (fastExistsCheck) {             // use the absolute file path to only pickup the file we want to check, this avoids expensive             // list operations if we have a lot of files in the directory             String path = file.getAbsoluteFilePath().             if (path.equals("/") || path.equals("\\")) {                 // special for root (= home) directory                 LOG.trace("Using fast exists to update file information in home directory").                 files = operations.listFiles().             } else {                 LOG.trace("Using fast exists to update file information for {}", path).                 files = operations.listFiles(path).             }         } else {             // fast option not enabled, so list the directory and filter the file name             String path = file.getParent().             if (path.equals("/") || path.equals("\\")) {                 // special for root (= home) directory                 LOG.trace("Using full directory listing in home directory to update file information. Consider enabling fastExistsCheck option.").                 files = operations.listFiles().             } else {                 LOG.trace("Using full directory listing to update file information for {}. Consider enabling fastExistsCheck option.", path).                 files = operations.listFiles(path).             }         }         LOG.trace("List files {} found {} files", file.getAbsoluteFilePath(), files.size()).         for (FTPFile f : files) {             boolean match.             if (fastExistsCheck) {                 // uses the absolute file path as well                 match = f.getName().equals(file.getAbsoluteFilePath()) || f.getName().equals(file.getFileNameOnly()).             } else {                 match = f.getName().equals(file.getFileNameOnly()).             }             if (match) {                 newLength = f.getSize().                 if (f.getTimestamp() != null) {                     newLastModified = f.getTimestamp().getTimeInMillis().                 }             }         }         LOG.trace("Previous last modified: " + lastModified + ", new last modified: " + newLastModified).         LOG.trace("Previous length: " + length + ", new length: " + newLength).         long newOlderThan = startTime + watch.taken() - minAge.         LOG.trace("New older than threshold: {}", newOlderThan).         if (newLength >= minLength && ((minAge == 0 && newLastModified == lastModified && newLength == length) || (minAge != 0 && newLastModified < newOlderThan))) {             LOG.trace("Read lock acquired.").             exclusive = true.         } else {             // set new base file change information             lastModified = newLastModified.             length = newLength.             boolean interrupted = sleep().             if (interrupted) {                 // we were interrupted while sleeping, we are likely being shutdown so return false                 return false.             }         }     }     return exclusive. }
false;private;0;10;;private boolean sleep() {     LOG.trace("Exclusive read lock not granted. Sleeping for {} millis.", checkInterval).     try {         Thread.sleep(checkInterval).         return false.     } catch (InterruptedException e) {         LOG.debug("Sleep interrupted while waiting for exclusive read lock, so breaking out").         return true.     } }
false;public;3;4;;@Override public void releaseExclusiveReadLockOnAbort(GenericFileOperations<FTPFile> operations, GenericFile<FTPFile> file, Exchange exchange) throws Exception { // noop }
false;public;3;4;;@Override public void releaseExclusiveReadLockOnRollback(GenericFileOperations<FTPFile> operations, GenericFile<FTPFile> file, Exchange exchange) throws Exception { // noop }
false;public;3;4;;@Override public void releaseExclusiveReadLockOnCommit(GenericFileOperations<FTPFile> operations, GenericFile<FTPFile> file, Exchange exchange) throws Exception { // noop }
false;public;0;3;;public long getTimeout() {     return timeout. }
false;public;1;4;;@Override public void setTimeout(long timeout) {     this.timeout = timeout. }
false;public;0;3;;public long getCheckInterval() {     return checkInterval. }
false;public;1;4;;@Override public void setCheckInterval(long checkInterval) {     this.checkInterval = checkInterval. }
false;public;1;4;;@Override public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) {     this.readLockLoggingLevel = readLockLoggingLevel. }
false;public;1;4;;@Override public void setMarkerFiler(boolean markerFiler) { // noop - not supported by ftp }
false;public;1;4;;@Override public void setDeleteOrphanLockFiles(boolean deleteOrphanLockFiles) { // noop - not supported by ftp }
false;public;0;3;;public long getMinLength() {     return minLength. }
false;public;1;3;;public void setMinLength(long minLength) {     this.minLength = minLength. }
false;public;0;3;;public long getMinAge() {     return minAge. }
false;public;1;3;;public void setMinAge(long minAge) {     this.minAge = minAge. }
false;public;0;3;;public boolean isFastExistsCheck() {     return fastExistsCheck. }
false;public;1;3;;public void setFastExistsCheck(boolean fastExistsCheck) {     this.fastExistsCheck = fastExistsCheck. }
