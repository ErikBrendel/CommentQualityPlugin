commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected String getFtpUrl() {     base = new File("target/lwd").getAbsolutePath().     return "ftp://admin@localhost:" + getPort() + "/lwd/?password=admin&delay=5000&noop=true&localWorkDirectory=" + base. }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/lwd").     deleteDirectory("target/out").     super.setUp().     prepareFtpServer(). }
false;public;0;20;;@Test public void testLocalWorkDirectory() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedMessageCount(1).     assertMockEndpointsSatisfied().     // give test some time to close file resources     Thread.sleep(6000).     // now the lwd file should be deleted     File local = new File("target/lwd/hello.txt").     assertFalse("Local work file should have been deleted", local.exists()).     // and the out file should exists     File out = new File("target/out/hello.txt").     assertTrue("file should exists", out.exists()).     assertEquals("Hello World", IOConverter.toString(out, null)). }
false;private;0;12;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     File body = exchange.getIn().getBody(File.class).     assertNotNull(body).     assertTrue("Should be absolute path", body.isAbsolute()).     assertTrue("Local work file should exists", body.exists()).     assertEquals(FileUtil.normalizePath(base + "/hello.txt"), body.getPath()). }
false;public;0;11;;public void configure() throws Exception {     from(getFtpUrl()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             File body = exchange.getIn().getBody(File.class).             assertNotNull(body).             assertTrue("Should be absolute path", body.isAbsolute()).             assertTrue("Local work file should exists", body.exists()).             assertEquals(FileUtil.normalizePath(base + "/hello.txt"), body.getPath()).         }     }).to("mock:result", "file://target/out"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     File body = exchange.getIn().getBody(File.class).                     assertNotNull(body).                     assertTrue("Should be absolute path", body.isAbsolute()).                     assertTrue("Local work file should exists", body.exists()).                     assertEquals(FileUtil.normalizePath(base + "/hello.txt"), body.getPath()).                 }             }).to("mock:result", "file://target/out").         }     }. }
