commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public boolean authenticate(String userName, String password) {     return "user".equals(userName) && "password".equals(password). }
false;public;0;32;;@Test public void testSftpSimpleConsumeThroughProxy() throws Exception {     if (!canTest()) {         return.     }     // start http proxy     HttpProxyServer proxyServer = new DefaultHttpProxyServer(proxyPort).     proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler() {          @Override         public boolean authenticate(String userName, String password) {             return "user".equals(userName) && "password".equals(password).         }     }).     proxyServer.start().     String expected = "Hello World".     // create file using regular file     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR, expected, Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.FILE_NAME, "hello.txt").     mock.expectedBodiesReceived(expected).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     proxyServer.stop(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delay=10s&disconnect=true&proxy=#proxy").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delay=10s&disconnect=true&proxy=#proxy").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     final ProxyHTTP proxyHTTP = new ProxyHTTP("localhost", proxyPort).     proxyHTTP.setUserPasswd("user", "password").     jndi.bind("proxy", proxyHTTP).     return jndi. }
