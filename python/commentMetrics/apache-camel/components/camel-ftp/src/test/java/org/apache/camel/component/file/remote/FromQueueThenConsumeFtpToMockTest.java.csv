commented;modifiers;parameterAmount;loc;comment;code
true;private;0;3;// this is because we only want to run a single poll and get the file ;// START SNIPPET: e1 // we use delay=5000 to use 5 sec delay between pools to avoid polling a second time before we stop the consumer // this is because we only want to run a single poll and get the file private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/getme?password=admin&binary=false&delay=5000". }
false;private;0;3;;// END SNIPPET: e1 private String getStoreUrl() {     return "ftp://admin@localhost:" + getPort() + "/getme?password=admin&binary=false". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;9;;@Test public void testFromQueueThenConsumeFtp() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBodyAndHeader("seda:start", "Hello World", "myfile", "hello.txt").     assertMockEndpointsSatisfied(). }
false;private;0;12;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool once     Endpoint endpoint = context.getEndpoint(getStoreUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Bye World").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;1;27;;public void process(final Exchange exchange) throws Exception {     // get the filename from our custome header we want to get from a remote server     String filename = exchange.getIn().getHeader("myfile", String.class).     // construct the total url for the ftp consumer     // add the fileName option with the file we want to consume     String url = getFtpUrl() + "&fileName=" + filename.     // create a ftp endpoint     Endpoint ftp = context.getEndpoint(url).     // create a polling consumer where we can poll the myfile from the ftp server     PollingConsumer consumer = ftp.createPollingConsumer().     // must start the consumer before we can receive     consumer.start().     // poll the file from the ftp server     Exchange result = consumer.receive().     // the result is the response from the FTP consumer (the downloaded file)     // replace the outher exchange with the content from the downloaded file     exchange.getIn().setBody(result.getIn().getBody()).     // stop the consumer     consumer.stop(). }
false;public;0;33;;public void configure() throws Exception {     // START SNIPPET: e2     from("seda:start").process(new Processor() {          public void process(final Exchange exchange) throws Exception {             // get the filename from our custome header we want to get from a remote server             String filename = exchange.getIn().getHeader("myfile", String.class).             // construct the total url for the ftp consumer             // add the fileName option with the file we want to consume             String url = getFtpUrl() + "&fileName=" + filename.             // create a ftp endpoint             Endpoint ftp = context.getEndpoint(url).             // create a polling consumer where we can poll the myfile from the ftp server             PollingConsumer consumer = ftp.createPollingConsumer().             // must start the consumer before we can receive             consumer.start().             // poll the file from the ftp server             Exchange result = consumer.receive().             // the result is the response from the FTP consumer (the downloaded file)             // replace the outher exchange with the content from the downloaded file             exchange.getIn().setBody(result.getIn().getBody()).             // stop the consumer             consumer.stop().         }     }).to("mock:result"). // END SNIPPET: e2 }
false;protected;0;37;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e2             from("seda:start").process(new Processor() {                  public void process(final Exchange exchange) throws Exception {                     // get the filename from our custome header we want to get from a remote server                     String filename = exchange.getIn().getHeader("myfile", String.class).                     // construct the total url for the ftp consumer                     // add the fileName option with the file we want to consume                     String url = getFtpUrl() + "&fileName=" + filename.                     // create a ftp endpoint                     Endpoint ftp = context.getEndpoint(url).                     // create a polling consumer where we can poll the myfile from the ftp server                     PollingConsumer consumer = ftp.createPollingConsumer().                     // must start the consumer before we can receive                     consumer.start().                     // poll the file from the ftp server                     Exchange result = consumer.receive().                     // the result is the response from the FTP consumer (the downloaded file)                     // replace the outher exchange with the content from the downloaded file                     exchange.getIn().setBody(result.getIn().getBody()).                     // stop the consumer                     consumer.stop().                 }             }).to("mock:result").         // END SNIPPET: e2         }     }. }
