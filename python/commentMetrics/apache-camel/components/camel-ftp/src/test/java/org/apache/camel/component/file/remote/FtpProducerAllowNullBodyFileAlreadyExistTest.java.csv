commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/allow?password=admin". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     template.sendBodyAndHeader(getFtpUrl(), "Hello world", Exchange.FILE_NAME, "hello.txt"). }
false;public;0;10;;@Test public void testFileExistAppendAllowNullBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:appendTypeAppendResult").     mock.expectedMessageCount(1).     mock.expectedFileExists(FTP_ROOT_DIR + "/allow/hello.txt", "Hello world").     template.sendBody("direct:appendTypeAppend", null).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testFileExistOverrideAllowNullBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:appendTypeOverrideResult").     mock.expectedMessageCount(1).     mock.expectedFileExists(FTP_ROOT_DIR + "/allow/hello.txt", "").     template.sendBody("direct:appendTypeOverride", null).     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:appendTypeAppend").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to(getFtpUrl() + "&allowNullBody=true&fileExist=Append").to("mock:appendTypeAppendResult").     from("direct:appendTypeOverride").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to(getFtpUrl() + "&allowNullBody=true&fileExist=Override").to("mock:appendTypeOverrideResult"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:appendTypeAppend").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to(getFtpUrl() + "&allowNullBody=true&fileExist=Append").to("mock:appendTypeAppendResult").             from("direct:appendTypeOverride").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to(getFtpUrl() + "&allowNullBody=true&fileExist=Override").to("mock:appendTypeOverrideResult").         }     }. }
