commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/nolist/?password=admin" + "&stepwise=false&useList=false&ignoreFileNotFoundOrPermissionError=true&delete=true". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;13;;@Test public void testUseListFalse() throws Exception {     String data = consumer.receiveBody(getFtpUrl() + "&fileName=report.txt", 5000, String.class).     assertEquals("Hello World from FTPServer", data).     // try a 2nd time and the file is deleted     data = consumer.receiveBody(getFtpUrl() + "&fileName=report.txt", 1000, String.class).     assertNull("The file should no longer exist", data).     // and try a non existing file name     data = consumer.receiveBody(getFtpUrl() + "&fileName=report2.txt", 1000, String.class).     assertNull("The file should no longer exist", data). }
false;private;0;12;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     Endpoint endpoint = context.getEndpoint("ftp://admin@localhost:" + getPort() + "/nolist/?password=admin&binary=false").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World from FTPServer").     exchange.getIn().setHeader(Exchange.FILE_NAME, "report.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
