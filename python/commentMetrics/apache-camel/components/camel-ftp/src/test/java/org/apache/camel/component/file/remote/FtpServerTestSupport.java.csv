commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;@Override @Before public void setUp() throws Exception {     deleteDirectory(FTP_ROOT_DIR).     canTest = false.     FtpServerFactory factory = createFtpServerFactory().     if (factory != null) {         ftpServer = factory.createServer().         if (ftpServer != null) {             ftpServer.start().             canTest = true.         }     }     try {         super.setUp().     } catch (Exception e) {         // ignore if algorithm is not on the OS         NoSuchAlgorithmException nsae = ObjectHelper.getException(NoSuchAlgorithmException.class, e).         if (nsae != null) {             canTest = false.             String name = System.getProperty("os.name").             String message = nsae.getMessage().             log.warn("SunX509 is not avail on this platform [{}] Testing is skipped! Real cause: {}", name, message).         } else {             // some other error then throw it so the test can fail             throw e.         }     } }
false;public;0;16;;@Override @After public void tearDown() throws Exception {     super.tearDown().     if (ftpServer != null) {         try {             ftpServer.stop().             ftpServer = null.         } catch (Exception e) {         // ignore while shutting down as we could be polling during shutdown         // and get errors when the ftp server is stopping. This is only an issue         // since we host the ftp server embedded in the same jvm for unit testing         }     } }
false;protected;0;3;;protected boolean canTest() {     return canTest. }
false;protected;0;24;;protected FtpServerFactory createFtpServerFactory() throws Exception {     assertTrue(USERS_FILE.exists()).     assertTrue("Port number is not initialized in an expected range: " + BaseServerTestSupport.port, BaseServerTestSupport.port >= 21000).     NativeFileSystemFactory fsf = new NativeFileSystemFactory().     fsf.setCreateHome(true).     PropertiesUserManagerFactory pumf = new PropertiesUserManagerFactory().     pumf.setAdminName("admin").     pumf.setPasswordEncryptor(new ClearTextPasswordEncryptor()).     pumf.setFile(USERS_FILE).     UserManager userMgr = pumf.createUserManager().     ListenerFactory factory = new ListenerFactory().     factory.setPort(BaseServerTestSupport.port).     FtpServerFactory serverFactory = new FtpServerFactory().     serverFactory.setUserManager(userMgr).     serverFactory.setFileSystem(fsf).     serverFactory.setConnectionConfig(new ConnectionConfigFactory().createConnectionConfig()).     serverFactory.addListener(DEFAULT_LISTENER, factory.createListener()).     return serverFactory. }
false;public;3;3;;public void sendFile(String url, Object body, String fileName) {     template.sendBodyAndHeader(url, body, Exchange.FILE_NAME, simple(fileName)). }
