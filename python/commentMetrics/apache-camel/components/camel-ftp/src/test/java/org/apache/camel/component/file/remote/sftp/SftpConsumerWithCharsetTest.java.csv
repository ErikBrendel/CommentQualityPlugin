commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testConsumeWithCharset() throws Exception {     if (!canTest()) {         return.     }     // prepare sample file to be consumed by SFTP consumer     createSampleFile().     // Prepare expectations     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(SAMPLE_FILE_PAYLOAD).     context.getRouteController().startRoute("foo").     // Check that expectations are satisfied     assertMockEndpointsSatisfied().     // Check that the proper charset was set in the internal object     Exchange exchange = mock.getExchanges().get(0).     RemoteFile<?> file = (RemoteFile<?>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     assertNotNull(file).     assertEquals(SAMPLE_FILE_CHARSET, file.getCharset()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&charset=" + SAMPLE_FILE_CHARSET).routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&charset=" + SAMPLE_FILE_CHARSET).routeId("foo").noAutoStartup().to("mock:result").         }     }. }
false;private;0;5;;private void createSampleFile() throws IOException {     File file = new File(FTP_ROOT_DIR + "/" + SAMPLE_FILE_NAME).     FileUtils.write(file, SAMPLE_FILE_PAYLOAD, SAMPLE_FILE_CHARSET). }
