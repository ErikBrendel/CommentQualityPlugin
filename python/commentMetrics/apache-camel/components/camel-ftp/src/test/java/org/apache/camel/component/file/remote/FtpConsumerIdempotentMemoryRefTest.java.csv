commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/idempotent?password=admin&binary=false&idempotent=true&idempotentRepository=#myRepo&idempotentKey=${file:onlyname}&delete=true". }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     repo = new MemoryIdempotentRepository().     repo.setCacheSize(5).     jndi.bind("myRepo", repo).     return jndi. }
false;public;0;38;;@Test public void testIdempotent() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(5).create().     getMockEndpoint("mock:result").expectedMessageCount(5).     sendFile(getFtpUrl(), "Hello A", "a.txt").     sendFile(getFtpUrl(), "Hello B", "b.txt").     sendFile(getFtpUrl(), "Hello C", "c.txt").     sendFile(getFtpUrl(), "Hello D", "d.txt").     sendFile(getFtpUrl(), "Hello E", "e.txt").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     assertEquals(5, repo.getCache().size()).     assertTrue(repo.contains("a.txt")).     assertTrue(repo.contains("b.txt")).     assertTrue(repo.contains("c.txt")).     assertTrue(repo.contains("d.txt")).     assertTrue(repo.contains("e.txt")).     resetMocks().     notify = new NotifyBuilder(context).whenDone(2).create().     getMockEndpoint("mock:result").expectedMessageCount(2).     // duplicate     sendFile(getFtpUrl(), "Hello A", "a.txt").     sendFile(getFtpUrl(), "Hello B", "b.txt").     // new files     sendFile(getFtpUrl(), "Hello F", "f.txt").     sendFile(getFtpUrl(), "Hello G", "g.txt").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     assertEquals(5, repo.getCache().size()). }
false;public;0;5;;public void configure() throws Exception {     from(getFtpUrl()).to("log:result").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("log:result").to("mock:result").         }     }. }
