commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     myStrategy = new MyStrategy().     jndi.bind("myStrategy", myStrategy).     return jndi. }
false;public;0;15;;@Test public void testSftpConsume() throws Exception {     if (!canTest()) {         return.     }     // create file using regular file     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR, "Hello World", Exchange.FILE_NAME, "hello.txt").     String out = consumer.receiveBody("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&processStrategy=#myStrategy", 5000, String.class).     assertNotNull(out).     // Apache SSHD appends \u0000 at last byte in retrieved file     assertTrue(out.startsWith("Hello World")).     assertEquals("CustomProcessStrategy should have been invoked 1 times", 1, myStrategy.getInvoked()). }
false;public;2;4;;@Override public void prepareOnStartup(GenericFileOperations operations, GenericFileEndpoint endpoint) throws Exception { // noop }
false;public;4;4;;@Override public boolean begin(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {     return true. }
false;public;4;4;;@Override public void abort(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception { // noop }
false;public;4;4;;@Override public void commit(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {     invoked++. }
false;public;4;4;;@Override public void rollback(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception { // noop }
false;;0;3;;int getInvoked() {     return invoked. }
