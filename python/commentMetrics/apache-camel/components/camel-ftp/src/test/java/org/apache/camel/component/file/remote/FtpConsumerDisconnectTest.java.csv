commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/done?password=admin&disconnect=true&delay=5000". }
false;public;0;12;;@Override @Before public void setUp() throws Exception {     super.setUp().     // ask the singleton FtpEndpoint to make use of a custom FTPClient     // so that we can hold a reference on it inside the test below     FtpEndpoint<?> endpoint = context.getEndpoint(getFtpUrl(), FtpEndpoint.class).     endpoint.setFtpClient(new FTPClient()).     sendFile(getFtpUrl(), "Hello World", "claus.txt"). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
false;public;0;14;;@Test public void testDisconnectOnDone() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     assertMockEndpointsSatisfied().     // give time for ftp consumer to disconnect, delay is 5000 ms which is long     // enough to avoid a second poll cycle before we are done with the asserts     // below inside the main thread     Thread.sleep(2000).     FtpEndpoint<?> endpoint = context.getEndpoint(getFtpUrl(), FtpEndpoint.class).     assertFalse("The FTPClient should be already disconnected", endpoint.getFtpClient().isConnected()).     assertTrue("The FtpEndpoint should be configured to disconnect", endpoint.isDisconnect()). }
