commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testSftpSimpleConsumeRecursive() throws Exception {     if (!canTest()) {         return.     }     // create files using regular file     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR, "A", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR + "/foo", "B", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR + "/bar", "C", Exchange.FILE_NAME, "c.txt").     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR + "/bar/cake", "D", Exchange.FILE_NAME, "d.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(4).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delay=10s&disconnect=true&recursive=true").routeId("foo").noAutoStartup().to("log:result", "mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delay=10s&disconnect=true&recursive=true").routeId("foo").noAutoStartup().to("log:result", "mock:result").         }     }. }
