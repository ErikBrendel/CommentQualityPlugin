commented;modifiers;parameterAmount;loc;comment;code
true;private;0;4;// must user "consumer." prefix on the parameters to the file component ;// must user "consumer." prefix on the parameters to the file component private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/incoming?password=admin&binary=true" + "&consumer.delay=2000&recursive=true". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;19;;@Test public void testFtpRoute() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(2).     resultEndpoint.assertIsSatisfied().     Exchange ex = resultEndpoint.getExchanges().get(0).     byte[] bytes = ex.getIn().getBody(byte[].class).     assertTrue("Logo size wrong", bytes.length > 10000).     // assert the file     File file = new File("target/ftptest/logo.jpeg").     assertTrue(" The binary file should exists", file.exists()).     assertTrue("Logo size wrong", file.length() > 10000).     // assert the file     file = new File("target/ftptest/a/logo1.jpeg").     assertTrue("The binary file should exists", file.exists()).     assertTrue("Logo size wrong", file.length() > 10000). }
false;private;0;25;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     String ftpUrl = "ftp://admin@localhost:" + getPort() + "/incoming?password=admin&binary=true" + "&consumer.delay=2000&recursive=false".     Endpoint endpoint = context.getEndpoint(ftpUrl).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody(IOConverter.toFile("src/test/data/ftpbinarytest/logo.jpeg")).     exchange.getIn().setHeader(Exchange.FILE_NAME, "logo.jpeg").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop().     ftpUrl = "ftp://admin@localhost:" + getPort() + "/incoming/a?password=admin&binary=true" + "&consumer.delay=2000&recursive=false".     endpoint = context.getEndpoint(ftpUrl).     exchange = endpoint.createExchange().     exchange.getIn().setBody(IOConverter.toFile("src/test/data/ftpbinarytest/logo1.jpeg")).     exchange.getIn().setHeader(Exchange.FILE_NAME, "logo1.jpeg").     producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;4;;public void configure() throws Exception {     String fileUrl = "file:target/ftptest/?noop=true".     from(getFtpUrl()).to(fileUrl, "mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             String fileUrl = "file:target/ftptest/?noop=true".             from(getFtpUrl()).to(fileUrl, "mock:result").         }     }. }
