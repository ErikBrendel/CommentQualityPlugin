commented;modifiers;parameterAmount;loc;comment;code
false;private;1;5;;private String getFtpUrl(boolean in) {     return "ftps://admin@localhost:" + getPort() + "/tmp2/camel?password=admin&consumer.initialDelay=2000&ftpClient=#ftpsClient" + (in ? "In" : "") + "&disableSecureDataChannelDefaults=true&delete=true". }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("ftpsClient", new FTPSClient("SSL")).     jndi.bind("ftpsClientIn", new FTPSClient("SSL")).     return jndi. }
false;public;0;12;;@Test public void testFromFileToFtp() throws Exception {     // some platforms cannot test SSL     if (!canTest) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("file:src/main/data?noop=true").log("Putting ${file:name}").to(getFtpUrl(false)).     from(getFtpUrl(true)).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file:src/main/data?noop=true").log("Putting ${file:name}").to(getFtpUrl(false)).             from(getFtpUrl(true)).to("mock:result").         }     }. }
