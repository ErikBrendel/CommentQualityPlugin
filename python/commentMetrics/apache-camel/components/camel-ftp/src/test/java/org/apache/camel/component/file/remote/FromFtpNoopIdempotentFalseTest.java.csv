commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/noop?password=admin&binary=false&noop=true&idempotent=false". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;12;;@Test public void testNoop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // we should be able to poll the same file multiple times     mock.expectedMinimumMessageCount(2).     mock.assertIsSatisfied().     // assert the file is still there     File file = new File(FTP_ROOT_DIR + "/noop/hello.txt").     assertTrue("The file should exists", file.exists()). }
false;private;0;12;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("log:result", "mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("log:result", "mock:result").         }     }. }
