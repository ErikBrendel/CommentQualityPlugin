commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/incoming/?password=admin" + "&binary=true&useFixedDelay=false&recursive=false&delay=5000". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;20;;@Test public void testFtpRoute() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(2).     resultEndpoint.assertIsSatisfied().     Exchange ex = resultEndpoint.getExchanges().get(0).     byte[] bytes = ex.getIn().getBody(byte[].class).     assertTrue("Logo size wrong", bytes.length > 10000).     // assert the file     File file = new File("target/ftptest/logo1.jpeg").     assertTrue("The binary file should exists", file.exists()).     assertTrue("Logo size wrong", file.length() > 10000).     // assert the file     file = new File("target/ftptest/logo.jpeg").     assertTrue(" The binary file should exists", file.exists()).     assertTrue("Logo size wrong", file.length() > 10000). }
false;private;0;6;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     template.sendBodyAndHeader(getFtpUrl(), IOConverter.toFile("src/test/data/ftpbinarytest/logo.jpeg"), Exchange.FILE_NAME, "logo.jpeg").     template.sendBodyAndHeader(getFtpUrl(), IOConverter.toFile("src/test/data/ftpbinarytest/logo1.jpeg"), Exchange.FILE_NAME, "logo1.jpeg"). }
false;public;0;5;;public void configure() throws Exception {     String fileUrl = "file:target/ftptest/?noop=true".     from(getFtpUrl()).to(fileUrl, "mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             String fileUrl = "file:target/ftptest/?noop=true".             from(getFtpUrl()).to(fileUrl, "mock:result").         }     }. }
