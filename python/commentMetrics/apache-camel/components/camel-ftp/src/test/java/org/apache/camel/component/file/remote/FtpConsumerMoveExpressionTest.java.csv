commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/filelanguage?password=admin&consumer.delay=5000". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     deleteDirectory("target/filelanguage"). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myguidgenerator", new MyGuidGenerator()).     return jndi. }
false;public;0;16;;@Test public void testMoveUsingExpression() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Reports").     sendFile(getFtpUrl(), "Reports", "report2.txt").     assertMockEndpointsSatisfied().     // give time for consumer to rename file     Thread.sleep(1000).     String now = new SimpleDateFormat("yyyyMMdd").format(new Date()).     File file = new File(FTP_ROOT_DIR + "/filelanguage/backup/" + now + "/123-report2.bak").     assertTrue("File should have been renamed", file.exists()). }
false;public;0;4;;public void configure() throws Exception {     from(getFtpUrl() + "&move=backup/${date:now:yyyyMMdd}/${bean:myguidgenerator}" + "-${file:name.noext}.bak").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl() + "&move=backup/${date:now:yyyyMMdd}/${bean:myguidgenerator}" + "-${file:name.noext}.bak").to("mock:result").         }     }. }
false;public;0;3;;public String guid() {     return "123". }
