commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;@Test public void testSftpSimpleConsume() throws Exception {     if (!canTest()) {         return.     }     String expected = "Hello World".     // create file using regular file     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR, expected, Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.FILE_NAME, "hello.txt").     mock.expectedBodiesReceived(expected).     ProducerTemplate triggerTemplate = context.createProducerTemplate().     triggerTemplate.sendBody("vm:trigger", "").     assertMockEndpointsSatisfied().     long startFileDeletionCheckTime = System.currentTimeMillis().     boolean fileExists = true.     while (System.currentTimeMillis() - startFileDeletionCheckTime < 3000) {         // wait up to 3000ms for file to be deleted         File file = new File(FTP_ROOT_DIR + "/hello.txt").         fileExists = file.exists().         if (fileExists) {             log.info("Will check that file has been deleted again in 200ms").             Thread.sleep(200).         }     }     assertFalse("The file should have been deleted", fileExists). }
false;public;0;7;;@Override public void configure() throws Exception {     from("vm:trigger").pollEnrich("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delay=10s&disconnect=true&delete=true").routeId("foo").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:trigger").pollEnrich("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delay=10s&disconnect=true&delete=true").routeId("foo").to("mock:result").         }     }. }
