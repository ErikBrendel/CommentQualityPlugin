commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testFtpSimpleConsumeAbsolute() throws Exception {     if (!canTest()) {         return.     }     String expected = "Hello World".     // create file using regular file     // FTP Server does not support absolute path, so lets simulate it     String path = FTP_ROOT_DIR + "/tmp/mytemp".     template.sendBodyAndHeader("file:" + path, expected, Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.FILE_NAME, "hello.txt").     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     GenericFile<?> remoteFile = (GenericFile<?>) mock.getExchanges().get(0).getIn().getBody().     assertTrue(remoteFile.getBody() instanceof InputStream). }
false;public;0;6;;@Override public void configure() throws Exception {     from("ftp://localhost:" + getPort() + "/tmp/mytemp?username=admin&password=admin&delay=10s&disconnect=true&streamDownload=true").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("ftp://localhost:" + getPort() + "/tmp/mytemp?username=admin&password=admin&delay=10s&disconnect=true&streamDownload=true").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
