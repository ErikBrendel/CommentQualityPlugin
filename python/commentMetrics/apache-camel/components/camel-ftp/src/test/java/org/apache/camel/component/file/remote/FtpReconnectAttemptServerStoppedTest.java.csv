commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/reconnect?password=admin&maximumReconnectAttempts=2&reconnectDelay=500&delete=true". }
false;public;0;27;;@Test public void testFromFileToFtp() throws Exception {     // suspect serve so we cannot connect     ftpServer.suspend().     // put a file in the folder (do not use ftp as we then will connect)     template.sendBodyAndHeader("file:" + FTP_ROOT_DIR + "/reconnect", "Hello World", Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     // let it run a little     Thread.sleep(3000).     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedMessageCount(1).     // resume the server so we can connect     ftpServer.resume().     // wait a bit so that the server resumes properly     Thread.sleep(3000).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
