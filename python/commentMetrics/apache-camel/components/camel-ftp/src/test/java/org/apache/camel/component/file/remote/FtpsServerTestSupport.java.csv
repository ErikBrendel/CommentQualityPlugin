commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;19;;@Override protected FtpServerFactory createFtpServerFactory() throws Exception {     try {         return doCreateFtpServerFactory().     } catch (Exception e) {         // ignore if algorithm is not on the OS         NoSuchAlgorithmException nsae = ObjectHelper.getException(NoSuchAlgorithmException.class, e).         if (nsae != null) {             String name = System.getProperty("os.name").             String message = nsae.getMessage().             log.warn("SunX509 is not avail on this platform [{}] Testing is skipped! Real cause: {}", name, message).             return null.         } else {             // some other error then throw it so the test can fail             throw e.         }     } }
false;protected;0;13;;protected FtpServerFactory doCreateFtpServerFactory() throws Exception {     assertTrue(FTPSERVER_KEYSTORE.exists()).     FtpServerFactory serverFactory = super.createFtpServerFactory().     ListenerFactory listenerFactory = new ListenerFactory(serverFactory.getListener(DEFAULT_LISTENER)).     listenerFactory.setImplicitSsl(useImplicit()).     listenerFactory.setSslConfiguration(createSslConfiguration().createSslConfiguration()).     serverFactory.addListener(DEFAULT_LISTENER, listenerFactory.createListener()).     return serverFactory. }
false;protected;0;24;;protected SslConfigurationFactory createSslConfiguration() {     // comment in, if you have trouble with SSL     // System.setProperty("javax.net.debug", "all").     SslConfigurationFactory sslConfigFactory = new SslConfigurationFactory().     sslConfigFactory.setSslProtocol(getAuthValue()).     sslConfigFactory.setKeystoreFile(FTPSERVER_KEYSTORE).     sslConfigFactory.setKeystoreType("JKS").     sslConfigFactory.setKeystoreAlgorithm("SunX509").     sslConfigFactory.setKeystorePassword(FTPSERVER_KEYSTORE_PASSWORD).     sslConfigFactory.setKeyPassword(FTPSERVER_KEYSTORE_PASSWORD).     sslConfigFactory.setClientAuthentication(getClientAuth()).     if (Boolean.valueOf(getClientAuth())) {         sslConfigFactory.setTruststoreFile(FTPSERVER_KEYSTORE).         sslConfigFactory.setTruststoreType("JKS").         sslConfigFactory.setTruststoreAlgorithm("SunX509").         sslConfigFactory.setTruststorePassword(FTPSERVER_KEYSTORE_PASSWORD).     }     return sslConfigFactory. }
true;protected,abstract;0;1;/**  * Set what client authentication level to use, supported values are "yes"  * or "true" for required authentication, "want" for wanted authentication  * and "false" or "none" for no authentication. Defaults to "none".  *  * @return clientAuthReqd  */ ;/**  * Set what client authentication level to use, supported values are "yes"  * or "true" for required authentication, "want" for wanted authentication  * and "false" or "none" for no authentication. Defaults to "none".  *  * @return clientAuthReqd  */ protected abstract String getClientAuth().
true;protected,abstract;0;1;/**  * Should listeners created by this factory automatically be in SSL mode  * automatically or must the client explicitly request to use SSL  */ ;/**  * Should listeners created by this factory automatically be in SSL mode  * automatically or must the client explicitly request to use SSL  */ protected abstract boolean useImplicit().
true;protected,abstract;0;1;/**  * Set the SSL protocol used for this channel. Supported values are "SSL"  * and "TLS".  */ ;/**  * Set the SSL protocol used for this channel. Supported values are "SSL"  * and "TLS".  */ protected abstract String getAuthValue().
