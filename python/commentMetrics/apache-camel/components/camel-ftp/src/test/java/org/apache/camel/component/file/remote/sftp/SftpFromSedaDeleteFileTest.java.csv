commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;protected String getFtpUrl() {     return "sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&knownHostsFile=./src/test/resources/known_hosts&privateKeyFile=./src/test/resources/id_rsa" + "&privateKeyPassphrase=secret&delay=500&disconnect=false&delete=true". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     createSampleFile(). }
false;public;0;14;;@Test public void testPollFileAndShouldBeDeleted() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World this file will be deleted").     mock.assertIsSatisfied().     Thread.sleep(500).     // assert the file is deleted     File file = new File(FTP_ROOT_DIR + "/hello.txt").     assertFalse("The file should have been deleted", file.exists()). }
false;private;0;5;;private void createSampleFile() throws IOException {     File file = new File(FTP_ROOT_DIR + "/" + "foo.txt").     FileUtils.write(file, "Hello World this file will be deleted"). }
false;public;0;9;;public void configure() throws Exception {     from(getFtpUrl()).to("seda:foo").     from("seda:foo").delay(750).log("${body}").delay(750).to("mock:result"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("seda:foo").             from("seda:foo").delay(750).log("${body}").delay(750).to("mock:result").         }     }. }
