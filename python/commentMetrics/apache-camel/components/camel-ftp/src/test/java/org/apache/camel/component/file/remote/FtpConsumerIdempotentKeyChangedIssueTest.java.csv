commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/idempotent?password=admin&readLock=changed" + "&idempotentKey=${file:onlyname}-${file:size}-${date:file:yyyyMMddHHmmss}". }
false;public;0;18;;@Test public void testIdempotent() throws Exception {     NotifyBuilder oneExchangeDone = new NotifyBuilder(context).whenDone(1).create().     getMockEndpoint("mock:file").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader(endpoint, "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matches(5, TimeUnit.SECONDS).     resetMocks().     getMockEndpoint("mock:file").expectedBodiesReceived("Hello World Again").     template.sendBodyAndHeader(endpoint, "Hello World Again", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;8;;public void configure() throws Exception {     endpoint = endpoint(getFtpUrl()).     from(endpoint).convertBodyTo(String.class).to("log:file").to("mock:file"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             endpoint = endpoint(getFtpUrl()).             from(endpoint).convertBodyTo(String.class).to("log:file").to("mock:file").         }     }. }
