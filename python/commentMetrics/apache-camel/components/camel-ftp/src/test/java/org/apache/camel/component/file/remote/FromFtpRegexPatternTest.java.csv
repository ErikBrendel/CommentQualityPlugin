commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/regexp?password=admin&include=report.*". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;7;;@Test public void testFtpRegexPattern() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.expectedBodiesReceived("Reports", "Reports").     mock.assertIsSatisfied(). }
false;private;0;9;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating files on the server that we want to unit     // test that we can pool and store as a local file     String ftpUrl = "ftp://admin@localhost:" + getPort() + "/regexp/?password=admin".     template.sendBodyAndHeader(ftpUrl, "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader(ftpUrl, "Reports", Exchange.FILE_NAME, "report1.txt").     template.sendBodyAndHeader(ftpUrl, "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader(ftpUrl, "Reports", Exchange.FILE_NAME, "report2.txt"). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
