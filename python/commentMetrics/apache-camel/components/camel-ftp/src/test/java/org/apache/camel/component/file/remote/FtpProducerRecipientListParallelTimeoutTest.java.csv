commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin:admin@127.0.0.2:" + (getPort() - 1) + "/timeout". }
false;public;0;10;;@Test public void testRecipientListTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // B will timeout so we only get A and C     mock.expectedBodiesReceived("AC").     template.sendBodyAndHeader("direct:start", "Hello", "slip", "direct:a," + getFtpUrl() + ",direct:c").     assertMockEndpointsSatisfied(). }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
false;public;0;24;;@Override public void configure() throws Exception {     context.getShutdownStrategy().setTimeout(60).     from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String body = oldExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).             return oldExchange.         }     }).parallelProcessing().timeout(2000).to("mock:result").     from("direct:a").setBody(constant("A")).     from("direct:c").delay(500).setBody(constant("C")). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getShutdownStrategy().setTimeout(60).             from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String body = oldExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).                     return oldExchange.                 }             }).parallelProcessing().timeout(2000).to("mock:result").             from("direct:a").setBody(constant("A")).             from("direct:c").delay(500).setBody(constant("C")).         }     }. }
