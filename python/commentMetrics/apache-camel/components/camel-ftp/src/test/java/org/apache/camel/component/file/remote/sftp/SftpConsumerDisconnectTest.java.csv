commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testConsumeDelete() throws Exception {     if (!canTest()) {         return.     }     // prepare sample file to be consumed by SFTP consumer     createSampleFile(SAMPLE_FILE_NAME_1).     // Prepare expectations     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(SAMPLE_FILE_PAYLOAD).     context.getRouteController().startRoute("foo").     // Check that expectations are satisfied     assertMockEndpointsSatisfied().     Thread.sleep(250).     // File is deleted     File deletedFile = new File(FTP_ROOT_DIR + "/" + SAMPLE_FILE_NAME_1).     assertFalse("File should have been deleted: " + deletedFile, deletedFile.exists()). }
false;public;0;24;;@Test public void testConsumeMove() throws Exception {     if (!canTest()) {         return.     }     // moved file after its processed     String movedFile = FTP_ROOT_DIR + "/.camel/" + SAMPLE_FILE_NAME_2.     // prepare sample file to be consumed by SFTP consumer     createSampleFile(SAMPLE_FILE_NAME_2).     // Prepare expectations     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(SAMPLE_FILE_PAYLOAD).     // use mock to assert that the file will be moved there eventually     mock.expectedFileExists(movedFile).     context.getRouteController().startRoute("bar").     // Check that expectations are satisfied     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     // disconnect all Sessions from     disconnectAllSessions(). // the SFTP server }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     // disconnect all Sessions from the SFTP server     disconnectAllSessions(). }
false;public;0;21;;@Override public void configure() throws Exception {     from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delete=true").routeId("foo").noAutoStartup().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // disconnect all Sessions from             disconnectAllSessions().         // the SFTP server         }     }).to("mock:result").     from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&noop=false&move=.camel").routeId("bar").noAutoStartup().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // disconnect all Sessions from the SFTP server             disconnectAllSessions().         }     }).to("mock:result"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&delete=true").routeId("foo").noAutoStartup().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // disconnect all Sessions from                     disconnectAllSessions().                 // the SFTP server                 }             }).to("mock:result").             from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&noop=false&move=.camel").routeId("bar").noAutoStartup().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // disconnect all Sessions from the SFTP server                     disconnectAllSessions().                 }             }).to("mock:result").         }     }. }
false;private;1;5;;private void createSampleFile(String fileName) throws IOException {     File file = new File(FTP_ROOT_DIR + "/" + fileName).     FileUtils.write(file, SAMPLE_FILE_PAYLOAD, SAMPLE_FILE_CHARSET). }
