commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/target/filename-consumer?password=admin&recursive=true&sortBy=file:name". }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     sendFile(getFtpUrl(), "Hello World", "target/filename-consumer-hello.txt").     sendFile(getFtpUrl(), "Bye World", "target/filename-consumer-bye.txt"). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
false;public;0;16;;@Test public void testValidFilenameOnExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     // should have file name header set     mock.allMessages().header(Exchange.FILE_NAME).isNotNull().     assertMockEndpointsSatisfied().     // give time for ftp consumer to disconnect     Thread.sleep(2000).     // and expect name to contain target/filename-consumer-XXX.txt     assertDirectoryEquals("target/filename-consumer-bye.txt", mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_NAME, String.class)).     assertDirectoryEquals("target/filename-consumer-hello.txt", mock.getReceivedExchanges().get(1).getIn().getHeader(Exchange.FILE_NAME, String.class)). }
