commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/includename?password=admin" + "&include=report.*&exclude=.*xml". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;7;;@Test public void testIncludeAndExludePreAndPostfixes() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Report 1").     mock.assertIsSatisfied(). }
false;private;0;8;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating files on the server that we want to unit     // test that we can pool and store as a local file     sendFile(getFtpUrl(), "Hello World", "hello.xml").     sendFile(getFtpUrl(), "Report 1", "report1.txt").     sendFile(getFtpUrl(), "Bye World", "secret.txt").     sendFile(getFtpUrl(), "Report 2", "report2.xml"). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
