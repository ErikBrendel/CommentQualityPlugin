commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testPollEnrich() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("seda:start", "Hello World").     assertMockEndpointsSatisfied().     Exchange out = getMockEndpoint("mock:dead").getExchanges().get(0).     assertNotNull(out).     Exception caught = out.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertNotNull("Should store caught exception", caught). }
false;public;0;12;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")).     from("seda:start").pollEnrich(uri, 60000, new MyAggregationStrategy(), true).to("mock:result"). }
false;protected;0;17;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead")).             from("seda:start").pollEnrich(uri, 60000, new MyAggregationStrategy(), true).to("mock:result").         }     }. }
false;public;2;16;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (newExchange != null) {         copyResultsPreservePattern(oldExchange, newExchange).     } else {         // if no newExchange then there was no message from the external resource         // and therefore we should set an empty body to indicate this fact         // but keep headers/attachments as we want to propagate those         oldExchange.getIn().setBody(null).         oldExchange.setOut(null).     }     // in case of exception we are bridged then we want to perform redeliveries etc.     // so we need to turn of exhausted redelivery     oldExchange.removeProperties(Exchange.REDELIVERY_EXHAUSTED).     return oldExchange. }
