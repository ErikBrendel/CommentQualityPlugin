commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/reply?password=admin". }
false;public;0;11;;@Test public void testReplyCodeAndString() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.expectedHeaderReceived(FtpConstants.FTP_REPLY_CODE, 226).     mock.expectedHeaderReceived(FtpConstants.FTP_REPLY_STRING, "226 Transfer complete.\r\n").     template.requestBodyAndHeader(getFtpUrl(), "Bye World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
