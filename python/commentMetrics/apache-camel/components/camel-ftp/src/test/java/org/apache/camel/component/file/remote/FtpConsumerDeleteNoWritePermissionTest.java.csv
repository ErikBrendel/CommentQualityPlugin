commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://dummy@localhost:" + getPort() + "/deletenoperm?password=foo" + "&delete=true&consumer.delay=5000". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;15;;@Test public void testConsumerDeleteNoWritePermission() throws Exception {     PollingConsumer consumer = context.getEndpoint(getFtpUrl()).createPollingConsumer().     consumer.start().     Exchange out = consumer.receive(3000).     assertNotNull("Should get the file", out).     try {         // give consumer time to try to delete the file         Thread.sleep(1000).         consumer.stop().     } catch (GenericFileOperationFailedException fofe) {     // expected, ignore     } }
false;private;0;6;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating files on the server that we want to unit     // test that we can pool and store as a local file     String ftpUrl = "ftp://admin@localhost:" + getPort() + "/deletenoperm/?password=admin".     template.sendBodyAndHeader(ftpUrl, "Hello World", Exchange.FILE_NAME, "hello.txt"). }
