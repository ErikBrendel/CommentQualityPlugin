commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/upload/jail?binary=false&password=admin&tempPrefix=.uploading". }
false;public;0;15;;@Test public void testWriteOutsideStartingDirectory() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBodyAndHeader("direct:start", "Hello World", Exchange.FILE_NAME, "hello.txt").         fail("Should have thrown exception").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertTrue(iae.getMessage().contains("as the filename is jailed to the starting directory")).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testWriteInsideStartingDirectory() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Bye World", Exchange.FILE_NAME, "jail/bye.txt").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").setHeader(Exchange.FILE_NAME, simple("../${file:name}")).to(getFtpUrl()).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader(Exchange.FILE_NAME, simple("../${file:name}")).to(getFtpUrl()).to("mock:result").         }     }. }
