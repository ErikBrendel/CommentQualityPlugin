commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/deletefile?password=admin&binary=false&delete=true". }
false;protected;0;4;;protected String getFtpUrlInvalid() {     // use invalid starting directory and do not allow creating it so we force the poll to fail     return "ftp://admin@localhost:" + getPort() + "/unknown?password=admin&binary=false&delete=true&autoCreate=false". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;10;;@Test public void testConsumerTemplateRollback() throws Exception {     try {         consumer.receiveBody(getFtpUrlInvalid(), 2000, String.class).         fail("Should fail and rollback").     } catch (Exception e) {         GenericFileOperationFailedException ge = assertIsInstanceOf(GenericFileOperationFailedException.class, e).         assertEquals(550, ge.getCode()).     } }
false;private;0;16;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World this file will be deleted").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop().     // assert file is created     File file = new File(FTP_ROOT_DIR + "/deletefile/hello.txt").     assertTrue("The file should exists", file.exists()). }
