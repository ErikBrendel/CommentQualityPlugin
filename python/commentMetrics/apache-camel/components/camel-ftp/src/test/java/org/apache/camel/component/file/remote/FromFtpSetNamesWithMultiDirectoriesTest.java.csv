commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/incoming?password=admin&binary=true&recursive=true&initialDelay=0&delay=100". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/ftpsetnamestest").     super.setUp(). }
false;public;0;27;;@Test public void testFtpRoute() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(2).create().     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(2).     prepareFtpServer().     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     Exchange ex = resultEndpoint.getExchanges().get(0).     byte[] bytes = ex.getIn().getBody(byte[].class).     assertTrue("Logo size wrong", bytes.length > 10000).     // assert the file     File file = new File("target/ftpsetnamestest/data1/logo1.jpeg").     assertTrue("The binary file should exists", file.exists()).     assertTrue("Logo size wrong", file.length() > 10000).     // assert the file     file = new File("target/ftpsetnamestest/data2/logo2.png").     assertTrue(" The binary file should exists", file.exists()).     assertTrue("Logo size wrong", file.length() > 50000). }
false;private;0;23;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     String ftpUrl = "ftp://admin@localhost:" + getPort() + "/incoming/data1/?password=admin&binary=true".     Endpoint endpoint = context.getEndpoint(ftpUrl).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody(IOConverter.toFile("src/test/data/ftpbinarytest/logo1.jpeg")).     exchange.getIn().setHeader(Exchange.FILE_NAME, "logo1.jpeg").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop().     ftpUrl = "ftp://admin@localhost:" + getPort() + "/incoming/data2/?password=admin&binary=true".     endpoint = context.getEndpoint(ftpUrl).     exchange = endpoint.createExchange().     exchange.getIn().setBody(IOConverter.toFile("src/test/data/ftpbinarytest/logo2.png")).     exchange.getIn().setHeader(Exchange.FILE_NAME, "logo2.png").     producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;5;;public void configure() throws Exception {     from(getFtpUrl()).routeId("foo").noAutoStartup().to("file:target/ftpsetnamestest", "mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).routeId("foo").noAutoStartup().to("file:target/ftpsetnamestest", "mock:result").         }     }. }
