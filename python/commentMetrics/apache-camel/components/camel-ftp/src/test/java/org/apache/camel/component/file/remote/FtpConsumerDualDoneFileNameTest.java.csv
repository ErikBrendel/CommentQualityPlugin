commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/done?password=admin&initialDelay=0&delay=100&stepwise=false". }
false;public;0;9;;@Test public void testTwoDoneFile() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     template.sendBodyAndHeader(getFtpUrl() + "&doneFileName=${file:name}.ready", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader(getFtpUrl() + "&doneFileName=${file:name}.ready", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testOneDoneFileMissing() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader(getFtpUrl() + "&doneFileName=${file:name}.ready", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader(getFtpUrl(), "Bye World", Exchange.FILE_NAME, "bye.txt").     // give chance to poll 2nd file but it lacks the done file     Thread.sleep(1000).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from(getFtpUrl() + "&doneFileName=${file:name}.ready").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl() + "&doneFileName=${file:name}.ready").convertBodyTo(String.class).to("mock:result").         }     }. }
