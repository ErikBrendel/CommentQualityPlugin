commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/async/?password=admin&delete=true". }
false;public;0;24;;@Test public void testFtpAsyncProcess() throws Exception {     template.sendBodyAndHeader("file:" + FTP_ROOT_DIR + "/async", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:" + FTP_ROOT_DIR + "/async", "Bye World", Exchange.FILE_NAME, "bye.txt").     getMockEndpoint("mock:result").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedHeaderReceived("foo", 123).     // the log file should log that all the ftp client work is done in the same thread (fully synchronous)     // as the ftp client is not thread safe and must process fully synchronous     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     // give time for files to be deleted on ftp server     Thread.sleep(1000).     File hello = new File(FTP_ROOT_DIR + "/async/hello.txt").     assertFalse("File should not exist " + hello, hello.exists()).     File bye = new File(FTP_ROOT_DIR + "/async/bye.txt").     assertFalse("File should not exist " + bye, bye.exists()). }
false;public;0;5;;public void configure() throws Exception {     from(getFtpUrl()).routeId("foo").noAutoStartup().process(new MyAsyncProcessor()).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).routeId("foo").noAutoStartup().process(new MyAsyncProcessor()).to("mock:result").         }     }. }
false;public;0;11;;@Override public void run() {     try {         Thread.sleep(1000).     } catch (InterruptedException e) {     // ignore     }     exchange.getIn().setHeader("foo", 123).     callback.done(false). }
false;public;2;18;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     executor.submit(new Runnable() {          @Override         public void run() {             try {                 Thread.sleep(1000).             } catch (InterruptedException e) {             // ignore             }             exchange.getIn().setHeader("foo", 123).             callback.done(false).         }     }).     return false. }
