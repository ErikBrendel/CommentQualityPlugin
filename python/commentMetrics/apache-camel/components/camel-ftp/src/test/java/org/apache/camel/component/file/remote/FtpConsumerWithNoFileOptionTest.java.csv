commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "?password=admin&consumer.delay=5000". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;14;;@Test public void testWithNoFileInOption() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     RemoteFile<?> file = (RemoteFile<?>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     assertNotNull(file).     assertEquals("hello.txt", file.getAbsoluteFilePath()).     assertEquals("hello.txt", file.getRelativeFilePath()).     assertEquals("hello.txt", file.getFileName()). }
false;private;0;3;;private void prepareFtpServer() throws Exception {     sendFile(getFtpUrl(), "Hello World", "hello.txt"). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
