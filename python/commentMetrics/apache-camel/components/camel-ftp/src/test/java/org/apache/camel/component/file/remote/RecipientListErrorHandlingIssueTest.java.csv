commented;modifiers;parameterAmount;loc;comment;code
false;private;0;5;;private String getFtpUrl() {     // can test that the error handler kick in and we know which endpoint failed     return "ftp://admin@localhost:" + getPort() + "/recipientlist?password=denied". }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String target = exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT, String.class).     exchange.getIn().setHeader("target", target). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:error").     interceptSendToEndpoint("(ftp|direct):.*").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String target = exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT, String.class).             exchange.getIn().setHeader("target", target).         }     }).     from("direct:start").recipientList(header("foo")).     from("direct:foo").setBody(constant("Bye World")).to("mock:foo"). }
false;public;0;35;;@Test public void testUsingInterceptor() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:error").             interceptSendToEndpoint("(ftp|direct):.*").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String target = exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT, String.class).                     exchange.getIn().setHeader("target", target).                 }             }).             from("direct:start").recipientList(header("foo")).             from("direct:foo").setBody(constant("Bye World")).to("mock:foo").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").message(0).header("target").isEqualTo(getFtpUrl()).     String foo = "direct:foo," + getFtpUrl().     Map<String, Object> headers = new HashMap<>().     headers.put("foo", foo).     headers.put(Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeaders("direct:start", "Hello World", headers).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:error").     from("direct:start").recipientList(header("foo")).     from("direct:foo").setBody(constant("Bye World")).to("mock:foo"). }
false;public;0;29;;@Test public void testUsingExistingHeaders() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:error").             from("direct:start").recipientList(header("foo")).             from("direct:foo").setBody(constant("Bye World")).to("mock:foo").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:foo").message(0).header(Exchange.TO_ENDPOINT).isEqualTo("mock://foo").     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").message(0).header(Exchange.FAILURE_ENDPOINT).isEqualTo(getFtpUrl()).     String foo = "direct:foo," + getFtpUrl().     Map<String, Object> headers = new HashMap<>().     headers.put("foo", foo).     headers.put(Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeaders("direct:start", "Hello World", headers).     assertMockEndpointsSatisfied(). }
