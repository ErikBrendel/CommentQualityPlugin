commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/filelanguage?password=admin". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     deleteDirectory("target/filelanguage"). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myguidgenerator", new MyGuidGenerator()).     return jndi. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Test public void testProduceBeanByExpression() throws Exception {     template.sendBody(getFtpUrl() + "&fileName=${bean:myguidgenerator}.bak", "Hello World").     assertFileExists(FTP_ROOT_DIR + "/filelanguage/123.bak"). }
false;public;0;6;;@Test public void testProduceBeanByHeader() throws Exception {     sendFile(getFtpUrl(), "Hello World", "${bean:myguidgenerator}.bak").     assertFileExists(FTP_ROOT_DIR + "/filelanguage/123.bak"). }
false;public;0;7;;@Test public void testProducerDateByHeader() throws Exception {     sendFile(getFtpUrl(), "Hello World", "myfile-${date:now:yyyyMMdd}.txt").     String date = new SimpleDateFormat("yyyyMMdd").format(new Date()).     assertFileExists(FTP_ROOT_DIR + "/filelanguage/myfile-" + date + ".txt"). }
false;public;0;7;;@Test public void testProducerDateByExpression() throws Exception {     template.sendBody(getFtpUrl() + "&fileName=myfile-${date:now:yyyyMMdd}.txt", "Hello World").     String date = new SimpleDateFormat("yyyyMMdd").format(new Date()).     assertFileExists(FTP_ROOT_DIR + "/filelanguage/myfile-" + date + ".txt"). }
false;public;0;11;;@Test public void testProducerComplexByExpression() throws Exception {     // need one extra subdirectory (=foo) to be able to start with .. in the fileName option     String url = "ftp://admin@localhost:" + getPort() + "/filelanguage/foo?password=admin&jailStartingDirectory=false".     String expression = "../filelanguageinbox/myfile-${bean:myguidgenerator.guid}-${date:now:yyyyMMdd}.txt".     template.sendBody(url + "&fileName=" + expression, "Hello World").     String date = new SimpleDateFormat("yyyyMMdd").format(new Date()).     assertFileExists(FTP_ROOT_DIR + "/filelanguage/filelanguageinbox/myfile-123-" + date + ".txt"). }
false;public;0;7;;@Test public void testProducerSimpleWithHeaderByExpression() throws Exception {     template.sendBodyAndHeader(getFtpUrl() + "&fileName=myfile-${in.header.foo}.txt", "Hello World", "foo", "abc").     assertFileExists(FTP_ROOT_DIR + "/filelanguage/myfile-abc.txt"). }
false;public;0;11;;@Test public void testProducerWithDateHeader() throws Exception {     Calendar cal = Calendar.getInstance().     cal.set(1974, Calendar.APRIL, 20).     Date date = cal.getTime().     template.sendBodyAndHeader(getFtpUrl() + "&fileName=mybirthday-${date:in.header.birthday:yyyyMMdd}.txt", "Hello World", "birthday", date).     assertFileExists(FTP_ROOT_DIR + "/filelanguage/mybirthday-19740420.txt"). }
false;public;0;3;;public String guid() {     return "123". }
