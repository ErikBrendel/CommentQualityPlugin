commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/myserver/?password=admin&localWorkDirectory=target/lwd&resumeDownload=true&binary=true". }
false;public;0;24;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/lwd").     deleteDirectory("target/out").     super.setUp().     // create file on FTP server to download     createDirectory(FTP_ROOT_DIR + "/myserver").     File temp = new File(FTP_ROOT_DIR + "/myserver", "hello.txt").     temp.createNewFile().     FileOutputStream fos = new FileOutputStream(temp).     fos.write("Hello\nWorld\nI was here".getBytes()).     fos.close().     // create in-progress file with partial download     createDirectory("target/lwd").     temp = new File("target/lwd/hello.txt.inprogress").     temp.createNewFile().     fos = new FileOutputStream(temp).     fos.write("Hello\n".getBytes()).     fos.close(). }
false;public;0;26;;@Test public void testResumeDownload() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello\nWorld\nI was here").     // start route     context.getRouteController().startRoute("myRoute").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     // and the out file should exists     File out = new File("target/out/hello.txt").     assertTrue("file should exists", out.exists()).     assertEquals("Hello\nWorld\nI was here", IOConverter.toString(out, null)).     // now the lwd file should be deleted     File local = new File("target/lwd/hello.txt").     assertFalse("Local work file should have been deleted", local.exists()).     // and so the in progress     File temp = new File("target/lwd/hello.txt.inprogress").     assertFalse("Local work file should have been deleted", temp.exists()). }
false;public;0;4;;public void configure() throws Exception {     from(getFtpUrl()).routeId("myRoute").noAutoStartup().to("mock:result", "file://target/out"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).routeId("myRoute").noAutoStartup().to("mock:result", "file://target/out").         }     }. }
