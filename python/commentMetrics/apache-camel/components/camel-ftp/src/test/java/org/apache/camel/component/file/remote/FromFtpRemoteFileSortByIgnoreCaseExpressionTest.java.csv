commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/sortbyignore?password=admin&consumer.delay=5000". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl() + "&sortBy=file:name").to("mock:result"). }
false;public;0;15;;@Test public void testSortFiles() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl() + "&sortBy=file:name").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello London", "Hello Copenhagen", "Hello Paris").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl() + "&sortBy=ignoreCase:file:name").to("mock:nocase"). }
false;public;0;15;;@Test public void testSortFilesNoCase() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl() + "&sortBy=ignoreCase:file:name").to("mock:nocase").         }     }).     context.start().     MockEndpoint nocase = getMockEndpoint("mock:nocase").     nocase.expectedBodiesReceived("Hello Copenhagen", "Hello London", "Hello Paris").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl() + "&sortBy=reverse:ignoreCase:file:name").to("mock:nocasereverse"). }
false;public;0;15;;@Test public void testSortFilesNoCaseReverse() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl() + "&sortBy=reverse:ignoreCase:file:name").to("mock:nocasereverse").         }     }).     context.start().     MockEndpoint nocasereverse = getMockEndpoint("mock:nocasereverse").     nocasereverse.expectedBodiesReceived("Hello Paris", "Hello London", "Hello Copenhagen").     assertMockEndpointsSatisfied(). }
false;private;0;7;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating files on the server that we want to unit     // test that we can pool     sendFile(getFtpUrl(), "Hello Paris", "report-3.dat").     sendFile(getFtpUrl(), "Hello London", "REPORT-2.txt").     sendFile(getFtpUrl(), "Hello Copenhagen", "Report-1.xml"). }
