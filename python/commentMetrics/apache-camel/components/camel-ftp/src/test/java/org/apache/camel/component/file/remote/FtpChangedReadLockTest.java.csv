commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/changed?password=admin&readLock=changed&readLockCheckInterval=1000&delete=true". }
false;public;0;17;;@Test public void testChangedReadLock() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/changed/out/slowfile.dat").     writeSlowFile().     assertMockEndpointsSatisfied().     String content = context.getTypeConverter().convertTo(String.class, new File("target/changed/out/slowfile.dat")).     String[] lines = content.split(LS).     assertEquals("There should be 20 lines in the file", 20, lines.length).     for (int i = 0. i < 20. i++) {         assertEquals("Line " + i, lines[i]).     } }
false;private;0;15;;private void writeSlowFile() throws Exception {     LOG.debug("Writing slow file...").     createDirectory(FTP_ROOT_DIR + "/changed").     FileOutputStream fos = new FileOutputStream(FTP_ROOT_DIR + "/changed/slowfile.dat", true).     for (int i = 0. i < 20. i++) {         fos.write(("Line " + i + LS).getBytes()).         LOG.debug("Writing line " + i).         Thread.sleep(200).     }     fos.flush().     fos.close().     LOG.debug("Writing slow file DONE..."). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl()).to("file:target/changed/out", "mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).to("file:target/changed/out", "mock:result").         }     }. }
