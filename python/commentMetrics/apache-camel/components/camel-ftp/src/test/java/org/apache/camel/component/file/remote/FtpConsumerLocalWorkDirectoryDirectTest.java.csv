commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/lwd/?password=admin&delay=5000&localWorkDirectory=target/lwd&noop=true". }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/lwd").     deleteDirectory("target/out").     super.setUp().     prepareFtpServer(). }
false;private;0;13;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want     // to unit     // test that we can pool     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;14;;@Test public void testLocalWorkDirectory() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     assertTrue("Should process one file", notify.matchesMockWaitTime()).     // and the out file should exists     File out = new File("target/out/hello.txt").     assertTrue("file should exists", out.exists()).     assertEquals("Hello World", IOConverter.toString(out, null)).     // now the lwd file should be deleted     File local = new File("target/lwd/hello.txt").     assertFalse("Local work file should have been deleted", local.exists()). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("file://target/out"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("file://target/out").         }     }. }
