commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "?password=admin". }
false;public;0;20;;@Test public void testFromFileToFtpDelete() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file:target/delete", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     // file should be deleted     File file = new File("target/delete/hello.txt").     assertFalse("File should be deleted", file.exists()).     // file should exists on ftp server     file = new File(FTP_ROOT_DIR + "/hello.txt").     assertTrue("File should exist on ftp server", file.exists()). }
false;public;0;5;;public void configure() throws Exception {     from("file:target/delete?delete=true").to(getFtpUrl()).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file:target/delete?delete=true").to(getFtpUrl()).to("mock:result").         }     }. }
