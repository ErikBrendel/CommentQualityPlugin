commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/timeout/?soTimeout=5000". }
false;private;0;3;;private String getPort() {     return "21". }
false;public;0;19;;@Test public void test() throws Exception {     @SuppressWarnings("unchecked")     FtpEndpoint<FTPFile> ftpEndpoint = context.getEndpoint(getFtpUrl(), FtpEndpoint.class).     // set "ftp://admin@localhost:21/timeout/?ftpClient.soTimeout=10"     Map<String, Object> ftpClientParameters = new HashMap<>().     ftpClientParameters.put("soTimeout", "10").     ftpEndpoint.setFtpClientParameters(ftpClientParameters).     // test RemoteFileConsumer#buildConsumer     assertEquals(ftpClientParameters.get("soTimeout"), "10").     ftpEndpoint.createRemoteFileOperations().     // test RemoteFileConsumer#recoverableConnectIfNecessary     // recover by re-creating operations which should most likely be able to recover     assertEquals(ftpClientParameters.get("soTimeout"), "10").     ftpEndpoint.createRemoteFileOperations(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
