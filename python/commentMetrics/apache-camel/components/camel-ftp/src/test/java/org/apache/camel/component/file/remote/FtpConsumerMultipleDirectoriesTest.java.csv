commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/multidir/?password=admin&recursive=true&consumer.delay=5000&sortBy=file:path". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;30;;@Test public void testMultiDir() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World", "Hello World", "Goodday World").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     RemoteFile<?> file = (RemoteFile<?>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     assertNotNull(file).     assertDirectoryEquals("multidir/bye.txt", file.getAbsoluteFilePath()).     assertDirectoryEquals("bye.txt", file.getRelativeFilePath()).     assertEquals("bye.txt", file.getFileName()).     exchange = mock.getExchanges().get(1).     file = (RemoteFile<?>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     assertNotNull(file).     assertDirectoryEquals("multidir/sub/hello.txt", file.getAbsoluteFilePath()).     assertDirectoryEquals("sub/hello.txt", file.getRelativeFilePath()).     assertEquals("sub/hello.txt", file.getFileName()).     assertEquals("hello.txt", file.getFileNameOnly()).     exchange = mock.getExchanges().get(2).     file = (RemoteFile<?>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     assertNotNull(file).     assertDirectoryEquals("multidir/sub/sub2/godday.txt", file.getAbsoluteFilePath()).     assertDirectoryEquals("sub/sub2/godday.txt", file.getRelativeFilePath()).     assertEquals("sub/sub2/godday.txt", file.getFileName()).     assertEquals("godday.txt", file.getFileNameOnly()). }
false;private;0;5;;private void prepareFtpServer() throws Exception {     sendFile(getFtpUrl(), "Bye World", "bye.txt").     sendFile(getFtpUrl(), "Hello World", "sub/hello.txt").     sendFile(getFtpUrl(), "Goodday World", "sub/sub2/godday.txt"). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
