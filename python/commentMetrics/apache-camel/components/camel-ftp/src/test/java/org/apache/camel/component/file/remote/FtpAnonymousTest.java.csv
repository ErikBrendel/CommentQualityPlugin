commented;modifiers;parameterAmount;loc;comment;code
false;private;2;7;;private String getFtpUrl(String user, String password) {     StringBuilder url = new StringBuilder("ftp://").     url.append(user == null ? "" : user + "@").     url.append("localhost:" + getPort() + "/").     url.append(password == null ? "" : "?password=" + password).     return url.toString(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;7;;@Test public void testAnonymous() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.assertIsSatisfied(). }
false;private;0;3;;private void prepareFtpServer() throws Exception {     sendFile(getFtpUrl("admin", "admin"), "Hello World", "hello.xml"). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl(null, null)).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl(null, null)).to("mock:result").         }     }. }
