commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Override @Before public void setUp() throws Exception {     deleteDirectory(FTP_ROOT_DIR).     oldUserHome = System.getProperty("user.home").     System.setProperty("user.home", "target/user-home").     String simulatedUserHome = "target/user-home".     String simulatedUserSsh = "target/user-home/.ssh".     deleteDirectory(simulatedUserHome).     createDirectory(simulatedUserHome).     createDirectory(simulatedUserSsh).     FileUtils.copyInputStreamToFile(getClass().getClassLoader().getResourceAsStream("known_hosts"), new File(simulatedUserSsh + "/known_hosts")).     super.setUp().     setUpServer(). }
false;protected;0;26;;protected void setUpServer() throws Exception {     canTest = true.     try {         sshd = SshServer.setUpDefaultServer().         sshd.setPort(getPort()).         sshd.setKeyPairProvider(new FileKeyPairProvider(Paths.get("src/test/resources/hostkey.pem"))).         sshd.setSubsystemFactories(Collections.singletonList(new SftpSubsystemFactory())).         sshd.setCommandFactory(new ScpCommandFactory()).         sshd.setPasswordAuthenticator((username, password, session) -> true).         sshd.setPublickeyAuthenticator((username, password, session) -> true).         sshd.start().     } catch (Exception e) {         // ignore if algorithm is not on the OS         NoSuchAlgorithmException nsae = ObjectHelper.getException(NoSuchAlgorithmException.class, e).         if (nsae != null) {             canTest = false.             String name = System.getProperty("os.name").             String message = nsae.getMessage().             log.warn("SunX509 is not avail on this platform [{}] Testing is skipped! Real cause: {}", name, message).         } else {             // some other error then throw it so the test can fail             throw e.         }     } }
false;public;0;13;;@Override @After public void tearDown() throws Exception {     if (oldUserHome != null) {         System.setProperty("user.home", oldUserHome).     } else {         System.clearProperty("user.home").     }     super.tearDown().     tearDownServer(). }
false;protected;0;13;;protected void tearDownServer() {     if (sshd != null) {         try {             // stop asap as we may hang forever             sshd.stop(true).             sshd = null.         } catch (Exception e) {         // ignore while shutting down as we could be polling during shutdown         // and get errors when the ftp server is stopping. This is only an issue         // since we host the ftp server embedded in the same jvm for unit testing         }     } }
false;protected;0;3;;protected boolean canTest() {     return canTest. }
true;protected;0;6;// disconnect all existing SSH sessions to test reconnect functionality ;// disconnect all existing SSH sessions to test reconnect functionality protected void disconnectAllSessions() throws IOException {     List<AbstractSession> sessions = sshd.getActiveSessions().     for (AbstractSession session : sessions) {         session.disconnect(4, "dummy").     } }
