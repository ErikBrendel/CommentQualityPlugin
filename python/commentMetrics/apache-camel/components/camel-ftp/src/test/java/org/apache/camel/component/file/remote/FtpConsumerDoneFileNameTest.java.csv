commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/done?password=admin&initialDelay=0&delay=100&stepwise=false". }
false;public;0;27;;@Test public void testDoneFileName() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBodyAndHeader(getFtpUrl(), "Hello World", Exchange.FILE_NAME, "hello.txt").     // wait a bit and it should not pickup the written file as there are no done file     Thread.sleep(1000).     assertMockEndpointsSatisfied().     resetMocks().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     // write the done file     template.sendBodyAndHeader(getFtpUrl(), "", Exchange.FILE_NAME, "hello.dat").     assertMockEndpointsSatisfied().     // give time for done file to be deleted     Thread.sleep(1000).     // done file should be deleted now     File file = new File(FTP_ROOT_DIR + "done/hello.dat").     assertFalse("Done file should be deleted: " + file, file.exists()). }
false;public;0;6;;@Override public void configure() throws Exception {     from(getFtpUrl() + "&doneFileName=${file:name.noext}.dat").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl() + "&doneFileName=${file:name.noext}.dat").convertBodyTo(String.class).to("mock:result").         }     }. }
