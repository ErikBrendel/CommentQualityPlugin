commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testFtpSimpleConsumeAbsolute() throws Exception {     if (!canTest()) {         return.     }     String expected = "Hello World".     String expected2 = "Goodbye World".     // create file using regular file     // FTP Server does not support absolute path, so lets simulate it     String path = FTP_ROOT_DIR + "/tmp/mytemp".     template.sendBodyAndHeader("file:" + path, expected, Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:" + path, expected2, Exchange.FILE_NAME, "goodbye.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.expectedBodiesReceivedInAnyOrder(expected, expected2).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     GenericFile<?> remoteFile1 = mock.getExchanges().get(0).getIn().getBody(GenericFile.class).     GenericFile<?> remoteFile2 = mock.getExchanges().get(1).getIn().getBody(GenericFile.class).     assertTrue(remoteFile1.getBody() instanceof InputStream).     assertTrue(remoteFile2.getBody() instanceof InputStream). }
false;public;0;6;;@Override public void configure() throws Exception {     from("ftp://localhost:" + getPort() + "/tmp/mytemp?username=admin&password=admin&delay=10s&disconnect=true&streamDownload=true").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("ftp://localhost:" + getPort() + "/tmp/mytemp?username=admin&password=admin&delay=10s&disconnect=true&streamDownload=true").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
