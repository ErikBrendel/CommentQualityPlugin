commented;modifiers;parameterAmount;loc;comment;code
false;private;0;7;;private String getFtpUrl() {     return "ftps://admin@localhost:" + getPort() + "/tmp2/camel?password=admin&consumer.initialDelay=2000&disableSecureDataChannelDefaults=true" + "&securityProtocol=SSL&isImplicit=false&ftpClient.keyStore.file=./src/test/resources/server.jks&ftpClient.keyStore.type=JKS" + "&ftpClient.keyStore.algorithm=SunX509&ftpClient.keyStore.password=password&ftpClient.keyStore.keyPassword=password" + "&ftpClient.trustStore.file=./src/test/resources/server.jks&ftpClient.trustStore.type=JKS" + "&ftpClient.trustStore.algorithm=SunX509&ftpClient.trustStore.password=password&delete=true". }
false;public;0;12;;@Test public void testFromFileToFtp() throws Exception {     // some platforms cannot test SSL     if (!canTest) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("file:src/main/data?noop=true").log("Got ${file:name}").to(getFtpUrl()).     from(getFtpUrl()).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file:src/main/data?noop=true").log("Got ${file:name}").to(getFtpUrl()).             from(getFtpUrl()).to("mock:result").         }     }. }
