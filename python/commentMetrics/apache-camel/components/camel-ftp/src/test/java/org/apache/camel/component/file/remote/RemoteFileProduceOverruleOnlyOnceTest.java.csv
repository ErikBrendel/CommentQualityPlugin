commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testFileToFtp() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put(Exchange.FILE_NAME, "/sub/hello.txt").     headers.put(Exchange.OVERRULE_FILE_NAME, "/sub/ruled.txt").     template.sendBodyAndHeaders("direct:input", "Hello World", headers).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedHeaderReceived(Exchange.FILE_NAME, "/sub/hello.txt").     mock.expectedFileExists(FTP_ROOT_DIR + "/out/sub/ruled.txt", "Hello World").     mock.expectedFileExists("target/out/sub/hello.txt", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/out").     super.setUp(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:input").to("ftp://admin:admin@localhost:" + getPort() + "/out/").to("file://target/out", "mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:input").to("ftp://admin:admin@localhost:" + getPort() + "/out/").to("file://target/out", "mock:result").         }     }. }
