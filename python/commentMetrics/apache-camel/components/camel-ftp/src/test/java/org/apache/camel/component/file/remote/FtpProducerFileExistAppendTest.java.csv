commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/exist?password=admin&delay=2000&noop=true&fileExist=Append". }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     deleteDirectory("target/exist").     template.sendBodyAndHeader(getFtpUrl(), "Hello World\n", Exchange.FILE_NAME, "hello.txt"). }
false;public;0;13;;@Test public void testAppend() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     String expectBody = "Hello World\nBye World".     if (ON_WINDOWS) {         expectBody = "Hello World\r\nBye World".     }     mock.expectedBodiesReceived(expectBody).     mock.expectedFileExists(FTP_ROOT_DIR + "/exist/hello.txt", expectBody).     template.sendBodyAndHeader(getFtpUrl(), "Bye World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
