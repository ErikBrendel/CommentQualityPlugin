commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/tmp3/camel?password=admin&binary=false&fileExist=Override". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;13;;@Test public void testFtpRoute() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMinimumMessageCount(1).     resultEndpoint.expectedBodiesReceived("Hello World from FTPServer").     resultEndpoint.assertIsSatisfied().     // assert the file     File file = new File("target/ftptest/deleteme.txt").     assertTrue("The ASCII file should exists", file.exists()).     assertTrue("File size wrong", file.length() > 10). }
false;private;0;12;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World from FTPServer").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;5;;public void configure() throws Exception {     String fileUrl = "file:target/ftptest/?fileExist=Override&noop=true".     from(getFtpUrl()).setHeader(Exchange.FILE_NAME, constant("deleteme.txt")).convertBodyTo(String.class).to(fileUrl).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             String fileUrl = "file:target/ftptest/?fileExist=Override&noop=true".             from(getFtpUrl()).setHeader(Exchange.FILE_NAME, constant("deleteme.txt")).convertBodyTo(String.class).to(fileUrl).to("mock:result").         }     }. }
