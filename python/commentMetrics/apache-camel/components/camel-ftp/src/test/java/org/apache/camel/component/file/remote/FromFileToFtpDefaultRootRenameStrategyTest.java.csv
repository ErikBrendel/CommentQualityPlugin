commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
true;private;0;3;/*      * This is our poll we want to test (no folder specified). Uses the rename strategy      */ ;/*      * This is our poll we want to test (no folder specified). Uses the rename strategy      */ private String getFtpPollingUrl() {     return "ftp://admin@localhost:" + getPort() + "?password=admin&delete=true&binary=true&delay=1000&initialDelay=1500&readLock=rename". }
true;private;0;3;/*      * we use this URL to write out our binary test file to begin with      */ ;/*      * we use this URL to write out our binary test file to begin with      */ private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "?password=admin&binary=true". }
false;public;0;18;;@Test public void testFromFileToFtp() throws Exception {     File expectedOnFtpServer = new File(FTP_ROOT_DIR + "/logo.jpeg").     // the poller won't start for 1.5 seconds, so we check to make sure the file     // is there first check 1 - is the file there (default root location)     assertTrue(expectedOnFtpServer.exists()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     assertMockEndpointsSatisfied().     // give our mock a chance to delete the file     Thread.sleep(250).     // assert the file is NOT there now     assertTrue(!expectedOnFtpServer.exists()). }
false;private;0;11;;private void prepareFtpServer() throws Exception {     // create a binary file .. uploaded to the default root location     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody(IOConverter.toFile("src/test/data/ftpbinarytest/logo.jpeg")).     exchange.getIn().setHeader(Exchange.FILE_NAME, "logo.jpeg").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpPollingUrl()).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpPollingUrl()).to("mock:result").         }     }. }
