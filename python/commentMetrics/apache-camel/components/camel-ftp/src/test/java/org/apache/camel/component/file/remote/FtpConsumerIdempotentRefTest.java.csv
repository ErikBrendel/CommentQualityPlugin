commented;modifiers;parameterAmount;loc;comment;code
false;private;0;4;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/idempotent?password=admin&binary=false&idempotent=true&idempotentRepository=#myRepo&delete=true". }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myRepo", new MyIdempotentRepository()).     return jndi. }
false;public;0;26;;@Test public void testIdempotent() throws Exception {     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedMessageCount(1).     sendFile(getFtpUrl(), "Hello World", "report.txt").     assertMockEndpointsSatisfied().     Thread.sleep(100).     // reset mock and set new expectations     mock.reset().     mock.expectedMessageCount(0).     // move file back     sendFile(getFtpUrl(), "Hello World", "report.txt").     // should NOT consume the file again, let 2 secs pass to let the consumer try to consume it but it should not     Thread.sleep(2000).     assertMockEndpointsSatisfied().     assertTrue("MyIdempotentRepository should have been invoked", invoked). }
false;public;0;3;;public void configure() throws Exception {     from(getFtpUrl()).to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(getFtpUrl()).to("mock:result").         }     }. }
false;public;1;7;;public boolean add(String messageId) {     // will return true 1st time, and false 2nd time     boolean result = invoked.     invoked = true.     assertEquals("report.txt", messageId).     return !result. }
false;public;1;3;;public boolean contains(String key) {     return invoked. }
false;public;1;3;;public boolean remove(String key) {     return true. }
false;public;1;3;;public boolean confirm(String key) {     return true. }
false;public;0;3;;public void clear() {     return. }
false;public;0;2;;public void start() throws Exception { }
false;public;0;2;;public void stop() throws Exception { }
