commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/paddy/?password=admin&recursive=true". }
false;public;0;9;;@Test public void testConsumeFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     sendFile(getFtpUrl() + "/?password=admin", "Hello World", "incoming/hello.txt").     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     assertNotNull(exchange.getIn().getHeader(Exchange.FILE_NAME)).     assertEquals("hello.txt", exchange.getIn().getHeader(Exchange.FILE_NAME_ONLY)).     assertEquals("Hello World", exchange.getIn().getBody(String.class)). }
false;public;0;10;;@Override public void configure() throws Exception {     from(getFtpUrl()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertNotNull(exchange.getIn().getHeader(Exchange.FILE_NAME)).             assertEquals("hello.txt", exchange.getIn().getHeader(Exchange.FILE_NAME_ONLY)).             assertEquals("Hello World", exchange.getIn().getBody(String.class)).         }     }).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(getFtpUrl()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertNotNull(exchange.getIn().getHeader(Exchange.FILE_NAME)).                     assertEquals("hello.txt", exchange.getIn().getHeader(Exchange.FILE_NAME_ONLY)).                     assertEquals("Hello World", exchange.getIn().getBody(String.class)).                 }             }).to("mock:result").         }     }. }
