commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/thirdpool?password=admin&delete=true". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/thirdpool").     super.setUp(). }
false;public;0;19;;@Test public void testPollFileAndShouldBeDeletedAtThirdPoll() throws Exception {     template.sendBodyAndHeader(getFtpUrl(), body, Exchange.FILE_NAME, "hello.txt").     getMockEndpoint("mock:result").expectedBodiesReceived(body).     // 2 first attempt should fail     getMockEndpoint("mock:error").expectedMessageCount(2).     assertMockEndpointsSatisfied().     // give time to delete file     Thread.sleep(200).     assertEquals(3, counter).     // assert the file is deleted     File file = new File(FTP_ROOT_DIR + "/thirdpool/hello.txt").     assertFalse("The file should have been deleted", file.exists()). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     counter++.     if (counter < 3) {         // file should exists         File file = new File(FTP_ROOT_DIR + "/thirdpool/hello.txt").         assertTrue("The file should NOT have been deleted", file.exists()).         throw new IllegalArgumentException("Forced by unittest").     } }
false;public;0;19;;public void configure() throws Exception {     // no redeliveries as we want the ftp consumer to try again     // use no delay for fast unit testing     onException(IllegalArgumentException.class).logStackTrace(false).to("mock:error").     from(getFtpUrl()).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             if (counter < 3) {                 // file should exists                 File file = new File(FTP_ROOT_DIR + "/thirdpool/hello.txt").                 assertTrue("The file should NOT have been deleted", file.exists()).                 throw new IllegalArgumentException("Forced by unittest").             }         }     }).to("mock:result"). }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // no redeliveries as we want the ftp consumer to try again             // use no delay for fast unit testing             onException(IllegalArgumentException.class).logStackTrace(false).to("mock:error").             from(getFtpUrl()).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     if (counter < 3) {                         // file should exists                         File file = new File(FTP_ROOT_DIR + "/thirdpool/hello.txt").                         assertTrue("The file should NOT have been deleted", file.exists()).                         throw new IllegalArgumentException("Forced by unittest").                     }                 }             }).to("mock:result").         }     }. }
