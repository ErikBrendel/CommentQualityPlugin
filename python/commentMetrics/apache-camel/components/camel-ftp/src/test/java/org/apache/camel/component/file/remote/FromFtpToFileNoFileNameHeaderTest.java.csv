commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private String getFtpUrl() {     return "ftp://admin@localhost:" + getPort() + "/tmp3/camel?password=admin&binary=false". }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     prepareFtpServer(). }
false;public;0;9;;@Test public void testCorrectFilename() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("Hello World from FTPServer").     mock.expectedFileExists("target/ftptest/hello.txt", "Hello World from FTPServer").     mock.assertIsSatisfied(). }
false;private;0;12;;private void prepareFtpServer() throws Exception {     // prepares the FTP Server by creating a file on the server that we want to unit     // test that we can pool and store as a local file     Endpoint endpoint = context.getEndpoint(getFtpUrl()).     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World from FTPServer").     exchange.getIn().setHeader(Exchange.FILE_NAME, "hello.txt").     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;6;;public void configure() throws Exception {     String fileUrl = "file:target/ftptest/?fileExist=Override&noop=true".     // we do not set any filename in the header property so the filename should be the one     // from the FTP server we downloaded     from(getFtpUrl()).convertBodyTo(String.class).to(fileUrl).to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             String fileUrl = "file:target/ftptest/?fileExist=Override&noop=true".             // we do not set any filename in the header property so the filename should be the one             // from the FTP server we downloaded             from(getFtpUrl()).convertBodyTo(String.class).to(fileUrl).to("mock:result").         }     }. }
