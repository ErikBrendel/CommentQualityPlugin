commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;2;4;;@Override public boolean authenticate(String userName, String password) {     return "user".equals(userName) && "password".equals(password). }
false;public;0;24;;@Test public void testSftpSimpleProduceThroughProxy() throws Exception {     if (!canTest()) {         return.     }     // start http proxy     HttpProxyServer proxyServer = new DefaultHttpProxyServer(proxyPort).     proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler() {          @Override         public boolean authenticate(String userName, String password) {             return "user".equals(userName) && "password".equals(password).         }     }).     proxyServer.start().     template.sendBodyAndHeader("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&password=admin&proxy=#proxy", "Hello World", Exchange.FILE_NAME, "hello.txt").     File file = new File(FTP_ROOT_DIR + "/hello.txt").     assertTrue("File should exist: " + file, file.exists()).     assertEquals("Hello World", context.getTypeConverter().convertTo(String.class, file)).     proxyServer.stop(). }
false;public;2;4;;@Override public boolean authenticate(String userName, String password) {     return "user".equals(userName) && "password".equals(password). }
false;public;0;24;;@Test public void testSftpSimpleSubPathProduceThroughProxy() throws Exception {     if (!canTest()) {         return.     }     // start http proxy     HttpProxyServer proxyServer = new DefaultHttpProxyServer(proxyPort).     proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler() {          @Override         public boolean authenticate(String userName, String password) {             return "user".equals(userName) && "password".equals(password).         }     }).     proxyServer.start().     template.sendBodyAndHeader("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "/mysub?username=admin&password=admin&proxy=#proxy", "Bye World", Exchange.FILE_NAME, "bye.txt").     File file = new File(FTP_ROOT_DIR + "/mysub/bye.txt").     assertTrue("File should exist: " + file, file.exists()).     assertEquals("Bye World", context.getTypeConverter().convertTo(String.class, file)).     proxyServer.stop(). }
false;public;2;4;;@Override public boolean authenticate(String userName, String password) {     return "user".equals(userName) && "password".equals(password). }
false;public;0;25;;@Test public void testSftpSimpleTwoSubPathProduceThroughProxy() throws Exception {     if (!canTest()) {         return.     }     // start http proxy     HttpProxyServer proxyServer = new DefaultHttpProxyServer(proxyPort).     proxyServer.addProxyAuthenticationHandler(new ProxyAuthorizationHandler() {          @Override         public boolean authenticate(String userName, String password) {             return "user".equals(userName) && "password".equals(password).         }     }).     proxyServer.start().     template.sendBodyAndHeader("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "/mysub/myother?username=admin&password=admin&proxy=#proxy", "Farewell World", Exchange.FILE_NAME, "farewell.txt").     File file = new File(FTP_ROOT_DIR + "/mysub/myother/farewell.txt").     assertTrue("File should exist: " + file, file.exists()).     assertEquals("Farewell World", context.getTypeConverter().convertTo(String.class, file)).     proxyServer.stop(). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     final ProxyHTTP proxyHTTP = new ProxyHTTP("localhost", proxyPort).     proxyHTTP.setUserPasswd("user", "password").     jndi.bind("proxy", proxyHTTP).     return jndi. }
