commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected RemoteFileConsumer<Object> buildConsumer(Processor processor) {     return null. }
false;protected;0;4;;@Override protected GenericFileProducer<Object> buildProducer() {     return null. }
false;public;0;4;;@Override public RemoteFileOperations<Object> createRemoteFileOperations() throws Exception {     return null. }
false;public;0;4;;@Override public String getScheme() {     return null. }
false;public;0;6;;@Test public void testReadDirErrorIsHandled() throws Exception {     RemoteFileConsumer<Object> consumer = getRemoteFileConsumer("true", true).     boolean result = consumer.doSafePollSubDirectory("anyPath", "adir", new ArrayList<GenericFile<Object>>(), 0).     Assert.assertTrue(result). }
false;public;0;6;;@Test public void testReadDirErrorIsHandledWithNoMorePoll() throws Exception {     RemoteFileConsumer<Object> consumer = getRemoteFileConsumer("false", true).     boolean result = consumer.doSafePollSubDirectory("anyPath", "adir", new ArrayList<GenericFile<Object>>(), 0).     Assert.assertFalse(result). }
false;public;0;10;;@Test public void testReadDirErrorNotHandled() throws Exception {     RemoteFileConsumer<Object> consumer = getRemoteFileConsumer("IllegalStateException", false).     try {         consumer.doSafePollSubDirectory("anyPath", "adir", new ArrayList<GenericFile<Object>>(), 0).         Assert.fail("Must throw wrapped IllegalStateException in GenericFileOperationFailedException").     } catch (GenericFileOperationFailedException e) {         Assert.assertTrue(e.getCause() instanceof IllegalStateException).     } }
false;public;0;10;;@Test public void testReadDirErrorNotHandledForGenericFileOperationException() throws Exception {     RemoteFileConsumer<Object> consumer = getRemoteFileConsumer("GenericFileOperationFailedException", false).     try {         consumer.doSafePollSubDirectory("anyPath", "adir", new ArrayList<GenericFile<Object>>(), 0).         Assert.fail("Must throw GenericFileOperationFailedException").     } catch (GenericFileOperationFailedException e) {         Assert.assertNull(e.getCause()).     } }
false;protected;4;10;;@Override protected boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<Object>> genericFiles, int depth) {     if ("IllegalStateException".equals(doPollResult)) {         throw new IllegalStateException("Problem").     } else if ("GenericFileOperationFailedException".equals(doPollResult)) {         throw new GenericFileOperationFailedException("Perm error").     } else {         return "true".equals(doPollResult).     } }
false;protected;3;4;;@Override protected boolean pollDirectory(String fileName, List<GenericFile<Object>> genericFiles, int depth) {     return false. }
false;protected;3;4;;@Override protected boolean isMatched(GenericFile<Object> file, String doneFileName, List<Object> files) {     return false. }
false;protected;3;4;;@Override protected boolean ignoreCannotRetrieveFile(String name, Exchange exchange, Exception cause) {     return ignoreCannotRetrieveFile. }
false;protected;2;4;;@Override protected void updateFileHeaders(GenericFile<Object> genericFile, Message message) { // noop }
false;private;2;31;;private RemoteFileConsumer<Object> getRemoteFileConsumer(final String doPollResult, final boolean ignoreCannotRetrieveFile) {     return new RemoteFileConsumer<Object>(remoteFileEndpoint, null, null, null) {          @Override         protected boolean doPollDirectory(String absolutePath, String dirName, List<GenericFile<Object>> genericFiles, int depth) {             if ("IllegalStateException".equals(doPollResult)) {                 throw new IllegalStateException("Problem").             } else if ("GenericFileOperationFailedException".equals(doPollResult)) {                 throw new GenericFileOperationFailedException("Perm error").             } else {                 return "true".equals(doPollResult).             }         }          @Override         protected boolean pollDirectory(String fileName, List<GenericFile<Object>> genericFiles, int depth) {             return false.         }          @Override         protected boolean isMatched(GenericFile<Object> file, String doneFileName, List<Object> files) {             return false.         }          @Override         protected boolean ignoreCannotRetrieveFile(String name, Exchange exchange, Exception cause) {             return ignoreCannotRetrieveFile.         }          @Override         protected void updateFileHeaders(GenericFile<Object> genericFile, Message message) {         // noop         }     }. }
