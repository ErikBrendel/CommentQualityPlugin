commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;// --- Set up @Override @Before public void setUp() throws Exception {     // the created server socket makes it possible for the FTP client to establish the socket connection.     // However, no message will ever be sent back, thus a read timeout should occur within FTPClient#__getReply()     serverSocket = new ServerSocket(0).     super.setUp(). }
false;public;0;8;;@Override @After public void tearDown() throws Exception {     super.tearDown().     if (serverSocket != null) {         serverSocket.close().     } }
false;protected;0;4;;@Override protected int getShutdownTimeout() {     // speedup graceful shutdown     return 5. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:with").to("ftp://localhost:" + serverSocket.getLocalPort() + "?ftpClient=#myftpclient&connectTimeout=300&soTimeout=300&reconnectDelay=100").     from("direct:without").to("ftp://localhost:" + serverSocket.getLocalPort() + "?connectTimeout=300&soTimeout=300&reconnectDelay=100"). }
false;protected;0;15;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:with").to("ftp://localhost:" + serverSocket.getLocalPort() + "?ftpClient=#myftpclient&connectTimeout=300&soTimeout=300&reconnectDelay=100").             from("direct:without").to("ftp://localhost:" + serverSocket.getLocalPort() + "?connectTimeout=300&soTimeout=300&reconnectDelay=100").         }     }. }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     FTPClient ftpClient = new FTPClient().     ftpClient.setDefaultTimeout(300).     JndiRegistry registry = super.createRegistry().     registry.bind("myftpclient", ftpClient).     return registry. }
false;public;0;6;;// --- Tests @Test(timeout = 10000, expected = CamelExecutionException.class) public void testWithDefaultTimeout() throws Exception {     // send exchange to the route using the custom FTPClient (with a default timeout)     // the soTimeout triggers in time and test is successful     template.sendBody("direct:with", ""). }
false;public;0;6;;@Test(timeout = 10000, expected = CamelExecutionException.class) public void testWithoutDefaultTimeout() throws Exception {     // send exchange to the route using the default FTPClient (without a default timeout)     // the soTimeout never triggers and test fails after its own timeout     template.sendBody("direct:without", ""). }
