commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testSftpSimpleConsume() throws Exception {     if (!canTest()) {         return.     }     String expected = "Hello World".     // create file using regular file     template.sendBodyAndHeader("file://" + FTP_ROOT_DIR, expected, Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.FILE_NAME, "hello.txt").     mock.expectedBodiesReceived(expected).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied(). }
false;private;1;7;;private byte[] getBytesFromFile(String filename) throws IOException {     InputStream input.     input = new FileInputStream(new File(filename)).     ByteArrayOutputStream output = new ByteArrayOutputStream().     IOHelper.copyAndCloseInput(input, output).     return output.toByteArray(). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("privateKey", getBytesFromFile("./src/test/resources/id_rsa")).     registry.bind("knownHosts", getBytesFromFile("./src/test/resources/known_hosts")).     return registry. }
false;public;0;7;;@Override public void configure() throws Exception {     from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&knownHosts=#knownHosts&privateKey=#privateKey&privateKeyPassphrase=secret&delay=10s&strictHostKeyChecking=yes&disconnect=true").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sftp://localhost:" + getPort() + "/" + FTP_ROOT_DIR + "?username=admin&knownHosts=#knownHosts&privateKey=#privateKey&privateKeyPassphrase=secret&delay=10s&strictHostKeyChecking=yes&disconnect=true").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
