commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testCamelAtmos() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied(100L, TimeUnit.SECONDS).     List<Exchange> exchanges = mock.getReceivedExchanges().     Exchange exchange = exchanges.get(0).     Object header = exchange.getIn().getHeader(AtmosResultHeader.DOWNLOADED_FILE.name()).     Object body = exchange.getIn().getBody().     assertNotNull(header).     assertNotNull(body). }
false;public;0;5;;public void configure() {     from("atmos://get?remotePath=/dummy.txt&localPath=/home").to("file:///dummy.txt").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("atmos://get?remotePath=/dummy.txt&localPath=/home").to("file:///dummy.txt").to("mock:result").         }     }. }
