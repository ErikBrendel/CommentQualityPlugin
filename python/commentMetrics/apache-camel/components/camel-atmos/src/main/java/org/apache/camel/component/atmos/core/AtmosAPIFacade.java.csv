# id;timestamp;commentText;codeText;commentWords;codeWords
AtmosAPIFacade -> public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException;1422594149;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a AtmosResult object with the result of the move operation._@throws AtmosException;public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException {_        AtmosResult result = null__        AtmosAPIFacade.client.move(new ObjectPath(remotePath), new ObjectPath(newRemotePath), true)__        result = new AtmosMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,atmos,result,object,with,the,result,of,the,move,operation,throws,atmos,exception;public,atmos,result,move,string,remote,path,string,new,remote,path,throws,atmos,exception,atmos,result,result,null,atmos,apifacade,client,move,new,object,path,remote,path,new,object,path,new,remote,path,true,result,new,atmos,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
AtmosAPIFacade -> public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException;1422594149;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a AtmosResult object with the result of the move operation._@throws AtmosException;public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException {_        AtmosResult result = null__        AtmosAPIFacade.client.move(new ObjectPath(remotePath), new ObjectPath(newRemotePath), true)__        result = new AtmosMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,atmos,result,object,with,the,result,of,the,move,operation,throws,atmos,exception;public,atmos,result,move,string,remote,path,string,new,remote,path,throws,atmos,exception,atmos,result,result,null,atmos,apifacade,client,move,new,object,path,remote,path,new,object,path,new,remote,path,true,result,new,atmos,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
AtmosAPIFacade -> public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException;1460967314;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a AtmosResult object with the result of the move operation._@throws AtmosException;public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException {_        AtmosResult result = null__        AtmosAPIFacade.client.move(new ObjectPath(remotePath), new ObjectPath(newRemotePath), true)__        result = new AtmosMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,atmos,result,object,with,the,result,of,the,move,operation,throws,atmos,exception;public,atmos,result,move,string,remote,path,string,new,remote,path,throws,atmos,exception,atmos,result,result,null,atmos,apifacade,client,move,new,object,path,remote,path,new,object,path,new,remote,path,true,result,new,atmos,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
AtmosAPIFacade -> public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException;1523968777;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a AtmosResult object with the result of the move operation._@throws AtmosException;public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException {_        AtmosResult result = null__        AtmosAPIFacade.client.move(new ObjectPath(remotePath), new ObjectPath(newRemotePath), true)__        result = new AtmosMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,atmos,result,object,with,the,result,of,the,move,operation,throws,atmos,exception;public,atmos,result,move,string,remote,path,string,new,remote,path,throws,atmos,exception,atmos,result,result,null,atmos,apifacade,client,move,new,object,path,remote,path,new,object,path,new,remote,path,true,result,new,atmos,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
AtmosAPIFacade -> public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException;1536687142;Rename a remote path with the new path location.__@param remotePath the existing remote path to be renamed_@param newRemotePath the new remote path substituting the old one_@return a AtmosResult object with the result of the move operation._@throws AtmosException;public AtmosResult move(String remotePath, String newRemotePath) throws AtmosException {_        AtmosResult result = null__        AtmosAPIFacade.client.move(new ObjectPath(remotePath), new ObjectPath(newRemotePath), true)__        result = new AtmosMoveResult()__        result.setResultEntries(remotePath + "-" + newRemotePath)__        return result__    };rename,a,remote,path,with,the,new,path,location,param,remote,path,the,existing,remote,path,to,be,renamed,param,new,remote,path,the,new,remote,path,substituting,the,old,one,return,a,atmos,result,object,with,the,result,of,the,move,operation,throws,atmos,exception;public,atmos,result,move,string,remote,path,string,new,remote,path,throws,atmos,exception,atmos,result,result,null,atmos,apifacade,client,move,new,object,path,remote,path,new,object,path,new,remote,path,true,result,new,atmos,move,result,result,set,result,entries,remote,path,new,remote,path,return,result
AtmosAPIFacade -> public static AtmosAPIFacade getInstance(AtmosApi client);1422594149;Return a singleton instance of this class__@param client the AtmosClient performing atmos low level operations_@return the singleton instance of this class;public static AtmosAPIFacade getInstance(AtmosApi client) {_        if (instance == null) {_            instance = new AtmosAPIFacade()__            AtmosAPIFacade.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,atmos,client,performing,atmos,low,level,operations,return,the,singleton,instance,of,this,class;public,static,atmos,apifacade,get,instance,atmos,api,client,if,instance,null,instance,new,atmos,apifacade,atmos,apifacade,client,client,return,instance
AtmosAPIFacade -> public static AtmosAPIFacade getInstance(AtmosApi client);1422594149;Return a singleton instance of this class__@param client the AtmosClient performing atmos low level operations_@return the singleton instance of this class;public static AtmosAPIFacade getInstance(AtmosApi client) {_        if (instance == null) {_            instance = new AtmosAPIFacade()__            AtmosAPIFacade.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,atmos,client,performing,atmos,low,level,operations,return,the,singleton,instance,of,this,class;public,static,atmos,apifacade,get,instance,atmos,api,client,if,instance,null,instance,new,atmos,apifacade,atmos,apifacade,client,client,return,instance
AtmosAPIFacade -> public static AtmosAPIFacade getInstance(AtmosApi client);1460967314;Return a singleton instance of this class__@param client the AtmosClient performing atmos low level operations_@return the singleton instance of this class;public static AtmosAPIFacade getInstance(AtmosApi client) {_        if (instance == null) {_            instance = new AtmosAPIFacade()__            AtmosAPIFacade.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,atmos,client,performing,atmos,low,level,operations,return,the,singleton,instance,of,this,class;public,static,atmos,apifacade,get,instance,atmos,api,client,if,instance,null,instance,new,atmos,apifacade,atmos,apifacade,client,client,return,instance
AtmosAPIFacade -> public static AtmosAPIFacade getInstance(AtmosApi client);1523968777;Return a singleton instance of this class__@param client the AtmosClient performing atmos low level operations_@return the singleton instance of this class;public static AtmosAPIFacade getInstance(AtmosApi client) {_        if (instance == null) {_            instance = new AtmosAPIFacade()__            AtmosAPIFacade.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,atmos,client,performing,atmos,low,level,operations,return,the,singleton,instance,of,this,class;public,static,atmos,apifacade,get,instance,atmos,api,client,if,instance,null,instance,new,atmos,apifacade,atmos,apifacade,client,client,return,instance
AtmosAPIFacade -> public static AtmosAPIFacade getInstance(AtmosApi client);1536687142;Return a singleton instance of this class__@param client the AtmosClient performing atmos low level operations_@return the singleton instance of this class;public static AtmosAPIFacade getInstance(AtmosApi client) {_        if (instance == null) {_            instance = new AtmosAPIFacade()__            AtmosAPIFacade.client = client__        }_        return instance__    };return,a,singleton,instance,of,this,class,param,client,the,atmos,client,performing,atmos,low,level,operations,return,the,singleton,instance,of,this,class;public,static,atmos,apifacade,get,instance,atmos,api,client,if,instance,null,instance,new,atmos,apifacade,atmos,apifacade,client,client,return,instance
AtmosAPIFacade -> public AtmosResult put(String localPath, String remotePath) throws AtmosException;1422594149;Put or upload a new file or an entire directory to atmos__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on atmos_the file already existing with the same name_will be overridden._@return a AtmosResult object reporting for each remote path the result of_the operation._@throws AtmosException;public AtmosResult put(String localPath, String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileUploadResult()__        _        Map<String, AtmosResultCode> resultEntries = null__        _        String atmosPath = remotePath == null ? localPath : remotePath__        if (!atmosPath.endsWith(ATMOS_FILE_SEPARATOR)) {_            atmosPath += ATMOS_FILE_SEPARATOR__        }_        ObjectPath atmosEntry = new ObjectPath(atmosPath)___        if (!atmosPath.equals(ATMOS_FILE_SEPARATOR)) {_            if (AtmosAPIFacade.client.getSystemMetadata(atmosEntry) == null) {_                throw new AtmosException(atmosPath + " does not exist or can't obtain metadata")__            }_        }__        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            atmosPath = atmosPath + fileLocalPath.getName()__            resultEntries = new HashMap<String, AtmosResultCode>(1)__            try {_                ObjectId uploadedFile = putSingleFile(fileLocalPath, atmosPath)__                if (uploadedFile == null) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                } else {_                    resultEntries.put(atmosPath, AtmosResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(atmosPath, AtmosResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            _            String oldAtmosPath = atmosPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new AtmosException(localPath + " doesn't contain any files")__            }_            resultEntries = new HashMap<String, AtmosResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                atmosPath = atmosPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + atmosPath)__                    ObjectId uploadedFile = putSingleFile(file, atmosPath)__                    if (uploadedFile == null) {_                        resultEntries.put(atmosPath, AtmosResultCode.KO)__                    } else {_                        resultEntries.put(atmosPath, AtmosResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                }_                atmosPath = oldAtmosPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,atmos,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,atmos,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,atmos,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,atmos,exception;public,atmos,result,put,string,local,path,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,upload,result,map,string,atmos,result,code,result,entries,null,string,atmos,path,remote,path,null,local,path,remote,path,if,atmos,path,ends,with,atmos,path,object,path,atmos,entry,new,object,path,atmos,path,if,atmos,path,equals,if,atmos,apifacade,client,get,system,metadata,atmos,entry,null,throw,new,atmos,exception,atmos,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,atmos,path,atmos,path,file,local,path,get,name,result,entries,new,hash,map,string,atmos,result,code,1,try,object,id,uploaded,file,put,single,file,file,local,path,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,string,old,atmos,path,atmos,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,atmos,exception,local,path,doesn,t,contain,any,files,result,entries,new,hash,map,string,atmos,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,atmos,path,atmos,path,remaining,path,try,log,info,uploading,file,local,path,atmos,path,object,id,uploaded,file,put,single,file,file,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,atmos,path,old,atmos,path,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult put(String localPath, String remotePath) throws AtmosException;1422594149;Put or upload a new file or an entire directory to atmos__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on atmos_the file already existing with the same name_will be overridden._@return a AtmosResult object reporting for each remote path the result of_the operation._@throws AtmosException;public AtmosResult put(String localPath, String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileUploadResult()__        _        Map<String, AtmosResultCode> resultEntries = null__        _        String atmosPath = remotePath == null ? localPath : remotePath__        if (!atmosPath.endsWith(ATMOS_FILE_SEPARATOR)) {_            atmosPath += ATMOS_FILE_SEPARATOR__        }_        ObjectPath atmosEntry = new ObjectPath(atmosPath)___        if (!atmosPath.equals(ATMOS_FILE_SEPARATOR)) {_            if (AtmosAPIFacade.client.getSystemMetadata(atmosEntry) == null) {_                throw new AtmosException(atmosPath + " does not exist or can't obtain metadata")__            }_        }__        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            atmosPath = atmosPath + fileLocalPath.getName()__            resultEntries = new HashMap<String, AtmosResultCode>(1)__            try {_                ObjectId uploadedFile = putSingleFile(fileLocalPath, atmosPath)__                if (uploadedFile == null) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                } else {_                    resultEntries.put(atmosPath, AtmosResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(atmosPath, AtmosResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            _            String oldAtmosPath = atmosPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new AtmosException(localPath + " doesn't contain any files")__            }_            resultEntries = new HashMap<String, AtmosResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                atmosPath = atmosPath + remainingPath__                try {_                    LOG.info("uploading:" + fileLocalPath + "," + atmosPath)__                    ObjectId uploadedFile = putSingleFile(file, atmosPath)__                    if (uploadedFile == null) {_                        resultEntries.put(atmosPath, AtmosResultCode.KO)__                    } else {_                        resultEntries.put(atmosPath, AtmosResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                }_                atmosPath = oldAtmosPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,atmos,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,atmos,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,atmos,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,atmos,exception;public,atmos,result,put,string,local,path,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,upload,result,map,string,atmos,result,code,result,entries,null,string,atmos,path,remote,path,null,local,path,remote,path,if,atmos,path,ends,with,atmos,path,object,path,atmos,entry,new,object,path,atmos,path,if,atmos,path,equals,if,atmos,apifacade,client,get,system,metadata,atmos,entry,null,throw,new,atmos,exception,atmos,path,does,not,exist,or,can,t,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,atmos,path,atmos,path,file,local,path,get,name,result,entries,new,hash,map,string,atmos,result,code,1,try,object,id,uploaded,file,put,single,file,file,local,path,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,string,old,atmos,path,atmos,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,atmos,exception,local,path,doesn,t,contain,any,files,result,entries,new,hash,map,string,atmos,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,atmos,path,atmos,path,remaining,path,try,log,info,uploading,file,local,path,atmos,path,object,id,uploaded,file,put,single,file,file,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,atmos,path,old,atmos,path,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult put(String localPath, String remotePath) throws AtmosException;1460967314;Put or upload a new file or an entire directory to atmos__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on atmos_the file already existing with the same name_will be overridden._@return a AtmosResult object reporting for each remote path the result of_the operation._@throws AtmosException;public AtmosResult put(String localPath, String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileUploadResult()__        _        Map<String, AtmosResultCode> resultEntries = null__        _        String atmosPath = remotePath == null ? localPath : remotePath__        if (!atmosPath.endsWith(ATMOS_FILE_SEPARATOR)) {_            atmosPath += ATMOS_FILE_SEPARATOR__        }_        ObjectPath atmosEntry = new ObjectPath(atmosPath)___        if (!atmosPath.equals(ATMOS_FILE_SEPARATOR)) {_            if (AtmosAPIFacade.client.getSystemMetadata(atmosEntry) == null) {_                throw new AtmosException(atmosPath + " does not exist or cannot obtain metadata")__            }_        }__        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            atmosPath = atmosPath + fileLocalPath.getName()__            resultEntries = new HashMap<String, AtmosResultCode>(1)__            try {_                ObjectId uploadedFile = putSingleFile(fileLocalPath, atmosPath)__                if (uploadedFile == null) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                } else {_                    resultEntries.put(atmosPath, AtmosResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(atmosPath, AtmosResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            _            String oldAtmosPath = atmosPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new AtmosException(localPath + " does not contain any files")__            }_            resultEntries = new HashMap<String, AtmosResultCode>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                atmosPath = atmosPath + remainingPath__                try {_                    LOG.debug("uploading: {} to {}", fileLocalPath, atmosPath)__                    ObjectId uploadedFile = putSingleFile(file, atmosPath)__                    if (uploadedFile == null) {_                        resultEntries.put(atmosPath, AtmosResultCode.KO)__                    } else {_                        resultEntries.put(atmosPath, AtmosResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                }_                atmosPath = oldAtmosPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,atmos,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,atmos,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,atmos,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,atmos,exception;public,atmos,result,put,string,local,path,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,upload,result,map,string,atmos,result,code,result,entries,null,string,atmos,path,remote,path,null,local,path,remote,path,if,atmos,path,ends,with,atmos,path,object,path,atmos,entry,new,object,path,atmos,path,if,atmos,path,equals,if,atmos,apifacade,client,get,system,metadata,atmos,entry,null,throw,new,atmos,exception,atmos,path,does,not,exist,or,cannot,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,atmos,path,atmos,path,file,local,path,get,name,result,entries,new,hash,map,string,atmos,result,code,1,try,object,id,uploaded,file,put,single,file,file,local,path,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,string,old,atmos,path,atmos,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,atmos,exception,local,path,does,not,contain,any,files,result,entries,new,hash,map,string,atmos,result,code,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,atmos,path,atmos,path,remaining,path,try,log,debug,uploading,to,file,local,path,atmos,path,object,id,uploaded,file,put,single,file,file,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,atmos,path,old,atmos,path,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult put(String localPath, String remotePath) throws AtmosException;1523968777;Put or upload a new file or an entire directory to atmos__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on atmos_the file already existing with the same name_will be overridden._@return a AtmosResult object reporting for each remote path the result of_the operation._@throws AtmosException;public AtmosResult put(String localPath, String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileUploadResult()__        _        Map<String, AtmosResultCode> resultEntries = null__        _        String atmosPath = remotePath == null ? localPath : remotePath__        if (!atmosPath.endsWith(ATMOS_FILE_SEPARATOR)) {_            atmosPath += ATMOS_FILE_SEPARATOR__        }_        ObjectPath atmosEntry = new ObjectPath(atmosPath)___        if (!atmosPath.equals(ATMOS_FILE_SEPARATOR)) {_            if (AtmosAPIFacade.client.getSystemMetadata(atmosEntry) == null) {_                throw new AtmosException(atmosPath + " does not exist or cannot obtain metadata")__            }_        }__        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            atmosPath = atmosPath + fileLocalPath.getName()__            resultEntries = new HashMap<>(1)__            try {_                ObjectId uploadedFile = putSingleFile(fileLocalPath, atmosPath)__                if (uploadedFile == null) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                } else {_                    resultEntries.put(atmosPath, AtmosResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(atmosPath, AtmosResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            _            String oldAtmosPath = atmosPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new AtmosException(localPath + " does not contain any files")__            }_            resultEntries = new HashMap<>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                atmosPath = atmosPath + remainingPath__                try {_                    LOG.debug("uploading: {} to {}", fileLocalPath, atmosPath)__                    ObjectId uploadedFile = putSingleFile(file, atmosPath)__                    if (uploadedFile == null) {_                        resultEntries.put(atmosPath, AtmosResultCode.KO)__                    } else {_                        resultEntries.put(atmosPath, AtmosResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                }_                atmosPath = oldAtmosPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,atmos,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,atmos,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,atmos,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,atmos,exception;public,atmos,result,put,string,local,path,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,upload,result,map,string,atmos,result,code,result,entries,null,string,atmos,path,remote,path,null,local,path,remote,path,if,atmos,path,ends,with,atmos,path,object,path,atmos,entry,new,object,path,atmos,path,if,atmos,path,equals,if,atmos,apifacade,client,get,system,metadata,atmos,entry,null,throw,new,atmos,exception,atmos,path,does,not,exist,or,cannot,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,atmos,path,atmos,path,file,local,path,get,name,result,entries,new,hash,map,1,try,object,id,uploaded,file,put,single,file,file,local,path,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,string,old,atmos,path,atmos,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,atmos,exception,local,path,does,not,contain,any,files,result,entries,new,hash,map,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,atmos,path,atmos,path,remaining,path,try,log,debug,uploading,to,file,local,path,atmos,path,object,id,uploaded,file,put,single,file,file,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,atmos,path,old,atmos,path,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult put(String localPath, String remotePath) throws AtmosException;1536687142;Put or upload a new file or an entire directory to atmos__@param localPath the file path or the dir path on the local filesystem_@param remotePath the remote path destination on atmos_the file already existing with the same name_will be overridden._@return a AtmosResult object reporting for each remote path the result of_the operation._@throws AtmosException;public AtmosResult put(String localPath, String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileUploadResult()__        _        Map<String, AtmosResultCode> resultEntries = null__        _        String atmosPath = remotePath == null ? localPath : remotePath__        if (!atmosPath.endsWith(ATMOS_FILE_SEPARATOR)) {_            atmosPath += ATMOS_FILE_SEPARATOR__        }_        ObjectPath atmosEntry = new ObjectPath(atmosPath)___        if (!atmosPath.equals(ATMOS_FILE_SEPARATOR)) {_            if (AtmosAPIFacade.client.getSystemMetadata(atmosEntry) == null) {_                throw new AtmosException(atmosPath + " does not exist or cannot obtain metadata")__            }_        }__        File fileLocalPath = new File(localPath)__        _        if (fileLocalPath.isFile()) {_            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            atmosPath = atmosPath + fileLocalPath.getName()__            resultEntries = new HashMap<>(1)__            try {_                ObjectId uploadedFile = putSingleFile(fileLocalPath, atmosPath)__                if (uploadedFile == null) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                } else {_                    resultEntries.put(atmosPath, AtmosResultCode.OK)__                }__            } catch (Exception ex) {_                resultEntries.put(atmosPath, AtmosResultCode.KO)__            } finally {_                result.setResultEntries(resultEntries)__            }_            return result__        } else {       _            LOG.info("uploading a dir...")__            _            if (atmosEntry != null && !atmosEntry.isDirectory()) {_                throw new AtmosException(atmosPath + " exists on atmos and is not a folder!")__            }_            _            String oldAtmosPath = atmosPath__            _            Collection<File> listFiles = FileUtils.listFiles(fileLocalPath, null, true)__            if (listFiles == null || listFiles.isEmpty()) {_                throw new AtmosException(localPath + " does not contain any files")__            }_            resultEntries = new HashMap<>(listFiles.size())__            for (File file : listFiles) {_                String absPath = file.getAbsolutePath()__                int indexRemainingPath = localPath.length()__                if (!localPath.endsWith("/")) {_                    indexRemainingPath += 1__                }_                String remainingPath = absPath.substring(indexRemainingPath)__                atmosPath = atmosPath + remainingPath__                try {_                    LOG.debug("uploading: {} to {}", fileLocalPath, atmosPath)__                    ObjectId uploadedFile = putSingleFile(file, atmosPath)__                    if (uploadedFile == null) {_                        resultEntries.put(atmosPath, AtmosResultCode.KO)__                    } else {_                        resultEntries.put(atmosPath, AtmosResultCode.OK)__                    }_                } catch (Exception ex) {_                    resultEntries.put(atmosPath, AtmosResultCode.KO)__                }_                atmosPath = oldAtmosPath__            }_            result.setResultEntries(resultEntries)__            return result__        }_    };put,or,upload,a,new,file,or,an,entire,directory,to,atmos,param,local,path,the,file,path,or,the,dir,path,on,the,local,filesystem,param,remote,path,the,remote,path,destination,on,atmos,the,file,already,existing,with,the,same,name,will,be,overridden,return,a,atmos,result,object,reporting,for,each,remote,path,the,result,of,the,operation,throws,atmos,exception;public,atmos,result,put,string,local,path,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,upload,result,map,string,atmos,result,code,result,entries,null,string,atmos,path,remote,path,null,local,path,remote,path,if,atmos,path,ends,with,atmos,path,object,path,atmos,entry,new,object,path,atmos,path,if,atmos,path,equals,if,atmos,apifacade,client,get,system,metadata,atmos,entry,null,throw,new,atmos,exception,atmos,path,does,not,exist,or,cannot,obtain,metadata,file,file,local,path,new,file,local,path,if,file,local,path,is,file,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,atmos,path,atmos,path,file,local,path,get,name,result,entries,new,hash,map,1,try,object,id,uploaded,file,put,single,file,file,local,path,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,finally,result,set,result,entries,result,entries,return,result,else,log,info,uploading,a,dir,if,atmos,entry,null,atmos,entry,is,directory,throw,new,atmos,exception,atmos,path,exists,on,atmos,and,is,not,a,folder,string,old,atmos,path,atmos,path,collection,file,list,files,file,utils,list,files,file,local,path,null,true,if,list,files,null,list,files,is,empty,throw,new,atmos,exception,local,path,does,not,contain,any,files,result,entries,new,hash,map,list,files,size,for,file,file,list,files,string,abs,path,file,get,absolute,path,int,index,remaining,path,local,path,length,if,local,path,ends,with,index,remaining,path,1,string,remaining,path,abs,path,substring,index,remaining,path,atmos,path,atmos,path,remaining,path,try,log,debug,uploading,to,file,local,path,atmos,path,object,id,uploaded,file,put,single,file,file,atmos,path,if,uploaded,file,null,result,entries,put,atmos,path,atmos,result,code,ko,else,result,entries,put,atmos,path,atmos,result,code,ok,catch,exception,ex,result,entries,put,atmos,path,atmos,result,code,ko,atmos,path,old,atmos,path,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult get(String remotePath) throws AtmosException;1422594149;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a AtmosResult object with the content (ByteArrayOutputStream) of_every files inside the remote path._@throws AtmosException;public AtmosResult get(String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<String, ByteArrayOutputStream>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,atmos,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,atmos,exception;public,atmos,result,get,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,string,byte,array,output,stream,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult get(String remotePath) throws AtmosException;1422594149;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a AtmosResult object with the content (ByteArrayOutputStream) of_every files inside the remote path._@throws AtmosException;public AtmosResult get(String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<String, ByteArrayOutputStream>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,atmos,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,atmos,exception;public,atmos,result,get,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,string,byte,array,output,stream,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult get(String remotePath) throws AtmosException;1460967314;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a AtmosResult object with the content (ByteArrayOutputStream) of_every files inside the remote path._@throws AtmosException;public AtmosResult get(String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<String, ByteArrayOutputStream>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,atmos,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,atmos,exception;public,atmos,result,get,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,string,byte,array,output,stream,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult get(String remotePath) throws AtmosException;1523968777;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a AtmosResult object with the content (ByteArrayOutputStream) of_every files inside the remote path._@throws AtmosException;public AtmosResult get(String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,atmos,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,atmos,exception;public,atmos,result,get,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult get(String remotePath) throws AtmosException;1536687142;Get the content of every file inside the remote path.__@param remotePath the remote path where to download from_@return a AtmosResult object with the content (ByteArrayOutputStream) of_every files inside the remote path._@throws AtmosException;public AtmosResult get(String remotePath) throws AtmosException {_        AtmosResult result = new AtmosFileDownloadResult()__        _        Map<String, ByteArrayOutputStream> resultEntries = new HashMap<>()__        _        downloadFilesInFolder(remotePath, resultEntries)__        _        result.setResultEntries(resultEntries)__        return result__    };get,the,content,of,every,file,inside,the,remote,path,param,remote,path,the,remote,path,where,to,download,from,return,a,atmos,result,object,with,the,content,byte,array,output,stream,of,every,files,inside,the,remote,path,throws,atmos,exception;public,atmos,result,get,string,remote,path,throws,atmos,exception,atmos,result,result,new,atmos,file,download,result,map,string,byte,array,output,stream,result,entries,new,hash,map,download,files,in,folder,remote,path,result,entries,result,set,result,entries,result,entries,return,result
AtmosAPIFacade -> public AtmosResult del(String remotePath) throws AtmosException;1422594149;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a AtmosResult object with the result of the delete operation._@throws AtmosException;public AtmosResult del(String remotePath) throws AtmosException {_        AtmosResult result = null__        ObjectPath op = new ObjectPath(remotePath)__        AtmosAPIFacade.client.delete(op)__        result = new AtmosDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,atmos,result,object,with,the,result,of,the,delete,operation,throws,atmos,exception;public,atmos,result,del,string,remote,path,throws,atmos,exception,atmos,result,result,null,object,path,op,new,object,path,remote,path,atmos,apifacade,client,delete,op,result,new,atmos,del,result,result,set,result,entries,remote,path,return,result
AtmosAPIFacade -> public AtmosResult del(String remotePath) throws AtmosException;1422594149;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a AtmosResult object with the result of the delete operation._@throws AtmosException;public AtmosResult del(String remotePath) throws AtmosException {_        AtmosResult result = null__        ObjectPath op = new ObjectPath(remotePath)__        AtmosAPIFacade.client.delete(op)__        result = new AtmosDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,atmos,result,object,with,the,result,of,the,delete,operation,throws,atmos,exception;public,atmos,result,del,string,remote,path,throws,atmos,exception,atmos,result,result,null,object,path,op,new,object,path,remote,path,atmos,apifacade,client,delete,op,result,new,atmos,del,result,result,set,result,entries,remote,path,return,result
AtmosAPIFacade -> public AtmosResult del(String remotePath) throws AtmosException;1460967314;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a AtmosResult object with the result of the delete operation._@throws AtmosException;public AtmosResult del(String remotePath) throws AtmosException {_        AtmosResult result = null__        ObjectPath op = new ObjectPath(remotePath)__        AtmosAPIFacade.client.delete(op)__        result = new AtmosDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,atmos,result,object,with,the,result,of,the,delete,operation,throws,atmos,exception;public,atmos,result,del,string,remote,path,throws,atmos,exception,atmos,result,result,null,object,path,op,new,object,path,remote,path,atmos,apifacade,client,delete,op,result,new,atmos,del,result,result,set,result,entries,remote,path,return,result
AtmosAPIFacade -> public AtmosResult del(String remotePath) throws AtmosException;1523968777;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a AtmosResult object with the result of the delete operation._@throws AtmosException;public AtmosResult del(String remotePath) throws AtmosException {_        AtmosResult result = null__        ObjectPath op = new ObjectPath(remotePath)__        AtmosAPIFacade.client.delete(op)__        result = new AtmosDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,atmos,result,object,with,the,result,of,the,delete,operation,throws,atmos,exception;public,atmos,result,del,string,remote,path,throws,atmos,exception,atmos,result,result,null,object,path,op,new,object,path,remote,path,atmos,apifacade,client,delete,op,result,new,atmos,del,result,result,set,result,entries,remote,path,return,result
AtmosAPIFacade -> public AtmosResult del(String remotePath) throws AtmosException;1536687142;Delete every files and subdirectories inside the remote directory. In_case the remotePath is a file, delete the file.__@param remotePath the remote location to delete_@return a AtmosResult object with the result of the delete operation._@throws AtmosException;public AtmosResult del(String remotePath) throws AtmosException {_        AtmosResult result = null__        ObjectPath op = new ObjectPath(remotePath)__        AtmosAPIFacade.client.delete(op)__        result = new AtmosDelResult()__        result.setResultEntries(remotePath)__        return result__    };delete,every,files,and,subdirectories,inside,the,remote,directory,in,case,the,remote,path,is,a,file,delete,the,file,param,remote,path,the,remote,location,to,delete,return,a,atmos,result,object,with,the,result,of,the,delete,operation,throws,atmos,exception;public,atmos,result,del,string,remote,path,throws,atmos,exception,atmos,result,result,null,object,path,op,new,object,path,remote,path,atmos,apifacade,client,delete,op,result,new,atmos,del,result,result,set,result,entries,remote,path,return,result
