commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;38;;protected AtmosEndpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     AtmosConfiguration configuration = new AtmosConfiguration().     String name = null.     String operation = remaining.     String[] parts = remaining.split("/").     if (parts.length > 1) {         name = parts[0].         operation = parts[1].     }     configuration.setName(name).     configuration.setOperation(AtmosOperation.valueOf(operation)).     // set options from component     configuration.setUri(parameters.get("uri") == null ? this.uri : (String) parameters.get("uri")).     configuration.setSecretKey(parameters.get("secretKey") == null ? this.secretKey : (String) parameters.get("secretKey")).     configuration.setLocalPath((String) parameters.get("localPath")).     configuration.setRemotePath((String) parameters.get("remotePath")).     configuration.setNewRemotePath((String) parameters.get("newRemotePath")).     configuration.setQuery((String) parameters.get("query")).     configuration.setFullTokenId(parameters.get("fullTokenId") == null ? this.fullTokenId : (String) parameters.get("fullTokenId")).     configuration.setEnableSslValidation(this.sslValidation).     // pass validation test     AtmosConfigurationValidator.validate(configuration).     // and then override from parameters     setProperties(configuration, parameters).     return new AtmosEndpoint(uri, this, configuration). }
false;public;0;3;;public String getFullTokenId() {     return fullTokenId. }
true;public;1;3;/**  * The token id to pass to the Atmos client  */ ;/**  * The token id to pass to the Atmos client  */ public void setFullTokenId(String fullTokenId) {     this.fullTokenId = fullTokenId. }
false;public;0;3;;public String getSecretKey() {     return secretKey. }
true;public;1;3;/**  * The secret key to pass to the Atmos client  */ ;/**  * The secret key to pass to the Atmos client  */ public void setSecretKey(String secretKey) {     this.secretKey = secretKey. }
false;public;0;3;;public String getUri() {     return uri. }
true;public;1;3;/**  * The URI of the server for the Atmos client to connect to  */ ;/**  * The URI of the server for the Atmos client to connect to  */ public void setUri(String uri) {     this.uri = uri. }
false;public;0;3;;public boolean isSslValidation() {     return sslValidation. }
true;public;1;3;/**  * Whether the Atmos client should perform SSL validation  */ ;/**  * Whether the Atmos client should perform SSL validation  */ public void setSslValidation(boolean sslValidation) {     this.sslValidation = sslValidation. }
