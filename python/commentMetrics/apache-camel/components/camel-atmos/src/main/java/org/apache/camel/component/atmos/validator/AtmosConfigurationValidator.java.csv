commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;13;/**  * Validate the parameters passed in the incoming url.  *  * @param configuration object containing the parameters.  * @throws AtmosException  */ ;/**  * Validate the parameters passed in the incoming url.  *  * @param configuration object containing the parameters.  * @throws AtmosException  */ public static void validate(AtmosConfiguration configuration) throws AtmosException {     validateCommonProperties(configuration).     AtmosOperation op = configuration.getOperation().     if (op == AtmosOperation.get) {         validateGetOp(configuration).     } else if (op == AtmosOperation.put) {         validatePutOp(configuration).     } else if (op == AtmosOperation.del) {         validateDelOp(configuration).     } else if (op == AtmosOperation.move) {         validateMoveOp(configuration).     } }
false;private,static;1;17;;private static void validateCommonProperties(AtmosConfiguration configuration) throws AtmosException {     if (configuration.getFullTokenId() == null || configuration.getFullTokenId().equals("")) {         throw new AtmosException("option <fullTokenId> is not present or not valid!").     }     if (configuration.getSecretKey() == null || configuration.getSecretKey().equals("")) {         throw new AtmosException("option <secretKey> is not present or not valid!").     }     if (configuration.getUri() == null || configuration.getUri().equals("")) {         throw new AtmosException("option <uri> is not present!").     } else {         try {             new URI(configuration.getUri()).         } catch (URISyntaxException use) {             throw new AtmosException("option <uri> is not valid!", use).         }     } }
false;private,static;1;3;;private static void validateGetOp(AtmosConfiguration configuration) throws AtmosException {     validateRemotePath(configuration.getRemotePath()). }
false;private,static;1;9;;private static void validatePutOp(AtmosConfiguration configuration) throws AtmosException {     validateLocalPath(configuration.getLocalPath()).     // remote path is optional     if (configuration.getRemotePath() != null) {         validateRemotePathForPut(configuration.getRemotePath()).     } else {         // in case remote path is not set, local path is even the remote path so it must be validated as UNIX         validatePathInUnix(configuration.getLocalPath()).     } }
false;private,static;1;3;;private static void validateDelOp(AtmosConfiguration configuration) throws AtmosException {     validateRemotePath(configuration.getRemotePath()). }
false;private,static;1;4;;private static void validateMoveOp(AtmosConfiguration configuration) throws AtmosException {     validateRemotePath(configuration.getRemotePath()).     validateRemotePath(configuration.getNewRemotePath()). }
false;private,static;1;9;;private static void validateLocalPath(String localPath) throws AtmosException {     if (localPath == null || localPath.equals("")) {         throw new AtmosException("option <localPath> is not present or not valid!").     }     File file = new File(localPath).     if (!file.exists()) {         throw new AtmosException("option <localPath> is not an existing file or directory!").     } }
false;private,static;1;6;;private static void validateRemotePath(String remotePath) throws AtmosException {     if (remotePath == null || !remotePath.startsWith(ATMOS_FILE_SEPARATOR)) {         throw new AtmosException("option <remotePath> is not valid!").     }     validatePathInUnix(remotePath). }
false;private,static;1;6;;private static void validateRemotePathForPut(String remotePath) throws AtmosException {     if (!remotePath.startsWith(ATMOS_FILE_SEPARATOR)) {         throw new AtmosException("option <remotePath> is not valid!").     }     validatePathInUnix(remotePath). }
false;private,static;1;6;;private static void validatePathInUnix(String path) throws AtmosException {     Matcher matcher = UNIX_PATH_PATTERN.matcher(path).     if (!matcher.matches()) {         throw new AtmosException(path + " is not a valid path, must be in UNIX form!").     } }
