commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AtmosConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(AtmosConfiguration configuration) {     this.configuration = configuration. }
true;public;0;15;/**  * Create one of the camel producer available based on the configuration  *  * @return the camel producer  * @throws Exception  */ ;/**  * Create one of the camel producer available based on the configuration  *  * @return the camel producer  * @throws Exception  */ public Producer createProducer() throws Exception {     log.debug("resolve producer atmos endpoint {{}}", configuration.getOperation()).     log.debug("resolve producer atmos attached client: {}", configuration.getClient()).     if (configuration.getOperation() == AtmosOperation.put) {         return new AtmosPutProducer(this, configuration).     } else if (this.configuration.getOperation() == AtmosOperation.del) {         return new AtmosDelProducer(this, configuration).     } else if (this.configuration.getOperation() == AtmosOperation.get) {         return new AtmosGetProducer(this, configuration).     } else if (this.configuration.getOperation() == AtmosOperation.move) {         return new AtmosMoveProducer(this, configuration).     } else {         throw new AtmosException("operation specified is not valid for producer!").     } }
true;public;1;13;/**  * Create one of the camel consumer available based on the configuration  *  * @param processor the given processor  * @return the camel consumer  * @throws Exception  */ ;/**  * Create one of the camel consumer available based on the configuration  *  * @param processor the given processor  * @return the camel consumer  * @throws Exception  */ public Consumer createConsumer(Processor processor) throws Exception {     log.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation()).     log.debug("resolve consumer atmos attached client:{}", configuration.getClient()).     AtmosScheduledPollConsumer consumer.     if (this.configuration.getOperation() == AtmosOperation.get) {         consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration).         consumer.setDelay(POLL_CONSUMER_DELAY).         return consumer.     } else {         throw new AtmosException("operation specified is not valid for consumer!").     } }
false;public;0;3;;public boolean isSingleton() {     return true. }
