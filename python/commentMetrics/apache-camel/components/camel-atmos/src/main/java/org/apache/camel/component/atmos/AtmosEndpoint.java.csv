# id;timestamp;commentText;codeText;commentWords;codeWords
AtmosEndpoint -> public Producer createProducer() throws Exception;1422594149;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.info("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.info("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,info,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,info,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1422594149;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.info("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.info("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,info,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,info,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1422687870;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1425140025;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1427402378;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1451237129;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1485947385;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve producer atmos attached client: " + configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1536687142;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {{}}", configuration.getOperation().toString())__        LOG.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1536687571;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {{}}", configuration.getOperation())__        LOG.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1540108158;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        LOG.debug("resolve producer atmos endpoint {{}}", configuration.getOperation())__        LOG.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1540108160;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        log.debug("resolve producer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1540108163;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        log.debug("resolve producer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1547480087;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        log.debug("resolve producer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Producer createProducer() throws Exception;1547620730;Create one of the camel producer available based on the configuration__@return the camel producer_@throws Exception;public Producer createProducer() throws Exception {_        log.debug("resolve producer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve producer atmos attached client: {}", configuration.getClient())__        if (configuration.getOperation() == AtmosOperation.put) {_            return new AtmosPutProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.del) {_            return new AtmosDelProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.get) {_            return new AtmosGetProducer(this, configuration)__        } else if (this.configuration.getOperation() == AtmosOperation.move) {_            return new AtmosMoveProducer(this, configuration)__        } else {_            throw new AtmosException("operation specified is not valid for producer!")__        }_    };create,one,of,the,camel,producer,available,based,on,the,configuration,return,the,camel,producer,throws,exception;public,producer,create,producer,throws,exception,log,debug,resolve,producer,atmos,endpoint,configuration,get,operation,log,debug,resolve,producer,atmos,attached,client,configuration,get,client,if,configuration,get,operation,atmos,operation,put,return,new,atmos,put,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,del,return,new,atmos,del,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,get,return,new,atmos,get,producer,this,configuration,else,if,this,configuration,get,operation,atmos,operation,move,return,new,atmos,move,producer,this,configuration,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,producer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1422594149;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())__        AtmosScheduledPollConsumer consumer = null__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,null,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1422594149;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())__        AtmosScheduledPollConsumer consumer = null__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,null,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1422687870;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1425140025;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1427402378;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1451237129;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1485947385;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {" + configuration.getOperation().toString() + "}")__        LOG.debug("resolve consumer atmos attached client:" + configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1536687142;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation().toString())__        LOG.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,to,string,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1536687571;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation())__        LOG.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1540108158;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        LOG.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation())__        LOG.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1540108160;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        log.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1540108163;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        log.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1547480087;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        log.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
AtmosEndpoint -> public Consumer createConsumer(Processor processor) throws Exception;1547620730;Create one of the camel consumer available based on the configuration__@param processor the given processor_@return the camel consumer_@throws Exception;public Consumer createConsumer(Processor processor) throws Exception {_        log.debug("resolve consumer atmos endpoint {{}}", configuration.getOperation())__        log.debug("resolve consumer atmos attached client:{}", configuration.getClient())___        AtmosScheduledPollConsumer consumer__        if (this.configuration.getOperation() == AtmosOperation.get) {_            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration)__            consumer.setDelay(POLL_CONSUMER_DELAY)__            return consumer__        } else {_            throw new AtmosException("operation specified is not valid for consumer!")__        }_    };create,one,of,the,camel,consumer,available,based,on,the,configuration,param,processor,the,given,processor,return,the,camel,consumer,throws,exception;public,consumer,create,consumer,processor,processor,throws,exception,log,debug,resolve,consumer,atmos,endpoint,configuration,get,operation,log,debug,resolve,consumer,atmos,attached,client,configuration,get,client,atmos,scheduled,poll,consumer,consumer,if,this,configuration,get,operation,atmos,operation,get,consumer,new,atmos,scheduled,poll,get,consumer,this,processor,configuration,consumer,set,delay,return,consumer,else,throw,new,atmos,exception,operation,specified,is,not,valid,for,consumer
