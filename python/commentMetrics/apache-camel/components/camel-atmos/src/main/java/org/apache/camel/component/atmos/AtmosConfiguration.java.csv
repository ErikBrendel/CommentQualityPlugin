commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setClient(AtmosApi client) {     this.client = client. }
false;public;0;3;;public AtmosApi getClient() {     return client. }
true;public;0;15;/**  * Obtain a new instance of AtmosApi client and store it in configuration.  *  * @throws AtmosException  */ ;/**  * Obtain a new instance of AtmosApi client and store it in configuration.  *  * @throws AtmosException  */ public void createClient() throws AtmosException {     AtmosConfig config = null.     try {         config = new AtmosConfig(fullTokenId, secretKey, new URI(uri)).     } catch (URISyntaxException use) {         throw new AtmosException("wrong syntax for Atmos URI!", use).     }     if (!enableSslValidation) {         config.setDisableSslValidation(true).     }     AtmosApi atmosclient = new AtmosApiClient(config).     this.client = atmosclient. }
false;public;0;3;;public String getName() {     return name. }
true;public;1;3;/**  * Atmos name  */ ;/**  * Atmos name  */ public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getSecretKey() {     return secretKey. }
true;public;1;3;/**  * Atmos shared secret  */ ;/**  * Atmos shared secret  */ public void setSecretKey(String secretKey) {     this.secretKey = secretKey. }
false;public;0;3;;public String getLocalPath() {     return localPath. }
true;public;1;3;/**  * Local path to put files  */ ;/**  * Local path to put files  */ public void setLocalPath(String localPath) {     this.localPath = localPath. }
false;public;0;3;;public String getRemotePath() {     return remotePath. }
true;public;1;3;/**  * Where to put files on Atmos  */ ;/**  * Where to put files on Atmos  */ public void setRemotePath(String remotePath) {     this.remotePath = remotePath. }
false;public;0;3;;public String getNewRemotePath() {     return newRemotePath. }
true;public;1;3;/**  * New path on Atmos when moving files  */ ;/**  * New path on Atmos when moving files  */ public void setNewRemotePath(String newRemotePath) {     this.newRemotePath = newRemotePath. }
false;public;0;3;;public String getQuery() {     return query. }
true;public;1;3;/**  * Search query on Atmos  */ ;/**  * Search query on Atmos  */ public void setQuery(String query) {     this.query = query. }
false;public;0;3;;public String getFullTokenId() {     return fullTokenId. }
true;public;1;3;/**  * Atmos client fullTokenId  */ ;/**  * Atmos client fullTokenId  */ public void setFullTokenId(String fullTokenId) {     this.fullTokenId = fullTokenId. }
false;public;0;3;;public AtmosOperation getOperation() {     return operation. }
true;public;1;3;/**  * Operation to perform  */ ;/**  * Operation to perform  */ public void setOperation(AtmosOperation operation) {     this.operation = operation. }
true;public;1;3;/**  * Atomos server uri  */ ;/**  * Atomos server uri  */ public void setUri(String uri) {     this.uri = uri. }
false;public;0;3;;public String getUri() {     return uri. }
false;public;0;3;;public boolean isEnableSslValidation() {     return enableSslValidation. }
true;public;1;3;/**  * Atmos SSL validation  */ ;/**  * Atmos SSL validation  */ public void setEnableSslValidation(boolean enableSslValidation) {     this.enableSslValidation = enableSslValidation. }
