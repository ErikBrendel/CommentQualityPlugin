commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testResult() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result1").     mock.expectedMessageCount(7).     mock.assertIsSatisfied(). }
false;public;0;6;;@Test public void testResult2() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result2").     mock.expectedMessageCount(7).     mock.assertIsSatisfied(). }
false;public;0;6;;@Test public void testResult3() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result3").     mock.expectedMessageCount(4).     mock.assertIsSatisfied(). }
false;protected;1;5;;@Override protected void bindToRegistry(Registry registry) throws Exception {     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z").     registry.bind("myDate", df.parse("2007-11-13 14:35:00 +0100")). }
false;public;0;7;;public void configure() throws Exception {     from("atom:file:src/test/data/feed.atom?splitEntries=true&consumer.delay=500").to("mock:result1").     from("atom:file:src/test/data/feed.atom?splitEntries=true&filter=false&consumer.delay=500").to("mock:result2").     from("atom:file:src/test/data/feed.atom?splitEntries=true&filter=true&lastUpdate=#myDate&consumer.delay=500").to("mock:result3"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("atom:file:src/test/data/feed.atom?splitEntries=true&consumer.delay=500").to("mock:result1").             from("atom:file:src/test/data/feed.atom?splitEntries=true&filter=false&consumer.delay=500").to("mock:result2").             from("atom:file:src/test/data/feed.atom?splitEntries=true&filter=true&lastUpdate=#myDate&consumer.delay=500").to("mock:result3").         }     }. }
