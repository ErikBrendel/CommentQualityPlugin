commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSortedEntries() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:sorted").     mock.expectsAscending(ExpressionBuilder.beanExpression("myBean", "getPubDate")).     mock.expectedMessageCount(10).     mock.setResultWaitTime(15000L).     mock.assertIsSatisfied(). }
false;public;0;8;;@Test public void testUnSortedEntries() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:unsorted").     mock.expectsAscending(ExpressionBuilder.beanExpression("myBean", "getPubDate")).     mock.expectedMessageCount(10).     mock.setResultWaitTime(2000L).     mock.assertIsNotSatisfied(2000L). }
false;protected;1;5;;@Override protected void bindToRegistry(Registry registry) throws Exception {     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z").     registry.bind("myBean", new MyBean()). }
false;public;0;4;;public void configure() throws Exception {     from("atom:file:src/test/data/unsortedfeed.atom?splitEntries=true&sortEntries=true&consumer.delay=50").to("mock:sorted").     from("atom:file:src/test/data/unsortedfeed.atom?splitEntries=true&sortEntries=false&consumer.delay=50").to("mock:unsorted"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("atom:file:src/test/data/unsortedfeed.atom?splitEntries=true&sortEntries=true&consumer.delay=50").to("mock:sorted").             from("atom:file:src/test/data/unsortedfeed.atom?splitEntries=true&sortEntries=false&consumer.delay=50").to("mock:unsorted").         }     }. }
false;public;1;4;;public Date getPubDate(@Body Object body) {     Entry syndEntry = (Entry) body.     return syndEntry.getUpdated(). }
