commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void configure() throws Exception {     from("atom:http://localhost:" + JettyTestServer.getInstance().port + "/?splitEntries=true&consumer.delay=500&username=camel&password=camelPass").to("mock:result1").     from("atom:http://localhost:" + JettyTestServer.getInstance().port + "/?splitEntries=true&filter=false&consumer.delay=500&username=camel&password=camelPass").to("mock:result2").     from("atom:http://localhost:" + JettyTestServer.getInstance().port + "/?splitEntries=true&filter=true&lastUpdate=#myDate&consumer.delay=500&username=camel&password=camelPass").to("mock:result3"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("atom:http://localhost:" + JettyTestServer.getInstance().port + "/?splitEntries=true&consumer.delay=500&username=camel&password=camelPass").to("mock:result1").             from("atom:http://localhost:" + JettyTestServer.getInstance().port + "/?splitEntries=true&filter=false&consumer.delay=500&username=camel&password=camelPass").to("mock:result2").             from("atom:http://localhost:" + JettyTestServer.getInstance().port + "/?splitEntries=true&filter=true&lastUpdate=#myDate&consumer.delay=500&username=camel&password=camelPass").to("mock:result3").         }     }. }
false;public,static;0;4;;@BeforeClass public static void startServer() {     JettyTestServer.getInstance().startServer(). }
false;public,static;0;4;;@AfterClass public static void stopServer() {     JettyTestServer.getInstance().stopServer(). }
