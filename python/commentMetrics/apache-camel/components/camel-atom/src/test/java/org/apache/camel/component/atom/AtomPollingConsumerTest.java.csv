commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testNoSplitEntries() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     Message in = exchange.getIn().     assertNotNull(in).     assertTrue(in.getBody() instanceof List).     assertTrue(in.getHeader(AtomConstants.ATOM_FEED) instanceof Feed).     Feed feed = in.getHeader(AtomConstants.ATOM_FEED, Feed.class).     assertEquals("James Strachan", feed.getAuthor().getName()).     List<?> entries = in.getBody(List.class).     assertEquals(7, entries.size()). }
false;public;0;6;;@Test public void testUsingAtomUriParameter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result2").     mock.expectedMessageCount(1).     mock.assertIsSatisfied(). }
false;public;0;5;;@Test public void testNoCamelParametersInFeedUri() throws Exception {     AtomEndpoint endpoint = context.getEndpoint("atom:file:src/test/data/feed.atom?splitEntries=false", AtomEndpoint.class).     assertEquals("file:src/test/data/feed.atom", endpoint.getFeedUri()). }
false;public;0;6;;public void configure() throws Exception {     from("atom:file:src/test/data/feed.atom?splitEntries=false").to("mock:result").     // this is a bit weird syntax that normally is not used using the feedUri parameter     from("atom:?feedUri=file:src/test/data/feed.atom&splitEntries=false").to("mock:result2"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("atom:file:src/test/data/feed.atom?splitEntries=false").to("mock:result").             // this is a bit weird syntax that normally is not used using the feedUri parameter             from("atom:?feedUri=file:src/test/data/feed.atom&splitEntries=false").to("mock:result2").         }     }. }
