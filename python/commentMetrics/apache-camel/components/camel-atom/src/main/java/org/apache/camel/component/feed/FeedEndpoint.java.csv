commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("FeedProducer is not implemented"). }
false;public;1;16;;public Consumer createConsumer(Processor processor) throws Exception {     ObjectHelper.notNull(feedUri, "feedUri").     FeedPollingConsumer answer.     if (isSplitEntries()) {         answer = createEntryPollingConsumer(this, processor, filter, lastUpdate, throttleEntries).     } else {         answer = createPollingConsumer(this, processor).     }     // ScheduledPollConsumer default delay is 500 millis and that is too often for polling a feed,     // so we override with a new default value. End user can override this value by providing a consumer.delay parameter     answer.setDelay(FeedPollingConsumer.DEFAULT_CONSUMER_DELAY).     configureConsumer(answer).     return answer. }
false;protected,abstract;2;1;;protected abstract FeedPollingConsumer createPollingConsumer(FeedEndpoint feedEndpoint, Processor processor) throws Exception.
false;protected,abstract;5;1;;protected abstract FeedPollingConsumer createEntryPollingConsumer(FeedEndpoint feedEndpoint, Processor processor, boolean filter, Date lastUpdate, boolean throttleEntries) throws Exception.
false;protected;2;7;;protected Exchange createExchangeWithFeedHeader(Object feed, String header) {     Exchange exchange = createExchange().     if (isFeedHeader()) {         exchange.getIn().setHeader(header, feed).     }     return exchange. }
true;public,abstract;1;1;/**  * Creates an Exchange with the entries as the in body.  *  * @param feed   the atom feed  * @return the created exchange  */ ;/**  * Creates an Exchange with the entries as the in body.  *  * @param feed   the atom feed  * @return the created exchange  */ public abstract Exchange createExchange(Object feed).
true;public,abstract;2;1;/**  * Creates an Exchange with the given entry as the in body.  *  * @param feed   the feed  * @param entry  the entry as the in body  * @return the created exchange  */ ;/**  * Creates an Exchange with the given entry as the in body.  *  * @param feed   the feed  * @param entry  the entry as the in body  * @return the created exchange  */ public abstract Exchange createExchange(Object feed, Object entry).
false;protected;0;4;;@Override protected String createEndpointUri() {     return "atom:" + feedUri. }
false;public;0;5;;@Override public String getEndpointKey() {     // use the full endpoint uri because the lenient properties matters as they should be unique based on the feed uri     return getEndpointUri(). }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public String getFeedUri() {     return feedUri. }
true;public;1;3;/**  * The URI to the feed to poll.  */ ;/**  * The URI to the feed to poll.  */ public void setFeedUri(String feedUri) {     this.feedUri = feedUri. }
false;public;0;3;;public boolean isSplitEntries() {     return splitEntries. }
true;public;1;3;/**  * Sets whether or not entries should be sent individually or whether the entire  * feed should be sent as a single message  */ ;/**  * Sets whether or not entries should be sent individually or whether the entire  * feed should be sent as a single message  */ public void setSplitEntries(boolean splitEntries) {     this.splitEntries = splitEntries. }
false;public;0;3;;public Date getLastUpdate() {     return lastUpdate. }
true;public;1;3;/**  * Sets the timestamp to be used for filtering entries from the atom feeds.  * This options is only in conjunction with the splitEntries.  */ ;/**  * Sets the timestamp to be used for filtering entries from the atom feeds.  * This options is only in conjunction with the splitEntries.  */ public void setLastUpdate(Date lastUpdate) {     this.lastUpdate = lastUpdate. }
false;public;0;3;;public boolean isFilter() {     return filter. }
true;public;1;3;/**  * Sets whether to use filtering or not of the entries.  */ ;/**  * Sets whether to use filtering or not of the entries.  */ public void setFilter(boolean filter) {     this.filter = filter. }
true;public;1;3;/**  * Sets whether to add the feed object as a header  */ ;/**  * Sets whether to add the feed object as a header  */ public void setFeedHeader(boolean feedHeader) {     this.feedHeader = feedHeader. }
false;public;0;3;;public boolean isFeedHeader() {     return feedHeader. }
true;public;1;3;/**  * Sets whether to sort entries by published date. Only works when splitEntries = true.  */ ;/**  * Sets whether to sort entries by published date. Only works when splitEntries = true.  */ public void setSortEntries(boolean sortEntries) {     this.sortEntries = sortEntries. }
false;public;0;3;;public boolean isSortEntries() {     return sortEntries. }
false;public;0;4;;public boolean isLenientProperties() {     // true to allow dynamic URI options to be configured and passed to external system for eg. the HttpProducer     return true. }
true;public;1;3;/**  * Sets whether all entries identified in a single feed poll should be delivered immediately. If true, only one  * entry is processed per consumer.delay. Only applicable when splitEntries = true.  */ ;/**  * Sets whether all entries identified in a single feed poll should be delivered immediately. If true, only one  * entry is processed per consumer.delay. Only applicable when splitEntries = true.  */ public void setThrottleEntries(boolean throttleEntries) {     this.throttleEntries = throttleEntries. }
false;public;0;3;;public boolean isThrottleEntries() {     return this.throttleEntries. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * Sets the username to be used for basic authentication when polling from a HTTP feed  */ ;/**  * Sets the username to be used for basic authentication when polling from a HTTP feed  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Sets the password to be used for basic authentication when polling from a HTTP feed  */ ;/**  * Sets the password to be used for basic authentication when polling from a HTTP feed  */ public void setPassword(String password) {     this.password = password. }
