commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;public int poll() throws Exception {     if (feed == null) {         // populate new feed         feed = createFeed().         populateList(feed).     }     int polledMessages = 0.     while (hasNextEntry()) {         Object entry = list.get(entryIndex--).         polledMessages++.         boolean valid = true.         if (entryFilter != null) {             valid = entryFilter.isValidEntry(endpoint, feed, entry).         }         if (valid) {             Exchange exchange = endpoint.createExchange(feed, entry).             getProcessor().process(exchange).             if (this.throttleEntries) {                 // return and wait for the next poll to continue from last time (this consumer is stateful)                 return polledMessages.             }         }     }     // reset feed and list to be able to poll again     feed = null.     resetList().     return polledMessages. }
false;protected,abstract;1;1;;protected abstract EntryFilter createEntryFilter(Date lastUpdate).
false;protected,abstract;0;1;;protected abstract void resetList().
false;protected,abstract;1;1;;protected abstract void populateList(Object feed) throws Exception.
false;private;0;3;;private boolean hasNextEntry() {     return entryIndex >= 0. }
