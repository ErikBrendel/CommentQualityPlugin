commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Gets the Atom parser.  */ ;/**  * Gets the Atom parser.  */ public static Parser getAtomParser() {     return Abdera.getInstance().getParser(). }
true;public,static;1;8;/**  * Parses the given uri and returns the response as a atom feed document.  *  * @param uri the uri for the atom feed.  * @return the document  * @throws IOException    is thrown if error reading from the uri  * @throws ParseException is thrown if the parsing failed  */ ;/**  * Parses the given uri and returns the response as a atom feed document.  *  * @param uri the uri for the atom feed.  * @return the document  * @throws IOException    is thrown if error reading from the uri  * @throws ParseException is thrown if the parsing failed  */ public static Document<Feed> parseDocument(String uri) throws IOException, ParseException {     URL feedUrl = new URL(uri).     URLConnection urlConn = feedUrl.openConnection().     urlConn.setConnectTimeout(60000).     urlConn.setReadTimeout(60000).     InputStream in = urlConn.getInputStream().     return parseInputStream(in). }
false;public,static;3;10;;public static Document<Feed> parseDocument(String uri, String username, String password) throws IOException {     URL feedUrl = new URL(uri).     HttpURLConnection httpcon = (HttpURLConnection) feedUrl.openConnection().     httpcon.setConnectTimeout(60000).     httpcon.setReadTimeout(60000).     String encoding = Base64.encodeBase64String(username.concat(":").concat(password).getBytes()).     httpcon.setRequestProperty("Authorization", "Basic " + encoding).     InputStream in = httpcon.getInputStream().     return parseInputStream(in). }
false;private,static;1;11;;private static Document<Feed> parseInputStream(InputStream in) throws ParseException {     Parser parser = getAtomParser().     // set the thread context loader with the ParserClassLoader     ClassLoader old = Thread.currentThread().getContextClassLoader().     try {         Thread.currentThread().setContextClassLoader(parser.getClass().getClassLoader()).         return parser.parse(in).     } finally {         Thread.currentThread().setContextClassLoader(old).     } }
