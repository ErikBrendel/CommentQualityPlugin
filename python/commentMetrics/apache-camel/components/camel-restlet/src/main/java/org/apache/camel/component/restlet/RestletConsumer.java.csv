commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RestletEndpoint getEndpoint() {     return (RestletEndpoint) super.getEndpoint(). }
false;public;2;36;;@Override public void handle(Request request, Response response) {     // must call super according to restlet documentation     super.handle(request, response).     log.debug("Consumer restlet handle request method: {}", request.getMethod()).     Exchange exchange = null.     try {         // we want to handle the UoW         exchange = getEndpoint().createExchange().         createUoW(exchange).         RestletBinding binding = getEndpoint().getRestletBinding().         binding.populateExchangeFromRestletRequest(request, response, exchange).         try {             getProcessor().process(exchange).         } catch (Exception e) {             exchange.setException(e).         }         binding.populateRestletResponseFromExchange(exchange, response).         // resetlet will call the callback when its done sending where it would be safe         // to call doneUoW         Uniform callback = newResponseUniform(exchange).         response.setOnError(callback).         response.setOnSent(callback).     } catch (Throwable e) {         getExceptionHandler().handleException("Error processing request", exchange, e).         if (exchange != null) {             doneUoW(exchange).         }     } }
false;protected;0;40;;protected Restlet createRestlet() {     return new Restlet() {          @Override         public void handle(Request request, Response response) {             // must call super according to restlet documentation             super.handle(request, response).             log.debug("Consumer restlet handle request method: {}", request.getMethod()).             Exchange exchange = null.             try {                 // we want to handle the UoW                 exchange = getEndpoint().createExchange().                 createUoW(exchange).                 RestletBinding binding = getEndpoint().getRestletBinding().                 binding.populateExchangeFromRestletRequest(request, response, exchange).                 try {                     getProcessor().process(exchange).                 } catch (Exception e) {                     exchange.setException(e).                 }                 binding.populateRestletResponseFromExchange(exchange, response).                 // resetlet will call the callback when its done sending where it would be safe                 // to call doneUoW                 Uniform callback = newResponseUniform(exchange).                 response.setOnError(callback).                 response.setOnSent(callback).             } catch (Throwable e) {                 getExceptionHandler().handleException("Error processing request", exchange, e).                 if (exchange != null) {                     doneUoW(exchange).                 }             }         }     }. }
false;public;2;6;;@Override public void handle(Request request, Response response) {     if (exchange != null) {         doneUoW(exchange).     } }
true;private;1;10;/**  * Creates a new {@link org.restlet.Uniform} callback that restlet calls when its done sending the reply message.  * <p/>  * We use this to defer done on the exchange {@link org.apache.camel.spi.UnitOfWork} where resources is safe to be  * cleaned up as part of the done process.  */ ;/**  * Creates a new {@link org.restlet.Uniform} callback that restlet calls when its done sending the reply message.  * <p/>  * We use this to defer done on the exchange {@link org.apache.camel.spi.UnitOfWork} where resources is safe to be  * cleaned up as part of the done process.  */ private Uniform newResponseUniform(final Exchange exchange) {     return new Uniform() {          @Override         public void handle(Request request, Response response) {             if (exchange != null) {                 doneUoW(exchange).             }         }     }. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     restlet = createRestlet().     getEndpoint().connect(this).     restlet.start(). }
false;public;0;8;;@Override public void doStop() throws Exception {     getEndpoint().disconnect(this).     if (restlet != null) {         restlet.stop().     }     super.doStop(). }
false;public;0;3;;public Restlet getRestlet() {     return restlet. }
