# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request, Exchange exchange);1235749802;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request, Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class)__        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,exchange,get,in,get,header,restlet,constants,string,class,string,password,exchange,get,in,get,header,restlet,constants,string,class,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request, Exchange exchange);1236909734;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request, Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class)__        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,exchange,get,in,get,header,restlet,constants,string,class,string,password,exchange,get,in,get,header,restlet,constants,string,class,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request, Exchange exchange);1238035325;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request, Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class)__        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,exchange,get,in,get,header,restlet,constants,string,class,string,password,exchange,get,in,get,header,restlet,constants,string,class,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request, Exchange exchange);1240935335;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request, Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class)__        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,exchange,get,in,get,header,restlet,constants,string,class,string,password,exchange,get,in,get,header,restlet,constants,string,class,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request, Exchange exchange);1241770720;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request, Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class)__        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,exchange,get,in,get,header,restlet,constants,string,class,string,password,exchange,get,in,get,header,restlet,constants,string,class,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1230651400;populateExchangeFromRestletResponse;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            LOG.warn("Exchange is incapable of receiving response")__        }_    };populate,exchange,from,restlet,response;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,log,warn,exchange,is,incapable,of,receiving,response
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1230693478;populateExchangeFromRestletResponse;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            LOG.warn("Exchange is incapable of receiving response")__        }_    };populate,exchange,from,restlet,response;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,log,warn,exchange,is,incapable,of,receiving,response
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1230777350;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " _                    + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1232600323;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " _                    + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1233720388;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " _                    + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1234242511;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " _                    + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1234472056;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " _                    + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange,             Response response) throws IOException;1235710502;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange,_            Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " _                    + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1230651400;populateExchangeFromRestletRequest;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!entry.getKey().startsWith("org.restlet.")) {_                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        Form headers = (Form) request.getAttributes().get("org.restlet.http.headers")__        if (headers != null) {_            for (Map.Entry<String, String> entry : headers.getValuesMap().entrySet()) {_                if (!entry.getKey().startsWith("org.restlet.")_                        && !entry.getKey().equals("Host")_                        && !entry.getKey().equals("User-Agent")_                        && !entry.getKey().equals("Content-Length")_                        && !entry.getKey().equals("Content-Type")_                        && !entry.getKey().equals("Connection")_                        && !entry.getKey().equals("Accept")) {_                    exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request header: " _                                + entry.getKey() + " value: " + entry.getValue())__                    }_                }_            }_        }_        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap()_                    .entrySet()) {_                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        Object body = form.getValuesMap().get("camel.body")__        exchange.getIn().setBody(body)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet request body: " + body)__        }_    };populate,exchange,from,restlet,request;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,entry,get,key,starts,with,org,restlet,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,form,headers,form,request,get,attributes,get,org,restlet,http,headers,if,headers,null,for,map,entry,string,string,entry,headers,get,values,map,entry,set,if,entry,get,key,starts,with,org,restlet,entry,get,key,equals,host,entry,get,key,equals,user,agent,entry,get,key,equals,content,length,entry,get,key,equals,content,type,entry,get,key,equals,connection,entry,get,key,equals,accept,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,object,body,form,get,values,map,get,camel,body,exchange,get,in,set,body,body,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,body
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1230693478;populateExchangeFromRestletRequest;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!entry.getKey().startsWith("org.restlet.")) {_                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        Form headers = (Form) request.getAttributes().get("org.restlet.http.headers")__        if (headers != null) {_            for (Map.Entry<String, String> entry : headers.getValuesMap().entrySet()) {_                if (!entry.getKey().startsWith("org.restlet.")_                        && !entry.getKey().equals("Host")_                        && !entry.getKey().equals("User-Agent")_                        && !entry.getKey().equals("Content-Length")_                        && !entry.getKey().equals("Content-Type")_                        && !entry.getKey().equals("Connection")_                        && !entry.getKey().equals("Accept")) {_                    exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request header: " _                                + entry.getKey() + " value: " + entry.getValue())__                    }_                }_            }_        }_        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap()_                    .entrySet()) {_                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        Object body = form.getValuesMap().get("camel.body")__        exchange.getIn().setBody(body)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet request body: " + body)__        }_    };populate,exchange,from,restlet,request;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,entry,get,key,starts,with,org,restlet,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,form,headers,form,request,get,attributes,get,org,restlet,http,headers,if,headers,null,for,map,entry,string,string,entry,headers,get,values,map,entry,set,if,entry,get,key,starts,with,org,restlet,entry,get,key,equals,host,entry,get,key,equals,user,agent,entry,get,key,equals,content,length,entry,get,key,equals,content,type,entry,get,key,equals,connection,entry,get,key,equals,accept,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,object,body,form,get,values,map,get,camel,body,exchange,get,in,set,body,body,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,body
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1230777350;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }__        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                if (CAMEL_REQUEST.equals(entry.getKey())) {_                    exchange.getIn().setBody(entry.getValue())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                            entry.getValue())) {__                        exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: " _                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,equals,entry,get,key,exchange,get,in,set,body,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1232600323;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    exchange.getIn().setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                            entry.getValue())) {__                        exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: " _                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_        _    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,exchange,get,in,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1233720388;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        if (!request.isEntityAvailable()) {_            return__        }_        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    exchange.getIn().setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                            entry.getValue())) {__                        exchange.getIn().setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: " _                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_        _    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,exchange,get,in,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,in,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1234242511;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }_        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                            entry.getValue())) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: " _                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }        _    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1234472056;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }_        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                            entry.getValue())) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: " _                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }        _    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request,             Exchange exchange) throws Exception;1235710502;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request,_            Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }_        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                            entry.getValue())) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: " _                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }        _    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1230651400;populateRestletResponseFromExchange;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        Object body = exchange.getOut().getBody()__        MediaType mediaType = MediaType.TEXT_PLAIN__        if (body instanceof String) {_            mediaType = MediaType.TEXT_PLAIN__        } else if (body instanceof StringSource || body instanceof DOMSource) {_            mediaType = MediaType.TEXT_XML__        }_        _        String text = exchange.getOut().getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__        exchange.getIn().setBody(body)__    };populate,restlet,response,from,exchange;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,object,body,exchange,get,out,get,body,media,type,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,string,text,exchange,get,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type,exchange,get,in,set,body,body
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1230693478;populateRestletResponseFromExchange;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        Object body = exchange.getOut().getBody()__        MediaType mediaType = MediaType.TEXT_PLAIN__        if (body instanceof String) {_            mediaType = MediaType.TEXT_PLAIN__        } else if (body instanceof StringSource || body instanceof DOMSource) {_            mediaType = MediaType.TEXT_XML__        }_        _        String text = exchange.getOut().getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__        exchange.getIn().setBody(body)__    };populate,restlet,response,from,exchange;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,object,body,exchange,get,out,get,body,media,type,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,string,text,exchange,get,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type,exchange,get,in,set,body,body
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1230777350;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        Object body = exchange.getOut().getBody()__        MediaType mediaType = MediaType.TEXT_PLAIN__        if (body instanceof String) {_            mediaType = MediaType.TEXT_PLAIN__        } else if (body instanceof StringSource || body instanceof DOMSource) {_            mediaType = MediaType.TEXT_XML__        }_                _        for (Map.Entry<String, Object> entry : exchange.getOut().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = exchange.getOut().getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,object,body,exchange,get,out,get,body,media,type,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,for,map,entry,string,object,entry,exchange,get,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,exchange,get,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1232600323;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        Object body = exchange.getOut().getBody()__        MediaType mediaType = MediaType.TEXT_PLAIN__        if (body instanceof String) {_            mediaType = MediaType.TEXT_PLAIN__        } else if (body instanceof StringSource || body instanceof DOMSource) {_            mediaType = MediaType.TEXT_XML__        }_                _        for (Map.Entry<String, Object> entry : exchange.getOut().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = exchange.getOut().getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,object,body,exchange,get,out,get,body,media,type,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,for,map,entry,string,object,entry,exchange,get,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,exchange,get,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1233720388;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        _        _        Message out = exchange.getOut()__        MediaType mediaType = out.getHeader(RestletConstants.MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1234242511;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        _        _        Message out = exchange.getOut()__        MediaType mediaType = out.getHeader(RestletConstants.MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1234472056;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        _        _        Message out = exchange.getOut()__        MediaType mediaType = out.getHeader(RestletConstants.MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange,             Response response);1235710502;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange,_            Response response) {_        _        Message out = null__        if (exchange.isFailed()) {_            _            response.setStatus(Status.valueOf(500))__            out = exchange.getFault(false)__            if (out == null) {_                Throwable t = exchange.getException()__                if (t != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    t.printStackTrace(pw)__                    response.setEntity(sw.toString(), MediaType.TEXT_PLAIN)__                    return__                }_            } _        } else {_            out = exchange.getOut()__        }_        _        _        MediaType mediaType = out.getHeader(RestletConstants.MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,null,if,exchange,is,failed,response,set,status,status,value,of,500,out,exchange,get,fault,false,if,out,null,throwable,t,exchange,get,exception,if,t,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,t,print,stack,trace,pw,response,set,entity,sw,to,string,media,type,return,else,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException;1235749802;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException;1236909734;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue())) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException;1238035325;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), exchange)) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException;1240935335;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), exchange)) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException;1241770720;Populate Camel message from Restlet response__@param exchange to be populated_@param response message to be copied from_@throws IOException;public void populateExchangeFromRestletResponse(Exchange exchange, Response response) throws IOException {_        _        for (Map.Entry<String, Object> entry : response.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue(), exchange)) {_                exchange.getOut().setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet response header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }__        String text = response.getEntity().getText()__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate exchange from Restlet response: " + text)__        }_        _        if (exchange.getPattern().isOutCapable()) {_            exchange.getOut().setBody(text)__        } else {_            throw new RuntimeCamelException("Exchange is incapable of receiving response: " + exchange)__        }_    };populate,camel,message,from,restlet,response,param,exchange,to,be,populated,param,response,message,to,be,copied,from,throws,ioexception;public,void,populate,exchange,from,restlet,response,exchange,exchange,response,response,throws,ioexception,for,map,entry,string,object,entry,response,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,exchange,get,out,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,header,entry,get,key,value,entry,get,value,string,text,response,get,entity,get,text,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,response,text,if,exchange,get,pattern,is,out,capable,exchange,get,out,set,body,text,else,throw,new,runtime,camel,exception,exchange,is,incapable,of,receiving,response,exchange
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1230651400;populateRestletRequestFromExchange;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        form.add("camel.body", body)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            form.add(entry.getKey(), entry.getValue().toString())__            if (LOG.isDebugEnabled()) {_                LOG.debug("Populate Restlet request from exchange header: " _                        + entry.getKey() + " value: " + entry.getValue())__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getProperties().entrySet()) {_            form.add(entry.getKey(), entry.getValue().toString())__            if (LOG.isDebugEnabled()) {_                LOG.debug("Populate Restlet request from exchange header: " _                        + entry.getKey() + " value: " + entry.getValue())__            }_        }_        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,exchange;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,camel,body,body,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,for,map,entry,string,object,entry,exchange,get,properties,entry,set,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1230693478;populateRestletRequestFromExchange;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        form.add("camel.body", body)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        String login = (String) exchange.getIn().removeHeader(_                RestletConstants.LOGIN)__        String password = (String) exchange.getIn().removeHeader(_                RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            form.add(entry.getKey(), entry.getValue().toString())__            if (LOG.isDebugEnabled()) {_                LOG.debug("Populate Restlet request from exchange header: " _                        + entry.getKey() + " value: " + entry.getValue())__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getProperties().entrySet()) {_            form.add(entry.getKey(), entry.getValue().toString())__            if (LOG.isDebugEnabled()) {_                LOG.debug("Populate Restlet request from exchange header: " _                        + entry.getKey() + " value: " + entry.getValue())__            }_        }_        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,exchange;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,camel,body,body,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,remove,header,restlet,constants,login,string,password,string,exchange,get,in,remove,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,for,map,entry,string,object,entry,exchange,get,properties,entry,set,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1230777350;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        form.add(CAMEL_REQUEST, body)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = (String) exchange.getIn().getHeader(RestletConstants.LOGIN)__        String password = (String) exchange.getIn().getHeader(RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,get,header,restlet,constants,login,string,password,string,exchange,get,in,get,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1232600323;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = (String) exchange.getIn().getHeader(RestletConstants.LOGIN)__        String password = (String) exchange.getIn().getHeader(RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,get,header,restlet,constants,login,string,password,string,exchange,get,in,get,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1233720388;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = (String) exchange.getIn().getHeader(RestletConstants.LOGIN)__        String password = (String) exchange.getIn().getHeader(RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,get,header,restlet,constants,login,string,password,string,exchange,get,in,get,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1234242511;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = (String) exchange.getIn().getHeader(RestletConstants.LOGIN)__        String password = (String) exchange.getIn().getHeader(RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,get,header,restlet,constants,login,string,password,string,exchange,get,in,get,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1234472056;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = (String) exchange.getIn().getHeader(RestletConstants.LOGIN)__        String password = (String) exchange.getIn().getHeader(RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,get,header,restlet,constants,login,string,password,string,exchange,get,in,get,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateRestletRequestFromExchange(Request request,             Exchange exchange);1235710502;Populate Restlet Request from Camel message__@param request to be populated_@param exchange message to be copied from;public void populateRestletRequestFromExchange(Request request,_            Exchange exchange) {_        request.setReferrerRef("camel-restlet")__        String body = exchange.getIn().getBody(String.class)__        Form form = new Form()__        _        form.add(body, null)__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet request from exchange body: " + body)__        }_        _        _        String login = (String) exchange.getIn().getHeader(RestletConstants.LOGIN)__        String password = (String) exchange.getIn().getHeader(RestletConstants.PASSWORD)__          _        if (login != null && password != null) {_            ChallengeResponse authentication = new ChallengeResponse(_                    ChallengeScheme.HTTP_BASIC, login, password)__            request.setChallengeResponse(authentication)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Basic HTTP Authentication has been applied")__            }_        }_        _        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), _                    entry.getValue())) {_                if (entry.getKey().startsWith("org.restlet.")) {_                    _                    request.getAttributes().put(entry.getKey(), entry.getValue())__                } else {_                    _                    form.add(entry.getKey(), entry.getValue().toString())_   _                }_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet request from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        request.setEntity(form.getWebRepresentation())__    };populate,restlet,request,from,camel,message,param,request,to,be,populated,param,exchange,message,to,be,copied,from;public,void,populate,restlet,request,from,exchange,request,request,exchange,exchange,request,set,referrer,ref,camel,restlet,string,body,exchange,get,in,get,body,string,class,form,form,new,form,form,add,body,null,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,body,body,string,login,string,exchange,get,in,get,header,restlet,constants,login,string,password,string,exchange,get,in,get,header,restlet,constants,password,if,login,null,password,null,challenge,response,authentication,new,challenge,response,challenge,scheme,login,password,request,set,challenge,response,authentication,if,log,is,debug,enabled,log,debug,basic,http,authentication,has,been,applied,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,if,entry,get,key,starts,with,org,restlet,request,get,attributes,put,entry,get,key,entry,get,value,else,form,add,entry,get,key,entry,get,value,to,string,if,log,is,debug,enabled,log,debug,populate,restlet,request,from,exchange,header,entry,get,key,value,entry,get,value,request,set,entity,form,get,web,representation
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception;1235749802;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.RESTLET_QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }__        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),_                            entry.getValue())) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: "_                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception;1236909734;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue())) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.RESTLET_QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }__        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),_                            entry.getValue())) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: "_                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception;1238035325;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue(), exchange)) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.RESTLET_QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }__        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),_                            entry.getValue(), exchange)) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: "_                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception;1240935335;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue(), exchange)) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.RESTLET_QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }__        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),_                            entry.getValue(), exchange)) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: "_                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception;1241770720;Populate Camel message from Restlet request__@param request message to be copied from_@param exchange to be populated_@throws Exception;public void populateExchangeFromRestletRequest(Request request, Exchange exchange) throws Exception {__        Message inMessage = exchange.getIn()__        _        for (Map.Entry<String, Object> entry : request.getAttributes().entrySet()) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                    entry.getValue(), exchange)) {_                _                inMessage.setHeader(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate exchange from Restlet request header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }__            }_        }_        _        _        String query = request.getResourceRef().getQuery()__        if (null != query) {_            inMessage.setHeader(RestletConstants.RESTLET_QUERY_STRING, query)__        }__        if (!request.isEntityAvailable()) {_            return__        }__        _        Form form = new Form(request.getEntity())__        if (form != null) {_            for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {_                _                if (entry.getValue() == null) {_                    inMessage.setBody(entry.getKey())__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Populate exchange from Restlet request body: " + entry.getValue())__                    }_                } else {_                    if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),_                            entry.getValue(), exchange)) {__                        inMessage.setHeader(entry.getKey(), entry.getValue())__                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Populate exchange from Restlet request user header: "_                                    + entry.getKey() + " value: " + entry.getValue())__                        }_                    }_                }_            }_        }_    };populate,camel,message,from,restlet,request,param,request,message,to,be,copied,from,param,exchange,to,be,populated,throws,exception;public,void,populate,exchange,from,restlet,request,request,request,exchange,exchange,throws,exception,message,in,message,exchange,get,in,for,map,entry,string,object,entry,request,get,attributes,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,header,entry,get,key,value,entry,get,value,string,query,request,get,resource,ref,get,query,if,null,query,in,message,set,header,restlet,constants,query,if,request,is,entity,available,return,form,form,new,form,request,get,entity,if,form,null,for,map,entry,string,string,entry,form,get,values,map,entry,set,if,entry,get,value,null,in,message,set,body,entry,get,key,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,body,entry,get,value,else,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,in,message,set,header,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,exchange,from,restlet,request,user,header,entry,get,key,value,entry,get,value
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange, Response response);1235749802;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange, Response response) {_        _        Message out__        if (exchange.isFailed()) {_            _            response.setStatus(Status.valueOf(500))__            out = exchange.getFault(false)__            if (out == null) {_                Throwable t = exchange.getException()__                if (t != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    t.printStackTrace(pw)__                    response.setEntity(sw.toString(), MediaType.TEXT_PLAIN)__                    return__                }_            } _        } else {_            out = exchange.getOut()__        }_        _        _        MediaType mediaType = out.getHeader(RestletConstants.RESTLET_MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESTLET_RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,if,exchange,is,failed,response,set,status,status,value,of,500,out,exchange,get,fault,false,if,out,null,throwable,t,exchange,get,exception,if,t,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,t,print,stack,trace,pw,response,set,entity,sw,to,string,media,type,return,else,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange, Response response);1236909734;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange, Response response) {_        _        Message out__        if (exchange.isFailed()) {_            _            response.setStatus(Status.valueOf(500))__            out = exchange.getFault(false)__            if (out == null) {_                Throwable t = exchange.getException()__                if (t != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    t.printStackTrace(pw)__                    response.setEntity(sw.toString(), MediaType.TEXT_PLAIN)__                    return__                }_            } _        } else {_            out = exchange.getOut()__        }_             _        _        MediaType mediaType = out.getHeader(RestletConstants.RESTLET_MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESTLET_RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue())) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__        _        if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {_            response.getEntity().setCharacterSet(CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME, _                                                                                           String.class)))__        } _    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,if,exchange,is,failed,response,set,status,status,value,of,500,out,exchange,get,fault,false,if,out,null,throwable,t,exchange,get,exception,if,t,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,t,print,stack,trace,pw,response,set,entity,sw,to,string,media,type,return,else,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type,if,exchange,get,property,exchange,null,response,get,entity,set,character,set,character,set,value,of,exchange,get,property,exchange,string,class
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange, Response response);1238035325;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange, Response response) {_        _        Message out__        if (exchange.isFailed()) {_            _            response.setStatus(Status.valueOf(500))__            out = exchange.getFault(false)__            if (out == null) {_                Throwable t = exchange.getException()__                if (t != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    t.printStackTrace(pw)__                    response.setEntity(sw.toString(), MediaType.TEXT_PLAIN)__                    return__                }_            } _        } else {_            out = exchange.getOut()__        }_             _        _        MediaType mediaType = out.getHeader(RestletConstants.RESTLET_MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESTLET_RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__        _        if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {_            response.getEntity().setCharacterSet(CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME, _                                                                                           String.class)))__        } _    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,if,exchange,is,failed,response,set,status,status,value,of,500,out,exchange,get,fault,false,if,out,null,throwable,t,exchange,get,exception,if,t,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,t,print,stack,trace,pw,response,set,entity,sw,to,string,media,type,return,else,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type,if,exchange,get,property,exchange,null,response,get,entity,set,character,set,character,set,value,of,exchange,get,property,exchange,string,class
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange, Response response);1240935335;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange, Response response) {_        _        Message out__        if (exchange.isFailed()) {_            _            response.setStatus(Status.valueOf(500))__            if (exchange.hasFault()) {_                out = exchange.getFault()__            } else {_                _                Exception t = exchange.getException()__                StringWriter sw = new StringWriter()__                PrintWriter pw = new PrintWriter(sw)__                t.printStackTrace(pw)__                response.setEntity(sw.toString(), MediaType.TEXT_PLAIN)__                return__            }_        } else {_            out = exchange.getOut()__        }_             _        _        MediaType mediaType = out.getHeader(RestletConstants.RESTLET_MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESTLET_RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__        _        if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {_            response.getEntity().setCharacterSet(CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME, _                                                                                           String.class)))__        } _    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,if,exchange,is,failed,response,set,status,status,value,of,500,if,exchange,has,fault,out,exchange,get,fault,else,exception,t,exchange,get,exception,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,t,print,stack,trace,pw,response,set,entity,sw,to,string,media,type,return,else,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type,if,exchange,get,property,exchange,null,response,get,entity,set,character,set,character,set,value,of,exchange,get,property,exchange,string,class
DefaultRestletBinding -> public void populateRestletResponseFromExchange(Exchange exchange, Response response);1241770720;Populate Restlet request from Camel message__@param exchange message to be copied from_@param response to be populated;public void populateRestletResponseFromExchange(Exchange exchange, Response response) {_        _        Message out__        if (exchange.isFailed()) {_            _            response.setStatus(Status.valueOf(500))__            if (exchange.hasFault()) {_                out = exchange.getFault()__            } else {_                _                Exception t = exchange.getException()__                StringWriter sw = new StringWriter()__                PrintWriter pw = new PrintWriter(sw)__                t.printStackTrace(pw)__                response.setEntity(sw.toString(), MediaType.TEXT_PLAIN)__                return__            }_        } else {_            out = exchange.getOut()__        }_             _        _        MediaType mediaType = out.getHeader(RestletConstants.RESTLET_MEDIA_TYPE, MediaType.class)__        if (mediaType == null) {_            Object body = out.getBody()__            mediaType = MediaType.TEXT_PLAIN__            if (body instanceof String) {_                mediaType = MediaType.TEXT_PLAIN__            } else if (body instanceof StringSource || body instanceof DOMSource) {_                mediaType = MediaType.TEXT_XML__            }_        }_                _        _        Integer responseCode = out.getHeader(RestletConstants.RESTLET_RESPONSE_CODE, Integer.class)__        if (responseCode != null) {_            response.setStatus(Status.valueOf(responseCode))__        }__        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {_            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {_                response.getAttributes().put(entry.getKey(), entry.getValue())__                if (LOG.isDebugEnabled()) {_                    LOG.debug("Populate Restlet response from exchange header: " _                            + entry.getKey() + " value: " + entry.getValue())__                }_            }_        }_        _        String text = out.getBody(String.class)__        if (LOG.isDebugEnabled()) {_            LOG.debug("Populate Restlet response from exchange body: " + text)__        }_        response.setEntity(text, mediaType)__        _        if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {_            response.getEntity().setCharacterSet(CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME, _                                                                                           String.class)))__        } _    };populate,restlet,request,from,camel,message,param,exchange,message,to,be,copied,from,param,response,to,be,populated;public,void,populate,restlet,response,from,exchange,exchange,exchange,response,response,message,out,if,exchange,is,failed,response,set,status,status,value,of,500,if,exchange,has,fault,out,exchange,get,fault,else,exception,t,exchange,get,exception,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,t,print,stack,trace,pw,response,set,entity,sw,to,string,media,type,return,else,out,exchange,get,out,media,type,media,type,out,get,header,restlet,constants,media,type,class,if,media,type,null,object,body,out,get,body,media,type,media,type,if,body,instanceof,string,media,type,media,type,else,if,body,instanceof,string,source,body,instanceof,domsource,media,type,media,type,integer,response,code,out,get,header,restlet,constants,integer,class,if,response,code,null,response,set,status,status,value,of,response,code,for,map,entry,string,object,entry,out,get,headers,entry,set,if,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,exchange,response,get,attributes,put,entry,get,key,entry,get,value,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,header,entry,get,key,value,entry,get,value,string,text,out,get,body,string,class,if,log,is,debug,enabled,log,debug,populate,restlet,response,from,exchange,body,text,response,set,entity,text,media,type,if,exchange,get,property,exchange,null,response,get,entity,set,character,set,character,set,value,of,exchange,get,property,exchange,string,class
