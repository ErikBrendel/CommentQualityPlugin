commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testProducerNoSession() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("{New New World}", "{New New World}").     template.sendBodyAndHeader("direct:start", "{World}", Exchange.CONTENT_TYPE, "application/json").     template.sendBodyAndHeader("direct:start", "{World}", Exchange.CONTENT_TYPE, "application/json").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testProducerInstanceSession() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("{Old New World}", "{Old Old World}").     template.sendBodyAndHeader("direct:instance", "{World}", Exchange.CONTENT_TYPE, "application/json").     template.sendBodyAndHeader("direct:instance", "{World}", Exchange.CONTENT_TYPE, "application/json").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Test public void testProducerExchangeSession() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("{Old New World}", "{Old New World}").     template.sendBodyAndHeader("direct:exchange", "{World}", Exchange.CONTENT_TYPE, "application/json").     template.sendBodyAndHeader("direct:exchange", "{World}", Exchange.CONTENT_TYPE, "application/json").     assertMockEndpointsSatisfied(). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndiRegistry = super.createRegistry().     jndiRegistry.bind("instanceCookieHandler", new InstanceCookieHandler()).     jndiRegistry.bind("exchangeCookieHandler", new ExchangeCookieHandler()).     return jndiRegistry. }
false;public;1;16;;public void process(Exchange exchange) throws Exception {     HttpMessage message = exchange.getIn(HttpMessage.class).     HttpSession session = message.getRequest().getSession().     String body = message.getBody(String.class).     if (body.length() > 2) {         body = body.substring(1, body.length() - 1).     }     if ("bar".equals(session.getAttribute("foo"))) {         body = "{Old " + body + "}".     } else {         session.setAttribute("foo", "bar").         body = "{New " + body + "}".     }     exchange.getOut().setBody(body).     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/json"). }
false;public;0;37;;@Override public void configure() throws Exception {     from("direct:start").to(url).to(url).to("mock:result").     from("direct:instance").to(url + "&cookieHandler=#instanceCookieHandler").to(url + "&cookieHandler=#instanceCookieHandler").to("mock:result").     from("direct:exchange").to(url + "&cookieHandler=#exchangeCookieHandler").to(url + "&cookieHandler=#exchangeCookieHandler").to("mock:result").     from("jetty://http://127.0.0.1:" + portNum + "/session?sessionSupport=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             HttpMessage message = exchange.getIn(HttpMessage.class).             HttpSession session = message.getRequest().getSession().             String body = message.getBody(String.class).             if (body.length() > 2) {                 body = body.substring(1, body.length() - 1).             }             if ("bar".equals(session.getAttribute("foo"))) {                 body = "{Old " + body + "}".             } else {                 session.setAttribute("foo", "bar").                 body = "{New " + body + "}".             }             exchange.getOut().setBody(body).             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/json").         }     }). }
false;protected;0;42;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to(url).to(url).to("mock:result").             from("direct:instance").to(url + "&cookieHandler=#instanceCookieHandler").to(url + "&cookieHandler=#instanceCookieHandler").to("mock:result").             from("direct:exchange").to(url + "&cookieHandler=#exchangeCookieHandler").to(url + "&cookieHandler=#exchangeCookieHandler").to("mock:result").             from("jetty://http://127.0.0.1:" + portNum + "/session?sessionSupport=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     HttpMessage message = exchange.getIn(HttpMessage.class).                     HttpSession session = message.getRequest().getSession().                     String body = message.getBody(String.class).                     if (body.length() > 2) {                         body = body.substring(1, body.length() - 1).                     }                     if ("bar".equals(session.getAttribute("foo"))) {                         body = "{Old " + body + "}".                     } else {                         session.setAttribute("foo", "bar").                         body = "{New " + body + "}".                     }                     exchange.getOut().setBody(body).                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/json").                 }             }).         }     }. }
