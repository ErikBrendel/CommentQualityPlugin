commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testRestletPostPojoError() throws Exception {     getMockEndpoint("mock:input").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(1).     String body = "This is not json".     try {         template.sendBody("http://localhost:" + portNum + "/users/new", body).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(400, cause.getStatusCode()).         assertEquals("Invalid json data", cause.getResponseBody()).     }     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     // configure to use restlet on localhost with the given port     // and enable auto binding mode     restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.auto).     onException(JsonParseException.class).handled(true).to("mock:error").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)).setBody().constant("Invalid json data").     // use the rest DSL to define the rest services     rest("/users/").post("new").type(UserPojo.class).to("mock:input"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use restlet on localhost with the given port             // and enable auto binding mode             restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.auto).             onException(JsonParseException.class).handled(true).to("mock:error").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)).setBody().constant("Invalid json data").             // use the rest DSL to define the rest services             rest("/users/").post("new").type(UserPojo.class).to("mock:input").         }     }. }
