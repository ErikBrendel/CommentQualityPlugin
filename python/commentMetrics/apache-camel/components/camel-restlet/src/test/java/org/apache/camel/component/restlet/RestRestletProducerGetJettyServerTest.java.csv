commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testRestletProducerGet() throws Exception {     String out = fluentTemplate.withHeader("id", "123").to("direct:start").request(String.class).     assertEquals("123.Donald Duck", out). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;19;;@Override public void configure() throws Exception {     // find free port     int port = AvailablePortFinder.getNextAvailable(22400).     // configure to use restlet on localhost with the given port     restConfiguration().component("restlet").host("localhost").port(port).     from("direct:start").to("rest:get:users/{id}/basic").     from("jetty:http://localhost:" + port + "/users/?matchOnUriPrefix=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // find free port             int port = AvailablePortFinder.getNextAvailable(22400).             // configure to use restlet on localhost with the given port             restConfiguration().component("restlet").host("localhost").port(port).             from("direct:start").to("rest:get:users/{id}/basic").             from("jetty:http://localhost:" + port + "/users/?matchOnUriPrefix=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).         }     }. }
