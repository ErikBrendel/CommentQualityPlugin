commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS"). }
false;public;0;15;;@Test public void testCors() throws Exception {     Exchange out = template.request("http://localhost:" + portNum + "/users/123/basic", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS").         }     }).     assertEquals("https://localhost:443", out.getOut().getHeader("Access-Control-Allow-Origin")).     assertEquals("GET, POST, PUT, DELETE, OPTIONS", out.getOut().getHeader("Access-Control-Allow-Methods")).     assertEquals("Origin, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers", out.getOut().getHeader("Access-Control-Allow-Headers")).     assertEquals("1234", out.getOut().getHeader("Access-Control-Max-Age")). }
false;public;0;16;;@Test public void testRestletProducerGet() throws Exception {     Exchange exchange = template.request("http://localhost:" + portNum + "/users/123/basic", null).     // verify no problems have occurred:     assertFalse(exchange.isFailed()).     Message message = exchange.getOut().     assertThat(message.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class), is(200)).     // verify all header values match those specified in restConfiguration:     assertThat(message.getHeader("Access-Control-Allow-Origin", String.class), is("https://localhost:443")).     assertHeaderSet(message, "Access-Control-Allow-Methods", "GET", "POST", "PUT", "DELETE", "OPTIONS").     assertHeaderSet(message, "Access-Control-Allow-Headers", "Origin", "Accept", "Content-Type", "Access-Control-Request-Method", "Access-Control-Request-Headers").     assertThat(message.getHeader("Access-Control-Max-Age", Integer.class), is(1234)). }
false;private;3;7;;private void assertHeaderSet(Message message, String headerName, String... headerValues) {     // compare header values as sets: ignore order, all required values are present and nothing more:     String allowHeaders = message.getHeader(headerName, String.class).     Set<String> actual = newHashSet(headerSplitter.split(allowHeaders)).     Set<String> expected = newHashSet(headerValues).     assertThat(actual, is(expected)). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;24;;@Override public void configure() throws Exception {     // configure to use restlet on localhost with the given port     restConfiguration().component("restlet").host("localhost").port(portNum).enableCORS(true).corsHeaderProperty("Access-Control-Allow-Origin", "https://localhost:443").corsHeaderProperty("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS").corsHeaderProperty("Access-Control-Allow-Headers", "Origin, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers").corsHeaderProperty("Access-Control-Max-Age", "1234").     // use the rest DSL to define the rest services     rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use restlet on localhost with the given port             restConfiguration().component("restlet").host("localhost").port(portNum).enableCORS(true).corsHeaderProperty("Access-Control-Allow-Origin", "https://localhost:443").corsHeaderProperty("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS").corsHeaderProperty("Access-Control-Allow-Headers", "Origin, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers").corsHeaderProperty("Access-Control-Max-Age", "1234").             // use the rest DSL to define the rest services             rest("/users/").get("{id}/basic").route().to("mock:input").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).         }     }. }
