commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;13;;@Test public void testApi() throws Exception {     Exchange exchange = template.request("http://localhost:" + portNum + "/docs", null).     assertThat(exchange.getOut().getHeader(HTTP_RESPONSE_CODE, Integer.class), is(200)).     String body = exchange.getOut().getBody(String.class).     log.info("Received body: ", body).     assertThat(body, containsString("\"version\" : \"1.2.3\"")).     assertThat(body, containsString("\"title\" : \"The hello rest thing\"")).     assertThat(body, containsString("\"/bye/{name}\"")).     assertThat(body, containsString("\"/hello/{name}\"")).     assertThat(body, containsString("\"summary\" : \"To update the greeting message\"")). }
false;public;0;26;;@Override public void configure() throws Exception {     // configure to use restlet on localhost with the given port     restConfiguration().component("restlet").port(portNum).apiContextPath("/docs").apiProperty("cors", "true").apiProperty("api.title", "The hello rest thing").apiProperty("api.version", "1.2.3").     rest("/hello").consumes("application/json").produces("application/json").get("/{name}").description("Saying hi").param().name("name").type(RestParamType.path).dataType("string").description("Who is it").endParam().to("log:hi").     rest("/bye").consumes("application/json").produces("application/json").get("/{name}").description("Saying bye").param().name("name").type(RestParamType.path).dataType("string").description("Who is it").endParam().responseMessage().code(200).message("A reply message").endResponseMessage().to("log:bye").post().description("To update the greeting message").consumes("application/xml").produces("application/xml").param().name("greeting").type(RestParamType.body).dataType("string").description("Message to use as greeting").endParam().to("log:bye"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use restlet on localhost with the given port             restConfiguration().component("restlet").port(portNum).apiContextPath("/docs").apiProperty("cors", "true").apiProperty("api.title", "The hello rest thing").apiProperty("api.version", "1.2.3").             rest("/hello").consumes("application/json").produces("application/json").get("/{name}").description("Saying hi").param().name("name").type(RestParamType.path).dataType("string").description("Who is it").endParam().to("log:hi").             rest("/bye").consumes("application/json").produces("application/json").get("/{name}").description("Saying bye").param().name("name").type(RestParamType.path).dataType("string").description("Who is it").endParam().responseMessage().code(200).message("A reply message").endResponseMessage().to("log:bye").post().description("To update the greeting message").consumes("application/xml").produces("application/xml").param().name("greeting").type(RestParamType.body).dataType("string").description("Message to use as greeting").endParam().to("log:bye").         }     }. }
