commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testRecipientListWithBean() throws Exception {     // there should be 0 inflight when we start     assertEquals(0, context.getInflightRepository().size()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("RS-response", "RS-response").     String out = template.requestBody("direct:start", "theBody", String.class).     assertEquals("RS-response", out).     // invoke twice     out = template.requestBody("direct:start", "theBody", String.class).     assertEquals("RS-response", out).     assertMockEndpointsSatisfied().     // and there should be 0 inflight when we are finished     assertEquals(0, context.getInflightRepository().size()). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("RS-response"). }
false;public;0;21;;public void configure() {     context.setStreamCaching(true).     // turn off error handler     errorHandler(noErrorHandler()).     // route under test     from("direct:start").routeId("test1").process(new MyInflightCheckBean()).recipientList().simple("restlet:http://localhost:" + portNum + "/users/123/basic?synchronous=true").to("mock:result").     // restlet "Server" side     from("restlet:http://localhost:" + portNum + "/users/{id}/basic").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("RS-response").         }     }). }
false;protected;0;25;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             context.setStreamCaching(true).             // turn off error handler             errorHandler(noErrorHandler()).             // route under test             from("direct:start").routeId("test1").process(new MyInflightCheckBean()).recipientList().simple("restlet:http://localhost:" + portNum + "/users/123/basic?synchronous=true").to("mock:result").             // restlet "Server" side             from("restlet:http://localhost:" + portNum + "/users/{id}/basic").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("RS-response").                 }             }).         }     }. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     // there should only be one exchange in flight at the time this bean is invoked.     assertEquals("Should not be more than 1 exchanges inflight", 1, exchange.getContext().getInflightRepository().size()). }
