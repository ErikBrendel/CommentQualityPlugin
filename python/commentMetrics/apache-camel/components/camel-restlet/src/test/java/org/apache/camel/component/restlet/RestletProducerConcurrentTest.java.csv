commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;8;;public String call() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put("username", "davsclaus").     headers.put("id", index).     return template.requestBodyAndHeaders("restlet:http://localhost:" + portNum + "/users/davsclaus/" + index + "?restletMethod=GET", null, headers, String.class). }
false;private;2;35;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     // we access the responses Map below only inside the main thread,     // so no need for a thread-safe Map implementation     Map<Integer, Future<String>> responses = new HashMap<>().     for (int i = 0. i < files. i++) {         final int index = i.         Future<String> out = executor.submit(new Callable<String>() {              public String call() throws Exception {                 Map<String, Object> headers = new HashMap<>().                 headers.put("username", "davsclaus").                 headers.put("id", index).                 return template.requestBodyAndHeaders("restlet:http://localhost:" + portNum + "/users/davsclaus/" + index + "?restletMethod=GET", null, headers, String.class).             }         }).         responses.put(index, out).     }     assertMockEndpointsSatisfied().     assertEquals(files, responses.size()).     // get all responses     Set<String> unique = new HashSet<>().     for (Future<String> future : responses.values()) {         unique.add(future.get()).     }     // should be 'files' unique responses     assertEquals("Should be " + files + " unique responses", files, unique.size()).     executor.shutdownNow(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String index = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(index). }
false;public;0;10;;@Override public void configure() throws Exception {     from("restlet:http://localhost:" + portNum + "/users/{username}/{id}?restletMethod=GET").to("log:inbox").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String index = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(index).         }     }).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("restlet:http://localhost:" + portNum + "/users/{username}/{id}?restletMethod=GET").to("log:inbox").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String index = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(index).                 }             }).to("mock:result").         }     }. }
