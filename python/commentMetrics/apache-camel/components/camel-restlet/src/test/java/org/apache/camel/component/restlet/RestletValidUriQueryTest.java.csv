commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("restlet:http://localhost:" + portNum + "/users/{username}").process(new SetUserProcessor()).     from("direct:start").to("restlet:http://localhost:" + portNum + "/users/{username}"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("restlet:http://localhost:" + portNum + "/users/{username}").process(new SetUserProcessor()).             from("direct:start").to("restlet:http://localhost:" + portNum + "/users/{username}").         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     assertEquals(QUERY_STRING, exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class)). }
false;public;0;6;;@Test public void testGet() throws Exception {     HttpResponse response = doExecute(new HttpGet("http://localhost:" + portNum + "/users/homer?" + QUERY_STRING)).     assertHttpResponse(response, 204, "text/plain"). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_QUERY, QUERY_STRING).     exchange.getIn().setHeader("username", "homer"). }
false;public;0;12;;@Test public void testGetBodyByRestletProducer() throws Exception {     Exchange ex = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_QUERY, QUERY_STRING).             exchange.getIn().setHeader("username", "homer").         }     }).     assertEquals(204, ex.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
