commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBindingMode() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(UserJaxbPojo.class).     String body = "<user name=\"Donald Duck\" id=\"123\"></user>".     template.sendBody("http://localhost:" + portNum + "/users/new", body).     assertMockEndpointsSatisfied().     UserJaxbPojo user = mock.getReceivedExchanges().get(0).getIn().getBody(UserJaxbPojo.class).     assertNotNull(user).     assertEquals(123, user.getId()).     assertEquals("Donald Duck", user.getName()). }
false;public;0;16;;@Test public void testBindingModeWrong() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:input").     mock.expectedMessageCount(0).     // we bind to xml, but send in json, which is not possible     String body = "{\"id\": 123, \"name\": \"Donald Duck\"}".     try {         template.sendBody("http://localhost:" + portNum + "/users/new", body).         fail("Should have thrown exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.xml).     // use the rest DSL to define the rest services     rest("/users/").post("new").type(UserJaxbPojo.class).to("mock:input"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("restlet").host("localhost").port(portNum).bindingMode(RestBindingMode.xml).             // use the rest DSL to define the rest services             rest("/users/").post("new").type(UserJaxbPojo.class).to("mock:input").         }     }. }
