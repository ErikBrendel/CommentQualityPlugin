commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testRestletProducerPatch() throws Exception {     String out = template.requestBodyAndHeader("direct:patch", "Donald Duck", "id", 123, String.class).     assertEquals("123.Donald Duck", out). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     Object body = exchange.getIn().getBody().     exchange.getOut().setBody(id + "." + body). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:patch").to("restlet:http://localhost:" + portNum + "/users/{id}/basic?restletMethod=PATCH").     from("restlet:http://localhost:" + portNum + "/users/{id}/basic?restletMethods=PATCH").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             Object body = exchange.getIn().getBody().             exchange.getOut().setBody(id + "." + body).         }     }). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:patch").to("restlet:http://localhost:" + portNum + "/users/{id}/basic?restletMethod=PATCH").             from("restlet:http://localhost:" + portNum + "/users/{id}/basic?restletMethods=PATCH").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     Object body = exchange.getIn().getBody().                     exchange.getOut().setBody(id + "." + body).                 }             }).         }     }. }
