commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     convertBody(exchange). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     convertBody(exchange). }
false;public;0;30;;@Override public void configure() throws Exception {     RestletComponent restletSSL = new RestletComponent().     RestletComponent restletWithGlobalSSL = new RestletComponent().     context.addComponent("restlet-SSL", restletSSL).     context.addComponent("restlet-withGlobalSSL", restletWithGlobalSSL).     SSLContextParameters scp = generateSSLContextParametrs("changeit").     SSLContextParameters globalScp = generateSSLContextParametrs("wrongPassword").     context.getComponent("restlet-SSL", RestletComponent.class).setSslContextParameters(scp).     context.getComponent("restlet-withGlobalSSL", RestletComponent.class).setUseGlobalSslContextParameters(true).     context.getComponent("restlet-withGlobalSSL", RestletComponent.class).setSslContextParameters(scp).     context.setSSLContextParameters(globalScp).     from("restlet-SSL:https://localhost:" + portNum + "/users/SSL?restletMethods=post").process(new Processor() {          public void process(Exchange exchange) throws Exception {             convertBody(exchange).         }     }).     from("restlet-withGlobalSSL:https://localhost:" + (portNum + 1) + "/users/globalSSL?restletMethods=post").process(new Processor() {          public void process(Exchange exchange) throws Exception {             convertBody(exchange).         }     }). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             RestletComponent restletSSL = new RestletComponent().             RestletComponent restletWithGlobalSSL = new RestletComponent().             context.addComponent("restlet-SSL", restletSSL).             context.addComponent("restlet-withGlobalSSL", restletWithGlobalSSL).             SSLContextParameters scp = generateSSLContextParametrs("changeit").             SSLContextParameters globalScp = generateSSLContextParametrs("wrongPassword").             context.getComponent("restlet-SSL", RestletComponent.class).setSslContextParameters(scp).             context.getComponent("restlet-withGlobalSSL", RestletComponent.class).setUseGlobalSslContextParameters(true).             context.getComponent("restlet-withGlobalSSL", RestletComponent.class).setSslContextParameters(scp).             context.setSSLContextParameters(globalScp).             from("restlet-SSL:https://localhost:" + portNum + "/users/SSL?restletMethods=post").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     convertBody(exchange).                 }             }).             from("restlet-withGlobalSSL:https://localhost:" + (portNum + 1) + "/users/globalSSL?restletMethods=post").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     convertBody(exchange).                 }             }).         }     }. }
false;public;0;5;;@Test public void testComponentSSLContextParametrs() throws Exception {     // test that ssl context set for component     postRequestMessage(REQUEST_MESSAGE, "SSL", 0). }
false;public;0;6;;@Test public void testComponentGlobalSSLContextParametrs() throws Exception {     // test that ssl context set for component has bigger priority than     // global context     postRequestMessage(REQUEST_MESSAGE, "globalSSL", 1). }
false;private;3;13;;private void postRequestMessage(String message, String path, Integer portIncrement) throws Exception {     URL trustStoreUrl = this.getClass().getClassLoader().getResource("jsse/localhost.ks").     System.setProperty("javax.net.ssl.trustStore", trustStoreUrl.toURI().getPath()).     HttpPost post = new HttpPost("https://localhost:" + (portNum + portIncrement) + "/users/" + path).     post.addHeader(Exchange.CONTENT_TYPE, "application/xml").     post.setEntity(new StringEntity(message)).     HttpResponse response = doExecute(post).     assertHttpResponse(response, 200, "application/xml").     String s = context.getTypeConverter().convertTo(String.class, response.getEntity().getContent()).     assertTrue(s.contains("<status>OK</status>")). }
false;;1;7;;void convertBody(Exchange exchange) {     String body = exchange.getIn().getBody(String.class).     assertNotNull(body).     assertTrue("Get a wrong request message", body.contains(REQUEST_MESSAGE)).     exchange.getOut().setBody("<status>OK</status>").     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml"). }
false;;1;14;;SSLContextParameters generateSSLContextParametrs(String password) {     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").getPath().toString()).     ksp.setPassword(password).     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword(password).     kmp.setKeyStore(ksp).     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     return sslContextParameters. }
