commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testRestletProducerGet2() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put("id", 123).     headers.put("beverage.beer", "Carlsberg").     String out = template.requestBodyAndHeaders("direct:start", null, headers, String.class).     assertEquals("123.Donald Duck.Carlsberg", out). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     String beer = exchange.getIn().getHeader("beer", String.class).     exchange.getOut().setBody(id + ".Donald Duck." + beer). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").to("restlet:http://localhost:" + portNum + "/users/{id}/like/{beverage.beer}").     from("restlet:http://localhost:" + portNum + "/users/{id}/like/{beer}").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             String beer = exchange.getIn().getHeader("beer", String.class).             exchange.getOut().setBody(id + ".Donald Duck." + beer).         }     }). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("restlet:http://localhost:" + portNum + "/users/{id}/like/{beverage.beer}").             from("restlet:http://localhost:" + portNum + "/users/{id}/like/{beer}").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     String beer = exchange.getIn().getHeader("beer", String.class).                     exchange.getOut().setBody(id + ".Donald Duck." + beer).                 }             }).         }     }. }
