commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testRestletProducerGet() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("foo", "bar").     Map<String, Object> headers = new HashMap<>().     headers.put("id", 123).     headers.put("foo", "bar").     String out = template.requestBodyAndHeaders("direct:start", null, headers, String.class).     assertEquals("123.Donald Duck", out).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("id", String.class).     exchange.getOut().setBody(id + ".Donald Duck"). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").to("restlet:http://localhost:" + portNum + "/users/123/basic").to("mock:result").     from("restlet:http://localhost:" + portNum + "/users/{id}/basic").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("id", String.class).             exchange.getOut().setBody(id + ".Donald Duck").         }     }). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("restlet:http://localhost:" + portNum + "/users/123/basic").to("mock:result").             from("restlet:http://localhost:" + portNum + "/users/{id}/basic").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("id", String.class).                     exchange.getOut().setBody(id + ".Donald Duck").                 }             }).         }     }. }
