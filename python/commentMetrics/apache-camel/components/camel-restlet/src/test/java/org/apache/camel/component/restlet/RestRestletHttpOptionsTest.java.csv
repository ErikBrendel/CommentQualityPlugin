commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS"). }
false;public;0;18;;@Test public void testRestletServerOptions() throws Exception {     Exchange exchange = template.request("http://localhost:" + portNum + "/users/v1/customers", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_METHOD, "OPTIONS").         }     }).     assertEquals(204, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("GET, OPTIONS", exchange.getOut().getHeader("ALLOW")).     assertEquals(null, exchange.getOut().getBody(String.class)).     exchange = fluentTemplate.to("http://localhost:" + portNum + "/users/v1/123").withHeader(Exchange.HTTP_METHOD, "OPTIONS").send().     assertEquals(204, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("OPTIONS, PUT", exchange.getOut().getHeader("ALLOW")).     assertEquals(null, exchange.getOut().getBody(String.class)). }
false;public;0;12;;@Override public void configure() throws Exception {     // configure to use restlet on localhost with the given port     restConfiguration().component("restlet").host("localhost").port(portNum).     // use the rest DSL to define the rest services     rest("/users/").get("v1/customers").to("mock:customers").put("v1/{id}").to("mock:id"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // configure to use restlet on localhost with the given port             restConfiguration().component("restlet").host("localhost").port(portNum).             // use the rest DSL to define the rest services             rest("/users/").get("v1/customers").to("mock:customers").put("v1/{id}").to("mock:id").         }     }. }
