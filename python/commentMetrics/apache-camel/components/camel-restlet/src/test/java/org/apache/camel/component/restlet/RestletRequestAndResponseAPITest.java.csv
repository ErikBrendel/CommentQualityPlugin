commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testRestletProducer() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put("id", 123).     headers.put("beverage.beer", "Carlsberg").     String out = template.requestBodyAndHeaders("direct:start", null, headers, String.class).     assertEquals("<response>Beer is Good</response>", out). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeaders(headers). }
false;public;0;22;;@Test public void testRestletProducer2() throws Exception {     final Map<String, Object> headers = new HashMap<>().     headers.put("id", 123).     headers.put("beverage.beer", "Carlsberg").     Exchange out = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeaders(headers).         }     }).     assertNotNull(out).     assertEquals("text/xml", out.getOut().getHeader(Exchange.CONTENT_TYPE)).     assertEquals(200, out.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("<response>Beer is Good</response>", out.getOut().getBody(String.class)).     // the restlet response should be accessible if needed     Response response = out.getOut().getHeader(RestletConstants.RESTLET_RESPONSE, Response.class).     assertNotNull(response).     assertEquals(200, response.getStatus().getCode()). }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     // the Restlet request should be available if needed     Request request = exchange.getIn().getHeader(RestletConstants.RESTLET_REQUEST, Request.class).     assertNotNull("Restlet Request", request).     // use Restlet API to create the response     Response response = exchange.getIn().getHeader(RestletConstants.RESTLET_RESPONSE, Response.class).     assertNotNull("Restlet Response", response).     response.setStatus(Status.SUCCESS_OK).     response.setEntity("<response>Beer is Good</response>", MediaType.TEXT_XML).     exchange.getOut().setBody(response). }
false;public;0;22;;@Override public void configure() throws Exception {     from("direct:start").to("restlet:http://localhost:" + portNum + "/users/{id}/like/{beverage.beer}").     // START SNIPPET: e1     from("restlet:http://localhost:" + portNum + "/users/{id}/like/{beer}").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // the Restlet request should be available if needed             Request request = exchange.getIn().getHeader(RestletConstants.RESTLET_REQUEST, Request.class).             assertNotNull("Restlet Request", request).             // use Restlet API to create the response             Response response = exchange.getIn().getHeader(RestletConstants.RESTLET_RESPONSE, Response.class).             assertNotNull("Restlet Response", response).             response.setStatus(Status.SUCCESS_OK).             response.setEntity("<response>Beer is Good</response>", MediaType.TEXT_XML).             exchange.getOut().setBody(response).         }     }). // END SNIPPET: e1 }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("restlet:http://localhost:" + portNum + "/users/{id}/like/{beverage.beer}").             // START SNIPPET: e1             from("restlet:http://localhost:" + portNum + "/users/{id}/like/{beer}").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // the Restlet request should be available if needed                     Request request = exchange.getIn().getHeader(RestletConstants.RESTLET_REQUEST, Request.class).                     assertNotNull("Restlet Request", request).                     // use Restlet API to create the response                     Response response = exchange.getIn().getHeader(RestletConstants.RESTLET_RESPONSE, Response.class).                     assertNotNull("Restlet Response", response).                     response.setStatus(Status.SUCCESS_OK).                     response.setEntity("<response>Beer is Good</response>", MediaType.TEXT_XML).                     exchange.getOut().setBody(response).                 }             }).         // END SNIPPET: e1         }     }. }
