commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testRestlet() throws Exception {     getMockEndpoint("mock:oracle").expectedBodiesReceived("110").     getMockEndpoint("mock:apple").expectedBodiesReceived("150").     template.sendBody("restlet:http://0.0.0.0:" + portNum + "/stock/ORCL?restletMethod=post", "110").     template.sendBody("restlet:http://0.0.0.0:" + portNum + "/stock/APPL?restletMethod=post", "150").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("restlet:http://0.0.0.0:" + portNum + "/stock/{symbol}?restletMethods=post").recipientList().simple("seda:${header.symbol}").     from("seda:ORCL").to("mock:oracle").     from("seda:APPL").to("mock:apple"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("restlet:http://0.0.0.0:" + portNum + "/stock/{symbol}?restletMethods=post").recipientList().simple("seda:${header.symbol}").             from("seda:ORCL").to("mock:oracle").             from("seda:APPL").to("mock:apple").         }     }. }
