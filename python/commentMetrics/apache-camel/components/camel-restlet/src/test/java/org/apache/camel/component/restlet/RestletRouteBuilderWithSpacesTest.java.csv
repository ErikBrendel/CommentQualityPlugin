commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("received GET request with id=" + exchange.getIn().getHeader("id") + " and x=" + exchange.getIn().getHeader("x")). }
false;public;0;13;;public void configure() {     // Restlet consumer default to handle GET method     from("restlet:http://localhost:" + portNum + "/orders with spaces in path/{id}/{x}").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("received GET request with id=" + exchange.getIn().getHeader("id") + " and x=" + exchange.getIn().getHeader("x")).         }     }). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Restlet consumer default to handle GET method             from("restlet:http://localhost:" + portNum + "/orders with spaces in path/{id}/{x}").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("received GET request with id=" + exchange.getIn().getHeader("id") + " and x=" + exchange.getIn().getHeader("x")).                 }             }).         }     }. }
false;public;0;8;;@Test public void testConsumerWithSpaces() throws IOException {     Client client = new Client(Protocol.HTTP).     Response response = client.handle(new Request(Method.GET, "http://localhost:" + portNum + "/orders with spaces in path/99991/6")).     assertEquals("received GET request with id=99991 and x=6", response.getEntity().getText()). }
