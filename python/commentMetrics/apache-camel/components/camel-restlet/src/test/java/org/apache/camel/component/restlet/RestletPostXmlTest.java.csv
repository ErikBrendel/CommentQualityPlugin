commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull(body).     assertTrue("Get a wrong request message", body.indexOf(REQUEST_MESSAGE) >= 0).     exchange.getOut().setBody("<status>OK</status>").     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml"). }
false;public;0;14;;@Override public void configure() throws Exception {     // enable POST support     from("restlet:http://localhost:" + portNum + "/users/?restletMethods=post").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull(body).             assertTrue("Get a wrong request message", body.indexOf(REQUEST_MESSAGE) >= 0).             exchange.getOut().setBody("<status>OK</status>").             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml").         }     }). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable POST support             from("restlet:http://localhost:" + portNum + "/users/?restletMethods=post").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull(body).                     assertTrue("Get a wrong request message", body.indexOf(REQUEST_MESSAGE) >= 0).                     exchange.getOut().setBody("<status>OK</status>").                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml").                 }             }).         }     }. }
false;public;0;4;;@Test public void testPostXml() throws Exception {     postRequestMessage(REQUEST_MESSAGE). }
false;public;0;4;;@Test public void testPostXmlWithXmlTag() throws Exception {     postRequestMessage(REQUEST_MESSAGE_WITH_XML_TAG). }
false;private;1;10;;private void postRequestMessage(String message) throws Exception {     HttpPost post = new HttpPost("http://localhost:" + portNum + "/users/").     post.addHeader(Exchange.CONTENT_TYPE, "application/xml").     post.setEntity(new StringEntity(message)).     HttpResponse response = doExecute(post).     assertHttpResponse(response, 200, "application/xml").     String s = context.getTypeConverter().convertTo(String.class, response.getEntity().getContent()).     assertEquals("<status>OK</status>", s). }
