commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testPostMethod() throws Exception {     HttpResponse response = doExecute(new HttpPost("http://localhost:" + portNum + "/users/homer")).     assertHttpResponse(response, 200, "text/plain", "POST"). }
false;public;0;6;;@Test public void testPutMethod() throws Exception {     HttpResponse response = doExecute(new HttpPut("http://localhost:" + portNum + "/users/homer")).     assertHttpResponse(response, 200, "text/plain", "PUT"). }
false;public;0;6;;@Test public void testGetMethod() throws Exception {     HttpResponse response = doExecute(new HttpGet("http://localhost:" + portNum + "/users/homer")).     assertHttpResponse(response, 200, "text/plain", "GET"). }
false;public;0;14;;@Test public void testDeleteMethod() throws Exception {     HttpResponse response = doExecute(new HttpDelete("http://localhost:" + portNum + "/users/homer")).     // delete is not allowed so we return 405     assertEquals(Status.CLIENT_ERROR_METHOD_NOT_ALLOWED.getCode(), response.getStatusLine().getStatusCode()).     Header header = response.getFirstHeader("Allow").     assertNotNull(header).     String value = header.getValue().toUpperCase(Locale.US).     assertTrue("POST should be allowed", value.contains("POST")).     assertTrue("GET should be allowed", value.contains("GET")).     assertTrue("PUT should be allowed", value.contains("PUT")). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // echo the method     exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_METHOD, String.class)). }
false;public;0;12;;@Override public void configure() throws Exception {     // START SNIPPET: routeDefinition     from("restlet:http://localhost:" + portNum + "/users/{username}?restletMethods=post,get,put").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // echo the method             exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_METHOD, String.class)).         }     }). // END SNIPPET: routeDefinition }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: routeDefinition             from("restlet:http://localhost:" + portNum + "/users/{username}?restletMethods=post,get,put").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // echo the method                     exchange.getOut().setBody(exchange.getIn().getHeader(Exchange.HTTP_METHOD, String.class)).                 }             }).         // END SNIPPET: routeDefinition         }     }. }
