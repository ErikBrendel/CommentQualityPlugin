commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertNotNull(body).     assertTrue("Get a wrong request message", body.indexOf(REQUEST_MESSAGE) >= 0).     exchange.getOut().setBody("<status>OK</status>").     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml"). }
false;public;0;17;;@Override public void configure() throws Exception {     // enable POST support     from(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertNotNull(body).             assertTrue("Get a wrong request message", body.indexOf(REQUEST_MESSAGE) >= 0).             exchange.getOut().setBody("<status>OK</status>").             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml").         }     }).     // route to restlet     from("direct:start").to(url). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable POST support             from(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertNotNull(body).                     assertTrue("Get a wrong request message", body.indexOf(REQUEST_MESSAGE) >= 0).                     exchange.getOut().setBody("<status>OK</status>").                     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml").                 }             }).             // route to restlet             from("direct:start").to(url).         }     }. }
false;public;0;4;;@Test public void testPostXml() throws Exception {     postRequestMessage(REQUEST_MESSAGE). }
false;public;0;4;;@Test public void testPostXmlWithXmlTag() throws Exception {     postRequestMessage(REQUEST_MESSAGE_WITH_XML_TAG). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(message).     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/xml"). }
false;private;1;14;;private void postRequestMessage(final String message) throws Exception {     Exchange exchange = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(message).             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/xml").         }     }).     assertNotNull(exchange).     assertTrue(exchange.hasOut()).     String s = exchange.getOut().getBody(String.class).     assertEquals("<status>OK</status>", s). }
