commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testRedirect() throws Exception {     HttpGet get = new HttpGet("http://localhost:" + portNum + "/users/homer").     // do not follow redirects     RequestConfig requestconfig = RequestConfig.custom().setRedirectsEnabled(false).build().     CloseableHttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(requestconfig).build().     try {         HttpResponse response = client.execute(get).         for (Header header : response.getAllHeaders()) {             log.info("Header {}", header).         }         assertEquals(302, response.getStatusLine().getStatusCode()).         assertTrue("Should have location header", response.containsHeader("Location")).         assertEquals("http://somewhere.com", response.getFirstHeader("Location").getValue()).         assertEquals("bar", response.getFirstHeader("Foo").getValue()).     } finally {         client.close().     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("restlet:http://localhost:" + portNum + "/users/{username}").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(302)).setHeader("Location", constant("http://somewhere.com")).setHeader("Foo", constant("bar")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("restlet:http://localhost:" + portNum + "/users/{username}").setHeader(Exchange.HTTP_RESPONSE_CODE, constant(302)).setHeader("Location", constant("http://somewhere.com")).setHeader("Foo", constant("bar")).         }     }. }
