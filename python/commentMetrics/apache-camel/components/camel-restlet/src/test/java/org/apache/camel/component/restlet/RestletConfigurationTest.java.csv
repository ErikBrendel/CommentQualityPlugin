commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doPreSetup() {     assertPresent(GsonConverter.class).     assertPresent(JacksonConverter.class). }
false;public;0;5;;@Test public void testConfiguration() throws Exception {     assertNotPresent(GsonConverter.class).     assertPresent(JacksonConverter.class). }
false;public;0;10;;@Override public void configure() throws Exception {     restConfiguration().component("restlet").componentProperty("enabledConverters", "JacksonConverter").     from("direct:start").to("restlet:http://localhost:" + portNum + "/users/1/basic").to("log:reply"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().component("restlet").componentProperty("enabledConverters", "JacksonConverter").             from("direct:start").to("restlet:http://localhost:" + portNum + "/users/1/basic").to("log:reply").         }     }. }
false;protected;1;3;;protected <T extends ConverterHelper> Optional<ConverterHelper> findByType(Class<T> type) {     return Engine.getInstance().getRegisteredConverters().stream().filter(type::isInstance).findFirst(). }
false;protected;1;3;;protected <T extends ConverterHelper> void assertPresent(Class<T> type) {     assertTrue(type.getSimpleName(), findByType(type).isPresent()). }
false;protected;1;3;;protected <T extends ConverterHelper> void assertNotPresent(Class<T> type) {     assertFalse(type.getSimpleName(), findByType(type).isPresent()). }
