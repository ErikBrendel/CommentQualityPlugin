commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@BeforeClass public static void initializePortNum() {     // restlet uses the JUL logger which is a pain to configure/install     // we should not see WARN logs     SLF4JBridgeHandler.install().     java.util.logging.LogManager.getLogManager().getLogger("").setLevel(Level.INFO).     portNum = AvailablePortFinder.getNextAvailable(). }
false;public;1;12;;public HttpResponse doExecute(HttpUriRequest method) throws Exception {     CloseableHttpClient client = HttpClientBuilder.create().build().     try {         HttpResponse response = client.execute(method).         if (response.getEntity() != null) {             response.setEntity(new BufferedHttpEntity(response.getEntity())).         }         return response.     } finally {         client.close().     } }
false;public,static;3;4;;public static void assertHttpResponse(HttpResponse response, int expectedStatusCode, String expectedContentType) throws ParseException, IOException {     assertHttpResponse(response, expectedStatusCode, expectedContentType, null). }
false;public,static;4;9;;public static void assertHttpResponse(HttpResponse response, int expectedStatusCode, String expectedContentType, String expectedBody) throws ParseException, IOException {     assertEquals(expectedStatusCode, response.getStatusLine().getStatusCode()).     assertTrue(response.getFirstHeader("Content-Type").getValue().startsWith(expectedContentType)).     if (expectedBody != null) {         assertEquals(expectedBody, EntityUtils.toString(response.getEntity())).     } }
