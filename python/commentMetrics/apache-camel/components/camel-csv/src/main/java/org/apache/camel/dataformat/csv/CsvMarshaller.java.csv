# id;timestamp;commentText;codeText;commentWords;codeWords
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1417011633;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1417081500;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1425285811;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1438001238;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1438002156;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1449305599;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1462172870;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1462183056;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1523968798;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1540108163;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1548175016;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1548175016;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        org.apache.camel.util.ObjectHelper.notNull(format, "CSV format")__        org.apache.camel.util.ObjectHelper.notNull(dataFormat, "CSV data format")__        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,org,apache,camel,util,object,helper,not,null,format,csv,format,org,apache,camel,util,object,helper,not,null,data,format,csv,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat);1548175016;Creates a new instance.__@param format     CSV format_@param dataFormat Camel CSV data format_@return New instance;public static CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {_        org.apache.camel.util.ObjectHelper.notNull(format, "CSV format")__        org.apache.camel.util.ObjectHelper.notNull(dataFormat, "CSV data format")__        _        if (format.getSkipHeaderRecord()) {_            format = format.withHeader((String[]) null)__        }__        String[] fixedColumns = dataFormat.getHeader()__        if (fixedColumns != null && fixedColumns.length > 0) {_            return new FixedColumnsMarshaller(format, fixedColumns)__        }_        return new DynamicColumnsMarshaller(format)__    };creates,a,new,instance,param,format,csv,format,param,data,format,camel,csv,data,format,return,new,instance;public,static,csv,marshaller,create,csvformat,format,csv,data,format,data,format,org,apache,camel,util,object,helper,not,null,format,csv,format,org,apache,camel,util,object,helper,not,null,data,format,csv,data,format,if,format,get,skip,header,record,format,format,with,header,string,null,string,fixed,columns,data,format,get,header,if,fixed,columns,null,fixed,columns,length,0,return,new,fixed,columns,marshaller,format,fixed,columns,return,new,dynamic,columns,marshaller,format
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1417081500;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1425285811;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1438001238;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1438002156;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1449305599;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1462172870;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1462183056;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1523968798;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1540108163;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1548175016;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1548175016;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;1548175016;Gets the CSV record values of the given map.__@param map Input map_@return CSV record values of the given map;protected abstract Iterable<?> getMapRecordValues(Map<?, ?> map)_;gets,the,csv,record,values,of,the,given,map,param,map,input,map,return,csv,record,values,of,the,given,map;protected,abstract,iterable,get,map,record,values,map,map
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1417011633;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        try (CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream), format)) {_            List list = ExchangeHelper.convertToType(exchange, List.class, object)__            if (list != null) {_                for (Object child : list) {_                    printer.printRecord(getRecordValues(exchange, child))__                }_            } else {_                printer.printRecord(getRecordValues(exchange, object))__            }_        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,try,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,format,list,list,exchange,helper,convert,to,type,exchange,list,class,object,if,list,null,for,object,child,list,printer,print,record,get,record,values,exchange,child,else,printer,print,record,get,record,values,exchange,object
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1417081500;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        try (CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream), format)) {_            List<?> list = ExchangeHelper.convertToType(exchange, List.class, object)__            if (list != null) {_                for (Object child : list) {_                    printer.printRecord(getRecordValues(exchange, child))__                }_            } else {_                printer.printRecord(getRecordValues(exchange, object))__            }_        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,try,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,format,list,list,exchange,helper,convert,to,type,exchange,list,class,object,if,list,null,for,object,child,list,printer,print,record,get,record,values,exchange,child,else,printer,print,record,get,record,values,exchange,object
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1425285811;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream), format)__        try {_            List<?> list = ExchangeHelper.convertToType(exchange, List.class, object)__            if (list != null) {_                for (Object child : list) {_                    printer.printRecord(getRecordValues(exchange, child))__                }_            } else {_                printer.printRecord(getRecordValues(exchange, object))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,format,try,list,list,exchange,helper,convert,to,type,exchange,list,class,object,if,list,null,for,object,child,list,printer,print,record,get,record,values,exchange,child,else,printer,print,record,get,record,values,exchange,object,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1438001238;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream), format)__        try {_            List<?> list = exchange.getContext().getTypeConverter().tryConvertTo(List.class, exchange, object)__            if (list != null) {_                for (Object child : list) {_                    printer.printRecord(getRecordValues(exchange, child))__                }_            } else {_                printer.printRecord(getRecordValues(exchange, object))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,format,try,list,list,exchange,get,context,get,type,converter,try,convert,to,list,class,exchange,object,if,list,null,for,object,child,list,printer,print,record,get,record,values,exchange,child,else,printer,print,record,get,record,values,exchange,object,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1438002156;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream), format)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,format,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1449305599;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream), format)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,format,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1462172870;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream, IOHelper.getCharsetName(exchange)), format)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,iohelper,get,charset,name,exchange,format,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1462183056;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream, IOHelper.getCharsetName(exchange)), format)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,iohelper,get,charset,name,exchange,format,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1523968798;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream, IOHelper.getCharsetName(exchange)), format)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,iohelper,get,charset,name,exchange,format,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1540108163;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = new CSVPrinter(new OutputStreamWriter(outputStream, ExchangeHelper.getCharsetName(exchange)), format)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,new,csvprinter,new,output,stream,writer,output,stream,exchange,helper,get,charset,name,exchange,format,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1548175016;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = createPrinter(exchange, outputStream)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,create,printer,exchange,output,stream,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException;1548175016;Marshals the given object into the given stream.__@param exchange     Exchange (used for access to type conversion)_@param object       Body to marshal_@param outputStream Output stream of the CSV_@throws NoTypeConversionAvailableException if the body cannot be converted_@throws IOException                        if we cannot write into the given stream;public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws NoTypeConversionAvailableException, IOException {_        CSVPrinter printer = createPrinter(exchange, outputStream)__        try {_            Iterator it = ObjectHelper.createIterator(object)__            while (it.hasNext()) {_                Object child = it.next()__                printer.printRecord(getRecordValues(exchange, child))__            }_        } finally {_            IOHelper.close(printer)__        }_    };marshals,the,given,object,into,the,given,stream,param,exchange,exchange,used,for,access,to,type,conversion,param,object,body,to,marshal,param,output,stream,output,stream,of,the,csv,throws,no,type,conversion,available,exception,if,the,body,cannot,be,converted,throws,ioexception,if,we,cannot,write,into,the,given,stream;public,void,marshal,exchange,exchange,object,object,output,stream,output,stream,throws,no,type,conversion,available,exception,ioexception,csvprinter,printer,create,printer,exchange,output,stream,try,iterator,it,object,helper,create,iterator,object,while,it,has,next,object,child,it,next,printer,print,record,get,record,values,exchange,child,finally,iohelper,close,printer
CsvMarshaller -> protected CSVPrinter createPrinter(Exchange exchange, OutputStream outputStream) throws IOException;1548175016;Creates and returns a {@link CSVPrinter}.__@param exchange     Exchange (used for access to type conversion). Could NOT be <code>null</code>._@param outputStream Output stream of the CSV. Could NOT be <code>null</code>._@return a new {@link CSVPrinter}. Never <code>null</code>.;protected CSVPrinter createPrinter(Exchange exchange, OutputStream outputStream) throws IOException {_        return new CSVPrinter(new OutputStreamWriter(outputStream, ExchangeHelper.getCharsetName(exchange)), format)__    };creates,and,returns,a,link,csvprinter,param,exchange,exchange,used,for,access,to,type,conversion,could,not,be,code,null,code,param,output,stream,output,stream,of,the,csv,could,not,be,code,null,code,return,a,new,link,csvprinter,never,code,null,code;protected,csvprinter,create,printer,exchange,exchange,output,stream,output,stream,throws,ioexception,return,new,csvprinter,new,output,stream,writer,output,stream,exchange,helper,get,charset,name,exchange,format
CsvMarshaller -> protected CSVPrinter createPrinter(Exchange exchange, OutputStream outputStream) throws IOException;1548175016;Creates and returns a {@link CSVPrinter}.__@param exchange     Exchange (used for access to type conversion). Could NOT be <code>null</code>._@param outputStream Output stream of the CSV. Could NOT be <code>null</code>._@return a new {@link CSVPrinter}. Never <code>null</code>.;protected CSVPrinter createPrinter(Exchange exchange, OutputStream outputStream) throws IOException {_        org.apache.camel.util.ObjectHelper.notNull(exchange, "Exchange")__        org.apache.camel.util.ObjectHelper.notNull(outputStream, "Output stream")__        return new CSVPrinter(new OutputStreamWriter(outputStream, ExchangeHelper.getCharsetName(exchange)), format)__    };creates,and,returns,a,link,csvprinter,param,exchange,exchange,used,for,access,to,type,conversion,could,not,be,code,null,code,param,output,stream,output,stream,of,the,csv,could,not,be,code,null,code,return,a,new,link,csvprinter,never,code,null,code;protected,csvprinter,create,printer,exchange,exchange,output,stream,output,stream,throws,ioexception,org,apache,camel,util,object,helper,not,null,exchange,exchange,org,apache,camel,util,object,helper,not,null,output,stream,output,stream,return,new,csvprinter,new,output,stream,writer,output,stream,exchange,helper,get,charset,name,exchange,format
CsvMarshaller -> protected CSVPrinter createPrinter(Exchange exchange, OutputStream outputStream) throws IOException;1548175016;Creates and returns a {@link CSVPrinter}.__@param exchange     Exchange (used for access to type conversion). Could NOT be <code>null</code>._@param outputStream Output stream of the CSV. Could NOT be <code>null</code>._@return a new {@link CSVPrinter}. Never <code>null</code>.;protected CSVPrinter createPrinter(Exchange exchange, OutputStream outputStream) throws IOException {_        org.apache.camel.util.ObjectHelper.notNull(exchange, "Exchange")__        org.apache.camel.util.ObjectHelper.notNull(outputStream, "Output stream")__        return new CSVPrinter(new OutputStreamWriter(outputStream, ExchangeHelper.getCharsetName(exchange)), format)__    };creates,and,returns,a,link,csvprinter,param,exchange,exchange,used,for,access,to,type,conversion,could,not,be,code,null,code,param,output,stream,output,stream,of,the,csv,could,not,be,code,null,code,return,a,new,link,csvprinter,never,code,null,code;protected,csvprinter,create,printer,exchange,exchange,output,stream,output,stream,throws,ioexception,org,apache,camel,util,object,helper,not,null,exchange,exchange,org,apache,camel,util,object,helper,not,null,output,stream,output,stream,return,new,csvprinter,new,output,stream,writer,output,stream,exchange,helper,get,charset,name,exchange,format
