commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@SuppressWarnings("unchecked") @Test public void testCsvUnMarshal() throws Exception {     result.reset().     result.expectedMessageCount(EXPECTED_COUNT).     String message = "".     for (int i = 0. i < EXPECTED_COUNT. ++i) {         message += i + "|\"" + i + LS + i + "\"\n".     }     template.sendBody("direct:start", message).     assertMockEndpointsSatisfied().     for (int i = 0. i < EXPECTED_COUNT. ++i) {         List<String> body = result.getReceivedExchanges().get(i).getIn().getBody(List.class).         assertEquals(2, body.size()).         assertEquals(String.valueOf(i), body.get(0)).         assertEquals(String.format("%d%s%d", i, LS, i), body.get(1)).     } }
false;public;0;19;;@SuppressWarnings("unchecked") @Test public void testCsvUnMarshalWithFile() throws Exception {     result.reset().     result.expectedMessageCount(EXPECTED_COUNT).     template.sendBody("direct:start", new MyFileInputStream(new File("src/test/resources/data.csv"))).     assertMockEndpointsSatisfied().     for (int i = 0. i < EXPECTED_COUNT. ++i) {         List<String> body = result.getReceivedExchanges().get(i).getIn().getBody(List.class).         assertEquals(2, body.size()).         assertEquals(String.valueOf(i), body.get(0)).         assertEquals(String.format("%d%s%d", i, LS, i), body.get(1)).     } }
false;public;0;4;;public void close() throws IOException {     // Use this to find out how camel close the FileInputStream     super.close(). }
false;public;0;11;;@Override public void configure() throws Exception {     CsvDataFormat csv = new CsvDataFormat().setLazyLoad(true).setDelimiter('|').     from("direct:start").unmarshal(csv).split(body()).to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             CsvDataFormat csv = new CsvDataFormat().setLazyLoad(true).setDelimiter('|').             from("direct:start").unmarshal(csv).split(body()).to("mock:result").         }     }. }
