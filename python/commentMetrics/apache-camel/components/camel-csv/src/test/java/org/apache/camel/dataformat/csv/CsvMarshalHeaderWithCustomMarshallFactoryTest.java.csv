commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void doPreSetup() throws Exception {     outputFile = new File(folder.newFolder(), "output.csv"). }
false;public;0;16;;@Test public void testSendBody() throws IOException {     Map<String, String> body = new LinkedHashMap<>().     body.put("first_name", "John").     body.put("last_name", "Doe").     String fileName = outputFile.getName().     assertEquals("output.csv", fileName).     producerTemplate.sendBodyAndHeader(body, Exchange.FILE_NAME, fileName).     body = new LinkedHashMap<>().     body.put("first_name", "Max").     body.put("last_name", "Mustermann").     producerTemplate.sendBodyAndHeader(body, Exchange.FILE_NAME, fileName).     List<String> lines = Files.lines(Paths.get(outputFile.toURI())).filter(l -> l.trim().length() > 0).collect(Collectors.toList()).     assertEquals(3, lines.size()). }
false;public;0;5;;@Override public void configure() {     String uri = String.format("file:%s?charset=utf-8&fileExist=Append", outputFile.getParentFile().getAbsolutePath()).     from("direct:start").marshal(createCsvDataFormat()).to(uri). }
false;protected;0;10;;@Override protected RoutesBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             String uri = String.format("file:%s?charset=utf-8&fileExist=Append", outputFile.getParentFile().getAbsolutePath()).             from("direct:start").marshal(createCsvDataFormat()).to(uri).         }     }. }
false;public;2;4;;@Override public CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {     return new SinglePrinterCsvMarshaller(format). }
false;private,static;0;15;;private static CsvDataFormat createCsvDataFormat() {     CsvDataFormat dataFormat = new CsvDataFormat().     dataFormat.setDelimiter('\t').     dataFormat.setTrim(true).     dataFormat.setIgnoreSurroundingSpaces(true).     dataFormat.setHeader((String[]) Arrays.asList("first_name", "last_name").toArray()).     dataFormat.setMarshallerFactory(new CsvMarshallerFactory() {          @Override         public CsvMarshaller create(CSVFormat format, CsvDataFormat dataFormat) {             return new SinglePrinterCsvMarshaller(format).         }     }).     return dataFormat. }
false;private,static;1;8;;private static CSVPrinter createPrinter(CSVFormat format) {     try {         // Headers and header comments are written out in the constructor already.         return format.print(new StringBuilder()).     } catch (IOException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;3;14;;@SuppressWarnings("unchecked") public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws IOException {     Iterator<Map<String, String>> it = (Iterator<Map<String, String>>) ObjectHelper.createIterator(object).     synchronized (printer) {         while (it.hasNext()) {             printer.printRecord(getMapRecordValues(it.next())).         }         // Access the 'Appendable'         StringBuilder stringBuilder = (StringBuilder) printer.getOut().         outputStream.write(stringBuilder.toString().getBytes()).         // Reset the 'Appendable' for the next exchange.         stringBuilder.setLength(0).     } }
false;protected;1;8;;@Override protected Iterable<?> getMapRecordValues(Map<?, ?> map) {     List<String> result = new ArrayList<>(map.size()).     for (Object key : map.keySet()) {         result.add((String) map.get(key)).     }     return result. }
