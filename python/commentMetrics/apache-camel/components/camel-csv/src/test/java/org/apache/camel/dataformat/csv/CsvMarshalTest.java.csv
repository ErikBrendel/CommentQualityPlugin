commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void shouldMarshalLists() throws Exception {     output.expectedMessageCount(1).     template.sendBody("direct:default", Arrays.<List>asList(Arrays.asList("1", "2", "3"), Arrays.asList("one", "two", "three"))).     output.assertIsSatisfied().     String[] actuals = readOutputLines(0).     assertArrayEquals(new String[] { "1,2,3", "one,two,three" }, actuals). }
false;public;0;13;;@Test public void shouldMarshalListsOneRow() throws Exception {     output.expectedMessageCount(1).     template.sendBody("direct:default", Arrays.<List>asList(Arrays.asList("1"), Arrays.asList("one"))).     output.assertIsSatisfied().     String[] actuals = readOutputLines(0).     assertArrayEquals(new String[] { "1", "one" }, actuals). }
false;public;0;12;;@Test public void shouldMarshalMaps() throws Exception {     output.expectedMessageCount(1).     template.sendBody("direct:default", Arrays.<Map>asList(TestUtils.asMap("A", "1", "B", "2", "C", "3"), TestUtils.asMap("A", "one", "B", "two", "C", "three"))).     output.assertIsSatisfied().     assertArrayEquals(new String[] { "1,2,3", "one,two,three" }, readOutputLines(0)). }
false;public;0;9;;@Test public void shouldMarshalSingleMap() throws Exception {     output.expectedMessageCount(1).     template.sendBody("direct:default", TestUtils.asMap("A", "1", "B", "2", "C", "3")).     output.assertIsSatisfied().     assertArrayEquals(new String[] { "1,2,3" }, readOutputLines(0)). }
false;public;0;12;;@Test public void shouldHandleColumns() throws Exception {     output.expectedMessageCount(1).     template.sendBody("direct:headers", Arrays.<Map>asList(TestUtils.asMap("A", "1", "B", "2", "C", "3"), TestUtils.asMap("A", "one", "B", "two", "C", "three"))).     output.assertIsSatisfied().     assertArrayEquals(new String[] { "A,C", "1,3", "one,three" }, readOutputLines(0)). }
false;public;0;11;;@Test public void shouldMarshalDifferentDynamicColumns() throws Exception {     output.expectedMessageCount(2).     template.sendBody("direct:default", TestUtils.asMap("A", "1", "B", "2")).     template.sendBody("direct:default", TestUtils.asMap("X", "1", "Y", "2", "Z", "3")).     output.assertIsSatisfied().     assertArrayEquals(new String[] { "1,2" }, readOutputLines(0)).     assertArrayEquals(new String[] { "1,2,3" }, readOutputLines(1)). }
false;public;0;12;;@Override public void configure() throws Exception {     // Default format     from("direct:default").marshal(new CsvDataFormat()).to("mock:output").     // Format with special headers     from("direct:headers").marshal(new CsvDataFormat().setHeader(new String[] { "A", "C" })).to("mock:output"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // Default format             from("direct:default").marshal(new CsvDataFormat()).to("mock:output").             // Format with special headers             from("direct:headers").marshal(new CsvDataFormat().setHeader(new String[] { "A", "C" })).to("mock:output").         }     }. }
false;private;1;3;;private String[] readOutputLines(int index) {     return output.getExchanges().get(index).getIn().getBody(String.class).split("\r\n|\r|\n"). }
