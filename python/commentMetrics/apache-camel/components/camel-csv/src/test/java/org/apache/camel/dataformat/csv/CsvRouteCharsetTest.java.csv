commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@SuppressWarnings("unchecked") @Test public void testUnMarshal() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:daltons").     endpoint.expectedMessageCount(1).     endpoint.assertIsSatisfied().     Exchange exchange = endpoint.getExchanges().get(0).     List<List<String>> data = (List<List<String>>) exchange.getIn().getBody().     assertEquals("Jäck Dalton", data.get(0).get(0)).     assertEquals("Jöe Dalton", data.get(1).get(0)).     assertEquals("Lücky Luke", data.get(2).get(0)). }
false;public;0;5;;public void configure() {     from("file:src/test/resources/?fileName=daltons-utf-8.csv&noop=true").unmarshal().csv().to("mock:daltons"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("file:src/test/resources/?fileName=daltons-utf-8.csv&noop=true").unmarshal().csv().to("mock:daltons").         }     }. }
