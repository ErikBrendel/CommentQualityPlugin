commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testValidMessage() throws Exception {     validEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBody("direct:start", "{ \"name\": \"Joe Doe\", \"id\": 1, \"price\": 12.5 }").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint). }
false;public;0;12;;@Test public void testValidMessageInHeader() throws Exception {     validEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:startHeaders", null, "headerToValidate", "{ \"name\": \"Joe Doe\", \"id\": 1, \"price\": 12.5 }").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint). }
false;public;0;10;;@Test public void testInvalidMessage() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBody("direct:start", "{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint). }
false;public;0;12;;@Test public void testInvalidMessageInHeader() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:startHeaders", null, "headerToValidate", "{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint). }
false;public;0;8;;@Test public void testNullHeaderNoFail() throws Exception {     validEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:startNullHeaderNoFail", null, "headerToValidate", null).     MockEndpoint.assertIsSatisfied(validEndpoint). }
false;public;0;18;;@Test public void testNullHeader() throws Exception {     validEndpoint.setExpectedMessageCount(0).     Exchange in = resolveMandatoryEndpoint("direct:startNoHeaderException").createExchange(ExchangePattern.InOut).     in.getIn().setBody(null).     in.getIn().setHeader("headerToValidate", null).     Exchange out = template.send("direct:startNoHeaderException", in).     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint).     Exception exception = out.getException().     assertTrue("Should be failed", out.isFailed()).     assertTrue("Exception should be correct type", exception instanceof NoJsonHeaderValidationException).     assertTrue("Exception should mention missing header", exception.getMessage().contains("headerToValidate")). }
false;public;0;10;;@Test public void testInvalideBytesMessage() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBody("direct:start", "{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }".getBytes()).     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint). }
false;public;0;12;;@Test public void testInvalidBytesMessageInHeader() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:startHeaders", null, "headerToValidate", "{ \"name\": \"Joe Doe\", \"id\": \"ABC123\", \"price\": 12.5 }".getBytes()).     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, finallyEndpoint). }
false;public;0;30;;@Override public void configure() throws Exception {     from("direct:start").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end().     from("direct:startHeaders").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end().     from("direct:startNoHeaderException").to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate").to("mock:valid").     from("direct:startNullHeaderNoFail").to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate&failOnNullHeader=false").to("mock:valid"). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end().             from("direct:startHeaders").doTry().to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate").to("mock:valid").doCatch(ValidationException.class).to("mock:invalid").doFinally().to("mock:finally").end().             from("direct:startNoHeaderException").to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate").to("mock:valid").             from("direct:startNullHeaderNoFail").to("json-validator:org/apache/camel/component/jsonvalidator/schema.json?headerName=headerToValidate&failOnNullHeader=false").to("mock:valid").         }     }. }
