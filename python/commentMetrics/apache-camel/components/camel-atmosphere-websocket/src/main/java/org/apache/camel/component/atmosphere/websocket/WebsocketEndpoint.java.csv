commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new WebsocketProducer(this). }
false;public;1;5;;@Override public Consumer createConsumer(Processor processor) throws Exception {     websocketConsumer = new WebsocketConsumer(this, processor).     return websocketConsumer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public boolean isSendToAll() {     return sendToAll. }
true;public;1;3;/**  * Whether to send to all (broadcast) or send to a single receiver.  */ ;/**  * Whether to send to all (broadcast) or send to a single receiver.  */ public void setSendToAll(boolean sendToAll) {     this.sendToAll = sendToAll. }
false;public;0;3;;public boolean isUseStreaming() {     return useStreaming. }
true;public;1;3;/**  * To enable streaming to send data as multiple text fragments.  */ ;/**  * To enable streaming to send data as multiple text fragments.  */ public void setUseStreaming(boolean useStreaming) {     this.useStreaming = useStreaming. }
false;;0;3;;WebSocketStore getWebSocketStore() {     return store. }
false;public;0;3;;public WebsocketConsumer getWebsocketConsumer() {     return websocketConsumer. }
