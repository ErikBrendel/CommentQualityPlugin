commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void init(ServletConfig config) throws ServletException {     super.init(config).     initParameters(config).     enrichConsumers(config). }
false;protected;2;39;;@Override protected void doService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     log.trace("Service: {}", request).     // Is there a consumer registered for the request.     HttpConsumer consumer = getServletResolveConsumerStrategy().resolve(request, getConsumers()).     if (consumer == null) {         log.debug("No consumer to service request {}", request).         response.sendError(HttpServletResponse.SC_NOT_FOUND).         return.     }     // are we suspended?     if (consumer.isSuspended()) {         log.debug("Consumer suspended, cannot service request {}", request).         response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE).         return.     }     if (consumer.getEndpoint().getHttpMethodRestrict() != null && !consumer.getEndpoint().getHttpMethodRestrict().equals(request.getMethod())) {         response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED).         return.     }     if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {         response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED).         return.     }     if (!(consumer instanceof WebsocketConsumer)) {         log.debug("Consumer not supporting websocket {}", request).         response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE).         return.     }     log.debug("Dispatching to Websocket Consumer at {}", consumer.getPath()).     ((WebsocketConsumer) consumer).service(request, response). }
false;private;1;7;;private void initParameters(ServletConfig config) {     String eventsResendingParameter = config.getInitParameter(RESEND_ALL_WEBSOCKET_EVENTS_PARAM_KEY).     if ("true".equals(eventsResendingParameter)) {         log.debug("Events resending enabled").         enableEventsResending = true.     } }
false;private;1;7;;private void enrichConsumers(ServletConfig config) throws ServletException {     for (Map.Entry<String, HttpConsumer> httpConsumerEntry : getConsumers().entrySet()) {         WebsocketConsumer consumer = (WebsocketConsumer) httpConsumerEntry.getValue().         consumer.configureFramework(config).         consumer.configureEventsResending(enableEventsResending).     } }
