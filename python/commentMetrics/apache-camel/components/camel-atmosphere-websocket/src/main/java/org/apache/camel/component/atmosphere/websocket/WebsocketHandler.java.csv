commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void configure(AtmosphereConfig config) { // noop }
false;public;1;8;;@Override public void onClose(WebSocket webSocket) {     LOG.debug("closing websocket").     String connectionKey = store.getConnectionKey(webSocket).     sendEventNotification(connectionKey, WebsocketConstants.ONCLOSE_EVENT_TYPE).     store.removeWebSocket(webSocket).     LOG.debug("websocket closed"). }
false;public;2;6;;@Override public void onError(WebSocket webSocket, WebSocketException t) {     LOG.error("websocket on error", t).     String connectionKey = store.getConnectionKey(webSocket).     sendEventNotification(connectionKey, WebsocketConstants.ONERROR_EVENT_TYPE). }
false;public;1;8;;@Override public void onOpen(WebSocket webSocket) {     LOG.debug("opening websocket").     String connectionKey = UUID.randomUUID().toString().     store.addWebSocket(connectionKey, webSocket).     sendEventNotification(connectionKey, WebsocketConstants.ONOPEN_EVENT_TYPE).     LOG.debug("websocket opened"). }
false;public;2;8;;@Override public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {     LOG.debug("processing text message {}", data).     String connectionKey = store.getConnectionKey(webSocket).     consumer.sendMessage(connectionKey, data).     LOG.debug("text message sent").     return null. }
false;public;4;15;;@Override public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {     LOG.debug("processing byte message {}", data).     String connectionKey = store.getConnectionKey(webSocket).     if (length < data.length) {         // create a copy that contains the relevant section as camel expects bytes without offset.         // alternatively, we could pass a BAIS reading this byte array from the offset.         byte[] rawdata = data.         data = new byte[length].         System.arraycopy(rawdata, offset, data, 0, length).     }     consumer.sendMessage(connectionKey, data).     LOG.debug("byte message sent").     return null. }
false;public;1;4;;public void setConsumer(WebsocketConsumer consumer) {     this.consumer = consumer.     this.store = consumer.getEndpoint().getWebSocketStore(). }
false;private;2;5;;private void sendEventNotification(final String connectionKey, final int eventType) {     if (consumer.isEnableEventsResending()) {         consumer.sendEventNotification(connectionKey, eventType).     } }
