commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void connect() throws InterruptedException, ExecutionException, IOException {     websocket = client.prepareGet(url).execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new TestWebSocketListener()).build()).get(). }
false;public;1;3;;public void sendTextMessage(String message) {     websocket.sendTextFrame(message). }
false;public;1;3;;public void sendBytesMessage(byte[] message) {     websocket.sendBinaryFrame(message). }
false;public;1;3;;public boolean await(int secs) throws InterruptedException {     return latch.await(secs, TimeUnit.SECONDS). }
false;public;1;4;;public void reset(int count) {     latch = new CountDownLatch(count).     received.clear(). }
false;public;0;3;;public List<Object> getReceived() {     return received. }
false;public;1;7;;public <T> List<T> getReceived(Class<T> cls) {     List<T> list = new ArrayList<>().     for (Object o : received) {         list.add(getValue(o, cls)).     }     return list. }
false;private,static;2;17;;@SuppressWarnings("unchecked") private static <T> T getValue(Object o, Class<T> cls) {     if (cls.isInstance(o)) {         return (T) o.     } else if (cls == String.class) {         if (o instanceof byte[]) {             return (T) new String((byte[]) o).         } else {             return (T) o.toString().         }     } else if (cls == byte[].class) {         if (o instanceof String) {             return (T) ((String) o).getBytes().         }     }     return null. }
false;public;0;4;;public void close() throws IOException {     websocket.sendCloseFrame().     client.close(). }
false;public;1;4;;@Override public void onOpen(WebSocket websocket) {     LOG.info("[ws] opened"). }
false;public;3;4;;@Override public void onClose(WebSocket websocket, int code, String reason) {     LOG.info("[ws] closed"). }
false;public;1;4;;@Override public void onError(Throwable t) {     LOG.error("[ws] error", t). }
false;public;3;6;;@Override public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {     received.add(message).     LOG.info("[ws] received bytes --> " + Arrays.toString(message)).     latch.countDown(). }
false;public;3;6;;@Override public void onTextFrame(String message, boolean finalFragment, int rsv) {     received.add(message).     LOG.info("[ws] received --> " + message).     latch.countDown(). }
