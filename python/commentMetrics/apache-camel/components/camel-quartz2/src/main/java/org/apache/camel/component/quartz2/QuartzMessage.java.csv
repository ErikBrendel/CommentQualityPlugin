commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public JobExecutionContext getJobExecutionContext() {     return jobExecutionContext. }
false;protected;1;22;;@Override protected void populateInitialHeaders(Map<String, Object> map) {     super.populateInitialHeaders(map).     if (jobExecutionContext != null) {         map.put("calendar", jobExecutionContext.getCalendar()).         map.put("fireTime", jobExecutionContext.getFireTime()).         map.put("jobDetail", jobExecutionContext.getJobDetail()).         map.put("jobInstance", jobExecutionContext.getJobInstance()).         map.put("jobRunTime", jobExecutionContext.getJobRunTime()).         map.put("mergedJobDataMap", jobExecutionContext.getMergedJobDataMap()).         map.put("nextFireTime", jobExecutionContext.getNextFireTime()).         map.put("previousFireTime", jobExecutionContext.getPreviousFireTime()).         map.put("refireCount", jobExecutionContext.getRefireCount()).         map.put("result", jobExecutionContext.getResult()).         map.put("scheduledFireTime", jobExecutionContext.getScheduledFireTime()).         map.put("scheduler", jobExecutionContext.getScheduler()).         Trigger trigger = jobExecutionContext.getTrigger().         map.put("trigger", trigger).         map.put("triggerName", trigger.getKey().getName()).         map.put("triggerGroup", trigger.getKey().getGroup()).     } }
false;public;0;4;;@Override public DefaultMessage newInstance() {     return new QuartzMessage(getExchange(), jobExecutionContext). }
