commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void onInit(Route route) {     try {         doOnInit(route).     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;protected;1;35;;protected void doOnInit(Route route) throws Exception {     QuartzComponent quartz = route.getRouteContext().getCamelContext().getComponent("quartz2", QuartzComponent.class).     setScheduler(quartz.getScheduler()).     if (getRouteStopGracePeriod() == 0) {         setRouteStopGracePeriod(10000).     }     if (getTimeUnit() == null) {         setTimeUnit(TimeUnit.MILLISECONDS).     }     // validate time options has been configured     if ((getRouteStartTime() == null) && (getRouteStopTime() == null) && (getRouteSuspendTime() == null) && (getRouteResumeTime() == null)) {         throw new IllegalArgumentException("Scheduled Route Policy for route " + route.getId() + " has no start/stop/suspend/resume times specified").     }     registerRouteToScheduledRouteDetails(route).     if (getRouteStartTime() != null) {         scheduleRoute(Action.START, route).     }     if (getRouteStopTime() != null) {         scheduleRoute(Action.STOP, route).     }     if (getRouteSuspendTime() != null) {         scheduleRoute(Action.SUSPEND, route).     }     if (getRouteResumeTime() != null) {         scheduleRoute(Action.RESUME, route).     } }
false;protected;2;34;;@Override protected Trigger createTrigger(Action action, Route route) throws Exception {     Trigger trigger = null.     CronScheduleBuilder scheduleBuilder = null.     String triggerPrefix = null.     if (action == Action.START) {         scheduleBuilder = CronScheduleBuilder.cronSchedule(getRouteStartTime()).         triggerPrefix = TRIGGER_START.     } else if (action == Action.STOP) {         scheduleBuilder = CronScheduleBuilder.cronSchedule(getRouteStopTime()).         triggerPrefix = TRIGGER_STOP.     } else if (action == Action.SUSPEND) {         scheduleBuilder = CronScheduleBuilder.cronSchedule(getRouteSuspendTime()).         triggerPrefix = TRIGGER_SUSPEND.     } else if (action == Action.RESUME) {         scheduleBuilder = CronScheduleBuilder.cronSchedule(getRouteResumeTime()).         triggerPrefix = TRIGGER_RESUME.     }     if (scheduleBuilder != null) {         if (timeZone != null) {             scheduleBuilder.inTimeZone(timeZone).         }         TriggerKey triggerKey = new TriggerKey(triggerPrefix + route.getId(), TRIGGER_GROUP + route.getId()).         trigger = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(scheduleBuilder).build().     }     return trigger. }
false;public;1;3;;public void setRouteStartTime(String routeStartTime) {     this.routeStartTime = routeStartTime. }
false;public;0;3;;public String getRouteStartTime() {     return routeStartTime. }
false;public;1;3;;public void setRouteStopTime(String routeStopTime) {     this.routeStopTime = routeStopTime. }
false;public;0;3;;public String getRouteStopTime() {     return routeStopTime. }
false;public;1;3;;public void setRouteSuspendTime(String routeSuspendTime) {     this.routeSuspendTime = routeSuspendTime. }
false;public;0;3;;public String getRouteSuspendTime() {     return routeSuspendTime. }
false;public;1;3;;public void setRouteResumeTime(String routeResumeTime) {     this.routeResumeTime = routeResumeTime. }
false;public;0;3;;public String getRouteResumeTime() {     return routeResumeTime. }
false;public;0;3;;public String getTimeZone() {     return timeZoneString. }
false;public;1;4;;public void setTimeZone(String timeZone) {     this.timeZoneString = timeZone.     this.timeZone = TimeZone.getTimeZone(timeZone). }
