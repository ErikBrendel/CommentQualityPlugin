commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void onInit(Consumer consumer) {     this.consumer = consumer.     // find the route of the consumer     for (Route route : consumer.getEndpoint().getCamelContext().getRoutes()) {         if (route.getConsumer() == consumer) {             this.routeId = route.getId().             break.         }     } }
false;public;1;4;;@Override public void scheduleTask(Runnable runnable) {     this.runnable = runnable. }
false;public;0;11;;@Override public void unscheduleTask() {     if (trigger != null) {         log.debug("Unscheduling trigger: {}", trigger.getKey()).         try {             quartzScheduler.unscheduleJob(trigger.getKey()).         } catch (SchedulerException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     } }
false;public;0;4;;@Override public void startScheduler() { // the quartz component starts the scheduler }
false;public;0;8;;@Override public boolean isSchedulerStarted() {     try {         return quartzScheduler != null && quartzScheduler.isStarted().     } catch (SchedulerException e) {         return false.     } }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;0;3;;public Scheduler getQuartzScheduler() {     return quartzScheduler. }
false;public;1;3;;public void setQuartzScheduler(Scheduler scheduler) {     this.quartzScheduler = scheduler. }
false;public;0;3;;public String getCron() {     return cron. }
false;public;1;3;;public void setCron(String cron) {     this.cron = cron. }
false;public;0;3;;public TimeZone getTimeZone() {     return timeZone. }
false;public;1;3;;public void setTimeZone(TimeZone timeZone) {     this.timeZone = timeZone. }
false;public;0;3;;public String getTriggerId() {     return triggerId. }
false;public;1;3;;public void setTriggerId(String triggerId) {     this.triggerId = triggerId. }
false;public;0;3;;public String getTriggerGroup() {     return triggerGroup. }
false;public;1;3;;public void setTriggerGroup(String triggerGroup) {     this.triggerGroup = triggerGroup. }
false;protected;0;94;;@Override protected void doStart() throws Exception {     StringHelper.notEmpty(cron, "cron", this).     if (quartzScheduler == null) {         // get the scheduler form the quartz component         QuartzComponent quartz = getCamelContext().getComponent("quartz2", QuartzComponent.class).         setQuartzScheduler(quartz.getScheduler()).     }     String id = triggerId.     if (id == null) {         id = "trigger-" + getCamelContext().getUuidGenerator().generateUuid().     }     CronTrigger existingTrigger = null.     TriggerKey triggerKey = null.     if (triggerId != null && triggerGroup != null) {         triggerKey = new TriggerKey(triggerId, triggerGroup).         existingTrigger = (CronTrigger) quartzScheduler.getTrigger(triggerKey).     }     // Is an trigger already exist for this triggerId ?     if (existingTrigger == null) {         JobDataMap map = new JobDataMap().         // do not store task as its not serializable, if we have route id         if (routeId != null) {             map.put("routeId", routeId).         } else {             map.put("task", runnable).         }         map.put(QuartzConstants.QUARTZ_TRIGGER_TYPE, "cron").         map.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron()).         map.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID()).         job = JobBuilder.newJob(QuartzScheduledPollConsumerJob.class).usingJobData(map).build().         // store additional information on job such as camel context etc         QuartzHelper.updateJobDataMap(getCamelContext(), job, null).         trigger = TriggerBuilder.newTrigger().withIdentity(id, triggerGroup).withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())).build().         log.debug("Scheduling job: {} with trigger: {}", job, trigger.getKey()).         quartzScheduler.scheduleJob(job, trigger).     } else {         checkTriggerIsNonConflicting(existingTrigger).         log.debug("Trigger with key {} is already present in scheduler. Only updating it.", triggerKey).         job = quartzScheduler.getJobDetail(existingTrigger.getJobKey()).         JobDataMap jobData = job.getJobDataMap().         jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, getCron()).         jobData.put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, getTimeZone().getID()).         // store additional information on job such as camel context etc         QuartzHelper.updateJobDataMap(getCamelContext(), job, null).         log.debug("Updated jobData map to {}", jobData).         trigger = existingTrigger.getTriggerBuilder().withSchedule(CronScheduleBuilder.cronSchedule(getCron()).inTimeZone(getTimeZone())).build().         // Reschedule job if trigger settings were changed         if (hasTriggerChanged(existingTrigger, trigger)) {             log.debug("Re-scheduling job: {} with trigger: {}", job, trigger.getKey()).             quartzScheduler.rescheduleJob(triggerKey, trigger).         } else {             // Schedule it now. Remember that scheduler might not be started it, but we can schedule now.             log.debug("Scheduling job: {} with trigger: {}", job, trigger.getKey()).             try {                 // Schedule it now. Remember that scheduler might not be started it, but we can schedule now.                 quartzScheduler.scheduleJob(job, trigger).             } catch (ObjectAlreadyExistsException ex) {                 // some other VM might may have stored the job & trigger in DB in clustered mode, in the mean time                 QuartzComponent quartz = getCamelContext().getComponent("quartz2", QuartzComponent.class).                 if (!(quartz.isClustered())) {                     throw ex.                 } else {                     trigger = (CronTrigger) quartzScheduler.getTrigger(triggerKey).                     if (trigger == null) {                         throw new SchedulerException("Trigger could not be found in quartz scheduler.").                     }                 }             }         }     }     if (log.isInfoEnabled()) {         log.info("Job {} (triggerType={}, jobClass={}) is scheduled. Next fire date is {}", new Object[] { trigger.getKey(), trigger.getClass().getSimpleName(), job.getJobClass().getSimpleName(), trigger.getNextFireTime() }).     } }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (trigger != null) {         log.debug("Unscheduling trigger: {}", trigger.getKey()).         quartzScheduler.unscheduleJob(trigger.getKey()).     } }
false;protected;0;3;;@Override protected void doShutdown() throws Exception { }
false;private;1;7;;private void checkTriggerIsNonConflicting(Trigger trigger) {     JobDataMap jobDataMap = trigger.getJobDataMap().     String routeIdFromTrigger = jobDataMap.getString("routeId").     if (routeIdFromTrigger != null && !routeIdFromTrigger.equals(routeId)) {         throw new IllegalArgumentException("Trigger key " + trigger.getKey() + " is already used by route: " + routeIdFromTrigger + ". Cannot re-use it for another route: " + routeId).     } }
false;private;2;14;;private boolean hasTriggerChanged(Trigger oldTrigger, Trigger newTrigger) {     if (newTrigger instanceof CronTrigger && oldTrigger instanceof CronTrigger) {         CronTrigger newCron = (CronTrigger) newTrigger.         CronTrigger oldCron = (CronTrigger) oldTrigger.         return !newCron.getCronExpression().equals(oldCron.getCronExpression()).     } else if (newTrigger instanceof SimpleTrigger && oldTrigger instanceof SimpleTrigger) {         SimpleTrigger newSimple = (SimpleTrigger) newTrigger.         SimpleTrigger oldSimple = (SimpleTrigger) oldTrigger.         return newSimple.getRepeatInterval() != oldSimple.getRepeatInterval() || newSimple.getRepeatCount() != oldSimple.getRepeatCount().     } else {         return !newTrigger.getClass().equals(oldTrigger.getClass()) || !newTrigger.equals(oldTrigger).     } }
