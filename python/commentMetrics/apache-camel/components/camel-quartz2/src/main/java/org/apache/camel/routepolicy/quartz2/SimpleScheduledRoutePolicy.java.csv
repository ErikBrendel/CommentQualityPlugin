commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void onInit(Route route) {     try {         doOnInit(route).     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;protected;1;35;;protected void doOnInit(Route route) throws Exception {     QuartzComponent quartz = route.getRouteContext().getCamelContext().getComponent("quartz2", QuartzComponent.class).     setScheduler(quartz.getScheduler()).     if (getRouteStopGracePeriod() == 0) {         setRouteStopGracePeriod(10000).     }     if (getTimeUnit() == null) {         setTimeUnit(TimeUnit.MILLISECONDS).     }     // validate time options has been configured     if ((getRouteStartDate() == null) && (getRouteStopDate() == null) && (getRouteSuspendDate() == null) && (getRouteResumeDate() == null)) {         throw new IllegalArgumentException("Scheduled Route Policy for route " + route.getId() + " has no start/stop/suspend/resume times specified").     }     registerRouteToScheduledRouteDetails(route).     if (getRouteStartDate() != null) {         scheduleRoute(Action.START, route).     }     if (getRouteStopDate() != null) {         scheduleRoute(Action.STOP, route).     }     if (getRouteSuspendDate() != null) {         scheduleRoute(Action.SUSPEND, route).     }     if (getRouteResumeDate() != null) {         scheduleRoute(Action.RESUME, route).     } }
false;protected;2;40;;@Override protected Trigger createTrigger(Action action, Route route) throws Exception {     SimpleTrigger trigger = null.     if (action == Action.START) {         trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_START + route.getId(), TRIGGER_GROUP + route.getId()).withSchedule(SimpleScheduleBuilder.simpleSchedule().withRepeatCount(getRouteStartRepeatCount()).withIntervalInMilliseconds(getRouteStartRepeatInterval())).startAt(routeStartDate == null ? new Date() : routeStartDate).build().     } else if (action == Action.STOP) {         trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_STOP + route.getId(), TRIGGER_GROUP + route.getId()).withSchedule(SimpleScheduleBuilder.simpleSchedule().withRepeatCount(getRouteStopRepeatCount()).withIntervalInMilliseconds(getRouteStopRepeatInterval())).startAt(routeStopDate == null ? new Date() : routeStopDate).build().     } else if (action == Action.SUSPEND) {         trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_SUSPEND + route.getId(), TRIGGER_GROUP + route.getId()).withSchedule(SimpleScheduleBuilder.simpleSchedule().withRepeatCount(getRouteSuspendRepeatCount()).withIntervalInMilliseconds(getRouteSuspendRepeatInterval())).startAt(routeSuspendDate == null ? new Date() : routeSuspendDate).build().     } else if (action == Action.RESUME) {         trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_RESUME + route.getId(), TRIGGER_GROUP + route.getId()).withSchedule(SimpleScheduleBuilder.simpleSchedule().withRepeatCount(getRouteResumeRepeatCount()).withIntervalInMilliseconds(getRouteResumeRepeatInterval())).startAt(routeResumeDate == null ? new Date() : routeResumeDate).build().     }     return trigger. }
false;public;0;3;;public Date getRouteStartDate() {     return routeStartDate. }
false;public;1;3;;public void setRouteStartDate(Date routeStartDate) {     this.routeStartDate = routeStartDate. }
false;public;0;3;;public Date getRouteStopDate() {     return routeStopDate. }
false;public;1;3;;public void setRouteStopDate(Date routeStopDate) {     this.routeStopDate = routeStopDate. }
false;public;0;3;;public Date getRouteSuspendDate() {     return routeSuspendDate. }
false;public;1;3;;public void setRouteSuspendDate(Date routeSuspendDate) {     this.routeSuspendDate = routeSuspendDate. }
false;public;0;3;;public int getRouteStartRepeatCount() {     return routeStartRepeatCount. }
false;public;1;3;;public void setRouteStartRepeatCount(int routeStartRepeatCount) {     this.routeStartRepeatCount = routeStartRepeatCount. }
false;public;0;3;;public long getRouteStartRepeatInterval() {     return routeStartRepeatInterval. }
false;public;1;3;;public void setRouteStartRepeatInterval(long routeStartRepeatInterval) {     this.routeStartRepeatInterval = routeStartRepeatInterval. }
false;public;0;3;;public int getRouteStopRepeatCount() {     return routeStopRepeatCount. }
false;public;1;3;;public void setRouteStopRepeatCount(int routeStopRepeatCount) {     this.routeStopRepeatCount = routeStopRepeatCount. }
false;public;0;3;;public long getRouteStopRepeatInterval() {     return routeStopRepeatInterval. }
false;public;1;3;;public void setRouteStopRepeatInterval(long routeStopRepeatInterval) {     this.routeStopRepeatInterval = routeStopRepeatInterval. }
false;public;0;3;;public int getRouteSuspendRepeatCount() {     return routeSuspendRepeatCount. }
false;public;1;3;;public void setRouteSuspendRepeatCount(int routeSuspendRepeatCount) {     this.routeSuspendRepeatCount = routeSuspendRepeatCount. }
false;public;0;3;;public long getRouteSuspendRepeatInterval() {     return routeSuspendRepeatInterval. }
false;public;1;3;;public void setRouteSuspendRepeatInterval(long routeSuspendRepeatInterval) {     this.routeSuspendRepeatInterval = routeSuspendRepeatInterval. }
false;public;1;3;;public void setRouteResumeDate(Date routeResumeDate) {     this.routeResumeDate = routeResumeDate. }
false;public;0;3;;public Date getRouteResumeDate() {     return routeResumeDate. }
false;public;1;3;;public void setRouteResumeRepeatCount(int routeResumeRepeatCount) {     this.routeResumeRepeatCount = routeResumeRepeatCount. }
false;public;0;3;;public int getRouteResumeRepeatCount() {     return routeResumeRepeatCount. }
false;public;1;3;;public void setRouteResumeRepeatInterval(long routeResumeRepeatInterval) {     this.routeResumeRepeatInterval = routeResumeRepeatInterval. }
false;public;0;3;;public long getRouteResumeRepeatInterval() {     return routeResumeRepeatInterval. }
