commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testQuartzCronRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     QuartzComponent component = context.getComponent("quartz2", QuartzComponent.class).     Scheduler scheduler = component.getScheduler().     // collect all jobKeys of this route (ideally only one).     ArrayList<JobKey> jobKeys = new ArrayList<>().     for (String group : scheduler.getJobGroupNames()) {         for (JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(group))) {             jobKeys.add(jobKey).         }     }     JobDataMap jobDataMap = scheduler.getJobDetail(jobKeys.get(0)).getJobDataMap().     // trigger job manually     scheduler.triggerJob(jobKeys.get(0), jobDataMap).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from("quartz2://MyTimer?cron=05+00+00+*+*+?").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("quartz2://MyTimer?cron=05+00+00+*+*+?").to("mock:result").         }     }. }
