commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testQuartzCronRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(3).     assertMockEndpointsSatisfied().     JobDetail job = mock.getReceivedExchanges().get(0).getIn().getHeader("jobDetail", JobDetail.class).     assertNotNull(job).     assertEquals("cron", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_TYPE)).     assertEquals("0/2 * * * * ?", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION)). }
false;public;0;3;;public void configure() {     from("my:quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("my:quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?").to("mock:result").         }     }. }
false;protected;1;4;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("my", new MyComponent()). }
false;protected;3;14;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     String childUri = remaining.     // we need to apply the params here     if (parameters != null && parameters.size() > 0) {         childUri = childUri + "?" + URISupport.createQueryString(parameters).     }     // need to clean the parameters to avoid default component verify parameter complain     parameters.clear().     Endpoint childEndpoint = context.getEndpoint(childUri).     return new MyEndpoint(uri, childEndpoint). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return childEndpoint.createProducer(). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return childEndpoint.createConsumer(processor). }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;4;;@Override public Endpoint getEndpoint() {     return childEndpoint. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "my:" + childEndpoint.getEndpointUri(). }
