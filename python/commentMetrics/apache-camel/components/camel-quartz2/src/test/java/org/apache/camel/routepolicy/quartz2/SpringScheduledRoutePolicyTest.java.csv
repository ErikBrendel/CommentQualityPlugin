commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void startTest() throws Exception {     CamelContext context = startRouteWithPolicy("startPolicy").     MockEndpoint mock = context.getEndpoint("mock:success", MockEndpoint.class).     mock.expectedMinimumMessageCount(1).     context.getRouteController().stopRoute("testRoute", 1000, TimeUnit.MILLISECONDS).     Thread.sleep(4000).     assertTrue(context.getRouteController().getRouteStatus("testRoute") == ServiceStatus.Started).     context.createProducerTemplate().sendBody("direct:start", "Ready or not, Here, I come").     context.stop().     mock.assertIsSatisfied(). }
false;public;0;15;;public void stopTest() throws Exception {     boolean consumerStopped = false.     CamelContext context = startRouteWithPolicy("stopPolicy").     Thread.sleep(4000).     assertTrue(context.getRouteController().getRouteStatus("testRoute") == ServiceStatus.Stopped).     try {         context.createProducerTemplate().sendBody("direct:start", "Ready or not, Here, I come").     } catch (CamelExecutionException e) {         consumerStopped = true.     }     context.stop().     assertTrue(consumerStopped). }
false;public;0;15;;public void suspendTest() throws Exception {     boolean consumerSuspended = false.     CamelContext context = startRouteWithPolicy("suspendPolicy").     Thread.sleep(4000).     try {         context.createProducerTemplate().sendBody("direct:start", "Ready or not, Here, I come").     } catch (CamelExecutionException e) {         consumerSuspended = true.     }     context.stop().     assertTrue(consumerSuspended). }
false;public;0;14;;public void resumeTest() throws Exception {     CamelContext context = startRouteWithPolicy("resumePolicy").     MockEndpoint mock = context.getEndpoint("mock:success", MockEndpoint.class).     mock.expectedMinimumMessageCount(1).     ServiceHelper.suspendService(context.getRoute("testRoute").getConsumer()).     Thread.sleep(4000).     context.createProducerTemplate().sendBody("direct:start", "Ready or not, Here, I come").     context.stop().     mock.assertIsSatisfied(). }
false;private;1;13;;@SuppressWarnings("unchecked") private CamelContext startRouteWithPolicy(String policyBeanName) throws Exception {     CamelContext context = new DefaultCamelContext().     List<RouteDefinition> routes = (List<RouteDefinition>) applicationContext.getBean("testRouteContext").     RoutePolicy policy = applicationContext.getBean(policyBeanName, RoutePolicy.class).     assertTrue(getTestType() == TestType.SIMPLE ? policy instanceof SimpleScheduledRoutePolicy : policy instanceof CronScheduledRoutePolicy).     routes.get(0).routePolicy(policy).     ((ModelCamelContext) context).addRouteDefinitions(routes).     context.start().     return context. }
false;public;0;3;;public ClassPathXmlApplicationContext getApplicationContext() {     return applicationContext. }
false;public;1;3;;public void setApplicationContext(ClassPathXmlApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
false;public;0;3;;public TestType getTestType() {     return testType. }
false;public;1;3;;public void setTestType(TestType testType) {     this.testType = testType. }
