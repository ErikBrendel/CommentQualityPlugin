commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("startPolicy", createRouteStartPolicy()).     registry.bind("throttlePolicy", createThrottlePolicy()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;private;0;9;;private RoutePolicy createRouteStartPolicy() {     SimpleScheduledRoutePolicy policy = new SimpleScheduledRoutePolicy().     long startTime = System.currentTimeMillis() + 3000L.     policy.setRouteStartDate(new Date(startTime)).     policy.setRouteStartRepeatCount(1).     policy.setRouteStartRepeatInterval(3000).     return policy. }
false;private;0;5;;private RoutePolicy createThrottlePolicy() {     ThrottlingInflightRoutePolicy policy = new ThrottlingInflightRoutePolicy().     policy.setMaxInflightExchanges(10).     return policy. }
false;public;0;7;;public void configure() {     from(url).routeId("test").routePolicyRef("startPolicy, throttlePolicy").to("log:foo?groupSize=10").to("mock:success"). }
false;public;0;26;;@Test public void testMultiplePoliciesOnRoute() throws Exception {     MockEndpoint success = context.getEndpoint("mock:success", MockEndpoint.class).     success.expectedMinimumMessageCount(size - 10).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             from(url).routeId("test").routePolicyRef("startPolicy, throttlePolicy").to("log:foo?groupSize=10").to("mock:success").         }     }).     context.start().     assertTrue(context.getRouteController().getRouteStatus("test") == ServiceStatus.Started).     for (int i = 0. i < size. i++) {         template.sendBody(url, "Message " + i).         Thread.sleep(3).     }     context.getComponent("quartz2", QuartzComponent.class).stop().     success.assertIsSatisfied(). }
