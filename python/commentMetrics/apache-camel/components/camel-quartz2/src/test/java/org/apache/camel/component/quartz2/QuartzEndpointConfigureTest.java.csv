commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testConfigureGroupAndName() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2://myGroup/myName?trigger.repeatCount=3&trigger.repeatInterval=1000").     Scheduler scheduler = endpoint.getComponent().getScheduler().     TriggerKey triggerKey = endpoint.getTriggerKey().     Trigger trigger = scheduler.getTrigger(triggerKey).     JobDetail jobDetail = scheduler.getJobDetail(JobKey.jobKey(triggerKey.getName(), triggerKey.getGroup())).     assertEquals("getName()", "myName", triggerKey.getName()).     assertEquals("getGroup()", "myGroup", triggerKey.getGroup()).     assertEquals("getJobName", "myName", jobDetail.getKey().getName()).     assertEquals("getJobGroup", "myGroup", jobDetail.getKey().getGroup()).     SimpleTrigger simpleTrigger = assertIsInstanceOf(SimpleTrigger.class, trigger).     assertEquals("getRepeatCount()", 3, simpleTrigger.getRepeatCount()). }
false;public;0;13;;@Test public void testConfigureName() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2://myName").     Scheduler scheduler = endpoint.getComponent().getScheduler().     TriggerKey triggerKey = endpoint.getTriggerKey().     JobDetail jobDetail = scheduler.getJobDetail(JobKey.jobKey(triggerKey.getName(), triggerKey.getGroup())).     assertEquals("getName()", "myName", triggerKey.getName()).     assertEquals("getGroup()", "Camel_" + context.getManagementName(), triggerKey.getGroup()).     assertEquals("getJobName", "myName", jobDetail.getKey().getName()).     assertEquals("getJobGroup", "Camel_" + context.getManagementName(), jobDetail.getKey().getGroup()). }
false;public;0;18;;@Test public void testConfigureCronExpression() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2://myGroup/myTimerName?cron=0+0/5+12-18+?+*+MON-FRI").     Scheduler scheduler = endpoint.getComponent().getScheduler().     TriggerKey triggerKey = endpoint.getTriggerKey().     Trigger trigger = scheduler.getTrigger(triggerKey).     JobDetail jobDetail = scheduler.getJobDetail(JobKey.jobKey(triggerKey.getName(), triggerKey.getGroup())).     assertEquals("getName()", "myTimerName", triggerKey.getName()).     assertEquals("getGroup()", "myGroup", triggerKey.getGroup()).     assertEquals("getJobName", "myTimerName", jobDetail.getKey().getName()).     assertEquals("getJobGroup", "myGroup", jobDetail.getKey().getGroup()).     assertIsInstanceOf(CronTrigger.class, trigger).     CronTrigger cronTrigger = (CronTrigger) trigger.     assertEquals("cron expression", "0 0/5 12-18 ? * MON-FRI", cronTrigger.getCronExpression()). }
false;public;0;18;;@Test public void testConfigureAnotherCronExpression() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2://myGroup/myTimerName?cron=0+0+*+*+*+?").     Scheduler scheduler = endpoint.getComponent().getScheduler().     TriggerKey triggerKey = endpoint.getTriggerKey().     Trigger trigger = scheduler.getTrigger(triggerKey).     JobDetail jobDetail = scheduler.getJobDetail(JobKey.jobKey(triggerKey.getName(), triggerKey.getGroup())).     assertEquals("getName()", "myTimerName", triggerKey.getName()).     assertEquals("getGroup()", "myGroup", triggerKey.getGroup()).     assertEquals("getJobName", "myTimerName", jobDetail.getKey().getName()).     assertEquals("getJobGroup", "myGroup", jobDetail.getKey().getGroup()).     assertIsInstanceOf(CronTrigger.class, trigger).     CronTrigger cronTrigger = (CronTrigger) trigger.     assertEquals("cron expression", "0 0 * * * ?", cronTrigger.getCronExpression()). }
false;public;0;16;;@Test public void testConfigureJobName() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2://myGroup/myTimerName?job.name=hadrian&cron=0+0+*+*+*+?").     Scheduler scheduler = endpoint.getComponent().getScheduler().     TriggerKey triggerKey = endpoint.getTriggerKey().     Trigger trigger = scheduler.getTrigger(triggerKey).     JobDetail jobDetail = scheduler.getJobDetail(JobKey.jobKey("hadrian", triggerKey.getGroup())).     assertEquals("getName()", "myTimerName", triggerKey.getName()).     assertEquals("getGroup()", "myGroup", triggerKey.getGroup()).     assertEquals("getJobName", "hadrian", jobDetail.getKey().getName()).     assertEquals("getJobGroup", "myGroup", jobDetail.getKey().getGroup()).     assertIsInstanceOf(CronTrigger.class, trigger). }
false;public;0;8;;@Test public void testConfigureNoDoubleSlashNoCron() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2:myGroup/myTimerName").     TriggerKey triggerKey = endpoint.getTriggerKey().     assertEquals("getName()", "myTimerName", triggerKey.getName()).     assertEquals("getGroup()", "myGroup", triggerKey.getGroup()). }
false;public;0;18;;@Test public void testConfigureNoDoubleSlashQuestionCron() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2:myGroup/myTimerName?cron=0+0+*+*+*+?").     Scheduler scheduler = endpoint.getComponent().getScheduler().     TriggerKey triggerKey = endpoint.getTriggerKey().     Trigger trigger = scheduler.getTrigger(triggerKey).     JobDetail jobDetail = scheduler.getJobDetail(JobKey.jobKey(triggerKey.getName(), triggerKey.getGroup())).     assertEquals("getName()", "myTimerName", triggerKey.getName()).     assertEquals("getGroup()", "myGroup", triggerKey.getGroup()).     assertEquals("getJobName", "myTimerName", jobDetail.getKey().getName()).     assertEquals("getJobGroup", "myGroup", jobDetail.getKey().getGroup()).     assertIsInstanceOf(CronTrigger.class, trigger).     CronTrigger cronTrigger = (CronTrigger) trigger.     assertEquals("cron expression", "0 0 * * * ?", cronTrigger.getCronExpression()). }
false;public;0;10;;@Test public void testConfigureDeleteJob() throws Exception {     QuartzEndpoint endpoint = resolveMandatoryEndpoint("quartz2:myGroup/myTimerName?cron=0+0+*+*+*+?").     assertEquals("cron expression", "0 0 * * * ?", endpoint.getCron()).     assertEquals("deleteJob", true, endpoint.isDeleteJob()).     endpoint = resolveMandatoryEndpoint("quartz2:myGroup/myTimerName2?cron=1+0+*+*+*+?&deleteJob=false").     assertEquals("cron expression", "1 0 * * * ?", endpoint.getCron()).     assertEquals("deleteJob", false, endpoint.isDeleteJob()). }
false;protected;1;5;;@Override protected QuartzEndpoint resolveMandatoryEndpoint(String uri) {     Endpoint endpoint = super.resolveMandatoryEndpoint(uri).     return assertIsInstanceOf(QuartzEndpoint.class, endpoint). }
