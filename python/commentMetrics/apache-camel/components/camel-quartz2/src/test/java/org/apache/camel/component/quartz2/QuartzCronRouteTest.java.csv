commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testQuartzCronRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(3).     assertMockEndpointsSatisfied().     Trigger trigger = mock.getReceivedExchanges().get(0).getIn().getHeader("trigger", Trigger.class).     Assert.assertThat(trigger instanceof CronTrigger, CoreMatchers.is(true)).     JobDetail detail = mock.getReceivedExchanges().get(0).getIn().getHeader("jobDetail", JobDetail.class).     Assert.assertThat(detail.getJobClass().equals(CamelJob.class), CoreMatchers.is(true)).     Assert.assertThat(detail.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_TYPE).equals("cron"), CoreMatchers.is(true)).     Assert.assertThat(detail.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION).equals("0/2 * * * * ?"), CoreMatchers.is(true)). }
false;public;0;5;;public void configure() {     // triggers every 2th second at precise 00,02,04,06..58     // notice we must use + as space when configured using URI parameter     from("quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // triggers every 2th second at precise 00,02,04,06..58             // notice we must use + as space when configured using URI parameter             from("quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?").to("mock:result").         }     }. }
