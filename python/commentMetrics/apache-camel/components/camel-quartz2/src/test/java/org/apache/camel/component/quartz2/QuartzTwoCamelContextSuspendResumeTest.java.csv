commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("quartz2://myGroup/myTimerName?cron=0/1+*+*+*+*+?").to("mock:one"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("quartz2://myOtherGroup/myOtherTimerName?cron=0/1+*+*+*+*+?").to("mock:two"). }
false;public;0;22;;@Before public void setUp() throws Exception {     camel1 = new DefaultCamelContext().     camel1.setName("camel-1").     camel1.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("quartz2://myGroup/myTimerName?cron=0/1+*+*+*+*+?").to("mock:one").         }     }).     camel1.start().     camel2 = new DefaultCamelContext().     camel2.setName("camel-2").     camel2.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("quartz2://myOtherGroup/myOtherTimerName?cron=0/1+*+*+*+*+?").to("mock:two").         }     }).     camel2.start(). }
false;public;0;5;;@After public void tearDown() throws Exception {     camel1.stop().     camel2.stop(). }
false;public;0;20;;@Test public void testTwoCamelContextRestart() throws Exception {     MockEndpoint mock1 = camel1.getEndpoint("mock:one", MockEndpoint.class).     mock1.expectedMinimumMessageCount(2).     MockEndpoint mock2 = camel2.getEndpoint("mock:two", MockEndpoint.class).     mock2.expectedMinimumMessageCount(6).     mock1.assertIsSatisfied().     camel1.suspend().     mock2.assertIsSatisfied().     // should resume triggers when we start camel 1 again     mock1.reset().     mock1.expectedMinimumMessageCount(2).     camel1.resume().     mock1.assertIsSatisfied(). }
