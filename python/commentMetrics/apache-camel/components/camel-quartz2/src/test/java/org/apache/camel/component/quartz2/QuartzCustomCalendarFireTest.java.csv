commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testQuartzCustomCronRouteNoFire() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(0).     QuartzComponent component = context.getComponent("quartz2", QuartzComponent.class).     Scheduler scheduler = component.getScheduler().     Calendar c = scheduler.getCalendar(QuartzConstants.QUARTZ_CAMEL_CUSTOM_CALENDAR).     Date now = new Date().     java.util.Calendar tomorrow = java.util.Calendar.getInstance().     tomorrow.setTime(now).     tomorrow.add(java.util.Calendar.DAY_OF_MONTH, 1).     assertEquals(false, c.isTimeIncluded(tomorrow.getTimeInMillis())).     assertEquals(true, c.isTimeIncluded(now.getTime())).     assertMockEndpointsSatisfied(). }
false;protected;0;13;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     HolidayCalendar cal = new HolidayCalendar().     java.util.Calendar tomorrow = java.util.Calendar.getInstance().     tomorrow.setTime(new Date()).     tomorrow.add(java.util.Calendar.DAY_OF_MONTH, 1).     cal.addExcludedDate(tomorrow.getTime()).     jndi.bind("calendar", cal).     return jndi. }
false;public;0;3;;public void configure() {     from("quartz2://MyTimer?customCalendar=#calendar&cron=05+00+00+*+*+?").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("quartz2://MyTimer?customCalendar=#calendar&cron=05+00+00+*+*+?").to("mock:result").         }     }. }
