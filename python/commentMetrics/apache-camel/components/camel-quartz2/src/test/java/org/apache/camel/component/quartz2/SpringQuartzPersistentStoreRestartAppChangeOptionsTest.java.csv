commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@BeforeClass public static void prepareDB() {     // boot up the database the two invocations are going to share inside a clustered quartz setup     db = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml").     db.start(). }
false;public,static;0;4;;@AfterClass public static void shutdownDB() {     db.close(). }
false;public;0;7;;@After public void closeApps() {     // we're done so let's properly close the application contexts, but close     // the second app before the first one so that the quartz scheduler running     // inside it can be properly shutdown     IOHelper.close(app3, app2, app). }
false;public;0;39;;@Test public void testRestartAppChangeCronExpression() throws Exception {     // Test creates application context twice with different cron expressions in configuration xml.     // Both times it retrieves back the cron expression, accessing it via trigger (so, using value stored in DB).     // After that it asserts that two cron expressions are not equal.     // load spring app     app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml").     app.start().     CamelContext camel = app.getBean("camelContext", CamelContext.class).     assertNotNull(camel).     String cronExpression = ((CronTrigger) getTrigger(camel, "quartzRoute")).getCronExpression().     app.stop().     log.info("Restarting ...").     log.info("Restarting ...").     log.info("Restarting ...").     // load spring app     app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest2.xml").     app2.start().     CamelContext camel2 = app2.getBean("camelContext", CamelContext.class).     assertNotNull(camel2).     String cronExpression2 = ((CronTrigger) getTrigger(camel2, "quartzRoute")).getCronExpression().     app2.stop().     assertNotEquals(cronExpression, cronExpression2).     // load spring app     app3 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest3.xml").     app3.start().     CamelContext camel3 = app3.getBean("camelContext3", CamelContext.class).     assertNotNull(camel3).     String cronExpression3 = ((CronTrigger) getTrigger(camel3, "quartzRoute")).getCronExpression().     app3.stop().     assertEquals(cronExpression2, cronExpression3). }
false;public;0;36;;@Test public void testRestartAppChangeTriggerOptions() throws Exception {     // Test creates application context twice with different simple trigger options in configuration xml.     // Both times it retrieves back the option, accessing it via trigger (so, using value stored in DB).     // After that it asserts that two options are not equal.     // load spring app     AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest1.xml").     app.start().     CamelContext camel = app.getBean("camelContext", CamelContext.class).     assertNotNull(camel).     SimpleTrigger trigger = (SimpleTrigger) getTrigger(camel, "quartzRoute").     long repeatInterval = trigger.getRepeatInterval().     app.stop().     log.info("Restarting ...").     log.info("Restarting ...").     log.info("Restarting ...").     // load spring app     AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest2.xml").     app2.start().     CamelContext camel2 = app2.getBean("camelContext", CamelContext.class).     assertNotNull(camel2).     SimpleTrigger trigger2 = (SimpleTrigger) getTrigger(camel2, "quartzRoute").     long repeatInterval2 = trigger2.getRepeatInterval().     app2.stop().     // we're done so let's properly close the application contexts, but close     // the second app before the first one so that the quartz scheduler running     // inside it can be properly shutdown     IOHelper.close(app2, app).     assertNotEquals(repeatInterval, repeatInterval2). }
false;public;0;32;;@Test public void testRestartAppChangeTriggerType() throws Exception {     // Test creates application context twice with different simple trigger options in configuration xml.     // Both times it retrieves back the option, accessing it via trigger (so, using value stored in DB).     // After that it asserts that two options are not equal.     // load spring app     app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeCronExpressionTest1.xml").     app.start().     CamelContext camel = app.getBean("camelContext", CamelContext.class).     assertNotNull(camel).     assertTrue(getTrigger(camel, "quartzRoute") instanceof CronTrigger).     app.stop().     log.info("Restarting ...").     log.info("Restarting ...").     log.info("Restarting ...").     // load spring app     AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppChangeOptionsTest2.xml").     app2.start().     CamelContext camel2 = app2.getBean("camelContext", CamelContext.class).     assertNotNull(camel2).     assertTrue(getTrigger(camel2, "quartzRoute") instanceof SimpleTrigger).     app2.stop().     // we're done so let's properly close the application contexts, but close     // the second app before the first one so that the quartz scheduler running     // inside it can be properly shutdown     IOHelper.close(app2, app). }
false;private;2;6;;private Trigger getTrigger(CamelContext camel, String routeId) throws SchedulerException {     QuartzEndpoint endpoint = (QuartzEndpoint) (camel.getRoute(routeId).getEndpoint()).     QuartzComponent component = endpoint.getComponent().     Scheduler scheduler = component.getScheduler().     return scheduler.getTrigger(endpoint.getTriggerKey()). }
