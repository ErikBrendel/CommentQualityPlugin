commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testQuartzSuspend() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     context.getRouteController().suspendRoute("foo").     int size = mock.getReceivedCounter().     resetMocks().     mock.expectedMessageCount(0).     mock.assertIsSatisfied(3000).     assertEquals("Should not schedule when suspended", size, size).     resetMocks().     mock.expectedMinimumMessageCount(1).     context.getRouteController().resumeRoute("foo").     assertMockEndpointsSatisfied(). }
false;public;0;9;;public void configure() {     // START SNIPPET: e1     // triggers every second at precise 00,01,02,03..59     // notice we must use + as space when configured using URI parameter     from("quartz2://myGroup/myTimerName?cron=0/1+*+*+*+*+?").routeId("foo").to("log:result", "mock:result"). // END SNIPPET: e1 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             // triggers every second at precise 00,01,02,03..59             // notice we must use + as space when configured using URI parameter             from("quartz2://myGroup/myTimerName?cron=0/1+*+*+*+*+?").routeId("foo").to("log:result", "mock:result").         // END SNIPPET: e1         }     }. }
