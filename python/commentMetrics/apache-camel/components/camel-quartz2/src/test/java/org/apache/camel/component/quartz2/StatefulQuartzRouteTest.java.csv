commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testQuartz() throws Exception {     resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(2).     resultEndpoint.message(0).header("triggerName").isEqualTo("myTimerName").     resultEndpoint.message(0).header("triggerGroup").isEqualTo("myGroup").     // lets test the receive worked     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         Message in = exchange.getIn().         log.debug("Received: " + in + " with headers: " + in.getHeaders()).     } }
false;public;0;6;;@Override public void configure() {     // START SNIPPET: example     from("quartz2://myGroup/myTimerName?trigger.repeatInterval=2&trigger.repeatCount=1&stateful=true").to("mock:result"). // END SNIPPET: example }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             // START SNIPPET: example             from("quartz2://myGroup/myTimerName?trigger.repeatInterval=2&trigger.repeatCount=1&stateful=true").to("mock:result").         // END SNIPPET: example         }     }. }
