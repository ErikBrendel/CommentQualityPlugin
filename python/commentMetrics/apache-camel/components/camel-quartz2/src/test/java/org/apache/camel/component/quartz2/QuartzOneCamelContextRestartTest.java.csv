commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("quartz2://myGroup/myTimerName?cron=0/1+*+*+*+*+?").to("log:one", "mock:one"). }
false;public;0;12;;@Before public void setUp() throws Exception {     camel1 = new DefaultCamelContext().     camel1.setName("camel-1").     camel1.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("quartz2://myGroup/myTimerName?cron=0/1+*+*+*+*+?").to("log:one", "mock:one").         }     }).     camel1.start(). }
false;public;0;4;;@After public void tearDown() throws Exception {     camel1.stop(). }
false;public;0;16;;@Test public void testOneCamelContextSuspendResume() throws Exception {     MockEndpoint mock1 = camel1.getEndpoint("mock:one", MockEndpoint.class).     mock1.expectedMinimumMessageCount(2).     mock1.assertIsSatisfied().     camel1.stop().     // fetch mock endpoint again because we have stopped camel context     mock1 = camel1.getEndpoint("mock:one", MockEndpoint.class).     // should resume triggers when we start camel 1 again     mock1.expectedMinimumMessageCount(3).     camel1.start().     mock1.assertIsSatisfied(). }
