commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testQuartzCronRouteWithSmallCache() throws Exception {     boolean wait = latch.await(10, TimeUnit.SECONDS).     assertTrue(wait).     assertTrue("Quartz should trigger at least 3 times", latch.getCount() <= 0). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getGlobalOptions().put(Exchange.MAXIMUM_ENDPOINT_CACHE_SIZE, "1").     return context. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     latch.countDown().     template.sendBody("direct:foo", "Quartz triggered"). }
false;public;0;11;;public void configure() {     from("direct:foo").to("log:foo").     from("quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             latch.countDown().             template.sendBody("direct:foo", "Quartz triggered").         }     }). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:foo").to("log:foo").             from("quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     latch.countDown().                     template.sendBody("direct:foo", "Quartz triggered").                 }             }).         }     }. }
