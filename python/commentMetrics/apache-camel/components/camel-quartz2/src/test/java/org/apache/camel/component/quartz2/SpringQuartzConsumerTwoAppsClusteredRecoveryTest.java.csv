commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;@Test public void testQuartzPersistentStoreClusteredApp() throws Exception {     // boot up the database the two apps are going to share inside a clustered quartz setup     AbstractXmlApplicationContext db = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerClusteredAppDatabase.xml").     // now launch the first clustered app which will acquire the quartz database lock and become the master     AbstractXmlApplicationContext app = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppOne.xml").     // now let's simulate a crash of the first app (the quartz instance 'app-one')     log.warn("The first app is going to crash NOW!").     IOHelper.close(app).     log.warn("Crashed...").     log.warn("Crashed...").     log.warn("Crashed...").     Thread.sleep(2000).     // as well as the second one which will run in slave mode as it will not be able to acquire the same lock     AbstractXmlApplicationContext app2 = new ClassPathXmlApplicationContext("org/apache/camel/component/quartz2/SpringQuartzConsumerRecoveryClusteredAppTwo.xml").     app2.start().     // wait long enough until the second app takes it over...     Thread.sleep(20000).     // inside the logs one can then clearly see how the route of the second app ('app-two') starts consuming:     // 2013-09-30 11:22:20,349 [main           ] WARN  erTwoAppsClusteredFailoverTest - Crashed...     // 2013-09-30 11:22:20,349 [main           ] WARN  erTwoAppsClusteredFailoverTest - Crashed...     // 2013-09-30 11:22:20,349 [main           ] WARN  erTwoAppsClusteredFailoverTest - Crashed...     // 2013-09-30 11:22:35,340 [_ClusterManager] INFO  LocalDataSourceJobStore        - ClusterManager: detected 1 failed or restarted instances.     // 2013-09-30 11:22:35,340 [_ClusterManager] INFO  LocalDataSourceJobStore        - ClusterManager: Scanning for instance "app-one"'s failed in-progress jobs.     // 2013-09-30 11:22:35,369 [eduler_Worker-1] INFO  triggered                      - Exchange[ExchangePattern: InOnly, BodyType: String, Body: clustering PONGS!]     CamelContext camel2 = app2.getBean("camelContext2", CamelContext.class).     MockEndpoint mock2 = camel2.getEndpoint("mock:result", MockEndpoint.class).     mock2.expectedMinimumMessageCount(2).     mock2.expectedMessagesMatches(new ClusteringPredicate(false)).     mock2.assertIsSatisfied().     // and as the last step shutdown the second app as well as the database     IOHelper.close(app2, db). }
false;public;1;4;;@Override public boolean matches(Exchange exchange) {     return exchange.getIn().getBody().equals(expectedPayload). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     // shutdown the application context.     ((AbstractXmlApplicationContext) applicationContext).close(). }
false;public;1;4;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
