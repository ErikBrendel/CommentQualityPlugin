commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;14;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteStartTime("*/3 * * * * ?").     from("direct:start1").routeId("test1").routePolicy(policy).to("mock:success1").     from("direct:start2").routeId("test2").routePolicy(policy).to("mock:success2"). }
false;public;0;39;;@Test public void testScheduledStartRoutePolicyWithTwoRoutes() throws Exception {     MockEndpoint success1 = context.getEndpoint("mock:success1", MockEndpoint.class).     MockEndpoint success2 = context.getEndpoint("mock:success2", MockEndpoint.class).     success1.expectedMessageCount(1).     success2.expectedMessageCount(1).     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteStartTime("*/3 * * * * ?").             from("direct:start1").routeId("test1").routePolicy(policy).to("mock:success1").             from("direct:start2").routeId("test2").routePolicy(policy).to("mock:success2").         }     }).     context.start().     context.getRouteController().stopRoute("test1", 1000, TimeUnit.MILLISECONDS).     context.getRouteController().stopRoute("test2", 1000, TimeUnit.MILLISECONDS).     Thread.sleep(5000).     assertTrue(context.getRouteController().getRouteStatus("test1") == ServiceStatus.Started).     assertTrue(context.getRouteController().getRouteStatus("test2") == ServiceStatus.Started).     template.sendBody("direct:start1", "Ready or not, Here, I come").     template.sendBody("direct:start2", "Ready or not, Here, I come").     success1.assertIsSatisfied().     success2.assertIsSatisfied(). }
false;public;0;16;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteStopTime("*/3 * * * * ?").     policy.setRouteStopGracePeriod(0).     policy.setTimeUnit(TimeUnit.MILLISECONDS).     from("direct:start1").routeId("test1").routePolicy(policy).to("mock:unreachable").     from("direct:start2").routeId("test2").routePolicy(policy).to("mock:unreachable"). }
false;public;0;29;;@Test public void testScheduledStopRoutePolicyWithTwoRoutes() throws Exception {     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteStopTime("*/3 * * * * ?").             policy.setRouteStopGracePeriod(0).             policy.setTimeUnit(TimeUnit.MILLISECONDS).             from("direct:start1").routeId("test1").routePolicy(policy).to("mock:unreachable").             from("direct:start2").routeId("test2").routePolicy(policy).to("mock:unreachable").         }     }).     context.start().     Thread.sleep(5000).     assertTrue(context.getRouteController().getRouteStatus("test1") == ServiceStatus.Stopped).     assertTrue(context.getRouteController().getRouteStatus("test2") == ServiceStatus.Stopped). }
false;public;0;9;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteStartTime("*/3 * * * * ?").     from("direct:start").routeId("test").routePolicy(policy).to("mock:success"). }
false;public;0;29;;@Test public void testScheduledStartRoutePolicy() throws Exception {     MockEndpoint success = context.getEndpoint("mock:success", MockEndpoint.class).     success.expectedMessageCount(1).     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteStartTime("*/3 * * * * ?").             from("direct:start").routeId("test").routePolicy(policy).to("mock:success").         }     }).     context.start().     context.getRouteController().stopRoute("test", 1000, TimeUnit.MILLISECONDS).     Thread.sleep(5000).     assertTrue(context.getRouteController().getRouteStatus("test") == ServiceStatus.Started).     template.sendBody("direct:start", "Ready or not, Here, I come").     context.getComponent("quartz2", QuartzComponent.class).stop().     success.assertIsSatisfied(). }
false;public;0;11;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteStopTime("*/3 * * * * ?").     policy.setRouteStopGracePeriod(0).     policy.setTimeUnit(TimeUnit.MILLISECONDS).     from("direct:start").routeId("test").routePolicy(policy).to("mock:unreachable"). }
false;public;0;22;;@Test public void testScheduledStopRoutePolicy() throws Exception {     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteStopTime("*/3 * * * * ?").             policy.setRouteStopGracePeriod(0).             policy.setTimeUnit(TimeUnit.MILLISECONDS).             from("direct:start").routeId("test").routePolicy(policy).to("mock:unreachable").         }     }).     context.start().     Thread.sleep(5000).     assertTrue(context.getRouteController().getRouteStatus("test") == ServiceStatus.Stopped). }
false;public;1;6;;@Override public void onStart(final Route route) {     super.onStart(route).     startedLatch.countDown(). }
false;public;1;6;;@Override public void onStop(final Route route) {     super.onStop(route).     stoppedLatch.countDown(). }
false;public;0;27;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy() {          @Override         public void onStart(final Route route) {             super.onStart(route).             startedLatch.countDown().         }          @Override         public void onStop(final Route route) {             super.onStop(route).             stoppedLatch.countDown().         }     }.     policy.setRouteStartTime("*/3 * * * * ?").     policy.setRouteStopTime("*/6 * * * * ?").     policy.setRouteStopGracePeriod(0).     from("direct:start").routeId("test").routePolicy(policy).noAutoStartup().to("mock:success"). }
false;public;0;54;;@Test public void testScheduledStartAndStopRoutePolicy() throws Exception {     MockEndpoint success = context.getEndpoint("mock:success", MockEndpoint.class).     success.expectedMessageCount(1).     final CountDownLatch startedLatch = new CountDownLatch(1).     final CountDownLatch stoppedLatch = new CountDownLatch(1).     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy() {                  @Override                 public void onStart(final Route route) {                     super.onStart(route).                     startedLatch.countDown().                 }                  @Override                 public void onStop(final Route route) {                     super.onStop(route).                     stoppedLatch.countDown().                 }             }.             policy.setRouteStartTime("*/3 * * * * ?").             policy.setRouteStopTime("*/6 * * * * ?").             policy.setRouteStopGracePeriod(0).             from("direct:start").routeId("test").routePolicy(policy).noAutoStartup().to("mock:success").         }     }).     context.start().     startedLatch.await(5000, TimeUnit.SECONDS).     ServiceStatus startedStatus = context.getRouteController().getRouteStatus("test").     assertTrue(startedStatus == ServiceStatus.Started || startedStatus == ServiceStatus.Starting).     template.sendBody("direct:start", "Ready or not, Here, I come").     stoppedLatch.await(5000, TimeUnit.SECONDS).     ServiceStatus stoppedStatus = context.getRouteController().getRouteStatus("test").     assertTrue(stoppedStatus == ServiceStatus.Stopped || stoppedStatus == ServiceStatus.Stopping).     success.assertIsSatisfied(). }
false;public;0;11;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteStopTime("*/3 * * * * ?").     policy.setRouteStopGracePeriod(0).     policy.setTimeUnit(TimeUnit.MILLISECONDS).     from("direct:start").routeId("test").routePolicy(policy, myPolicy).to("mock:unreachable"). }
false;public;0;27;;@Test public void testScheduledStopRoutePolicyWithExtraPolicy() throws Exception {     final MyRoutePolicy myPolicy = new MyRoutePolicy().     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteStopTime("*/3 * * * * ?").             policy.setRouteStopGracePeriod(0).             policy.setTimeUnit(TimeUnit.MILLISECONDS).             from("direct:start").routeId("test").routePolicy(policy, myPolicy).to("mock:unreachable").         }     }).     context.start().     Thread.sleep(5000).     assertTrue(context.getRouteController().getRouteStatus("test") == ServiceStatus.Stopped).     assertTrue("Should have called onStart", myPolicy.isStart()).     assertTrue("Should have called onStop", myPolicy.isStop()). }
false;public;0;9;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteSuspendTime("*/3 * * * * ?").     from("direct:start").routeId("test").routePolicy(policy).to("mock:unreachable"). }
false;public;0;25;;@Test public void testScheduledSuspendRoutePolicy() throws Exception {     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteSuspendTime("*/3 * * * * ?").             from("direct:start").routeId("test").routePolicy(policy).to("mock:unreachable").         }     }).     context.start().     Thread.sleep(5000).     // when suspending its only the consumer that suspends     // there is a ticket to improve this     Consumer consumer = context.getRoute("test").getConsumer().     SuspendableService ss = (SuspendableService) consumer.     assertTrue("Consumer should be suspended", ss.isSuspended()). }
false;public;0;9;;public void configure() {     CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().     policy.setRouteResumeTime("*/3 * * * * ?").     from("direct:start").routeId("test").routePolicy(policy).to("mock:success"). }
false;public;0;29;;@Test public void testScheduledResumeRoutePolicy() throws Exception {     MockEndpoint success = context.getEndpoint("mock:success", MockEndpoint.class).     success.expectedMessageCount(1).     context.getComponent("direct", DirectComponent.class).setBlock(false).     context.getComponent("quartz2", QuartzComponent.class).setPropertiesFile("org/apache/camel/routepolicy/quartz2/myquartz.properties").     context.addRoutes(new RouteBuilder() {          public void configure() {             CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy().             policy.setRouteResumeTime("*/3 * * * * ?").             from("direct:start").routeId("test").routePolicy(policy).to("mock:success").         }     }).     context.start().     ServiceHelper.suspendService(context.getRoute("test").getConsumer()).     Thread.sleep(5000).     assertTrue(context.getRouteController().getRouteStatus("test") == ServiceStatus.Started).     template.sendBody("direct:start", "Ready or not, Here, I come").     success.assertIsSatisfied(). }
