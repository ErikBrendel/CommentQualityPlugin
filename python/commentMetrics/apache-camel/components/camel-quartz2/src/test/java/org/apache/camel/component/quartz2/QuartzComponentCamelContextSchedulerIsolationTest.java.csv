commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@AfterClass public static void afterTests() {     System.clearProperty(JmxSystemPropertyKeys.DISABLED). }
false;public;0;5;;@Test public void testSchedulerIsolationUnmanaged() throws Exception {     disableJMX().     testSchedulerIsolation(). }
false;public;0;5;;@Test public void testSchedulerIsolationManaged() throws Exception {     enableJMX().     testSchedulerIsolation(). }
false;private;0;10;;private void testSchedulerIsolation() throws Exception {     CamelContext context = createCamelContext().     context.start().     CamelContext anotherContext = createCamelContext().     assertNotEquals(anotherContext.getName(), context.getName()).     assertNotEquals(anotherContext, context).     assertNotSame(getDefaultScheduler(context), getDefaultScheduler(anotherContext)). }
true;private;0;3;/**  * Create a new camel context instance.  */ ;/**  * Create a new camel context instance.  */ private DefaultCamelContext createCamelContext() {     return new DefaultCamelContext(). }
true;private;1;3;/**  * Get the quartz component for the provided camel context.  */ ;/**  * Get the quartz component for the provided camel context.  */ private QuartzComponent getQuartzComponent(CamelContext context) {     return context.getComponent("quartz2", QuartzComponent.class). }
true;private;1;3;/**  * Get the default scheduler for the provided camel context.  */ ;/**  * Get the default scheduler for the provided camel context.  */ private Scheduler getDefaultScheduler(CamelContext context) throws SchedulerException {     return getQuartzComponent(context).getScheduler(). }
true;private;0;3;/**  * Disables the JMX agent.  */ ;/**  * Disables the JMX agent.  */ private void disableJMX() {     System.setProperty(JmxSystemPropertyKeys.DISABLED, "true"). }
true;private;0;3;/**  * Enables the JMX agent.  */ ;/**  * Enables the JMX agent.  */ private void enableJMX() {     System.setProperty(JmxSystemPropertyKeys.DISABLED, "false"). }
