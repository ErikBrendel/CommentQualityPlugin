commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     quartz.stop().     super.tearDown(). }
false;public;0;11;;@Test public void testQuartzPropertiesFile() throws Exception {     quartz = context.getComponent("quartz2", QuartzComponent.class).     quartz.setPropertiesFile("org/apache/camel/component/quartz2/myquartz.properties").     quartz.start().     assertEquals("MyScheduler-" + context.getName(), quartz.getScheduler().getSchedulerName()).     assertEquals("2", quartz.getScheduler().getSchedulerInstanceId()). }
false;public;0;13;;@Test public void testQuartzPropertiesFileNotFound() throws Exception {     quartz = context.getComponent("quartz2", QuartzComponent.class).     quartz.setPropertiesFile("doesnotexist.properties").     try {         quartz.start().         fail("Should have thrown exception").     } catch (SchedulerException e) {         assertEquals("Error loading Quartz properties file: doesnotexist.properties", e.getMessage()).     } }
false;public;0;14;;@Test public void testQuartzProperties() throws Exception {     quartz = context.getComponent("quartz2", QuartzComponent.class).     Properties prop = new Properties().     InputStream is = context.getClassResolver().loadResourceAsStream("org/apache/camel/component/quartz2/myquartz.properties").     prop.load(is).     quartz.setProperties(prop).     quartz.start().     assertEquals("MyScheduler-" + context.getName(), quartz.getScheduler().getSchedulerName()).     assertEquals("2", quartz.getScheduler().getSchedulerInstanceId()). }
