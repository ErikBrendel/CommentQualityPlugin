commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;public void notify(CamelEvent eventObject) throws Exception {     // create message payload to send     String message = eventObject.toString().     Level level = determineLevel(eventObject).     MessagePayload payload = new MessagePayload(getHostName(), level, getServiceName(), message).     if (log.isInfoEnabled()) {         log.info("Sending notification to Nagios: {}", payload.getMessage()).     }     sender.send(payload).     log.trace("Sending notification done"). }
false;public;1;3;;public boolean isEnabled(CamelEvent eventObject) {     return true. }
false;protected;1;20;;protected Level determineLevel(CamelEvent eventObject) {     // failures is considered critical     if (eventObject instanceof ExchangeFailedEvent || eventObject instanceof CamelContextStartupFailureEvent || eventObject instanceof CamelContextStopFailureEvent || eventObject instanceof ServiceStartupFailureEvent || eventObject instanceof ServiceStopFailureEvent) {         return Level.CRITICAL.     }     // and warn when a redelivery attempt is done     if (eventObject instanceof ExchangeFailureHandledEvent || eventObject instanceof ExchangeRedeliveryEvent) {         return Level.WARNING.     }     // default to OK     return Level.OK. }
false;public;0;6;;public NagiosConfiguration getConfiguration() {     if (configuration == null) {         configuration = new NagiosConfiguration().     }     return configuration. }
false;public;1;3;;public void setConfiguration(NagiosConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public NagiosSettings getNagiosSettings() {     return nagiosSettings. }
false;public;1;3;;public void setNagiosSettings(NagiosSettings nagiosSettings) {     this.nagiosSettings = nagiosSettings. }
false;public;0;3;;public String getServiceName() {     return serviceName. }
false;public;1;3;;public void setServiceName(String serviceName) {     this.serviceName = serviceName. }
false;public;0;3;;public String getHostName() {     return hostName. }
false;public;1;3;;public void setHostName(String hostName) {     this.hostName = hostName. }
false;protected;0;11;;@Override protected void doStart() throws Exception {     if (nagiosSettings == null) {         nagiosSettings = configuration.getNagiosSettings().     }     if (sender == null) {         sender = new NagiosPassiveCheckSender(nagiosSettings).     }     log.info("Using {}", configuration). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     sender = null. }
