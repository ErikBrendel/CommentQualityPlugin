commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;public void process(Exchange exchange) throws Exception {     String message = exchange.getIn().getBody(String.class).     Level level = exchange.getIn().getHeader(LEVEL, Level.class).     if (level == null) {         String name = exchange.getIn().getHeader(LEVEL, Level.OK.name(), String.class).         level = Level.valueOf(name).     }     String serviceName = exchange.getIn().getHeader(SERVICE_NAME, exchange.getContext().getName(), String.class).     String hostName = exchange.getIn().getHeader(HOST_NAME, "localhost", String.class).     MessagePayload payload = new MessagePayload(hostName, level, serviceName, message).     if (log.isDebugEnabled()) {         log.debug("Sending notification to Nagios: {}", payload.getMessage()).     }     sender.send(payload).     log.trace("Sending notification done"). }
false;protected;0;11;;@Override protected void doStart() throws Exception {     // if non blocking then set a executor service on it     if (sender instanceof NonBlockingNagiosPassiveCheckSender) {         NonBlockingNagiosPassiveCheckSender nonBlocking = (NonBlockingNagiosPassiveCheckSender) sender.         ExecutorService executor = getEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, getEndpoint().getEndpointUri()).         nonBlocking.setExecutor(executor).     }     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     super.doStop().     // if non blocking then shutdown executor     if (sender instanceof NonBlockingNagiosPassiveCheckSender) {         ((NonBlockingNagiosPassiveCheckSender) sender).shutdown().     } }
