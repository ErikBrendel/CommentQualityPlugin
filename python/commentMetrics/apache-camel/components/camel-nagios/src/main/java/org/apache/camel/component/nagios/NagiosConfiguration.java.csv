commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Returns a copy of this configuration  */ ;/**  * Returns a copy of this configuration  */ public NagiosConfiguration copy() {     try {         NagiosConfiguration copy = (NagiosConfiguration) clone().         return copy.     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;1;10;;public void configure(URI uri) {     String value = uri.getHost().     if (value != null) {         setHost(value).     }     int port = uri.getPort().     if (port > 0) {         setPort(port).     } }
false;public,synchronized;0;21;;public synchronized NagiosSettings getNagiosSettings() {     if (nagiosSettings == null) {         // validate parameters         StringHelper.notEmpty(host, "host", this).         if (port <= 0) {             throw new IllegalArgumentException("Port must be a positive number on " + this).         }         // create settings         nagiosSettings = new NagiosSettings().         nagiosSettings.setConnectTimeout(getConnectionTimeout()).         nagiosSettings.setTimeout(getTimeout()).         nagiosSettings.setNagiosHost(getHost()).         nagiosSettings.setPort(getPort()).         nagiosSettings.setPassword(getPassword()).         nagiosSettings.setEncryption(encryption).     }     return nagiosSettings. }
false;public;1;3;;public void setNagiosSettings(NagiosSettings nagiosSettings) {     this.nagiosSettings = nagiosSettings. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * This is the address of the Nagios host where checks should be send.  */ ;/**  * This is the address of the Nagios host where checks should be send.  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public int getPort() {     return port. }
true;public;1;3;/**  * The port number of the host.  */ ;/**  * The port number of the host.  */ public void setPort(int port) {     this.port = port. }
false;public;0;3;;public int getConnectionTimeout() {     return connectionTimeout. }
true;public;1;3;/**  * Connection timeout in millis.  */ ;/**  * Connection timeout in millis.  */ public void setConnectionTimeout(int connectionTimeout) {     this.connectionTimeout = connectionTimeout. }
false;public;0;3;;public int getTimeout() {     return timeout. }
true;public;1;3;/**  * Sending timeout in millis.  */ ;/**  * Sending timeout in millis.  */ public void setTimeout(int timeout) {     this.timeout = timeout. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Password to be authenticated when sending checks to Nagios.  */ ;/**  * Password to be authenticated when sending checks to Nagios.  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public NagiosEncryptionMethod getEncryptionMethod() {     return encryptionMethod. }
true;public;1;4;/**  * To specify an encryption method.  * @deprecated use the {@link #encryption} query parameter instead.  */ ;/**  * To specify an encryption method.  * @deprecated use the {@link #encryption} query parameter instead.  */ @Deprecated public void setEncryptionMethod(NagiosEncryptionMethod encryptionMethod) {     this.encryptionMethod = encryptionMethod. }
false;public;0;3;;public Encryption getEncryption() {     return encryption. }
true;public;1;3;/**  * To specify an encryption method.  */ ;/**  * To specify an encryption method.  */ public void setEncryption(Encryption encryption) {     this.encryption = encryption. }
false;public;0;5;;@Override public String toString() {     return "NagiosConfiguration[host=" + host + ":" + port + ", connectionTimeout=" + connectionTimeout + ", timeout=" + timeout + ", encryptionMethod=" + encryptionMethod + ", encryption=" + encryption + "]". }
