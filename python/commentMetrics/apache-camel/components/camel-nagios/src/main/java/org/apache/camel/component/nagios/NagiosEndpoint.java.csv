commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public Producer createProducer() throws Exception {     ObjectHelper.notNull(configuration, "configuration").     return new NagiosProducer(this, getSender()). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Nagios consumer not supported"). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public NagiosConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(NagiosConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public boolean isSendSync() {     return sendSync. }
true;public;1;3;/**  * Whether or not to use synchronous when sending a passive check.  * Setting it to false will allow Camel to continue routing the message and the passive check message will be send asynchronously.  */ ;/**  * Whether or not to use synchronous when sending a passive check.  * Setting it to false will allow Camel to continue routing the message and the passive check message will be send asynchronously.  */ public void setSendSync(boolean sendSync) {     this.sendSync = sendSync. }
false;public,synchronized;0;11;;public synchronized PassiveCheckSender getSender() {     if (sender == null) {         if (isSendSync()) {             sender = new NagiosPassiveCheckSender(getConfiguration().getNagiosSettings()).         } else {             // use a non blocking sender             sender = new NonBlockingNagiosPassiveCheckSender(getConfiguration().getNagiosSettings()).         }     }     return sender. }
false;public;1;3;;public void setSender(PassiveCheckSender sender) {     this.sender = sender. }
