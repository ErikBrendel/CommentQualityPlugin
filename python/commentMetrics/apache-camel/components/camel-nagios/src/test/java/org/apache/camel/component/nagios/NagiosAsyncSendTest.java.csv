commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setSender() {     nagiosPassiveCheckSender = Mockito.mock(NonBlockingNagiosPassiveCheckSender.class). }
false;public;0;14;;@Override public void configure() throws Exception {     String uri = "nagios:127.0.0.1:25664?password=secret&sendSync=false".     NagiosComponent nagiosComponent = new NagiosComponent().     nagiosComponent.setCamelContext(context).     NagiosEndpoint nagiosEndpoint = (NagiosEndpoint) nagiosComponent.createEndpoint(uri).     nagiosEndpoint.setSender(nagiosPassiveCheckSender).     nagiosEndpoint.createProducer().     from("direct:start").to(nagiosEndpoint).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String uri = "nagios:127.0.0.1:25664?password=secret&sendSync=false".             NagiosComponent nagiosComponent = new NagiosComponent().             nagiosComponent.setCamelContext(context).             NagiosEndpoint nagiosEndpoint = (NagiosEndpoint) nagiosComponent.createEndpoint(uri).             nagiosEndpoint.setSender(nagiosPassiveCheckSender).             nagiosEndpoint.createProducer().             from("direct:start").to(nagiosEndpoint).to("mock:result").         }     }. }
