commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;6;;@Before @Override public void setUp() throws Exception {     canRun = true.     super.setUp(). }
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     NagiosEventNotifier notifier = new NagiosEventNotifier(nagiosPassiveCheckSender).     notifier.getConfiguration().setHost("localhost").     notifier.getConfiguration().setPort(25669).     notifier.getConfiguration().setPassword("password").     CamelContext context = super.createCamelContext().     context.getManagementStrategy().addEventNotifier(notifier).     return context. }
false;public;0;16;;@Test public void testNagiosEventNotifierOk() throws Exception {     if (!canRun) {         return.     }     getMockEndpoint("mock:ok").expectedMessageCount(1).     template.sendBody("direct:ok", "Hello World").     assertMockEndpointsSatisfied().     context.stop().     verify(nagiosPassiveCheckSender, atLeast(11)).send(any(MessagePayload.class)). }
false;public;0;17;;@Test public void testNagiosEventNotifierError() throws Exception {     if (!canRun) {         return.     }     try {         template.sendBody("direct:fail", "Bye World").         fail("Should have thrown an exception").     } catch (Exception e) {     // ignore     }     context.stop().     verify(nagiosPassiveCheckSender, atLeast(9)).send(any(MessagePayload.class)). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:ok").to("mock:ok").     from("direct:fail").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:ok").to("mock:ok").             from("direct:fail").throwException(new IllegalArgumentException("Damn")).         }     }. }
