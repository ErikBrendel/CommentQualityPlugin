commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("irrelevant body").     exchange.getIn().setHeader("abc", "def"). }
false;public;0;15;;@Test public void testInHeadersTransferredToOutOnCount() {     // a read operation     assertEquals(0, testCollection.count()).     Exchange result = template.request("direct:count", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("irrelevant body").             exchange.getIn().setHeader("abc", "def").         }     }).     assertTrue("Result is not of type Long", result.getOut().getBody() instanceof Long).     assertEquals("Test collection should not contain any records", 0L, result.getOut().getBody()).     assertEquals("An input header was not returned", "def", result.getOut().getHeader("abc")). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("{\"_id\":\"testInsertString\", \"scientist\":\"Einstein\"}").     exchange.getIn().setHeader("abc", "def"). }
false;public;0;16;;@Test public void testInHeadersTransferredToOutOnInsert() {     Exchange result = template.request("direct:insert", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("{\"_id\":\"testInsertString\", \"scientist\":\"Einstein\"}").             exchange.getIn().setHeader("abc", "def").         }     }).     // TODO: WriteResult isn't return when inserting     // assertTrue(result.getOut().getBody() instanceof WriteResult).     assertEquals("An input header was not returned", "def", result.getOut().getHeader("abc")).     Document b = testCollection.find(eq(MONGO_ID, "testInsertString")).first().     assertNotNull("No record with 'testInsertString' _id", b). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(record1). }
false;public;0;32;;@Test public void testWriteResultAsHeaderWithWriteOp() {     // Prepare test     assertEquals(0, testCollection.count()).     Object[] req = new Object[] { new Document(MONGO_ID, "testSave1").append("scientist", "Einstein").toJson(), new Document(MONGO_ID, "testSave2").append("scientist", "Copernicus").toJson() }.     // Object result =     template.requestBody("direct:insert", req).     // assertTrue(result instanceof WriteResult).     assertEquals("Number of records persisted must be 2", 2, testCollection.count()).     // Testing the save logic     final Document record1 = testCollection.find(eq(MONGO_ID, "testSave1")).first().     assertEquals("Scientist field of 'testSave1' must equal 'Einstein'", "Einstein", record1.get("scientist")).     record1.put("scientist", "Darwin").     // test that as a payload, we get back exactly our input, but enriched     // with the CamelMongoDbWriteResult header     Exchange resultExch = template.request("direct:save", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(record1).         }     }).     assertTrue(resultExch.getOut().getBody() instanceof Document).     assertTrue(resultExch.getOut().getBody().equals(record1)).     assertTrue(resultExch.getOut().getHeader(MongoDbConstants.WRITERESULT) instanceof UpdateResult).     Document record2 = testCollection.find(eq(MONGO_ID, "testSave1")).first().     assertEquals("Scientist field of 'testSave1' must equal 'Darwin' after save operation", "Darwin", record2.get("scientist")). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("irrelevantBody").     exchange.getIn().setHeader("abc", "def"). }
false;public;0;13;;@Test public void testWriteResultAsHeaderWithReadOp() {     Exchange resultExch = template.request("direct:getDbStats", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("irrelevantBody").             exchange.getIn().setHeader("abc", "def").         }     }).     assertTrue(resultExch.getOut().getBody() instanceof Document).     assertNull(resultExch.getOut().getHeader(MongoDbConstants.WRITERESULT)).     assertEquals("def", resultExch.getOut().getHeader("abc")). }
false;public;0;11;;public void configure() {     // tested routes     from("direct:count").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true").     from("direct:save").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=save&writeResultAsHeader=true").     from("direct:getDbStats").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=getDbStats&writeResultAsHeader=true").     // supporting routes     from("direct:insert").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // tested routes             from("direct:count").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true").             from("direct:save").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=save&writeResultAsHeader=true").             from("direct:getDbStats").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=getDbStats&writeResultAsHeader=true").             // supporting routes             from("direct:insert").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert").         }     }. }
