commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testInduceParseException() throws Exception {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     // notice missing quote at the end of Einstein     try {         template.requestBody("direct:findOneByQuery", "{\"scientist\": \"Einstein}").         fail("Should have thrown an exception").     } catch (Exception e) {         extractAndAssertCamelMongoDbException(e, null).     } }
false;public;0;19;;@Test public void testInduceParseAndThenOkException() throws Exception {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     // notice missing quote at the end of Einstein     try {         template.requestBody("direct:findOneByQuery", "{\"scientist\": \"Einstein}").         fail("Should have thrown an exception").     } catch (Exception e) {         extractAndAssertCamelMongoDbException(e, null).     }     // this one is okay     DBObject out = template.requestBody("direct:findOneByQuery", "{\"scientist\": \"Einstein\"}", DBObject.class).     assertNotNull(out).     assertEquals("Einstein", out.get("scientist")). }
false;public;0;14;;@Test public void testErroneousDynamicOperation() throws Exception {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     try {         template.requestBodyAndHeader("direct:findOneByQuery", new Document("scientist", "Einstein").toJson(), MongoDbConstants.OPERATION_HEADER, "dummyOp").         fail("Should have thrown an exception").     } catch (Exception e) {         extractAndAssertCamelMongoDbException(e, "Operation specified on header is not supported. Value: dummyOp").     } }
false;public;0;12;;public void configure() {     from("direct:findAll").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&dynamicity=true").to("mock:resultFindAll").     from("direct:findOneByQuery").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findOneByQuery&dynamicity=true").to("mock:resultFindOneByQuery").     from("direct:findById").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findById&dynamicity=true").to("mock:resultFindById"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:findAll").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&dynamicity=true").to("mock:resultFindAll").             from("direct:findOneByQuery").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findOneByQuery&dynamicity=true").to("mock:resultFindOneByQuery").             from("direct:findById").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findById&dynamicity=true").to("mock:resultFindById").         }     }. }
