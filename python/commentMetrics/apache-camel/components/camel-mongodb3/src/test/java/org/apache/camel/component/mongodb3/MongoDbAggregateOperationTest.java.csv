commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testAggregate() throws Exception {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     // result sorted by _id     Object result = template.requestBody("direct:aggregate", "[{ $match : {$or : [{\"scientist\" : \"Darwin\"},{\"scientist\" : \"Einstein\"}]}}," + "{ $group: { _id: \"$scientist\", count: { $sum: 1 }} },{ $sort : { _id : 1}} ]").     assertTrue("Result is not of type List", result instanceof List).     @SuppressWarnings("unchecked")     List<Document> resultList = (List<Document>) result.     assertListSize("Result does not contain 2 elements", resultList, 2).     assertEquals("First result Document._id should be Darwin", "Darwin", resultList.get(0).get("_id")).     assertEquals("First result Document.count should be 100", 100, resultList.get(0).get("count")).     assertEquals("Second result Document._id should be Einstein", "Einstein", resultList.get(1).get("_id")).     assertEquals("Second result Document.count should be 100", 100, resultList.get(1).get("count")). }
false;public;0;23;;@Test public void testAggregateDBCursor() {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     Object result = template.requestBody("direct:aggregateDBCursor", "[{ $match : {$or : [{\"scientist\" : \"Darwin\"},{\"scientist\" : \"Einstein\"}]}}]").     assertTrue("Result is not of type DBCursor", result instanceof MongoIterable).     MongoIterable<Document> resultCursor = (MongoIterable<Document>) result.     // Ensure that all returned documents contain all fields     int count = 0.     for (Document document : resultCursor) {         assertNotNull("Document in returned list should contain all fields", document.get("_id")).         assertNotNull("Document in returned list should contain all fields", document.get("scientist")).         assertNotNull("Document in returned list should contain all fields", document.get("fixedField")).         count++.     }     assertEquals("Result does not contain 200 elements", 200, count). }
false;public;0;28;;@Test public void testAggregateWithOptions() {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     Map<String, Object> options = new HashMap<>().     options.put(MongoDbConstants.BATCH_SIZE, 10).     options.put(MongoDbConstants.ALLOW_DISK_USE, true).     Object result = template.requestBodyAndHeaders("direct:aggregateDBCursor", "[{ $match : {$or : [{\"scientist\" : \"Darwin\"},{\"scientist\" : \"Einstein\"}]}}]", options).     assertTrue("Result is not of type DBCursor", result instanceof MongoIterable).     MongoIterable<Document> resultCursor = (MongoIterable<Document>) result.     // Ensure that all returned documents contain all fields     int count = 0.     for (Document document : resultCursor) {         assertNotNull("Document in returned list should contain all fields", document.get("_id")).         assertNotNull("Document in returned list should contain all fields", document.get("scientist")).         assertNotNull("Document in returned list should contain all fields", document.get("fixedField")).         count++.     }     assertEquals("Result does not contain 200 elements", 200, count). }
false;public;0;7;;public void configure() {     from("direct:aggregate").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=aggregate").     from("direct:aggregateDBCursor").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=aggregate&dynamicity=true&outputType=MongoIterable").to("mock:resultAggregateDBCursor"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:aggregate").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=aggregate").             from("direct:aggregateDBCursor").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=aggregate&dynamicity=true&outputType=MongoIterable").to("mock:resultAggregateDBCursor").         }     }. }
