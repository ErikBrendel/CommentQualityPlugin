commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testFindAllDBCursor() {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     // Repeat ten times, obtain 10 batches of 100 results each time     int numToSkip = 0.     final int limit = 100.     for (int i = 0. i < 10. i++) {         Map<String, Object> headers = new HashMap<>().         headers.put(MongoDbConstants.NUM_TO_SKIP, numToSkip).         headers.put(MongoDbConstants.LIMIT, 100).         Object result = template.requestBodyAndHeaders("direct:findAllDBCursor", ObjectUtils.NULL, headers).         assertTrue("Result is not of type MongoIterable", result instanceof MongoIterable).         @SuppressWarnings("unchecked")         MongoIterable<Document> resultCursor = (MongoIterable<Document>) result.         // Ensure that all returned documents contain all fields         for (Document document : resultCursor) {             assertNotNull("Document in returned list should contain all fields", document.get(MONGO_ID)).             assertNotNull("Document in returned list should contain all fields", document.get("scientist")).             assertNotNull("Document in returned list should contain all fields", document.get("fixedField")).         }         numToSkip = numToSkip + limit.     } }
false;public;0;23;;@Test public void testFindAllDocumentList() {     // Test that the collection has 0 documents in it     assertEquals(0, testCollection.count()).     pumpDataIntoTestCollection().     Object result = template.requestBody("direct:findAllDocumentList", ObjectUtils.NULL).     assertTrue("Result is not of type List", result instanceof List).     @SuppressWarnings("unchecked")     List<Document> resultList = (List<Document>) result.     assertListSize("Result does not contain 1000 elements", resultList, 1000).     // Ensure that all returned documents contain all fields     for (Document document : resultList) {         assertNotNull("Document in returned list should contain all fields", document.get(MONGO_ID)).         assertNotNull("Document in returned list should contain all fields", document.get("scientist")).         assertNotNull("Document in returned list should contain all fields", document.get("fixedField")).     }     for (Exchange resultExchange : getMockEndpoint("mock:resultFindAll").getReceivedExchanges()) {         assertEquals("Result total size header should equal 1000", 1000, resultExchange.getIn().getHeader(MongoDbConstants.RESULT_TOTAL_SIZE)).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findById&dynamicity=true&outputType=MongoIterable").to("mock:dummy"). }
false;public;0;16;;@Test public void testInitFindWithWrongOutputType() {     try {         RouteBuilder taillableRouteBuilder = new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findById&dynamicity=true&outputType=MongoIterable").to("mock:dummy").             }         }.         template.getCamelContext().addRoutes(taillableRouteBuilder).         fail("Endpoint should not be initialized with a non compatible outputType").     } catch (Exception exception) {         assertTrue("Exception is not of type IllegalArgumentException", exception.getCause() instanceof IllegalArgumentException).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing&outputType=MongoIterable").id("tailableCursorConsumer1").autoStartup(false).to("mock:test"). }
false;public;0;16;;@Test public void testInitTailWithWrongOutputType() {     try {         RouteBuilder taillableRouteBuilder = new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.cappedTestCollection}}&tailTrackIncreasingField=increasing&outputType=MongoIterable").id("tailableCursorConsumer1").autoStartup(false).to("mock:test").             }         }.         template.getCamelContext().addRoutes(taillableRouteBuilder).         fail("Endpoint should not be initialized with a non compatible outputType").     } catch (Exception exception) {         assertTrue("Exception is not of type IllegalArgumentException", exception.getCause() instanceof IllegalArgumentException).     } }
false;public;0;9;;public void configure() {     from("direct:findAllDBCursor").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&dynamicity=true&outputType=MongoIterable").to("mock:resultFindAllDBCursor").     from("direct:findAllDocumentList").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&outputType=DocumentList").to("mock:resultFindAllDocumentList"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:findAllDBCursor").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&dynamicity=true&outputType=MongoIterable").to("mock:resultFindAllDBCursor").             from("direct:findAllDocumentList").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=findAll&outputType=DocumentList").to("mock:resultFindAllDocumentList").         }     }. }
