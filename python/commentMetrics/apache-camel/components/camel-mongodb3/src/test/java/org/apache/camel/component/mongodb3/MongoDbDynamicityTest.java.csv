commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testInsertDynamicityDisabled() {     assertEquals(0, testCollection.count()).     mongo.getDatabase("otherDB").drop().     db.getCollection("otherCollection").drop().     assertFalse("The otherDB database should not exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)).     String body = "{\"_id\": \"testInsertDynamicityDisabled\", \"a\" : \"1\"}".     Map<String, Object> headers = new HashMap<>().     headers.put(MongoDbConstants.DATABASE, "otherDB").     headers.put(MongoDbConstants.COLLECTION, "otherCollection").     // Object result =     template.requestBodyAndHeaders("direct:noDynamicity", body, headers).     Document b = testCollection.find(eq(MONGO_ID, "testInsertDynamicityDisabled")).first().     assertNotNull("No record with 'testInsertDynamicityDisabled' _id", b).     body = "{\"_id\": \"testInsertDynamicityDisabledExplicitly\", \"a\" : \"1\"}".     // result =     template.requestBodyAndHeaders("direct:noDynamicityExplicit", body, headers).     b = testCollection.find(eq(MONGO_ID, "testInsertDynamicityDisabledExplicitly")).first().     assertNotNull("No record with 'testInsertDynamicityDisabledExplicitly' _id", b).     assertFalse("The otherDB database should not exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)). }
false;public;0;24;;@Test public void testInsertDynamicityEnabledDBOnly() {     assertEquals(0, testCollection.count()).     mongo.getDatabase("otherDB").drop().     db.getCollection("otherCollection").drop().     assertFalse("The otherDB database should not exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)).     String body = "{\"_id\": \"testInsertDynamicityEnabledDBOnly\", \"a\" : \"1\"}".     Map<String, Object> headers = new HashMap<>().     headers.put(MongoDbConstants.DATABASE, "otherDB").     // Object result =     template.requestBodyAndHeaders("direct:dynamicityEnabled", body, headers).     MongoCollection<Document> localDynamicCollection = mongo.getDatabase("otherDB").getCollection(testCollection.getNamespace().getCollectionName(), Document.class).     Document b = localDynamicCollection.find(eq(MONGO_ID, "testInsertDynamicityEnabledDBOnly")).first().     assertNotNull("No record with 'testInsertDynamicityEnabledDBOnly' _id", b).     b = testCollection.find(eq(MONGO_ID, "testInsertDynamicityEnabledDBOnly")).first().     assertNull("There is a record with 'testInsertDynamicityEnabledDBOnly' _id in the test collection", b).     assertTrue("The otherDB database should exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)). }
false;public;0;23;;@Test public void testInsertDynamicityEnabledCollectionOnly() {     assertEquals(0, testCollection.count()).     mongo.getDatabase("otherDB").drop().     db.getCollection("otherCollection").drop().     assertFalse("The otherDB database should not exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)).     String body = "{\"_id\": \"testInsertDynamicityEnabledCollectionOnly\", \"a\" : \"1\"}".     Map<String, Object> headers = new HashMap<>().     headers.put(MongoDbConstants.COLLECTION, "otherCollection").     // Object result =     template.requestBodyAndHeaders("direct:dynamicityEnabled", body, headers).     MongoCollection<Document> loaclDynamicCollection = db.getCollection("otherCollection", Document.class).     Document b = loaclDynamicCollection.find(eq(MONGO_ID, "testInsertDynamicityEnabledCollectionOnly")).first().     assertNotNull("No record with 'testInsertDynamicityEnabledCollectionOnly' _id", b).     b = testCollection.find(eq(MONGO_ID, "testInsertDynamicityEnabledDBOnly")).first().     assertNull("There is a record with 'testInsertDynamicityEnabledCollectionOnly' _id in the test collection", b).     assertFalse("The otherDB database should not exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)). }
false;public;0;24;;@Test public void testInsertDynamicityEnabledDBAndCollection() {     assertEquals(0, testCollection.count()).     mongo.getDatabase("otherDB").drop().     db.getCollection("otherCollection").drop().     assertFalse("The otherDB database should not exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)).     String body = "{\"_id\": \"testInsertDynamicityEnabledDBAndCollection\", \"a\" : \"1\"}".     Map<String, Object> headers = new HashMap<>().     headers.put(MongoDbConstants.DATABASE, "otherDB").     headers.put(MongoDbConstants.COLLECTION, "otherCollection").     // Object result =     template.requestBodyAndHeaders("direct:dynamicityEnabled", body, headers).     MongoCollection<Document> loaclDynamicCollection = mongo.getDatabase("otherDB").getCollection("otherCollection", Document.class).     Document b = loaclDynamicCollection.find(eq(MONGO_ID, "testInsertDynamicityEnabledDBAndCollection")).first().     assertNotNull("No record with 'testInsertDynamicityEnabledDBAndCollection' _id", b).     b = testCollection.find(eq(MONGO_ID, "testInsertDynamicityEnabledDBOnly")).first().     assertNull("There is a record with 'testInsertDynamicityEnabledDBAndCollection' _id in the test collection", b).     assertTrue("The otherDB database should exist", StreamSupport.stream(mongo.listDatabaseNames().spliterator(), false).anyMatch("otherDB"::equals)). }
false;public;0;7;;public void configure() {     from("direct:noDynamicity").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert").     from("direct:noDynamicityExplicit").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=false").     from("direct:dynamicityEnabled").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=true"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:noDynamicity").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert").             from("direct:noDynamicityExplicit").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=false").             from("direct:dynamicityEnabled").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=true").         }     }. }
