commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before @After public void clearDB() {     testCollection.deleteMany(new Document()). }
false;public;0;5;;@Override public void doPostSetup() {     super.doPostSetup().     repo = new MongoDbIdempotentRepository(mongo, testCollectionName, dbName). }
false;public;0;8;;@Test public void add() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     boolean added = repo.add(randomUUIDString).     assertEquals("Driver inserted document", 1, testCollection.count()).     assertTrue("Add ui returned true", added). }
false;public;0;10;;@Test public void addAndContains() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     repo.add(randomUUIDString).     assertEquals(1, testCollection.count()).     boolean found = repo.contains(randomUUIDString).     assertTrue("Added uid was found", found). }
false;public;0;11;;@Test public void addAndRemove() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     repo.add(randomUUIDString).     assertEquals(1, testCollection.count()).     boolean removed = repo.remove(randomUUIDString).     assertTrue("Added uid was removed correctly", removed).     assertEquals(0, testCollection.count()). }
false;public;0;11;;@Test public void addDuplicatedFails() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     repo.add(randomUUIDString).     assertEquals(1, testCollection.count()).     boolean added = repo.add(randomUUIDString).     assertTrue("Duplicated entry was not added", !added).     assertEquals(1, testCollection.count()). }
false;public;0;7;;@Test public void deleteMissingiIsFailse() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     assertEquals(0, testCollection.count()).     boolean removed = repo.remove(randomUUIDString).     assertTrue("Non exisint uid returns false", !removed). }
false;public;0;6;;@Test public void containsMissingReturnsFalse() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     boolean found = repo.contains(randomUUIDString).     assertTrue("Non existing item is not found", !found). }
false;public;0;9;;@Test public void confirmAllwaysReturnsTrue() throws Exception {     String randomUUIDString = UUID.randomUUID().toString().     boolean found = repo.confirm(randomUUIDString).     assertTrue("Confirm always returns true", found).     found = repo.confirm(null).     assertTrue("Confirm always returns true, even with null", found). }
