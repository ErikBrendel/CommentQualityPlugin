commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testInvalidReadPreferenceOptionValue() throws Exception {     try {         createMongoDbEndpoint("mongodb3:myDb?database={{mongodb.testDb}}&readPreference=foo").         fail("Should have thrown exception").     } catch (ResolveEndpointFailedException refe) {         assertTrue(refe.getMessage(), refe.getMessage().endsWith("Unknown parameters=[{readPreference=foo}]")).     } }
false;public;0;7;;@Test public void testNoReadPreferenceOptionValue() throws Exception {     endpoint = createMongoDbEndpoint("mongodb3:myDb?database={{mongodb.testDb}}").     assertSame(ReadPreference.primary(), endpoint.getReadPreference()).     assertSame(ReadPreference.primary(), endpoint.getMongoConnection().getReadPreference()). // the default is primary }
false;public;0;6;;@Test public void testPrimaryReadPreferenceOptionValue() throws Exception {     endpoint = createMongoDbEndpoint("mongodb3:myDbP?database={{mongodb.testDb}}").     assertSame(ReadPreference.primary(), endpoint.getReadPreference()).     assertSame(ReadPreference.primary(), endpoint.getMongoConnection().getReadPreference()). }
false;public;0;6;;@Test public void testPrimaryPreferredReadPreferenceOptionValue() throws Exception {     endpoint = createMongoDbEndpoint("mongodb3:myDbPP?database={{mongodb.testDb}}").     assertSame(ReadPreference.primaryPreferred(), endpoint.getReadPreference()).     assertSame(ReadPreference.primaryPreferred(), endpoint.getMongoConnection().getReadPreference()). }
false;public;0;6;;@Test public void testSecondaryReadPreferenceOptionValue() throws Exception {     endpoint = createMongoDbEndpoint("mongodb3:myDbS?database={{mongodb.testDb}}").     assertSame(ReadPreference.secondary(), endpoint.getReadPreference()).     assertSame(ReadPreference.secondary(), endpoint.getMongoConnection().getReadPreference()). }
false;public;0;6;;@Test public void testSecondaryPreferredReadPreferenceOptionValue() throws Exception {     endpoint = createMongoDbEndpoint("mongodb3:myDbSP?database={{mongodb.testDb}}").     assertSame(ReadPreference.secondaryPreferred(), endpoint.getReadPreference()).     assertSame(ReadPreference.secondaryPreferred(), endpoint.getMongoConnection().getReadPreference()). }
false;public;0;6;;@Test public void testNearestReadPreferenceOptionValue() throws Exception {     endpoint = createMongoDbEndpoint("mongodb3:myDbN?database={{mongodb.testDb}}").     assertSame(ReadPreference.nearest(), endpoint.getReadPreference()).     assertSame(ReadPreference.nearest(), endpoint.getMongoConnection().getReadPreference()). }
false;private;1;6;;private MongoDbEndpoint createMongoDbEndpoint(String uri) throws Exception {     Endpoint mongoEndpoint = context().getComponent("mongodb3").createEndpoint(uri).     mongoEndpoint.start().     return MongoDbEndpoint.class.cast(mongoEndpoint). }
