commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Override public void doPostSetup() {     mongo = applicationContext.getBean("myDb", MongoClient.class).     db = mongo.getDatabase(dbName).     // Refresh the test collection - drop it and recreate it. We don't do     // this for the database because MongoDB would create large     // store files each time     testCollectionName = "camelTest".     testCollection = db.getCollection(testCollectionName, Document.class).     testCollection.drop().     testCollection = db.getCollection(testCollectionName, Document.class).     dynamicCollectionName = testCollectionName.concat("Dynamic").     dynamicCollection = db.getCollection(dynamicCollectionName, Document.class).     dynamicCollection.drop().     dynamicCollection = db.getCollection(dynamicCollectionName, Document.class). }
false;public;0;8;;@Override @After public void tearDown() throws Exception {     testCollection.drop().     dynamicCollection.drop().     super.tearDown(). }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     applicationContext = new AnnotationConfigApplicationContext(EmbedMongoConfiguration.class).     @SuppressWarnings("deprecation")     CamelContext ctx = SpringCamelContext.springCamelContext(applicationContext, true).     PropertiesComponent pc = new PropertiesComponent("classpath:mongodb.test.properties").     ctx.addComponent("properties", pc).     return ctx. }
false;protected;0;12;;protected void pumpDataIntoTestCollection() {     // there should be 100 of each     String[] scientists = { "Einstein", "Darwin", "Copernicus", "Pasteur", "Curie", "Faraday", "Newton", "Bohr", "Galilei", "Maxwell" }.     for (int i = 1. i <= 1000. i++) {         int index = i % scientists.length.         Formatter f = new Formatter().         String doc = f.format("{\"_id\":\"%d\", \"scientist\":\"%s\", \"fixedField\": \"fixedValue\"}", i, scientists[index]).toString().         IOHelper.close(f).         testCollection.insertOne(Document.parse(doc)).     }     assertEquals("Data pumping of 1000 entries did not complete entirely", 1000L, testCollection.count()). }
false;protected;2;11;;protected CamelMongoDbException extractAndAssertCamelMongoDbException(Object result, String message) {     assertTrue("Result is not an Exception", result instanceof Throwable).     assertTrue("Result is not an CamelExecutionException", result instanceof CamelExecutionException).     Throwable exc = ((CamelExecutionException) result).getCause().     assertTrue("Result is not an CamelMongoDbException", exc instanceof CamelMongoDbException).     CamelMongoDbException camelExc = ObjectHelper.cast(CamelMongoDbException.class, exc).     if (message != null) {         assertTrue("CamelMongoDbException doesn't contain desired message string", camelExc.getMessage().contains(message)).     }     return camelExc. }
