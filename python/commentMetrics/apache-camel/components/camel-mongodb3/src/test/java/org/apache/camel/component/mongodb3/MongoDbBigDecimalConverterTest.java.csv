commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testBigDecimalAutoConversion() {     assertEquals(0, testCollection.count()).     NumberClass testClass = new NumberClass().     Object result = template.requestBody("direct:insert", testClass).     assertTrue(result instanceof Document).     Document b = testCollection.find(new BasicDBObject("_id", testClass._id)).first().     assertNotNull("No record with 'testInsertString' _id", b).     assertTrue(testClass.aNumber.equals(new BigDecimal((double) b.get("aNumber")))).     assertEquals(testClass.bNumber, new BigDecimal((double) b.get("bNumber"))). }
false;public;0;4;;public void configure() {     from("direct:insert").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:insert").to("mongodb3:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert").         }     }. }
