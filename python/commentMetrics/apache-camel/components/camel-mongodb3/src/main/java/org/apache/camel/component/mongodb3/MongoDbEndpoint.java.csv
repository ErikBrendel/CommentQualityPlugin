# id;timestamp;commentText;codeText;commentWords;codeWords
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1482051156;Create collection during initialisation if it doesn't exist. Default is true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_		this.createCollection = createCollection__	};create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1482051156;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1482479312;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1485941651;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1516950103;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1536605520;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1537290824;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1540108160;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1540108163;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1547240981;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1547480087;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1548167442;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setCreateCollection(boolean createCollection);1548404832;Create collection during initialisation if it doesn't exist. Default is_true.__@param createCollection true or false;public void setCreateCollection(boolean createCollection) {_        this.createCollection = createCollection__    };create,collection,during,initialisation,if,it,doesn,t,exist,default,is,true,param,create,collection,true,or,false;public,void,set,create,collection,boolean,create,collection,this,create,collection,create,collection
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1482051156;Set the {@link WriteConcern} for write operations on MongoDB, passing in the bean ref to a custom WriteConcern which exists in the Registry._You can also use standard WriteConcerns by passing in their key. See the {@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_		WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__		if (wc == null) {_			String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the "_					+ "provided bean name (" + writeConcernRef + ")  is correct. Aborting initialization."__			throw new IllegalArgumentException(msg)__		}__		this.writeConcernRef = wc__	};set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1482051156;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1482479312;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1485941651;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1516950103;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1536605520;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1537290824;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1540108160;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1540108163;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1547240981;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1547480087;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1548167442;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> public void setWriteConcernRef(String writeConcernRef);1548404832;Set the {@link WriteConcern} for write operations on MongoDB, passing in_the bean ref to a custom WriteConcern which exists in the Registry. You_can also use standard WriteConcerns by passing in their key. See the_{@link #setWriteConcern(String) setWriteConcern} method.__@param writeConcernRef the name of the bean in the registry that_represents the WriteConcern to use;public void setWriteConcernRef(String writeConcernRef) {_        WriteConcern wc = this.getCamelContext().getRegistry().lookupByNameAndType(writeConcernRef, WriteConcern.class)__        if (wc == null) {_            String msg = "Camel MongoDB component could not find the WriteConcern in the Registry. Verify that the " + "provided bean name (" + writeConcernRef_                         + ")  is correct. Aborting initialization."__            throw new IllegalArgumentException(msg)__        }__        this.writeConcernRef = wc__    };set,the,link,write,concern,for,write,operations,on,mongo,db,passing,in,the,bean,ref,to,a,custom,write,concern,which,exists,in,the,registry,you,can,also,use,standard,write,concerns,by,passing,in,their,key,see,the,link,set,write,concern,string,set,write,concern,method,param,write,concern,ref,the,name,of,the,bean,in,the,registry,that,represents,the,write,concern,to,use;public,void,set,write,concern,ref,string,write,concern,ref,write,concern,wc,this,get,camel,context,get,registry,lookup,by,name,and,type,write,concern,ref,write,concern,class,if,wc,null,string,msg,camel,mongo,db,component,could,not,find,the,write,concern,in,the,registry,verify,that,the,provided,bean,name,write,concern,ref,is,correct,aborting,initialization,throw,new,illegal,argument,exception,msg,this,write,concern,ref,wc
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1482051156;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1482479312;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1485941651;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1516950103;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1536605520;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1537290824;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1540108160;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1540108163;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1547240981;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1547480087;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1548167442;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> @SuppressWarnings("unused")                                       private void validateOutputType();1548404832;Check if outputType is compatible with operation. DbCursor and_DocumentList applies to findAll. Document applies to others.;@SuppressWarnings("unused") _                                _    private void validateOutputType() {_        if (!ObjectHelper.isEmpty(outputType)) {_            if (DocumentList.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType DocumentList is only compatible with operation findAll")__            }_            if (MongoIterable.equals(outputType) && !(findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType MongoIterable is only compatible with operation findAll")__            }_            if (Document.equals(outputType) && (findAll.equals(operation))) {_                throw new IllegalArgumentException("outputType Document is not compatible with operation findAll")__            }_        }_    };check,if,output,type,is,compatible,with,operation,db,cursor,and,document,list,applies,to,find,all,document,applies,to,others;suppress,warnings,unused,private,void,validate,output,type,if,object,helper,is,empty,output,type,if,document,list,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,list,is,only,compatible,with,operation,find,all,if,mongo,iterable,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,mongo,iterable,is,only,compatible,with,operation,find,all,if,document,equals,output,type,find,all,equals,operation,throw,new,illegal,argument,exception,output,type,document,is,not,compatible,with,operation,find,all
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1482051156;Sets whether this endpoint will attempt to dynamically resolve the target database and collection from the incoming Exchange properties._Can be used to override at runtime the database and collection specified on the otherwise static endpoint URI._It is disabled by default to boost performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and collection should be calculated dynamically based on Exchange properties.;public void setDynamicity(boolean dynamicity) {_		this.dynamicity = dynamicity__	};sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1482051156;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1482479312;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1485941651;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1516950103;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1536605520;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1537290824;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1540108160;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1540108163;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1547240981;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1547480087;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1548167442;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> public void setDynamicity(boolean dynamicity);1548404832;Sets whether this endpoint will attempt to dynamically resolve the target_database and collection from the incoming Exchange properties. Can be_used to override at runtime the database and collection specified on the_otherwise static endpoint URI. It is disabled by default to boost_performance. Enabling it will take a minimal performance hit.__@see MongoDbConstants#DATABASE_@see MongoDbConstants#COLLECTION_@param dynamicity true or false indicated whether target database and_collection should be calculated dynamically based on Exchange_properties.;public void setDynamicity(boolean dynamicity) {_        this.dynamicity = dynamicity__    };sets,whether,this,endpoint,will,attempt,to,dynamically,resolve,the,target,database,and,collection,from,the,incoming,exchange,properties,can,be,used,to,override,at,runtime,the,database,and,collection,specified,on,the,otherwise,static,endpoint,uri,it,is,disabled,by,default,to,boost,performance,enabling,it,will,take,a,minimal,performance,hit,see,mongo,db,constants,database,see,mongo,db,constants,collection,param,dynamicity,true,or,false,indicated,whether,target,database,and,collection,should,be,calculated,dynamically,based,on,exchange,properties;public,void,set,dynamicity,boolean,dynamicity,this,dynamicity,dynamicity
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1482051156;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1482479312;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1485941651;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1516950103;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1536605520;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1537290824;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1540108160;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1540108163;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1547240981;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1547480087;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1548167442;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> @SuppressWarnings("unchecked")     public List<Bson> createIndex();1548404832;Create technical list index__@return technical list index;@SuppressWarnings("unchecked")_    public List<Bson> createIndex() {_        try {_            List<Bson> indexList = new ArrayList<>()___            if (ObjectHelper.isNotEmpty(collectionIndex)) {_                HashMap<String, String> indexMap = new ObjectMapper().readValue(collectionIndex, HashMap.class)___                for (Map.Entry<String, String> set : indexMap.entrySet()) {_                    Document index = new Document()__                    _                    _                    _                    _                    _                    _                    index.put(set.getKey(), set.getValue())___                    indexList.add(index)__                }_            }_            return indexList__        } catch (IOException e) {_            throw new CamelMongoDbException("createIndex failed", e)__        }_    };create,technical,list,index,return,technical,list,index;suppress,warnings,unchecked,public,list,bson,create,index,try,list,bson,index,list,new,array,list,if,object,helper,is,not,empty,collection,index,hash,map,string,string,index,map,new,object,mapper,read,value,collection,index,hash,map,class,for,map,entry,string,string,set,index,map,entry,set,document,index,new,document,index,put,set,get,key,set,get,value,index,list,add,index,return,index,list,catch,ioexception,e,throw,new,camel,mongo,db,exception,create,index,failed,e
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1482051156;Indicates what database the tail tracking mechanism will persist to. If not specified, the current database will_be picked by default. Dynamicity will not be taken into account even if enabled, i.e. the tail tracking database_will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_		this.tailTrackDb = tailTrackDb__	};indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1482051156;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1482479312;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1485941651;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1516950103;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1536605520;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1537290824;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1540108160;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1540108163;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1547240981;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1547480087;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1548167442;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setTailTrackDb(String tailTrackDb);1548404832;Indicates what database the tail tracking mechanism will persist to. If_not specified, the current database will be picked by default. Dynamicity_will not be taken into account even if enabled, i.e. the tail tracking_database will not vary past endpoint initialisation.__@param tailTrackDb database name;public void setTailTrackDb(String tailTrackDb) {_        this.tailTrackDb = tailTrackDb__    };indicates,what,database,the,tail,tracking,mechanism,will,persist,to,if,not,specified,the,current,database,will,be,picked,by,default,dynamicity,will,not,be,taken,into,account,even,if,enabled,i,e,the,tail,tracking,database,will,not,vary,past,endpoint,initialisation,param,tail,track,db,database,name;public,void,set,tail,track,db,string,tail,track,db,this,tail,track,db,tail,track,db
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1482051156;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_		try {_			this.consumerType = MongoDbConsumerType.valueOf(consumerType)__		} catch (IllegalArgumentException e) {_			throw new CamelMongoDbException("Consumer type not supported", e)__		}_	};reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1482051156;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1482479312;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1485941651;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1516950103;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1536605520;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1537290824;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1540108160;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1540108163;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1547240981;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1547480087;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1548167442;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setConsumerType(String consumerType) throws CamelMongoDbException;1548404832;Reserved for future use, when more consumer types are supported.__@param consumerType key of the consumer type_@throws CamelMongoDbException;public void setConsumerType(String consumerType) throws CamelMongoDbException {_        try {_            this.consumerType = MongoDbConsumerType.valueOf(consumerType)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Consumer type not supported", e)__        }_    };reserved,for,future,use,when,more,consumer,types,are,supported,param,consumer,type,key,of,the,consumer,type,throws,camel,mongo,db,exception;public,void,set,consumer,type,string,consumer,type,throws,camel,mongo,db,exception,try,this,consumer,type,mongo,db,consumer,type,value,of,consumer,type,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,consumer,type,not,supported,e
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1482051156;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" : order2});public void setCollectionIndex(String collectionIndex) {_		this.collectionIndex = collectionIndex__	};sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1482051156;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1482479312;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1485941651;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1516950103;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1536605520;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1537290824;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1540108160;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1540108163;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1547240981;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1547480087;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1548167442;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setCollectionIndex(String collectionIndex);1548404832;Sets the collection index (JSON FORMAT : { "field1" : order1, "field2" :_order2});public void setCollectionIndex(String collectionIndex) {_        this.collectionIndex = collectionIndex__    };sets,the,collection,index,json,format,field1,order1,field2,order2;public,void,set,collection,index,string,collection,index,this,collection,index,collection,index
MongoDbEndpoint -> public void setDatabase(String database);1482051156;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_		this.database = database__	};sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1482051156;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1482479312;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1485941651;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1516950103;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1536605520;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1537290824;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1540108160;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1540108163;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1547240981;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1547480087;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1548167442;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setDatabase(String database);1548404832;Sets the name of the MongoDB database to target__@param database name of the MongoDB database;public void setDatabase(String database) {_        this.database = database__    };sets,the,name,of,the,mongo,db,database,to,target,param,database,name,of,the,mongo,db,database;public,void,set,database,string,database,this,database,database
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1482051156;MongoDB tailable cursors will block until new data arrives. If no new data is inserted, after some time the cursor will be automatically_freed and closed by the MongoDB server. The client is expected to regenerate the cursor if needed. This value specifies the time to wait_before attempting to fetch a new cursor, and if the attempt fails, how long before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_		this.cursorRegenerationDelay = cursorRegenerationDelay__	};mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1482051156;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1482479312;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1485941651;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1516950103;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1536605520;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1537290824;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1540108160;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1540108163;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1547240981;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1547480087;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1548167442;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setCursorRegenerationDelay(long cursorRegenerationDelay);1548404832;MongoDB tailable cursors will block until new data arrives. If no new_data is inserted, after some time the cursor will be automatically freed_and closed by the MongoDB server. The client is expected to regenerate_the cursor if needed. This value specifies the time to wait before_attempting to fetch a new cursor, and if the attempt fails, how long_before the next attempt is made. Default value is 1000ms.__@param cursorRegenerationDelay delay specified in milliseconds;public void setCursorRegenerationDelay(long cursorRegenerationDelay) {_        this.cursorRegenerationDelay = cursorRegenerationDelay__    };mongo,db,tailable,cursors,will,block,until,new,data,arrives,if,no,new,data,is,inserted,after,some,time,the,cursor,will,be,automatically,freed,and,closed,by,the,mongo,db,server,the,client,is,expected,to,regenerate,the,cursor,if,needed,this,value,specifies,the,time,to,wait,before,attempting,to,fetch,a,new,cursor,and,if,the,attempt,fails,how,long,before,the,next,attempt,is,made,default,value,is,1000ms,param,cursor,regeneration,delay,delay,specified,in,milliseconds;public,void,set,cursor,regeneration,delay,long,cursor,regeneration,delay,this,cursor,regeneration,delay,cursor,regeneration,delay
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1482051156;Correlation field in the incoming record which is of increasing nature and will be used to position the tailing cursor every_time it is generated._The cursor will be (re)created with a query of type: tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking)._Can be of type Integer, Date, String, etc._NOTE: No support for dot notation at the current time, so the field should be at the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_		this.tailTrackIncreasingField = tailTrackIncreasingField__	};correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1482051156;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1482479312;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1485941651;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1516950103;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1536605520;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1537290824;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1540108160;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1540108163;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1547240981;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1547480087;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1548167442;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setTailTrackIncreasingField(String tailTrackIncreasingField);1548404832;Correlation field in the incoming record which is of increasing nature_and will be used to position the tailing cursor every time it is_generated. The cursor will be (re)created with a query of type:_tailTrackIncreasingField > lastValue (possibly recovered from persistent_tail tracking). Can be of type Integer, Date, String, etc. NOTE: No_support for dot notation at the current time, so the field should be at_the top level of the document.__@param tailTrackIncreasingField;public void setTailTrackIncreasingField(String tailTrackIncreasingField) {_        this.tailTrackIncreasingField = tailTrackIncreasingField__    };correlation,field,in,the,incoming,record,which,is,of,increasing,nature,and,will,be,used,to,position,the,tailing,cursor,every,time,it,is,generated,the,cursor,will,be,re,created,with,a,query,of,type,tail,track,increasing,field,last,value,possibly,recovered,from,persistent,tail,tracking,can,be,of,type,integer,date,string,etc,note,no,support,for,dot,notation,at,the,current,time,so,the,field,should,be,at,the,top,level,of,the,document,param,tail,track,increasing,field;public,void,set,tail,track,increasing,field,string,tail,track,increasing,field,this,tail,track,increasing,field,tail,track,increasing,field
MongoDbEndpoint -> public void setCollection(String collection);1482051156;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_		this.collection = collection__	};sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1482051156;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1482479312;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1485941651;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1516950103;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1536605520;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1537290824;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1540108160;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1540108163;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1547240981;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1547480087;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1548167442;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setCollection(String collection);1548404832;Sets the name of the MongoDB collection to bind to this endpoint__@param collection collection name;public void setCollection(String collection) {_        this.collection = collection__    };sets,the,name,of,the,mongo,db,collection,to,bind,to,this,endpoint,param,collection,collection,name;public,void,set,collection,string,collection,this,collection,collection
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1482051156;Field where the last tracked value will be placed. If not specified,  {@link MongoDbTailTrackingConfig#DEFAULT_FIELD}_will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_		this.tailTrackField = tailTrackField__	};field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1482051156;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1482479312;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1485941651;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1516950103;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1536605520;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1537290824;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1540108160;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1540108163;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1547240981;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1547480087;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1548167442;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void setTailTrackField(String tailTrackField);1548404832;Field where the last tracked value will be placed. If not specified,_{@link MongoDbTailTrackingConfig#DEFAULT_FIELD} will be used by default.__@param tailTrackField field name;public void setTailTrackField(String tailTrackField) {_        this.tailTrackField = tailTrackField__    };field,where,the,last,tracked,value,will,be,placed,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,field,field,name;public,void,set,tail,track,field,string,tail,track,field,this,tail,track,field,tail,track,field
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1482051156;Initialises the MongoDB connection using the Mongo object provided to the endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_		LOG.info("Initialising MongoDb endpoint: {}", this.toString())__		if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_			throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__		}_		mongoDatabase = mongoConnection.getDatabase(database)__		if (mongoDatabase == null) {_			throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__		}_		if (collection != null) {_			if (!createCollection && !databaseContainsCollection(collection)) {_				throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__			}_			mongoCollection = mongoDatabase.getCollection(collection, Document.class)___			LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_					new Object[]{mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___			try {_				if (ObjectHelper.isNotEmpty(collectionIndex)) {_					ensureIndex(mongoCollection, createIndex())__				}_			} catch (Exception e) {_				throw new CamelMongoDbException("Error creating index", e)__			}_		}_	};initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,to,string,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1482051156;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        LOG.info("Initialising MongoDb endpoint: {}", this.toString())__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,to,string,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1482479312;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        LOG.info("Initialising MongoDb endpoint: {}", this.toString())__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,to,string,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1485941651;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        LOG.info("Initialising MongoDb endpoint: {}", this.toString())__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,to,string,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1516950103;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        LOG.info("Initialising MongoDb endpoint: {}", this.toString())__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,to,string,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1536605520;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        LOG.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1537290824;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        LOG.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            LOG.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1540108160;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        log.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            log.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1540108163;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        log.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            log.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1547240981;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        log.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            log.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1547480087;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        log.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            log.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1548167442;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        log.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            log.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void initializeConnection() throws CamelMongoDbException;1548404832;Initialises the MongoDB connection using the Mongo object provided to the_endpoint__@throws CamelMongoDbException;public void initializeConnection() throws CamelMongoDbException {_        log.info("Initialising MongoDb endpoint: {}", this)__        if (database == null || (collection == null && !(getDbStats.equals(operation) || command.equals(operation)))) {_            throw new CamelMongoDbException("Missing required endpoint configuration: database and/or collection")__        }_        mongoDatabase = mongoConnection.getDatabase(database)__        if (mongoDatabase == null) {_            throw new CamelMongoDbException("Could not initialise MongoDbComponent. Database " + database + " does not exist.")__        }_        if (collection != null) {_            if (!createCollection && !databaseContainsCollection(collection)) {_                throw new CamelMongoDbException("Could not initialise MongoDbComponent. Collection " + collection + " and createCollection is false.")__            }_            mongoCollection = mongoDatabase.getCollection(collection, Document.class)___            log.debug("MongoDb component initialised and endpoint bound to MongoDB collection with the following parameters. Address list: {}, Db: {}, Collection: {}",_                      new Object[] {mongoConnection.getAllAddress().toString(), mongoDatabase.getName(), collection})___            try {_                if (ObjectHelper.isNotEmpty(collectionIndex)) {_                    ensureIndex(mongoCollection, createIndex())__                }_            } catch (Exception e) {_                throw new CamelMongoDbException("Error creating index", e)__            }_        }_    };initialises,the,mongo,db,connection,using,the,mongo,object,provided,to,the,endpoint,throws,camel,mongo,db,exception;public,void,initialize,connection,throws,camel,mongo,db,exception,log,info,initialising,mongo,db,endpoint,this,if,database,null,collection,null,get,db,stats,equals,operation,command,equals,operation,throw,new,camel,mongo,db,exception,missing,required,endpoint,configuration,database,and,or,collection,mongo,database,mongo,connection,get,database,database,if,mongo,database,null,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,database,database,does,not,exist,if,collection,null,if,create,collection,database,contains,collection,collection,throw,new,camel,mongo,db,exception,could,not,initialise,mongo,db,component,collection,collection,and,create,collection,is,false,mongo,collection,mongo,database,get,collection,collection,document,class,log,debug,mongo,db,component,initialised,and,endpoint,bound,to,mongo,db,collection,with,the,following,parameters,address,list,db,collection,new,object,mongo,connection,get,all,address,to,string,mongo,database,get,name,collection,try,if,object,helper,is,not,empty,collection,index,ensure,index,mongo,collection,create,index,catch,exception,e,throw,new,camel,mongo,db,exception,error,creating,index,e
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1482051156;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_		this.connectionBean = connectionBean__	};name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1482051156;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1482479312;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1485941651;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1516950103;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1536605520;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1537290824;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1540108160;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1540108163;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1547240981;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1547480087;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1548167442;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setConnectionBean(String connectionBean);1548404832;Name of {@link com.mongodb.Mongo} to use.;public void setConnectionBean(String connectionBean) {_        this.connectionBean = connectionBean__    };name,of,link,com,mongodb,mongo,to,use;public,void,set,connection,bean,string,connection,bean,this,connection,bean,connection,bean
MongoDbEndpoint -> public void setPersistentId(String persistentId);1482051156;One tail tracking collection can host many trackers for several tailable consumers._To keep them separate, each tracker should have its own unique persistentId.__@param persistentId the value of the persistent ID to use for this tailable consumer;public void setPersistentId(String persistentId) {_		this.persistentId = persistentId__	};one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1482051156;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1482479312;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1485941651;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1516950103;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1536605520;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1537290824;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1540108160;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1540108163;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1547240981;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1547480087;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1548167442;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setPersistentId(String persistentId);1548404832;One tail tracking collection can host many trackers for several tailable_consumers. To keep them separate, each tracker should have its own unique_persistentId.__@param persistentId the value of the persistent ID to use for this_tailable consumer;public void setPersistentId(String persistentId) {_        this.persistentId = persistentId__    };one,tail,tracking,collection,can,host,many,trackers,for,several,tailable,consumers,to,keep,them,separate,each,tracker,should,have,its,own,unique,persistent,id,param,persistent,id,the,value,of,the,persistent,id,to,use,for,this,tailable,consumer;public,void,set,persistent,id,string,persistent,id,this,persistent,id,persistent,id
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1482051156;Sets the operation this endpoint will execute against MongoDB. For possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_		try {_			this.operation = valueOf(operation)__		} catch (IllegalArgumentException e) {_			throw new CamelMongoDbException("Operation not supported", e)__		}_	};sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1482051156;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1482479312;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1485941651;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1516950103;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1536605520;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1537290824;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1540108160;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1540108163;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1547240981;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1547480087;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1548167442;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setOperation(String operation) throws CamelMongoDbException;1548404832;Sets the operation this endpoint will execute against MongoDB. For_possible values, see {@link MongoDbOperation}.__@param operation name of the operation as per catalogued values_@throws CamelMongoDbException;public void setOperation(String operation) throws CamelMongoDbException {_        try {_            this.operation = valueOf(operation)__        } catch (IllegalArgumentException e) {_            throw new CamelMongoDbException("Operation not supported", e)__        }_    };sets,the,operation,this,endpoint,will,execute,against,mongo,db,for,possible,values,see,link,mongo,db,operation,param,operation,name,of,the,operation,as,per,catalogued,values,throws,camel,mongo,db,exception;public,void,set,operation,string,operation,throws,camel,mongo,db,exception,try,this,operation,value,of,operation,catch,illegal,argument,exception,e,throw,new,camel,mongo,db,exception,operation,not,supported,e
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1482051156;Enable persistent tail tracking, which is a mechanism to keep track of the last consumed message across system restarts._The next time the system is up, the endpoint will recover the cursor from the point where it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_		this.persistentTailTracking = persistentTailTracking__	};enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1482051156;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1482479312;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1485941651;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1516950103;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1536605520;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1537290824;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1540108160;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1540108163;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1547240981;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1547480087;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1548167442;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setPersistentTailTracking(boolean persistentTailTracking);1548404832;Enable persistent tail tracking, which is a mechanism to keep track of_the last consumed message across system restarts. The next time the_system is up, the endpoint will recover the cursor from the point where_it last stopped slurping records.__@param persistentTailTracking true or false;public void setPersistentTailTracking(boolean persistentTailTracking) {_        this.persistentTailTracking = persistentTailTracking__    };enable,persistent,tail,tracking,which,is,a,mechanism,to,keep,track,of,the,last,consumed,message,across,system,restarts,the,next,time,the,system,is,up,the,endpoint,will,recover,the,cursor,from,the,point,where,it,last,stopped,slurping,records,param,persistent,tail,tracking,true,or,false;public,void,set,persistent,tail,tracking,boolean,persistent,tail,tracking,this,persistent,tail,tracking,persistent,tail,tracking
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1482051156;In write operations, it determines whether instead of returning {@link WriteResult} as the body of the OUT_message, we transfer the IN message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_		this.writeResultAsHeader = writeResultAsHeader__	};in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1482051156;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1482479312;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1485941651;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1516950103;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1536605520;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1537290824;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1540108160;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1540108163;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1547240981;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1547480087;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1548167442;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setWriteResultAsHeader(boolean writeResultAsHeader);1548404832;In write operations, it determines whether instead of returning_{@link WriteResult} as the body of the OUT message, we transfer the IN_message to the OUT and attach the WriteResult as a header.__@param writeResultAsHeader flag to indicate if this option is enabled;public void setWriteResultAsHeader(boolean writeResultAsHeader) {_        this.writeResultAsHeader = writeResultAsHeader__    };in,write,operations,it,determines,whether,instead,of,returning,link,write,result,as,the,body,of,the,out,message,we,transfer,the,in,message,to,the,out,and,attach,the,write,result,as,a,header,param,write,result,as,header,flag,to,indicate,if,this,option,is,enabled;public,void,set,write,result,as,header,boolean,write,result,as,header,this,write,result,as,header,write,result,as,header
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1482051156;Convert the output of the producer to the selected type : "DocumentList", "Document" or "MongoIterable"._DocumentList or Document applies to findAll._MongoIterable applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_		this.outputType = outputType__	};convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,document,applies,to,find,all,mongo,iterable,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1482051156;Convert the output of the producer to the selected type : "DocumentList",_"Document" or "MongoIterable". DocumentList or Document applies to_findAll. MongoIterable applies to all other operations.__@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,document,applies,to,find,all,mongo,iterable,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1482479312;Convert the output of the producer to the selected type : "DocumentList",_"Document" or "MongoIterable". DocumentList or Document applies to_findAll. MongoIterable applies to all other operations.__@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,document,applies,to,find,all,mongo,iterable,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1485941651;Convert the output of the producer to the selected type : "DocumentList",_"Document" or "MongoIterable". DocumentList or Document applies to_findAll. MongoIterable applies to all other operations.__@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,document,applies,to,find,all,mongo,iterable,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1516950103;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1536605520;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1537290824;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1540108160;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1540108163;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1547240981;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1547480087;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1548167442;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void setOutputType(MongoDbOutputType outputType);1548404832;Convert the output of the producer to the selected type : DocumentList Document or MongoIterable._DocumentList or MongoIterable applies to findAll and aggregate. Document applies to all other operations._@param outputType;public void setOutputType(MongoDbOutputType outputType) {_        this.outputType = outputType__    };convert,the,output,of,the,producer,to,the,selected,type,document,list,document,or,mongo,iterable,document,list,or,mongo,iterable,applies,to,find,all,and,aggregate,document,applies,to,all,other,operations,param,output,type;public,void,set,output,type,mongo,db,output,type,output,type,this,output,type,output,type
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1482051156;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_		if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_			for (Bson index : dynamicIndex) {_				LOG.debug("create Document Index {}", index)__				aCollection.createIndex(index)__			}_		}_	};add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1482051156;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                LOG.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1482479312;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                LOG.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1485941651;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                LOG.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1516950103;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                LOG.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1536605520;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                LOG.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1537290824;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                LOG.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1540108160;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                log.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1540108163;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                log.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1547240981;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                log.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1547480087;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                log.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1548167442;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                log.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex);1548404832;Add Index__@param aCollection;public void ensureIndex(MongoCollection<Document> aCollection, List<Bson> dynamicIndex) {_        if (dynamicIndex != null && !dynamicIndex.isEmpty()) {_            for (Bson index : dynamicIndex) {_                log.debug("create Document Index {}", index)__                aCollection.createIndex(index)__            }_        }_    };add,index,param,a,collection;public,void,ensure,index,mongo,collection,document,a,collection,list,bson,dynamic,index,if,dynamic,index,null,dynamic,index,is,empty,for,bson,index,dynamic,index,log,debug,create,document,index,index,a,collection,create,index,index
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1482051156;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_		this.mongoConnection = mongoConnection__	};sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1482051156;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1482479312;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1485941651;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1516950103;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1536605520;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1537290824;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1540108160;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1540108163;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1547240981;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1547480087;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1548167442;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setMongoConnection(MongoClient mongoConnection);1548404832;Sets the Mongo instance that represents the backing connection__@param mongoConnection the connection to the database;public void setMongoConnection(MongoClient mongoConnection) {_        this.mongoConnection = mongoConnection__    };sets,the,mongo,instance,that,represents,the,backing,connection,param,mongo,connection,the,connection,to,the,database;public,void,set,mongo,connection,mongo,client,mongo,connection,this,mongo,connection,mongo,connection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1482051156;Collection where tail tracking information will be persisted. If not specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION}_will be used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_		this.tailTrackCollection = tailTrackCollection__	};collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1482051156;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1482479312;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1485941651;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1516950103;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1536605520;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1537290824;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1540108160;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1540108163;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1547240981;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1547480087;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1548167442;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
MongoDbEndpoint -> public void setTailTrackCollection(String tailTrackCollection);1548404832;Collection where tail tracking information will be persisted. If not_specified, {@link MongoDbTailTrackingConfig#DEFAULT_COLLECTION} will be_used by default.__@param tailTrackCollection collection name;public void setTailTrackCollection(String tailTrackCollection) {_        this.tailTrackCollection = tailTrackCollection__    };collection,where,tail,tracking,information,will,be,persisted,if,not,specified,link,mongo,db,tail,tracking,config,will,be,used,by,default,param,tail,track,collection,collection,name;public,void,set,tail,track,collection,string,tail,track,collection,this,tail,track,collection,tail,track,collection
