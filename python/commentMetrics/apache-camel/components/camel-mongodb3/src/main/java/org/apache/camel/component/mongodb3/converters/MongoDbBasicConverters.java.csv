commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;@Converter public static Document fromMapToDocument(Map<String, Object> map) {     return new Document(map). }
false;public,static;1;4;;@Converter public static Map<String, Object> fromDocumentToMap(Document document) {     return document. }
false;public,static;1;4;;@Converter public static Document fromStringToDocument(String s) {     return Document.parse(s). }
false;public,static;2;4;;@Converter public static Document fromFileToDocument(File f, Exchange exchange) throws Exception {     return fromInputStreamToDocument(new FileInputStream(f), exchange). }
false;public,static;2;20;;@Converter public static Document fromInputStreamToDocument(InputStream is, Exchange exchange) throws Exception {     Document answer = null.     try {         byte[] input = IOConverter.toBytes(is).         if (isBson(input)) {             JsonReader reader = new JsonReader(new String(input)).             DocumentCodec documentReader = new DocumentCodec().             answer = documentReader.decode(reader, DecoderContext.builder().build()).         } else {             answer = Document.parse(IOConverter.toString(input, exchange)).         }     } finally {         // we need to make sure to close the input stream         IOHelper.close(is, "InputStream", LOG).     }     return answer. }
true;private,static;1;11;/**  * If the input starts with any number of whitespace characters and then a  * '{' character, we assume it is JSON rather than BSON. There are probably  * no useful BSON blobs that fit this pattern  */ ;/**  * If the input starts with any number of whitespace characters and then a  * '{' character, we assume it is JSON rather than BSON. There are probably  * no useful BSON blobs that fit this pattern  */ private static boolean isBson(byte[] input) {     int i = 0.     while (i < input.length) {         if (input[i] == '{') {             return false.         } else if (!Character.isWhitespace(input[i])) {             return true.         }     }     return true. }
false;public,static;1;17;;@Converter public static List<Bson> fromStringToList(String value) {     final CodecRegistry codecRegistry = CodecRegistries.fromProviders(Arrays.asList(new ValueCodecProvider(), new BsonValueCodecProvider(), new DocumentCodecProvider())).     JsonReader reader = new JsonReader(value).     BsonArrayCodec arrayReader = new BsonArrayCodec(codecRegistry).     BsonArray docArray = arrayReader.decode(reader, DecoderContext.builder().build()).     List<Bson> answer = new ArrayList<>(docArray.size()).     for (BsonValue doc : docArray) {         answer.add(doc.asDocument()).     }     return answer. }
