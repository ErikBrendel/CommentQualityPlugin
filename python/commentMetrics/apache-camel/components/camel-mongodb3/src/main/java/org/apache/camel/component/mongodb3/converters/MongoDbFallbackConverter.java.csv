commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;47;;@FallbackConverter @SuppressWarnings("unchecked") public static Object convertTo(Class<?> type, Exchange exchange, Object value, TypeConverterRegistry registry) throws InvalidPayloadException {     // if the source is a string and we attempt to convert to one of the known mongodb json classes then try that     if (String.class == value.getClass()) {         if (type == DBObject.class) {             Object out = JSON.parse(value.toString()).             if (out instanceof DBObject) {                 return out.             } else {                 throw new InvalidPayloadException(exchange, type).             }         } else if (type == BasicDBList.class) {             Object out = JSON.parse(value.toString()).             if (out instanceof BasicDBList) {                 return out.             } else {                 throw new InvalidPayloadException(exchange, type).             }         } else if (type == BasicDBObject.class) {             Object out = JSON.parse(value.toString()).             if (out instanceof BasicDBObject) {                 return out.             } else {                 throw new InvalidPayloadException(exchange, type).             }         }     }     // okay then fallback and use jackson     if (type == DBObject.class) {         Map<?, ?> m = OBJECT_MAPPER.convertValue(value, Map.class).         // workaround problem with mongodb for BigDecimal should be Double         mapMongoDBBigDecimalIssue(m).         return new BasicDBObject(m).     } else if (type == Document.class) {         Map<String, Object> m = OBJECT_MAPPER.convertValue(value, Map.class).         // workaround problem with mongodb for BigDecimal should be Double         mapMongoDBBigDecimalIssue(m).         return new Document(m).     }     return null. }
false;private,static;1;11;;@SuppressWarnings("unchecked") private static void mapMongoDBBigDecimalIssue(Map<?, ?> m) {     // workaround problem with mongodb for BigDecimal should be Double     for (Map.Entry entry : m.entrySet()) {         Object v = entry.getValue().         if (v instanceof BigDecimal) {             v = Double.valueOf(v.toString()).             entry.setValue(v).         }     } }
