commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void initialize() throws Exception {     if (!config.persistent) {         return.     }     dbCol = connection.getDatabase(config.db).getCollection(config.collection, Document.class).     Document filter = new Document("persistentId", config.persistentId).     trackingObj = dbCol.find(filter).first().     if (trackingObj == null) {         dbCol.insertOne(filter).         trackingObj = dbCol.find(filter).first().     }     // keep only the _id, the rest is useless and causes more overhead     // during update     trackingObj = new Document(MONGO_ID, trackingObj.get(MONGO_ID)). }
false;public,synchronized;0;14;;public synchronized void persistToStore() {     if (!config.persistent || lastVal == null) {         return.     }     if (LOG.isDebugEnabled()) {         LOG.debug("Persisting lastVal={} to store, collection: {}", lastVal, config.collection).     }     Bson updateObj = Updates.set(config.field, lastVal).     FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().returnDocument(ReturnDocument.AFTER).     trackingObj = dbCol.findOneAndUpdate(trackingObj, updateObj, options). }
false;public,synchronized;0;13;;public synchronized Object recoverFromStore() {     if (!config.persistent) {         return null.     }     lastVal = dbCol.find(trackingObj).first().get(config.field).     if (LOG.isDebugEnabled()) {         LOG.debug("Recovered lastVal={} from store, collection: {}", lastVal, config.collection).     }     return lastVal. }
false;public;1;7;;public void setLastVal(Document dbObj) {     if (config.increasingField == null) {         return.     }     lastVal = dbObj.get(config.increasingField). }
false;public;0;3;;public String getIncreasingFieldName() {     return config.increasingField. }
