commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void initRouteExample() {     RecordsUtil.createXMLFile(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myHandler", new CountingHandler()).     return jndi. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     assertEquals(11, exchange.getIn().getBody(CountingHandler.class).getNumber()). }
false;public;0;13;;@Override public void configure() throws Exception {     from("file:target/in").routeId("stax-parser").to("stax:#myHandler").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             assertEquals(11, exchange.getIn().getBody(CountingHandler.class).getNumber()).         }     }).to("mock:records"). }
false;public;0;18;;@Override public RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/in").routeId("stax-parser").to("stax:#myHandler").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     assertEquals(11, exchange.getIn().getBody(CountingHandler.class).getNumber()).                 }             }).to("mock:records").         }     }. }
false;public;0;7;;@Test public void testStax() throws Exception {     recordsEndpoint.expectedMessageCount(1).     recordsEndpoint.message(0).body().isInstanceOf(CountingHandler.class).     recordsEndpoint.assertIsSatisfied(). }
