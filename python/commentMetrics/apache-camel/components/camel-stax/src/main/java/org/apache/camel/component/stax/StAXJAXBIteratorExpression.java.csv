commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;12;;private static JAXBContext jaxbContext(Class<?> handled) throws JAXBException {     if (JAX_CONTEXTS.containsKey(handled)) {         return JAX_CONTEXTS.get(handled).     }     JAXBContext context.     synchronized (JAX_CONTEXTS) {         context = JAXBContext.newInstance(handled).         JAX_CONTEXTS.put(handled, context).     }     return context. }
false;public;1;33;;@Override @SuppressWarnings("unchecked") public Object evaluate(Exchange exchange) {     try {         XMLEventReader reader.         if (isNamespaceAware) {             reader = exchange.getIn().getMandatoryBody(XMLEventReader.class).         } else {             InputStream inputStream = exchange.getIn().getMandatoryBody(InputStream.class).             XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance().             xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false).             reader = xmlInputFactory.createXMLEventReader(inputStream).         }         Class<T> clazz = handled.         if (clazz == null && handledName != null) {             clazz = (Class<T>) exchange.getContext().getClassResolver().resolveMandatoryClass(handledName).         }         return createIterator(reader, clazz).     } catch (InvalidPayloadException e) {         exchange.setException(e).         return null.     } catch (JAXBException e) {         exchange.setException(e).         return null.     } catch (ClassNotFoundException e) {         exchange.setException(e).         return null.     } catch (XMLStreamException e) {         exchange.setException(e).         return null.     } }
false;private;2;3;;private Iterator<T> createIterator(XMLEventReader reader, Class<T> clazz) throws JAXBException {     return new StAXJAXBIterator<>(clazz, reader). }
false;public;0;7;;@Override public boolean hasNext() {     if (element == null) {         element = getNextElement().     }     return element != null. }
false;public;0;10;;@Override public T next() {     if (element == null) {         element = getNextElement().     }     T answer = element.     element = null.     return answer. }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
false;;0;26;;T getNextElement() {     XMLEvent xmlEvent.     boolean found = false.     while (!found && reader.hasNext()) {         try {             xmlEvent = reader.peek().             if (xmlEvent != null && xmlEvent.isStartElement() && name.equals(xmlEvent.asStartElement().getName().getLocalPart())) {                 found = true.             } else {                 reader.nextEvent().             }         } catch (XMLStreamException e) {             throw new RuntimeCamelException(e).         }     }     if (!found) {         return null.     }     try {         return unmarshaller.unmarshal(reader, clazz).getValue().     } catch (JAXBException e) {         throw new RuntimeCamelException(e).     } }
false;public;0;8;;@Override public void close() throws IOException {     try {         reader.close().     } catch (XMLStreamException e) {         throw new IOException(e).     } }
