commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;@Converter public static Map<String, Object> toMap(DataSet dataSet) {     Map<String, Object> map = new HashMap<>().     putValues(map, dataSet).     return map. }
false;public,static;1;13;;@Converter public static List<Map<String, Object>> toList(DataSet dataSet) {     List<Map<String, Object>> answer = new ArrayList<>().     dataSet.goTop().     while (dataSet.next()) {         Map<String, Object> map = new HashMap<>().         putValues(map, dataSet).         answer.add(map).     }     return answer. }
false;public,static;1;21;;@Converter public static Document toDocument(DataSet dataSet) throws ParserConfigurationException {     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance().     dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     Document doc = dbf.newDocumentBuilder().newDocument().     if (dataSet.getIndex() == -1) {         Element list = doc.createElement("Dataset").         dataSet.goTop().         while (dataSet.next()) {             list.appendChild(createDatasetRecord(dataSet, doc)).         }         doc.appendChild(list).     } else {         doc.appendChild(createDatasetRecord(dataSet, doc)).     }     return doc. }
true;private,static;2;8;/**  * Puts the values of the dataset into the map  */ ;/**  * Puts the values of the dataset into the map  */ private static void putValues(Map<String, Object> map, DataSet dataSet) {     String[] columns = getColumns(dataSet).     for (String column : columns) {         String value = dataSet.getString(column).         map.put(column, value).     } }
false;private,static;2;24;;private static Element createDatasetRecord(DataSet dataSet, Document doc) {     Element record.     if (dataSet.isRecordID(FlatpackComponent.HEADER_ID)) {         record = doc.createElement("DatasetHeader").     } else if (dataSet.isRecordID(FlatpackComponent.TRAILER_ID)) {         record = doc.createElement("DatasetTrailer").     } else {         record = doc.createElement("DatasetRecord").     }     String[] columns = getColumns(dataSet).     for (String column : columns) {         String value = dataSet.getString(column).         Element columnElement = doc.createElement("Column").         columnElement.setAttribute("name", column).         columnElement.setTextContent(value).         record.appendChild(columnElement).     }     return record. }
false;private,static;1;10;;private static String[] getColumns(DataSet dataSet) {     // the columns can vary depending on header, body or trailer     if (dataSet.isRecordID(FlatpackComponent.HEADER_ID)) {         return dataSet.getColumns(FlatpackComponent.HEADER_ID).     } else if (dataSet.isRecordID(FlatpackComponent.TRAILER_ID)) {         return dataSet.getColumns(FlatpackComponent.TRAILER_ID).     } else {         return dataSet.getColumns().     } }
