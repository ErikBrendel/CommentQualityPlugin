commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public Producer createProducer() throws Exception {     switch(timelineType) {         case USER:             return new UserProducer(this).         default:             throw new IllegalArgumentException("Cannot create any producer with uri " + getEndpointUri() + ". A producer type was not provided (or an incorrect pairing was used).").     } }
false;public;1;30;;@Override public Consumer createConsumer(Processor processor) throws Exception {     AbstractTwitterConsumerHandler handler = null.     switch(timelineType) {         case HOME:             handler = new HomeConsumerHandler(this).             break.         case MENTIONS:             handler = new MentionsConsumerHandler(this).             break.         case RETWEETSOFME:             handler = new RetweetsConsumerHandler(this).             break.         case USER:             if (user == null || user.trim().isEmpty()) {                 throw new IllegalArgumentException("Fetch type set to USER TIMELINE but no user was set.").             } else {                 handler = new UserConsumerHandler(this, user).                 break.             }         default:             break.     }     if (handler != null) {         return TwitterHelper.createConsumer(processor, this, handler).     }     throw new IllegalArgumentException("Cannot create any consumer with uri " + getEndpointUri() + ". A consumer type was not provided (or an incorrect pairing was used)."). }
false;public;0;3;;public TimelineType getTimelineType() {     return timelineType. }
