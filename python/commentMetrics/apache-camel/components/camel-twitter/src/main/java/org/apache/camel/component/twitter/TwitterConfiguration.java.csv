commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * Ensures required fields are available.  */ ;/**  * Ensures required fields are available.  */ public void checkComplete() {     if (twitter == null && twitterStream == null && (ObjectHelper.isEmpty(consumerKey) || ObjectHelper.isEmpty(consumerSecret) || ObjectHelper.isEmpty(accessToken) || ObjectHelper.isEmpty(accessTokenSecret))) {         throw new IllegalArgumentException("twitter or twitterStream or all of consumerKey, consumerSecret, accessToken, and accessTokenSecret must be set!").     } }
true;public;0;23;/**  * Builds a Twitter4J Configuration using the OAuth params.  *  * @return Configuration  */ ;/**  * Builds a Twitter4J Configuration using the OAuth params.  *  * @return Configuration  */ public Configuration getConfiguration() {     checkComplete().     ConfigurationBuilder confBuilder = new ConfigurationBuilder().     confBuilder.setOAuthConsumerKey(consumerKey).     confBuilder.setOAuthConsumerSecret(consumerSecret).     confBuilder.setOAuthAccessToken(accessToken).     confBuilder.setOAuthAccessTokenSecret(accessTokenSecret).     confBuilder.setTweetModeExtended(isExtendedMode()).     if (getHttpProxyHost() != null) {         confBuilder.setHttpProxyHost(getHttpProxyHost()).     }     if (getHttpProxyUser() != null) {         confBuilder.setHttpProxyUser(getHttpProxyUser()).     }     if (getHttpProxyPassword() != null) {         confBuilder.setHttpProxyPassword(getHttpProxyPassword()).     }     if (httpProxyPort != null) {         confBuilder.setHttpProxyPort(httpProxyPort).     }     return confBuilder.build(). }
false;public;0;6;;public Twitter getTwitter() {     if (twitter == null) {         twitter = new TwitterFactory(getConfiguration()).getInstance().     }     return twitter. }
false;public;1;3;;public void setTwitter(Twitter twitter) {     this.twitter = twitter. }
false;public;0;3;;public TwitterStream getTwitterStream() {     return twitterStream. }
true;public;1;3;/**  * To use a custom instance of TwitterStream  */ ;/**  * To use a custom instance of TwitterStream  */ public void setTwitterStream(TwitterStream twitterStream) {     this.twitterStream = twitterStream. }
false;public;0;6;;public TwitterStream createTwitterStream() {     if (twitterStream == null) {         twitterStream = new TwitterStreamFactory(getConfiguration()).getInstance().     }     return twitterStream. }
false;public;0;3;;public String getConsumerKey() {     return consumerKey. }
true;public;1;3;/**  * The consumer key. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The consumer key. Can also be configured on the TwitterComponent level instead.  */ public void setConsumerKey(String consumerKey) {     this.consumerKey = consumerKey. }
false;public;0;3;;public String getConsumerSecret() {     return consumerSecret. }
true;public;1;3;/**  * The consumer secret. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The consumer secret. Can also be configured on the TwitterComponent level instead.  */ public void setConsumerSecret(String consumerSecret) {     this.consumerSecret = consumerSecret. }
true;public;0;3;/**  * The access token. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The access token. Can also be configured on the TwitterComponent level instead.  */ public String getAccessToken() {     return accessToken. }
false;public;1;3;;public void setAccessToken(String accessToken) {     this.accessToken = accessToken. }
true;public;0;3;/**  * The access secret. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The access secret. Can also be configured on the TwitterComponent level instead.  */ public String getAccessTokenSecret() {     return accessTokenSecret. }
false;public;1;3;;public void setAccessTokenSecret(String accessTokenSecret) {     this.accessTokenSecret = accessTokenSecret. }
false;public;0;3;;public EndpointType getType() {     return type. }
true;public;1;3;/**  * Endpoint type to use. Only streaming supports event type.  */ ;/**  * Endpoint type to use. Only streaming supports event type.  */ public void setType(EndpointType type) {     this.type = type. }
false;public;0;3;;public String getLocations() {     return locations. }
true;public;1;3;/**  * Bounding boxes, created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as lat,lon. And multiple paris can be separated by semi colon.  */ ;/**  * Bounding boxes, created by pairs of lat/lons. Can be used for streaming/filter. A pair is defined as lat,lon. And multiple paris can be separated by semi colon.  */ public void setLocations(String locations) {     this.locations = locations. }
false;public;0;3;;public String getUserIds() {     return userIds. }
true;public;1;3;/**  * To filter by user ids for streaming/filter. Multiple values can be separated by comma.  */ ;/**  * To filter by user ids for streaming/filter. Multiple values can be separated by comma.  */ public void setUserIds(String userIds) {     this.userIds = userIds. }
false;public;0;3;;public boolean isFilterOld() {     return filterOld. }
true;public;1;3;/**  * Filter out old tweets, that has previously been polled.  * This state is stored in memory only, and based on last tweet id.  */ ;/**  * Filter out old tweets, that has previously been polled.  * This state is stored in memory only, and based on last tweet id.  */ public void setFilterOld(boolean filterOld) {     this.filterOld = filterOld. }
false;public;0;3;;public long getSinceId() {     return sinceId. }
true;public;1;3;/**  * The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.  */ ;/**  * The last tweet id which will be used for pulling the tweets. It is useful when the camel route is restarted after a long running.  */ public void setSinceId(long sinceId) {     this.sinceId = sinceId. }
false;public;0;3;;public String getLang() {     return lang. }
true;public;1;3;/**  * The lang string ISO_639-1 which will be used for searching  */ ;/**  * The lang string ISO_639-1 which will be used for searching  */ public void setLang(String lang) {     this.lang = lang. }
false;public;0;3;;public Integer getCount() {     return count. }
true;public;1;3;/**  * Limiting number of results per page.  */ ;/**  * Limiting number of results per page.  */ public void setCount(Integer count) {     this.count = count. }
false;public;0;3;;public Integer getNumberOfPages() {     return numberOfPages. }
true;public;1;3;/**  * The number of pages result which you want camel-twitter to consume.  */ ;/**  * The number of pages result which you want camel-twitter to consume.  */ public void setNumberOfPages(Integer numberOfPages) {     this.numberOfPages = numberOfPages. }
false;public;0;3;;public boolean isSortById() {     return sortById. }
true;public;1;3;/**  * Sorts by id, so the oldest are first, and newest last.  */ ;/**  * Sorts by id, so the oldest are first, and newest last.  */ public void setSortById(boolean sortById) {     this.sortById = sortById. }
true;public;1;3;/**  * The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The http proxy host which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ public void setHttpProxyHost(String httpProxyHost) {     this.httpProxyHost = httpProxyHost. }
false;public;0;3;;public String getHttpProxyHost() {     return httpProxyHost. }
true;public;1;3;/**  * The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The http proxy user which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ public void setHttpProxyUser(String httpProxyUser) {     this.httpProxyUser = httpProxyUser. }
false;public;0;3;;public String getHttpProxyUser() {     return httpProxyUser. }
true;public;1;3;/**  * The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The http proxy password which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ public void setHttpProxyPassword(String httpProxyPassword) {     this.httpProxyPassword = httpProxyPassword. }
false;public;0;3;;public String getHttpProxyPassword() {     return httpProxyPassword. }
true;public;1;3;/**  * The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ ;/**  * The http proxy port which can be used for the camel-twitter. Can also be configured on the TwitterComponent level instead.  */ public void setHttpProxyPort(Integer httpProxyPort) {     this.httpProxyPort = httpProxyPort. }
false;public;0;3;;public Integer getHttpProxyPort() {     return httpProxyPort. }
false;public;0;3;;public Double getLongitude() {     return longitude. }
true;public;1;3;/**  * Used by the non-stream geography search to search by longitude.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ ;/**  * Used by the non-stream geography search to search by longitude.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ public void setLongitude(Double longitude) {     this.longitude = longitude. }
false;public;0;3;;public Double getLatitude() {     return latitude. }
true;public;1;3;/**  * Used by the non-stream geography search to search by latitude.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ ;/**  * Used by the non-stream geography search to search by latitude.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ public void setLatitude(Double latitude) {     this.latitude = latitude. }
false;public;0;3;;public Double getRadius() {     return radius. }
true;public;1;3;/**  * Used by the non-stream geography search to search by radius.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ ;/**  * Used by the non-stream geography search to search by radius.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ public void setRadius(Double radius) {     this.radius = radius. }
false;public;0;3;;public String getDistanceMetric() {     return distanceMetric. }
true;public;1;3;/**  * Used by the non-stream geography search, to search by radius using the configured metrics.  * <p/>  * The unit can either be mi for miles, or km for kilometers.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ ;/**  * Used by the non-stream geography search, to search by radius using the configured metrics.  * <p/>  * The unit can either be mi for miles, or km for kilometers.  * <p/>  * You need to configure all the following options: longitude, latitude, radius, and distanceMetric.  */ public void setDistanceMetric(String distanceMetric) {     this.distanceMetric = distanceMetric. }
true;public;1;3;/**  * Used for enabling full text from twitter (eg receive tweets that contains more than 140 characters).  */ ;/**  * Used for enabling full text from twitter (eg receive tweets that contains more than 140 characters).  */ public void setExtendedMode(Boolean extendedMode) {     this.extendedMode = extendedMode. }
false;public;0;3;;public boolean isExtendedMode() {     return extendedMode. }
