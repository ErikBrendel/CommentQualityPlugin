commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void start() {     getTwitterStream().user(). }
false;public;2;4;;@Override public void onDeletionNotice(long directMessageId, long userId) { // noop }
false;public;1;4;;@Override public void onFriendList(long[] friendIds) { // noop }
false;public;3;8;;@Override public void onFavorite(User source, User target, Status favoritedStatus) {     Exchange exchange = TwitterEventType.FAVORITE.createExchange(endpoint, favoritedStatus).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, target, "target").     onEvent(exchange). }
false;public;3;8;;@Override public void onUnfavorite(User source, User target, Status unfavoritedStatus) {     Exchange exchange = TwitterEventType.UNFAVORITE.createExchange(endpoint, unfavoritedStatus).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, target, "target").     onEvent(exchange). }
false;public;2;8;;@Override public void onFollow(User source, User followedUser) {     Exchange exchange = TwitterEventType.FOLLOW.createExchange(endpoint).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, followedUser, "followed").     onEvent(exchange). }
false;public;2;8;;@Override public void onUnfollow(User source, User unfollowedUser) {     Exchange exchange = TwitterEventType.UNFOLLOW.createExchange(endpoint).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, unfollowedUser, "unfollowed").     onEvent(exchange). }
false;public;1;4;;@Override public void onDirectMessage(DirectMessage directMessage) {     onEvent(TwitterEventType.DIRECT_MESSAGE.createExchange(endpoint, directMessage)). }
false;public;3;8;;@Override public void onUserListMemberAddition(User addedMember, User listOwner, UserList list) {     Exchange exchange = TwitterEventType.USERLIST_MEMBER_ADDITION.createExchange(endpoint, list).     TwitterHelper.setUserHeader(exchange, 1, addedMember, "addedMember").     TwitterHelper.setUserHeader(exchange, 2, listOwner, "listOwner").     onEvent(exchange). }
false;public;3;8;;@Override public void onUserListMemberDeletion(User deletedMember, User listOwner, UserList list) {     Exchange exchange = TwitterEventType.USERLIST_MEMBER_DELETION.createExchange(endpoint, list).     TwitterHelper.setUserHeader(exchange, 1, deletedMember, "deletedMember").     TwitterHelper.setUserHeader(exchange, 2, listOwner, "listOwner").     onEvent(exchange). }
false;public;3;8;;@Override public void onUserListSubscription(User subscriber, User listOwner, UserList list) {     Exchange exchange = TwitterEventType.USERLIST_SUBSCRIPTION.createExchange(endpoint, list).     TwitterHelper.setUserHeader(exchange, 1, subscriber, "subscriber").     TwitterHelper.setUserHeader(exchange, 2, listOwner, "listOwner").     onEvent(exchange). }
false;public;3;8;;@Override public void onUserListUnsubscription(User subscriber, User listOwner, UserList list) {     Exchange exchange = TwitterEventType.USERLIST_UNSUBSCRIPTION.createExchange(endpoint, list).     TwitterHelper.setUserHeader(exchange, 1, subscriber, "subscriber").     TwitterHelper.setUserHeader(exchange, 2, listOwner, "listOwner").     onEvent(exchange). }
false;public;2;7;;@Override public void onUserListCreation(User user, UserList userList) {     Exchange exchange = TwitterEventType.USERLIST_CREATION.createExchange(endpoint, userList).     TwitterHelper.setUserHeader(exchange, user).     onEvent(exchange). }
false;public;2;7;;@Override public void onUserListUpdate(User user, UserList userList) {     Exchange exchange = TwitterEventType.USERLIST_UPDATE.createExchange(endpoint, userList).     TwitterHelper.setUserHeader(exchange, user).     onEvent(exchange). }
false;public;2;7;;@Override public void onUserListDeletion(User user, UserList userList) {     Exchange exchange = TwitterEventType.USERLIST_DELETETION.createExchange(endpoint, userList).     TwitterHelper.setUserHeader(exchange, user).     onEvent(exchange). }
false;public;1;7;;@Override public void onUserProfileUpdate(User user) {     Exchange exchange = TwitterEventType.USER_PROFILE_UPDATE.createExchange(endpoint).     TwitterHelper.setUserHeader(exchange, user).     onEvent(exchange). }
false;public;1;7;;@Override public void onUserSuspension(long suspendedUser) {     Exchange exchange = TwitterEventType.USER_SUSPENSION.createExchange(endpoint).     exchange.getIn().setHeader(TwitterConstants.TWITTER_USER, suspendedUser).     onEvent(exchange). }
false;public;1;7;;@Override public void onUserDeletion(long deletedUser) {     Exchange exchange = TwitterEventType.USER_DELETION.createExchange(endpoint).     exchange.getIn().setHeader(TwitterConstants.TWITTER_USER, deletedUser).     onEvent(exchange). }
false;public;2;8;;@Override public void onBlock(User source, User blockedUser) {     Exchange exchange = TwitterEventType.BLOCK.createExchange(endpoint).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, blockedUser, "blocked").     onEvent(exchange). }
false;public;2;8;;@Override public void onUnblock(User source, User unblockedUser) {     Exchange exchange = TwitterEventType.UNBLOCK.createExchange(endpoint).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, unblockedUser, "unblocked").     onEvent(exchange). }
false;public;1;4;;@Override public void onStallWarning(StallWarning stallWarning) { // noop }
false;public;3;8;;@Override public void onRetweetedRetweet(User source, User target, Status retweetedStatus) {     Exchange exchange = TwitterEventType.RETWEETED_RETWEET.createExchange(endpoint, retweetedStatus).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, target, "target").     onEvent(exchange). }
false;public;3;8;;@Override public void onFavoritedRetweet(User source, User target, Status favoritedRetweeet) {     Exchange exchange = TwitterEventType.FAVORITED_RETWEET.createExchange(endpoint, favoritedRetweeet).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, target, "target").     onEvent(exchange). }
false;public;3;8;;@Override public void onQuotedTweet(User source, User target, Status quotingTweet) {     Exchange exchange = TwitterEventType.QUOTED_TWEET.createExchange(endpoint, quotingTweet).     TwitterHelper.setUserHeader(exchange, 1, source, "source").     TwitterHelper.setUserHeader(exchange, 2, target, "target").     onEvent(exchange). }
