commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static void setUserHeader(Exchange exchange, User user) {     setUserHeader(exchange.getIn(), user). }
false;public,static;2;3;;public static void setUserHeader(Message message, User user) {     message.setHeader(TwitterConstants.TWITTER_USER, user). }
false;public,static;4;3;;public static void setUserHeader(Exchange exchange, int index, User user, String role) {     setUserHeader(exchange.getIn(), index, user, role). }
false;public,static;4;4;;public static void setUserHeader(Message message, int index, User user, String role) {     message.setHeader(TwitterConstants.TWITTER_USER + index, user).     message.setHeader(TwitterConstants.TWITTER_USER_ROLE + index, role). }
false;public,static;3;15;;public static Consumer createConsumer(Processor processor, AbstractTwitterEndpoint endpoint, AbstractTwitterConsumerHandler handler) throws Exception {     Consumer answer = new DefaultTwitterConsumer(endpoint, processor, handler).     switch(endpoint.getEndpointType()) {         case POLLING:             handler.setLastId(endpoint.getProperties().getSinceId()).             endpoint.configureConsumer(answer).             break.         case DIRECT:             endpoint.configureConsumer(answer).             break.         default:             break.     }     return answer. }
false;public,static;3;9;;public static <T extends Enum<T>> T enumFromString(T[] values, String uri, T defaultValue) {     for (int i = values.length - 1. i >= 0. i--) {         if (values[i].name().equalsIgnoreCase(uri)) {             return values[i].         }     }     return defaultValue. }
