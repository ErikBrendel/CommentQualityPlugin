commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AbstractTwitterEndpoint getEndpoint() {     return (AbstractTwitterEndpoint) super.getEndpoint(). }
false;protected;0;22;;@Override protected void doStart() throws Exception {     super.doStart().     switch(endpoint.getEndpointType()) {         case POLLING:             if (handler instanceof AbstractStreamingConsumerHandler) {                 ((AbstractStreamingConsumerHandler) handler).start().             }             break.         case EVENT:             if (handler instanceof AbstractStreamingConsumerHandler) {                 ((AbstractStreamingConsumerHandler) handler).setEventListener(this).                 ((AbstractStreamingConsumerHandler) handler).start().             }             break.         default:             List<Exchange> exchanges = handler.directConsume().             for (int i = 0. i < exchanges.size(). i++) {                 getProcessor().process(exchanges.get(i)).             }     } }
false;protected;0;20;;@Override protected void doStop() throws Exception {     switch(endpoint.getEndpointType()) {         case POLLING:             if (handler instanceof AbstractStreamingConsumerHandler) {                 ((AbstractStreamingConsumerHandler) handler).stop().             }             break.         case EVENT:             if (handler instanceof AbstractStreamingConsumerHandler) {                 ((AbstractStreamingConsumerHandler) handler).removeEventListener(this).                 ((AbstractStreamingConsumerHandler) handler).stop().             }             break.         default:             break.     }     super.doStop(). }
false;protected;0;11;;@Override protected int poll() throws Exception {     List<Exchange> exchanges = handler.pollConsume().     int index = 0.     for (. index < exchanges.size(). index++) {         getProcessor().process(exchanges.get(index)).     }     return index. }
false;public;1;16;;@Override public void onEvent(Exchange exchange) {     if (!isRunAllowed()) {         return.     }     try {         getProcessor().process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange on status update", exchange, exchange.getException()).     } }
