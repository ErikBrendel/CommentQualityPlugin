commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Called by polling consumers during each poll.  It needs to be separate  * from directConsume() since, as an example, streaming API polling allows  * tweets to build up between polls.  */ ;/**  * Called by polling consumers during each poll.  It needs to be separate  * from directConsume() since, as an example, streaming API polling allows  * tweets to build up between polls.  */ public abstract List<Exchange> pollConsume() throws TwitterException.
true;public,abstract;0;1;/**  * Called by direct consumers.  */ ;/**  * Called by direct consumers.  */ public abstract List<Exchange> directConsume() throws TwitterException.
true;protected;1;5;/**  * Can't assume that the end of the list will be the most recent ID.  * The Twitter API sometimes returns them slightly out of order.  */ ;/**  * Can't assume that the end of the list will be the most recent ID.  * The Twitter API sometimes returns them slightly out of order.  */ protected void setLastIdIfGreater(long newId) {     if (newId > lastId) {         lastId = newId.     } }
true;public;1;3;/**  * Support to update the Consumer's lastId when starting the consumer  */ ;/**  * Support to update the Consumer's lastId when starting the consumer  */ public void setLastId(long sinceId) {     lastId = sinceId. }
false;protected;0;3;;protected Twitter getTwitter() {     return endpoint.getProperties().getTwitter(). }
false;protected;0;3;;protected long getLastId() {     return lastId. }
false;protected;0;11;;protected Paging getLastIdPaging() {     Integer pages = endpoint.getProperties().getNumberOfPages().     Integer count = endpoint.getProperties().getCount().     if (pages != null && count != null) {         return new Paging(pages, count, lastId).     } else if (pages != null) {         return new Paging(pages, lastId).     } else {         return new Paging(lastId).     } }
