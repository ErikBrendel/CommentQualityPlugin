commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSearchTimelineWithStaticQuery() throws Exception {     template.sendBody(null).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied().     List<Exchange> tweets = mock.getExchanges().     for (Exchange e : tweets) {         log.info("Tweet: " + e.getIn().getBody(String.class)).     } }
false;public;0;12;;@Test public void testSearchTimelineWithDynamicQuery() throws Exception {     templateHeader.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied().     List<Exchange> tweets = mock.getExchanges().     for (Exchange e : tweets) {         log.info("Tweet: " + e.getIn().getBody(String.class)).     } }
false;public;0;15;;@Test public void testSearchTimelineWithDynamicQuerySinceId() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put(TwitterConstants.TWITTER_KEYWORDS, "java").     headers.put(TwitterConstants.TWITTER_SINCEID, new Long(258347905419730944L)).     templateHeader.sendBodyAndHeaders(null, headers).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied().     List<Exchange> tweets = mock.getExchanges().     for (Exchange e : tweets) {         log.info("Tweet: " + e.getIn().getBody(String.class)).     } }
false;public;0;11;;@Test public void testSearchTimelineWithDynamicQuerySinceIdAndMaxId() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put(TwitterConstants.TWITTER_KEYWORDS, "java").     headers.put(TwitterConstants.TWITTER_SINCEID, new Long(258347905419730944L)).     headers.put(TwitterConstants.TWITTER_MAXID, new Long(258348815243960320L)).     templateHeader.sendBodyAndHeaders(null, headers).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(0). }
false;public;0;20;;@Test public void testDoubleSearchKeepingOld() throws Exception {     templateDouble.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied().     List<Exchange> tweets = mock.getExchanges().     for (Exchange e : tweets) {         log.info("Tweet: " + e.getIn().getBody(String.class)).     }     // calls the same query again, expecting to receive the same amount of     // tweets, because we told this route to not filter old(consumed) tweets     int total = mock.getReceivedCounter().     templateDouble.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, "java").     // due race condition     assertTrue(mock.getReceivedCounter() >= total). }
false;public;0;16;;public void configure() {     from("direct:start").toF("twitter://search?%s&keywords=java", getUriTokens()).split().body().to("mock:result").     from("direct:header").toF("twitter://search?%s", getUriTokens()).split().body().to("mock:result").     from("direct:double").toF("twitter://search?filterOld=false&%s", getUriTokens()).split().body().to("mock:result"). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").toF("twitter://search?%s&keywords=java", getUriTokens()).split().body().to("mock:result").             from("direct:header").toF("twitter://search?%s", getUriTokens()).split().body().to("mock:result").             from("direct:double").toF("twitter://search?filterOld=false&%s", getUriTokens()).split().body().to("mock:result").         }     }. }
