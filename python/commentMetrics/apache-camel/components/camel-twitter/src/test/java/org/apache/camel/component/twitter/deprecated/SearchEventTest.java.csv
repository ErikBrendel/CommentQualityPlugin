commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSearchTimeline() throws Exception {     resultEndpoint.expectedMinimumMessageCount(1).     Status status = (Status) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { Status.class }, new TwitterHandler()).     listener.onStatus(status).     // "#cameltest tweet").     resultEndpoint.assertIsSatisfied(). }
false;public;0;4;;public void configure() {     from("twitter://streaming/filter?type=event&twitterStream=#twitterStream&keywords=#cameltest").transform(body().convertToString()).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("twitter://streaming/filter?type=event&twitterStream=#twitterStream&keywords=#cameltest").transform(body().convertToString()).to("mock:result").         }     }. }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     twitterStream = (TwitterStream) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { TwitterStream.class }, new TwitterHandler()).     JndiRegistry registry = super.createRegistry().     registry.bind("twitterStream", twitterStream).     return registry. }
false;public;3;15;;public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     // mock some methods     if ("addListener".equals(method.getName())) {         listener = (StatusListener) args[0].     } else if ("toString".equals(method.getName())) {         return this.toString().     } else if ("getText".equals(method.getName())) {         return "#cameltest tweet".     } else if ("getUser".equals(method.getName())) {         return Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { twitter4j.User.class }, new TwitterHandler()).     }     return null. }
