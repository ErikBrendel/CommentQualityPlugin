commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testPostStatusUpdateRequestResponse() throws Exception {     Date now = new Date().     String tweet = "UserProducerInOutTest: This is a tweet posted on " + now.toString().     LOG.info("Tweet: " + tweet).     ProducerTemplate producerTemplate = context.createProducerTemplate().     // send tweet to the twitter endpoint     producerTemplate.sendBodyAndHeader("direct:tweets", tweet, "customHeader", 12312).     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedBodyReceived().body(Status.class).     // Message headers should be preserved     resultEndpoint.expectedHeaderReceived("customHeader", 12312).     resultEndpoint.assertIsSatisfied().     List<Exchange> tweets = resultEndpoint.getExchanges().     assertNotNull(tweets).     assertThat(tweets.size(), is(1)).     Status receivedTweet = tweets.get(0).getIn().getBody(Status.class).     assertNotNull(receivedTweet).     // The identifier for the published tweet should be there     assertNotNull(receivedTweet.getId()). }
false;public;0;9;;public void configure() {     from("direct:tweets").inOut("twitter://timeline/user?" + getUriTokens()).to("mock:result"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:tweets").inOut("twitter://timeline/user?" + getUriTokens()).to("mock:result").         }     }. }
