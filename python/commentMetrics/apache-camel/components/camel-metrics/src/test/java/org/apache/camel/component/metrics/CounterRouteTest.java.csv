commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Override public void configure() throws Exception {     from("direct:in-1").to("metrics:counter:A?increment=5").to("mock:out").     from("direct:in-2").to("metrics:counter:A?decrement=9").to("mock:out").     from("direct:in-3").setHeader(HEADER_COUNTER_INCREMENT, constant(417L)).to("metrics:counter:A").to("mock:out").     from("direct:in-4").setHeader(HEADER_COUNTER_INCREMENT, simple("${body.length}")).to("metrics:counter:A").to("mock:out"). }
false;public;0;27;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in-1").to("metrics:counter:A?increment=5").to("mock:out").             from("direct:in-2").to("metrics:counter:A?decrement=9").to("mock:out").             from("direct:in-3").setHeader(HEADER_COUNTER_INCREMENT, constant(417L)).to("metrics:counter:A").to("mock:out").             from("direct:in-4").setHeader(HEADER_COUNTER_INCREMENT, simple("${body.length}")).to("metrics:counter:A").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry() {     return Mockito.mock(MetricRegistry.class). }
false;public;0;7;;@Before public void setup() {     // TODO - 12.05.2014, Lauri - is there any better way to set this up?     mockRegistry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME, MetricRegistry.class).     mockCounter = mock(Counter.class).     inOrder = Mockito.inOrder(mockRegistry, mockCounter). }
false;public;0;5;;@After public void tearDown() {     endpoint.reset().     reset(mockRegistry, mockCounter). }
false;public;0;10;;@Test public void testOverrideMetricsName() throws Exception {     when(mockRegistry.counter("B")).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     producer1.sendBodyAndHeader(new Object(), HEADER_METRIC_NAME, "B").     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter("B").     inOrder.verify(mockCounter, times(1)).inc(5L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testOverrideIncrement() throws Exception {     when(mockRegistry.counter("A")).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     producer1.sendBodyAndHeader(new Object(), HEADER_COUNTER_INCREMENT, 14L).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter("A").     inOrder.verify(mockCounter, times(1)).inc(14L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;13;;@Test public void testOverrideIncrementAndDecrement() throws Exception {     when(mockRegistry.counter("A")).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put(HEADER_COUNTER_INCREMENT, 912L).     headers.put(HEADER_COUNTER_DECREMENT, 43219L).     producer1.sendBodyAndHeaders(new Object(), headers).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter("A").     inOrder.verify(mockCounter, times(1)).inc(912L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testOverrideDecrement() throws Exception {     when(mockRegistry.counter("A")).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     producer2.sendBodyAndHeader(new Object(), HEADER_COUNTER_DECREMENT, 7L).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter("A").     inOrder.verify(mockCounter, times(1)).dec(7L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testOverrideUsingConstantValue() throws Exception {     when(mockRegistry.counter("A")).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     producer3.sendBody(new Object()).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter("A").     inOrder.verify(mockCounter, times(1)).inc(417L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;11;;@Test public void testOverrideUsingScriptEvaluation() throws Exception {     when(mockRegistry.counter("A")).thenReturn(mockCounter).     endpoint.expectedMessageCount(1).     String message = "Hello from Camel Metrics!".     producer4.sendBody(message).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).counter("A").     inOrder.verify(mockCounter, times(1)).inc(message.length()).     inOrder.verifyNoMoreInteractions(). }
