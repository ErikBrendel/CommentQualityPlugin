commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     MetricsMessageHistoryFactory factory = new MetricsMessageHistoryFactory().     factory.setUseJmx(false).     factory.setMetricsRegistry(registry).     context.setMessageHistoryFactory(factory).     return context. }
false;public;0;30;;@Test public void testMetricsHistory() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(5).     getMockEndpoint("mock:bar").expectedMessageCount(5).     getMockEndpoint("mock:baz").expectedMessageCount(5).     for (int i = 0. i < 10. i++) {         if (i % 2 == 0) {             template.sendBody("seda:foo", "Hello " + i).         } else {             template.sendBody("seda:bar", "Hello " + i).         }     }     assertMockEndpointsSatisfied().     // there should be 3 names     assertEquals(3, registry.getNames().size()).     // get the message history service     MetricsMessageHistoryService service = context.hasService(MetricsMessageHistoryService.class).     assertNotNull(service).     String json = service.dumpStatisticsAsJson().     assertNotNull(json).     log.info(json).     assertTrue(json.contains("foo.history")).     assertTrue(json.contains("bar.history")).     assertTrue(json.contains("baz.history")). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:foo").to("mock:foo").id("foo").     from("seda:bar").to("mock:bar").id("bar").to("mock:baz").id("baz"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").to("mock:foo").id("foo").             from("seda:bar").to("mock:bar").id("bar").to("mock:baz").id("baz").         }     }. }
