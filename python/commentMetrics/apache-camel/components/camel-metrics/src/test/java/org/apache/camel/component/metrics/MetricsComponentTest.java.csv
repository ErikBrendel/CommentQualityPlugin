commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     component = new MetricsComponent().     inOrder = Mockito.inOrder(camelContext, camelRegistry, metricRegistry). }
false;public;0;20;;@Test public void testCreateEndpoint() throws Exception {     component.setCamelContext(camelContext).     when(camelContext.getRegistry()).thenReturn(camelRegistry).     when(camelRegistry.lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME, MetricRegistry.class)).thenReturn(metricRegistry).     Map<String, Object> params = new HashMap<>().     Long value = System.currentTimeMillis().     params.put("mark", value).     Endpoint result = component.createEndpoint("metrics:meter:long.meter", "meter:long.meter", params).     assertThat(result, is(notNullValue())).     assertThat(result, is(instanceOf(MetricsEndpoint.class))).     MetricsEndpoint me = (MetricsEndpoint) result.     assertThat(me.getMark(), is(value)).     assertThat(me.getMetricsName(), is("long.meter")).     assertThat(me.getRegistry(), is(metricRegistry)).     inOrder.verify(camelContext, times(1)).getRegistry().     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME, MetricRegistry.class).     inOrder.verify(camelContext, times(1)).getTypeConverter().     inOrder.verifyNoMoreInteractions(). }
false;public;0;34;;@Test public void testCreateEndpoints() throws Exception {     component.setCamelContext(camelContext).     when(camelContext.getRegistry()).thenReturn(camelRegistry).     when(camelRegistry.lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME, MetricRegistry.class)).thenReturn(metricRegistry).     Map<String, Object> params = new HashMap<>().     Long value = System.currentTimeMillis().     params.put("mark", value).     Endpoint result = component.createEndpoint("metrics:meter:long.meter", "meter:long.meter", params).     assertThat(result, is(notNullValue())).     assertThat(result, is(instanceOf(MetricsEndpoint.class))).     MetricsEndpoint me = (MetricsEndpoint) result.     assertThat(me.getMark(), is(value)).     assertThat(me.getMetricsName(), is("long.meter")).     assertThat(me.getRegistry(), is(metricRegistry)).     params = new HashMap<>().     params.put("increment", value + 1).     params.put("decrement", value - 1).     result = component.createEndpoint("metrics:counter:long.counter", "counter:long.counter", params).     assertThat(result, is(notNullValue())).     assertThat(result, is(instanceOf(MetricsEndpoint.class))).     MetricsEndpoint ce = (MetricsEndpoint) result.     assertThat(ce.getIncrement(), is(value + 1)).     assertThat(ce.getDecrement(), is(value - 1)).     assertThat(ce.getMetricsName(), is("long.counter")).     assertThat(ce.getRegistry(), is(metricRegistry)).     inOrder.verify(camelContext, times(1)).getRegistry().     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME, MetricRegistry.class).     inOrder.verify(camelContext, times(2)).getTypeConverter().     inOrder.verifyNoMoreInteractions(). }
false;public;0;8;;@Test public void testGetMetricsName() throws Exception {     assertThat(component.getMetricsName("meter:metric-a"), is("metric-a")).     assertThat(component.getMetricsName("meter:metric-a:sub-b"), is("metric-a:sub-b")).     assertThat(component.getMetricsName("metric-a"), is("metric-a")).     assertThat(component.getMetricsName("//metric-a"), is("//metric-a")).     assertThat(component.getMetricsName("meter://metric-a"), is("//metric-a")). }
false;public;0;6;;@Test public void testCreateNewEndpointForCounter() throws Exception {     Endpoint endpoint = new MetricsEndpoint(null, null, metricRegistry, MetricsType.COUNTER, "a name").     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MetricsEndpoint.class))). }
false;public;0;6;;@Test public void testCreateNewEndpointForMeter() throws Exception {     Endpoint endpoint = new MetricsEndpoint(null, null, metricRegistry, MetricsType.METER, "a name").     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MetricsEndpoint.class))). }
false;public;0;6;;@Test public void testCreateNewEndpointForGauge() throws Exception {     MetricsEndpoint endpoint = new MetricsEndpoint(null, null, metricRegistry, MetricsType.GAUGE, "a name").     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MetricsEndpoint.class))). }
false;public;0;6;;@Test public void testCreateNewEndpointForHistogram() throws Exception {     Endpoint endpoint = new MetricsEndpoint(null, null, metricRegistry, MetricsType.HISTOGRAM, "a name").     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MetricsEndpoint.class))). }
false;public;0;6;;@Test public void testCreateNewEndpointForTimer() throws Exception {     Endpoint endpoint = new MetricsEndpoint(null, null, metricRegistry, MetricsType.TIMER, "a name").     assertThat(endpoint, is(notNullValue())).     assertThat(endpoint, is(instanceOf(MetricsEndpoint.class))). }
false;public;0;6;;@Test public void testGetMetricsType() throws Exception {     for (MetricsType type : EnumSet.allOf(MetricsType.class)) {         assertThat(component.getMetricsType(type.toString() + ":metrics-name"), is(type)).     } }
false;public;0;4;;@Test public void testGetMetricsTypeNotSet() throws Exception {     assertThat(component.getMetricsType("no-metrics-type"), is(MetricsComponent.DEFAULT_METRICS_TYPE)). }
false;public;0;4;;@Test(expected = RuntimeCamelException.class) public void testGetMetricsTypeNotFound() throws Exception {     component.getMetricsType("unknown-metrics:metrics-name"). }
false;public;0;8;;@Test public void testGetOrCreateMetricRegistryFoundInCamelRegistry() throws Exception {     when(camelRegistry.lookupByNameAndType("name", MetricRegistry.class)).thenReturn(metricRegistry).     MetricRegistry result = component.getOrCreateMetricRegistry(camelRegistry, "name").     assertThat(result, is(metricRegistry)).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MetricRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testGetOrCreateMetricRegistryFoundInCamelRegistryByType() throws Exception {     when(camelRegistry.lookupByNameAndType("name", MetricRegistry.class)).thenReturn(null).     when(camelRegistry.findByType(MetricRegistry.class)).thenReturn(Collections.singleton(metricRegistry)).     MetricRegistry result = component.getOrCreateMetricRegistry(camelRegistry, "name").     assertThat(result, is(metricRegistry)).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MetricRegistry.class).     inOrder.verify(camelRegistry, times(1)).findByType(MetricRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;11;;@Test public void testGetOrCreateMetricRegistryNotFoundInCamelRegistry() throws Exception {     when(camelRegistry.lookupByNameAndType("name", MetricRegistry.class)).thenReturn(null).     when(camelRegistry.findByType(MetricRegistry.class)).thenReturn(Collections.<MetricRegistry>emptySet()).     MetricRegistry result = component.getOrCreateMetricRegistry(camelRegistry, "name").     assertThat(result, is(notNullValue())).     assertThat(result, is(not(metricRegistry))).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MetricRegistry.class).     inOrder.verify(camelRegistry, times(1)).findByType(MetricRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;8;;@Test public void testGetMetricRegistryFromCamelRegistry() throws Exception {     when(camelRegistry.lookupByNameAndType("name", MetricRegistry.class)).thenReturn(metricRegistry).     MetricRegistry result = component.getMetricRegistryFromCamelRegistry(camelRegistry, "name").     assertThat(result, is(metricRegistry)).     inOrder.verify(camelRegistry, times(1)).lookupByNameAndType("name", MetricRegistry.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;5;;@Test public void testCreateMetricRegistry() throws Exception {     MetricRegistry registry = component.createMetricRegistry().     assertThat(registry, is(notNullValue())). }
