commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:in").to("metrics:histogram:A?value=332491").to("mock:out"). }
false;public;0;13;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").to("metrics:histogram:A?value=332491").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry() {     return Mockito.mock(MetricRegistry.class). }
false;public;0;7;;@Before public void setup() {     // TODO - 12.05.2014, Lauri - is there any better way to set this up?     mockRegistry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME, MetricRegistry.class).     mockHistogram = Mockito.mock(Histogram.class).     inOrder = Mockito.inOrder(mockRegistry, mockHistogram). }
false;public;0;5;;@After public void tearDown() {     endpoint.reset().     reset(mockRegistry). }
false;public;0;10;;@Test public void testOverrideMetricsName() throws Exception {     when(mockRegistry.histogram("B")).thenReturn(mockHistogram).     endpoint.expectedMessageCount(1).     producer.sendBodyAndHeader(new Object(), HEADER_METRIC_NAME, "B").     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).histogram("B").     inOrder.verify(mockHistogram, times(1)).update(332491L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testOverrideValue() throws Exception {     when(mockRegistry.histogram("A")).thenReturn(mockHistogram).     endpoint.expectedMessageCount(1).     producer.sendBodyAndHeader(new Object(), HEADER_HISTOGRAM_VALUE, 181L).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).histogram("A").     inOrder.verify(mockHistogram, times(1)).update(181L).     inOrder.verifyNoMoreInteractions(). }
