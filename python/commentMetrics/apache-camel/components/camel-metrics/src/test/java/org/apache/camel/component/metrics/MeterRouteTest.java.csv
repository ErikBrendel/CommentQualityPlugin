commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:in-1").to("metrics:meter:A?mark=3179").to("mock:out").     from("direct:in-2").to("metrics:meter:A").to("mock:out"). }
false;public;0;17;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in-1").to("metrics:meter:A?mark=3179").to("mock:out").             from("direct:in-2").to("metrics:meter:A").to("mock:out").         }     }. }
false;public;0;4;;@Bean(name = METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry() {     return Mockito.mock(MetricRegistry.class). }
false;public;0;8;;@Before public void setup() {     // TODO - 12.05.2014, Lauri - is there any better way to set this up?     mockRegistry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME, MetricRegistry.class).     mockMeter = Mockito.mock(Meter.class).     inOrder = Mockito.inOrder(mockRegistry, mockMeter).     when(mockRegistry.meter("A")).thenReturn(mockMeter). }
false;public;0;5;;@After public void tearDown() {     endpoint.reset().     reset(mockRegistry, mockMeter). }
false;public;0;10;;@Test public void testValueSetInUri() throws Exception {     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer1.sendBody(body).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).meter("A").     inOrder.verify(mockMeter, times(1)).mark(3179L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testValueNoSetInUri() throws Exception {     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer2.sendBody(body).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).meter("A").     inOrder.verify(mockMeter, times(1)).mark().     inOrder.verifyNoMoreInteractions(). }
false;public;0;11;;@Test public void testOverrideMetricsName() throws Exception {     when(mockRegistry.meter("B")).thenReturn(mockMeter).     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer1.sendBodyAndHeader(body, HEADER_METRIC_NAME, "B").     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).meter("B").     inOrder.verify(mockMeter, times(1)).mark(3179L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testOverrideValueWithHeader() throws Exception {     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer1.sendBodyAndHeader(body, HEADER_METER_MARK, 9926L).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).meter("A").     inOrder.verify(mockMeter, times(1)).mark(9926L).     inOrder.verifyNoMoreInteractions(). }
false;public;0;10;;@Test public void testValueNoSetInUriOverrideWithHeader() throws Exception {     Object body = new Object().     endpoint.expectedBodiesReceived(body).     producer2.sendBodyAndHeader(body, HEADER_METER_MARK, 7707370L).     endpoint.assertIsSatisfied().     inOrder.verify(mockRegistry, times(1)).meter("A").     inOrder.verify(mockMeter, times(1)).mark(7707370L).     inOrder.verifyNoMoreInteractions(). }
