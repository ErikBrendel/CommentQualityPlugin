commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     producer = new CounterProducer(endpoint).     inOrder = Mockito.inOrder(endpoint, exchange, registry, counter, in).     when(registry.counter(METRICS_NAME)).thenReturn(counter).     when(exchange.getIn()).thenReturn(in). }
false;public;0;4;;@Test public void testCounterProducer() throws Exception {     assertThat(producer.getEndpoint().equals(endpoint), is(true)). }
false;public;0;16;;@Test public void testProcessWithIncrementOnly() throws Exception {     Object action = null.     when(endpoint.getIncrement()).thenReturn(INCREMENT).     when(endpoint.getDecrement()).thenReturn(null).     when(in.getHeader(HEADER_COUNTER_INCREMENT, INCREMENT, Long.class)).thenReturn(INCREMENT).     producer.doProcess(exchange, endpoint, registry, METRICS_NAME).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(registry, times(1)).counter(METRICS_NAME).     inOrder.verify(endpoint, times(1)).getIncrement().     inOrder.verify(endpoint, times(1)).getDecrement().     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_INCREMENT, INCREMENT, Long.class).     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_DECREMENT, action, Long.class).     inOrder.verify(counter, times(1)).inc(INCREMENT).     inOrder.verifyNoMoreInteractions(). }
false;public;0;16;;@Test public void testProcessWithDecrementOnly() throws Exception {     Object action = null.     when(endpoint.getIncrement()).thenReturn(null).     when(endpoint.getDecrement()).thenReturn(DECREMENT).     when(in.getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class)).thenReturn(DECREMENT).     producer.doProcess(exchange, endpoint, registry, METRICS_NAME).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(registry, times(1)).counter(METRICS_NAME).     inOrder.verify(endpoint, times(1)).getIncrement().     inOrder.verify(endpoint, times(1)).getDecrement().     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_INCREMENT, action, Long.class).     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class).     inOrder.verify(counter, times(1)).dec(DECREMENT).     inOrder.verifyNoMoreInteractions(). }
false;public;0;16;;@Test public void testDoProcessWithIncrementAndDecrement() throws Exception {     when(endpoint.getIncrement()).thenReturn(INCREMENT).     when(endpoint.getDecrement()).thenReturn(DECREMENT).     when(in.getHeader(HEADER_COUNTER_INCREMENT, INCREMENT, Long.class)).thenReturn(INCREMENT).     when(in.getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class)).thenReturn(DECREMENT).     producer.doProcess(exchange, endpoint, registry, METRICS_NAME).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(registry, times(1)).counter(METRICS_NAME).     inOrder.verify(endpoint, times(1)).getIncrement().     inOrder.verify(endpoint, times(1)).getDecrement().     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_INCREMENT, INCREMENT, Long.class).     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class).     inOrder.verify(counter, times(1)).inc(INCREMENT).     inOrder.verifyNoMoreInteractions(). }
false;public;0;15;;@Test public void testProcessWithOutIncrementAndDecrement() throws Exception {     Object action = null.     when(endpoint.getIncrement()).thenReturn(null).     when(endpoint.getDecrement()).thenReturn(null).     producer.doProcess(exchange, endpoint, registry, METRICS_NAME).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(registry, times(1)).counter(METRICS_NAME).     inOrder.verify(endpoint, times(1)).getIncrement().     inOrder.verify(endpoint, times(1)).getDecrement().     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_INCREMENT, action, Long.class).     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_DECREMENT, action, Long.class).     inOrder.verify(counter, times(1)).inc().     inOrder.verifyNoMoreInteractions(). }
false;public;0;16;;@Test public void testProcessOverridingIncrement() throws Exception {     when(endpoint.getIncrement()).thenReturn(INCREMENT).     when(endpoint.getDecrement()).thenReturn(DECREMENT).     when(in.getHeader(HEADER_COUNTER_INCREMENT, INCREMENT, Long.class)).thenReturn(INCREMENT + 1).     when(in.getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class)).thenReturn(DECREMENT).     producer.doProcess(exchange, endpoint, registry, METRICS_NAME).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(registry, times(1)).counter(METRICS_NAME).     inOrder.verify(endpoint, times(1)).getIncrement().     inOrder.verify(endpoint, times(1)).getDecrement().     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_INCREMENT, INCREMENT, Long.class).     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class).     inOrder.verify(counter, times(1)).inc(INCREMENT + 1).     inOrder.verifyNoMoreInteractions(). }
false;public;0;16;;@Test public void testProcessOverridingDecrement() throws Exception {     Object action = null.     when(endpoint.getIncrement()).thenReturn(null).     when(endpoint.getDecrement()).thenReturn(DECREMENT).     when(in.getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class)).thenReturn(DECREMENT - 1).     producer.doProcess(exchange, endpoint, registry, METRICS_NAME).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(registry, times(1)).counter(METRICS_NAME).     inOrder.verify(endpoint, times(1)).getIncrement().     inOrder.verify(endpoint, times(1)).getDecrement().     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_INCREMENT, action, Long.class).     inOrder.verify(in, times(1)).getHeader(HEADER_COUNTER_DECREMENT, DECREMENT, Long.class).     inOrder.verify(counter, times(1)).dec(DECREMENT - 1).     inOrder.verifyNoMoreInteractions(). }
