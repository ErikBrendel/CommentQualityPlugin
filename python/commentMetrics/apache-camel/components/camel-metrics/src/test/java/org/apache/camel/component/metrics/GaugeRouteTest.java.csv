commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:in-1").to("metrics:gauge:A?subject=#mySubject").to("mock:out").     from("direct:in-2").setHeader(HEADER_METRIC_NAME, constant("B")).setHeader(HEADER_GAUGE_SUBJECT, constant("my overriding subject")).to("metrics:gauge:A?subject=#mySubject").to("mock:out"). }
false;public;0;20;;@Bean @Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in-1").to("metrics:gauge:A?subject=#mySubject").to("mock:out").             from("direct:in-2").setHeader(HEADER_METRIC_NAME, constant("B")).setHeader(HEADER_GAUGE_SUBJECT, constant("my overriding subject")).to("metrics:gauge:A?subject=#mySubject").to("mock:out").         }     }. }
false;public;1;5;;@Override public CamelMetricsGauge answer(InvocationOnMock invocation) throws Throwable {     mockGauges.put(invocation.getArgument(0), invocation.getArgument(1)).     return invocation.getArgument(1). }
false;public;0;14;;@Bean(name = METRIC_REGISTRY_NAME) public MetricRegistry getMetricRegistry() {     MetricRegistry registry = Mockito.mock(MetricRegistry.class).     when(registry.getGauges()).thenReturn(mockGauges).     when(registry.register(anyString(), any())).then(new Answer<CamelMetricsGauge>() {          @Override         public CamelMetricsGauge answer(InvocationOnMock invocation) throws Throwable {             mockGauges.put(invocation.getArgument(0), invocation.getArgument(1)).             return invocation.getArgument(1).         }     }).     return registry. }
false;public;0;4;;@Bean(name = "mySubject") public String getSubject() {     return "my subject". }
false;public;0;5;;@Before public void setup() {     // TODO - 12.05.2014, Lauri - is there any better way to set this up?     mockRegistry = endpoint.getCamelContext().getRegistry().lookupByNameAndType(METRIC_REGISTRY_NAME, MetricRegistry.class). }
false;public;0;5;;@After public void tearDown() {     endpoint.reset().     mockGauges.clear(). }
false;public;1;4;;@Override public boolean matches(CamelMetricsGauge argument) {     return "my subject".equals(argument.getValue()). }
false;public;0;12;;@Test public void testDefault() throws Exception {     endpoint.expectedMessageCount(1).     producer1.sendBody(new Object()).     endpoint.assertIsSatisfied().     verify(mockRegistry, times(1)).register(eq("A"), argThat(new ArgumentMatcher<CamelMetricsGauge>() {          @Override         public boolean matches(CamelMetricsGauge argument) {             return "my subject".equals(argument.getValue()).         }     })). }
false;public;1;4;;@Override public boolean matches(CamelMetricsGauge argument) {     return "my subject".equals(argument.getValue()). }
false;public;1;4;;@Override public boolean matches(CamelMetricsGauge argument) {     return "my overriding subject".equals(argument.getValue()). }
false;public;0;18;;@Test public void testOverride() throws Exception {     verify(mockRegistry, times(1)).register(eq("A"), argThat(new ArgumentMatcher<CamelMetricsGauge>() {          @Override         public boolean matches(CamelMetricsGauge argument) {             return "my subject".equals(argument.getValue()).         }     })).     endpoint.expectedMessageCount(1).     producer2.sendBody(new Object()).     endpoint.assertIsSatisfied().     verify(mockRegistry, times(1)).register(eq("B"), argThat(new ArgumentMatcher<CamelMetricsGauge>() {          @Override         public boolean matches(CamelMetricsGauge argument) {             return "my overriding subject".equals(argument.getValue()).         }     })). }
