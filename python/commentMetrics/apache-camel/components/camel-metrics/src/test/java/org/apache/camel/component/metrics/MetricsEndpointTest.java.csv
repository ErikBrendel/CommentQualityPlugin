commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return null. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "not real endpoint". }
false;public;0;15;;@Before public void setUp() throws Exception {     endpoint = new MetricsEndpoint(null, null, registry, MetricsType.METER, METRICS_NAME) {          @Override         public Producer createProducer() throws Exception {             return null.         }          @Override         protected String createEndpointUri() {             return "not real endpoint".         }     }.     inOrder = Mockito.inOrder(registry, processor, exchange, in). }
false;public;0;4;;@After public void tearDown() throws Exception {     inOrder.verifyNoMoreInteractions(). }
false;public;0;5;;@Test public void testAbstractMetricsEndpoint() throws Exception {     assertThat(endpoint.getMetricsName(), is(METRICS_NAME)).     assertThat(endpoint.getRegistry(), is(registry)). }
false;public;0;4;;@Test(expected = RuntimeCamelException.class) public void testCreateConsumer() throws Exception {     endpoint.createConsumer(processor). }
false;public;0;4;;@Test public void testIsSingleton() throws Exception {     assertThat(endpoint.isSingleton(), is(true)). }
false;public;0;4;;@Test public void testGetRegistry() throws Exception {     assertThat(endpoint.getRegistry(), is(registry)). }
false;public;0;4;;@Test public void testGetMetricsName() throws Exception {     assertThat(endpoint.getMetricsName(), is(METRICS_NAME)). }
