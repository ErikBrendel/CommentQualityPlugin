commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     MetricsRoutePolicyFactory factory = new MetricsRoutePolicyFactory().     factory.setUseJmx(false).     factory.setMetricsRegistry(registry).     context.addRoutePolicyFactory(factory).     return context. }
false;public;0;23;;@Test public void testMetricsRoutePolicy() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar1").expectedMessageCount(1).     getMockEndpoint("mock:bar2").expectedMessageCount(1).     template.sendBody("direct:multicast", "Hello World").     assertMockEndpointsSatisfied().     // there should be 3 names     assertEquals(3, registry.getNames().size()).     // there should be 3 Counters     assertEquals(3, registry.getTimers().size()).     for (Map.Entry<String, Timer> timerEntry : registry.getTimers().entrySet()) {         String metricName = timerEntry.getKey().         Timer timer = timerEntry.getValue().         // each count should be 1         assertEquals("Count is wrong for " + metricName, 1, timer.getCount()).     } }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:foo").routeId("foo").to("mock:foo").     from("direct:bar").routeId("bar").multicast().to("mock:bar1", "mock:bar2").     from("direct:multicast").routeId("multicast").multicast().to("direct:foo", "direct:bar"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").routeId("foo").to("mock:foo").             from("direct:bar").routeId("bar").multicast().to("mock:bar1", "mock:bar2").             from("direct:multicast").routeId("multicast").multicast().to("direct:foo", "direct:bar").         }     }. }
