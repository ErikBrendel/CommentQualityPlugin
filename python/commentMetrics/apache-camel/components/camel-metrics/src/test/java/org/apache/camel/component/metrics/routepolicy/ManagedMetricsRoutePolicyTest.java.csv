commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
true;protected;0;6;// Setup the common MetricsRegistry for MetricsComponent and MetricsRoutePolicy to use ;// Setup the common MetricsRegistry for MetricsComponent and MetricsRoutePolicy to use @Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind(MetricsComponent.METRIC_REGISTRY_NAME, metricRegistry).     return registry. }
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     MetricsRoutePolicyFactory factory = new MetricsRoutePolicyFactory().     factory.setUseJmx(true).     factory.setPrettyPrint(true).     context.addRoutePolicyFactory(factory).     return context. }
false;public;0;31;;@Test public void testMetricsRoutePolicy() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(10).     for (int i = 0. i < 10. i++) {         if (i % 2 == 0) {             template.sendBody("seda:foo", "Hello " + i).         } else {             template.sendBody("seda:bar", "Hello " + i).         }     }     assertMockEndpointsSatisfied().     // there should be 3 names     assertEquals(3, metricRegistry.getNames().size()).     // there should be 3 mbeans     Set<ObjectName> set = getMBeanServer().queryNames(new ObjectName("org.apache.camel.metrics:*"), null).     assertEquals(3, set.size()).     String name = String.format("org.apache.camel:context=%s,type=services,name=MetricsRegistryService", context.getManagementName()).     ObjectName on = ObjectName.getInstance(name).     String json = (String) getMBeanServer().invoke(on, "dumpStatisticsAsJson", null, null).     assertNotNull(json).     log.info(json).     assertTrue(json.contains("test")).     assertTrue(json.contains("bar.responses")).     assertTrue(json.contains("foo.responses")). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo").routeId("foo").to("metrics:counter:test").to("mock:result").     from("seda:bar").routeId("bar").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("foo").to("metrics:counter:test").to("mock:result").             from("seda:bar").routeId("bar").to("mock:result").         }     }. }
