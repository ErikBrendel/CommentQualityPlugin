commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
true;protected;0;6;// Setup the common MetricsRegistry for MetricsComponent and MetricsMessageHistoryFactory to use ;// Setup the common MetricsRegistry for MetricsComponent and MetricsMessageHistoryFactory to use @Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind(MetricsComponent.METRIC_REGISTRY_NAME, metricRegistry).     return registry. }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     MetricsMessageHistoryFactory factory = new MetricsMessageHistoryFactory().     factory.setUseJmx(true).     factory.setPrettyPrint(true).     factory.setMetricsRegistry(metricRegistry).     context.setMessageHistoryFactory(factory).     return context. }
false;public;0;52;;@Test public void testMessageHistory() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(5).     getMockEndpoint("mock:bar").expectedMessageCount(5).     getMockEndpoint("mock:baz").expectedMessageCount(5).     for (int i = 0. i < 10. i++) {         if (i % 2 == 0) {             template.sendBody("seda:foo", "Hello " + i).         } else {             template.sendBody("seda:bar", "Hello " + i).         }     }     assertMockEndpointsSatisfied().     // there should be 3 names     assertEquals(3, metricRegistry.getNames().size()).     // there should be 3 mbeans     Set<ObjectName> set = getMBeanServer().queryNames(new ObjectName("org.apache.camel.metrics:*"), null).     assertEquals(3, set.size()).     // get the message history service using JMX     String name = String.format("org.apache.camel:context=%s,type=services,name=MetricsMessageHistoryService", context.getManagementName()).     ObjectName on = ObjectName.getInstance(name).     String json = (String) getMBeanServer().invoke(on, "dumpStatisticsAsJson", null, null).     assertNotNull(json).     log.info(json).     assertTrue(json.contains("foo.history")).     assertTrue(json.contains("bar.history")).     assertTrue(json.contains("baz.history")).     // reset     getMBeanServer().invoke(on, "reset", null, null).     resetMocks().     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("seda:foo", "Hello Again").     assertMockEndpointsSatisfied().     json = (String) getMBeanServer().invoke(on, "dumpStatisticsAsJson", null, null).     assertNotNull(json).     log.info(json).     assertTrue(json.contains("foo.history")).     assertFalse(json.contains("bar.history")).     assertFalse(json.contains("baz.history")). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:foo").to("mock:foo").id("foo").     from("seda:bar").to("mock:bar").id("bar").to("mock:baz").id("baz"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").to("mock:foo").id("foo").             from("seda:bar").to("mock:bar").id("bar").to("mock:baz").id("baz").         }     }. }
