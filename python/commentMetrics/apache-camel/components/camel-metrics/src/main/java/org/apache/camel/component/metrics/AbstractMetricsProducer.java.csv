commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public MetricsEndpoint getEndpoint() {     return (MetricsEndpoint) super.getEndpoint(). }
false;public;1;15;;@Override public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     String defaultMetricsName = getEndpoint().getMetricsName().     String finalMetricsName = getMetricsName(in, defaultMetricsName).     MetricRegistry registry = getEndpoint().getRegistry().     try {         doProcess(exchange, getEndpoint(), registry, finalMetricsName).     } catch (Exception e) {         exchange.setException(e).     } finally {         clearMetricsHeaders(in).     } }
false;protected,abstract;4;1;;protected abstract void doProcess(Exchange exchange, MetricsEndpoint endpoint, MetricRegistry registry, String metricsName) throws Exception.
false;public;2;3;;public String getMetricsName(Message in, String defaultValue) {     return getStringHeader(in, MetricsConstants.HEADER_METRIC_NAME, defaultValue). }
false;public;3;4;;public String getStringHeader(Message in, String header, String defaultValue) {     String headerValue = in.getHeader(header, String.class).     return ObjectHelper.isNotEmpty(headerValue) ? headerValue : defaultValue. }
false;public;3;3;;public Long getLongHeader(Message in, String header, Long defaultValue) {     return in.getHeader(header, defaultValue, Long.class). }
false;protected;1;3;;protected boolean clearMetricsHeaders(Message in) {     return in.removeHeaders(HEADER_PATTERN). }
