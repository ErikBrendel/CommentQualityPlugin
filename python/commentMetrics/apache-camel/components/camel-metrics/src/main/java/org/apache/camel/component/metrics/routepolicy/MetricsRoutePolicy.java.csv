commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void onExchangeBegin(Exchange exchange) {     Timer.Context context = responses.time().     exchange.setProperty("MetricsRoutePolicy-" + routeId, context). }
false;public;1;6;;public void onExchangeDone(Exchange exchange) {     Timer.Context context = (Timer.Context) exchange.removeProperty("MetricsRoutePolicy-" + routeId).     if (context != null) {         context.stop().     } }
false;public;0;3;;public MetricRegistry getMetricsRegistry() {     return metricsRegistry. }
false;public;1;3;;public void setMetricsRegistry(MetricRegistry metricsRegistry) {     this.metricsRegistry = metricsRegistry. }
false;public;0;3;;public boolean isUseJmx() {     return useJmx. }
false;public;1;3;;public void setUseJmx(boolean useJmx) {     this.useJmx = useJmx. }
false;public;0;3;;public String getJmxDomain() {     return jmxDomain. }
false;public;1;3;;public void setJmxDomain(String jmxDomain) {     this.jmxDomain = jmxDomain. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public TimeUnit getRateUnit() {     return rateUnit. }
false;public;1;3;;public void setRateUnit(TimeUnit rateUnit) {     this.rateUnit = rateUnit. }
false;public;0;3;;public TimeUnit getDurationUnit() {     return durationUnit. }
false;public;1;3;;public void setDurationUnit(TimeUnit durationUnit) {     this.durationUnit = durationUnit. }
false;public;0;3;;public String getNamePattern() {     return namePattern. }
true;public;1;3;/**  * The name pattern to use.  * <p/>  * Uses dot as separators, but you can change that.  * The values <tt>##name##</tt>, <tt>##routeId##</tt>, and <tt>##type##</tt> will be replaced with actual value.  */ ;/**  * The name pattern to use.  * <p/>  * Uses dot as separators, but you can change that.  * The values <tt>##name##</tt>, <tt>##routeId##</tt>, and <tt>##type##</tt> will be replaced with actual value.  */ public void setNamePattern(String namePattern) {     this.namePattern = namePattern. }
false;public;1;34;;@Override public void onInit(Route route) {     super.onInit(route).     this.route = route.     try {         registryService = route.getRouteContext().getCamelContext().hasService(MetricsRegistryService.class).         if (registryService == null) {             registryService = new MetricsRegistryService().             registryService.setMetricsRegistry(getMetricsRegistry()).             registryService.setUseJmx(isUseJmx()).             registryService.setJmxDomain(getJmxDomain()).             registryService.setPrettyPrint(isPrettyPrint()).             registryService.setRateUnit(getRateUnit()).             registryService.setDurationUnit(getDurationUnit()).             route.getRouteContext().getCamelContext().addService(registryService).         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     // ensure registry service is started     try {         ServiceHelper.startService(registryService).     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     // create statistics holder     // for know we record only all the timings of a complete exchange (responses)     // we have in-flight / total statistics already from camel-core     Timer responses = registryService.getMetricsRegistry().timer(createName("responses")).     statistics = new MetricsStatistics(route, responses). }
false;private;1;10;;private String createName(String type) {     CamelContext context = route.getRouteContext().getCamelContext().     String name = context.getManagementName() != null ? context.getManagementName() : context.getName().     String answer = namePattern.     answer = answer.replaceFirst("##name##", name).     answer = answer.replaceFirst("##routeId##", Matcher.quoteReplacement(route.getId())).     answer = answer.replaceFirst("##type##", type).     return answer. }
false;public;2;6;;@Override public void onExchangeBegin(Route route, Exchange exchange) {     if (statistics != null) {         statistics.onExchangeBegin(exchange).     } }
false;public;2;6;;@Override public void onExchangeDone(Route route, Exchange exchange) {     if (statistics != null) {         statistics.onExchangeDone(exchange).     } }
