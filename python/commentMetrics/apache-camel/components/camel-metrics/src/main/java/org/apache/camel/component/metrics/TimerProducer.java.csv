commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;13;;@Override protected void doProcess(Exchange exchange, MetricsEndpoint endpoint, MetricRegistry registry, String metricsName) throws Exception {     Message in = exchange.getIn().     MetricsTimerAction action = endpoint.getAction().     MetricsTimerAction finalAction = in.getHeader(HEADER_TIMER_ACTION, action, MetricsTimerAction.class).     if (finalAction == MetricsTimerAction.start) {         handleStart(exchange, registry, metricsName).     } else if (finalAction == MetricsTimerAction.stop) {         handleStop(exchange, registry, metricsName).     } else {         log.warn("No action provided for timer \"{}\"", metricsName).     } }
false;;3;11;;void handleStart(Exchange exchange, MetricRegistry registry, String metricsName) {     String propertyName = getPropertyName(metricsName).     Timer.Context context = getTimerContextFromExchange(exchange, propertyName).     if (context == null) {         Timer timer = registry.timer(metricsName).         context = timer.time().         exchange.setProperty(propertyName, context).     } else {         log.warn("Timer \"{}\" already running", metricsName).     } }
false;;3;10;;void handleStop(Exchange exchange, MetricRegistry registry, String metricsName) {     String propertyName = getPropertyName(metricsName).     Timer.Context context = getTimerContextFromExchange(exchange, propertyName).     if (context != null) {         context.stop().         exchange.removeProperty(propertyName).     } else {         log.warn("Timer \"{}\" not found", metricsName).     } }
false;;1;6;;String getPropertyName(String metricsName) {     return new StringBuilder("timer").append(":").append(metricsName).toString(). }
false;;2;3;;Timer.Context getTimerContextFromExchange(Exchange exchange, String propertyName) {     return exchange.getProperty(propertyName, Timer.Context.class). }
