commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public MetricRegistry getMetricsRegistry() {     return metricsRegistry. }
true;public;1;3;/**  * To use a specific {@link com.codahale.metrics.MetricRegistry} instance.  * <p/>  * If no instance has been configured, then Camel will create a shared instance to be used.  */ ;/**  * To use a specific {@link com.codahale.metrics.MetricRegistry} instance.  * <p/>  * If no instance has been configured, then Camel will create a shared instance to be used.  */ public void setMetricsRegistry(MetricRegistry metricsRegistry) {     this.metricsRegistry = metricsRegistry. }
false;public;0;3;;public boolean isUseJmx() {     return useJmx. }
true;public;1;3;/**  * Whether to use JMX reported to enlist JMX MBeans with the metrics statistics.  */ ;/**  * Whether to use JMX reported to enlist JMX MBeans with the metrics statistics.  */ public void setUseJmx(boolean useJmx) {     this.useJmx = useJmx. }
false;public;0;3;;public String getJmxDomain() {     return jmxDomain. }
true;public;1;3;/**  * The JMX domain name to use for the enlisted JMX MBeans.  */ ;/**  * The JMX domain name to use for the enlisted JMX MBeans.  */ public void setJmxDomain(String jmxDomain) {     this.jmxDomain = jmxDomain. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
true;public;1;3;/**  * Whether to use pretty print when outputting JSon  */ ;/**  * Whether to use pretty print when outputting JSon  */ public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public TimeUnit getRateUnit() {     return rateUnit. }
true;public;1;3;/**  * Sets the time unit to use for requests per unit (eg requests per second)  */ ;/**  * Sets the time unit to use for requests per unit (eg requests per second)  */ public void setRateUnit(TimeUnit rateUnit) {     this.rateUnit = rateUnit. }
false;public;0;3;;public TimeUnit getDurationUnit() {     return durationUnit. }
true;public;1;3;/**  * Sets the time unit to use for timing the duration of processing a message in the route  */ ;/**  * Sets the time unit to use for timing the duration of processing a message in the route  */ public void setDurationUnit(TimeUnit durationUnit) {     this.durationUnit = durationUnit. }
false;public;3;5;;@Override public MessageHistory newMessageHistory(String routeId, NamedNode namedNode, long timestamp) {     Timer timer = metricsRegistry.timer(createName("history", routeId, namedNode.getId())).     return new MetricsMessageHistory(routeId, namedNode, timer, timestamp). }
false;private;3;10;;private String createName(String type, String routeId, String id) {     String name = camelContext.getManagementName() != null ? camelContext.getManagementName() : camelContext.getName().     String answer = namePattern.     answer = answer.replaceFirst("##name##", name).     answer = answer.replaceFirst("##routeId##", routeId).     answer = answer.replaceFirst("##id##", id).     answer = answer.replaceFirst("##type##", type).     return answer. }
false;protected;0;25;;@Override protected void doStart() throws Exception {     try {         messageHistoryService = camelContext.hasService(MetricsMessageHistoryService.class).         if (messageHistoryService == null) {             messageHistoryService = new MetricsMessageHistoryService().             messageHistoryService.setMetricsRegistry(getMetricsRegistry()).             messageHistoryService.setUseJmx(isUseJmx()).             messageHistoryService.setJmxDomain(getJmxDomain()).             messageHistoryService.setPrettyPrint(isPrettyPrint()).             messageHistoryService.setRateUnit(getRateUnit()).             messageHistoryService.setDurationUnit(getDurationUnit()).             camelContext.addService(messageHistoryService).         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     // use metrics registry from service if not explicit configured     if (metricsRegistry == null) {         metricsRegistry = messageHistoryService.getMetricsRegistry().     }     ObjectHelper.notNull(metricsRegistry, "metricsRegistry", this). }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
