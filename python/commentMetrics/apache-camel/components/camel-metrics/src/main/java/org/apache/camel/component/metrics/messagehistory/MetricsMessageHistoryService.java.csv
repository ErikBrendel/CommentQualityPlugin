commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public MetricRegistry getMetricsRegistry() {     return metricsRegistry. }
false;public;1;3;;public void setMetricsRegistry(MetricRegistry metricsRegistry) {     this.metricsRegistry = metricsRegistry. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public boolean isUseJmx() {     return useJmx. }
false;public;1;3;;public void setUseJmx(boolean useJmx) {     this.useJmx = useJmx. }
false;public;0;3;;public String getJmxDomain() {     return jmxDomain. }
false;public;1;3;;public void setJmxDomain(String jmxDomain) {     this.jmxDomain = jmxDomain. }
false;public;0;3;;public boolean isPrettyPrint() {     return prettyPrint. }
false;public;1;3;;public void setPrettyPrint(boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public TimeUnit getRateUnit() {     return rateUnit. }
false;public;1;3;;public void setRateUnit(TimeUnit rateUnit) {     this.rateUnit = rateUnit. }
false;public;0;3;;public TimeUnit getDurationUnit() {     return durationUnit. }
false;public;1;3;;public void setDurationUnit(TimeUnit durationUnit) {     this.durationUnit = durationUnit. }
false;protected;0;33;;@Override protected void doStart() throws Exception {     if (metricsRegistry == null) {         Registry camelRegistry = getCamelContext().getRegistry().         metricsRegistry = camelRegistry.lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME, MetricRegistry.class).         // create a new metricsRegistry by default         if (metricsRegistry == null) {             metricsRegistry = new MetricRegistry().         }     }     if (useJmx) {         ManagementAgent agent = getCamelContext().getManagementStrategy().getManagementAgent().         if (agent != null) {             MBeanServer server = agent.getMBeanServer().             if (server != null) {                 reporter = JmxReporter.forRegistry(metricsRegistry).registerWith(server).inDomain(jmxDomain).build().                 reporter.start().             }         } else {             throw new IllegalStateException("CamelContext has not enabled JMX").         }     }     // json mapper     this.mapper = new ObjectMapper().registerModule(new MetricsModule(getRateUnit(), getDurationUnit(), false)).     if (getRateUnit() == TimeUnit.SECONDS && getDurationUnit() == TimeUnit.SECONDS) {         // they both use same units so reuse         this.secondsMapper = this.mapper.     } else {         this.secondsMapper = new ObjectMapper().registerModule(new MetricsModule(TimeUnit.SECONDS, TimeUnit.SECONDS, false)).     } }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (reporter != null) {         reporter.stop().         reporter = null.     } }
false;public;0;12;;@Override public String dumpStatisticsAsJson() {     ObjectWriter writer = mapper.writer().     if (isPrettyPrint()) {         writer = writer.withDefaultPrettyPrinter().     }     try {         return writer.writeValueAsString(getMetricsRegistry()).     } catch (JsonProcessingException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;11;;public String dumpStatisticsAsJsonTimeUnitSeconds() {     ObjectWriter writer = secondsMapper.writer().     if (isPrettyPrint()) {         writer = writer.withDefaultPrettyPrinter().     }     try {         return writer.writeValueAsString(getMetricsRegistry()).     } catch (JsonProcessingException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;2;4;;@Override public boolean matches(String name, Metric metric) {     return true. }
false;public;0;9;;public void reset() {     // remove all     metricsRegistry.removeMatching(new MetricFilter() {          @Override         public boolean matches(String name, Metric metric) {             return true.         }     }). }
