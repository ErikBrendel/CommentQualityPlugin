commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot receive messages from this endpoint"). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new DdbProducer(this). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;30;;@Override public void doStart() throws Exception {     super.doStart().     ddbClient = configuration.getAmazonDDBClient() != null ? configuration.getAmazonDDBClient() : createDdbClient().     String tableName = getConfiguration().getTableName().     log.trace("Querying whether table [{}] already exists...", tableName).     try {         DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName).         TableDescription tableDescription = ddbClient.describeTable(request).getTable().         if (!isTableActive(tableDescription)) {             waitForTableToBecomeAvailable(tableName).         }         log.trace("Table [{}] already exists", tableName).         return.     } catch (ResourceNotFoundException e) {         log.trace("Table [{}] doesn't exist yet", tableName).         log.trace("Creating table [{}]...", tableName).         TableDescription tableDescription = createTable(tableName).         if (!isTableActive(tableDescription)) {             waitForTableToBecomeAvailable(tableName).         }         log.trace("Table [{}] created", tableName).     } }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAmazonDDBClient())) {         if (ddbClient != null) {             ddbClient.shutdown().         }     }     super.doStop(). }
false;private;1;11;;private TableDescription createTable(String tableName) {     CreateTableRequest createTableRequest = new CreateTableRequest().withTableName(tableName).withKeySchema(new KeySchemaElement().withAttributeName(configuration.getKeyAttributeName()).withKeyType(configuration.getKeyAttributeType())).withProvisionedThroughput(new ProvisionedThroughput().withReadCapacityUnits(configuration.getReadCapacity()).withWriteCapacityUnits(configuration.getWriteCapacity())).     return getDdbClient().createTable(createTableRequest).getTableDescription(). }
false;public;0;3;;public DdbConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public AmazonDynamoDB getDdbClient() {     return ddbClient. }
false;;0;32;;AmazonDynamoDB createDdbClient() {     AmazonDynamoDB client = null.     ClientConfiguration clientConfiguration = null.     AmazonDynamoDBClientBuilder clientBuilder = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonDynamoDBClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonDynamoDBClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonDynamoDBClientBuilder.standard().         } else {             clientBuilder = AmazonDynamoDBClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).     }     client = clientBuilder.build().     return client. }
false;private;1;27;;private void waitForTableToBecomeAvailable(String tableName) {     log.trace("Waiting for [{}] to become ACTIVE...", tableName).     long waitTime = 5 * 60 * 1000.     while (waitTime > 0) {         try {             Thread.sleep(1000 * 5).             waitTime -= 5000.         } catch (Exception e) {         }         try {             DescribeTableRequest request = new DescribeTableRequest().withTableName(tableName).             TableDescription tableDescription = getDdbClient().describeTable(request).getTable().             if (isTableActive(tableDescription)) {                 log.trace("Table [{}] became active", tableName).                 return.             }             log.trace("Table [{}] not active yet", tableName).         } catch (AmazonServiceException ase) {             if (!ase.getErrorCode().equalsIgnoreCase("ResourceNotFoundException")) {                 throw ase.             }         }     }     throw new RuntimeException("Table " + tableName + " never went active"). }
false;private;1;3;;private boolean isTableActive(TableDescription tableDescription) {     return tableDescription.getTableStatus().equals(TableStatus.ACTIVE.toString()). }
