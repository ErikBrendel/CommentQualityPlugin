commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;1;;public abstract void execute().
false;protected;1;8;;protected Message getMessageForResponse(Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
false;protected;0;4;;protected String determineTableName() {     String tableName = exchange.getIn().getHeader(DdbConstants.TABLE_NAME, String.class).     return tableName != null ? tableName : configuration.getTableName(). }
false;protected;0;4;;@SuppressWarnings("unchecked") protected Map<String, ExpectedAttributeValue> determineUpdateCondition() {     return exchange.getIn().getHeader(DdbConstants.UPDATE_CONDITION, Map.class). }
false;protected;0;4;;@SuppressWarnings("unchecked") protected Map<String, AttributeValue> determineItem() {     return exchange.getIn().getHeader(DdbConstants.ITEM, Map.class). }
false;protected;0;3;;protected String determineReturnValues() {     return exchange.getIn().getHeader(DdbConstants.RETURN_VALUES, String.class). }
false;protected;1;4;;protected void addAttributesToResult(Map<String, AttributeValue> attributes) {     Message msg = getMessageForResponse(exchange).     msg.setHeader(DdbConstants.ATTRIBUTES, attributes). }
false;protected;1;6;;protected void addToResults(Map<String, Object> map) {     Message msg = getMessageForResponse(exchange).     for (Map.Entry<String, Object> en : map.entrySet()) {         msg.setHeader(en.getKey(), en.getValue()).     } }
false;protected;0;4;;@SuppressWarnings("unchecked") protected Map<String, AttributeValue> determineKey() {     return exchange.getIn().getHeader(DdbConstants.KEY, Map.class). }
false;protected;0;4;;@SuppressWarnings("unchecked") protected Collection<String> determineAttributeNames() {     return exchange.getIn().getHeader(DdbConstants.ATTRIBUTE_NAMES, Collection.class). }
false;protected;0;3;;protected Boolean determineConsistentRead() {     return exchange.getIn().getHeader(DdbConstants.CONSISTENT_READ, configuration.isConsistentRead(), Boolean.class). }
