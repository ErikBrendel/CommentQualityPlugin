commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getAccessKey() {     return accessKey. }
true;public;1;3;/**  * Amazon AWS Access Key  */ ;/**  * Amazon AWS Access Key  */ public void setAccessKey(String accessKey) {     this.accessKey = accessKey. }
false;public;0;3;;public String getSecretKey() {     return secretKey. }
true;public;1;3;/**  * Amazon AWS Secret Key  */ ;/**  * Amazon AWS Secret Key  */ public void setSecretKey(String secretKey) {     this.secretKey = secretKey. }
false;public;0;3;;public AmazonDynamoDB getAmazonDDBClient() {     return amazonDDBClient. }
true;public;1;3;/**  * To use the AmazonDynamoDB as the client  */ ;/**  * To use the AmazonDynamoDB as the client  */ public void setAmazonDDBClient(AmazonDynamoDB amazonDDBClient) {     this.amazonDDBClient = amazonDDBClient. }
false;public;0;3;;public String getTableName() {     return tableName. }
true;public;1;3;/**  * The name of the table currently worked with.  */ ;/**  * The name of the table currently worked with.  */ public void setTableName(String tableName) {     this.tableName = tableName. }
false;public;0;3;;public DdbOperations getOperation() {     return operation. }
true;public;1;3;/**  * What operation to perform  */ ;/**  * What operation to perform  */ public void setOperation(DdbOperations operation) {     this.operation = operation. }
false;public;0;3;;public boolean isConsistentRead() {     return consistentRead. }
true;public;1;3;/**  * Determines whether or not strong consistency should be enforced when data is read.  */ ;/**  * Determines whether or not strong consistency should be enforced when data is read.  */ public void setConsistentRead(boolean consistentRead) {     this.consistentRead = consistentRead. }
false;public;0;3;;public Long getReadCapacity() {     return readCapacity. }
true;public;1;3;/**  * The provisioned throughput to reserve for reading resources from your table  */ ;/**  * The provisioned throughput to reserve for reading resources from your table  */ public void setReadCapacity(Long readCapacity) {     this.readCapacity = readCapacity. }
false;public;0;3;;public Long getWriteCapacity() {     return writeCapacity. }
true;public;1;3;/**  * The provisioned throughput to reserved for writing resources to your table  */ ;/**  * The provisioned throughput to reserved for writing resources to your table  */ public void setWriteCapacity(Long writeCapacity) {     this.writeCapacity = writeCapacity. }
false;public;0;3;;public String getKeyAttributeName() {     return keyAttributeName. }
true;public;1;3;/**  * Attribute name when creating table  */ ;/**  * Attribute name when creating table  */ public void setKeyAttributeName(String keyAttributeName) {     this.keyAttributeName = keyAttributeName. }
false;public;0;3;;public String getKeyAttributeType() {     return keyAttributeType. }
true;public;1;3;/**  * Attribute type when creating table  */ ;/**  * Attribute type when creating table  */ public void setKeyAttributeType(String keyAttributeType) {     this.keyAttributeType = keyAttributeType. }
false;public;0;3;;public String getProxyHost() {     return proxyHost. }
true;public;1;3;/**  * To define a proxy host when instantiating the DDB client  */ ;/**  * To define a proxy host when instantiating the DDB client  */ public void setProxyHost(String proxyHost) {     this.proxyHost = proxyHost. }
false;public;0;3;;public Integer getProxyPort() {     return proxyPort. }
true;public;1;3;/**  * To define a proxy port when instantiating the DDB client  */ ;/**  * To define a proxy port when instantiating the DDB client  */ public void setProxyPort(Integer proxyPort) {     this.proxyPort = proxyPort. }
false;public;0;3;;public String getRegion() {     return region. }
true;public;1;3;/**  * The region in which DDB client needs to work  */ ;/**  * The region in which DDB client needs to work  */ public void setRegion(String region) {     this.region = region. }
false;public;0;7;;// ************************************************* //  // ************************************************* public DdbConfiguration copy() {     try {         return (DdbConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
