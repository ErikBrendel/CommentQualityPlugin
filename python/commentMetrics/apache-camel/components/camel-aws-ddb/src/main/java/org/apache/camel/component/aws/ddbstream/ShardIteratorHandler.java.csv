commented;modifiers;parameterAmount;loc;comment;code
false;;1;38;;String getShardIterator(String resumeFromSequenceNumber) {     ShardIteratorType iteratorType = getEndpoint().getConfiguration().getIteratorType().     String sequenceNumber = getEndpoint().getSequenceNumber().     if (resumeFromSequenceNumber != null) {         // Reset things as we're in an error condition.         currentShard = null.         currentShardIterator = null.         iteratorType = ShardIteratorType.AFTER_SEQUENCE_NUMBER.         sequenceNumber = resumeFromSequenceNumber.     }     // either return a cached one or get a new one via a GetShardIterator request.     if (currentShardIterator == null) {         ListStreamsResult streamsListResult = getClient().listStreams(new ListStreamsRequest().withTableName(getEndpoint().getConfiguration().getTableName())).         // XXX assumes there is only one stream         final String streamArn = streamsListResult.getStreams().get(0).getStreamArn().         DescribeStreamResult streamDescriptionResult = getClient().describeStream(new DescribeStreamRequest().withStreamArn(streamArn)).         shardList.addAll(streamDescriptionResult.getStreamDescription().getShards()).         LOG.trace("Current shard is: {} (in {})", currentShard, shardList).         if (currentShard == null) {             currentShard = resolveNewShard(iteratorType, resumeFromSequenceNumber).         } else {             currentShard = shardList.nextAfter(currentShard).         }         shardList.removeOlderThan(currentShard).         LOG.trace("Next shard is: {} (in {})", currentShard, shardList).         GetShardIteratorResult result = getClient().getShardIterator(buildGetShardIteratorRequest(streamArn, iteratorType, sequenceNumber)).         currentShardIterator = result.getShardIterator().     }     LOG.trace("Shard Iterator is: {}", currentShardIterator).     return currentShardIterator. }
false;private;3;30;;private GetShardIteratorRequest buildGetShardIteratorRequest(final String streamArn, ShardIteratorType iteratorType, String sequenceNumber) {     GetShardIteratorRequest req = new GetShardIteratorRequest().withStreamArn(streamArn).withShardId(currentShard.getShardId()).withShardIteratorType(iteratorType).     switch(iteratorType) {         case AFTER_SEQUENCE_NUMBER:         case AT_SEQUENCE_NUMBER:             // a sequence number.             if (BigIntComparisons.Conditions.LTEQ.matches(new BigInteger(currentShard.getSequenceNumberRange().getStartingSequenceNumber()), new BigInteger(sequenceNumber))) {                 req = req.withSequenceNumber(sequenceNumber).             } else {                 req = req.withShardIteratorType(ShardIteratorType.TRIM_HORIZON).             }             break.         default:     }     return req. }
false;private;2;13;;private Shard resolveNewShard(ShardIteratorType type, String resumeFrom) {     switch(type) {         case AFTER_SEQUENCE_NUMBER:             return shardList.afterSeq(resumeFrom != null ? resumeFrom : getEndpoint().getSequenceNumber()).         case AT_SEQUENCE_NUMBER:             return shardList.atSeq(getEndpoint().getSequenceNumber()).         case TRIM_HORIZON:             return shardList.first().         case LATEST:         default:             return shardList.last().     } }
false;;1;3;;void updateShardIterator(String nextShardIterator) {     this.currentShardIterator = nextShardIterator. }
false;;0;3;;DdbStreamEndpoint getEndpoint() {     return endpoint. }
false;private;0;3;;private AmazonDynamoDBStreams getClient() {     return getEndpoint().getClient(). }
