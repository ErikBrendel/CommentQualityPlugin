commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("Not supported yet."). }
false;public;1;7;;@Override public Consumer createConsumer(Processor processor) throws Exception {     DdbStreamConsumer consumer = new DdbStreamConsumer(this, processor).     consumer.setSchedulerProperties(consumer.getEndpoint().getSchedulerProperties()).     configureConsumer(consumer).     return consumer. }
false;;1;6;;Exchange createExchange(Record record) {     Exchange ex = super.createExchange().     ex.getIn().setBody(record, Record.class).     return ex. }
false;public;0;7;;@Override public void doStart() throws Exception {     super.doStart().     ddbStreamClient = configuration.getAmazonDynamoDbStreamsClient() != null ? configuration.getAmazonDynamoDbStreamsClient() : createDdbStreamClient(). }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAmazonDynamoDbStreamsClient())) {         if (ddbStreamClient != null) {             ddbStreamClient.shutdown().         }     }     super.doStop(). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public DdbStreamConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public AmazonDynamoDBStreams getClient() {     return ddbStreamClient. }
false;public;0;15;;public String getSequenceNumber() {     switch(configuration.getIteratorType()) {         case AFTER_SEQUENCE_NUMBER:         case AT_SEQUENCE_NUMBER:             if (null == configuration.getSequenceNumberProvider()) {                 throw new IllegalStateException("sequenceNumberProvider must be" + " provided, either as an implementation of" + " SequenceNumberProvider or a literal String.").             } else {                 return configuration.getSequenceNumberProvider().getSequenceNumber().             }         default:             return "".     } }
false;;0;32;;AmazonDynamoDBStreams createDdbStreamClient() {     AmazonDynamoDBStreams client = null.     ClientConfiguration clientConfiguration = null.     AmazonDynamoDBStreamsClientBuilder clientBuilder = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonDynamoDBStreamsClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonDynamoDBStreamsClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonDynamoDBStreamsClientBuilder.standard().         } else {             clientBuilder = AmazonDynamoDBStreamsClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(configuration.getRegion()).     }     client = clientBuilder.build().     return client. }
false;public;0;10;;@Override public String toString() {     return "DdbStreamEndpoint{" + "tableName=" + configuration.getTableName() + ", amazonDynamoDbStreamsClient=[redacted], maxResultsPerRequest=" + configuration.getMaxResultsPerRequest() + ", iteratorType=" + configuration.getIteratorType() + ", sequenceNumberProvider=" + configuration.getSequenceNumberProvider() + ", uri=" + getEndpointUri() + '}'. }
