commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;27;;@Override protected int poll() throws Exception {     GetRecordsResult result.     try {         GetRecordsRequest req = new GetRecordsRequest().withShardIterator(shardIteratorHandler.getShardIterator(null)).withLimit(getEndpoint().getConfiguration().getMaxResultsPerRequest()).         result = getClient().getRecords(req).     } catch (ExpiredIteratorException e) {         log.warn("Expired Shard Iterator, attempting to resume from {}", lastSeenSequenceNumber, e).         GetRecordsRequest req = new GetRecordsRequest().withShardIterator(shardIteratorHandler.getShardIterator(lastSeenSequenceNumber)).withLimit(getEndpoint().getConfiguration().getMaxResultsPerRequest()).         result = getClient().getRecords(req).     }     List<Record> records = result.getRecords().     Queue<Exchange> exchanges = createExchanges(records, lastSeenSequenceNumber).     int processedExchangeCount = processBatch(CastUtils.cast(exchanges)).     shardIteratorHandler.updateShardIterator(result.getNextShardIterator()).     if (!records.isEmpty()) {         lastSeenSequenceNumber = records.get(records.size() - 1).getDynamodb().getSequenceNumber().     }     return processedExchangeCount. }
false;public;1;4;;@Override public void done(boolean doneSync) {     log.trace("Processing exchange [{}] done.", exchange). }
false;public;1;17;;@Override public int processBatch(Queue<Object> exchanges) throws Exception {     int processedExchanges = 0.     while (!exchanges.isEmpty()) {         final Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll()).         log.trace("Processing exchange [{}] started.", exchange).         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 log.trace("Processing exchange [{}] done.", exchange).             }         }).         processedExchanges++.     }     return processedExchanges. }
false;private;0;3;;private AmazonDynamoDBStreams getClient() {     return getEndpoint().getClient(). }
false;public;0;4;;@Override public DdbStreamEndpoint getEndpoint() {     return (DdbStreamEndpoint) super.getEndpoint(). }
false;private;2;27;;private Queue<Exchange> createExchanges(List<Record> records, String lastSeenSequenceNumber) {     Queue<Exchange> exchanges = new ArrayDeque<>().     BigIntComparisons condition = null.     BigInteger providedSeqNum = null.     if (lastSeenSequenceNumber != null) {         providedSeqNum = new BigInteger(lastSeenSequenceNumber).         condition = BigIntComparisons.Conditions.LT.     }     switch(getEndpoint().getConfiguration().getIteratorType()) {         case AFTER_SEQUENCE_NUMBER:             condition = BigIntComparisons.Conditions.LT.             providedSeqNum = new BigInteger(getEndpoint().getConfiguration().getSequenceNumberProvider().getSequenceNumber()).             break.         case AT_SEQUENCE_NUMBER:             condition = BigIntComparisons.Conditions.LTEQ.             providedSeqNum = new BigInteger(getEndpoint().getConfiguration().getSequenceNumberProvider().getSequenceNumber()).             break.         default:     }     for (Record record : records) {         BigInteger recordSeqNum = new BigInteger(record.getDynamodb().getSequenceNumber()).         if (condition == null || condition.matches(providedSeqNum, recordSeqNum)) {             exchanges.add(getEndpoint().createExchange(record)).         }     }     return exchanges. }
