commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() throws Exception {     SimpleRegistry registry = new SimpleRegistry().     registry.put("someSeqNumProv", sequenceNumberProvider).     registry.put("ddbStreamsClient", amazonDynamoDBStreams).     context = new DefaultCamelContext(registry). }
false;public;0;11;;@Test public void itExtractsTheSequenceNumber() throws Exception {     when(sequenceNumberProvider.getSequenceNumber()).thenReturn("seq").     DdbStreamEndpoint undertest = (DdbStreamEndpoint) context.getEndpoint("aws-ddbstream://table" + "?amazonDynamoDbStreamsClient=#ddbStreamsClient" + "&iteratorType=AFTER_SEQUENCE_NUMBER" + "&sequenceNumberProvider=#someSeqNumProv").     assertThat(undertest.getSequenceNumber(), is("seq")). }
false;public;0;10;;@Test public void itExtractsTheSequenceNumberFromALiteralString() throws Exception {     DdbStreamEndpoint undertest = (DdbStreamEndpoint) context.getEndpoint("aws-ddbstream://table" + "?amazonDynamoDbStreamsClient=#ddbStreamsClient" + "&iteratorType=AFTER_SEQUENCE_NUMBER" + "&sequenceNumberProvider=seq").     assertThat(undertest.getSequenceNumber(), is("seq")). }
false;public;0;10;;@Test public void onSequenceNumberAgnosticIteratorsTheProviderIsIgnored() throws Exception {     DdbStreamEndpoint undertest = (DdbStreamEndpoint) context.getEndpoint("aws-ddbstream://table" + "?amazonDynamoDbStreamsClient=#ddbStreamsClient" + "&iteratorType=LATEST" + "&sequenceNumberProvider=#someSeqNumProv").     assertThat(undertest.getSequenceNumber(), is("")).     verify(sequenceNumberProvider, never()).getSequenceNumber(). }
false;public;0;10;;@Test public void sequenceNumberFetchingThrowsSomethingUsefulIfMisconfigurered() throws Exception {     expectedException.expectMessage(containsString("sequenceNumberProvider")).     DdbStreamEndpoint undertest = (DdbStreamEndpoint) context.getEndpoint("aws-ddbstream://table" + "?amazonDynamoDbStreamsClient=#ddbStreamsClient" + // NOTE: missing sequence number provider parameter     "&iteratorType=AT_SEQUENCE_NUMBER").     undertest.getSequenceNumber(). }
