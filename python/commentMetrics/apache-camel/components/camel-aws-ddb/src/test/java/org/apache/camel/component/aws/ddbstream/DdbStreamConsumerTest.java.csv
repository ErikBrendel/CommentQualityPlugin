commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Before public void setup() throws Exception {     endpoint.getConfiguration().setAmazonDynamoDbStreamsClient(amazonDynamoDBStreams).     endpoint.start().     undertest = new DdbStreamConsumer(endpoint, processor, shardIteratorHandler).     final Map<String, String> shardIterators = new HashMap<>().     shardIterators.put("shard_iterator_a_000", "shard_iterator_a_001").     shardIterators.put("shard_iterator_b_000", "shard_iterator_b_001").     shardIterators.put("shard_iterator_b_001", "shard_iterator_b_002").     shardIterators.put("shard_iterator_c_000", "shard_iterator_c_001").     shardIterators.put("shard_iterator_d_000", "shard_iterator_d_001").     final Map<String, Collection<Record>> answers = new HashMap<>().     answers.put("shard_iterator_a_001", createRecords("2")).     answers.put("shard_iterator_b_000", createRecords("9")).     answers.put("shard_iterator_b_001", createRecords("11", "13")).     answers.put("shard_iterator_b_002", createRecords("14")).     answers.put("shard_iterator_d_000", createRecords("21", "25")).     answers.put("shard_iterator_d_001", createRecords("30", "35", "40")).     recordsAnswer = new GetRecordsAnswer(shardIterators, answers).     when(amazonDynamoDBStreams.getRecords(any(GetRecordsRequest.class))).thenAnswer(recordsAnswer). }
false;;2;11;;String pad(String num, int to) {     // lazy padding     switch(num.length()) {         case 1:             return "00" + num.         case 2:             return "0" + num.         default:             return num.     } }
false;public;0;21;;@Test public void itResumesFromAfterTheLastSeenSequenceNumberWhenAShardIteratorHasExpired() throws Exception {     endpoint.getConfiguration().setIteratorType(ShardIteratorType.LATEST).     when(shardIteratorHandler.getShardIterator(ArgumentMatchers.isNull())).thenReturn("shard_iterator_b_000", "shard_iterator_b_001").     when(shardIteratorHandler.getShardIterator(ArgumentMatchers.anyString())).thenReturn("shard_iterator_b_001").     when(amazonDynamoDBStreams.getRecords(any(GetRecordsRequest.class))).thenAnswer(recordsAnswer).thenThrow(new ExpiredIteratorException("expired shard")).thenAnswer(recordsAnswer).     undertest.poll().     undertest.poll().     ArgumentCaptor<Exchange> exchangeCaptor = ArgumentCaptor.forClass(Exchange.class).     verify(processor, times(3)).process(exchangeCaptor.capture(), any(AsyncCallback.class)).     // first poll. Second poll, getRecords fails with an expired shard.     verify(shardIteratorHandler, times(2)).getShardIterator(null).     // second poll, with a resumeFrom.     verify(shardIteratorHandler).getShardIterator("9").     assertThat(exchangeCaptor.getAllValues().get(0).getIn().getBody(Record.class).getDynamodb().getSequenceNumber(), is("9")).     assertThat(exchangeCaptor.getAllValues().get(1).getIn().getBody(Record.class).getDynamodb().getSequenceNumber(), is("11")).     assertThat(exchangeCaptor.getAllValues().get(2).getIn().getBody(Record.class).getDynamodb().getSequenceNumber(), is("13")). }
false;public;0;16;;@Test public void atSeqNumber35GivesFirstRecordWithSeq35() throws Exception {     endpoint.getConfiguration().setIteratorType(ShardIteratorType.AT_SEQUENCE_NUMBER).     endpoint.getConfiguration().setSequenceNumberProvider(new StaticSequenceNumberProvider("35")).     when(shardIteratorHandler.getShardIterator(ArgumentMatchers.isNull())).thenReturn("shard_iterator_d_001", "shard_iterator_d_002").     for (int i = 0. i < 10. ++i) {         // poll lots.         undertest.poll().     }     ArgumentCaptor<Exchange> exchangeCaptor = ArgumentCaptor.forClass(Exchange.class).     verify(processor, times(2)).process(exchangeCaptor.capture(), any(AsyncCallback.class)).     assertThat(exchangeCaptor.getAllValues().get(0).getIn().getBody(Record.class).getDynamodb().getSequenceNumber(), is("35")).     assertThat(exchangeCaptor.getAllValues().get(1).getIn().getBody(Record.class).getDynamodb().getSequenceNumber(), is("40")). }
false;public;0;15;;@Test public void afterSeqNumber35GivesFirstRecordWithSeq40() throws Exception {     endpoint.getConfiguration().setIteratorType(ShardIteratorType.AFTER_SEQUENCE_NUMBER).     endpoint.getConfiguration().setSequenceNumberProvider(new StaticSequenceNumberProvider("35")).     when(shardIteratorHandler.getShardIterator(ArgumentMatchers.isNull())).thenReturn("shard_iterator_d_001", "shard_iterator_d_002").     for (int i = 0. i < 10. ++i) {         // poll lots.         undertest.poll().     }     ArgumentCaptor<Exchange> exchangeCaptor = ArgumentCaptor.forClass(Exchange.class).     verify(processor, times(1)).process(exchangeCaptor.capture(), any(AsyncCallback.class)).     assertThat(exchangeCaptor.getAllValues().get(0).getIn().getBody(Record.class).getDynamodb().getSequenceNumber(), is("40")). }
false;private,static;1;11;;private static Collection<Record> createRecords(String... sequenceNumbers) {     List<Record> results = new ArrayList<>().     for (String seqNum : sequenceNumbers) {         results.add(new Record().withDynamodb(new StreamRecord().withSequenceNumber(seqNum))).     }     return results. }
false;public;1;20;;@Override public GetRecordsResult answer(InvocationOnMock invocation) throws Throwable {     final String shardIterator = ((GetRecordsRequest) invocation.getArguments()[0]).getShardIterator().     // note that HashMap returns null when there is no entry in the map.     // A null 'nextShardIterator' indicates that the shard has finished     // and we should move onto the next shard.     String nextShardIterator = shardIterators.get(shardIterator).     Matcher m = shardIteratorPattern.matcher(shardIterator).     Collection<Record> ans = answers.get(shardIterator).     if (nextShardIterator == null && m.matches()) {         // last shard iterates forever.         Integer num = Integer.parseInt(m.group(1)).         nextShardIterator = "shard_iterator_d_" + pad(Integer.toString(num + 1), 3).     }     if (null == ans) {         // default to an empty list of records.         ans = createRecords().     }     return new GetRecordsResult().withRecords(ans).withNextShardIterator(nextShardIterator). }
