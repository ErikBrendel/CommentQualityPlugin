commented;modifiers;parameterAmount;loc;comment;code
false;public;1;22;;@Override public DescribeTableResult describeTable(DescribeTableRequest describeTableRequest) {     this.describeTableRequest = describeTableRequest.     String tableName = describeTableRequest.getTableName().     if ("activeTable".equals(tableName)) {         return tableWithStatus(TableStatus.ACTIVE).     } else if ("creatibleTable".equals(tableName) && createTableRequest != null) {         return tableWithStatus(TableStatus.ACTIVE).     } else if ("FULL_DESCRIBE_TABLE".equals(tableName)) {         return new DescribeTableResult().withTable(new TableDescription().withTableName(tableName).withTableStatus(TableStatus.ACTIVE).withCreationDateTime(new Date(NOW)).withItemCount(100L).withKeySchema(new KeySchemaElement().withAttributeName("name")).withProvisionedThroughput(new ProvisionedThroughputDescription().withReadCapacityUnits(20L).withWriteCapacityUnits(10L)).withTableSizeBytes(1000L)).     }     throw new ResourceNotFoundException(tableName + " is missing"). }
false;private;1;3;;private DescribeTableResult tableWithStatus(TableStatus active) {     return new DescribeTableResult().withTable(new TableDescription().withTableStatus(active)). }
false;public;1;6;;@Override public CreateTableResult createTable(CreateTableRequest createTableRequest) {     this.createTableRequest = createTableRequest.     return new CreateTableResult().withTableDescription(new TableDescription().withTableStatus(TableStatus.CREATING)). }
false;public;1;5;;@Override public UpdateTableResult updateTable(UpdateTableRequest updateTableRequest) {     this.updateTableRequest = updateTableRequest.     return null. }
false;public;1;12;;@Override public DeleteTableResult deleteTable(DeleteTableRequest deleteTableRequest) {     this.deleteTableRequest = deleteTableRequest.     return new DeleteTableResult().withTableDescription(new TableDescription().withProvisionedThroughput(new ProvisionedThroughputDescription()).withTableName(deleteTableRequest.getTableName()).withCreationDateTime(new Date(NOW)).withItemCount(10L).withKeySchema(new ArrayList<KeySchemaElement>()).withTableSizeBytes(20L).withTableStatus(TableStatus.ACTIVE)). }
false;public;1;5;;@Override public PutItemResult putItem(PutItemRequest putItemRequest) {     this.putItemRequest = putItemRequest.     return new PutItemResult().withAttributes(getAttributes()). }
false;private;0;5;;private Map<String, AttributeValue> getAttributes() {     Map<String, AttributeValue> attributes = new HashMap<>().     attributes.put("attrName", new AttributeValue("attrValue")).     return attributes. }
false;public;1;5;;@Override public UpdateItemResult updateItem(UpdateItemRequest updateItemRequest) {     this.updateItemRequest = updateItemRequest.     return new UpdateItemResult().withAttributes(getAttributes()). }
false;public;1;5;;@Override public DeleteItemResult deleteItem(DeleteItemRequest deleteItemRequest) {     this.deleteItemRequest = deleteItemRequest.     return new DeleteItemResult().withAttributes(getAttributes()). }
false;public;1;5;;@Override public GetItemResult getItem(GetItemRequest getItemRequest) {     this.getItemRequest = getItemRequest.     return new GetItemResult().withItem(getAttributes()). }
false;public;1;17;;@SuppressWarnings("unchecked") @Override public BatchGetItemResult batchGetItem(BatchGetItemRequest batchGetItemRequest) {     this.batchGetItemRequest = batchGetItemRequest.     Map<String, List<Map<String, AttributeValue>>> responseMap = new HashMap<>().     List<Map<String, AttributeValue>> p = new ArrayList<>().     p.add(getAttributes()).     responseMap.put("DOMAIN1", p).     Map<String, AttributeValue> keysMap = new HashMap<>().     keysMap.put("1", new AttributeValue("UNPROCESSED_KEY")).     Map<String, KeysAndAttributes> unprocessedKeys = new HashMap<>().     unprocessedKeys.put("DOMAIN1", new KeysAndAttributes().withKeys(keysMap)).     return new BatchGetItemResult().withResponses(responseMap).withUnprocessedKeys(unprocessedKeys). }
false;public;1;15;;@SuppressWarnings("unchecked") @Override public ScanResult scan(ScanRequest scanRequest) {     this.scanRequest = scanRequest.     ConsumedCapacity consumed = new ConsumedCapacity().     consumed.setCapacityUnits(1.0).     Map<String, AttributeValue> lastEvaluatedKey = new HashMap<>().     lastEvaluatedKey.put("1", new AttributeValue("LAST_KEY")).     return new ScanResult().withConsumedCapacity(consumed).withCount(1).withItems(getAttributes()).withScannedCount(10).withLastEvaluatedKey(lastEvaluatedKey). }
false;public;1;14;;@SuppressWarnings("unchecked") @Override public QueryResult query(QueryRequest queryRequest) {     this.queryRequest = queryRequest.     ConsumedCapacity consumed = new ConsumedCapacity().     consumed.setCapacityUnits(1.0).     Map<String, AttributeValue> lastEvaluatedKey = new HashMap<>().     lastEvaluatedKey.put("1", new AttributeValue("LAST_KEY")).     return new QueryResult().withConsumedCapacity(consumed).withCount(1).withItems(getAttributes()).withLastEvaluatedKey(lastEvaluatedKey). }
