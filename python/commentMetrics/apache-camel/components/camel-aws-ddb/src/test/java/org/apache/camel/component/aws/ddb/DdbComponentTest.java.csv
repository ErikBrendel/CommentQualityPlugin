commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void whenTableExistsThenDoesntCreateItOnStart() throws Exception {     assertNull(amazonDDBClient.createTableRequest). }
false;public;0;6;;@Test public void whenTableIsMissingThenCreateItOnStart() throws Exception {     DefaultProducerTemplate.newInstance(context, "aws-ddb://creatibleTable?amazonDDBClient=#amazonDDBClient").     assertEquals("creatibleTable", amazonDDBClient.createTableRequest.getTableName()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void createEndpointWithOnlySecretKeyConfiguration() throws Exception {     DdbComponent component = new DdbComponent(context).     component.createEndpoint("aws-ddb://activeTable?secretKey=xxx"). }
false;public;0;5;;@Test public void createEndpointWithoutSecretKeyAndAccessKeyConfiguration() throws Exception {     DdbComponent component = new DdbComponent(context).     component.createEndpoint("aws-ddb://activeTable?amazonDDBClient=#amazonDDBClient"). }
false;public;0;5;;@Test public void createEndpointWithOnlyAccessKeyAndSecretKey() throws Exception {     DdbComponent component = new DdbComponent(context).     component.createEndpoint("aws-ddb://activeTable?accessKey=xxx&secretKey=yyy"). }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     amazonDDBClient = new AmazonDDBClientMock().     registry.bind("amazonDDBClient", amazonDDBClient).     return registry. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("aws-ddb://activeTable?amazonDDBClient=#amazonDDBClient"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("aws-ddb://activeTable?amazonDDBClient=#amazonDDBClient").         }     }. }
