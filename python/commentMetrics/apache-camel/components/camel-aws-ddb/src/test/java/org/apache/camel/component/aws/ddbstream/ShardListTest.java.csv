commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void nextReturnsShardWithParent() throws Exception {     Shard first = new Shard().withShardId("first_shard").withParentShardId("other_shard_id").     Shard second = new Shard().withParentShardId("first_shard").withShardId("second_shard").     ShardList shards = new ShardList().     shards.add(first).     shards.add(second).     assertThat(shards.nextAfter(first), is(second)). }
false;public;0;14;;@Test public void nextWithNullReturnsFirstKnownShard() throws Exception {     Shard first = new Shard().withShardId("first_shard").     Shard second = new Shard().withParentShardId("first_shard").withShardId("second_shard").     ShardList shards = new ShardList().     shards.add(first).     shards.add(second).     assertThat(shards.nextAfter(first), is(second)). }
false;public;0;26;;@Test public void reAddingEntriesMaintainsOrder() throws Exception {     Shard first = new Shard().withShardId("first_shard").     Shard second = new Shard().withParentShardId("first_shard").withShardId("second_shard").     ShardList shards = new ShardList().     shards.add(first).     shards.add(second).     assertThat(shards.nextAfter(first), is(second)).     Shard second2 = new Shard().withParentShardId("first_shard").withShardId("second_shard").     Shard third = new Shard().withParentShardId("second_shard").withShardId("third_shard").     shards.add(second2).     shards.add(third).     assertThat(shards.nextAfter(first), is(second)).     assertThat(shards.nextAfter(second), is(third)). }
false;public;0;7;;@Test public void firstShardGetsTheFirstWithoutAParent() throws Exception {     ShardList shards = new ShardList().     shards.addAll(createShards(null, "a", "b", "c", "d")).     assertThat(shards.first().getShardId(), is("a")). }
false;public;0;7;;@Test public void firstShardGetsTheFirstWithAnUnknownParent() throws Exception {     ShardList shards = new ShardList().     shards.addAll(createShards("a", "b", "c", "d")).     assertThat(shards.first().getShardId(), is("b")). }
false;public;0;7;;@Test public void lastShardGetsTheShardWithNoChildren() throws Exception {     ShardList shards = new ShardList().     shards.addAll(createShards("a", "b", "c", "d")).     assertThat(shards.last().getShardId(), is("d")). }
false;public;0;8;;@Test public void removingShards() throws Exception {     ShardList shards = new ShardList().     shards.addAll(createShards(null, "a", "b", "c", "d")).     Shard removeBefore = new Shard().withShardId("c").withParentShardId("b").     shards.removeOlderThan(removeBefore).     assertThat(shards.first().getShardId(), is("c")). }
false;static;2;19;;static List<Shard> createShardsWithSequenceNumbers(String initialParent, String... shardIdsAndSeqNos) {     String previous = initialParent.     List<Shard> result = new ArrayList<>().     for (int i = 0. i < shardIdsAndSeqNos.length. i += 3) {         String id = shardIdsAndSeqNos[i].         String seqStart = shardIdsAndSeqNos[i + 1].         String seqEnd = shardIdsAndSeqNos[i + 2].         result.add(new Shard().withShardId(id).withParentShardId(previous).withSequenceNumberRange(new SequenceNumberRange().withStartingSequenceNumber(seqStart).withEndingSequenceNumber(seqEnd))).         previous = id.     }     return result. }
false;static;2;9;;static List<Shard> createShards(String initialParent, String... shardIds) {     String previous = initialParent.     List<Shard> result = new ArrayList<>().     for (String s : shardIds) {         result.add(new Shard().withShardId(s).withParentShardId(previous)).         previous = s.     }     return result. }
