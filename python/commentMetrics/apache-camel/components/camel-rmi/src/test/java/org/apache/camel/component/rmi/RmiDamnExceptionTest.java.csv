commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected int getStartPort() {     return 37501. }
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     if (classPathHasSpaces()) {         return null.     }     LocateRegistry.createRegistry(getPort()).     JndiRegistry context = super.createRegistry().     context.bind("echo", new EchoService()).     return context. }
false;public;0;18;;@Test public void tesDamn() throws Exception {     if (classPathHasSpaces()) {         return.     }     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:echo", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(DamnException.class, e.getCause()).         assertEquals("Damn this did not work", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     // setup the jmi server endpoint     RmiEndpoint echo = (RmiEndpoint) endpoint("rmi://localhost:" + getPort() + "/echo").     echo.setRemoteInterfaces(IEcho.class).     from(echo).to("bean:echo").     // and our route where we call the server     from("direct:echo").toF("rmi://localhost:%s/echo?method=damn", getPort()).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // setup the jmi server endpoint             RmiEndpoint echo = (RmiEndpoint) endpoint("rmi://localhost:" + getPort() + "/echo").             echo.setRemoteInterfaces(IEcho.class).             from(echo).to("bean:echo").             // and our route where we call the server             from("direct:echo").toF("rmi://localhost:%s/echo?method=damn", getPort()).to("mock:result").         }     }. }
