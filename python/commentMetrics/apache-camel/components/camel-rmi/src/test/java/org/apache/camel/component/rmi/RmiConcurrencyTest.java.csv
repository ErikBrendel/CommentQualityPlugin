commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected int getStartPort() {     return 37500. }
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     if (classPathHasSpaces()) {         return null.     }     LocateRegistry.createRegistry(getPort()).     JndiRegistry context = super.createRegistry().     context.bind("echo", new EchoService()).     return context. }
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;4;;public Object call() throws Exception {     template.sendBody("direct:echo", "" + index).     return null. }
false;private;2;23;;private void doSendMessages(int files, int poolSize) throws Exception {     if (classPathHasSpaces()) {         return.     }     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     getMockEndpoint("mock:result").message(0).body().contains("Echo").     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBody("direct:echo", "" + index).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;0;10;;@Override public void configure() throws Exception {     // setup the jmi server endpoint     RmiEndpoint echo = (RmiEndpoint) endpoint("rmi://localhost:" + getPort() + "/echo").     echo.setRemoteInterfaces(IEcho.class).     from(echo).to("bean:echo").     // and our route where we call the server     from("direct:echo").toF("rmi://localhost:%s/echo?method=echo", getPort()).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // setup the jmi server endpoint             RmiEndpoint echo = (RmiEndpoint) endpoint("rmi://localhost:" + getPort() + "/echo").             echo.setRemoteInterfaces(IEcho.class).             from(echo).to("bean:echo").             // and our route where we call the server             from("direct:echo").toF("rmi://localhost:%s/echo?method=echo", getPort()).to("mock:result").         }     }. }
