commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return false. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return uri.toString(). }
false;public;1;9;;public Consumer createConsumer(Processor processor) throws Exception {     ObjectHelper.notNull(uri, "uri").     if (remoteInterfaces == null || remoteInterfaces.size() == 0) {         throw new IllegalArgumentException("To create a RMI consumer, the RMI endpoint's remoteInterfaces property must be be configured.").     }     RmiConsumer answer = new RmiConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;4;;public Producer createProducer() throws Exception {     ObjectHelper.notNull(uri, "uri").     return new RmiProducer(this). }
false;public;0;11;;public String getName() {     String path = uri.getPath().     if (path == null) {         path = uri.getSchemeSpecificPart().     }     // skip leading slash     if (path.startsWith("/")) {         return path.substring(1).     }     return path. }
false;public;0;11;;public Registry getRegistry() throws RemoteException {     if (uri.getHost() != null) {         if (uri.getPort() == -1) {             return LocateRegistry.getRegistry(uri.getHost()).         } else {             return LocateRegistry.getRegistry(uri.getHost(), uri.getPort()).         }     } else {         return LocateRegistry.getRegistry().     } }
false;public;0;3;;public List<Class<?>> getRemoteInterfaces() {     return remoteInterfaces. }
true;public;1;6;/**  * To specific the remote interfaces.  */ ;/**  * To specific the remote interfaces.  */ public void setRemoteInterfaces(List<Class<?>> remoteInterfaces) {     this.remoteInterfaces = remoteInterfaces.     if (classLoader == null && !remoteInterfaces.isEmpty()) {         classLoader = remoteInterfaces.get(0).getClassLoader().     } }
false;public;1;3;;public void setRemoteInterfaces(Class<?>... remoteInterfaces) {     setRemoteInterfaces(Arrays.asList(remoteInterfaces)). }
false;public;0;3;;public ClassLoader getClassLoader() {     return classLoader. }
false;public;1;3;;public void setClassLoader(ClassLoader classLoader) {     this.classLoader = classLoader. }
false;public;0;3;;public int getPort() {     return port. }
false;public;1;3;;public void setPort(int port) {     this.port = port. }
false;public;0;3;;public String getMethod() {     return method. }
true;public;1;3;/**  * You can set the name of the method to invoke.  */ ;/**  * You can set the name of the method to invoke.  */ public void setMethod(String method) {     this.method = method. }
false;public;0;3;;public URI getUri() {     return uri. }
false;public;1;3;;public void setUri(URI uri) {     this.uri = uri. }
