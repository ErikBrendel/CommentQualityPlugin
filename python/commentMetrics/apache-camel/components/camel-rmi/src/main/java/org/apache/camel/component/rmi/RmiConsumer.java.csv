commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;23;;@Override protected void doStart() throws Exception {     Class<?>[] interfaces = new Class[endpoint.getRemoteInterfaces().size()].     endpoint.getRemoteInterfaces().toArray(interfaces).     proxy = (Remote) Proxy.newProxyInstance(endpoint.getClassLoader(), interfaces, this).     stub = UnicastRemoteObject.exportObject(proxy, endpoint.getPort()).     try {         Registry registry = endpoint.getRegistry().         String name = endpoint.getName().         registry.bind(name, stub).     } catch (Exception e) {         // Registration might fail.. clean up..         try {             UnicastRemoteObject.unexportObject(stub, true).         } catch (Throwable ignore) {         }         stub = null.         throw e.     }     super.doStart(). }
false;protected;0;11;;@Override protected void doStop() throws Exception {     super.doStop().     try {         Registry registry = endpoint.getRegistry().         registry.unbind(endpoint.getName()).     } catch (Throwable e) {     // do our best to unregister     }     UnicastRemoteObject.unexportObject(proxy, true). }
false;public;3;35;;public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     if (!isStarted()) {         throw new IllegalStateException("The endpoint is not active: " + getEndpoint().getEndpointUri()).     }     BeanInvocation invocation = new BeanInvocation(method, args).     Exchange exchange = getEndpoint().createExchange().     exchange.getIn().setBody(invocation).     try {         log.debug("Invoking {} with args {}", method, args).         getProcessor().process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     // is there a matching exception from the signature, then throw that     // or fallback and ensure the exception is thrown as a RemoteException     Throwable fault = exchange.getException().     if (fault != null) {         Object match = null.         for (Class<?> type : method.getExceptionTypes()) {             Object found = exchange.getException(type).             if (found != null) {                 match = found.                 break.             }         }         if (match instanceof Throwable) {             // we have a match             throw (Throwable) match.         } else {             throw new RemoteException("Error invoking " + method, fault).         }     }     return exchange.getOut().getBody(). }
false;public;0;3;;public Remote getProxy() {     return proxy. }
false;public;0;3;;public Remote getStub() {     return stub. }
