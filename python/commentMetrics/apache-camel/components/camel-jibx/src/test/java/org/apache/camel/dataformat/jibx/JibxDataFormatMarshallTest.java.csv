commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testMarshall() throws InterruptedException, ParserConfigurationException, IOException, SAXException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     PurchaseOrder purchaseOrder = new PurchaseOrder().     String name = "foo".     purchaseOrder.setName(name).     double price = 49.     purchaseOrder.setPrice(price).     double amount = 3.     purchaseOrder.setAmount(amount).     template.sendBody("direct:start", purchaseOrder).     assertMockEndpointsSatisfied().     String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class).     DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder().     Element root = builder.parse(new InputSource(new StringReader(body))).getDocumentElement().     assertEquals(name, root.getAttribute("name")).     assertEquals(price + "", root.getAttribute("price")).     assertEquals(amount + "", root.getAttribute("amount")). }
false;public;0;8;;public void configure() {     JibxDataFormat jibxDataFormat = new JibxDataFormat().     from("direct:start").marshal(jibxDataFormat).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             JibxDataFormat jibxDataFormat = new JibxDataFormat().             from("direct:start").marshal(jibxDataFormat).convertBodyTo(String.class).to("mock:result").         }     }. }
