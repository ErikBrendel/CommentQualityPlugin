commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "jibx". }
false;public;3;13;;public void marshal(Exchange exchange, Object body, OutputStream stream) throws Exception {     IBindingFactory bindingFactory = createBindingFactory(body.getClass(), bindingName).     IMarshallingContext marshallingContext = bindingFactory.createMarshallingContext().     marshallingContext.marshalDocument(body, null, null, stream).     if (contentTypeHeader) {         if (exchange.hasOut()) {             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "application/xml").         } else {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/xml").         }     } }
false;public;2;12;;public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     Class<?> unmarshallType = exchange.getIn().getHeader(UNMARSHALL_CLASS, Class.class).     if (unmarshallType == null) {         unmarshallType = getUnmarshallClass().     }     ObjectHelper.notNull(unmarshallType, "unmarshallClass or CamelJibxUnmarshallClass header").     IBindingFactory bindingFactory = createBindingFactory(unmarshallType, bindingName).     IUnmarshallingContext unmarshallingContext = bindingFactory.createUnmarshallingContext().     return unmarshallingContext.unmarshalDocument(stream, null). }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;0;3;;public Class<?> getUnmarshallClass() {     return unmarshallClass. }
false;public;1;3;;public void setUnmarshallClass(Class<?> unmarshallClass) {     this.unmarshallClass = unmarshallClass. }
false;public;0;3;;public String getBindingName() {     return bindingName. }
false;public;1;3;;public void setBindingName(String bindingName) {     this.bindingName = bindingName. }
false;public;0;3;;public boolean isContentTypeHeader() {     return contentTypeHeader. }
true;public;1;3;/**  * If enabled then Jibx will set the Content-Type header to <tt>application/xml</tt> when marshalling.  */ ;/**  * If enabled then Jibx will set the Content-Type header to <tt>application/xml</tt> when marshalling.  */ public void setContentTypeHeader(boolean contentTypeHeader) {     this.contentTypeHeader = contentTypeHeader. }
false;private;2;7;;private IBindingFactory createBindingFactory(Class<?> clazz, String bindingName) throws JiBXException {     if (bindingName == null) {         return BindingDirectory.getFactory(clazz).     } else {         return BindingDirectory.getFactory(bindingName, clazz).     } }
