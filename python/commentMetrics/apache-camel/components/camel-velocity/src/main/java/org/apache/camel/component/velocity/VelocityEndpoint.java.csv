commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public ExchangePattern getExchangePattern() {     return ExchangePattern.InOut. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "velocity:" + getResourceUri(). }
false;private,synchronized;0;42;;private synchronized VelocityEngine getVelocityEngine() throws Exception {     if (velocityEngine == null) {         velocityEngine = new VelocityEngine().         // set the class resolver as a property so we can access it from CamelVelocityClasspathResourceLoader         velocityEngine.addProperty("CamelClassResolver", getCamelContext().getClassResolver()).         // set default properties         Properties properties = new Properties().         properties.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_CACHE, isLoaderCache() ? "true" : "false").         properties.setProperty(RuntimeConstants.RESOURCE_LOADER, "file, class").         properties.setProperty("class.resource.loader.description", "Camel Velocity Classpath Resource Loader").         properties.setProperty("class.resource.loader.class", CamelVelocityClasspathResourceLoader.class.getName()).         final Logger velocityLogger = LoggerFactory.getLogger("org.apache.camel.maven.Velocity").         properties.setProperty(RuntimeConstants.RUNTIME_LOG_NAME, velocityLogger.getName()).         // load the velocity properties from property file which may overrides the default ones         if (ObjectHelper.isNotEmpty(getPropertiesFile())) {             InputStream reader = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), getPropertiesFile()).             try {                 properties.load(reader).                 log.info("Loaded the velocity configuration file {}", getPropertiesFile()).             } finally {                 IOHelper.close(reader, getPropertiesFile(), log).             }         }         log.debug("Initializing VelocityEngine with properties {}", properties).         // help the velocityEngine to load the CamelVelocityClasspathResourceLoader         ClassLoader old = Thread.currentThread().getContextClassLoader().         try {             ClassLoader delegate = new CamelVelocityDelegateClassLoader(old).             Thread.currentThread().setContextClassLoader(delegate).             velocityEngine.init(properties).         } finally {             Thread.currentThread().setContextClassLoader(old).         }     }     return velocityEngine. }
false;public;1;3;;public void setVelocityEngine(VelocityEngine velocityEngine) {     this.velocityEngine = velocityEngine. }
false;public;0;3;;public boolean isLoaderCache() {     return loaderCache. }
true;public;1;3;/**  * Enables / disables the velocity resource loader cache which is enabled by default  */ ;/**  * Enables / disables the velocity resource loader cache which is enabled by default  */ public void setLoaderCache(boolean loaderCache) {     this.loaderCache = loaderCache. }
true;public;1;3;/**  * Character encoding of the resource content.  */ ;/**  * Character encoding of the resource content.  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public String getEncoding() {     return encoding. }
true;public;1;3;/**  * The URI of the properties file which is used for VelocityEngine initialization.  */ ;/**  * The URI of the properties file which is used for VelocityEngine initialization.  */ public void setPropertiesFile(String file) {     propertiesFile = file. }
false;public;0;3;;public String getPropertiesFile() {     return propertiesFile. }
false;public;2;5;;public VelocityEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {     String newUri = uri.replace(getResourceUri(), newResourceUri).     log.debug("Getting endpoint with URI: {}", newUri).     return getCamelContext().getEndpoint(newUri, VelocityEndpoint.class). }
false;protected;1;59;;@Override protected void onExchange(Exchange exchange) throws Exception {     String path = getResourceUri().     ObjectHelper.notNull(path, "resourceUri").     String newResourceUri = exchange.getIn().getHeader(VelocityConstants.VELOCITY_RESOURCE_URI, String.class).     if (newResourceUri != null) {         exchange.getIn().removeHeader(VelocityConstants.VELOCITY_RESOURCE_URI).         log.debug("{} set to {} creating new endpoint to handle exchange", VelocityConstants.VELOCITY_RESOURCE_URI, newResourceUri).         VelocityEndpoint newEndpoint = findOrCreateEndpoint(getEndpointUri(), newResourceUri).         newEndpoint.onExchange(exchange).         return.     }     Reader reader.     String content = exchange.getIn().getHeader(VelocityConstants.VELOCITY_TEMPLATE, String.class).     if (content != null) {         // use content from header         reader = new StringReader(content).         if (log.isDebugEnabled()) {             log.debug("Velocity content read from header {} for endpoint {}", VelocityConstants.VELOCITY_TEMPLATE, getEndpointUri()).         }         // remove the header to avoid it being propagated in the routing         exchange.getIn().removeHeader(VelocityConstants.VELOCITY_TEMPLATE).     } else {         if (log.isDebugEnabled()) {             log.debug("Velocity content read from resource {} with resourceUri: {} for endpoint {}", getResourceUri(), path, getEndpointUri()).         }         reader = getEncoding() != null ? new InputStreamReader(getResourceAsInputStream(), getEncoding()) : new InputStreamReader(getResourceAsInputStream()).     }     // getResourceAsInputStream also considers the content cache     StringWriter buffer = new StringWriter().     String logTag = getClass().getName().     Context velocityContext = exchange.getIn().getHeader(VelocityConstants.VELOCITY_CONTEXT, Context.class).     if (velocityContext == null) {         Map<String, Object> variableMap = ExchangeHelper.createVariableMap(exchange).         @SuppressWarnings("unchecked")         Map<String, Object> supplementalMap = exchange.getIn().getHeader(VelocityConstants.VELOCITY_SUPPLEMENTAL_CONTEXT, Map.class).         if (supplementalMap != null) {             variableMap.putAll(supplementalMap).         }         velocityContext = new VelocityContext(variableMap).     }     // let velocity parse and generate the result in buffer     VelocityEngine engine = getVelocityEngine().     log.debug("Velocity is evaluating using velocity context: {}", velocityContext).     engine.evaluate(velocityContext, buffer, logTag, reader).     // now lets output the results to the exchange     Message out = exchange.getOut().     out.setBody(buffer.toString()).     out.setHeaders(exchange.getIn().getHeaders()).     out.setAttachments(exchange.getIn().getAttachments()). }
