commented;modifiers;parameterAmount;loc;comment;code
false;private;0;9;;private Exchange createLetter() {     Exchange exchange = context.getEndpoint("direct:a").createExchange().     Message msg = exchange.getIn().     msg.setHeader("firstName", "Claus").     msg.setHeader("lastName", "Ibsen").     msg.setHeader("item", "Camel in Action").     msg.setBody("PS: Next beer is on me, James").     return exchange. }
false;public;0;19;;@Test public void testVelocityLetter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body(String.class).contains("Thanks for the order of Camel in Action").     template.send("direct:a", createLetter()).     mock.assertIsSatisfied().     mock.reset().     mock.expectedMessageCount(1).     mock.message(0).body(String.class).contains("Regards Apache Camel Riders Bookstore").     template.send("direct:a", createLetter()).     mock.assertIsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     MyBean bean = new MyBean().     from("direct:a").bean(bean).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             MyBean bean = new MyBean().             from("direct:a").bean(bean).to("mock:result").         }     }. }
false;public;1;7;;public void sendToNewTemplate(Exchange exchange) throws Exception {     if (template == null) {         template = exchange.getContext().createProducerTemplate().     }     template.send("velocity:" + getNewTemplate(), exchange).     useLetter2 = !useLetter2. }
false;private;0;7;;private String getNewTemplate() {     if (useLetter2) {         return "org/apache/camel/component/velocity/letter2.vm".     } else {         return "org/apache/camel/component/velocity/letter.vm".     } }
