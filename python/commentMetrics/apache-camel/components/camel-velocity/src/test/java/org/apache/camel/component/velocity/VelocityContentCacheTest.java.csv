commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     super.setUp().     // create a vm file in the classpath as this is the tricky reloading stuff     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Hello $headers.name", Exchange.FILE_NAME, "hello.vm"). }
false;public;0;4;;@Override public boolean useJmx() {     return true. }
false;public;0;18;;@Test public void testNotCached() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello London").     template.sendBodyAndHeader("direct:a", "Body", "name", "London").     mock.assertIsSatisfied().     // now change content in the file in the classpath and try again     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Bye $headers.name", Exchange.FILE_NAME, "hello.vm").     mock.reset().     mock.expectedBodiesReceived("Bye Paris", "Bye World").     template.sendBodyAndHeader("direct:a", "Body", "name", "Paris").     template.sendBodyAndHeader("direct:a", "Body", "name", "World").     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testCached() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello London").     template.sendBodyAndHeader("direct:b", "Body", "name", "London").     mock.assertIsSatisfied().     // now change content in the file in the classpath and try again     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Bye $headers.name", Exchange.FILE_NAME, "hello.vm").     mock.reset().     // we must expected the original filecontent as the cache is enabled, so its Hello and not Bye     mock.expectedBodiesReceived("Hello Paris").     template.sendBodyAndHeader("direct:b", "Body", "name", "Paris").     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testCachedIsDefault() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello London").     template.sendBodyAndHeader("direct:c", "Body", "name", "London").     mock.assertIsSatisfied().     // now change content in the file in the classpath and try again     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Bye $headers.name", Exchange.FILE_NAME, "hello.vm").     mock.reset().     // we must expected the original filecontent as the cache is enabled, so its Hello and not Bye     mock.expectedBodiesReceived("Hello Paris").     template.sendBodyAndHeader("direct:c", "Body", "name", "Paris").     mock.assertIsSatisfied(). }
false;public;0;41;;@Test public void testClearCacheViaJmx() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello London").     template.sendBodyAndHeader("direct:b", "Body", "name", "London").     mock.assertIsSatisfied().     // now change content in the file in the classpath and try again     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Bye $headers.name", Exchange.FILE_NAME, "hello.vm").     mock.reset().     // we must expected the original filecontent as the cache is enabled, so its Hello and not Bye     mock.expectedBodiesReceived("Hello Paris").     template.sendBodyAndHeader("direct:b", "Body", "name", "Paris").     mock.assertIsSatisfied().     // clear the cache via the mbean server     MBeanServer mbeanServer = context.getManagementStrategy().getManagementAgent().getMBeanServer().     Set<ObjectName> objNameSet = mbeanServer.queryNames(new ObjectName("org.apache.camel:type=endpoints,name=\"velocity:*contentCache=true*\",*"), null).     ObjectName managedObjName = new ArrayList<>(objNameSet).get(0).     mbeanServer.invoke(managedObjName, "clearContentCache", null, null).     // now change content in the file in the classpath     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Bye $headers.name", Exchange.FILE_NAME, "hello.vm").     mock.reset().     // we expect the update to work now since the cache has been cleared     mock.expectedBodiesReceived("Bye Paris").     template.sendBodyAndHeader("direct:b", "Body", "name", "Paris").     mock.assertIsSatisfied().     // change the content in the file again     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override", "Hello $headers.name", Exchange.FILE_NAME, "hello.vm").     mock.reset().     // we expect the new value to be ignored since the cache was re-established with the prior exchange     mock.expectedBodiesReceived("Bye Paris").     template.sendBodyAndHeader("direct:b", "Body", "name", "Paris").     mock.assertIsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     from("direct:a").to("velocity://org/apache/camel/component/velocity/hello.vm?contentCache=false").to("mock:result").     from("direct:b").to("velocity://org/apache/camel/component/velocity/hello.vm?contentCache=true").to("mock:result").     from("direct:c").to("velocity://org/apache/camel/component/velocity/hello.vm").to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("velocity://org/apache/camel/component/velocity/hello.vm?contentCache=false").to("mock:result").             from("direct:b").to("velocity://org/apache/camel/component/velocity/hello.vm?contentCache=true").to("mock:result").             from("direct:c").to("velocity://org/apache/camel/component/velocity/hello.vm").to("mock:result").         }     }. }
