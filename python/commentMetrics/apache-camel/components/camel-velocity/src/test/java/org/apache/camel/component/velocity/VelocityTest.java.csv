commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().addAttachment("item", dataHandler).     exchange.getIn().setBody("Monday").     exchange.getIn().setHeader("name", "Christian").     exchange.setProperty("item", "7"). }
false;public;0;17;;@Test public void testVelocityLetter() throws Exception {     final DataHandler dataHandler = new DataHandler("my attachment", "text/plain").     Exchange exchange = template.request("direct:a", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().addAttachment("item", dataHandler).             exchange.getIn().setBody("Monday").             exchange.getIn().setHeader("name", "Christian").             exchange.setProperty("item", "7").         }     }).     assertEquals("Dear Christian. You ordered item 7 on Monday.", exchange.getOut().getBody()).     assertEquals("Christian", exchange.getOut().getHeader("name")).     assertSame(dataHandler, exchange.getOut().getAttachment("item")). }
false;public;1;14;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("").     exchange.getIn().setHeader("name", "Christian").     Map<String, Object> variableMap = new HashMap<>().     Map<String, Object> headersMap = new HashMap<>().     headersMap.put("name", "Willem").     variableMap.put("headers", headersMap).     variableMap.put("body", "Monday").     variableMap.put("exchange", exchange).     VelocityContext velocityContext = new VelocityContext(variableMap).     exchange.getIn().setHeader(VelocityConstants.VELOCITY_CONTEXT, velocityContext).     exchange.setProperty("item", "7"). }
false;public;0;22;;@Test public void testVelocityContext() throws Exception {     Exchange exchange = template.request("direct:a", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("").             exchange.getIn().setHeader("name", "Christian").             Map<String, Object> variableMap = new HashMap<>().             Map<String, Object> headersMap = new HashMap<>().             headersMap.put("name", "Willem").             variableMap.put("headers", headersMap).             variableMap.put("body", "Monday").             variableMap.put("exchange", exchange).             VelocityContext velocityContext = new VelocityContext(variableMap).             exchange.getIn().setHeader(VelocityConstants.VELOCITY_CONTEXT, velocityContext).             exchange.setProperty("item", "7").         }     }).     assertEquals("Dear Willem. You ordered item 7 on Monday.", exchange.getOut().getBody()).     assertEquals("Christian", exchange.getOut().getHeader("name")). }
false;public;0;6;;public void configure() {     // START SNIPPET: example     from("direct:a").to("velocity:org/apache/camel/component/velocity/example.vm"). // END SNIPPET: example }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:a").to("velocity:org/apache/camel/component/velocity/example.vm").         // END SNIPPET: example         }     }. }
