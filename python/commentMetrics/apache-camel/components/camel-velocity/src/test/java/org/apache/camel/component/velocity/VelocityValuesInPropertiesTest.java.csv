commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(VelocityConstants.VELOCITY_TEMPLATE, "Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.").     exchange.setProperty("name", "Christian").     exchange.setProperty("item", "7"). }
false;public;0;15;;@Test public void testVelocityLetter() throws Exception {     mock.expectedBodiesReceived("Dear Christian. You ordered item 7.").     template.send("direct:a", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(VelocityConstants.VELOCITY_TEMPLATE, "Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.").             exchange.setProperty("name", "Christian").             exchange.setProperty("item", "7").         }     }).     mock.assertIsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:a").to("velocity:dummy").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("velocity:dummy").to("mock:result").         }     }. }
