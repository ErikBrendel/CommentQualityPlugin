commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testWithAllValues() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).constant("Hello Claus").     mock.message(0).constant("You have id: 123 if an id was assigned to you.").     Map<String, Object> headers = new HashMap<>().     headers.put("name", "Claus").     headers.put("id", 123).     template.sendBodyAndHeaders("direct:a", "", headers).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testWithSomeValues() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).constant("Hello Claus").     mock.message(0).constant("You have id:  if an id was assigned to you.").     Map<String, Object> headers = new HashMap<>().     headers.put("name", "Claus").     template.sendBodyAndHeaders("direct:a", "", headers).     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:a").to("velocity:org/apache/camel/component/velocity/someValuesNotInExchange.vm").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("velocity:org/apache/camel/component/velocity/someValuesNotInExchange.vm").to("mock:result").         }     }. }
