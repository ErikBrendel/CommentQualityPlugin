commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void close() throws IOException {     detach(). }
false;;0;3;;Publisher<Exchange> getPublisher() {     return publisher. }
false;synchronized;1;30;;synchronized void attach(ReactiveStreamsProducer producer) {     Objects.requireNonNull(producer, "producer cannot be null, use the detach method").     if (this.camelProducer != null) {         throw new IllegalStateException("A producer is already attached to the stream '" + name + "'").     }     if (this.camelProducer != producer) {         detach().         ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy().         Flowable<Exchange> flow = Flowable.create(camelEmitter::set, BackpressureStrategy.MISSING).         if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {             flow.onBackpressureDrop(this::onBackPressure).doAfterNext(this::onItemEmitted).subscribe(this.publisher).         } else if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.LATEST)) {             flow.doAfterNext(this::onItemEmitted).onBackpressureLatest().subscribe(this.publisher).         } else {             flow.doAfterNext(this::onItemEmitted).onBackpressureBuffer().subscribe(this.publisher).         }         camelProducer = producer.     } }
false;synchronized;0;4;;synchronized void detach() {     this.camelProducer = null.     this.camelEmitter.set(null). }
false;;1;6;;void send(Exchange exchange) {     if (service.isRunAllowed()) {         FlowableEmitter<Exchange> emitter = ObjectHelper.notNull(camelEmitter.get(), "FlowableEmitter").         emitter.onNext(exchange).     } }
false;private;1;5;;// ************************************** // Helpers // ************************************** private void onItemEmitted(Exchange exchange) {     if (service.isRunAllowed()) {         ReactiveStreamsHelper.invokeDispatchCallback(exchange).     } }
false;private;1;6;;private void onBackPressure(Exchange exchange) {     ReactiveStreamsHelper.invokeDispatchCallback(exchange, new ReactiveStreamsDiscardedException("Discarded by back pressure strategy", exchange, name)). }
