commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(CwConstants.METRIC_NAMESPACE, "camel.apache.org/overriden").     exchange.getIn().setHeader(CwConstants.METRIC_NAME, "OverridenMetric").     exchange.getIn().setHeader(CwConstants.METRIC_VALUE, Double.valueOf(3)).     exchange.getIn().setHeader(CwConstants.METRIC_UNIT, StandardUnit.Bytes.toString()).     exchange.getIn().setHeader(CwConstants.METRIC_TIMESTAMP, LATER). }
false;public;0;22;;@Test public void sendMetricFromHeaderValues() throws Exception {     template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(CwConstants.METRIC_NAMESPACE, "camel.apache.org/overriden").             exchange.getIn().setHeader(CwConstants.METRIC_NAME, "OverridenMetric").             exchange.getIn().setHeader(CwConstants.METRIC_VALUE, Double.valueOf(3)).             exchange.getIn().setHeader(CwConstants.METRIC_UNIT, StandardUnit.Bytes.toString()).             exchange.getIn().setHeader(CwConstants.METRIC_TIMESTAMP, LATER).         }     }).     ArgumentCaptor<PutMetricDataRequest> argument = ArgumentCaptor.forClass(PutMetricDataRequest.class).     verify(cloudWatchClient).putMetricData(argument.capture()).     assertEquals("camel.apache.org/overriden", argument.getValue().getNamespace()).     assertEquals("OverridenMetric", argument.getValue().getMetricData().get(0).getMetricName()).     assertEquals(Double.valueOf(3), argument.getValue().getMetricData().get(0).getValue()).     assertEquals(StandardUnit.Bytes.toString(), argument.getValue().getMetricData().get(0).getUnit()).     assertEquals(LATER, argument.getValue().getMetricData().get(0).getTimestamp()). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     MetricDatum metricDatum = new MetricDatum().withMetricName("errorCount").withValue(Double.valueOf(0)).     exchange.getIn().setBody(metricDatum). }
false;public;0;18;;@Test public void sendManuallyCreatedMetric() throws Exception {     template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             MetricDatum metricDatum = new MetricDatum().withMetricName("errorCount").withValue(Double.valueOf(0)).             exchange.getIn().setBody(metricDatum).         }     }).     ArgumentCaptor<PutMetricDataRequest> argument = ArgumentCaptor.forClass(PutMetricDataRequest.class).     verify(cloudWatchClient).putMetricData(argument.capture()).     assertEquals("errorCount", argument.getValue().getMetricData().get(0).getMetricName()).     assertEquals(Double.valueOf(0), argument.getValue().getMetricData().get(0).getValue()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(CwConstants.METRIC_NAME, "errorCount"). }
false;public;0;16;;@Test public void useDefaultValuesForMetricUnitAndMetricValue() throws Exception {     template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(CwConstants.METRIC_NAME, "errorCount").         }     }).     ArgumentCaptor<PutMetricDataRequest> argument = ArgumentCaptor.forClass(PutMetricDataRequest.class).     verify(cloudWatchClient).putMetricData(argument.capture()).     assertEquals("errorCount", argument.getValue().getMetricData().get(0).getMetricName()).     assertEquals(Double.valueOf(1), argument.getValue().getMetricData().get(0).getValue()).     assertEquals(StandardUnit.Count.toString(), argument.getValue().getMetricData().get(0).getUnit()). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(CwConstants.METRIC_NAME, "errorCount").     Map<String, String> dimensionsMap = new LinkedHashMap<>().     dimensionsMap.put("keyOne", "valueOne").     dimensionsMap.put("keyTwo", "valueTwo").     exchange.getIn().setHeader(CwConstants.METRIC_DIMENSIONS, dimensionsMap). }
false;public;0;21;;@Test public void setsMeticDimensions() throws Exception {     template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(CwConstants.METRIC_NAME, "errorCount").             Map<String, String> dimensionsMap = new LinkedHashMap<>().             dimensionsMap.put("keyOne", "valueOne").             dimensionsMap.put("keyTwo", "valueTwo").             exchange.getIn().setHeader(CwConstants.METRIC_DIMENSIONS, dimensionsMap).         }     }).     ArgumentCaptor<PutMetricDataRequest> argument = ArgumentCaptor.forClass(PutMetricDataRequest.class).     verify(cloudWatchClient).putMetricData(argument.capture()).     List<Dimension> dimensions = argument.getValue().getMetricData().get(0).getDimensions().     Dimension dimension = dimensions.get(0).     assertThat(dimensions.size(), is(2)).     assertEquals("keyOne", dimension.getName()).     assertEquals("valueOne", dimension.getValue()). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("amazonCwClient", cloudWatchClient).     registry.bind("now", NOW).     return registry. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("aws-cw://camel.apache.org/test?amazonCwClient=#amazonCwClient&name=testMetric&unit=Count&timestamp=#now"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("aws-cw://camel.apache.org/test?amazonCwClient=#amazonCwClient&name=testMetric&unit=Count&timestamp=#now").         }     }. }
