commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;public void process(Exchange exchange) throws Exception {     List<MetricDatum> metricData = getMetricData(exchange).     PutMetricDataRequest request = new PutMetricDataRequest().withMetricData(metricData).withNamespace(determineNameSpace(exchange)).     log.info("Sending request [{}] from exchange [{}]...", request, exchange).     getEndpoint().getCloudWatchClient().putMetricData(request). }
false;private;1;18;;private List<MetricDatum> getMetricData(Exchange exchange) {     Object body = exchange.getIn().getBody().     if (body instanceof List) {         return CastUtils.cast((List<?>) body).     }     if (body instanceof MetricDatum) {         return Arrays.asList((MetricDatum) body).     }     MetricDatum metricDatum = new MetricDatum().withMetricName(determineName(exchange)).withValue(determineValue(exchange)).withUnit(determineUnit(exchange)).withTimestamp(determineTimestamp(exchange)).     setDimension(metricDatum, exchange).     return Arrays.asList(metricDatum). }
false;private;2;17;;private void setDimension(MetricDatum metricDatum, Exchange exchange) {     String name = exchange.getIn().getHeader(CwConstants.METRIC_DIMENSION_NAME, String.class).     String value = exchange.getIn().getHeader(CwConstants.METRIC_DIMENSION_VALUE, String.class).     if (name != null && value != null) {         metricDatum.withDimensions(new Dimension().withName(name).withValue(value)).     } else {         Map<String, String> dimensions = exchange.getIn().getHeader(CwConstants.METRIC_DIMENSIONS, Map.class).         if (dimensions != null) {             Collection<Dimension> dimensionCollection = new ArrayList<>().             for (Map.Entry<String, String> dimensionEntry : dimensions.entrySet()) {                 Dimension dimension = new Dimension().withName(dimensionEntry.getKey()).withValue(dimensionEntry.getValue()).                 dimensionCollection.add(dimension).             }             metricDatum.withDimensions(dimensionCollection).         }     } }
false;private;1;7;;private Date determineTimestamp(Exchange exchange) {     Date timestamp = exchange.getIn().getHeader(CwConstants.METRIC_TIMESTAMP, Date.class).     if (timestamp == null) {         timestamp = getConfiguration().getTimestamp().     }     return timestamp. }
false;private;1;7;;private String determineNameSpace(Exchange exchange) {     String namespace = exchange.getIn().getHeader(CwConstants.METRIC_NAMESPACE, String.class).     if (namespace == null) {         namespace = getConfiguration().getNamespace().     }     return namespace. }
false;private;1;7;;private String determineName(Exchange exchange) {     String name = exchange.getIn().getHeader(CwConstants.METRIC_NAME, String.class).     if (name == null) {         name = getConfiguration().getName().     }     return name. }
false;private;1;7;;private Double determineValue(Exchange exchange) {     Double value = exchange.getIn().getHeader(CwConstants.METRIC_VALUE, Double.class).     if (value == null) {         value = getConfiguration().getValue().     }     return value != null ? value : Double.valueOf(1). }
false;private;1;7;;private StandardUnit determineUnit(Exchange exchange) {     String unit = exchange.getIn().getHeader(CwConstants.METRIC_UNIT, String.class).     if (unit == null) {         unit = getConfiguration().getUnit().     }     return unit != null ? StandardUnit.valueOf(unit) : StandardUnit.Count. }
false;protected;0;3;;protected CwConfiguration getConfiguration() {     return getEndpoint().getConfiguration(). }
false;public;0;7;;@Override public String toString() {     if (cwProducerToString == null) {         cwProducerToString = "CwProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return cwProducerToString. }
false;public;0;4;;@Override public CwEndpoint getEndpoint() {     return (CwEndpoint) super.getEndpoint(). }
