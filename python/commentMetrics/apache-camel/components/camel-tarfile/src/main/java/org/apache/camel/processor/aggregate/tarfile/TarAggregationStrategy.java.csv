commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getFilePrefix() {     return filePrefix. }
true;public;1;3;/**  * Sets the prefix that will be used when creating the TAR filename.  */ ;/**  * Sets the prefix that will be used when creating the TAR filename.  */ public void setFilePrefix(String filePrefix) {     this.filePrefix = filePrefix. }
false;public;0;3;;public String getFileSuffix() {     return fileSuffix. }
true;public;1;3;/**  * Sets the suffix that will be used when creating the ZIP filename.  */ ;/**  * Sets the suffix that will be used when creating the ZIP filename.  */ public void setFileSuffix(String fileSuffix) {     this.fileSuffix = fileSuffix. }
false;public;0;3;;public File getParentDir() {     return parentDir. }
true;public;1;3;/**  * Sets the parent directory to use for writing temporary files.  */ ;/**  * Sets the parent directory to use for writing temporary files.  */ public void setParentDir(File parentDir) {     this.parentDir = parentDir. }
true;public;1;3;/**  * Sets the parent directory to use for writing temporary files.  */ ;/**  * Sets the parent directory to use for writing temporary files.  */ public void setParentDir(String parentDir) {     this.parentDir = new File(parentDir). }
false;public;2;62;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     File tarFile.     Exchange answer = oldExchange.     // Guard against empty new exchanges     if (newExchange == null) {         return oldExchange.     }     // First time for this aggregation     if (oldExchange == null) {         try {             tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir).             LOG.trace("Created temporary file: {}", tarFile).         } catch (IOException e) {             throw new GenericFileOperationFailedException(e.getMessage(), e).         }         answer = newExchange.         answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile)).     } else {         tarFile = oldExchange.getIn().getBody(File.class).     }     Object body = newExchange.getIn().getBody().     if (body instanceof WrappedFile) {         body = ((WrappedFile) body).getFile().     }     if (body instanceof File) {         try {             File appendFile = (File) body.             // do not try to append empty files             if (appendFile.length() > 0) {                 String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId().                 addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null).                 GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false).                 genericFile.bindToExchange(answer).             }         } catch (Exception e) {             throw new GenericFileOperationFailedException(e.getMessage(), e).         }     } else {         // Handle all other messages         try {             byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class).             // do not try to append empty data             if (buffer.length > 0) {                 String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId().                 addEntryToTar(tarFile, entryName, buffer, buffer.length).                 GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false).                 genericFile.bindToExchange(answer).             }         } catch (Exception e) {             throw new GenericFileOperationFailedException(e.getMessage(), e).         }     }     return answer. }
false;private;3;34;;private void addFileToTar(File source, File file, String fileName) throws IOException, ArchiveException {     File tmpTar = File.createTempFile(source.getName(), null, parentDir).     tmpTar.delete().     if (!source.renameTo(tmpTar)) {         throw new IOException("Could not make temp file (" + source.getName() + ")").     }     FileInputStream fis = new FileInputStream(tmpTar).     TarArchiveInputStream tin = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, fis).     TarArchiveOutputStream tos = new TarArchiveOutputStream(new FileOutputStream(source)).     tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX).     tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX).     InputStream in = new FileInputStream(file).     // copy the existing entries     ArchiveEntry nextEntry.     while ((nextEntry = tin.getNextEntry()) != null) {         tos.putArchiveEntry(nextEntry).         IOUtils.copy(tin, tos).         tos.closeArchiveEntry().     }     // Add the new entry     TarArchiveEntry entry = new TarArchiveEntry(fileName == null ? file.getName() : fileName).     entry.setSize(file.length()).     tos.putArchiveEntry(entry).     IOUtils.copy(in, tos).     tos.closeArchiveEntry().     IOHelper.close(fis, in, tin, tos).     LOG.trace("Deleting temporary file: {}", tmpTar).     FileUtil.deleteFile(tmpTar). }
false;private;4;32;;private void addEntryToTar(File source, String entryName, byte[] buffer, int length) throws IOException, ArchiveException {     File tmpTar = File.createTempFile(source.getName(), null, parentDir).     tmpTar.delete().     if (!source.renameTo(tmpTar)) {         throw new IOException("Cannot create temp file: " + source.getName()).     }     FileInputStream fis = new FileInputStream(tmpTar).     TarArchiveInputStream tin = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, fis).     TarArchiveOutputStream tos = new TarArchiveOutputStream(new FileOutputStream(source)).     tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX).     tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX).     // copy the existing entries     ArchiveEntry nextEntry.     while ((nextEntry = tin.getNextEntry()) != null) {         tos.putArchiveEntry(nextEntry).         IOUtils.copy(tin, tos).         tos.closeArchiveEntry().     }     // Create new entry     TarArchiveEntry entry = new TarArchiveEntry(entryName).     entry.setSize(length).     tos.putArchiveEntry(entry).     tos.write(buffer, 0, length).     tos.closeArchiveEntry().     IOHelper.close(fis, tin, tos).     LOG.trace("Deleting temporary file: {}", tmpTar).     FileUtil.deleteFile(tmpTar). }
false;public;1;4;;@Override public void onFailure(Exchange exchange) { // Keep the file if something gone a miss. }
false;public;1;5;;@Override public void onComplete(Exchange exchange) {     LOG.debug("Deleting tar file on completion: {}", this.fileToDelete).     FileUtil.deleteFile(this.fileToDelete). }
