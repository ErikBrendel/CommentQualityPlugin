commented;modifiers;parameterAmount;loc;comment;code
false;static;1;15;;static byte[] getTaredText(String entryName) throws IOException {     ByteArrayInputStream bais = new ByteArrayInputStream(TEXT.getBytes("UTF-8")).     ByteArrayOutputStream baos = new ByteArrayOutputStream().     TarArchiveOutputStream tos = new TarArchiveOutputStream(baos).     try {         TarArchiveEntry entry = new TarArchiveEntry(entryName).         entry.setSize(bais.available()).         tos.putArchiveEntry(entry).         IOHelper.copy(bais, tos).     } finally {         tos.closeArchiveEntry().         IOHelper.close(bais, tos).     }     return baos.toByteArray(). }
false;static;2;20;;static byte[] getTaredTextInFolder(String folder, String file) throws IOException {     ByteArrayInputStream bais = new ByteArrayInputStream(TEXT.getBytes("UTF-8")).     ByteArrayOutputStream baos = new ByteArrayOutputStream().     TarArchiveOutputStream tos = new TarArchiveOutputStream(baos).     try {         TarArchiveEntry folderEntry = new TarArchiveEntry(folder).         folderEntry.setSize(0L).         tos.putArchiveEntry(folderEntry).         TarArchiveEntry fileEntry = new TarArchiveEntry(file).         fileEntry.setSize(bais.available()).         tos.putArchiveEntry(fileEntry).         IOHelper.copy(bais, tos).     } finally {         tos.closeArchiveEntry().         IOHelper.close(bais, tos).     }     return baos.toByteArray(). }
false;static;1;10;;static byte[] getBytes(File file) throws IOException {     FileInputStream fis = new FileInputStream(file).     ByteArrayOutputStream baos = new ByteArrayOutputStream().     try {         IOHelper.copy(fis, baos).     } finally {         IOHelper.close(fis, baos).     }     return baos.toByteArray(). }
