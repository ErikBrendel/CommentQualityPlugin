commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     tar.setParentDir("target/temp").     deleteDirectory("target/temp").     deleteDirectory("target/out").     super.setUp(). }
false;public;0;35;;@Test public void testSplitter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregateToTarEntry").     mock.expectedMessageCount(1).     assertMockEndpointsSatisfied().     Thread.sleep(500).     File[] files = new File("target/out").listFiles().     assertTrue("Should be a file in target/out directory", files.length > 0).     File resultFile = files[0].     Set<String> expectedTarFiles = new HashSet<>(Arrays.asList("another/hello.txt", "other/greetings.txt", "chiau.txt", "hi.txt", "hola.txt")).     TarArchiveInputStream tin = new TarArchiveInputStream(new FileInputStream(resultFile)).     try {         int fileCount = 0.         for (TarArchiveEntry te = tin.getNextTarEntry(). te != null. te = tin.getNextTarEntry()) {             String name = te.getName().             if (expectedTarFiles.contains(name)) {                 expectedTarFiles.remove(te.getName()).             } else {                 fail("Unexpected name in tarfile: " + name).             }             fileCount++.         }         assertTrue("Tar file should contains " + AggregationStrategyWithPreservationTest.EXPECTED_NO_FILES + " files", fileCount == AggregationStrategyWithPreservationTest.EXPECTED_NO_FILES).         assertEquals("Should have found all of the tar files in the file.", 0, expectedTarFiles.size()).     } finally {         IOHelper.close(tin).     } }
false;public;0;12;;@Override public void configure() throws Exception {     // Untar file and Split it according to FileEntry     from("file:src/test/resources/org/apache/camel/aggregate/tarfile/data?consumer.delay=1000&noop=true&recursive=true").aggregate(tar).constant(true).completionFromBatchConsumer().eagerCheckCompletion().to("file:target/out").to("mock:aggregateToTarEntry").log("Done processing tar file: ${header.CamelFileName}"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // Untar file and Split it according to FileEntry             from("file:src/test/resources/org/apache/camel/aggregate/tarfile/data?consumer.delay=1000&noop=true&recursive=true").aggregate(tar).constant(true).completionFromBatchConsumer().eagerCheckCompletion().to("file:target/out").to("mock:aggregateToTarEntry").log("Done processing tar file: ${header.CamelFileName}").         }     }. }
