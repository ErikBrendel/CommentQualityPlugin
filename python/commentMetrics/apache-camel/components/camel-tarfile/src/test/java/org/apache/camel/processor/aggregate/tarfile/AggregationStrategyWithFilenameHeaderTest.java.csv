commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     tar.setParentDir("target/temp").     deleteDirectory("target/temp").     deleteDirectory("target/out").     super.setUp(). }
false;public;0;32;;@Test public void testSplitter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregateToTarEntry").     mock.expectedMessageCount(1).     template.setDefaultEndpointUri("direct:start").     template.sendBodyAndHeader("foo", Exchange.FILE_NAME, FILE_NAMES.get(0)).     template.sendBodyAndHeader("bar", Exchange.FILE_NAME, FILE_NAMES.get(1)).     assertMockEndpointsSatisfied().     Thread.sleep(500).     File[] files = new File("target/out").listFiles().     assertTrue(files != null).     assertTrue("Should be a file in target/out directory", files.length > 0).     File resultFile = files[0].     final TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, new BufferedInputStream(new FileInputStream(resultFile))).     try {         int fileCount = 0.         for (TarArchiveEntry entry = tis.getNextTarEntry(). entry != null. entry = tis.getNextTarEntry()) {             fileCount++.             assertTrue("Tar entry file name should be on of: " + FILE_NAMES, FILE_NAMES.contains(entry.getName())).         }         assertEquals("Tar file should contain " + FILE_NAMES.size() + " files", FILE_NAMES.size(), fileCount).     } finally {         IOHelper.close(tis).     } }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").aggregate(tar).constant(true).completionTimeout(50).to("file:target/out").to("mock:aggregateToTarEntry").log("Done processing tar file: ${header.CamelFileName}"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(tar).constant(true).completionTimeout(50).to("file:target/out").to("mock:aggregateToTarEntry").log("Done processing tar file: ${header.CamelFileName}").         }     }. }
