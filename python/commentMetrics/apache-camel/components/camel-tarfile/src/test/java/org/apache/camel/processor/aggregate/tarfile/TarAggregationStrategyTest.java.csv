commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     tar.setParentDir("target/temp").     deleteDirectory("target/temp").     deleteDirectory("target/out").     super.setUp(). }
false;public;0;27;;@Test public void testSplitter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregateToTarEntry").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("foo", "bar").     assertMockEndpointsSatisfied().     Thread.sleep(500).     File[] files = new File("target/out").listFiles().     assertTrue(files != null).     assertTrue("Should be a file in target/out directory", files.length > 0).     File resultFile = files[0].     TarArchiveInputStream tin = new TarArchiveInputStream(new FileInputStream(resultFile)).     try {         int fileCount = 0.         for (TarArchiveEntry te = tin.getNextTarEntry(). te != null. te = tin.getNextTarEntry()) {             fileCount = fileCount + 1.         }         assertEquals("Tar file should contains " + TarAggregationStrategyTest.EXPECTED_NO_FILES + " files", TarAggregationStrategyTest.EXPECTED_NO_FILES, fileCount).     } finally {         IOHelper.close(tin).     } }
false;public;0;13;;@Override public void configure() throws Exception {     // Untar file and Split it according to FileEntry     from("file:src/test/resources/org/apache/camel/aggregate/tarfile/data?consumer.delay=1000&noop=true").setHeader("foo", constant("bar")).aggregate(tar).constant(true).completionFromBatchConsumer().eagerCheckCompletion().to("file:target/out").to("mock:aggregateToTarEntry").log("Done processing tar file: ${header.CamelFileName}"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // Untar file and Split it according to FileEntry             from("file:src/test/resources/org/apache/camel/aggregate/tarfile/data?consumer.delay=1000&noop=true").setHeader("foo", constant("bar")).aggregate(tar).constant(true).completionFromBatchConsumer().eagerCheckCompletion().to("file:target/out").to("mock:aggregateToTarEntry").log("Done processing tar file: ${header.CamelFileName}").         }     }. }
