commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSplitter() throws InterruptedException {     MockEndpoint processTarEntry = getMockEndpoint("mock:processTarEntry").     MockEndpoint splitResult = getMockEndpoint("mock:splitResult").     processTarEntry.expectedBodiesReceivedInAnyOrder("chau", "hi", "hola", "hello", "greetings").     splitResult.expectedBodiesReceivedInAnyOrder("chiau.txt", "hi.txt", "hola.txt", "another/hello.txt", "other/greetings.txt").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     // Untar file and Split it according to FileEntry     TarFileDataFormat tarFile = new TarFileDataFormat().     tarFile.setUsingIterator(true).     from("file:src/test/resources/org/apache/camel/dataformat/tarfile/data/?consumer.delay=1000&noop=true").unmarshal(tarFile).split(bodyAs(Iterator.class)).streaming().aggregationStrategy(updateHeader()).convertBodyTo(String.class).to("mock:processTarEntry").end().log("Done processing big file: ${header.CamelFileName}").setBody().header(PROCESSED_FILES_HEADER_NAME).split().body().to("mock:splitResult"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // Untar file and Split it according to FileEntry             TarFileDataFormat tarFile = new TarFileDataFormat().             tarFile.setUsingIterator(true).             from("file:src/test/resources/org/apache/camel/dataformat/tarfile/data/?consumer.delay=1000&noop=true").unmarshal(tarFile).split(bodyAs(Iterator.class)).streaming().aggregationStrategy(updateHeader()).convertBodyTo(String.class).to("mock:processTarEntry").end().log("Done processing big file: ${header.CamelFileName}").setBody().header(PROCESSED_FILES_HEADER_NAME).split().body().to("mock:splitResult").         }     }. }
false;public;2;12;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange != null) {         String processedFiles = oldExchange.getIn().getHeader(PROCESSED_FILES_HEADER_NAME, String.class).         if (processedFiles == null) {             processedFiles = oldExchange.getIn().getHeader(TarIterator.TARFILE_ENTRY_NAME_HEADER, String.class).         }         processedFiles = processedFiles + "," + newExchange.getIn().getHeader(TarIterator.TARFILE_ENTRY_NAME_HEADER, String.class).         newExchange.getIn().setHeader(PROCESSED_FILES_HEADER_NAME, processedFiles).     }     return newExchange. }
false;private;0;17;;private AggregationStrategy updateHeader() {     return new AggregationStrategy() {          @Override         public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange != null) {                 String processedFiles = oldExchange.getIn().getHeader(PROCESSED_FILES_HEADER_NAME, String.class).                 if (processedFiles == null) {                     processedFiles = oldExchange.getIn().getHeader(TarIterator.TARFILE_ENTRY_NAME_HEADER, String.class).                 }                 processedFiles = processedFiles + "," + newExchange.getIn().getHeader(TarIterator.TARFILE_ENTRY_NAME_HEADER, String.class).                 newExchange.getIn().setHeader(PROCESSED_FILES_HEADER_NAME, processedFiles).             }             return newExchange.         }     }. }
