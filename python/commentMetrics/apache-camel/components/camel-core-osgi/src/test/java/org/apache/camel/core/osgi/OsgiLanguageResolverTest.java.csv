commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testOsgiResolverFindLanguageTest() throws IOException {     CamelContext camelContext = new DefaultCamelContext().     OsgiLanguageResolver resolver = new OsgiLanguageResolver(getBundleContext()).     Language language = resolver.resolveLanguage("simple", camelContext).     assertNotNull("We should find simple language", language). }
false;public;0;12;;@Test public void testOsgiResolverFindLanguageFallbackTest() throws IOException {     Registry registry = new DefaultRegistry().     registry.bind("fuffy-language", new SampleLanguage(true)).     CamelContext camelContext = new DefaultCamelContext(registry).     OsgiLanguageResolver resolver = new OsgiLanguageResolver(getBundleContext()).     Language language = resolver.resolveLanguage("fuffy", camelContext).     assertNotNull("We should find fuffy language", language).     assertTrue("We should find the fallback language", ((SampleLanguage) language).isFallback()). }
false;public;0;13;;@Test public void testOsgiResolverFindLanguageDoubleFallbackTest() throws IOException {     Registry registry = new DefaultRegistry().     registry.bind("fuffy", new SampleLanguage(false)).     registry.bind("fuffy-language", new SampleLanguage(true)).     CamelContext camelContext = new DefaultCamelContext(registry).     OsgiLanguageResolver resolver = new OsgiLanguageResolver(getBundleContext()).     Language language = resolver.resolveLanguage("fuffy", camelContext).     assertNotNull("We should find fuffy language", language).     assertFalse("We should NOT find the fallback language", ((SampleLanguage) language).isFallback()). }
false;public;1;4;;@Override public Predicate createPredicate(String expression) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;1;4;;@Override public Expression createExpression(String expression) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public boolean isFallback() {     return fallback. }
false;public;1;3;;public void setFallback(boolean fallback) {     this.fallback = fallback. }
