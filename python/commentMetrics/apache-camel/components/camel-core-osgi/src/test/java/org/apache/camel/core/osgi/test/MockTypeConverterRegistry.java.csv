commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<TypeConverter> getTypeConverters() {     return typeConverters. }
false;public;0;3;;public List<TypeConverter> getFallbackTypeConverters() {     return fallbackTypeConverters. }
false;public;3;3;;public void addTypeConverter(Class<?> toType, Class<?> fromType, TypeConverter typeConverter) {     typeConverters.add(typeConverter). }
false;public;1;3;;public void addTypeConverters(TypeConverters typeConverters) { // noop }
false;public;2;4;;public boolean removeTypeConverter(Class<?> toType, Class<?> fromType) {     // noop     return true. }
false;public;2;3;;public void addFallbackTypeConverter(TypeConverter typeConverter, boolean canPromote) {     fallbackTypeConverters.add(typeConverter). }
false;public;2;3;;public TypeConverter lookup(Class<?> toType, Class<?> fromType) {     return null. }
false;public;0;3;;public List<Class<?>[]> listAllTypeConvertersFromTo() {     return null. }
false;public;1;3;;public void setInjector(Injector injector) { // do nothing }
false;public;0;3;;public Injector getInjector() {     return null. }
false;public;0;3;;public Statistics getStatistics() {     return null. }
false;public;0;3;;public int size() {     return typeConverters.size(). }
false;public;0;3;;public LoggingLevel getTypeConverterExistsLoggingLevel() {     return LoggingLevel.WARN. }
false;public;1;3;;public void setTypeConverterExistsLoggingLevel(LoggingLevel loggingLevel) { // noop }
false;public;0;3;;public TypeConverterExists getTypeConverterExists() {     return TypeConverterExists.Override. }
false;public;1;3;;public void setTypeConverterExists(TypeConverterExists typeConverterExists) { // noop }
false;public;0;3;;public void start() throws Exception { // noop }
false;public;0;3;;public void stop() throws Exception { // noop }
