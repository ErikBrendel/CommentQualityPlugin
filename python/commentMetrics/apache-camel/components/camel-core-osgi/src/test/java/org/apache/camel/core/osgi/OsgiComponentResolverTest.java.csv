commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testOsgiResolverFindComponentTest() throws Exception {     CamelContext camelContext = new DefaultCamelContext().     OsgiComponentResolver resolver = new OsgiComponentResolver(getBundleContext()).     Component component = resolver.resolveComponent("file_test", camelContext).     assertNotNull("We should find file_test component", component).     assertTrue("We should get the file component here", component instanceof FileComponent). }
false;public;0;12;;@Test public void testOsgiResolverFindComponentFallbackTest() throws Exception {     Registry registry = new DefaultRegistry().     registry.bind("allstar-component", new SampleComponent(true)).     CamelContext camelContext = new DefaultCamelContext(registry).     OsgiComponentResolver resolver = new OsgiComponentResolver(getBundleContext()).     Component component = resolver.resolveComponent("allstar", camelContext).     assertNotNull("We should find the super component", component).     assertTrue("We should get the super component here", component instanceof SampleComponent). }
false;public;0;14;;@Test public void testOsgiResolverFindLanguageDoubleFallbackTest() throws Exception {     Registry registry = new DefaultRegistry().     registry.bind("allstar", new SampleComponent(false)).     registry.bind("allstar-component", new SampleComponent(true)).     CamelContext camelContext = new DefaultCamelContext(registry).     OsgiComponentResolver resolver = new OsgiComponentResolver(getBundleContext()).     Component component = resolver.resolveComponent("allstar", camelContext).     assertNotNull("We should find the super component", component).     assertTrue("We should get the super component here", component instanceof SampleComponent).     assertFalse("We should NOT find the fallback component", ((SampleComponent) component).isFallback()). }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;4;;@Override public CamelContext getCamelContext() {     throw new UnsupportedOperationException("Should not be called"). }
false;public;1;4;;@Override public Endpoint createEndpoint(String uri) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;4;;@Override public boolean useRawUri() {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public boolean isFallback() {     return fallback. }
false;public;1;3;;public void setFallback(boolean fallback) {     this.fallback = fallback. }
