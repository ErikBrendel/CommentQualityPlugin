commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testOsgiResolverFindDataFormatFallbackTest() throws Exception {     Registry registry = new DefaultRegistry().     registry.bind("allstar-dataformat", new SampleDataFormat(true)).     CamelContext camelContext = new DefaultCamelContext(registry).     OsgiDataFormatResolver resolver = new OsgiDataFormatResolver(getBundleContext()).     DataFormat dataformat = resolver.resolveDataFormat("allstar", camelContext).     assertNotNull("We should find the super dataformat", dataformat).     assertTrue("We should get the super dataformat here", dataformat instanceof SampleDataFormat). }
false;public;0;14;;@Test public void testOsgiResolverFindLanguageDoubleFallbackTest() throws Exception {     Registry registry = new DefaultRegistry().     registry.bind("allstar", new SampleDataFormat(false)).     registry.bind("allstar-dataformat", new SampleDataFormat(true)).     CamelContext camelContext = new DefaultCamelContext(registry).     OsgiDataFormatResolver resolver = new OsgiDataFormatResolver(getBundleContext()).     DataFormat dataformat = resolver.resolveDataFormat("allstar", camelContext).     assertNotNull("We should find the super dataformat", dataformat).     assertTrue("We should get the super dataformat here", dataformat instanceof SampleDataFormat).     assertFalse("We should NOT find the fallback dataformat", ((SampleDataFormat) dataformat).isFallback()). }
false;public;3;4;;@Override public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;2;4;;@Override public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public boolean isFallback() {     return fallback. }
false;public;1;3;;public void setFallback(boolean fallback) {     this.fallback = fallback. }
