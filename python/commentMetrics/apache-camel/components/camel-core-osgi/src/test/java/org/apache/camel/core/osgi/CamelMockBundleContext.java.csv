commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;public Language resolveLanguage(String name, CamelContext context) {     if (name.equals("simple")) {         return new SimpleLanguage().     }     return null. }
false;public;2;6;;public Component resolveComponent(String name, CamelContext context) throws Exception {     if (name.equals("file_test")) {         return new FileComponent().     }     return null. }
false;public;1;30;;public Object getService(@SuppressWarnings("rawtypes") ServiceReference reference) {     String[] classNames = (String[]) reference.getProperty(Constants.OBJECTCLASS).     String classNames0 = classNames != null ? classNames[0] : null.     String pid = (String) reference.getProperty(Constants.SERVICE_PID).     if (classNames0 != null && classNames0.equals("org.apache.camel.core.osgi.test.MyService")) {         return new MyService().     } else if (pid != null && pid.equals(SERVICE_PID_PREFIX + "org.apache.camel.core.osgi.test.MyService")) {         return new MyService().     } else if (classNames0 != null && classNames0.equals(ComponentResolver.class.getName())) {         return new ComponentResolver() {              public Component resolveComponent(String name, CamelContext context) throws Exception {                 if (name.equals("file_test")) {                     return new FileComponent().                 }                 return null.             }         }.     } else if (classNames0 != null && classNames0.equals(LanguageResolver.class.getName())) {         return new LanguageResolver() {              public Language resolveLanguage(String name, CamelContext context) {                 if (name.equals("simple")) {                     return new SimpleLanguage().                 }                 return null.             }         }.     } else {         return null.     } }
false;public;1;13;;public ServiceReference getServiceReference(String clazz) {     // lookup Java class if clazz contains dot (.) symbol     if (clazz.contains(".")) {         try {             Class.forName(clazz).             return super.getServiceReference(clazz).         } catch (ClassNotFoundException ex) {             // class not found so no service reference is returned             return null.         }     } else {         return super.getServiceReference(clazz).     } }
false;private,static;2;15;;private static void addServicePID(ServiceReference[] srs, String filter) {     for (ServiceReference sr : srs) {         if (sr instanceof MockServiceReference) {             Dictionary properties = new Hashtable().             String pid = filter.replace("(" + Constants.SERVICE_PID + "=", "").replace(")", "").             properties.put(Constants.SERVICE_PID, pid).             for (String key : sr.getPropertyKeys()) {                 if (properties.get(key) == null) {                     properties.put(key, sr.getProperty(key)).                 }             }             ((MockServiceReference) sr).setProperties(properties).         }     } }
false;public;2;15;;@SuppressWarnings("rawtypes") public ServiceReference[] getServiceReferences(String clazz, String filter) throws InvalidSyntaxException {     // just simulate when the bundle context doesn't have right service reference     if (filter != null && filter.indexOf("name=test") > 0) {         return null.     } else {         ServiceReference[] srs = super.getServiceReferences(clazz, filter).         // set service.pid property by filter         if (filter != null && filter.indexOf(Constants.SERVICE_PID + "=") > 0) {             addServicePID(srs, filter).         }         return srs.     } }
false;public;2;13;;@SuppressWarnings({ "rawtypes", "unchecked" }) public ServiceReference[] getAllServiceReferences(String clazz, String filter) throws InvalidSyntaxException {     // just simulate when the bundle context doesn't have right service reference     if (filter != null && filter.indexOf("name=test") > 0) {         return null.     }     MockServiceReference reference = new MockServiceReference(getBundle(), new String[] { clazz }).     // setup the name property with the class name     Dictionary properties = new Hashtable().     properties.put("name", clazz).     reference.setProperties(properties).     return new ServiceReference[] { reference }. }
