commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean hasMoreElements() {     return list != null && index < list.size(). }
false;public;0;8;;public E nextElement() {     E result = null.     if (list != null) {         result = list.get(index).         index++.     }     return result. }
false;private;2;7;;private Enumeration<String> getListEnumeration(String prefix, String[] entrys) {     List<String> list = new ArrayList<>().     for (String entry : entrys) {         list.add(prefix + entry).     }     return new ListEnumeration<>(list). }
false;public;1;17;;public Enumeration<String> getEntryPaths(String path) {     Enumeration<String> result = null.     if (META_INF_COMPONENT.equals(path)) {         String[] entries = new String[] { "timer_test", "file_test" }.         result = getListEnumeration(META_INF_COMPONENT, entries).     }     if (META_INF_LANGUAGE.equals(path)) {         String[] entries = new String[] { "bean_test", "file_test" }.         result = getListEnumeration(META_INF_LANGUAGE, entries).     }     if (META_INF_LANGUAGE_RESOLVER.equals(path)) {         String[] entries = new String[] { "default" }.         result = getListEnumeration(META_INF_LANGUAGE_RESOLVER, entries).     }     return result. }
false;public;3;12;;public Enumeration<URL> findEntries(String path, String filePattern, boolean recurse) {     if (path.equals("/org/apache/camel/core/osgi/test") && filePattern.equals("*.class")) {         List<URL> urls = new ArrayList<>().         URL url = getClass().getClassLoader().getResource("org/apache/camel/core/osgi/test/MyTypeConverter.class").         urls.add(url).         url = getClass().getClassLoader().getResource("org/apache/camel/core/osgi/test/MyRouteBuilder.class").         urls.add(url).         return new ListEnumeration<>(urls).     } else {         return CastUtils.cast(super.findEntries(path, filePattern, recurse)).     } }
false;public;1;4;;@Override public Map<X509Certificate, List<X509Certificate>> getSignerCertificates(int signersType) {     return null. }
false;public;0;4;;@Override public Version getVersion() {     return Version.parseVersion("1.0.0"). }
false;public;1;7;;public Class<?> loadClass(String name) throws ClassNotFoundException {     if (isLoadableClass(name)) {         return super.loadClass(name).     } else {         throw new ClassNotFoundException(name).     } }
false;protected;1;3;;protected boolean isLoadableClass(String name) {     return !name.startsWith("org.apache.camel.core.osgi.other"). }
