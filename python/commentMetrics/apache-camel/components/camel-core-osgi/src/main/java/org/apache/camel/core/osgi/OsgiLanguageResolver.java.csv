commented;modifiers;parameterAmount;loc;comment;code
false;public;2;17;;public Language resolveLanguage(String name, CamelContext context) {     // lookup in registry first     Language lang = ResolverHelper.lookupLanguageInRegistryWithFallback(context, name).     if (lang != null) {         return lang.     }     lang = getLanguage(name, context).     if (lang != null) {         return lang.     }     LanguageResolver resolver = getLanguageResolver("default", context).     if (resolver != null) {         return resolver.resolveLanguage(name, context).     }     throw new NoSuchLanguageException(name). }
false;protected;2;19;;protected Language getLanguage(String name, CamelContext context) {     LOG.trace("Finding Language: {}", name).     try {         ServiceReference<?>[] refs = bundleContext.getServiceReferences(LanguageResolver.class.getName(), "(language=" + name + ")").         if (refs != null) {             for (ServiceReference<?> ref : refs) {                 Object service = bundleContext.getService(ref).                 if (LanguageResolver.class.isAssignableFrom(service.getClass())) {                     LanguageResolver resolver = (LanguageResolver) service.                     return resolver.resolveLanguage(name, context).                 }             }         }         return null.     } catch (InvalidSyntaxException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;protected;2;18;;protected LanguageResolver getLanguageResolver(String name, CamelContext context) {     LOG.trace("Finding LanguageResolver: {}", name).     try {         ServiceReference<?>[] refs = bundleContext.getServiceReferences(LanguageResolver.class.getName(), "(resolver=" + name + ")").         if (refs != null) {             for (ServiceReference<?> ref : refs) {                 Object service = bundleContext.getService(ref).                 if (LanguageResolver.class.isAssignableFrom(service.getClass())) {                     LanguageResolver resolver = (LanguageResolver) service.                     return resolver.                 }             }         }         return null.     } catch (InvalidSyntaxException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
