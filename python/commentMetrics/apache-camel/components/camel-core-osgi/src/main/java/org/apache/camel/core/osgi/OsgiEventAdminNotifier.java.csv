commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;public void notify(CamelEvent event) throws Exception {     EventAdmin eventAdmin = tracker.getService().     if (eventAdmin == null) {         return.     }     Dictionary<String, Object> props = new Hashtable<>().     props.put(TYPE, getType(event)).     props.put(EVENT, event).     props.put(TIMESTAMP, System.currentTimeMillis()).     props.put(BUNDLE, bundleContext.getBundle()).     props.put(BUNDLE_SYMBOLICNAME, bundleContext.getBundle().getSymbolicName()).     props.put(BUNDLE_ID, bundleContext.getBundle().getBundleId()).     props.put(BUNDLE_VERSION, getBundleVersion(bundleContext.getBundle())).     try {         props.put(CAUSE, event.getClass().getMethod("getCause").invoke(event)).     } catch (Throwable t) {     // ignore     }     eventAdmin.postEvent(new Event(getTopic(event), props)). }
false;public;1;3;;public boolean isEnabled(CamelEvent event) {     return true. }
false;protected;0;4;;@Override protected void doStart() throws Exception {     tracker.open(). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     tracker.close(). }
false;public,static;1;11;;public static String toUpper(String text) {     StringBuilder sb = new StringBuilder().     for (int i = 0. i < text.length(). i++) {         char c = text.charAt(i).         if (Character.isUpperCase(c) && sb.length() > 0) {             sb.append('_').         }         sb.append(Character.toUpperCase(c)).     }     return sb.toString(). }
false;public,static;1;3;;public static String getType(CamelEvent event) {     return event.getType().name(). }
false;public,static;1;21;;public static String getTopic(CamelEvent event) {     String topic.     String type = getType(event).     if (type.startsWith("CamelContext")) {         topic = TOPIC_CAMEL_CONTEXT_EVENTS.         type = type.substring("CamelContext".length()).     } else if (type.startsWith("Exchange")) {         topic = TOPIC_CAMEL_EXCHANGE_EVENTS.         type = type.substring("Exchange".length()).     } else if (type.startsWith("Route")) {         topic = TOPIC_CAMEL_ROUTE_EVENTS.         type = type.substring("Route".length()).     } else if (type.startsWith("Service")) {         topic = TOPIC_CAMEL_SERVICE_EVENTS.         type = type.substring("Service".length()).     } else {         topic = TOPIC_CAMEL_EVENTS + "unknown/".     }     topic += toUpper(type).     return topic. }
false;public,static;1;5;;public static Version getBundleVersion(Bundle bundle) {     Dictionary<?, ?> headers = bundle.getHeaders().     String version = (String) headers.get(Constants.BUNDLE_VERSION).     return (version != null) ? Version.parseVersion(version) : Version.emptyVersion. }
