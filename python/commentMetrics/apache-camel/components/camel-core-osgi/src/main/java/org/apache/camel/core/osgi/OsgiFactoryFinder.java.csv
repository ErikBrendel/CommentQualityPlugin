commented;modifiers;parameterAmount;loc;comment;code
false;public;3;30;;@Override public Class<?> findClass(String key, String propertyPrefix, Class<?> checkClass) throws ClassNotFoundException, IOException {     final String prefix = propertyPrefix != null ? propertyPrefix : "".     final String classKey = propertyPrefix + key.     return addToClassMap(classKey, () -> {         BundleEntry entry = getResource(key, checkClass).         if (entry != null) {             URL url = entry.url.             InputStream in = url.openStream().             // lets load the file             BufferedInputStream reader = null.             try {                 reader = IOHelper.buffered(in).                 Properties properties = new Properties().                 properties.load(reader).                 String className = properties.getProperty(prefix + "class").                 if (className == null) {                     throw new IOException("Expected property is missing: " + prefix + "class").                 }                 return entry.bundle.loadClass(className).             } finally {                 IOHelper.close(reader, key, null).                 IOHelper.close(in, key, null).             }         } else {             throw new NoFactoryAvailableException(classKey).         }     }). }
false;public;2;4;;@Override public Class<?> findClass(String key, String propertyPrefix) throws ClassNotFoundException, IOException {     return findClass(key, propertyPrefix, null). }
true;public;1;3;// NOTE, the first found factory will be return ;// As the META-INF of the Factory could not be export, // we need to go through the bundles to look for it // NOTE, the first found factory will be return public BundleEntry getResource(String name) {     return getResource(name, null). }
true;public;2;19;// The clazz can make sure we get right version of class that we need ;// The clazz can make sure we get right version of class that we need public BundleEntry getResource(String name, Class<?> clazz) {     BundleEntry entry = null.     Bundle[] bundles = null.     bundles = bundleContext.getBundles().     URL url.     for (Bundle bundle : bundles) {         url = bundle.getEntry(getResourcePath() + name).         if (url != null && checkCompatibility(bundle, clazz)) {             entry = new BundleEntry().             entry.url = url.             entry.bundle = bundle.             break.         }     }     return entry. }
false;private;2;14;;private boolean checkCompatibility(Bundle bundle, Class<?> clazz) {     if (clazz == null) {         return true.     }     // Check bundle compatibility     try {         if (bundle.loadClass(clazz.getName()) != clazz) {             return false.         }     } catch (Throwable t) {         return false.     }     return true. }
