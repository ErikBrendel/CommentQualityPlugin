commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;protected Class<?> findClass(String name) throws ClassNotFoundException {     LOG.trace("FindClass: {}", name).     return bundle.loadClass(name). }
false;protected;1;8;;protected URL findResource(String name) {     LOG.trace("FindResource: {}", name).     URL resource = bundle.getResource(name).     if (classLoader != null && resource == null) {         resource = classLoader.getResource(name).     }     return resource. }
false;protected;1;5;;@SuppressWarnings({ "unchecked", "rawtypes" }) protected Enumeration findResources(String name) throws IOException {     LOG.trace("FindResource: {}", name).     return bundle.getResources(name). }
false;protected;2;21;;protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     LOG.trace("LoadClass: {}, resolve: {}", name, resolve).     Class<?> clazz.     try {         clazz = findClass(name).     } catch (ClassNotFoundException cnfe) {         if (classLoader != null) {             try {                 clazz = classLoader.loadClass(name).             } catch (ClassNotFoundException e) {                 throw new ClassNotFoundException(name + " from bundle " + bundle.getBundleId() + " (" + bundle.getSymbolicName() + ")", cnfe).             }         } else {             throw new ClassNotFoundException(name + " from bundle " + bundle.getBundleId() + " (" + bundle.getSymbolicName() + ")", cnfe).         }     }     if (resolve) {         resolveClass(clazz).     }     return clazz. }
false;public;0;3;;public Bundle getBundle() {     return bundle. }
false;public;0;4;;@Override public String toString() {     return String.format("BundleDelegatingClassLoader(%s)", bundle). }
