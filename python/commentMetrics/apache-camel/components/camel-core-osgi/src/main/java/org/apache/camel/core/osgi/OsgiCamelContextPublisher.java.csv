commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;public void notify(CamelEvent event) throws Exception {     if (event.getType() == Type.CamelContextStarted) {         CamelContext context = ((CamelContextEvent) event).getContext().         registerCamelContext(context).     } else if (event.getType() == Type.CamelContextStopping) {         CamelContext context = ((CamelContextEvent) event).getContext().         ServiceRegistration<?> reg = registrations.remove(context).         if (reg != null) {             if (log.isDebugEnabled()) {                 log.debug("Unregistering CamelContext [{}] from OSGi registry", context.getName()).             }             try {                 reg.unregister().             } catch (Exception e) {                 log.warn("Error unregistering CamelContext [" + context.getName() + "] from OSGi registry. This exception will be ignored.", e).             }         }     } }
false;public;1;3;;public boolean isEnabled(CamelEvent event) {     return event.getType() == Type.CamelContextStarted || event.getType() == Type.CamelContextStopping. }
false;protected;0;15;;@Override protected void doShutdown() throws Exception {     // clear and unregister any left-over registration (which should not happen)     if (!registrations.isEmpty()) {         log.warn("On shutdown there are {} registrations which was supposed to have been unregistered already. Will unregister these now.", registrations.size()).         for (ServiceRegistration<?> reg : registrations.values()) {             try {                 reg.unregister().             } catch (Exception e) {                 log.warn("Error unregistering from OSGi registry. This exception will be ignored.", e).             }         }     }     registrations.clear(). }
false;public;1;30;;public ServiceRegistration<?> registerCamelContext(CamelContext camelContext) throws InvalidSyntaxException {     // avoid registering the same service again     // we must include unique camel management name so the symbolic name becomes unique,     // in case the bundle has more than one CamelContext     String name = camelContext.getName().     String managementName = camelContext.getManagementName().     String symbolicName = bundleContext.getBundle().getSymbolicName().     if (!lookupCamelContext(bundleContext, symbolicName, name)) {         Version bundleVersion = getBundleVersion(bundleContext.getBundle()).         Dictionary<String, Object> props = new Hashtable<>().         props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, symbolicName).         props.put(CONTEXT_VERSION_PROPERTY, bundleVersion).         props.put(CONTEXT_NAME_PROPERTY, name).         if (managementName != null) {             props.put(CONTEXT_MANAGEMENT_NAME_PROPERTY, managementName).         }         log.debug("Registering CamelContext [{}] in OSGi registry", name).         ServiceRegistration<?> reg = bundleContext.registerService(CamelContext.class.getName(), camelContext, props).         if (reg != null) {             registrations.put(camelContext, reg).         }         return reg.     } else {         return null.     } }
false;public,static;1;5;;public static Version getBundleVersion(Bundle bundle) {     Dictionary<?, ?> headers = bundle.getHeaders().     String version = (String) headers.get(Constants.BUNDLE_VERSION).     return (version != null) ? Version.parseVersion(version) : Version.emptyVersion. }
true;public,static;3;8;/**  * Lookup in the OSGi Service Registry whether a {@link org.apache.camel.CamelContext} is already registered with the given symbolic name.  *  * @return <tt>true</tt> if exists, <tt>false</tt> otherwise  */ ;/**  * Lookup in the OSGi Service Registry whether a {@link org.apache.camel.CamelContext} is already registered with the given symbolic name.  *  * @return <tt>true</tt> if exists, <tt>false</tt> otherwise  */ public static boolean lookupCamelContext(BundleContext bundleContext, String symbolicName, String contextName) throws InvalidSyntaxException {     Version bundleVersion = getBundleVersion(bundleContext.getBundle()).     ServiceReference<?>[] refs = bundleContext.getServiceReferences(CamelContext.class.getName(), "(&(" + CONTEXT_SYMBOLIC_NAME_PROPERTY + "=" + symbolicName + ")" + "(" + CONTEXT_NAME_PROPERTY + "=" + contextName + ")" + "(" + CONTEXT_VERSION_PROPERTY + "=" + bundleVersion + "))").     return refs != null && refs.length > 0. }
