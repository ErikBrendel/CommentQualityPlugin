commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;28;/**  * Retrieve the BundleContext that the given class has been loaded from.  *  * @param clazz the class to find the bundle context from  * @return the bundle context or <code>null</code> if it can't be found  */ ;/**  * Retrieve the BundleContext that the given class has been loaded from.  *  * @param clazz the class to find the bundle context from  * @return the bundle context or <code>null</code> if it can't be found  */ public static BundleContext getBundleContext(Class<?> clazz) {     try {         ClassLoader cl = clazz.getClassLoader().         Class<?> clClazz = cl.getClass().         Method mth = null.         while (clClazz != null) {             try {                 mth = clClazz.getDeclaredMethod("getBundle").                 break.             } catch (NoSuchMethodException e) {             // Ignore             }             clClazz = clClazz.getSuperclass().         }         if (mth != null) {             mth.setAccessible(true).             return ((Bundle) mth.invoke(cl)).getBundleContext().         }     } catch (Throwable t) {     // Ignore     }     return null. }
true;public,static;2;12;/**  * Finds the components available on the bundle context and camel context  */ ;/**  * Finds the components available on the bundle context and camel context  */ public static Map<String, Properties> findComponents(BundleContext bundleContext, CamelContext camelContext) throws IOException, LoadPropertiesException {     SortedMap<String, Properties> answer = new TreeMap<>().     Bundle[] bundles = bundleContext.getBundles().     for (Bundle bundle : bundles) {         Enumeration<URL> iter = bundle.getResources(CamelContextHelper.COMPONENT_DESCRIPTOR).         SortedMap<String, Properties> map = CamelContextHelper.findComponents(camelContext, iter).         answer.putAll(map).     }     return answer. }
