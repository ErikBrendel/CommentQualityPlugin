commented;modifiers;parameterAmount;loc;comment;code
false;public;3;19;;public void find(PackageScanFilter test, String packageName, Set<Class<?>> classes) {     packageName = packageName.replace('.', '/').     // remember the number of classes found so far     int classesSize = classes.size().     // look in osgi bundles     loadImplementationsInBundle(test, packageName, classes).     // if we did not find any new, then fallback to use regular non bundle class loading     if (classes.size() == classesSize) {         // Using the non-OSGi classloaders as a fallback         // this is necessary when use JBI packaging for servicemix-camel SU         // so that we get chance to use SU classloader to scan packages in the SU         log.trace("Cannot find any classes in bundles, not trying regular classloaders scanning: {}", packageName).         for (ClassLoader classLoader : super.getClassLoaders()) {             if (!isOsgiClassloader(classLoader)) {                 find(test, packageName, classLoader, classes).             }         }     } }
false;private,static;1;11;;private static boolean isOsgiClassloader(ClassLoader loader) {     try {         Method mth = loader.getClass().getMethod("getBundle", new Class[] {}).         if (mth != null) {             return true.         }     } catch (NoSuchMethodException e) {     // ignore its not an osgi loader     }     return false. }
false;private;3;9;;private void loadImplementationsInBundle(PackageScanFilter test, String packageName, Set<Class<?>> classes) {     Set<String> urls = getImplementationsInBundle(test, packageName).     if (urls != null) {         for (String url : urls) {             // substring to avoid leading slashes             addIfMatching(test, url, classes).         }     } }
false;private;2;26;;private Set<String> getImplementationsInBundle(PackageScanFilter test, String packageName) {     Bundle[] bundles.     if (bundle.getBundleContext() != null) {         bundles = bundle.getBundleContext().getBundles().     } else {         bundles = new Bundle[] { bundle }.     }     Set<String> urls = new LinkedHashSet<>().     for (Bundle bd : bundles) {         log.trace("Searching in bundle: {}", bd).         try {             Enumeration<URL> paths = bd.findEntries("/" + packageName, "*.class", true).             while (paths != null && paths.hasMoreElements()) {                 URL path = paths.nextElement().                 String pathString = path.getPath().                 String urlString = pathString.substring(pathString.indexOf(packageName)).                 urls.add(urlString).                 log.trace("Added url: {}", urlString).             }         } catch (Throwable t) {             log.warn("Cannot search in bundle: " + bundle + " for classes matching criteria: " + test + " due: " + t.getMessage() + ". This exception will be ignored.", t).         }     }     return urls. }
