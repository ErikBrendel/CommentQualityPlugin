# id;timestamp;commentText;codeText;commentWords;codeWords
OsgiNamingHelper -> public static String findFreeCamelContextName(BundleContext context, String prefix, String key, AtomicInteger counter, boolean checkFirst);1405374721;Checks the OSGi service registry for a free name (uses the counter if there is a clash to find next free name)__@param context the bundle context_@param prefix  the prefix for the name_@param key     the key to use in the OSGi filter_ either {@link OsgiCamelContextPublisher#CONTEXT_NAME_PROPERTY}_or {@link OsgiCamelContextPublisher#CONTEXT_MANAGEMENT_NAME_PROPERTY}._@param counter the counter_@param checkFirst <tt>true</tt> to check the prefix name as-is before using the counter, <tt>false</tt> the counter is used immediately_@return the free name, is never <tt>null</tt>;public static String findFreeCamelContextName(BundleContext context, String prefix, String key, AtomicInteger counter, boolean checkFirst) {_        String candidate = null__        boolean clash = false___        do {_            try {_                clash = false___                if (candidate == null && checkFirst) {_                    _                    candidate = prefix__                } else {_                    _                    candidate = prefix + "-" + getNextCounter(counter)__                }_                LOG.trace("Checking OSGi Service Registry for existence of existing CamelContext with name: {}", candidate)___                ServiceReference[] refs = context.getServiceReferences(CamelContext.class.getName(), "(" + key + "=" + candidate + ")")__                if (refs != null && refs.length > 0) {_                    for (ServiceReference ref : refs) {_                        Object id = ref.getProperty(key)__                        if (id != null && candidate.equals(id)) {_                            clash = true__                            break__                        }_                    }_                }_            } catch (InvalidSyntaxException e) {_                LOG.debug("Error finding free Camel name in OSGi Service Registry due " + e.getMessage() + ". This exception is ignored.", e)__                break__            }_        } while (clash)___        LOG.debug("Generated free name for bundle id: {}, clash: {} -> {}", new Object[]{context.getBundle().getBundleId(), clash, candidate})__        return candidate__    };checks,the,osgi,service,registry,for,a,free,name,uses,the,counter,if,there,is,a,clash,to,find,next,free,name,param,context,the,bundle,context,param,prefix,the,prefix,for,the,name,param,key,the,key,to,use,in,the,osgi,filter,either,link,osgi,camel,context,publisher,or,link,osgi,camel,context,publisher,param,counter,the,counter,param,check,first,tt,true,tt,to,check,the,prefix,name,as,is,before,using,the,counter,tt,false,tt,the,counter,is,used,immediately,return,the,free,name,is,never,tt,null,tt;public,static,string,find,free,camel,context,name,bundle,context,context,string,prefix,string,key,atomic,integer,counter,boolean,check,first,string,candidate,null,boolean,clash,false,do,try,clash,false,if,candidate,null,check,first,candidate,prefix,else,candidate,prefix,get,next,counter,counter,log,trace,checking,osgi,service,registry,for,existence,of,existing,camel,context,with,name,candidate,service,reference,refs,context,get,service,references,camel,context,class,get,name,key,candidate,if,refs,null,refs,length,0,for,service,reference,ref,refs,object,id,ref,get,property,key,if,id,null,candidate,equals,id,clash,true,break,catch,invalid,syntax,exception,e,log,debug,error,finding,free,camel,name,in,osgi,service,registry,due,e,get,message,this,exception,is,ignored,e,break,while,clash,log,debug,generated,free,name,for,bundle,id,clash,new,object,context,get,bundle,get,bundle,id,clash,candidate,return,candidate
OsgiNamingHelper -> public static String findFreeCamelContextName(BundleContext context, String prefix, String key, AtomicInteger counter, boolean checkFirst);1415211488;Checks the OSGi service registry for a free name (uses the counter if there is a clash to find next free name)__@param context the bundle context_@param prefix  the prefix for the name_@param key     the key to use in the OSGi filter_ either {@link OsgiCamelContextPublisher#CONTEXT_NAME_PROPERTY}_or {@link OsgiCamelContextPublisher#CONTEXT_MANAGEMENT_NAME_PROPERTY}._@param counter the counter_@param checkFirst <tt>true</tt> to check the prefix name as-is before using the counter, <tt>false</tt> the counter is used immediately_@return the free name, is never <tt>null</tt>;public static String findFreeCamelContextName(BundleContext context, String prefix, String key, AtomicInteger counter, boolean checkFirst) {_        String candidate = null__        boolean clash = false___        do {_            try {_                clash = false___                if (candidate == null && checkFirst) {_                    _                    candidate = prefix__                } else {_                    _                    candidate = prefix + "-" + getNextCounter(counter)__                }_                LOG.trace("Checking OSGi Service Registry for existence of existing CamelContext with name: {}", candidate)___                ServiceReference<?>[] refs = context.getServiceReferences(CamelContext.class.getName(), "(" + key + "=" + candidate + ")")__                if (refs != null && refs.length > 0) {_                    for (ServiceReference<?> ref : refs) {_                        Object id = ref.getProperty(key)__                        if (id != null && candidate.equals(id)) {_                            clash = true__                            break__                        }_                    }_                }_            } catch (InvalidSyntaxException e) {_                LOG.debug("Error finding free Camel name in OSGi Service Registry due " + e.getMessage() + ". This exception is ignored.", e)__                break__            }_        } while (clash)___        LOG.debug("Generated free name for bundle id: {}, clash: {} -> {}", new Object[]{context.getBundle().getBundleId(), clash, candidate})__        return candidate__    };checks,the,osgi,service,registry,for,a,free,name,uses,the,counter,if,there,is,a,clash,to,find,next,free,name,param,context,the,bundle,context,param,prefix,the,prefix,for,the,name,param,key,the,key,to,use,in,the,osgi,filter,either,link,osgi,camel,context,publisher,or,link,osgi,camel,context,publisher,param,counter,the,counter,param,check,first,tt,true,tt,to,check,the,prefix,name,as,is,before,using,the,counter,tt,false,tt,the,counter,is,used,immediately,return,the,free,name,is,never,tt,null,tt;public,static,string,find,free,camel,context,name,bundle,context,context,string,prefix,string,key,atomic,integer,counter,boolean,check,first,string,candidate,null,boolean,clash,false,do,try,clash,false,if,candidate,null,check,first,candidate,prefix,else,candidate,prefix,get,next,counter,counter,log,trace,checking,osgi,service,registry,for,existence,of,existing,camel,context,with,name,candidate,service,reference,refs,context,get,service,references,camel,context,class,get,name,key,candidate,if,refs,null,refs,length,0,for,service,reference,ref,refs,object,id,ref,get,property,key,if,id,null,candidate,equals,id,clash,true,break,catch,invalid,syntax,exception,e,log,debug,error,finding,free,camel,name,in,osgi,service,registry,due,e,get,message,this,exception,is,ignored,e,break,while,clash,log,debug,generated,free,name,for,bundle,id,clash,new,object,context,get,bundle,get,bundle,id,clash,candidate,return,candidate
OsgiNamingHelper -> public static String findFreeCamelContextName(BundleContext context, String prefix, String key, AtomicInteger counter, boolean checkFirst);1536517284;Checks the OSGi service registry for a free name (uses the counter if there is a clash to find next free name)__@param context the bundle context_@param prefix  the prefix for the name_@param key     the key to use in the OSGi filter_ either {@link OsgiCamelContextPublisher#CONTEXT_NAME_PROPERTY}_or {@link OsgiCamelContextPublisher#CONTEXT_MANAGEMENT_NAME_PROPERTY}._@param counter the counter_@param checkFirst <tt>true</tt> to check the prefix name as-is before using the counter, <tt>false</tt> the counter is used immediately_@return the free name, is never <tt>null</tt>;public static String findFreeCamelContextName(BundleContext context, String prefix, String key, AtomicInteger counter, boolean checkFirst) {_        String candidate = null__        boolean clash = false___        do {_            try {_                clash = false___                if (candidate == null && checkFirst) {_                    _                    candidate = prefix__                } else {_                    _                    candidate = prefix + "-" + getNextCounter(counter)__                }_                LOG.trace("Checking OSGi Service Registry for existence of existing CamelContext with name: {}", candidate)___                ServiceReference<?>[] refs = context.getServiceReferences(CamelContext.class.getName(), "(" + key + "=" + candidate + ")")__                if (refs != null && refs.length > 0) {_                    for (ServiceReference<?> ref : refs) {_                        Object id = ref.getProperty(key)__                        if (id != null && candidate.equals(id)) {_                            clash = true__                            break__                        }_                    }_                }_            } catch (InvalidSyntaxException e) {_                LOG.debug("Error finding free Camel name in OSGi Service Registry due " + e.getMessage() + ". This exception is ignored.", e)__                break__            }_        } while (clash)___        LOG.debug("Generated free name for bundle id: {}, clash: {} -> {}", context.getBundle().getBundleId(), clash, candidate)__        return candidate__    };checks,the,osgi,service,registry,for,a,free,name,uses,the,counter,if,there,is,a,clash,to,find,next,free,name,param,context,the,bundle,context,param,prefix,the,prefix,for,the,name,param,key,the,key,to,use,in,the,osgi,filter,either,link,osgi,camel,context,publisher,or,link,osgi,camel,context,publisher,param,counter,the,counter,param,check,first,tt,true,tt,to,check,the,prefix,name,as,is,before,using,the,counter,tt,false,tt,the,counter,is,used,immediately,return,the,free,name,is,never,tt,null,tt;public,static,string,find,free,camel,context,name,bundle,context,context,string,prefix,string,key,atomic,integer,counter,boolean,check,first,string,candidate,null,boolean,clash,false,do,try,clash,false,if,candidate,null,check,first,candidate,prefix,else,candidate,prefix,get,next,counter,counter,log,trace,checking,osgi,service,registry,for,existence,of,existing,camel,context,with,name,candidate,service,reference,refs,context,get,service,references,camel,context,class,get,name,key,candidate,if,refs,null,refs,length,0,for,service,reference,ref,refs,object,id,ref,get,property,key,if,id,null,candidate,equals,id,clash,true,break,catch,invalid,syntax,exception,e,log,debug,error,finding,free,camel,name,in,osgi,service,registry,due,e,get,message,this,exception,is,ignored,e,break,while,clash,log,debug,generated,free,name,for,bundle,id,clash,context,get,bundle,get,bundle,id,clash,candidate,return,candidate
