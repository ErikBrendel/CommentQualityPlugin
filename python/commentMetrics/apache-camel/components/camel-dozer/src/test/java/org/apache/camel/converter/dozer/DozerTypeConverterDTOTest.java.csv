commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void configure() {     mapping(CustomerDTO.class, Customer.class). }
false;public;0;17;;@Override @Before public void setUp() throws Exception {     super.setUp().     BeanMappingBuilder beanMappingBuilder = new BeanMappingBuilder() {          @Override         protected void configure() {             mapping(CustomerDTO.class, Customer.class).         }     }.     DozerBeanMapperConfiguration config = new DozerBeanMapperConfiguration().     config.setBeanMappingBuilders(Arrays.asList(beanMappingBuilder)).     new DozerTypeConverterLoader(context, config). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:service-in").bean(new CustomerProcessor()).to("mock:verify-model"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:service-in").bean(new CustomerProcessor()).to("mock:verify-model").         }     }. }
false;public;0;9;;@Test public void verifyCamelConversionViaDozer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:verify-model").     mock.expectedMessageCount(1).     template.sendBody("direct:service-in", createDtoCustomer()).     assertMockEndpointsSatisfied(). }
