commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     super.setUp().     DozerBeanMapperConfiguration config = new DozerBeanMapperConfiguration().     config.setMappingFiles(Arrays.asList("mapping.xml")).     new DozerTypeConverterLoader(context, config). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:service-in").bean(new CustomerProcessor()).to("mock:verify-model"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:service-in").bean(new CustomerProcessor()).to("mock:verify-model").         }     }. }
false;public;0;9;;@Test public void verifyCamelConversionViaDozer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:verify-model").     mock.expectedMessageCount(1).     template.sendBody("direct:service-in", createServiceCustomer()).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void verifyCustomerMapping() throws Exception {     Mapper mapper = DozerTestArtifactsFactory.createMapper(context).     Customer service = createServiceCustomer().     org.apache.camel.converter.dozer.model.Customer model = mapper.map(service, org.apache.camel.converter.dozer.model.Customer.class).     Customer roundTrip = mapper.map(model, Customer.class).     assertEquals(service, roundTrip). }
