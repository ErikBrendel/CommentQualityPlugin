commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public Mapper create() {     if (camelContext == null) {         throw new IllegalStateException("CamelContext is null").     }     return parseConfiguration(configuration). }
false;private;1;22;;private Mapper parseConfiguration(DozerBeanMapperConfiguration configuration) {     configureSettings().     Mapper mapper.     if (configuration == null) {         mapper = DozerBeanMapperBuilder.buildDefault().     } else {         mapper = DozerBeanMapperBuilder.create().withMappingFiles(configuration.getMappingFiles()).withCustomConverters(configuration.getCustomConverters()).withEventListeners(configuration.getEventListeners()).withCustomConvertersWithIds(configuration.getCustomConvertersWithId()).withMappingBuilders(configuration.getBeanMappingBuilders()).withCustomFieldMapper(configuration.getCustomFieldMapper()).withELEngine(createELEngine()).build().     }     mapper.getMappingMetadata().     return mapper. }
false;private;0;3;;private void configureSettings() {     System.setProperty(SettingsKeys.CLASS_LOADER_BEAN, DozerThreadContextClassLoader.class.getName()). }
false;private;0;20;;private ELEngine createELEngine() {     ELEngine answer.     ClassLoader appcl = camelContext.getApplicationContextClassLoader().     ClassLoader auxcl = appcl == null ? DozerEndpoint.class.getClassLoader() : appcl.     if (ELExpressionFactory.isSupported(auxcl)) {         if (RuntimeUtils.isOSGi()) {             answer = new TcclELEngine(ELExpressionFactory.newInstance(auxcl), auxcl).         } else {             answer = new DefaultELEngine(ELExpressionFactory.newInstance()).         }     } else {         LOG.warn("Expressions are not supported by Dozer. Are you missing javax.el dependency?").         answer = new NoopELEngine().     }     return answer. }
