# id;timestamp;commentText;codeText;commentWords;codeWords
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1264518176;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1285148376;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1287741052;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1294928559;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1294928688;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1296546062;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1296567562;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1300949347;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1308259152;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1330973608;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1358954767;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1375277252;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1375357225;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1375358858;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1377780021;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1377849839;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        init(camelContext, null)__    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1392400400;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1405374721;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1425318825;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1430759722;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1438001484;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1440615344;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1453976756;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link DozerBeanMapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,dozer,bean,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1502258218;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1523994287;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1532727141;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1532727961;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1537290824;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1540108163;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1547716072;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext);1548175645;Creates a <code>DozerTypeConverter</code> that will search the given_{@link CamelContext} for instances of {@link Mapper}. Each_discovered instance will be wrapped as a {@link DozerTypeConverter} and_register as a {@link TypeConverter} with the context__@param camelContext the context to register the_{@link DozerTypeConverter} in;public DozerTypeConverterLoader(CamelContext camelContext) {_        this.camelContext = camelContext__        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,search,the,given,link,camel,context,for,instances,of,link,mapper,each,discovered,instance,will,be,wrapped,as,a,link,dozer,type,converter,and,register,as,a,link,type,converter,with,the,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in;public,dozer,type,converter,loader,camel,context,camel,context,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1264518176;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1285148376;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1287741052;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1294928559;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1294928688;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1296546062;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1296567562;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1300949347;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1308259152;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1330973608;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1358954767;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1375277252;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1375357225;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1375358858;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1377780021;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1264518176;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 0) {_            log.warn("Loaded %d dozer mappers from Camel's registry. Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            Map<String, ClassMap> all = loadMappings(dozer)__            DozerTypeConverter converter = new DozerTypeConverter(dozer)__            for (ClassMap map : all.values()) {_                registry.addTypeConverter(map.getSrcClassToMap(), map.getDestClassToMap(), converter)__                registry.addTypeConverter(map.getDestClassToMap(), map.getSrcClassToMap(), converter)__            }_        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,0,log,warn,loaded,d,dozer,mappers,from,camel,s,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,map,string,class,map,all,load,mappings,dozer,dozer,type,converter,converter,new,dozer,type,converter,dozer,for,class,map,map,all,values,registry,add,type,converter,map,get,src,class,to,map,map,get,dest,class,to,map,converter,registry,add,type,converter,map,get,dest,class,to,map,map,get,src,class,to,map,converter
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1285148376;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: " + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            DozerTypeConverter converter = new DozerTypeConverter(dozer)__            for (ClassMap map : all) {_                if (log.isInfoEnabled()) {_                    log.info("Added " + map.getSrcClassName() + " -> " + map.getDestClassName() + " as type converter to: " + registry)__                }_                registry.addTypeConverter(map.getSrcClassToMap(), map.getDestClassToMap(), converter)__                registry.addTypeConverter(map.getDestClassToMap(), map.getSrcClassToMap(), converter)__            }_        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,dozer,type,converter,converter,new,dozer,type,converter,dozer,for,class,map,map,all,if,log,is,info,enabled,log,info,added,map,get,src,class,name,map,get,dest,class,name,as,type,converter,to,registry,registry,add,type,converter,map,get,src,class,to,map,map,get,dest,class,to,map,converter,registry,add,type,converter,map,get,dest,class,to,map,map,get,src,class,to,map,converter
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1287741052;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1294928559;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1294928688;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1296546062;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1296567562;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1300949347;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1308259152;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1330973608;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().lookupByType(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,lookup,by,type,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1358954767;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1375277252;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1375357225;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (DozerBeanMapper dozer : mappers.values()) {_            List<ClassMap> all = loadMappings(camelContext, dozer)__            registerClassMaps(registry, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,dozer,bean,mapper,dozer,mappers,values,list,class,map,all,load,mappings,camel,context,dozer,register,class,maps,registry,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1375358858;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        if (mapper != null) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1377780021;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)__        _        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        _        if (mapper != null && !mappers.containsValue(mapper)) {_            mappers.put("parameter", mapper)__        }_        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1377849839;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        _        if (mapper != null && !mappers.containsValue(mapper)) {_            mappers.put("parameter", mapper)__        }__        _        Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__        if (configurations != null) {_            if (configurations.size() > 1) {_                log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            }_            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                String id = entry.getKey()__                DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                _                if (!mappers.containsValue(beanMapper)) {_                    mappers.put(id, beanMapper)__                }_            }_        }__        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }___        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1392400400;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        _        if (mapper != null && !mappers.containsValue(mapper)) {_            mappers.put("parameter", mapper)__        }__        _        Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__        if (configurations != null) {_            if (configurations.size() > 1) {_                log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            }_            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                String id = entry.getKey()__                DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                _                if (!mappers.containsValue(beanMapper)) {_                    mappers.put(id, beanMapper)__                }_            }_        }__        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }___        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1405374721;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        _        if (mapper != null && !mappers.containsValue(mapper)) {_            mappers.put("parameter", mapper)__        }__        _        Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__        if (configurations != null && configuration != null) {_            _            String key = null__            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                if (entry.getValue() == configuration) {_                    key = entry.getKey()__                    break__                }_            }_            if (key != null) {_                configurations.remove(key)__            }_        }__        if (configurations != null) {_            if (configurations.size() > 1) {_                log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            }_            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                String id = entry.getKey()__                DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                _                if (!mappers.containsValue(beanMapper)) {_                    mappers.put(id, beanMapper)__                }_            }_        }__        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }___        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1425318825;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        _        if (mapper != null && !mappers.containsValue(mapper)) {_            mappers.put("parameter", mapper)__        }__        _        Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__        if (configurations != null && configuration != null) {_            _            String key = null__            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                if (entry.getValue() == configuration) {_                    key = entry.getKey()__                    break__                }_            }_            if (key != null) {_                configurations.remove(key)__            }_        }__        if (configurations != null) {_            if (configurations.size() > 1) {_                log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            }_            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                String id = entry.getKey()__                DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                _                if (!mappers.containsValue(beanMapper)) {_                    mappers.put(id, beanMapper)__                }_            }_        }__        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }___        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1430759722;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        switchClassloader()___        Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__        _        if (mapper != null && !mappers.containsValue(mapper)) {_            mappers.put("parameter", mapper)__        }__        _        Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__        if (configurations != null && configuration != null) {_            _            String key = null__            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                if (entry.getValue() == configuration) {_                    key = entry.getKey()__                    break__                }_            }_            if (key != null) {_                configurations.remove(key)__            }_        }__        if (configurations != null) {_            if (configurations.size() > 1) {_                log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            }_            for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                String id = entry.getKey()__                DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                _                if (!mappers.containsValue(beanMapper)) {_                    mappers.put(id, beanMapper)__                }_            }_        }__        if (mappers.size() > 1) {_            log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                    + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__        } else if (mappers.size() == 0) {_            log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                    + DozerBeanMapper.class.getName())__        }___        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_            String mapperId = entry.getKey()__            DozerBeanMapper dozer = entry.getValue()__            List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__            registerClassMaps(registry, mapperId, dozer, all)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,switch,classloader,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1438001484;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                if (configurations.size() > 1) {_                    log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                            + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__                }_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()__                    DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            if (mappers.size() > 1) {_                log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            } else if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                        + DozerBeanMapper.class.getName())__            }___            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                DozerBeanMapper dozer = entry.getValue()__                List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1440615344;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                if (configurations.size() > 1) {_                    log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                            + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__                }_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()__                    DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            if (mappers.size() > 1) {_                log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            } else if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                        + DozerBeanMapper.class.getName())__            }___            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                DozerBeanMapper dozer = entry.getValue()__                List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, DozerBeanMapper mapper);1453976756;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, DozerBeanMapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                if (configurations.size() > 1) {_                    log.warn("Loaded " + configurations.size() + " Dozer configurations from Camel registry."_                            + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__                }_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()__                    DozerBeanMapper beanMapper = createDozerBeanMapper(entry.getValue())__                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            if (mappers.size() > 1) {_                log.warn("Loaded " + mappers.size() + " Dozer mappers from Camel registry."_                        + " Dozer is most efficient when there is a single mapper instance. Consider amalgamating instances.")__            } else if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: "_                        + DozerBeanMapper.class.getName())__            }___            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, DozerBeanMapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                DozerBeanMapper dozer = entry.getValue()__                List<ClassMap> all = loadMappings(camelContext, mapperId, dozer)__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,dozer,bean,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,if,configurations,size,1,log,warn,loaded,configurations,size,dozer,configurations,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,dozer,bean,mapper,bean,mapper,create,dozer,bean,mapper,entry,get,value,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,if,mappers,size,1,log,warn,loaded,mappers,size,dozer,mappers,from,camel,registry,dozer,is,most,efficient,when,there,is,a,single,mapper,instance,consider,amalgamating,instances,else,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,dozer,bean,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,dozer,bean,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,dozer,bean,mapper,dozer,entry,get,value,list,class,map,all,load,mappings,camel,context,mapper,id,dozer,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1502258218;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1523994287;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1532727141;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1532727961;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1537290824;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1540108163;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1547716072;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public void init(CamelContext camelContext, Mapper mapper);1548175645;Doses the actual querying and registration of {@link DozerTypeConverter}s_with the {@link CamelContext}.__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;public void init(CamelContext camelContext, Mapper mapper) {_        this.camelContext = camelContext__        if (mapper != null) {_            this.mapper = mapper__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }__            Map<String, Mapper> mappers = lookupDozerBeanMappers()__            _            if (mapper != null && !mappers.containsValue(mapper)) {_                mappers.put("parameter", mapper)__            }__            _            Map<String, DozerBeanMapperConfiguration> configurations = lookupDozerBeanMapperConfigurations()__            if (configurations != null && configuration != null) {_                _                String key = null__                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    if (entry.getValue() == configuration) {_                        key = entry.getKey()__                        break__                    }_                }_                if (key != null) {_                    configurations.remove(key)__                }_            }__            if (configurations != null) {_                for (Map.Entry<String, DozerBeanMapperConfiguration> entry : configurations.entrySet()) {_                    String id = entry.getKey()___                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue())__                    Mapper beanMapper = factory.create()___                    _                    if (!mappers.containsValue(beanMapper)) {_                        mappers.put(id, beanMapper)__                    }_                }_            }__            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size())___            if (mappers.size() == 0) {_                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName())__            }__            TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {_                String mapperId = entry.getKey()__                Mapper dozer = entry.getValue()___                MappingMetadata meta = dozer.getMappingMetadata()___                List<ClassMappingMetadata> all = meta.getClassMappings()__                registerClassMaps(registry, mapperId, dozer, all)__            }__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };doses,the,actual,querying,and,registration,of,link,dozer,type,converter,s,with,the,link,camel,context,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;public,void,init,camel,context,camel,context,mapper,mapper,this,camel,context,camel,context,if,mapper,null,this,mapper,mapper,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,map,string,mapper,mappers,lookup,dozer,bean,mappers,if,mapper,null,mappers,contains,value,mapper,mappers,put,parameter,mapper,map,string,dozer,bean,mapper,configuration,configurations,lookup,dozer,bean,mapper,configurations,if,configurations,null,configuration,null,string,key,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,if,entry,get,value,configuration,key,entry,get,key,break,if,key,null,configurations,remove,key,if,configurations,null,for,map,entry,string,dozer,bean,mapper,configuration,entry,configurations,entry,set,string,id,entry,get,key,mapper,factory,factory,new,mapper,factory,get,camel,context,entry,get,value,mapper,bean,mapper,factory,create,if,mappers,contains,value,bean,mapper,mappers,put,id,bean,mapper,log,info,loaded,dozer,mappers,from,camel,registry,mappers,size,if,mappers,size,0,log,warn,no,dozer,mappers,found,in,camel,registry,you,should,add,dozer,mappers,as,beans,to,the,registry,of,the,type,mapper,class,get,name,type,converter,registry,registry,camel,context,get,type,converter,registry,for,map,entry,string,mapper,entry,mappers,entry,set,string,mapper,id,entry,get,key,mapper,dozer,entry,get,value,mapping,metadata,meta,dozer,get,mapping,metadata,list,class,mapping,metadata,all,meta,get,class,mappings,register,class,maps,registry,mapper,id,dozer,all,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1425318825;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;public,static,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1430759722;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;public,static,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1438001484;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;public,static,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1440615344;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;public,static,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1453976756;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;public static DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = DozerComponent.createDozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = DozerComponent.createDozerBeanMapper(Collections.<String>emptyList())__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;public,static,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,dozer,component,create,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,dozer,component,create,dozer,bean,mapper,collections,string,empty,list,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1377849839;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1392400400;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1405374721;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1425318825;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1430759722;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1438001484;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1440615344;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1453976756;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1502258218;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<String, DozerBeanMapperConfiguration>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,string,dozer,bean,mapper,configuration,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1523994287;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1532727141;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1532727961;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1537290824;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1540108163;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1547716072;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations();1548175645;Lookup the dozer {@link DozerBeanMapperConfiguration} to be used.;protected Map<String, DozerBeanMapperConfiguration> lookupDozerBeanMapperConfigurations() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapperConfiguration.class))__    };lookup,the,dozer,link,dozer,bean,mapper,configuration,to,be,used;protected,map,string,dozer,bean,mapper,configuration,lookup,dozer,bean,mapper,configurations,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,configuration,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1502258218;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<String, Mapper>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,mapper,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1523994287;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1532727141;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1532727961;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1537290824;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1540108163;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1547716072;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, Mapper> lookupDozerBeanMappers();1548175645;Lookup the dozer {@link Mapper} to be used.;protected Map<String, Mapper> lookupDozerBeanMappers() {_        return new HashMap<>(camelContext.getRegistry().findByTypeWithName(Mapper.class))__    };lookup,the,dozer,link,mapper,to,be,used;protected,map,string,mapper,lookup,dozer,bean,mappers,return,new,hash,map,camel,context,get,registry,find,by,type,with,name,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1375277252;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1375357225;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1375358858;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1377780021;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1377849839;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1392400400;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1405374721;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1425318825;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1430759722;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1438001484;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1440615344;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> protected Map<String, DozerBeanMapper> lookupDozerBeanMappers();1453976756;Lookup the dozer {@link DozerBeanMapper} to be used.;protected Map<String, DozerBeanMapper> lookupDozerBeanMappers() {_        return new HashMap<String, DozerBeanMapper>(camelContext.getRegistry().findByTypeWithName(DozerBeanMapper.class))__    };lookup,the,dozer,link,dozer,bean,mapper,to,be,used;protected,map,string,dozer,bean,mapper,lookup,dozer,bean,mappers,return,new,hash,map,string,dozer,bean,mapper,camel,context,get,registry,find,by,type,with,name,dozer,bean,mapper,class
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1377849839;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,init,camel,context,mapper
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1392400400;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1405374721;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1425318825;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1430759722;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1438001484;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1440615344;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> @Deprecated     public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper);1453976756;Creates a <code>DozerTypeConverter</code> that will wrap the the given_{@link DozerBeanMapper} as a {@link DozerTypeConverter} and register it_with the given context. It will also search the context for__@param camelContext the context to register the_{@link DozerTypeConverter} in_@param mapper       the DozerMapperBean to be wrapped as a type converter.;@Deprecated_    public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapper mapper) {_        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,that,will,wrap,the,the,given,link,dozer,bean,mapper,as,a,link,dozer,type,converter,and,register,it,with,the,given,context,it,will,also,search,the,context,for,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,mapper,the,dozer,mapper,bean,to,be,wrapped,as,a,type,converter;deprecated,public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,mapper,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1287741052;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1294928559;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1294928688;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1296546062;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1296567562;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1300949347;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1308259152;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        ArrayList<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,array,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1330973608;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1358954767;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1375277252;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1375357225;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1375358858;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1377780021;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1377849839;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1392400400;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1405374721;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1425318825;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1430759722;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1438001484;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1440615344;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void addMapping(BeanMappingBuilder beanMappingBuilder);1453976756;Registers Dozer <code>BeanMappingBuilder</code> in current mapper instance._This method should be called instead of direct <code>mapper.addMapping()</code> invocation for Camel_being able to register given type conversion.__@param beanMappingBuilder api-based mapping builder;public void addMapping(BeanMappingBuilder beanMappingBuilder) {_        if (mapper == null) {_            log.warn("No mapper instance provided to " + this.getClass().getSimpleName()_                    + ". Mapping has not been registered!")__            return__        }__        mapper.addMapping(beanMappingBuilder)__        MappingFileData mappingFileData = beanMappingBuilder.build()__        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry()__        List<ClassMap> classMaps = new ArrayList<ClassMap>()__        classMaps.addAll(mappingFileData.getClassMaps())__        registerClassMaps(registry, null, mapper, classMaps)__    };registers,dozer,code,bean,mapping,builder,code,in,current,mapper,instance,this,method,should,be,called,instead,of,direct,code,mapper,add,mapping,code,invocation,for,camel,being,able,to,register,given,type,conversion,param,bean,mapping,builder,api,based,mapping,builder;public,void,add,mapping,bean,mapping,builder,bean,mapping,builder,if,mapper,null,log,warn,no,mapper,instance,provided,to,this,get,class,get,simple,name,mapping,has,not,been,registered,return,mapper,add,mapping,bean,mapping,builder,mapping,file,data,mapping,file,data,bean,mapping,builder,build,type,converter,registry,registry,camel,context,get,type,converter,registry,list,class,map,class,maps,new,array,list,class,map,class,maps,add,all,mapping,file,data,get,class,maps,register,class,maps,registry,null,mapper,class,maps
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1375357225;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        init(camelContext, null)__    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1375358858;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        init(camelContext, null)__    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1377780021;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        init(camelContext, null)__    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1377849839;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        init(camelContext, null)__    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,init,camel,context,null
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1392400400;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1405374721;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1425318825;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1430759722;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1438001484;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1440615344;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1453976756;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.DozerBeanMapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,dozer,bean,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1502258218;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1523994287;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,org,dozer,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1532727141;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, com.github.dozermapper.core.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,com,github,dozermapper,core,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1532727961;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, com.github.dozermapper.core.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,com,github,dozermapper,core,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1537290824;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, com.github.dozermapper.core.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw ObjectHelper.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,com,github,dozermapper,core,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1540108163;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, com.github.dozermapper.core.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw RuntimeCamelException.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,com,github,dozermapper,core,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1547716072;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, com.github.dozermapper.core.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw RuntimeCamelException.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,com,github,dozermapper,core,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public void setCamelContext(CamelContext camelContext);1548175645;Sets the {@link CamelContext} <b>and also</b> initializes this loader._<p/>_The reason why {@link #init(org.apache.camel.CamelContext, com.github.dozermapper.core.Mapper)} is also called_is because making using Dozer in Spring XML files easier, as no need to use the init-method attribute.__@param camelContext the CamelContext;public void setCamelContext(CamelContext camelContext) {_        if (this.camelContext == null) {_            this.camelContext = camelContext__            try {_                camelContext.addService(this)__            } catch (Exception e) {_                throw RuntimeCamelException.wrapRuntimeCamelException(e)__            }_        }_    };sets,the,link,camel,context,b,and,also,b,initializes,this,loader,p,the,reason,why,link,init,org,apache,camel,camel,context,com,github,dozermapper,core,mapper,is,also,called,is,because,making,using,dozer,in,spring,xml,files,easier,as,no,need,to,use,the,init,method,attribute,param,camel,context,the,camel,context;public,void,set,camel,context,camel,context,camel,context,if,this,camel,context,null,this,camel,context,camel,context,try,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1264518176;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1285148376;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1287741052;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1294928559;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1294928688;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1296546062;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1296567562;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1300949347;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1308259152;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1330973608;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1358954767;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1375277252;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1375357225;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1375358858;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1377780021;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1377849839;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1392400400;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1405374721;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1425318825;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1430759722;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1438001484;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1440615344;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1453976756;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1502258218;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1523994287;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1532727141;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1532727961;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1537290824;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1540108163;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1547716072;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader();1548175645;Creates a <code>DozerTypeConverter</code> performing no_{@link TypeConverter} registration.;public DozerTypeConverterLoader() {_    };creates,a,code,dozer,type,converter,code,performing,no,link,type,converter,registration;public,dozer,type,converter,loader
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1377849839;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", CamelToDozerClassResolverAdapter.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, CamelToDozerClassResolverAdapter.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        _        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        log.info("Using DozerBeanMapperConfiguration: {}", configuration)__        DozerBeanMapper mapper = createDozerBeanMapper(configuration)___        init(camelContext, mapper)__    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,camel,to,dozer,class,resolver,adapter,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,camel,to,dozer,class,resolver,adapter,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,init,camel,context,mapper
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1392400400;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", CamelToDozerClassResolverAdapter.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, CamelToDozerClassResolverAdapter.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        _        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        log.info("Using DozerBeanMapperConfiguration: {}", configuration)__        DozerBeanMapper mapper = createDozerBeanMapper(configuration)___        this.camelContext = camelContext__        this.mapper = mapper___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,camel,to,dozer,class,resolver,adapter,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,camel,to,dozer,class,resolver,adapter,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1405374721;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", CamelToDozerClassResolverAdapter.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, CamelToDozerClassResolverAdapter.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        _        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        log.info("Using DozerBeanMapperConfiguration: {}", configuration)__        DozerBeanMapper mapper = createDozerBeanMapper(configuration)___        this.camelContext = camelContext__        this.mapper = mapper__        this.configuration = configuration___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,camel,to,dozer,class,resolver,adapter,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,camel,to,dozer,class,resolver,adapter,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1425318825;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", CamelToDozerClassResolverAdapter.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, CamelToDozerClassResolverAdapter.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        _        CamelToDozerClassResolverAdapter adapter = new CamelToDozerClassResolverAdapter(camelContext)__        BeanContainer.getInstance().setClassLoader(adapter)___        log.info("Using DozerBeanMapperConfiguration: {}", configuration)__        DozerBeanMapper mapper = createDozerBeanMapper(configuration)___        this.camelContext = camelContext__        this.mapper = mapper__        this.configuration = configuration___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,camel,to,dozer,class,resolver,adapter,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,camel,to,dozer,class,resolver,adapter,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,camel,to,dozer,class,resolver,adapter,adapter,new,camel,to,dozer,class,resolver,adapter,camel,context,bean,container,get,instance,set,class,loader,adapter,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1430759722;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", DozerThreadContextClassLoader.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, DozerThreadContextClassLoader.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        switchClassloader()___        log.info("Using DozerBeanMapperConfiguration: {}", configuration)__        DozerBeanMapper mapper = createDozerBeanMapper(configuration)___        this.camelContext = camelContext__        this.mapper = mapper__        this.configuration = configuration___        try {_            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,dozer,thread,context,class,loader,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,dozer,thread,context,class,loader,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,switch,classloader,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,try,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1438001484;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", DozerThreadContextClassLoader.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, DozerThreadContextClassLoader.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            DozerBeanMapper mapper = createDozerBeanMapper(configuration)___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,dozer,thread,context,class,loader,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,dozer,thread,context,class,loader,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1440615344;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        GlobalSettings settings = GlobalSettings.getInstance()__        try {_            log.info("Configuring GlobalSettings to use Camel classloader: {}", DozerThreadContextClassLoader.class.getName())__            Field field = settings.getClass().getDeclaredField("classLoaderBeanName")__            ReflectionHelper.setField(field, settings, DozerThreadContextClassLoader.class.getName())__        } catch (Exception e) {_            throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(), e)__        }__        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            DozerBeanMapper mapper = createDozerBeanMapper(configuration)___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,global,settings,settings,global,settings,get,instance,try,log,info,configuring,global,settings,to,use,camel,classloader,dozer,thread,context,class,loader,class,get,name,field,field,settings,get,class,get,declared,field,class,loader,bean,name,reflection,helper,set,field,field,settings,dozer,thread,context,class,loader,class,get,name,catch,exception,e,throw,new,illegal,state,exception,cannot,configure,dozer,global,settings,to,use,camel,to,dozer,class,resolver,adapter,as,classloader,due,e,get,message,e,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1453976756;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            DozerBeanMapper mapper = createDozerBeanMapper(configuration)___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,create,dozer,bean,mapper,configuration,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1502258218;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1523994287;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1532727141;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1532727961;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1537290824;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1540108163;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1547716072;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration);1548175645;Creates a <code>DozerTypeConverter</code> using the given_{@link DozerBeanMapperConfiguration} configuration.__@param camelContext the context to register the_{@link DozerTypeConverter} in__@param configuration dozer mapping bean configuration.;public DozerTypeConverterLoader(CamelContext camelContext, DozerBeanMapperConfiguration configuration) {_        ClassLoader tccl = Thread.currentThread().getContextClassLoader()__        try {_            ClassLoader appcl = camelContext.getApplicationContextClassLoader()__            if (appcl != null) {_                Thread.currentThread().setContextClassLoader(appcl)__            }_            log.info("Using DozerBeanMapperConfiguration: {}", configuration)__            MapperFactory factory = new MapperFactory(camelContext, configuration)__            Mapper mapper = factory.create()___            this.camelContext = camelContext__            this.mapper = mapper__            this.configuration = configuration___            camelContext.addService(this)__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            Thread.currentThread().setContextClassLoader(tccl)__        }_    };creates,a,code,dozer,type,converter,code,using,the,given,link,dozer,bean,mapper,configuration,configuration,param,camel,context,the,context,to,register,the,link,dozer,type,converter,in,param,configuration,dozer,mapping,bean,configuration;public,dozer,type,converter,loader,camel,context,camel,context,dozer,bean,mapper,configuration,configuration,class,loader,tccl,thread,current,thread,get,context,class,loader,try,class,loader,appcl,camel,context,get,application,context,class,loader,if,appcl,null,thread,current,thread,set,context,class,loader,appcl,log,info,using,dozer,bean,mapper,configuration,configuration,mapper,factory,factory,new,mapper,factory,camel,context,configuration,mapper,mapper,factory,create,this,camel,context,camel,context,this,mapper,mapper,this,configuration,configuration,camel,context,add,service,this,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,thread,current,thread,set,context,class,loader,tccl
DozerTypeConverterLoader -> protected DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1377849839;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;protected DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;protected,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> protected DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1392400400;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;protected DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;protected,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
DozerTypeConverterLoader -> protected DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration);1405374721;Creates a {@link DozerBeanMapper} from the given configuration.__@param configuration  the dozer bean mapper configuration._@return the created mapper;protected DozerBeanMapper createDozerBeanMapper(DozerBeanMapperConfiguration configuration) {_        DozerBeanMapper mapper__        if (configuration.getMappingFiles() != null) {_            mapper = new DozerBeanMapper(configuration.getMappingFiles())__        } else {_            mapper = new DozerBeanMapper()__        }_        if (configuration.getCustomConverters() != null) {_            mapper.setCustomConverters(configuration.getCustomConverters())__        }_        if (configuration.getEventListeners() != null) {_            mapper.setEventListeners(configuration.getEventListeners())__        }_        if (configuration.getCustomConvertersWithId() != null) {_            mapper.setCustomConvertersWithId(configuration.getCustomConvertersWithId())__        }_        if (configuration.getCustomFieldMapper() != null) {_            mapper.setCustomFieldMapper(configuration.getCustomFieldMapper())__        }_        return mapper__    };creates,a,link,dozer,bean,mapper,from,the,given,configuration,param,configuration,the,dozer,bean,mapper,configuration,return,the,created,mapper;protected,dozer,bean,mapper,create,dozer,bean,mapper,dozer,bean,mapper,configuration,configuration,dozer,bean,mapper,mapper,if,configuration,get,mapping,files,null,mapper,new,dozer,bean,mapper,configuration,get,mapping,files,else,mapper,new,dozer,bean,mapper,if,configuration,get,custom,converters,null,mapper,set,custom,converters,configuration,get,custom,converters,if,configuration,get,event,listeners,null,mapper,set,event,listeners,configuration,get,event,listeners,if,configuration,get,custom,converters,with,id,null,mapper,set,custom,converters,with,id,configuration,get,custom,converters,with,id,if,configuration,get,custom,field,mapper,null,mapper,set,custom,field,mapper,configuration,get,custom,field,mapper,return,mapper
